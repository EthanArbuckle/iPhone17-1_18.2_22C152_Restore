void ProShade::BinaryOp<ProShade::Multiply>::clone()
{
  operator new();
}

void sub_1B7AC3F68(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Multiply>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  v5 = (unsigned int *)(*(void *)(a2 + 16) + 144);
  v6 = *(unsigned int **)(a2 + 16);

  return ProShade::BinaryOp<ProShade::Multiply>::computeBinary(v6, v5, a3);
}

void virtual thunk to'ProShade::BinaryOp<ProShade::Multiply>::~BinaryOp(void *a1)
{
  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1F111FB58;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1F111FC10;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1F111FC70;
  v1[14].var0 = (PC_Sp_counted_base *)off_1F111FD28;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1F111FB58;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1F111FC10;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1F111FC70;
  v1[14].var0 = (PC_Sp_counted_base *)off_1F111FD28;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::BinaryOp<ProShade::Multiply>::BinaryOp(uint64_t a1, PCShared_base *a2, PCShared_base *a3, int a4)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F111FC30);
  *(void *)a1 = &unk_1F111FB58;
  *(void *)(a1 + 112) = &unk_1F111FC10;
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 48), a2);
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 80), a3);
  int v8 = ProShade::Multiply::resultShape(*((unsigned int *)a2 + 7), *((unsigned int *)a3 + 7));
  int v9 = *((_DWORD *)a2 + 6);
  if (v9 <= *((_DWORD *)a3 + 6)) {
    int v9 = *((_DWORD *)a3 + 6);
  }
  *(_DWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B7AC43A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 72));
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v4 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Multiply>::BinaryOp(uint64_t a1)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F111FC30);
  *(void *)a1 = &unk_1F111FB58;
  *(void *)(a1 + 112) = &unk_1F111FC10;
  *(void *)(a1 + 48) = &unk_1F11193B8;
  *(void *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)(a1 + 80) = &unk_1F11193B8;
  *(void *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B7AC4540(_Unwind_Exception *a1)
{
  uint64_t v8 = v4;
  void *v7 = v8;
  PCSharedCount::~PCSharedCount(v5);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v6 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Divide>::computeBinary(const PCString *a1, const PCString *a2, uint64_t a3)
{
  if (SLODWORD(a1->var0) > 1)
  {
    if (LODWORD(a1->var0) != 2) {
      return ProShade::computeBinaryType<ProShade::Divide,double>((unsigned int *)a1, (unsigned int *)a2, a3);
    }
    int var0 = (int)a2->var0;
  }
  else
  {
    int var0 = (int)a2->var0;
    if (SLODWORD(a2->var0) < 2)
    {
      ProShade::computeBinaryType<ProShade::Divide,BOOL>(a1, a2, a3);
      return result;
    }
  }
  if (var0 <= 2)
  {
    ProShade::computeBinaryType<ProShade::Divide,int>((unsigned int *)a1, (unsigned int *)a2, a3);
    return result;
  }
  return ProShade::computeBinaryType<ProShade::Divide,double>((unsigned int *)a1, (unsigned int *)a2, a3);
}

BOOL ProShade::Divide::simplify(const PCSharedCount *a1, uint64_t a2, uint64_t a3)
{
  BOOL isZero = ProShade::isZero((uint64_t)a1);
  if (isZero)
  {
    ProShade::VarT<ProShade::Node>::operator=(a3, a1);
  }
  else if (ProShade::isZero(a2))
  {
    ProShade::VarT<ProShade::Node>::repr((uint64_t)a1);
    operator+(&v10, "/", &v11);
    ProShade::VarT<ProShade::Node>::repr(a2);
    operator+(&v11, &v9, &v12);
    ProShade::Error<PCDivideByZeroException>::raise<LiString>((OZChannelBase *)&v12, v8);
  }
  return isZero;
}

void sub_1B7AC466C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uint *a9, atomic_uint *a10, atomic_uint *a11, atomic_uint *a12)
{
  if (a12 && atomic_fetch_add(a12 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a12 = 0;
    free(a12 - 3);
  }
  if (a9 && atomic_fetch_add(a9 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a9 = 0;
    free(a9 - 3);
  }
  if (a11 && atomic_fetch_add(a11 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a11 = 0;
    free(a11 - 3);
  }
  if (a10)
  {
    if (atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a10 = 0;
      free(a10 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::BinaryOp(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F111FEA8);
  *(void *)a1 = &unk_1F111FDD0;
  *(void *)(a1 + 112) = &unk_1F111FE88;
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 48), a2);
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 80), a3);
  int v7 = *((_DWORD *)a2 + 7);
  int v8 = *((_DWORD *)a3 + 7);
  if (v7 != 1)
  {
    if (v8 == 1)
    {
      int v8 = *((_DWORD *)a2 + 7);
    }
    else
    {
      BOOL v9 = v7 == v8;
      int v8 = *((_DWORD *)a2 + 7);
      if (!v9) {
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v6);
      }
    }
  }
  int v10 = *((_DWORD *)a2 + 6);
  if (v10 <= *((_DWORD *)a3 + 6)) {
    int v10 = *((_DWORD *)a3 + 6);
  }
  *(_DWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 28) = v8;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B7AC48AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 72));
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v4 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Divide,BOOL>(const PCString *a1, const PCString *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  uint64_t v8 = ProShade::shapeGetSize(HIDWORD(a2->var0), v7);
  int v10 = v8;
  var0_low = (void *)LODWORD(a1->var0);
  if (var0_low != 1)
  {
    MEMORY[0x1F4188790](v8);
    v13 = (BOOL *)&v24 - v12;
    bzero((char *)&v24 - v12, v14);
    uint64_t v8 = (uint64_t)ProShade::copyData(var0_low, a1 + 2, 1, v13, Size);
  }
  v15 = (void *)LODWORD(a2->var0);
  if (v15 != 1)
  {
    MEMORY[0x1F4188790](v8);
    v17 = (BOOL *)&v24 - v16;
    bzero((char *)&v24 - v16, v18);
    ProShade::copyData(v15, a2 + 2, 1, v17, v10);
  }
  int var0_high = HIDWORD(a1->var0);
  if (var0_high != HIDWORD(a2->var0)) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  }
  ProShade::Value::set(a3, (const PCString *)1, var0_high);
  BOOL result = ProShade::shapeIsVector(HIDWORD(a1->var0));
  int v22 = HIDWORD(a1->var0) == 1 || result;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v26, "not implemented yet");
    PCString::PCString(&v25, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v26, &v25, 426);
    *(void *)exception = &unk_1F10B1208;
  }
  if (Size >= 1) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"/ operator doesn't apply to BOOL", v21);
  }
  return result;
}

void sub_1B7AC4B58(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2) {
    __cxa_free_exception(v1);
  }
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Divide,int>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  uint64_t v8 = ProShade::shapeGetSize(a2[1], v7);
  int v10 = v8;
  v11 = (void *)*a1;
  if (v11 == 2)
  {
    uint64_t v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v12 = (BOOL *)&v28 - v13;
    bzero((char *)&v28 - v13, v14);
    uint64_t v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 2, v12, Size);
  }
  v15 = (void *)*a2;
  if (v15 == 2)
  {
    uint64_t v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v16 = (BOOL *)&v28 - v17;
    bzero((char *)&v28 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 2, v16, v10);
  }
  int v19 = a1[1];
  if (v19 != a2[1]) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  }
  ProShade::Value::set(a3, (const PCString *)2, v19);
  BOOL result = ProShade::shapeIsVector(a1[1]);
  int v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v30, "not implemented yet");
    PCString::PCString(&v29, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v30, &v29, 426);
    *(void *)exception = &unk_1F10B1208;
  }
  if (Size >= 1)
  {
    int v22 = (int *)(a3 + 16);
    uint64_t v23 = Size;
    do
    {
      int v25 = *(_DWORD *)v12;
      v12 += 4;
      int v24 = v25;
      int v26 = *(_DWORD *)v16;
      v16 += 4;
      *v22++ = v24 / v26;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B7AC4DE4(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2) {
    __cxa_free_exception(v1);
  }
  _Unwind_Resume(a1);
}

double ProShade::computeBinaryType<ProShade::Divide,double>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  uint64_t v8 = ProShade::shapeGetSize(a2[1], v7);
  int v10 = v8;
  v11 = (void *)*a1;
  if (v11 == 3)
  {
    uint64_t v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v12 = (BOOL *)&v29 - v13;
    bzero((char *)&v29 - v13, v14);
    uint64_t v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 3, v12, Size);
  }
  v15 = (void *)*a2;
  if (v15 == 3)
  {
    uint64_t v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v16 = (BOOL *)&v29 - v17;
    bzero((char *)&v29 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 3, v16, v10);
  }
  int v19 = a1[1];
  if (v19 != a2[1]) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  }
  ProShade::Value::set(a3, (const PCString *)3, v19);
  BOOL IsVector = ProShade::shapeIsVector(a1[1]);
  int v22 = a1[1] == 1 || IsVector;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v31, "not implemented yet");
    PCString::PCString(&v30, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v31, &v30, 426);
    *(void *)exception = &unk_1F10B1208;
  }
  if (Size >= 1)
  {
    uint64_t v23 = (double *)(a3 + 16);
    uint64_t v24 = Size;
    do
    {
      double v25 = *(double *)v12;
      v12 += 8;
      double v26 = v25;
      double v27 = *(double *)v16;
      v16 += 8;
      double result = v26 / v27;
      *v23++ = result;
      --v24;
    }
    while (v24);
  }
  return result;
}

void sub_1B7AC5070(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2) {
    __cxa_free_exception(v1);
  }
  _Unwind_Resume(a1);
}

void ProShade::Error<PCDivideByZeroException>::raise<LiString>(OZChannelBase *a1, const PCString *a2)
{
  OZChannelBase::setRangeName(a1, a2);
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  if (a1->var0) {
    int var0 = (const char *)a1->var0;
  }
  else {
    int var0 = "";
  }
  PCString::PCString(&v5, var0);
  PCException::PCException(exception, &v5);
  *(void *)exception = &unk_1F10C3980;
}

void sub_1B7AC5148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F111FDD0;
  *(void *)(a1 + 112) = &unk_1F111FE88;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F111FEE8;
  *(void *)(a1 + 112) = off_1F111FFA0;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::Divide>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F111FDD0;
  *(void *)(a1 + 112) = &unk_1F111FE88;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F111FEE8;
  *(void *)(a1 + 112) = off_1F111FFA0;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::BinaryOp<ProShade::Divide>::repr(uint64_t a1@<X0>, void *a2@<X8>)
{
  ProShade::VarT<ProShade::Node>::repr(a1 + 48);
  if (v28) {
    int v4 = *((_DWORD *)v28 - 2);
  }
  else {
    int v4 = 0;
  }
  PCString v5 = malloc_type_malloc(v4 + 14, 0x8903763CuLL);
  uint64_t v6 = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  *((unsigned char *)v5 + 12) = 40;
  int v7 = v5 + 3;
  v5[1] = v6;
  memcpy((char *)v5 + 13, v28, v4);
  v7[v6] = 0;
  atomic_fetch_add(v5, 1u);
  double v26 = v5;
  size_t v8 = (int)v5[1];
  BOOL v9 = (unsigned int *)malloc_type_malloc(v8 + 14, 0x8903763CuLL);
  atomic_store(1u, v9);
  int v10 = v9 + 3;
  atomic_store(0, v9);
  v9[1] = v8 + 1;
  v9[2] = v8 + 2;
  memcpy(v9 + 3, v7, v8);
  *((unsigned char *)v10 + v8) = 32;
  *((unsigned char *)v10 + v8 + 1) = 0;
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  double v25 = v9;
  size_t v11 = (int)v9[1];
  uint64_t v12 = (unsigned int *)malloc_type_malloc(v11 + 14, 0x8903763CuLL);
  v12[1] = v11 + 1;
  v12[2] = v11 + 2;
  atomic_store(1u, v12);
  uint64_t v13 = v12 + 3;
  atomic_store(0, v12);
  memcpy(v12 + 3, v9 + 3, v11);
  *((unsigned char *)v13 + v11) = 47;
  *((unsigned char *)v13 + v11 + 1) = 0;
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  size_t v14 = (int)v12[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  uint64_t v24 = a2;
  atomic_store(1u, v15);
  uint64_t v16 = v15 + 3;
  atomic_store(0, v15);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  memcpy(v15 + 3, v12 + 3, v14);
  v16[v14] = 32;
  v16[v14 + 1] = 0;
  atomic_fetch_add((atomic_uint *volatile)v15, 1u);
  ProShade::VarT<ProShade::Node>::repr(a1 + 80);
  size_t v17 = (int)v15[1];
  if (v27) {
    int v18 = *((_DWORD *)v27 - 2);
  }
  else {
    int v18 = 0;
  }
  size_t v19 = v17 + v18;
  v20 = (unsigned int *)malloc_type_malloc(v19 + 13, 0x8903763CuLL);
  v20[1] = v19;
  v20[2] = v19 + 1;
  atomic_store(1u, v20);
  atomic_store(0, v20);
  memcpy(v20 + 3, v16, v17);
  memcpy((char *)v20 + v17 + 12, v27, v18);
  *((unsigned char *)v20 + v19 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  size_t v21 = (int)v20[1];
  int v22 = (unsigned int *)malloc_type_malloc(v21 + 14, 0x8903763CuLL);
  atomic_store(1u, v22);
  uint64_t v23 = v22 + 3;
  atomic_store(0, v22);
  v22[1] = v21 + 1;
  v22[2] = v21 + 2;
  memcpy(v22 + 3, v20 + 3, v21);
  *((unsigned char *)v23 + v21) = 41;
  *((unsigned char *)v23 + v21 + 1) = 0;
  *uint64_t v24 = v22 + 3;
  atomic_fetch_add((atomic_uint *volatile)v22, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1) {
    free(v20);
  }
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 - 3, 0xFFFFFFFF) == 1)
  {
    *double v27 = 0;
    free(v27 - 12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1) {
    free(v12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1) {
    free(v25);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1) {
    free(v26);
  }
  if (v28)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v28 - 3, 0xFFFFFFFF) == 1)
    {
      *uint64_t v28 = 0;
      free(v28 - 12);
    }
  }
}

void sub_1B7AC5744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, atomic_uint *a13, atomic_uint *a14)
{
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1) {
    free(v16);
  }
  if (a13 && atomic_fetch_add(a13 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a13 = 0;
    free(a13 - 3);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1) {
    free(v14);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1) {
    free(a11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1) {
    free(a12);
  }
  if (a14)
  {
    if (atomic_fetch_add(a14 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a14 = 0;
      free(a14 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Divide>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "BinaryOp ");
  int v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  PCString v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  uint64_t v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((unsigned char *)v6 + v4) = 47;
  *((unsigned char *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *size_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7AC5964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Divide>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::BinaryOp<ProShade::Divide>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "/");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::Divide>::apply(PCShared_base *a1@<X0>, void (***a2)(void *__return_ptr, void, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  (**a2)(v8, a2, (uint64_t)a1 + 48);
  (**a2)(v6, a2, (uint64_t)a1 + 80);
  if (v8[2] != *((void *)a1 + 8) || v6[2] != *((void *)a1 + 12)) {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::VarT(a3, a1);
  v6[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v7);
  v8[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v9);
}

void sub_1B7AC5B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v6.int var0 = va_arg(va1, PC_Sp_counted_base *);
  size_t v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  MEMORY[0x1BA9BFBA0](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  size_t v8 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::Divide>::clone()
{
}

void sub_1B7AC5C28(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Divide>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  __n128 v5 = (const PCString *)(*(void *)(a2 + 16) + 144);
  PCSharedCount v6 = *(const PCString **)(a2 + 16);

  return ProShade::BinaryOp<ProShade::Divide>::computeBinary(v6, v5, a3);
}

void virtual thunk to'ProShade::BinaryOp<ProShade::Divide>::~BinaryOp(void *a1)
{
  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F111FDD0;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F111FE88;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F111FEE8;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F111FFA0;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F111FDD0;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F111FE88;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F111FEE8;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F111FFA0;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::BinaryOp(uint64_t a1, PCShared_base *a2, PCShared_base *a3, int a4)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F111FEA8);
  *(void *)a1 = &unk_1F111FDD0;
  *(void *)(a1 + 112) = &unk_1F111FE88;
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 48), a2);
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 80), a3);
  int v9 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a3 + 7);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      int v10 = *((_DWORD *)a2 + 7);
    }
    else
    {
      BOOL v11 = v9 == v10;
      int v10 = *((_DWORD *)a2 + 7);
      if (!v11) {
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
      }
    }
  }
  int v12 = *((_DWORD *)a2 + 6);
  if (v12 <= *((_DWORD *)a3 + 6)) {
    int v12 = *((_DWORD *)a3 + 6);
  }
  *(_DWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B7AC608C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 72));
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v4 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::BinaryOp(uint64_t a1)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F111FEA8);
  *(void *)a1 = &unk_1F111FDD0;
  *(void *)(a1 + 112) = &unk_1F111FE88;
  *(void *)(a1 + 48) = &unk_1F11193B8;
  *(void *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)(a1 + 80) = &unk_1F11193B8;
  *(void *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B7AC622C(_Unwind_Exception *a1)
{
  uint64_t v8 = v4;
  void *v7 = v8;
  PCSharedCount::~PCSharedCount(v5);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v6 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Equals>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F1120048;
  *(void *)(a1 + 112) = &unk_1F1120100;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F1120160;
  *(void *)(a1 + 112) = off_1F1120218;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::Equals>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F1120048;
  *(void *)(a1 + 112) = &unk_1F1120100;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F1120160;
  *(void *)(a1 + 112) = off_1F1120218;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::BinaryOp<ProShade::Equals>::repr(uint64_t a1@<X0>, void *a2@<X8>)
{
  ProShade::VarT<ProShade::Node>::repr(a1 + 48);
  if (v28) {
    int v4 = *((_DWORD *)v28 - 2);
  }
  else {
    int v4 = 0;
  }
  __n128 v5 = malloc_type_malloc(v4 + 14, 0x8903763CuLL);
  uint64_t v6 = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  *((unsigned char *)v5 + 12) = 40;
  PCSharedCount v7 = v5 + 3;
  v5[1] = v6;
  memcpy((char *)v5 + 13, v28, v4);
  v7[v6] = 0;
  atomic_fetch_add(v5, 1u);
  double v26 = v5;
  size_t v8 = (int)v5[1];
  int v9 = (unsigned int *)malloc_type_malloc(v8 + 14, 0x8903763CuLL);
  atomic_store(1u, v9);
  int v10 = v9 + 3;
  atomic_store(0, v9);
  v9[1] = v8 + 1;
  v9[2] = v8 + 2;
  memcpy(v9 + 3, v7, v8);
  *((unsigned char *)v10 + v8) = 32;
  *((unsigned char *)v10 + v8 + 1) = 0;
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  double v25 = v9;
  size_t v11 = (int)v9[1];
  int v12 = (unsigned int *)malloc_type_malloc(v11 + 15, 0x8903763CuLL);
  v12[1] = v11 + 2;
  v12[2] = v11 + 3;
  atomic_store(1u, v12);
  uint64_t v13 = v12 + 3;
  atomic_store(0, v12);
  memcpy(v12 + 3, v9 + 3, v11);
  *(_WORD *)((char *)v13 + v11) = 15677;
  *((unsigned char *)v13 + v11 + 2) = 0;
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  size_t v14 = (int)v12[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  uint64_t v24 = a2;
  atomic_store(1u, v15);
  uint64_t v16 = v15 + 3;
  atomic_store(0, v15);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  memcpy(v15 + 3, v12 + 3, v14);
  v16[v14] = 32;
  v16[v14 + 1] = 0;
  atomic_fetch_add((atomic_uint *volatile)v15, 1u);
  ProShade::VarT<ProShade::Node>::repr(a1 + 80);
  size_t v17 = (int)v15[1];
  if (v27) {
    int v18 = *((_DWORD *)v27 - 2);
  }
  else {
    int v18 = 0;
  }
  size_t v19 = v17 + v18;
  v20 = (unsigned int *)malloc_type_malloc(v19 + 13, 0x8903763CuLL);
  v20[1] = v19;
  v20[2] = v19 + 1;
  atomic_store(1u, v20);
  atomic_store(0, v20);
  memcpy(v20 + 3, v16, v17);
  memcpy((char *)v20 + v17 + 12, v27, v18);
  *((unsigned char *)v20 + v19 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  size_t v21 = (int)v20[1];
  int v22 = (unsigned int *)malloc_type_malloc(v21 + 14, 0x8903763CuLL);
  atomic_store(1u, v22);
  uint64_t v23 = v22 + 3;
  atomic_store(0, v22);
  v22[1] = v21 + 1;
  v22[2] = v21 + 2;
  memcpy(v22 + 3, v20 + 3, v21);
  *((unsigned char *)v23 + v21) = 41;
  *((unsigned char *)v23 + v21 + 1) = 0;
  *uint64_t v24 = v22 + 3;
  atomic_fetch_add((atomic_uint *volatile)v22, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1) {
    free(v20);
  }
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 - 3, 0xFFFFFFFF) == 1)
  {
    *double v27 = 0;
    free(v27 - 12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1) {
    free(v12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1) {
    free(v25);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1) {
    free(v26);
  }
  if (v28)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v28 - 3, 0xFFFFFFFF) == 1)
    {
      *uint64_t v28 = 0;
      free(v28 - 12);
    }
  }
}

void sub_1B7AC683C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, atomic_uint *a13, atomic_uint *a14)
{
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1) {
    free(v16);
  }
  if (a13 && atomic_fetch_add(a13 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a13 = 0;
    free(a13 - 3);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1) {
    free(v14);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1) {
    free(a11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1) {
    free(a12);
  }
  if (a14)
  {
    if (atomic_fetch_add(a14 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a14 = 0;
      free(a14 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Equals>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "BinaryOp ");
  int v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  __n128 v5 = (unsigned int *)malloc_type_malloc(v3 + 15, 0x8903763CuLL);
  v5[1] = v4 + 2;
  v5[2] = v4 + 3;
  atomic_store(1u, v5);
  uint64_t v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(_WORD *)((char *)v6 + v4) = 15677;
  *((unsigned char *)v6 + v4 + 2) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *size_t v8 = 0;
    if (v8) {
      PCSharedCount v7 = v8 - 12;
    }
    else {
      PCSharedCount v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7AC6A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Equals>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "==");
}

int8x8_t *ProShade::BinaryOp<ProShade::Equals>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "==");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::Equals>::apply(PCShared_base *a1@<X0>, void (***a2)(void *__return_ptr, void, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  (**a2)(v8, a2, (uint64_t)a1 + 48);
  (**a2)(v6, a2, (uint64_t)a1 + 80);
  if (v8[2] != *((void *)a1 + 8) || v6[2] != *((void *)a1 + 12)) {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::VarT(a3, a1);
  v6[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v7);
  v8[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v9);
}

void sub_1B7AC6C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v6.int var0 = va_arg(va1, PC_Sp_counted_base *);
  size_t v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  MEMORY[0x1BA9BFBA0](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  size_t v8 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::Equals>::clone()
{
}

void sub_1B7AC6D20(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

BOOL ProShade::BinaryOp<ProShade::Equals>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  __n128 v5 = (unsigned int *)(*(void *)(a2 + 16) + 144);
  PCSharedCount v6 = *(unsigned int **)(a2 + 16);

  return ProShade::computeBinaryType<ProShade::Equals,BOOL>(v6, v5, a3);
}

void virtual thunk to'ProShade::BinaryOp<ProShade::Equals>::~BinaryOp(void *a1)
{
  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1120048;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1120100;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F1120160;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F1120218;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1120048;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1120100;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F1120160;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F1120218;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::BinaryOp<ProShade::Equals>::BinaryOp(uint64_t a1, PCShared_base *a2, PCShared_base *a3, int a4)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1120120);
  *(void *)a1 = &unk_1F1120048;
  *(void *)(a1 + 112) = &unk_1F1120100;
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 48), a2);
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 80), a3);
  int v9 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a3 + 7);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      int v10 = *((_DWORD *)a2 + 7);
    }
    else
    {
      BOOL v11 = v9 == v10;
      int v10 = *((_DWORD *)a2 + 7);
      if (!v11) {
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
      }
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B7AC7178(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 72));
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v4 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Equals>::BinaryOp(uint64_t a1)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1120120);
  *(void *)a1 = &unk_1F1120048;
  *(void *)(a1 + 112) = &unk_1F1120100;
  *(void *)(a1 + 48) = &unk_1F11193B8;
  *(void *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)(a1 + 80) = &unk_1F11193B8;
  *(void *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B7AC7318(_Unwind_Exception *a1)
{
  uint64_t v8 = v4;
  void *v7 = v8;
  PCSharedCount::~PCSharedCount(v5);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v6 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Equals,BOOL>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  uint64_t v8 = ProShade::shapeGetSize(a2[1], v7);
  int v10 = v8;
  BOOL v11 = (void *)*a1;
  if (v11 == 1)
  {
    int v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    int v12 = (BOOL *)&v28 - v13;
    bzero((char *)&v28 - v13, v14);
    uint64_t v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 1, v12, Size);
  }
  v15 = (void *)*a2;
  if (v15 == 1)
  {
    uint64_t v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v16 = (BOOL *)&v28 - v17;
    bzero((char *)&v28 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 1, v16, v10);
  }
  int v19 = a1[1];
  if (v19 != a2[1]) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  }
  ProShade::Value::set(a3, (const PCString *)1, v19);
  BOOL result = ProShade::shapeIsVector(a1[1]);
  int v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v30, "not implemented yet");
    PCString::PCString(&v29, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v30, &v29, 426);
    *(void *)exception = &unk_1F10B1208;
  }
  if (Size >= 1)
  {
    int v22 = (unsigned char *)(a3 + 16);
    uint64_t v23 = Size;
    do
    {
      BOOL v24 = *v12++;
      BOOL v25 = !v24;
      BOOL v26 = *v16++;
      *v22++ = v25 ^ v26;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B7AC75B4(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2) {
    __cxa_free_exception(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::GreaterThan>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F11202C0;
  *(void *)(a1 + 112) = &unk_1F1120378;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F11203D8;
  *(void *)(a1 + 112) = off_1F1120490;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::GreaterThan>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F11202C0;
  *(void *)(a1 + 112) = &unk_1F1120378;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F11203D8;
  *(void *)(a1 + 112) = off_1F1120490;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::repr(uint64_t a1@<X0>, void *a2@<X8>)
{
  ProShade::VarT<ProShade::Node>::repr(a1 + 48);
  if (v28) {
    int v4 = *((_DWORD *)v28 - 2);
  }
  else {
    int v4 = 0;
  }
  __n128 v5 = malloc_type_malloc(v4 + 14, 0x8903763CuLL);
  uint64_t v6 = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  *((unsigned char *)v5 + 12) = 40;
  PCSharedCount v7 = v5 + 3;
  v5[1] = v6;
  memcpy((char *)v5 + 13, v28, v4);
  v7[v6] = 0;
  atomic_fetch_add(v5, 1u);
  BOOL v26 = v5;
  size_t v8 = (int)v5[1];
  int v9 = (unsigned int *)malloc_type_malloc(v8 + 14, 0x8903763CuLL);
  atomic_store(1u, v9);
  int v10 = v9 + 3;
  atomic_store(0, v9);
  v9[1] = v8 + 1;
  v9[2] = v8 + 2;
  memcpy(v9 + 3, v7, v8);
  *((unsigned char *)v10 + v8) = 32;
  *((unsigned char *)v10 + v8 + 1) = 0;
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  BOOL v25 = v9;
  size_t v11 = (int)v9[1];
  int v12 = (unsigned int *)malloc_type_malloc(v11 + 14, 0x8903763CuLL);
  v12[1] = v11 + 1;
  v12[2] = v11 + 2;
  atomic_store(1u, v12);
  uint64_t v13 = v12 + 3;
  atomic_store(0, v12);
  memcpy(v12 + 3, v9 + 3, v11);
  *((unsigned char *)v13 + v11) = 62;
  *((unsigned char *)v13 + v11 + 1) = 0;
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  size_t v14 = (int)v12[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  BOOL v24 = a2;
  atomic_store(1u, v15);
  uint64_t v16 = v15 + 3;
  atomic_store(0, v15);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  memcpy(v15 + 3, v12 + 3, v14);
  v16[v14] = 32;
  v16[v14 + 1] = 0;
  atomic_fetch_add((atomic_uint *volatile)v15, 1u);
  ProShade::VarT<ProShade::Node>::repr(a1 + 80);
  size_t v17 = (int)v15[1];
  if (v27) {
    int v18 = *((_DWORD *)v27 - 2);
  }
  else {
    int v18 = 0;
  }
  size_t v19 = v17 + v18;
  v20 = (unsigned int *)malloc_type_malloc(v19 + 13, 0x8903763CuLL);
  v20[1] = v19;
  v20[2] = v19 + 1;
  atomic_store(1u, v20);
  atomic_store(0, v20);
  memcpy(v20 + 3, v16, v17);
  memcpy((char *)v20 + v17 + 12, v27, v18);
  *((unsigned char *)v20 + v19 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  size_t v21 = (int)v20[1];
  int v22 = (unsigned int *)malloc_type_malloc(v21 + 14, 0x8903763CuLL);
  atomic_store(1u, v22);
  uint64_t v23 = v22 + 3;
  atomic_store(0, v22);
  v22[1] = v21 + 1;
  v22[2] = v21 + 2;
  memcpy(v22 + 3, v20 + 3, v21);
  *((unsigned char *)v23 + v21) = 41;
  *((unsigned char *)v23 + v21 + 1) = 0;
  *BOOL v24 = v22 + 3;
  atomic_fetch_add((atomic_uint *volatile)v22, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1) {
    free(v20);
  }
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 - 3, 0xFFFFFFFF) == 1)
  {
    *double v27 = 0;
    free(v27 - 12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1) {
    free(v12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1) {
    free(v25);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1) {
    free(v26);
  }
  if (v28)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v28 - 3, 0xFFFFFFFF) == 1)
    {
      *uint64_t v28 = 0;
      free(v28 - 12);
    }
  }
}

void sub_1B7AC7BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, atomic_uint *a13, atomic_uint *a14)
{
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1) {
    free(v16);
  }
  if (a13 && atomic_fetch_add(a13 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a13 = 0;
    free(a13 - 3);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1) {
    free(v14);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1) {
    free(a11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1) {
    free(a12);
  }
  if (a14)
  {
    if (atomic_fetch_add(a14 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a14 = 0;
      free(a14 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "BinaryOp ");
  int v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  __n128 v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  uint64_t v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((unsigned char *)v6 + v4) = 62;
  *((unsigned char *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *size_t v8 = 0;
    if (v8) {
      PCSharedCount v7 = v8 - 12;
    }
    else {
      PCSharedCount v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7AC7DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::BinaryOp<ProShade::GreaterThan>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, ">");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::apply(PCShared_base *a1@<X0>, void (***a2)(void *__return_ptr, void, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  (**a2)(v8, a2, (uint64_t)a1 + 48);
  (**a2)(v6, a2, (uint64_t)a1 + 80);
  if (v8[2] != *((void *)a1 + 8) || v6[2] != *((void *)a1 + 12)) {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::VarT(a3, a1);
  v6[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v7);
  v8[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v9);
}

void sub_1B7AC7FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v6.int var0 = va_arg(va1, PC_Sp_counted_base *);
  size_t v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  MEMORY[0x1BA9BFBA0](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  size_t v8 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::clone()
{
}

void sub_1B7AC80A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

BOOL ProShade::BinaryOp<ProShade::GreaterThan>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  __n128 v5 = (unsigned int *)(*(void *)(a2 + 16) + 144);
  PCSharedCount v6 = *(unsigned int **)(a2 + 16);

  return ProShade::computeBinaryType<ProShade::GreaterThan,BOOL>(v6, v5, a3);
}

void virtual thunk to'ProShade::BinaryOp<ProShade::GreaterThan>::~BinaryOp(void *a1)
{
  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F11202C0;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1120378;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F11203D8;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F1120490;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F11202C0;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1120378;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F11203D8;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F1120490;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp(uint64_t a1, PCShared_base *a2, PCShared_base *a3, int a4)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1120398);
  *(void *)a1 = &unk_1F11202C0;
  *(void *)(a1 + 112) = &unk_1F1120378;
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 48), a2);
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 80), a3);
  int v9 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a3 + 7);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      int v10 = *((_DWORD *)a2 + 7);
    }
    else
    {
      BOOL v11 = v9 == v10;
      int v10 = *((_DWORD *)a2 + 7);
      if (!v11) {
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
      }
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B7AC8500(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 72));
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v4 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp(uint64_t a1)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1120398);
  *(void *)a1 = &unk_1F11202C0;
  *(void *)(a1 + 112) = &unk_1F1120378;
  *(void *)(a1 + 48) = &unk_1F11193B8;
  *(void *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)(a1 + 80) = &unk_1F11193B8;
  *(void *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B7AC86A0(_Unwind_Exception *a1)
{
  uint64_t v8 = v4;
  void *v7 = v8;
  PCSharedCount::~PCSharedCount(v5);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v6 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::GreaterThan,BOOL>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  uint64_t v8 = ProShade::shapeGetSize(a2[1], v7);
  int v10 = v8;
  BOOL v11 = (void *)*a1;
  if (v11 == 1)
  {
    int v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    int v12 = (BOOL *)&v31 - v13;
    bzero((char *)&v31 - v13, v14);
    uint64_t v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 1, v12, Size);
  }
  v15 = (void *)*a2;
  if (v15 == 1)
  {
    uint64_t v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v16 = (BOOL *)&v31 - v17;
    bzero((char *)&v31 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 1, v16, v10);
  }
  int v19 = a1[1];
  if (v19 != a2[1]) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  }
  ProShade::Value::set(a3, (const PCString *)1, v19);
  BOOL result = ProShade::shapeIsVector(a1[1]);
  int v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v33, "not implemented yet");
    PCString::PCString(&v32, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v33, &v32, 426);
    *(void *)exception = &unk_1F10B1208;
  }
  if (Size >= 1)
  {
    int v22 = (char *)(a3 + 16);
    uint64_t v23 = Size;
    do
    {
      BOOL v25 = *v12++;
      BOOL v24 = v25;
      BOOL v27 = *v16++;
      BOOL v26 = v27;
      char v29 = v24 && !v26;
      *v22++ = v29;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B7AC8934(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2) {
    __cxa_free_exception(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::LessThanEquals>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F1120538;
  *(void *)(a1 + 112) = &unk_1F11205F0;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F1120650;
  *(void *)(a1 + 112) = off_1F1120708;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::~BinaryOp(uint64_t a1)
{
  *(void *)a1 = &unk_1F1120538;
  *(void *)(a1 + 112) = &unk_1F11205F0;
  *(void *)(a1 + 80) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(void *)(a1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)a1 = off_1F1120650;
  *(void *)(a1 + 112) = off_1F1120708;
  LiString::dec((LiString *)(a1 + 32));
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(unsigned char *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::repr(uint64_t a1@<X0>, void *a2@<X8>)
{
  ProShade::VarT<ProShade::Node>::repr(a1 + 48);
  if (v28) {
    int v4 = *((_DWORD *)v28 - 2);
  }
  else {
    int v4 = 0;
  }
  __n128 v5 = malloc_type_malloc(v4 + 14, 0x8903763CuLL);
  uint64_t v6 = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  *((unsigned char *)v5 + 12) = 40;
  PCSharedCount v7 = v5 + 3;
  v5[1] = v6;
  memcpy((char *)v5 + 13, v28, v4);
  v7[v6] = 0;
  atomic_fetch_add(v5, 1u);
  BOOL v26 = v5;
  size_t v8 = (int)v5[1];
  int v9 = (unsigned int *)malloc_type_malloc(v8 + 14, 0x8903763CuLL);
  atomic_store(1u, v9);
  int v10 = v9 + 3;
  atomic_store(0, v9);
  v9[1] = v8 + 1;
  v9[2] = v8 + 2;
  memcpy(v9 + 3, v7, v8);
  *((unsigned char *)v10 + v8) = 32;
  *((unsigned char *)v10 + v8 + 1) = 0;
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  BOOL v25 = v9;
  size_t v11 = (int)v9[1];
  int v12 = (unsigned int *)malloc_type_malloc(v11 + 15, 0x8903763CuLL);
  v12[1] = v11 + 2;
  v12[2] = v11 + 3;
  atomic_store(1u, v12);
  uint64_t v13 = v12 + 3;
  atomic_store(0, v12);
  memcpy(v12 + 3, v9 + 3, v11);
  *(_WORD *)((char *)v13 + v11) = 15676;
  *((unsigned char *)v13 + v11 + 2) = 0;
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  size_t v14 = (int)v12[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  BOOL v24 = a2;
  atomic_store(1u, v15);
  uint64_t v16 = v15 + 3;
  atomic_store(0, v15);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  memcpy(v15 + 3, v12 + 3, v14);
  v16[v14] = 32;
  v16[v14 + 1] = 0;
  atomic_fetch_add((atomic_uint *volatile)v15, 1u);
  ProShade::VarT<ProShade::Node>::repr(a1 + 80);
  size_t v17 = (int)v15[1];
  if (v27) {
    int v18 = *((_DWORD *)v27 - 2);
  }
  else {
    int v18 = 0;
  }
  size_t v19 = v17 + v18;
  v20 = (unsigned int *)malloc_type_malloc(v19 + 13, 0x8903763CuLL);
  v20[1] = v19;
  v20[2] = v19 + 1;
  atomic_store(1u, v20);
  atomic_store(0, v20);
  memcpy(v20 + 3, v16, v17);
  memcpy((char *)v20 + v17 + 12, v27, v18);
  *((unsigned char *)v20 + v19 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  size_t v21 = (int)v20[1];
  int v22 = (unsigned int *)malloc_type_malloc(v21 + 14, 0x8903763CuLL);
  atomic_store(1u, v22);
  uint64_t v23 = v22 + 3;
  atomic_store(0, v22);
  v22[1] = v21 + 1;
  v22[2] = v21 + 2;
  memcpy(v22 + 3, v20 + 3, v21);
  *((unsigned char *)v23 + v21) = 41;
  *((unsigned char *)v23 + v21 + 1) = 0;
  *BOOL v24 = v22 + 3;
  atomic_fetch_add((atomic_uint *volatile)v22, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1) {
    free(v20);
  }
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 - 3, 0xFFFFFFFF) == 1)
  {
    *BOOL v27 = 0;
    free(v27 - 12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1) {
    free(v12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1) {
    free(v25);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1) {
    free(v26);
  }
  if (v28)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v28 - 3, 0xFFFFFFFF) == 1)
    {
      *uint64_t v28 = 0;
      free(v28 - 12);
    }
  }
}

void sub_1B7AC8F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, atomic_uint *a13, atomic_uint *a14)
{
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1) {
    free(v16);
  }
  if (a13 && atomic_fetch_add(a13 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a13 = 0;
    free(a13 - 3);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1) {
    free(v14);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1) {
    free(a11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1) {
    free(a12);
  }
  if (a14)
  {
    if (atomic_fetch_add(a14 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a14 = 0;
      free(a14 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "BinaryOp ");
  int v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  __n128 v5 = (unsigned int *)malloc_type_malloc(v3 + 15, 0x8903763CuLL);
  v5[1] = v4 + 2;
  v5[2] = v4 + 3;
  atomic_store(1u, v5);
  uint64_t v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(_WORD *)((char *)v6 + v4) = 15676;
  *((unsigned char *)v6 + v4 + 2) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *size_t v8 = 0;
    if (v8) {
      PCSharedCount v7 = v8 - 12;
    }
    else {
      PCSharedCount v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7AC9164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "<=");
}

int8x8_t *ProShade::BinaryOp<ProShade::LessThanEquals>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "<=");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::apply(PCShared_base *a1@<X0>, void (***a2)(void *__return_ptr, void, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  (**a2)(v8, a2, (uint64_t)a1 + 48);
  (**a2)(v6, a2, (uint64_t)a1 + 80);
  if (v8[2] != *((void *)a1 + 8) || v6[2] != *((void *)a1 + 12)) {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::VarT(a3, a1);
  v6[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v7);
  v8[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v9);
}

void sub_1B7AC9354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v6.int var0 = va_arg(va1, PC_Sp_counted_base *);
  size_t v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  MEMORY[0x1BA9BFBA0](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  size_t v8 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::clone()
{
}

void sub_1B7AC9428(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

BOOL ProShade::BinaryOp<ProShade::LessThanEquals>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  __n128 v5 = (unsigned int *)(*(void *)(a2 + 16) + 144);
  PCSharedCount v6 = *(unsigned int **)(a2 + 16);

  return ProShade::computeBinaryType<ProShade::LessThanEquals,BOOL>(v6, v5, a3);
}

void virtual thunk to'ProShade::BinaryOp<ProShade::LessThanEquals>::~BinaryOp(void *a1)
{
  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1120538;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F11205F0;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F1120650;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F1120708;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)a1 + *(void *)(*a1 - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1120538;
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F11205F0;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F1120650;
  v1[14].int var0 = (PC_Sp_counted_base *)off_1F1120708;
  LiString::dec((LiString *)&v1[4]);
  v1[14].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp(uint64_t a1, PCShared_base *a2, PCShared_base *a3, int a4)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1120610);
  *(void *)a1 = &unk_1F1120538;
  *(void *)(a1 + 112) = &unk_1F11205F0;
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 48), a2);
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 80), a3);
  int v9 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a3 + 7);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      int v10 = *((_DWORD *)a2 + 7);
    }
    else
    {
      BOOL v11 = v9 == v10;
      int v10 = *((_DWORD *)a2 + 7);
      if (!v11) {
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
      }
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B7AC9880(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 72));
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v4 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp(uint64_t a1)
{
  *(void *)(a1 + 112) = &unk_1F1199AC8;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1120610);
  *(void *)a1 = &unk_1F1120538;
  *(void *)(a1 + 112) = &unk_1F11205F0;
  *(void *)(a1 + 48) = &unk_1F11193B8;
  *(void *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(void *)(a1 + 80) = &unk_1F11193B8;
  *(void *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B7AC9A20(_Unwind_Exception *a1)
{
  uint64_t v8 = v4;
  void *v7 = v8;
  PCSharedCount::~PCSharedCount(v5);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v6 + 8));
  *(void *)(v1 + 112) = v3;
  *(unsigned char *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::LessThanEquals,BOOL>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  uint64_t v8 = ProShade::shapeGetSize(a2[1], v7);
  int v10 = v8;
  BOOL v11 = (void *)*a1;
  if (v11 == 1)
  {
    int v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    int v12 = (BOOL *)&v31 - v13;
    bzero((char *)&v31 - v13, v14);
    uint64_t v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 1, v12, Size);
  }
  v15 = (void *)*a2;
  if (v15 == 1)
  {
    uint64_t v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v16 = (BOOL *)&v31 - v17;
    bzero((char *)&v31 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 1, v16, v10);
  }
  int v19 = a1[1];
  if (v19 != a2[1]) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  }
  ProShade::Value::set(a3, (const PCString *)1, v19);
  BOOL result = ProShade::shapeIsVector(a1[1]);
  int v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v33, "not implemented yet");
    PCString::PCString(&v32, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v33, &v32, 426);
    *(void *)exception = &unk_1F10B1208;
  }
  if (Size >= 1)
  {
    int v22 = (char *)(a3 + 16);
    uint64_t v23 = Size;
    do
    {
      BOOL v25 = *v12++;
      BOOL v24 = v25;
      BOOL v27 = *v16++;
      BOOL v26 = v27;
      char v29 = !v24 || v26;
      *v22++ = v29;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B7AC9CB4(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2) {
    __cxa_free_exception(v1);
  }
  _Unwind_Resume(a1);
}

LiPlaneTransform *LiPlaneTransform::LiPlaneTransform(LiPlaneTransform *this, LiPlaneTransform *a2, char a3)
{
  *((void *)this + 10) = 0x3FF0000000000000;
  *((void *)this + 5) = 0x3FF0000000000000;
  *(void *)this = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 31) = 0x3FF0000000000000;
  *((void *)this + 26) = 0x3FF0000000000000;
  *((void *)this + 21) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 120) = _Q1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((unsigned char *)this + 297) = a3;
  return LiPlaneTransform::operator=(this, a2);
}

LiPlaneTransform *LiPlaneTransform::operator=(LiPlaneTransform *this, LiPlaneTransform *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)((char *)v4 + i) = *(void *)((char *)a2 + i);
      ++v3;
      uint64_t v4 = (LiPlaneTransform *)((char *)v4 + 32);
      a2 = (LiPlaneTransform *)((char *)a2 + 32);
    }
    while (v3 != 4);
  }
  LiPlaneTransform::compute(this);
  return this;
}

float64x2_t LiPlaneTransform::compute(LiPlaneTransform *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (float64x2_t *)((char *)this + 264);
  uint64_t v4 = (double *)((char *)this + 128);
  __n128 v5 = this;
  do
  {
    for (uint64_t i = 0; i != 32; i += 16)
      *(_OWORD *)((char *)v5 + i + 128) = *(_OWORD *)((char *)v5 + i);
    ++v2;
    __n128 v5 = (LiPlaneTransform *)((char *)v5 + 32);
  }
  while (v2 != 4);
  BOOL v7 = PCMatrix44Tmpl<double>::invertTranspose(v4);
  *((unsigned char *)this + 256) = v7;
  if (v7)
  {
    *((unsigned char *)this + 296) = 0;
  }
  else
  {
    BOOL MatrixPlane = liFindMatrixPlane((double *)this, v3->f64);
    *((unsigned char *)this + 296) = MatrixPlane;
    if (MatrixPlane && !*((unsigned char *)this + 297))
    {
      float64x2_t result = vnegq_f64(*v3);
      float64x2_t v10 = vnegq_f64(v3[1]);
      *uint64_t v3 = result;
      v3[1] = v10;
    }
  }
  return result;
}

BOOL PCMatrix44Tmpl<double>::invertTranspose(double *a1)
{
  BOOL v2 = PCMatrix44Tmpl<double>::invert(a1, a1, 0.0);
  if (v2) {
    PCMatrix44Tmpl<double>::transpose((uint64_t)a1);
  }
  return v2;
}

uint64_t LiPlaneTransform::operator()(uint64_t a1, double *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 256))
  {
    PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 128), a2, (double *)a3);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 296)) {
      return 0;
    }
    long long v3 = *(_OWORD *)(a1 + 280);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)(a3 + 16) = v3;
  }
  return 1;
}

BOOL LiPlaneTransform::isValid(LiPlaneTransform *this)
{
  return *((unsigned char *)this + 256) || *((unsigned char *)this + 296) != 0;
}

void LiPolygon::LiPolygon(LiPolygon *this)
{
  *(void *)this = &unk_1F11207A8;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = (char *)this + 64;
  *((_DWORD *)this + 2) = -1;
  *((unsigned char *)this + 96) = 0;
}

void LiPolygon::LiPolygon(LiPolygon *this, const LiPolygon *a2)
{
  *(void *)this = &unk_1F11207A8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = (char *)this + 64;
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  LiPolygon::ArrayFacet::copyFrom((long long ***)this + 11, (long long ***)a2 + 11);
}

void sub_1B7AC9FD0(_Unwind_Exception *exception_object)
{
  long long v3 = v2;
  __n128 v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

long long **LiPolygon::ArrayFacet::copyFrom(long long ***a1, long long ***a2)
{
  float64x2_t result = *a1;
  if (result != *a2) {
    return (long long **)std::vector<LiPolygon::PosEdge>::__assign_with_size[abi:ne180100]<LiPolygon::PosEdge*,LiPolygon::PosEdge*>(result, **a2, (*a2)[1], ((char *)(*a2)[1] - (char *)**a2) >> 5);
  }
  return result;
}

void LiPolygon::~LiPolygon(LiPolygon *this)
{
  *(void *)this = &unk_1F11207A8;
  BOOL v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F11207A8;
  BOOL v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t LiPolygon::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  LiPolygon::ArrayFacet::copyFrom((long long ***)(a1 + 88), (long long ***)(a2 + 88));
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t LiPolygon::computePlane(LiPolygon *this)
{
  if (!*((unsigned char *)this + 96))
  {
    *((void *)this + 5) = 0;
    BOOL v2 = (double *)((char *)this + 40);
    long long v3 = (_OWORD *)((char *)this + 16);
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    long long v4 = (long long **)*((void *)this + 11);
    long long v5 = *v4;
    unint64_t v6 = (char *)v4[1] - (char *)*v4;
    unint64_t v7 = v6 >> 5;
    if ((v6 >> 5))
    {
      long long v8 = *v5;
      *((void *)this + 4) = *((void *)v5 + 2);
      *long long v3 = v8;
      if ((int)v7 >= 1)
      {
        uint64_t v9 = 0;
        float64x2_t v10 = *v4;
        uint64_t v11 = (v6 >> 5);
        int v12 = (double *)(v10 + 1);
        double v13 = 0.0;
        double v14 = 0.0;
        double v15 = 0.0;
        do
        {
          if (v11 - 1 == v9) {
            uint64_t v16 = 0;
          }
          else {
            uint64_t v16 = v9 + 1;
          }
          int v17 = v9 + 2;
          uint64_t v18 = v9 + 1;
          int v19 = (double *)&v10[2 * v16];
          v20 = (double *)&v10[2 * (v17 % (int)v7)];
          double v21 = v19[1];
          double v22 = *v20 - *v19;
          double v23 = v20[1] - v21;
          double v24 = v19[2];
          double v25 = v20[2] - v24;
          double v26 = *v19 - *(v12 - 2);
          double v27 = v21 - *(v12 - 1);
          double v28 = *v12;
          v12 += 4;
          double v29 = v24 - v28;
          double v15 = v15 + v23 * v29 - v25 * v27;
          double v14 = v25 * v26 - v22 * v29 + v14;
          *((double *)this + 5) = v15;
          *((double *)this + 6) = v14;
          double v13 = v22 * v27 - v23 * v26 + v13;
          *((double *)this + 7) = v13;
          uint64_t v9 = v18;
        }
        while (v11 != v18);
      }
      PCVector3<double>::normalize(v2, 0.000000100000001);
    }
    else
    {
      *(void *)long long v3 = 0;
      *((void *)this + 3) = 0;
      *((void *)this + 4) = 0;
    }
  }
  return (uint64_t)this + 16;
}

double LiPolygon::getPlaneEq@<D0>(LiPolygon *this@<X0>, double *a2@<X8>)
{
  double v2 = *((double *)this + 5);
  double v3 = *((double *)this + 6);
  double v4 = *((double *)this + 7);
  double result = -(v2 * *((double *)this + 2) + v3 * *((double *)this + 3) + v4 * *((double *)this + 4));
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = result;
  return result;
}

uint64_t LiPolygon::isCoplanar(LiPolygon *this, const LiPolygon *a2)
{
  int v2 = *((_DWORD *)this + 2);
  if (v2 < 0) {
    return (*(uint64_t (**)(LiPolygon *, const LiPolygon *))(*(void *)this + 40))(this, a2);
  }
  int v3 = *((_DWORD *)a2 + 2);
  if (v3 < 0 || v2 != v3) {
    return (*(uint64_t (**)(LiPolygon *, const LiPolygon *))(*(void *)this + 40))(this, a2);
  }
  else {
    return 1;
  }
}

BOOL LiPolygon::seemsCoplanar(LiPolygon *this, const LiPolygon *a2)
{
  return PCMath::equal((double *)this + 2, (double *)a2 + 2, 1.0e-10);
}

BOOL LiPolygon::isConvex(LiPolygon *this)
{
  double v2 = *((double *)this + 5);
  double v3 = *((double *)this + 6);
  uint64_t v1 = (char *)this + 40;
  BOOL v4 = fabs(v3) > fabs(v2);
  if (fabs(*((double *)v1 + 2)) <= fabs(*(double *)&v1[8 * v4])) {
    int v5 = v4;
  }
  else {
    int v5 = 2;
  }
  __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  elim<LiPolygon::PosFacet,LiChannelT<PCVector2<double>>>((double ***)v1 + 6, &__p, v5);
  BOOL IsConvex = liIsConvex((uint64_t *)&__p);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return IsConvex;
}

void sub_1B7ACA380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LiPolygon::set(uint64_t a1, double *a2)
{
  double v3 = *(uint64_t **)(a1 + 88);
  if (a2[2] < 0.0 || a2[3] < 0.0)
  {
    std::vector<LiPolygon::PosEdge>::resize(v3, 0);
  }
  else
  {
    std::vector<LiPolygon::PosEdge>::resize(v3, 4uLL);
    uint64_t v5 = **(void **)(a1 + 88);
    double v6 = *a2;
    double v7 = a2[1];
    *(double *)uint64_t v5 = *a2;
    *(double *)(v5 + 8) = v7;
    *(void *)(v5 + 16) = 0;
    double v8 = a2[2];
    double v9 = v7 + a2[3];
    *(double *)(v5 + 32) = v6;
    *(double *)(v5 + 40) = v9;
    *(void *)(v5 + 48) = 0;
    double v10 = v6 + v8;
    *(double *)(v5 + 64) = v10;
    *(double *)(v5 + 72) = v9;
    *(void *)(v5 + 80) = 0;
    *(double *)(v5 + 96) = v10;
    *(double *)(v5 + 104) = v7;
    *(void *)(v5 + 112) = 0;
  }
}

double PCPlane<double>::intersect(double *a1, double *a2, double *a3, double *a4)
{
  memset(v7, 0, sizeof(v7));
  if (planeIntersection<double>(a1, a1 + 3, a2, a2 + 3, (double *)v7, (double *)&v7[1] + 1)) {
    return PCPlane<double>::intersect(a3, (double *)v7, a4);
  }
  return result;
}

void LiPolygon::dilate(void *a1, void *a2)
{
  double v3 = a1;
  memset(&v146, 0, sizeof(v146));
  uint64_t v4 = *(void *)(a1[11] + 8) - *(void *)a1[11];
  std::vector<unsigned int>::resize(&v146, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    uint64_t v5 = 0;
    std::vector<int>::pointer begin = v146.__begin_;
    do
    {
      begin[v5] = v5;
      ++v5;
    }
    while (((unint64_t)v4 >> 5) != v5);
  }
  double v7 = (uint64_t *)v3[11];
  double v8 = (char *)((unint64_t)(v7[1] - *v7) >> 5);
  if ((int)v8 < 1) {
    goto LABEL_24;
  }
  v128 = a2;
  int v9 = 0;
  do
  {
    if ((int)v8 <= 0) {
      _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
    }
    int v10 = v9;
    if (v9 < 0) {
      int v10 = v9 % (int)v8 + v8;
    }
    int v11 = v10 % (int)v8 + 1;
    if (v10 % (int)v8 <= -2) {
      int v11 = v11 % (int)v8 + v8;
    }
    double v7 = (uint64_t *)v3[11];
    uint64_t v12 = *v7;
    double v13 = (double *)(*v7 + 32 * (v10 % (int)v8));
    uint64_t v14 = v11 % (int)v8;
    uint64_t v15 = *v7 + 32 * v14;
    if (vabdd_f64(*v13, *(double *)v15) >= 0.0000001
      || vabdd_f64(v13[1], *(double *)(v15 + 8)) >= 0.0000001
      || vabdd_f64(v13[2], *(double *)(v15 + 16)) >= 0.0000001)
    {
      ++v9;
    }
    else
    {
      uint64_t v16 = v7[1];
      if (v15 + 32 != v16)
      {
        do
        {
          uint64_t v17 = v15 + 32;
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 + 32);
          *(_OWORD *)(v15 + 12) = *(_OWORD *)(v15 + 44);
          uint64_t v18 = v15 + 64;
          v15 += 32;
        }
        while (v18 != v16);
        uint64_t v15 = v17;
      }
      v7[1] = v15;
      int v19 = &v146.__begin_[v14];
      v20 = (char *)((char *)v146.__end_ - (char *)(v19 + 1));
      if (v146.__end_ != v19 + 1) {
        memmove(&v146.__begin_[v14], v19 + 1, (char *)v146.__end_ - (char *)(v19 + 1));
      }
      v146.__end_ = (std::vector<int>::pointer)&v20[(void)v19];
      double v7 = (uint64_t *)v3[11];
      uint64_t v12 = *v7;
    }
    unint64_t v21 = v7[1] - v12;
    double v8 = (char *)(v21 >> 5);
  }
  while (v9 < (int)(v21 >> 5));
  if ((int)v8 > 2)
  {
    double v22 = (float64x2_t *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    float64x2_t v23 = v22[1];
    float64x2_t v143 = *v22;
    float64x2_t v144 = v23;
    float64x2_t v145 = v22[2];
    __p = 0;
    v141 = 0;
    unint64_t v142 = 0;
    std::vector<PCPlane<double>>::reserve((uint64_t *)&__p, (v21 >> 4));
    int v24 = 0;
    int v138 = 0;
    int v139 = (int)v8;
    do
    {
      if ((int)v8 <= 0) {
        _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
      }
      int v25 = v24 + 1;
      if (v24 <= -2) {
        int v25 = v25 % (int)v8 + v8;
      }
      uint64_t v26 = *(void *)v3[11] + 32 * v24;
      uint64_t v27 = *(void *)v3[11] + 32 * (v25 % (int)v8);
      double v28 = *(double *)v27;
      double v29 = *(double *)v26;
      double v133 = v144.f64[1];
      float64x2_t v130 = *(float64x2_t *)(v26 + 8);
      float64x2_t v131 = *(float64x2_t *)(v27 + 8);
      float64x2_t v132 = v145;
      double v129 = *(double *)(*a2 + 8 * v146.__begin_[v138]);
      long long v148 = 0u;
      long long v149 = 0u;
      long long v147 = 0u;
      PCString v30 = v141;
      if ((unint64_t)v141 >= v142)
      {
        double v8 = (char *)std::vector<PCPlane<double>>::__push_back_slow_path<PCPlane<double>>((uint64_t *)&__p, &v147);
      }
      else
      {
        double v8 = v141 + 48;
        *((_OWORD *)v141 + 1) = 0uLL;
        *((_OWORD *)v30 + 2) = 0uLL;
        *(_OWORD *)PCString v30 = 0uLL;
      }
      *(void *)&v31.f64[0] = vdupq_laneq_s64((int64x2_t)v132, 1).u64[0];
      float64x2_t v32 = vsubq_f64(v131, v130);
      v31.f64[1] = v133;
      *(void *)&v33.f64[0] = vdupq_laneq_s64((int64x2_t)v32, 1).u64[0];
      v33.f64[1] = v28 - v29;
      v141 = v8;
      *(float64x2_t *)(v8 - 24) = vsubq_f64(vmulq_f64(v32, v31), vmulq_f64(v33, v132));
      *((double *)v8 - 1) = (v28 - v29) * v132.f64[0] - v133 * v32.f64[0];
      PCVector3<double>::normalize((double *)v8 - 3, 0.000000100000001);
      double v34 = *(double *)(v26 + 16) - v129 * *((double *)v8 - 1);
      *((float64x2_t *)v8 - 3) = vsubq_f64(*(float64x2_t *)v26, vmulq_n_f64(*(float64x2_t *)(v8 - 24), v129));
      *((double *)v8 - 4) = v34;
      LODWORD(v8) = v139;
      int v24 = (v138 + 1) % v139;
      int v138 = v24;
    }
    while (v24);
    int v138 = 0;
    uint64_t v35 = (*(void *)(v3[11] + 8) - *(void *)v3[11]) >> 5;
    int v139 = v35;
    if ((int)v35 >= 1)
    {
      int v36 = 0;
      v127 = v3;
      do
      {
        if ((int)v35 <= 0) {
          _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
        }
        int v37 = v36 - 1;
        if (v36 <= 0) {
          int v37 = v37 % (int)v35 + v35;
        }
        int v38 = v37 % (int)v35;
        v39 = (char *)__p;
        v40 = (double *)((char *)__p + 48 * v38);
        uint64_t v41 = v138;
        uint64_t v42 = *(void *)v3[11];
        v43 = (double *)((char *)__p + 48 * v138);
        long long v136 = 0uLL;
        double v137 = 0.0;
        PCPlane<double>::intersect(v143.f64, v40, v43, (double *)&v136);
        uint64_t v44 = v138;
        if (v45)
        {
          if (v139 <= 0) {
            _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
          }
          int v46 = v138 - 1;
          if (v138 <= 0) {
            int v46 = v46 % v139 + v139;
          }
          double v47 = *(double *)(*v128 + 8 * v146.__begin_[v46 % v139]);
          double v48 = *(double *)(*v128 + 8 * v146.__begin_[v138]);
          if (v47 == 0.0 && v48 == 0.0)
          {
            ++v36;
            double v3 = v127;
          }
          else
          {
            if (v47 < v48) {
              double v47 = *(double *)(*v128 + 8 * v146.__begin_[v138]);
            }
            double v3 = v127;
            if (v47 <= 0.0) {
              goto LABEL_74;
            }
            long long v148 = 0u;
            long long v149 = 0u;
            long long v147 = 0u;
            v60 = (double *)&v39[48 * v38];
            double v62 = v60[4];
            v61 = (char *)(v60 + 4);
            double v63 = v62;
            double v64 = *((double *)v61 - 1);
            double v65 = *((double *)v61 + 1);
            double v66 = sqrt(v64 * v64 + v63 * v63 + v65 * v65);
            if (v66 < 0.000000100000001 && v66 > -0.000000100000001) {
              double v66 = 1.0;
            }
            double v68 = v64 / v66;
            double v69 = v63 / v66;
            double v70 = v65 / v66;
            v71 = (double *)&v39[48 * (int)v41];
            double v73 = v71[4];
            v72 = (char *)(v71 + 4);
            double v74 = v73;
            double v75 = *((double *)v72 - 1);
            double v76 = *((double *)v72 + 1);
            double v77 = sqrt(v75 * v75 + v74 * v74 + v76 * v76);
            if (v77 < 0.000000100000001 && v77 > -0.000000100000001) {
              double v77 = 1.0;
            }
            double v79 = v74 / v77;
            double v80 = v68 + v75 / v77;
            double v81 = v69 + v79;
            double v82 = v70 + v76 / v77;
            *((double *)&v148 + 1) = v80;
            *(double *)&long long v149 = v81;
            *((double *)&v149 + 1) = v82;
            double v83 = sqrt(v82 * v82 + v80 * v80 + v81 * v81);
            if (v83 <= -0.000000100000001 || v83 >= 0.000000100000001)
            {
              double v80 = v80 / v83;
              double v81 = v81 / v83;
              *((double *)&v148 + 1) = v80;
              *(double *)&long long v149 = v81;
              double v82 = v82 / v83;
              *((double *)&v149 + 1) = v82;
            }
            v84 = (double *)(v42 + 32 * v41);
            double v85 = v47 + v47;
            double v86 = *v84 - v85 * v80;
            double v87 = v84[1] - v85 * v81;
            double v88 = v84[2] - v85 * v82;
            *(double *)&long long v147 = v86;
            *((double *)&v147 + 1) = v87;
            *(double *)&long long v148 = v88;
            if (v80 * (*(double *)&v136 - v86) + v81 * (*((double *)&v136 + 1) - v87) + v82 * (v137 - v88) < 0.0)
            {
              v135[0] = *(_OWORD *)v40;
              v135[1] = *((_OWORD *)v40 + 1);
              v135[2] = *(_OWORD *)v61;
              v134[0] = *(_OWORD *)v43;
              v134[1] = *((_OWORD *)v43 + 1);
              v134[2] = *(_OWORD *)v72;
              PCPlane<double>::intersect(v143.f64, (double *)&v147, (double *)v135, (double *)(*(void *)v127[11] + 32 * v138));
              if ((v91 & 1) == 0)
              {
                exception = (PCException *)__cxa_allocate_exception(0x40uLL);
                PCString::PCString((PCString *)__x, "edges must not be parallel (1)");
                PCException::PCException(exception, (const PCString *)__x);
              }
              std::vector<PCPlane<double>>::insert((uint64_t *)&__p, (_OWORD *)__p + 3 * v36, (unint64_t)&v147);
              uint64_t v92 = v36 + 1;
              v93 = (uint64_t *)v127[11];
              uint64_t v94 = *v93 + 32 * v92;
              *(_OWORD *)__x = 0u;
              long long v151 = 0u;
              std::vector<LiPolygon::PosEdge>::insert(v93, v94, (uint64_t)__x);
              PCPlane<double>::intersect(v143.f64, (double *)&v147, (double *)v134, (double *)(*(void *)v127[11] + 32 * v92));
              if ((v95 & 1) == 0)
              {
                v126 = (PCException *)__cxa_allocate_exception(0x40uLL);
                PCString::PCString((PCString *)__x, "edges must not be parallel (2)");
                PCException::PCException(v126, (const PCString *)__x);
              }
              __x[0] = -1;
              v96.__i_ = &v146.__begin_[v138];
              std::vector<int>::insert(&v146, v96, __x);
              v36 += 2;
            }
            else
            {
LABEL_74:
              uint64_t v89 = *(void *)v127[11] + 32 * v138;
              long long v90 = v136;
              *(double *)(v89 + 16) = v137;
              *(_OWORD *)uint64_t v89 = v90;
              ++v36;
            }
          }
        }
        else
        {
          v49 = v141;
          v50 = (char *)__p + 48 * v138;
          if (v50 + 48 != v141)
          {
            do
            {
              v51 = v50 + 48;
              *(_OWORD *)v50 = *((_OWORD *)v50 + 3);
              *((void *)v50 + 2) = *((void *)v50 + 8);
              *(_OWORD *)(v50 + 24) = *(_OWORD *)(v50 + 72);
              *((void *)v50 + 5) = *((void *)v50 + 11);
              v52 = v50 + 96;
              v50 += 48;
            }
            while (v52 != v49);
            v50 = v51;
          }
          v141 = v50;
          v53 = (void *)v3[11];
          v54 = (_OWORD *)v53[1];
          v55 = (_OWORD *)(*v53 + 32 * v44);
          if (v55 + 2 != v54)
          {
            do
            {
              v56 = v55 + 2;
              _OWORD *v55 = v55[2];
              *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)((char *)v55 + 44);
              v57 = v55 + 4;
              v55 += 2;
            }
            while (v57 != v54);
            v55 = v56;
          }
          v53[1] = v55;
          v58 = &v146.__begin_[v44];
          v59 = (char *)((char *)v146.__end_ - (char *)(v58 + 1));
          if (v146.__end_ != v58 + 1) {
            memmove(&v146.__begin_[v44], v58 + 1, (char *)v146.__end_ - (char *)(v58 + 1));
          }
          v146.__end_ = (std::vector<int>::pointer)&v59[(void)v58];
        }
        int v138 = v36;
        unint64_t v97 = *(void *)(v3[11] + 8) - *(void *)v3[11];
        uint64_t v35 = v97 >> 5;
        int v139 = v97 >> 5;
      }
      while (v36 < v139);
      int v138 = 0;
      if ((int)v35 >= 1)
      {
        int v98 = 0;
        unint64_t v99 = v97 >> 5;
        do
        {
          if ((int)v99 <= 0) {
            _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
          }
          int v100 = v98 + 2;
          if (v98 <= -3) {
            int v100 = v100 % (int)v99 + v99;
          }
          v101 = (char *)__p + 48 * v98;
          int v102 = v100 % (int)v99;
          v103 = (uint64_t *)v3[11];
          uint64_t v104 = v102;
          uint64_t v105 = *v103;
          uint64_t v106 = *v103 + 32 * v104;
          float64x2_t v107 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v106 + 8), *(float64x2_t *)(v101 + 8)), *((float64x2_t *)v101 + 2));
          if ((*(double *)v106 - *(double *)v101) * *((double *)v101 + 3) + v107.f64[0] + v107.f64[1] >= 0.0)
          {
            ++v98;
          }
          else
          {
            if (v139 <= 0) {
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            }
            int v108 = v138 + 1;
            if (v138 <= -2) {
              int v108 = v108 % v139 + v139;
            }
            int v109 = v108 % v139;
            v110 = (uint64_t *)v3[11];
            uint64_t v111 = *v110;
            v112 = (_OWORD *)v110[1];
            v113 = (_OWORD *)(*v110 + 32 * v109);
            if (v113 + 2 == v112)
            {
              v116 = (uint64_t *)v3[11];
            }
            else
            {
              do
              {
                v114 = v113 + 2;
                _OWORD *v113 = v113[2];
                *(_OWORD *)((char *)v113 + 12) = *(_OWORD *)((char *)v113 + 44);
                v115 = v113 + 4;
                v113 += 2;
              }
              while (v115 != v112);
              v116 = (uint64_t *)v3[11];
              uint64_t v111 = *v116;
              v113 = v114;
            }
            v110[1] = (uint64_t)v113;
            if (((v116[1] - v111) & 0x1FFFFFFFE0) == 0) {
              break;
            }
            if (v139 <= 0) {
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            }
            int v117 = v138 + 1;
            if (v138 <= -2) {
              int v117 = v117 % v139 + v139;
            }
            v118 = v141;
            v119 = (char *)__p + 48 * (v117 % v139);
            if (v119 + 48 != v141)
            {
              do
              {
                v120 = v119 + 48;
                *(_OWORD *)v119 = *((_OWORD *)v119 + 3);
                *((void *)v119 + 2) = *((void *)v119 + 8);
                *(_OWORD *)(v119 + 24) = *(_OWORD *)(v119 + 72);
                *((void *)v119 + 5) = *((void *)v119 + 11);
                v121 = v119 + 96;
                v119 += 48;
              }
              while (v121 != v118);
              v119 = v120;
            }
            v141 = v119;
            if (v139 <= 0) {
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            }
            int v122 = v138 + 1;
            if (v138 <= -2) {
              int v122 = v122 % v139 + v139;
            }
            PCMod::remove(&v138, v122 % v139, 1);
            if (v139 <= 0) {
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            }
            int v123 = v138 + 1;
            if (v138 <= -2) {
              int v123 = v123 % v139 + v139;
            }
            int v124 = v138 + 1;
            if (v138 <= -2) {
              int v124 = v124 % v139 + v139;
            }
            PCPlane<double>::intersect(v143.f64, (double *)v101, (double *)__p + 6 * (v123 % v139), (double *)(*(void *)v3[11] + 32 * (v124 % v139)));
            v103 = (uint64_t *)v3[11];
            uint64_t v105 = *v103;
          }
          unint64_t v99 = (unint64_t)(v103[1] - v105) >> 5;
          int v138 = v98;
          int v139 = v99;
        }
        while (v98 < (int)v99);
      }
    }
    if (__p)
    {
      v141 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
LABEL_24:
    std::vector<LiPolygon::PosEdge>::resize(v7, 0);
  }
  if (v146.__begin_)
  {
    v146.__end_ = v146.__begin_;
    operator delete(v146.__begin_);
  }
}

void sub_1B7ACB0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  PCString::~PCString((PCString *)(v39 - 160));
  if (__p) {
    operator delete(__p);
  }
  uint64_t v41 = *(void **)(v39 - 232);
  if (v41)
  {
    *(void *)(v39 - 224) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

int *PCMod::remove(int *this, int a2, int a3)
{
  if (a3 < 0) {
    _PCMod_error("howmany must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 134);
  }
  int v3 = this[1];
  if (v3 <= a3) {
    _PCMod_error("can't remove all values", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 136);
  }
  int v4 = v3 - a3;
  this[1] = v3 - a3;
  int v5 = *this;
  if (*this > a2)
  {
    if (v5 >= a3 + a2) {
      v5 -= a3;
    }
    else {
      int v5 = a2;
    }
    *this = v5;
  }
  if (v4 <= 0) {
    _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
  }
  if (v5 < 0) {
    int v5 = v5 % v4 + v4;
  }
  *this = v5 % v4;
  return this;
}

void LiPolygon::projectToPlane(uint64_t a1, float64x2_t *a2, double *a3)
{
  if (PCPlane<double>::setImplicit(a1 + 16, a2))
  {
    uint64_t v16 = 0x3FF0000000000000;
    uint64_t v13 = 0x3FF0000000000000;
    uint64_t v10 = 0x3FF0000000000000;
    uint64_t v7 = 0x3FF0000000000000;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    if (PCMatrix44Tmpl<double>::flatten((uint64_t)&v7, a2->f64, a3)) {
      transform<LiPolygon::PosFacet,LiPolygon::PosFacet,double>((double *)&v7, a1 + 88, (uint64_t **)(a1 + 88));
    }
    else {
      *(void *)(a1 + 72) = *(void *)(a1 + 64);
    }
  }
  else
  {
    double v6 = *(uint64_t **)(a1 + 88);
    std::vector<LiPolygon::PosEdge>::resize(v6, 0);
  }
}

void transform<LiPolygon::PosFacet,LiPolygon::PosFacet,double>(double *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6 = *(void *)(*(void *)a2 + 8) - **(void **)a2;
  std::vector<LiPolygon::PosEdge>::resize(*a3, (int)(v6 >> 5));
  if ((int)((unint64_t)v6 >> 5) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6 & 0x1FFFFFFFE0;
    do
    {
      PCMatrix44Tmpl<double>::transform<double>(a1, (double *)(**(void **)a2 + v7), (double *)(**a3 + v7));
      v7 += 32;
    }
    while (v8 != v7);
  }
}

void LiPolygon::getBoundary(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = 0;
}

BOOL LiPolygon::isEmpty(LiPolygon *this)
{
  return ((*(void *)(*((void *)this + 11) + 8) - **((void **)this + 11)) & 0x1FFFFFFFE0) == 0
      && *((unsigned char *)this + 96) == 0;
}

BOOL LiPolygon::isBounded(LiPolygon *this)
{
  return *((unsigned char *)this + 96) == 0;
}

BOOL LiPolygon::isFinite(LiPolygon *this)
{
  return ((*(void *)(*((void *)this + 11) + 8) - **((void **)this + 11)) & 0x1FFFFFFFE0) != 0
      && *((unsigned char *)this + 96) == 0;
}

uint64_t LiPolygon::isInfinite(LiPolygon *this)
{
  return *((unsigned __int8 *)this + 96);
}

void LiPolygon::setEmpty(uint64_t **this)
{
  *((unsigned char *)this + 96) = 0;
}

void LiPolygon::setAll(uint64_t **this)
{
  *((unsigned char *)this + 96) = 1;
}

BOOL LiPolygon::isClockwise(double ***this)
{
  long long v11 = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  elim<LiPolygon::PosFacet,LiChannelT<PCVector2<double>>>(this + 11, &v11, 2);
  unint64_t v1 = (unint64_t)(v12 - v11) >> 4;
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = ((unint64_t)(v12 - v11) >> 4);
    double v4 = 0.0;
    do
    {
      if (v3 - 1 == v2) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = v2 + 1;
      }
      float64x2_t v6 = *(float64x2_t *)&v11[16 * v2];
      float64x2_t v7 = vsubq_f64(*(float64x2_t *)&v11[16 * v5], v6);
      int8x16_t v8 = (int8x16_t)vsubq_f64(*(float64x2_t *)&v11[16 * (((int)v1 - 1 + (int)v2) % (int)v1)], v6);
      float64x2_t v9 = vmulq_f64(v7, (float64x2_t)vextq_s8(v8, v8, 8uLL));
      double v4 = v4 + vsubq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)).f64[0];
      ++v2;
    }
    while (v3 != v2);
    goto LABEL_9;
  }
  double v4 = 0.0;
  if (v11)
  {
LABEL_9:
    long long v12 = v11;
    operator delete(v11);
  }
  return v4 <= 0.0;
}

void sub_1B7ACB5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL LiPolygon::contains(void **a1, double *a2)
{
  uint64_t v2 = *a1[11];
  unint64_t v3 = a1[11][1] - v2;
  unint64_t v4 = v3 >> 5;
  int v5 = (v3 >> 5) - 1;
  if ((int)(v3 >> 5) < 1)
  {
    int v11 = 0;
    return v11 == 1;
  }
  else
  {
    uint64_t v8 = (v3 >> 5);
    float64x2_t v9 = (double *)(v2 + 8);
    uint64_t v10 = v8;
    while (*a2 != *(v9 - 1) || a2[1] != *v9)
    {
      v9 += 4;
      if (!--v10)
      {
        int v11 = 0;
        char v12 = 0;
        unsigned __int8 v13 = 0;
        while (1)
        {
          uint64_t v14 = *a1[11];
          long long v15 = (double *)(v14 + 32 * v10);
          uint64_t v16 = v10 + 1;
          uint64_t v17 = (v10 + 1);
          if (v10 + 1 == v8) {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (double *)(v14 + 32 * v17);
          double v19 = v15[1];
          double v20 = v18[1];
          double v21 = a2[1];
          if (v19 == v20)
          {
            if (v19 == v21)
            {
              double v22 = *a2;
              double v23 = *v18;
              if (*a2 > *v15 && v22 <= v23) {
                return 1;
              }
              if (v22 < *v15 && v22 >= v23) {
                return 1;
              }
            }
          }
          else if ((v21 >= v19 || v21 >= v20) && (v21 <= v19 || v21 <= v20))
          {
            if (v21 != v20
              || ((double v28 = *(double *)(v14 + 32 * ((v5 + (int)v10) % (int)v4) + 8), v19 < v20)
                ? (BOOL v29 = v28 < v19)
                : (BOOL v29 = 0),
                  !v29 && (v19 > v20 ? (BOOL v30 = v28 <= v19) : (BOOL v30 = 1), v30)))
            {
              double v31 = *v15 + (v21 - v19) * (*v18 - *v15) / (v20 - v19);
              if (v31 >= *a2)
              {
                if (v31 == *a2)
                {
                  if ((v12 & 1) == 0)
                  {
                    unsigned __int8 v13 = ((uint64_t (*)(void **))(*a1)[7])(a1);
                    double v20 = v18[1];
                    double v19 = v15[1];
                  }
                  v11 += (v13 ^ (v20 < v19)) & 1;
                  char v12 = 1;
                }
              }
              else
              {
                ++v11;
              }
            }
          }
          uint64_t v10 = v16;
          if (v16 == v8) {
            return v11 == 1;
          }
        }
      }
    }
    return 1;
  }
}

BOOL LiPolygon::contains(void **a1, float64x2_t *a2)
{
  float64x2_t v10 = *a2;
  BOOL result = LiPolygon::contains(a1, v10.f64);
  if (result)
  {
    double v5 = a2->f64[1];
    v9[0] = a2->f64[0] + a2[1].f64[0];
    v9[1] = v5;
    BOOL result = LiPolygon::contains(a1, v9);
    if (result)
    {
      float64_t v6 = a2->f64[1] + a2[1].f64[1];
      v8[0] = a2->f64[0];
      v8[1] = v6;
      BOOL result = LiPolygon::contains(a1, v8);
      if (result)
      {
        float64x2_t v7 = vaddq_f64(*a2, a2[1]);
        return LiPolygon::contains(a1, v7.f64);
      }
    }
  }
  return result;
}

BOOL transform(double *a1, uint64_t **a2)
{
  __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v3 = a2 + 11;
  transform<LiPolygon::PosFacet,LiChannelT<PCVector4<double>>,double>(a1, (uint64_t)(a2 + 11), (uint64_t *)&__p);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  BOOL v4 = minmax<double>(&__p, (double *)&v11, (double *)&v9);
  double v5 = *((double *)&v12 + 1);
  double v6 = *((double *)&v10 + 1);
  double v7 = perspectiveDivide<LiChannelT<PCVector4<double>>,LiPolygon::PosFacet,double>(&__p, v3);
  ((void (*)(uint64_t **, double))(*a2)[2])(a2, v7);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  return v5 * v6 > 0.0 && v4;
}

void sub_1B7ACB918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void transform<LiPolygon::PosFacet,LiChannelT<PCVector4<double>>,double>(double *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)a2 + 8) - **(void **)a2;
  std::vector<PCVector4<double>>::resize(a3, (int)(v6 >> 5));
  if ((int)((unint64_t)v6 >> 5) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6 & 0x1FFFFFFFE0;
    do
    {
      PCMatrix44Tmpl<double>::transform<double>(a1, (double *)(**(void **)a2 + v7), (double *)(*a3 + v7));
      v7 += 32;
    }
    while (v8 != v7);
  }
}

BOOL minmax<double>(void *a1, double *a2, double *a3)
{
  unint64_t v3 = (_OWORD *)*a1;
  unint64_t v4 = a1[1] - *a1;
  unint64_t v5 = v4 >> 5;
  if ((int)(v4 >> 5) >= 1)
  {
    long long v6 = v3[1];
    *(_OWORD *)a3 = *v3;
    *((_OWORD *)a3 + 1) = v6;
    long long v7 = v3[1];
    *(_OWORD *)a2 = *v3;
    *((_OWORD *)a2 + 1) = v7;
    if (v5 != 1)
    {
      uint64_t v8 = (v4 >> 5);
      long long v9 = (double *)(*a1 + 56);
      uint64_t v10 = v8 - 1;
      do
      {
        double v11 = *(v9 - 3);
        double v12 = a2[1];
        if (v11 >= *a2) {
          double v11 = *a2;
        }
        *a2 = v11;
        double v13 = *(v9 - 2);
        if (v13 >= v12) {
          double v13 = v12;
        }
        a2[1] = v13;
        double v14 = *(v9 - 1);
        double v15 = a2[3];
        if (v14 >= a2[2]) {
          double v14 = a2[2];
        }
        a2[2] = v14;
        double v16 = *v9;
        if (*v9 >= v15) {
          double v16 = v15;
        }
        a2[3] = v16;
        double v17 = *(v9 - 3);
        double v18 = a3[1];
        if (*a3 >= v17) {
          double v17 = *a3;
        }
        *a3 = v17;
        double v19 = *(v9 - 2);
        if (v18 >= v19) {
          double v19 = v18;
        }
        a3[1] = v19;
        double v20 = *(v9 - 1);
        double v21 = a3[3];
        if (a3[2] >= v20) {
          double v20 = a3[2];
        }
        a3[2] = v20;
        double v22 = *v9;
        v9 += 4;
        double v23 = v22;
        if (v21 >= v22) {
          double v23 = v21;
        }
        a3[3] = v23;
        --v10;
      }
      while (v10);
    }
  }
  return (int)v5 > 0;
}

double perspectiveDivide<LiChannelT<PCVector4<double>>,LiPolygon::PosFacet,double>(void *a1, uint64_t **a2)
{
  uint64_t v4 = a1[1] - *a1;
  std::vector<LiPolygon::PosEdge>::resize(*a2, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    uint64_t v6 = ((unint64_t)v4 >> 5);
    long long v7 = (double *)(**a2 + 16);
    uint64_t v8 = (uint64_t *)(*a1 + 24);
    do
    {
      double v9 = *(double *)v8;
      *((float64x2_t *)v7 - 1) = vdivq_f64(*(float64x2_t *)(v8 - 3), (float64x2_t)vdupq_lane_s64(*v8, 0));
      double result = *((double *)v8 - 1) / v9;
      double *v7 = result;
      v7 += 4;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  return result;
}

void LiImagePolygon::LiImagePolygon(LiImagePolygon *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 11) = (char *)this + 64;
  *((_DWORD *)this + 2) = -1;
  *((unsigned char *)this + 96) = 0;
  *(void *)this = &unk_1F11207F8;
  *((void *)this + 13) = (char *)this + 64;
}

void LiImagePolygon::LiImagePolygon(LiImagePolygon *this, const LiImagePolygon *a2)
{
  *((_OWORD *)this + 1) = 0u;
  uint64_t v4 = (char *)this + 16;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 11) = (char *)this + 64;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 2) = -1;
  *((unsigned char *)this + 96) = 0;
  *(void *)this = &unk_1F11207F8;
  *((void *)this + 13) = (char *)this + 64;
  LiPolygon::ArrayFacet::copyFrom((long long ***)this + 11, (long long ***)a2 + 11);
  LiPolygon::ArrayFacet::copyFrom((long long ***)this + 13, (long long ***)a2 + 13);
  long long v5 = *((_OWORD *)a2 + 1);
  *((void *)v4 + 2) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v5;
  long long v6 = *(_OWORD *)((char *)a2 + 40);
  *((void *)this + 7) = *((void *)a2 + 7);
  *(_OWORD *)((char *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v6;
}

void sub_1B7ACBC54(_Unwind_Exception *exception_object)
{
  *unint64_t v1 = v2;
  uint64_t v4 = (void *)v1[8];
  if (v4)
  {
    v1[9] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void LiImagePolygon::~LiImagePolygon(LiImagePolygon *this)
{
  *(void *)this = &unk_1F11207A8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(void *)this = &unk_1F11207A8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F11207A8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t LiImagePolygon::operator=(uint64_t a1, uint64_t a2)
{
  LiPolygon::ArrayFacet::copyFrom((long long ***)(a1 + 88), (long long ***)(a2 + 88));
  LiPolygon::ArrayFacet::copyFrom((long long ***)(a1 + 104), (long long ***)(a2 + 104));
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v5;
  return a1;
}

void LiImagePolygon::dilateType(uint64_t a1, int a2, double a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8) - **(void **)(a1 + 88);
  __p = 0;
  double v18 = 0;
  uint64_t v19 = 0;
  std::vector<double>::resize((uint64_t)&__p, (int)(v6 >> 5));
  if ((int)((unint64_t)v6 >> 5) >= 1)
  {
    long long v7 = (double *)__p;
    uint64_t v8 = ((unint64_t)v6 >> 5);
    double v9 = (int *)(**(void **)(a1 + 104) + 24);
    do
    {
      int v10 = *v9;
      v9 += 8;
      if (v10 == a2) {
        double v11 = a3;
      }
      else {
        double v11 = 0.0;
      }
      *v7++ = v11;
      --v8;
    }
    while (v8);
  }
  LiPolygon::dilate((void *)a1, &__p);
  double v12 = *(uint64_t **)(a1 + 104);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1] - *v12;
  if (v14)
  {
    unint64_t v15 = v14 >> 5;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    double v16 = (_DWORD *)(v13 + 24);
    do
    {
      *double v16 = 1;
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if (__p)
  {
    double v18 = __p;
    operator delete(__p);
  }
}

void sub_1B7ACBED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t LiImagePolygon::getDOD@<D0>(LiImagePolygon *this@<X0>, double a2@<D0>, int32x2_t *a3@<X8>)
{
  float64x2_t v16 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  float64x2_t v17 = _Q0;
  if (a2 <= 0.0)
  {
    bounds<LiPolygon::PosFacet,double>((uint64_t)this + 88, (uint64_t)&v16);
  }
  else
  {
    LiImagePolygon::LiImagePolygon((LiImagePolygon *)v12, this);
    LiImagePolygon::dilateType((uint64_t)v12, 0, a2);
    bounds<LiPolygon::PosFacet,double>((uint64_t)&v15, (uint64_t)&v16);
    v12[0] = &unk_1F11207A8;
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
  }
  int32x2_t result = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v16, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  int32x2_t v11 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v16, v17)))), result);
  *a3 = result;
  a3[1] = v11;
  return result;
}

void sub_1B7ACBFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LiImagePolygon::set(uint64_t a1, double *a2, int a3)
{
  LiPolygon::set(a1, a2);
  std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 104), (int)((uint64_t)(*(void *)(*(void *)(a1 + 88) + 8) - **(void **)(a1 + 88)) >> 5));
  long long v5 = *(uint64_t **)(a1 + 104);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1] - *v5;
  if (v7)
  {
    unint64_t v8 = v7 >> 5;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    double v9 = (_DWORD *)(v6 + 24);
    do
    {
      *double v9 = a3;
      v9 += 8;
      --v8;
    }
    while (v8);
  }
}

void LiImagePolygon::set(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  LiPolygon::ArrayFacet::copyFrom((long long ***)(a1 + 88), (long long ***)(a2 + 88));
  long long v6 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 104), (int)((uint64_t)(*(void *)(*(void *)(a1 + 88) + 8) - **(void **)(a1 + 88)) >> 5));
  unint64_t v8 = *(uint64_t **)(a1 + 104);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1] - *v8;
  if (v10)
  {
    unint64_t v11 = v10 >> 5;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    double v12 = (_DWORD *)(v9 + 24);
    do
    {
      *double v12 = a3;
      v12 += 8;
      --v11;
    }
    while (v11);
  }
}

uint64_t **LiImagePolygon::operator&=(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(a2 + 88) + 8) - **(void **)(a2 + 88);
  if ((int)(v3 >> 5) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v3 & 0x1FFFFFFFE0;
    uint64_t v7 = (v3 & 0x1FFFFFFFE0) - 32;
    uint64_t v8 = 1;
    do
    {
      uint64_t v9 = **(void **)(a2 + 88);
      uint64_t v10 = (double *)(v9 + v5);
      if (v7 == v5) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v8;
      }
      double v12 = (double *)(v9 + 32 * v11);
      double v13 = v10[1];
      double v14 = v12[1] - v13;
      double v15 = v10[2];
      double v16 = v12[2] - v15;
      double v18 = *(double *)(a2 + 48);
      double v17 = *(double *)(a2 + 56);
      double v19 = *(double *)(a2 + 40);
      double v20 = *v12 - *v10;
      v22[0] = *v10;
      v22[1] = v13;
      v22[2] = v15;
      v22[3] = v14 * v17 - v16 * v18;
      v22[4] = v16 * v19 - v20 * v17;
      v22[5] = v20 * v18 - v14 * v19;
      LiImagePolygon::clip(a1, v22, *(_DWORD *)(**(void **)(a2 + 104) + v5 + 24));
      v5 += 32;
      ++v8;
    }
    while (v6 != v5);
  }
  return a1;
}

uint64_t LiImagePolygon::clip(uint64_t **a1, double *a2, int a3)
{
  double v3 = a2[4];
  double v4 = a2[5];
  double v5 = -(a2[3] * *a2 + v3 * a2[1] + v4 * a2[2]);
  *(double *)uint64_t v7 = a2[3];
  *(double *)&v7[1] = v3;
  *(double *)&v7[2] = v4;
  *(double *)&_OWORD v7[3] = v5;
  return LiImagePolygon::do_clip(a1, a2, (uint64_t)v7, a3);
}

{
  double v6;
  int v7;
  double v8;
  int v9;
  double v10;
  int v11;
  double v12;
  long long v14;
  uint64_t v15;
  double v16;

  uint64_t v6 = -*a2;
  double v15 = 0;
  double v14 = 0x3FF0000000000000uLL;
  double v16 = v6;
  uint64_t v7 = LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
  uint64_t v8 = *a2 + a2[2];
  double v15 = 0;
  double v14 = 0xBFF0000000000000;
  double v16 = v8;
  uint64_t v9 = v7 | LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
  uint64_t v10 = -a2[1];
  double v14 = xmmword_1B7E733E0;
  double v15 = 0;
  double v16 = v10;
  uint64_t v11 = LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
  double v12 = a2[1] + a2[3];
  double v14 = xmmword_1B7E7E030;
  double v15 = 0;
  double v16 = v12;
  return v9 | v11 | LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
}

uint64_t LiImagePolygon::clip(uint64_t **a1, uint64_t a2, double *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a2 + 88) + 8) - **(void **)(a2 + 88);
  unint64_t v4 = v3 >> 5;
  if ((int)(v3 >> 5) < 1)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (v3 >> 5);
    uint64_t v11 = 16;
    do
    {
      uint64_t v12 = **(void **)(a2 + 88);
      double v13 = (double *)(v12 + v11);
      if (v10 - 1 == v8) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v8 + 1;
      }
      double v15 = (double *)(v12 + 32 * v14);
      double v16 = *(v13 - 2);
      double v17 = *(v13 - 1);
      double v18 = v15[1] - v17;
      double v19 = *v13;
      double v20 = v15[2] - *v13;
      double v22 = *(double *)(a2 + 48);
      double v21 = *(double *)(a2 + 56);
      double v23 = *(double *)(a2 + 40);
      double v24 = v18 * v21 - v20 * v22;
      double v25 = *v15 - v16;
      double v26 = v20 * v23 - v25 * v21;
      double v27 = v25 * v22 - v18 * v23;
      double v28 = (double *)(v12 + 32 * (((int)v8 + 2) % (int)v4));
      double v29 = v24 * *v28 + v26 * v28[1] + v27 * v28[2];
      BOOL v30 = v29 < 0.0;
      if (v29 >= 0.0) {
        double v31 = v24;
      }
      else {
        double v31 = -v24;
      }
      if (v30)
      {
        double v26 = -v26;
        double v27 = -v27;
      }
      v38.f64[0] = *(v13 - 2);
      v38.f64[1] = v17;
      double v39 = v19;
      v40.f64[0] = v31;
      v40.f64[1] = v26;
      double v41 = v27;
      int v32 = *(_DWORD *)(**(void **)(a2 + 104) + v11 + 8);
      v35.f64[0] = v31;
      v35.f64[1] = v26;
      double v36 = v27;
      double v37 = -(v16 * v31 + v26 * v17 + v27 * v19);
      PCMatrix44Tmpl<double>::transform_row<double>(a3, v35.f64, v35.f64);
      double v33 = vaddvq_f64(vmulq_f64(v35, v35)) + v36 * v36;
      if (v33 <= -1.0e-24 || v33 >= 1.0e-24)
      {
        float64x2_t v40 = v35;
        double v41 = v36;
        float64x2_t v38 = vdivq_f64(vmulq_n_f64(v35, -v37), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0));
        double v39 = -(v37 * v36) / v33;
        v9 |= LiImagePolygon::do_clip(a1, v38.f64, (uint64_t)&v35, v32);
      }
      ++v8;
      v11 += 32;
    }
    while (v10 != v8);
  }
  return v9 & 1;
}

uint64_t LiImagePolygon::do_clip(uint64_t **a1, double *a2, uint64_t a3, int a4)
{
  unint64_t v4 = a1[11];
  if ((int)((unint64_t)(v4[1] - *v4) >> 5) > 2)
  {
    uint64_t v10 = ((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
    long long v77 = *(_OWORD *)v10;
    double v11 = *(double *)(v10 + 24);
    uint64_t v78 = *(void *)(v10 + 16);
    double v79 = v11;
    double v12 = *(double *)(v10 + 32);
    double v13 = *(double *)(v10 + 40);
    double v80 = v12;
    double v81 = v13;
    uint64_t v14 = a1[11];
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1] - *v14;
    unint64_t v17 = v16 >> 5;
    int v18 = (v16 >> 5) - 1;
    if ((int)(v16 >> 5) < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = (v16 >> 5);
      for (uint64_t i = (float64x2_t *)(v15 + 8); ; i += 2)
      {
        float64x2_t v22 = vmulq_f64(*i, *(float64x2_t *)(a3 + 8));
        double v23 = *(double *)(a3 + 24) + i[-1].f64[1] * *(double *)a3 + v22.f64[0] + v22.f64[1];
        if (v23 < 0.0 && (v23 <= -0.0000001 || v23 >= 0.0000001)) {
          break;
        }
        if (v20 == ++v19) {
          return 0;
        }
      }
    }
    if (v19 == v17)
    {
      return 0;
    }
    else
    {
      if ((int)v17 <= 0) {
        _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
      }
      int v24 = 0;
      int v25 = (int)v19 % (int)v17;
      int v26 = (int)v19 % (int)v17;
      while (1)
      {
        uint64_t v27 = *a1[11] + 32 * v26;
        float64x2_t v28 = vmulq_f64(*(float64x2_t *)(v27 + 8), *(float64x2_t *)(a3 + 8));
        if (*(double *)(a3 + 24) + *(double *)v27 * *(double *)a3 + v28.f64[0] + v28.f64[1] >= 0.0) {
          break;
        }
        int v26 = (v18 + v26) % (int)v17;
        if (++v24 >= (int)v17)
        {
          a1[11][1] = *a1[11];
          return 1;
        }
      }
      int v29 = 0;
      uint64_t v30 = *a1[11];
      do
      {
        uint64_t v31 = v30 + 32 * v25;
        float64x2_t v32 = vmulq_f64(*(float64x2_t *)(v31 + 8), *(float64x2_t *)(a3 + 8));
        if (*(double *)(a3 + 24) + *(double *)v31 * *(double *)a3 + v32.f64[0] + v32.f64[1] > 0.0) {
          break;
        }
        int v25 = (v25 + 1) % (int)v17;
        ++v29;
      }
      while (v29 < (int)v17);
      double v72 = 0.0;
      double v33 = (double *)(v30 + 32 * v26);
      double v34 = *v33;
      double v35 = v33[1];
      double v36 = v33[2];
      int v37 = v26 + 1;
      int v38 = v26 + 1;
      int v39 = (v26 + 1) / (int)v17;
      if (v26 <= -2) {
        int v38 = v37 - v39 * v17 + v17;
      }
      uint64_t v40 = *a1[11] + 32 * (v38 % (int)v17);
      double v41 = *(double *)v40;
      double v42 = *(double *)(v40 + 8);
      double v43 = *(double *)(v40 + 16);
      double v44 = *(double *)v40 - v34;
      double v45 = v42 - v35;
      double v46 = v43 - v36;
      v76[4] = v46 * v11 - v44 * v13;
      v76[5] = v44 * v12 - v45 * v11;
      v76[0] = v41;
      v76[1] = v42;
      v76[2] = v43;
      v76[3] = v45 * v13 - v46 * v12;
      int v47 = v25 - 1;
      int v48 = v25 - 1;
      if (v25 <= 0) {
        int v48 = v47 % (int)v17 + v17;
      }
      uint64_t v49 = *a1[11];
      v50 = (double *)(v49 + 32 * (v48 % (int)v17));
      double v51 = *v50;
      double v52 = v50[1];
      double v53 = v50[2];
      v54 = (double *)(v49 + 32 * v25);
      double v55 = *v54 - v51;
      double v56 = v54[1] - v52;
      double v57 = v54[2] - v53;
      double v74 = v57 * v11 - v55 * v13;
      double v75 = v55 * v12 - v56 * v11;
      v71[0] = v51;
      v71[1] = v52;
      double v72 = v53;
      double v73 = v56 * v13 - v57 * v12;
      int v58 = v37 - v39 * v17;
      PCPlane<double>::intersect((double *)&v77, a2, v76, (double *)(v49 + 32 * v58));
      *(_DWORD *)(*a1[13] + 32 * v58 + 24) = a4;
      v59 = a1[11];
      uint64_t v60 = *v59 + 32 * v25;
      memset(v82, 0, sizeof(v82));
      std::vector<LiPolygon::PosEdge>::insert(v59, v60, (uint64_t)v82);
      PCPlane<double>::intersect((double *)&v77, a2, v71, (double *)(*a1[11] + 32 * v25));
      unint64_t v61 = (unint64_t)(a1[11][1] - *a1[11]) >> 5;
      if (v58 < v25) {
        int v62 = v58;
      }
      else {
        int v62 = v58 + 1;
      }
      if ((int)v61 <= 0) {
        _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
      }
      int v63 = v25 - 1;
      if (v25 <= 0) {
        int v63 = v47 % (int)v61 + v61;
      }
      *(_DWORD *)(*a1[13] + 32 * v25 + 24) = *(_DWORD *)(*a1[13] + 32 * (v63 % (int)v61) + 24);
      for (int j = v47 + v61; ; int j = v65 + v61 - 1)
      {
        int v65 = j % (int)v61;
        if (v65 == v62) {
          break;
        }
        double v66 = a1[11];
        v67 = (_OWORD *)v66[1];
        double v68 = (_OWORD *)(*v66 + 32 * v65);
        if (v68 + 2 != v67)
        {
          do
          {
            double v69 = v68 + 2;
            *double v68 = v68[2];
            *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)((char *)v68 + 44);
            double v70 = v68 + 4;
            v68 += 2;
          }
          while (v70 != v67);
          double v68 = v69;
        }
        v66[1] = (uint64_t)v68;
        LODWORD(v61) = v61 - 1;
        if (v65 < v62) {
          int v62 = (v62 + (int)v61 - 1) % (int)v61;
        }
      }
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    v4[1] = *v4;
  }
  return result;
}

uint64_t LiImagePolygon::clip(uint64_t **a1, float64x2_t *a2, int a3)
{
  uint64_t result = PCPlaneType(a2->f64);
  if (result)
  {
    if (result == 1)
    {
      std::vector<LiPolygon::PosEdge>::resize(a1[11], 0);
      return 1;
    }
    else
    {
      memset(v7, 0, sizeof(v7));
      uint64_t result = PCPlane<double>::setImplicit((uint64_t)v7, a2);
      if (result) {
        return LiImagePolygon::do_clip(a1, (double *)v7, (uint64_t)a2, a3);
      }
    }
  }
  return result;
}

uint64_t LiImagePolygon::clip(uint64_t **this, const LiClipSet *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 3);
  if ((int)v2 < 1)
  {
    char v6 = 0;
  }
  else
  {
    unint64_t v4 = this;
    uint64_t v5 = 0;
    char v6 = 0;
    do
    {
      if (v5 >= *((int *)a2 + 3)) {
        PCArray_base::badIndex((PCArray_base *)this);
      }
      if (v5 >= *((int *)a2 + 9)) {
        PCArray_base::badIndex((PCArray_base *)this);
      }
      this = (uint64_t **)LiImagePolygon::clip(v4, (float64x2_t *)(*((void *)a2 + 2) + 32 * v5), *(_DWORD *)(*((void *)a2 + 5) + 4 * v5));
      v6 |= this;
      ++v5;
    }
    while (v5 != v2);
  }
  return v6 & 1;
}

_OWORD *std::vector<LiPolygon::PosEdge>::__assign_with_size[abi:ne180100]<LiPolygon::PosEdge*,LiPolygon::PosEdge*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  char v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 5)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](a1, v11);
    double v13 = (_OWORD *)a1[1];
    double v12 = (_OWORD **)(a1 + 1);
    uint64_t result = v13;
    uint64_t v14 = v13;
    if (v6 != a3)
    {
      uint64_t v14 = result;
      do
      {
        *uint64_t v14 = *v6;
        *((void *)v14 + 2) = *((void *)v6 + 2);
        *((_DWORD *)v14 + 6) = *((_DWORD *)v6 + 6);
        v14 += 2;
        v6 += 2;
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v23 = (char *)v14 - (char *)result;
    goto LABEL_27;
  }
  unint64_t v16 = (_OWORD *)a1[1];
  double v12 = (_OWORD **)(a1 + 1);
  uint64_t v15 = v16;
  unint64_t v17 = ((char *)v16 - (char *)result) >> 5;
  if (v17 >= a4)
  {
    uint64_t v14 = result;
    if (a2 != a3)
    {
      int v24 = result;
      do
      {
        long long v25 = *v6;
        *(_OWORD *)((char *)v24 + 12) = *(long long *)((char *)v6 + 12);
        *int v24 = v25;
        v24 += 2;
        v6 += 2;
        v14 += 2;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  int v18 = &a2[2 * v17];
  if (v15 != result)
  {
    uint64_t v19 = 32 * v17;
    do
    {
      long long v20 = *v6;
      *(_OWORD *)((char *)result + 12) = *(long long *)((char *)v6 + 12);
      *uint64_t result = v20;
      result += 2;
      v6 += 2;
      v19 -= 32;
    }
    while (v19);
    uint64_t result = *v12;
  }
  double v21 = (char *)result;
  if (v18 != a3)
  {
    double v21 = (char *)result;
    float64x2_t v22 = result;
    do
    {
      *float64x2_t v22 = *v18;
      *((void *)v22 + 2) = *((void *)v18 + 2);
      *((_DWORD *)v22 + 6) = *((_DWORD *)v18 + 6);
      v21 += 32;
      v18 += 2;
      v22 += 2;
    }
    while (v18 != a3);
  }
  int64_t v23 = v21 - (char *)result;
LABEL_27:
  *double v12 = (_OWORD *)((char *)result + v23);
  return result;
}

char *std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_OWORD *std::vector<LiPolygon::PosEdge>::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (_OWORD *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (a2 - *a1) >> 5;
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v13 = ((uint64_t)(v6 - v7) >> 5) + 1;
    if (v13 >> 59) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v10 - v7;
    uint64_t v15 = v14 >> 4;
    if (v14 >> 4 <= v13) {
      uint64_t v15 = v13;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v23 = v9;
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v9, v16);
    }
    else {
      unint64_t v17 = 0;
    }
    __p = v17;
    long long v20 = &v17[32 * v8];
    double v21 = v20;
    float64x2_t v22 = &v17[32 * v16];
    std::__split_buffer<LiPolygon::PosEdge>::push_back(&__p, a3);
    uint64_t v4 = (_OWORD *)std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(a1, &__p, (uint64_t)v4);
    if (v21 != v20) {
      v21 += (v20 - v21 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == v6)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_DWORD *)(v7 + 32 * v8 + 24) = *(_DWORD *)(a3 + 24);
    a1[1] = a2 + 32;
  }
  else
  {
    std::vector<LiPolygon::PosEdge>::__move_range((uint64_t)a1, a2, v6, a2 + 32);
    long long v12 = *(_OWORD *)a3;
    *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a3 + 12);
    *uint64_t v4 = v12;
  }
  return v4;
}

void sub_1B7ACCEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<LiPolygon::PosEdge>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - a4;
  unint64_t v6 = a2 + v4 - a4;
  uint64_t v7 = v4;
  while (v6 < a3)
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    result.n128_u64[0] = *(void *)(v6 + 16);
    *(void *)(v7 + 16) = result.n128_u64[0];
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(v6 + 24);
    v7 += 32;
    v6 += 32;
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v9 = v4 - 32;
    uint64_t v10 = 32 * (v5 >> 5);
    uint64_t v11 = a2 - 32;
    do
    {
      __n128 result = *(__n128 *)(v11 + v10);
      *(_OWORD *)(v9 + 12) = *(_OWORD *)(v11 + v10 + 12);
      *(__n128 *)uint64_t v9 = result;
      v9 -= 32;
      v10 -= 32;
    }
    while (v10);
  }
  return result;
}

double std::__split_buffer<LiPolygon::PosEdge>::push_back(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == a1[3])
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (char *)v5 - (unsigned char *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = (v4 - (unsigned char *)*a1) >> 4;
      }
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)a1[4], v13);
      unint64_t v16 = &v14[32 * (v13 >> 2)];
      unint64_t v17 = (char *)a1[1];
      uint64_t v4 = v16;
      int v18 = (char *)((unsigned char *)a1[2] - v17);
      if (v18)
      {
        uint64_t v4 = &v18[(void)v16];
        uint64_t v19 = &v14[32 * (v13 >> 2)];
        do
        {
          *(_OWORD *)uint64_t v19 = *(_OWORD *)v17;
          *((void *)v19 + 2) = *((void *)v17 + 2);
          *((_DWORD *)v19 + 6) = *((_DWORD *)v17 + 6);
          v19 += 32;
          v17 += 32;
        }
        while (v19 != v4);
      }
      long long v20 = *a1;
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v4;
      a1[3] = &v14[32 * v15];
      if (v20)
      {
        operator delete(v20);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 5;
      BOOL v8 = v6 >> 5 < -1;
      uint64_t v9 = (v6 >> 5) + 2;
      if (!v8) {
        uint64_t v9 = v7 + 1;
      }
      if (v5 == (_OWORD *)v4)
      {
        long long v12 = (char *)&v5[-2 * (v9 >> 1)];
      }
      else
      {
        do
        {
          uint64_t v10 = &v5[-2 * (v9 >> 1)];
          long long v11 = *v5;
          *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v5 + 12);
          _OWORD *v10 = v11;
          v5 += 2;
        }
        while (v5 != (_OWORD *)v4);
        uint64_t v4 = (char *)a1[1];
        long long v12 = (char *)&v5[-2 * (v9 >> 1)];
      }
      a1[1] = &v4[-32 * (v9 >> 1)];
      uint64_t v4 = v12;
    }
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  double result = *(double *)(a2 + 16);
  *((double *)v4 + 2) = result;
  *((_DWORD *)v4 + 6) = *(_DWORD *)(a2 + 24);
  a1[2] = v4 + 32;
  return result;
}

uint64_t std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = result + v7;
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 32;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v9 = a1[1];
  for (uint64_t i = a2[2]; a3 != v9; a3 += 32)
  {
    *(_OWORD *)uint64_t i = *(_OWORD *)a3;
    *(void *)(i + 16) = *(void *)(a3 + 16);
    *(_DWORD *)(i + 24) = *(_DWORD *)(a3 + 24);
    i += 32;
  }
  a2[2] = i;
  uint64_t v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void std::vector<PCPlane<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    uint64_t v10 = (char *)__p + 48 * v6;
    std::vector<PCPlane<double>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      uint64_t v9 = &v8[(v9 - v8 - 48) % 0x30uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B7ACD250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<PCPlane<double>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v2 + 32);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<PCPlane<double>>::__push_back_slow_path<PCPlane<double>>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v7, v9);
  uint64_t v11 = &v10[48 * v4];
  __p = v10;
  unint64_t v16 = v11;
  int v18 = &v10[48 * v12];
  *(_OWORD *)uint64_t v11 = *a2;
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = a2[2];
  unint64_t v17 = v11 + 48;
  std::vector<PCPlane<double>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    unint64_t v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B7ACD42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<PCPlane<double>>::insert(uint64_t *a1, _OWORD *a2, unint64_t a3)
{
  unint64_t v4 = (unint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = ((uint64_t)a2 - *a1) >> 4;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * v8;
  unint64_t v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v11 = v12;
  if (v6 >= v12)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 > 0x555555555555555) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v7) >> 4);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v18 = 0x555555555555555;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v25 = v10;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v10, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    __p = v19;
    float64x2_t v22 = &v19[48 * v9];
    uint64_t v23 = v22;
    int v24 = &v19[48 * v18];
    std::__split_buffer<PCPlane<double>>::push_back[abi:ne180100](&__p, a3);
    unint64_t v4 = std::vector<PCPlane<double>>::__swap_out_circular_buffer(a1, &__p, (_OWORD *)v4);
    if (v23 != v22) {
      uint64_t v23 = &v22[(v23 - v22 - 48) % 0x30uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == (_OWORD *)v6)
  {
    *a2 = *(_OWORD *)a3;
    a2[1] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v7 + 16 * v8 + 32) = *(_OWORD *)(a3 + 32);
    a1[1] = (uint64_t)(a2 + 3);
  }
  else
  {
    std::vector<PCPlane<double>>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 3));
    if (v4 <= a3) {
      a3 += 48 * (a1[1] > a3);
    }
    long long v13 = *(_OWORD *)a3;
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)unint64_t v4 = v13;
    uint64_t v14 = v7 + 48 * v9;
    long long v15 = *(_OWORD *)(a3 + 24);
    *(void *)(v14 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(a3 + 40);
    *(_OWORD *)(v14 + 24) = v15;
  }
  return v4;
}

void sub_1B7ACD64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<PCPlane<double>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - a4;
  unint64_t v6 = a2 + v4 - a4;
  uint64_t v7 = v4;
  while (v6 < a3)
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v6 + 16);
    __n128 result = *(__n128 *)(v6 + 32);
    *(__n128 *)(v7 + 32) = result;
    v7 += 48;
    v6 += 48;
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    unint64_t v9 = (__n128 *)(v4 - 24);
    uint64_t v10 = 16 * (v5 >> 4);
    do
    {
      __n128 v11 = *(__n128 *)(a2 + v10 - 48);
      v9[-1].n128_u64[1] = *(void *)(a2 + v10 - 32);
      *(__n128 *)((char *)v9 - 24) = v11;
      __n128 result = *(__n128 *)(a2 + v10 - 24);
      v9[1].n128_u64[0] = *(void *)(a2 + v10 - 8);
      *unint64_t v9 = result;
      v9 -= 3;
      v10 -= 48;
    }
    while (v10);
  }
  return result;
}

__n128 std::__split_buffer<PCPlane<double>>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = 0x5555555555555556 * ((v4 - (unsigned char *)*a1) >> 4);
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)a1[4], v12);
      unint64_t v16 = &v14[48 * v13];
      unint64_t v17 = a1[1];
      uint64_t v4 = v16;
      int64_t v18 = (unsigned char *)a1[2] - (unsigned char *)v17;
      if (v18)
      {
        uint64_t v4 = &v16[v18];
        uint64_t v19 = &v14[48 * v13];
        do
        {
          *(_OWORD *)uint64_t v19 = *v17;
          *((_OWORD *)v19 + 1) = v17[1];
          *((_OWORD *)v19 + 2) = v17[2];
          v19 += 48;
          v17 += 3;
        }
        while (v19 != v4);
      }
      long long v20 = *a1;
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v4;
      a1[3] = &v14[48 * v15];
      if (v20)
      {
        operator delete(v20);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
      uint64_t v7 = v6 + 2;
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      if (v5 == v4)
      {
        __n128 v11 = &v5[-48 * (v7 >> 1)];
      }
      else
      {
        do
        {
          uint64_t v8 = &v5[-48 * (v7 >> 1)];
          long long v9 = *(_OWORD *)v5;
          *((void *)v8 + 2) = *((void *)v5 + 2);
          *(_OWORD *)uint64_t v8 = v9;
          long long v10 = *(_OWORD *)(v5 + 24);
          *((void *)v8 + 5) = *((void *)v5 + 5);
          *(_OWORD *)(v8 + 24) = v10;
          v5 += 48;
        }
        while (v5 != v4);
        uint64_t v4 = (char *)a1[1];
        __n128 v11 = &v5[-48 * (v7 >> 1)];
      }
      a1[1] = &v4[-48 * (v7 >> 1)];
      uint64_t v4 = v11;
    }
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
  __n128 result = *(__n128 *)(a2 + 32);
  *((__n128 *)v4 + 2) = result;
  a1[2] = v4 + 48;
  return result;
}

uint64_t std::vector<PCPlane<double>>::__swap_out_circular_buffer(void *a1, void *a2, _OWORD *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (_OWORD *)*a1;
  uint64_t v6 = result;
  if ((_OWORD *)*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      long long v8 = *(v7 - 3);
      v7 -= 3;
      *(_OWORD *)(v6 - 48) = v8;
      v6 -= 48;
      *(_OWORD *)(v6 + 16) = v7[1];
      *(_OWORD *)(v6 + 32) = v7[2];
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  long long v9 = (_OWORD *)a1[1];
  for (uint64_t i = (_OWORD *)a2[2]; a3 != v9; a3 += 3)
  {
    *uint64_t i = *a3;
    i[1] = a3[1];
    i[2] = a3[2];
    i += 3;
  }
  a2[2] = i;
  __n128 v11 = (_OWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  std::vector<int>::const_reference v3 = __x;
  uint64_t i = (int *)__position.__i_;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<int>::pointer begin = this->__begin_;
    unint64_t v14 = end - this->__begin_ + 1;
    if (v14 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)__position.__i_ - (char *)begin;
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<int> *)&this->__end_cap_;
    if (v18) {
      uint64_t v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this->__end_cap_, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    long long v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (begin == i) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 1;
        }
        uint64_t v23 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v22);
        long long v20 = (int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    int *v20 = *v3;
    __v.__end_ = v20 + 1;
    uint64_t i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const int *>::iterator_type v9 = __position.__i_ + 1;
    long long v10 = end - 1;
    std::vector<int>::pointer v11 = this->__end_;
    while (v10 < end)
    {
      int v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9) {
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    }
    if (i <= v3) {
      v3 += this->__end_ > v3;
    }
    *uint64_t i = *v3;
  }
  return (std::vector<int>::iterator)i;
}

void sub_1B7ACDB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  uint64_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::vector<PCVector4<double>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<PCVector4<double>>::__append(a1, a2 - v2);
  }
}

void std::vector<PCVector4<double>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    __p = v13;
    uint64_t v15 = &v13[32 * v10];
    uint64_t v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    uint64_t v16 = &v15[32 * a2];
    std::vector<PCVector4<double>>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15) {
      v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B7ACDDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<PCVector4<double>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 32);
    v2 -= 32;
    *(_OWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t LiEquirectReorient::LiEquirectReorient(uint64_t a1, const PCSharedCount *a2, int a3, int a4, _DWORD *a5, char a6)
{
  *(void *)(a1 + 88) = &unk_1F1199AC8;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, (uint64_t *)&off_1F1120980);
  *(void *)a1 = &unk_1F1120878;
  *(void *)(a1 + 88) = &unk_1F1120960;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a4;
  *(_DWORD *)(a1 + 44) = *a5;
  *(_DWORD *)(a1 + 48) = a5[1];
  *(_DWORD *)(a1 + 52) = a5[2];
  *(_DWORD *)(a1 + 56) = a5[3];
  *(_DWORD *)(a1 + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a5[4];
  *(_DWORD *)(a1 + 64) = a5[5];
  *(_DWORD *)(a1 + 68) = a5[6];
  *(_DWORD *)(a1 + 72) = a5[7];
  *(_DWORD *)(a1 + 76) = a5[8];
  *(unsigned char *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a6;
  *(PCSharedCount *)(a1 + 16) = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount(&v13, a2 + 1);
  PCSharedCount::operator=((uint64_t *)(a1 + 24), (uint64_t *)&v13);
  PCSharedCount::~PCSharedCount(&v13);
  return a1;
}

void sub_1B7ACDFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  LiImageFilter::~LiImageFilter((PCSharedCount *)v10, (const PCString *)&off_1F1120980);
  *(void *)(v10 + 88) = v12;
  *(unsigned char *)(v10 + 104) = 0;
  PCWeakCount::~PCWeakCount(v11);
  _Unwind_Resume(a1);
}

void LiEquirectReorient::LiEquirectReorient(LiEquirectReorient *this, const LiEquirectReorient *a2)
{
  *((void *)this + 11) = &unk_1F1199AC8;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 1;
  LiImageFilter::LiImageFilter(this, (const LiImageFilter *)&off_1F1120980, (uint64_t)a2);
  *(void *)this = &unk_1F1120878;
  *((void *)this + 11) = &unk_1F1120960;
  *(void *)((char *)this + 36) = *(void *)((char *)a2 + 36);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((unsigned char *)this + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((unsigned char *)a2 + 80);
}

void sub_1B7ACE0F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  *(unsigned char *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void LiEquirectReorient::clone(LiEquirectReorient *this)
{
}

void sub_1B7ACE154(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

void PCMakePtr<LiEquirectReorient,LiEquirectReorient const&>()
{
}

void sub_1B7ACE1E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40C56E03D1);
  _Unwind_Resume(a1);
}

uint64_t LiEquirectReorient::filteredEdges(LiEquirectReorient *this)
{
  return 0;
}

uint64_t LiEquirectReorient::pixelTransformSupport()
{
  return 3;
}

uint64_t LiEquirectReorient::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  return LiAgent::getHelium(a2, this[2], a3);
}

void LiEquirectReorient::~LiEquirectReorient(PCSharedCount *this)
{
  *(void *)(v1 + 88) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 96));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 88) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 96));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiEquirectReorient::~LiEquirectReorient(LiEquirectReorient *this)
{
  *(void *)(v1 + 88) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 104) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 96);

  PCWeakCount::~PCWeakCount(v2);
}

{
  LiEquirectReorient::~LiEquirectReorient((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

void LiDofInfo::LiDofInfo(LiDofInfo *this)
{
  *(_OWORD *)this = xmmword_1B837C570;
  *((void *)this + 2) = 0x447A0000461C4000;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 6) = 0;
  *(_OWORD *)((char *)this + 28) = HGRectInfinite;
  *(_OWORD *)((char *)this + 56) = xmmword_1B837C580;
  *((_DWORD *)this + 18) = 1124073472;
}

double LiDofInfo::getCircleOfConfusionRadius(LiDofInfo *this, double a2)
{
  double v2 = fmax(a2, 1.0);
  double v3 = fmax(*((float *)this + 1) - v2, 0.0);
  if (v3 < v2 - *((float *)this + 2)) {
    double v3 = v2 - *((float *)this + 2);
  }
  return *(float *)this / v2 * v3;
}

void LiPolygonDrawer::LiPolygonDrawer(LiPolygonDrawer *this)
{
  LiImagePolygon::LiImagePolygon(this);
  LiDrawer::LiDrawer((LiDrawer *)(v2 + 112));
  *(void *)this = &unk_1F1120C50;
  *((void *)this + 14) = &unk_1F1120CA0;
  *((void *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
}

void sub_1B7ACE488(_Unwind_Exception *a1)
{
  LiImagePolygon::~LiImagePolygon(v1);
  _Unwind_Resume(a1);
}

void LiPolygonDrawer::~LiPolygonDrawer(LiPolygonDrawer *this)
{
  *(void *)this = &unk_1F1120C50;
  uint64_t v2 = (LiPolygonDrawer *)((char *)this + 112);
  *((void *)this + 14) = &unk_1F1120CA0;
  uint64_t v3 = *((void *)this + 20);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  LiDrawer::~LiDrawer(v2);

  LiImagePolygon::~LiImagePolygon(this);
}

void LiPolygonInstance::LiPolygonInstance(LiPolygonInstance *this, LiRenderInstance *a2)
{
  LiPolygonDrawer::LiPolygonDrawer(this);
  Description = (const LiRenderParameters *)ProGL::Private::TextureImpl::getDescription(a2);
  LiAgent::LiAgent((LiPolygonInstance *)((char *)this + 168), Description, 1);
  *(void *)this = &unk_1F1120D58;
  *((void *)this + 14) = &unk_1F1120E08;
  *((void *)this + 89) = 0x3FF0000000000000;
  *((void *)this + 84) = 0x3FF0000000000000;
  *((void *)this + 79) = 0x3FF0000000000000;
  *((_OWORD *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *(_OWORD *)((char *)this + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 105) = 0x3FF0000000000000;
  *((void *)this + 10std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 47) = _Q1;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((void *)this + 121) = 0x3FF0000000000000;
  *((void *)this + 116) = 0x3FF0000000000000;
  *((_OWORD *)this + 55) = _Q1;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((void *)this + 142) = 0x3FF0000000000000;
  *((void *)this + 137) = 0x3FF0000000000000;
  *((void *)this + 132) = 0x3FF0000000000000;
  *((_OWORD *)this + 63) = _Q1;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 108std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 7std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 116std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((void *)this + 157) = 0x3FF0000000000000;
  *((void *)this + 152) = 0x3FF0000000000000;
  *((void *)this + 147) = 0x3FF0000000000000;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 124std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((void *)this + 178) = 0x3FF0000000000000;
  *((void *)this + 173) = 0x3FF0000000000000;
  *((void *)this + 168) = 0x3FF0000000000000;
  *((_OWORD *)this + 81) = _Q1;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((void *)this + 179) = 0;
  *((unsigned char *)this + 144std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 181) = a2;
  *((void *)this + 182) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 183);
  *((void *)this + 184) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 185);
  *((void *)this + 186) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 187);
  *((void *)this + 188) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 189);
  *((void *)this + 19std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((unsigned char *)this + 1528) = 0;
  *((void *)this + 192) = 0;
  LiImageFilterChain::LiImageFilterChain((LiPolygonInstance *)((char *)this + 1544));
  *((void *)this + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_OWORD *)this + 99) = 0u;
  *((_DWORD *)this + 402) = 1;
  *((unsigned char *)this + 1612) = 0;
  *((unsigned char *)this + 416) = *((unsigned char *)a2 + 16);
}

void sub_1B7ACE74C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v6);
  PCSharedCount::~PCSharedCount(v5);
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(v3);
  LiAgent::~LiAgent(v2);
  LiPolygonDrawer::~LiPolygonDrawer(v1);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::makePiece(LiPolygonInstance *this)
{
}

void sub_1B7ACEA1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4041B119E4);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::~LiPolygonInstance(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F1120D58;
  this[14].int var0 = (PC_Sp_counted_base *)&unk_1F1120E08;
  uint64_t v2 = this + 195;
  this[195].int var0 = (PC_Sp_counted_base *)&unk_1F10AD6B0;
  if (SLODWORD(this[196].var0) < 0) {
    int var0 = 1;
  }
  else {
    int var0 = (int)this[196].var0;
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v2, 0, var0);
  uint64_t v4 = this[197].var0;
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8077774924);
  }
  this[197].int var0 = 0;
  LODWORD(this[196].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCSharedCount::~PCSharedCount(this + 194);
  PCSharedCount::~PCSharedCount(this + 189);
  PCSharedCount::~PCSharedCount(this + 187);
  PCSharedCount::~PCSharedCount(this + 185);
  PCSharedCount::~PCSharedCount(this + 183);
  LiAgent::~LiAgent((LiAgent *)&this[21]);

  LiPolygonDrawer::~LiPolygonDrawer((LiPolygonDrawer *)this);
}

{
  uint64_t vars8;

  LiPolygonInstance::~LiPolygonInstance(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'LiPolygonInstance::~LiPolygonInstance(PCSharedCount *this)
{
}

{
  uint64_t vars8;

  LiPolygonInstance::~LiPolygonInstance(this - 14);

  JUMPOUT(0x1BA9BFBA0);
}

double LiPolygonInstance::addReflectionFilter(LiPolygonInstance *this)
{
  double result = (*(double (**)(void))(**((void **)this + 179) + 184))(*((void *)this + 179));
  if (result > 0.0 && *(unsigned char *)(*((void *)this + 27) + 79))
  {
    if (*(int *)(*((void *)this + 181) + 96) < 1)
    {
      double result = *((double *)this + 190)
             * fmax(1.0 - (*(double (**)(void))(**((void **)this + 179) + 184))(*((void *)this + 179)), 0.0);
      *((double *)this + 19std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = result;
    }
    else
    {
      LiPolygonInstance::makeReflectionFilter(this, (PCSharedCount *)&v3);
      if (v3)
      {
        LiImageReflection::setBlendMode((uint64_t)v3, *(_DWORD *)(*((void *)this + 179) + 680));
        LiImageFilterChain::append((LiPolygonInstance *)((char *)this + 1544), v3);
      }
      PCSharedCount::~PCSharedCount(&v4);
    }
  }
  return result;
}

void sub_1B7ACECB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

BOOL LiPolygonInstance::makeReflectionFilter@<W0>(LiPolygonInstance *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->int var0 = 0;
  PCSharedCount::PCSharedCount(a2 + 1);
  long long v3 = *(_OWORD *)((char *)this + 712);
  long long v4 = *(_OWORD *)((char *)this + 680);
  long long v41 = *(_OWORD *)((char *)this + 696);
  long long v42 = v3;
  long long v5 = *(_OWORD *)((char *)this + 712);
  long long v6 = *(_OWORD *)((char *)this + 744);
  long long v43 = *(_OWORD *)((char *)this + 728);
  long long v44 = v6;
  long long v7 = *(_OWORD *)((char *)this + 648);
  long long v37 = *(_OWORD *)((char *)this + 632);
  long long v38 = v7;
  long long v8 = *(_OWORD *)((char *)this + 680);
  long long v10 = *(_OWORD *)((char *)this + 632);
  long long v9 = *(_OWORD *)((char *)this + 648);
  long long v39 = *(_OWORD *)((char *)this + 664);
  long long v40 = v8;
  v36[4] = v41;
  v36[5] = v5;
  long long v11 = *(_OWORD *)((char *)this + 744);
  v36[6] = v43;
  v36[7] = v11;
  v36[0] = v10;
  v36[1] = v9;
  v36[2] = v39;
  v36[3] = v4;
  if (PCMatrix44Tmpl<double>::invert((double *)v36, (double *)v36, 0.0)) {
    goto LABEL_8;
  }
  double v12 = *(double *)&v39 * *((double *)&v41 + 1) - *(double *)&v41 * *((double *)&v39 + 1);
  double v13 = *(double *)&v41 * *((double *)&v37 + 1) - *(double *)&v37 * *((double *)&v41 + 1);
  double v14 = *(double *)&v37 * *((double *)&v39 + 1) - *(double *)&v39 * *((double *)&v37 + 1);
  double v15 = sqrt(v14 * v14 + v12 * v12 + v13 * v13);
  if (v15 <= -0.000000100000001 || v15 >= 0.000000100000001)
  {
    double v12 = v12 / v15;
    double v13 = v13 / v15;
    double v14 = v14 / v15;
  }
  uint64_t v16 = 0;
  *(double *)&long long v38 = v12;
  *(double *)&long long v40 = v13;
  *(double *)&long long v42 = v14;
  *(void *)&long long v44 = 0;
  do
  {
    uint64_t v17 = &v36[v16];
    long long v18 = *(long long *)((char *)&v37 + v16 * 16 + 16);
    _OWORD *v17 = *(long long *)((char *)&v37 + v16 * 16);
    v17[1] = v18;
    v16 += 2;
  }
  while (v16 != 8);
  BOOL result = PCMatrix44Tmpl<double>::invert((double *)v36, (double *)v36, 0.0);
  if (result)
  {
LABEL_8:
    uint64_t v35 = 0x3FF0000000000000;
    uint64_t v32 = 0x3FF0000000000000;
    uint64_t v29 = 0x3FF0000000000000;
    uint64_t v26 = 0x3FF0000000000000;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    (*(void (**)(PCSharedCount *__return_ptr))(**((void **)this + 179) + 144))(v20);
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    long long v24 = *(_OWORD *)&v20[0].var0;
    uint64_t v25 = v21;
    transformPlane<double>(&v37, (double *)&v22, (uint64_t)&v22);
    PCMatrix44Tmpl<double>::setReflect((uint64_t)&v26, (double *)&v24, (double *)&v22);
    LiRenderInstance::getRootTransform(*((LiRenderInstance **)this + 181), &v22);
    PCMatrix44Tmpl<double>::rightMult((uint64_t)&v26, (double *)&v22);
    operator new();
  }
  return result;
}

void sub_1B7ACF494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCSharedCount a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  PCSharedCount::~PCSharedCount(v31);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a26);
  PCSharedCount::~PCSharedCount(v30);
  PCSharedCount::~PCSharedCount(v29);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::crop(uint64_t a1, double *a2, int a3)
{
  if (PCMath::equal(a2, (double *)(a1 + 16), 0.0000001))
  {
    long long v6 = *(uint64_t **)(a1 + 88);
    std::vector<LiPolygon::PosEdge>::resize(v6, 0);
  }
  else
  {
    double v7 = a2[2];
    double v8 = a2[4];
    double v9 = a2[5];
    double v10 = a2[3] * *a2 + v8 * a2[1];
    if (a3) {
      int v11 = 0;
    }
    else {
      int v11 = 2;
    }
    *(double *)double v12 = a2[3];
    *(double *)&v12[1] = v8;
    *(double *)&v12[2] = v9;
    *(double *)&v12[3] = -(v10 + v9 * v7);
    if (liPolygonPlaneClip((uint64_t **)(a1 + 88), (uint64_t **)(a1 + 104), (uint64_t)v12, v11)) {
      *(unsigned char *)(a1 + 144std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
    }
  }
}

__n128 LiPolygonInstance::crop(uint64_t a1, float64x2_t *a2, int a3, __n128 result)
{
  long long v4 = **(double ***)(a1 + 88);
  uint64_t v5 = *(void *)(*(void *)(a1 + 88) + 8) - (void)v4;
  if ((int)((unint64_t)v5 >> 5) >= 1)
  {
    double v9 = a2[1].f64[0];
    double v10 = a2[1].f64[1];
    BOOL v11 = v9 < 0.0;
    result.n128_u64[0] = *(void *)&a2->f64[0];
    double v12 = a2->f64[1];
    if (v10 < 0.0) {
      BOOL v11 = 1;
    }
    if (v4[2] == 0.0)
    {
      BOOL v26 = 0;
      double v27 = v9 + result.n128_f64[0];
      double v28 = v10 + v12;
      uint64_t v29 = 1;
      long long v30 = **(double ***)(a1 + 88);
      while (!v11)
      {
        double v31 = v30[1];
        if (result.n128_f64[0] <= *v30 && v27 >= *v30 && v12 <= v31 && v28 >= v31)
        {
          BOOL v26 = v29 >= (int)(v5 >> 5);
          if (((unint64_t)v5 >> 5) != v29)
          {
            double v35 = v30[6];
            v30 += 4;
            ++v29;
            if (v35 == 0.0) {
              continue;
            }
          }
        }
        if (!v26) {
          break;
        }
        return result;
      }
    }
    v50.f64[0] = 0.0;
    uint64_t v13 = v5 & 0x1FFFFFFFE0;
    if (v13)
    {
      if (v13 == 128)
      {
        double v14 = *v4;
        double v15 = v4[4];
        double v16 = v4[5];
        if (*v4 == v15)
        {
          double v17 = v4[9];
          if (v16 == v17)
          {
            double v18 = v4[8];
            if (v18 == v4[12])
            {
              double v19 = v4[1];
              if (v4[13] == v19)
              {
                double v20 = v18 - v14;
                double v21 = v14 - v18;
                if (v14 >= v18)
                {
                  double v14 = v4[8];
                  double v20 = v21;
                }
                v50.f64[0] = v14;
                double v51 = v20;
                double v22 = v17 - v19;
                double v23 = v19 - v17;
                BOOL v24 = v19 < v17;
                if (v19 >= v17) {
                  float64_t v25 = v17;
                }
                else {
                  float64_t v25 = v19;
                }
LABEL_41:
                if (!v24) {
                  double v22 = v23;
                }
                v50.f64[1] = v25;
                double v52 = v22;
                PCRect<double>::operator&=(&v50, a2);
                std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 88), 4uLL);
                uint64_t v41 = **(void **)(a1 + 88);
                *(float64x2_t *)uint64_t v41 = v50;
                *(void *)(v41 + 16) = 0;
                float64_t v42 = v50.f64[1];
                result.n128_u64[0] = *(void *)&v50.f64[0];
                double v43 = v51;
                float64_t v44 = v50.f64[1] + v52;
                *(float64_t *)(v41 + 32) = v50.f64[0];
                *(float64_t *)(v41 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v44;
                *(void *)(v41 + 48) = 0;
                result.n128_f64[0] = result.n128_f64[0] + v43;
                *(void *)(v41 + 64) = result.n128_u64[0];
                *(float64_t *)(v41 + 72) = v44;
                *(void *)(v41 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
                *(void *)(v41 + 96) = result.n128_u64[0];
                *(float64_t *)(v41 + 104) = v42;
                *(void *)(v41 + 112) = 0;
                *(unsigned char *)(a1 + 144std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
                return result;
              }
            }
          }
        }
        double v36 = v4[1];
        if (v36 == v16)
        {
          double v37 = v4[8];
          if (v15 == v37)
          {
            double v38 = v4[9];
            if (v38 == v4[13] && v4[12] == v14)
            {
              double v39 = v37 - v14;
              double v40 = v14 - v37;
              if (v14 >= v37)
              {
                double v14 = v4[8];
                double v39 = v40;
              }
              v50.f64[0] = v14;
              double v51 = v39;
              double v22 = v38 - v36;
              double v23 = v36 - v38;
              BOOL v24 = v36 < v38;
              if (v36 >= v38) {
                float64_t v25 = v38;
              }
              else {
                float64_t v25 = v36;
              }
              goto LABEL_41;
            }
          }
        }
      }
      *(void *)&v47.f64[0] = result.n128_u64[0];
      v47.f64[1] = v12;
      long long v48 = xmmword_1B7E733E0;
      long long v49 = 0uLL;
      LiPolygonInstance::crop(a1, v47.f64, a3);
      if (((*(void *)(*(void *)(a1 + 88) + 8) - **(void **)(a1 + 88)) & 0x1FFFFFFFE0) != 0)
      {
        float64x2_t v45 = *a2;
        long long v48 = 0uLL;
        float64x2_t v47 = v45;
        long long v49 = xmmword_1B7E733D0;
        LiPolygonInstance::crop(a1, v47.f64, a3);
        if (((*(void *)(*(void *)(a1 + 88) + 8) - **(void **)(a1 + 88)) & 0x1FFFFFFFE0) != 0)
        {
          float64x2_t v47 = vaddq_f64(*a2, a2[1]);
          long long v48 = xmmword_1B7E7E030;
          long long v49 = 0uLL;
          LiPolygonInstance::crop(a1, v47.f64, a3);
          if (((*(void *)(*(void *)(a1 + 88) + 8) - **(void **)(a1 + 88)) & 0x1FFFFFFFE0) != 0)
          {
            float64x2_t v46 = vaddq_f64(*a2, a2[1]);
            long long v48 = 0uLL;
            float64x2_t v47 = v46;
            long long v49 = xmmword_1B7E7C890;
            LiPolygonInstance::crop(a1, v47.f64, a3);
          }
        }
      }
    }
  }
  return result;
}

float64x2_t PCRect<double>::operator&=(float64x2_t *a1, float64x2_t *a2)
{
  result.f64[0] = a1[1].f64[0];
  if (result.f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    float64x2_t v3 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a2, *a1), *(int8x16_t *)a2, *(int8x16_t *)a1);
    result.f64[1] = a1[1].f64[1];
    float64x2_t v4 = vaddq_f64(*a1, result);
    float64x2_t v5 = vaddq_f64(*a2, a2[1]);
    float64x2_t result = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v4, v5), (int8x16_t)v5, (int8x16_t)v4), v3);
    *a1 = v3;
    a1[1] = result;
  }
  return result;
}

uint64_t LiPolygonInstance::getOutput(LiPolygonInstance *this)
{
  do
  {
    uint64_t v1 = this;
    uint64_t v2 = (const void *)*((void *)this + 16);
    if (!v2) {
      break;
    }
  }
  while (this);
  return *((void *)v1 + 188);
}

void LiPolygonInstance::makeNode(LiPolygonInstance *this, const LiClipSet *a2)
{
  LiClipSet::operator=((uint64_t)this + 264, (uint64_t)a2);
  uint64_t v4 = *((void *)this + 181);
  *((void *)this + 39) = a2;
  *((void *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v4 + 256;
  *((void *)this + 45) = (char *)this + 632;
  *((void *)this + 47) = v4 + 480;
  *((void *)this + 48) = (char *)this + 760;
  *((void *)this + 49) = v4 + 352;
  *((void *)this + 42) = (char *)this + 1304;
  *((void *)this + 43) = (char *)this + 1176;
  operator new();
}

void sub_1B7AD0714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,PCSharedCount a33)
{
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 24))(a32);
  }
  MEMORY[0x1BA9BFBA0](v33, 0x1000C40F99D3063);
  _Unwind_Resume(a1);
}

double LiPolygonInstance::sliverify(uint64_t **this)
{
  v6[0] = 0.0;
  v6[1] = 0.0;
  v5[0] = 0.0;
  v5[1] = 0.0;
  double v3 = 0.0;
  uint64_t v4 = 0;
  liPolygonDimensions((uint64_t)this, v6, v5, (double *)&v4, &v3);
  double result = v3;
  if (v3 < 0.1)
  {
    std::vector<LiPolygon::PosEdge>::resize(this[11], 0);
    operator new();
  }
  return result;
}

void sub_1B7AD08BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40EE17FB6ALL);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::clipToRendererPlanes(LiPolygonInstance *this)
{
  uint64_t v1 = *((void *)this + 181);
  uint64_t v2 = *(unsigned int *)(v1 + 268);
  if (v2)
  {
    uint64_t v22 = 0x3FF0000000000000;
    uint64_t v19 = 0x3FF0000000000000;
    uint64_t v16 = 0x3FF0000000000000;
    uint64_t v13 = 0x3FF0000000000000;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    PCMatrix44Tmpl<double>::operator*(v1 + 1008, (long long *)((char *)this + 632), (uint64_t)v12);
    if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v13, v12, 0.0))
    {
      uint64_t v4 = (PCArray_base *)PCMatrix44Tmpl<double>::operator*((uint64_t)this + 632, (long long *)&v13, (uint64_t)v12);
      memset(v11, 0, sizeof(v11));
      if ((int)v2 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 16;
        do
        {
          if (v5 >= *(int *)(v1 + 268)) {
            PCArray_base::badIndex(v4);
          }
          double v7 = (float64x2_t *)(*(void *)(v1 + 272) + v6);
          float64x2_t v9 = v7[-1];
          float64x2_t v10 = *v7;
          PCMatrix44Tmpl<double>::transform_row<double>(v12, v9.f64, v9.f64);
          uint64_t v4 = (PCArray_base *)PCPlaneType(v9.f64);
          if (v4)
          {
            if (v4 == 1)
            {
              LiPolygon::setEmpty((uint64_t **)this);
              return;
            }
            double v8 = vaddvq_f64(vmulq_f64(v9, v9)) + v10.f64[0] * v10.f64[0];
            if (v8 <= -1.0e-24 || v8 >= 1.0e-24)
            {
              *(float64x2_t *)((char *)&v11[1] + 8) = v9;
              *((void *)&v11[2] + 1) = *(void *)&v10.f64[0];
              v11[0] = vdivq_f64(vmulq_n_f64(v9, -v10.f64[1]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
              *(double *)&v11[1] = -(v10.f64[1] * v10.f64[0]) / v8;
            }
            if (v5 >= *(int *)(v1 + 292)) {
              PCArray_base::badIndex(v4);
            }
            LiPolygonInstance::crop((uint64_t)this, (double *)v11, *(_DWORD *)(*(void *)(v1 + 296) + 4 * v5) == 0);
          }
          ++v5;
          v6 += 32;
        }
        while (v2 != v5);
      }
    }
  }
}

uint64_t **bounds<LiPolygon::PosFacet,double>(uint64_t **result, uint64_t a2)
{
  uint64_t v2 = **result;
  unint64_t v3 = (*result)[1] - v2;
  *(_OWORD *)(a2 + 16) = xmmword_1B7E736F0;
  *(_OWORD *)(a2 + 32) = xmmword_1B7E736F0;
  *(_OWORD *)a2 = xmmword_1B7E736F0;
  if ((int)(v3 >> 5) >= 1)
  {
    uint64_t v4 = (v3 >> 5);
    uint64_t v5 = (double *)(v2 + 16);
    double v6 = -1.0;
    double v7 = 1.0;
    double v8 = 1.0;
    double v9 = -1.0;
    double v10 = 1.0;
    double v11 = -1.0;
    do
    {
      double v12 = *(v5 - 2);
      if (v7 <= v6 && v8 <= v9 && v10 <= v11)
      {
        if (v7 >= v12) {
          double v7 = *(v5 - 2);
        }
        if (v6 > v12) {
          double v12 = v6;
        }
        double v15 = *(v5 - 1);
        if (v8 >= v15) {
          double v8 = *(v5 - 1);
        }
        if (v9 <= v15) {
          double v9 = *(v5 - 1);
        }
        if (v10 >= *v5) {
          double v10 = *v5;
        }
        if (v11 <= *v5) {
          double v11 = *v5;
        }
      }
      else
      {
        double v9 = *(v5 - 1);
        double v11 = *v5;
        double v7 = *(v5 - 2);
        double v8 = v9;
        double v10 = *v5;
      }
      *(double *)a2 = v7;
      *(double *)(a2 + 8) = v12;
      *(double *)(a2 + 16) = v8;
      *(double *)(a2 + 24) = v9;
      v5 += 4;
      double v6 = v12;
      *(double *)(a2 + 32) = v10;
      *(double *)(a2 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v11;
      --v4;
    }
    while (v4);
  }
  return result;
}

BOOL contains<LiImagePolygon::EdgeFacet,int>(uint64_t **a1, _DWORD *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1] - v2;
  if ((int)((unint64_t)v3 >> 5) < 1) {
    return 0;
  }
  if (*(_DWORD *)(v2 + 24) == *a2) {
    return 1;
  }
  uint64_t v5 = (int)(v3 >> 5);
  uint64_t v6 = ((unint64_t)v3 >> 5);
  double v7 = (int *)(v2 + 56);
  uint64_t v8 = 1;
  do
  {
    uint64_t v9 = v8;
    if (v6 == v8) {
      break;
    }
    int v10 = *v7;
    v7 += 8;
    ++v8;
  }
  while (v10 != *a2);
  return v9 < v5;
}

PCShared_base **LiPolygonInstance::setColor(PCShared_base **this, LiImageSource *a2)
{
  double result = PCPtr<LiImageSource>::operator=<LiImageSource>(this + 182, (PCShared_base *)a2);
  uint64_t v5 = this[184];
  if (v5)
  {
    return PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)v5 + 2, (PCShared_base *)a2);
  }
  return result;
}

uint64_t LiPolygonInstance::getHeliumNode@<X0>(LiPolygonInstance *this@<X0>, void *a2@<X8>)
{
  do
  {
    uint64_t v3 = this;
    uint64_t v4 = (const void *)*((void *)this + 16);
    if (!v4) {
      break;
    }
  }
  while (this);
  uint64_t result = *((void *)v3 + 20);
  *a2 = result;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v6();
  }
  return result;
}

void LiPolygonInstance::draw(LiPolygonInstance *this, LiBlender *a2)
{
  double v4 = *((double *)this + 190);
  uint64_t v5 = LiSceneObject::blendMode(*((LiSceneObject **)this + 179));
  LiSceneObject::blendOptions(*((const PCSharedCount **)this + 179), &v15);
  if (v4 > 0.0 || LiCompositor::isStencil(v5))
  {
    uint64_t v6 = LiSceneObject::preserveOpacity(*((LiSceneObject **)this + 179));
    LiPolygonInstance::getHeliumNode(this, &v14);
    if (v14)
    {
      if (LiAgent::rasterizeEdges((LiPolygonInstance *)((char *)this + 168))
        && (uint64_t Output = LiPolygonInstance::getOutput(this)) != 0)
      {
        int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Output + 40))(Output, 1) ^ 1;
      }
      else
      {
        int v8 = 0;
      }
      BOOL isBounded = LiPolygon::isBounded(this);
      if (((!isBounded | v8) & 1) == 0) {
        BOOL isBounded = *((unsigned char *)this + 1440) != 0;
      }
      if (isBounded)
      {
        int v10 = (unsigned char *)*((void *)this + 179);
        if (v10[698])
        {
          char v11 = ((*(uint64_t (**)(unsigned char *))(*(void *)v10 + 272))(v10) & 1) != 0
             || *((unsigned char *)this + 1440) != 0;
          LiBlender::crop((uint64_t)a2, (uint64_t)this, v11);
        }
      }
      int var0 = v15.var0;
      PCSharedCount::PCSharedCount(&v13, &v16);
      (*(void (**)(LiBlender *, uint64_t *, uint64_t, void, uint64_t, PC_Sp_counted_base **, double))(*(void *)a2 + 16))(a2, &v14, v5, 0, v6, &var0, v4);
      PCSharedCount::~PCSharedCount(&v13);
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
      }
    }
  }
  PCSharedCount::~PCSharedCount(&v16);
}

void sub_1B7AD0F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'LiPolygonInstance::draw(LiPolygonInstance *this, LiBlender *a2)
{
}

uint64_t non-virtual thunk to'LiPolygonInstance::getBounds(LiPolygonInstance *this)
{
  return (uint64_t)this - 112;
}

uint64_t LiPolygonInstance::isPlanar(LiPolygonInstance *this)
{
  return 1;
}

uint64_t non-virtual thunk to'LiPolygonInstance::isPlanar(LiPolygonInstance *this)
{
  return 1;
}

uint64_t LiPolygonInstance::getSceneObject(LiPolygonInstance *this)
{
  uint64_t result = *((void *)this + 192);
  if (!result) {
    return *((void *)this + 179);
  }
  return result;
}

uint64_t non-virtual thunk to'LiPolygonInstance::getSceneObject(LiPolygonInstance *this)
{
  uint64_t result = *((void *)this + 178);
  if (!result) {
    return *((void *)this + 165);
  }
  return result;
}

void LiPolygonInstance::setPlane(uint64_t a1, float64x2_t *a2)
{
  PCPlane<double>::setImplicit(a1 + 16, a2);
  v4[0] = 0.0;
  v4[1] = 0.0;
  v4[2] = 1.0;
  LiPolygon::projectToPlane(a1, a2, v4);
}

void non-virtual thunk to'LiPolygonInstance::setPlane(uint64_t a1, float64x2_t *a2)
{
  uint64_t v3 = a1 - 112;
  PCPlane<double>::setImplicit(a1 - 96, a2);
  v4[0] = 0.0;
  v4[1] = 0.0;
  v4[2] = 1.0;
  LiPolygon::projectToPlane(v3, a2, v4);
}

PCArray_base *LiPolygonInstance::intersect(PCArray_base *this, LiIntersection *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 5);
  if ((int)v2 >= 1)
  {
    double v4 = this;
    for (uint64_t i = 0; i != v2; ++i)
    {
      if (i >= *((int *)a2 + 5)) {
        PCArray_base::badIndex(this);
      }
      this = (PCArray_base *)(*(uint64_t (**)(PCArray_base *, LiIntersection *, void))(*(void *)v4 + 104))(v4, a2, *(void *)(*((void *)a2 + 3) + 8 * i));
    }
  }
  return this;
}

PCArray_base *non-virtual thunk to'LiPolygonInstance::intersect(LiPolygonInstance *this, LiIntersection *a2)
{
  return LiPolygonInstance::intersect((LiPolygonInstance *)((char *)this - 112), a2);
}

void LiPolygonInstance::intersect(LiPolygonInstance *a1)
{
}

uint64_t LiPolygonInstance::getFilterIntersections(LiPolygonInstance *this)
{
  return *(unsigned int *)(*((void *)this + 179) + 700);
}

uint64_t non-virtual thunk to'LiPolygonInstance::getFilterIntersections(LiPolygonInstance *this)
{
  return *(unsigned int *)(*((void *)this + 165) + 700);
}

uint64_t LiPolygonInstance::getBlendMode(LiSceneObject **this)
{
  if (*((double *)this + 190) <= 0.0) {
    return 48;
  }
  else {
    return LiSceneObject::blendMode(this[179]);
  }
}

uint64_t non-virtual thunk to'LiPolygonInstance::getBlendMode(LiSceneObject **this)
{
  if (*((double *)this + 176) <= 0.0) {
    return 48;
  }
  else {
    return LiSceneObject::blendMode(this[165]);
  }
}

uint64_t LiPolygonInstance::defocus()
{
  return 1;
}

uint64_t non-virtual thunk to'LiPolygonInstance::defocus()
{
  return 1;
}

uint64_t LiPolygonInstance::name@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(this + 1432) + 512);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 - 12), 1u);
  }
  return this;
}

double LiPolygonInstance::getPosition@<D0>(LiPolygonInstance *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *((_OWORD *)this + 99);
  double result = *((double *)this + 200);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t non-virtual thunk to'LiPolygonInstance::name@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(this + 1320) + 512);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 - 12), 1u);
  }
  return this;
}

void DepthFilterProgram::DepthFilterProgram(DepthFilterProgram *this)
{
  ProGL::Program::Program(this);
  *uint64_t v2 = &unk_1F1120F40;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "inputTex");
  ProGL::Uniform<int>::Uniform((DepthFilterProgram *)((char *)this + 280), this, "numSamples");
  ProGL::UniformArray<PCVector2<float>,16ul>::UniformArray((uint64_t)this + 336, this, "offsets");
  {
    {
      std::string::basic_string[abi:ne180100]<0>(downsampleDepthFilter(void)::result, "void main() { float z = 1.0; float depth; for (int i=0; i < numSamples; i++) { depth = texture2D(inputTex, gl_Te"
        "xCoord[0].st + offsets[i]).r; if (depth < z) z = depth; depth = texture2D(inputTex, gl_TexCoord[0].st - offsets["
        "i]).r; if (depth < z) z = depth; } gl_FragColor = vec4( z); }");
      __cxa_atexit(MEMORY[0x1E4FBA210], downsampleDepthFilter(void)::result, &dword_1B73F3000);
    }
  }
  ProGL::Program::setFragmentSource();
}

void sub_1B7AD14C0(_Unwind_Exception *a1)
{
  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(v4);
  ProGL::Uniform<int>::~Uniform(v3);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void LiSSAASolidRenderer::LiSSAASolidRenderer(LiSSAASolidRenderer *this)
{
  LiSolidRenderer::LiSolidRenderer(this);
  *(void *)uint64_t v1 = &unk_1F1120F70;
  *(_DWORD *)(v1 + 872) = 0x40000000;
  *(void *)(v1 + 884) = 0;
  *(void *)(v1 + 892) = 0;
  *(void *)(v1 + 876) = 0;
  *(_DWORD *)(v1 + 90std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
}

void LiSSAASolidRenderer::~LiSSAASolidRenderer(LiSSAASolidRenderer *this)
{
  *(void *)this = &unk_1F1120F70;
  uint64_t v2 = (void **)((char *)this + 880);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  LiSolidRenderer::~LiSolidRenderer(this);
}

{
  void **v2;

  *(void *)this = &unk_1F1120F70;
  uint64_t v2 = (void **)((char *)this + 880);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  LiSolidRenderer::~LiSolidRenderer(this);
  MEMORY[0x1BA9BFBA0]();
}

void LiSSAASolidRenderer::filterDepthTexture(LiSSAASolidRenderer *this@<X0>, GLuint a2@<W1>, GLuint a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, unsigned int a7@<W6>, PCWorkingColorVector *a8@<X8>)
{
  ProGL::GL::GL((ProGL::GL *)v33);
  glBindFramebuffer(0x8D40u, a2);
  LiSolidUtils::createRedTexture(a8);
  GLuint Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)a8);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, Name, 0);
  glViewport(0, 0, a6, a7);
  glClear(0x4100u);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, a3);
  glEnable(0xDE1u);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glTexParameteri(0xDE1u, 0x2802u, 33071);
  glTexParameteri(0xDE1u, 0x2803u, 33071);
  int v32 = (int)*((float *)this + 218);
  {
    ProGL::Init::Init((ProGL::Init *)&getDepthFilterProgramHandle(void)::init);
    __cxa_atexit((void (*)(void *))ProGL::Init::~Init, &getDepthFilterProgramHandle(void)::init, &dword_1B73F3000);
  }
  {
    ProGL::makeProgramHandle<DepthFilterProgram>();
  }
  long long v30 = (os_unfair_lock_s *)getDepthFilterProgramHandle(void)::result;
  double v31 = (std::__shared_weak_count *)unk_1E9EE5FA0;
  if (unk_1E9EE5FA0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_1E9EE5FA0 + 8), 1uLL, memory_order_relaxed);
  }
  ProGL::UseProgramSentry::UseProgramSentry((ProGL::UseProgramSentry *)v29, (ProGL::GL *)v33, (const ProGL::ProgramHandle *)&v30);
  long long v17 = ProGL::ProgramHandle::getProgram<DepthFilterProgram>(&v30, (ProGL::GL *)v33);
  ProGL::UniformSampler<35678u>::set(v17 + 56, 0);
  ProGL::Uniform<int>::set<int>(v17 + 70, &v32);
  int v20 = v32;
  if (v32 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (uint64_t)(v17 + 84);
    do
    {
      float v23 = (float)(int)v21 + (float)(v20 - 1) * -0.5;
      if (a5 == a7)
      {
        *(float *)&uint64_t v28 = v23 / (float)a4;
        HIDWORD(v28) = 0;
      }
      else
      {
        LODWORD(v28) = 0;
        *((float *)&v28 + 1) = v23 / (float)a5;
      }
      ProGL::UniformArray<PCVector2<float>,16ul>::setAtIndex<PCVector2<float>>(v22, v21++, &v28);
      int v20 = v32;
    }
    while (v21 < v32);
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  float v26 = (float)a6;
  float v27 = (float)a7;
  LiSolidUtils::drawRect((uint64_t)v33, (uint64_t)&v25, 33984, &v24, v18, v19);
  ProGL::UseProgramSentry::~UseProgramSentry((ProGL::UseProgramSentry *)v29);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  ProGL::GL::~GL((ProGL::GL *)v33);
}

void sub_1B7AD196C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void *ProGL::ProgramHandle::getProgram<DepthFilterProgram>(os_unfair_lock_s **a1, ProGL::GL *a2)
{
  ProGL::Private::ProgramHandleImpl::getProgram(*a1, a2, &lpsrc);
  if (lpsrc) {
  else
  }
    uint64_t v2 = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void LiSSAASolidRenderer::depthBlur(LiSSAASolidRenderer *this, ProGL::GL *a2, const LiSolidDofInfo *a3, LiSolidDofInfo *a4, GLuint a5, unsigned int a6, unsigned int a7)
{
  GLint params = 0;
  ProGL::GL_Wrap::getIntegerv(a2, 0x8CA6u, &params);
  ProGL::Framebuffer::Framebuffer((ProGL::Framebuffer *)v26, a2);
  float v14 = *((float *)this + 218);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v25);
  if (a5 && *((unsigned char *)this + 636))
  {
    GLuint RGBOperation = HGGLBlendingInfo::GetRGBOperation((HGGLBlendingInfo *)v26);
    unsigned int v16 = (float)(v14 * (float)a7);
    LiSSAASolidRenderer::filterDepthTexture(this, RGBOperation, a5, (float)(v14 * (float)a6), v16, a6, v16, (PCWorkingColorVector *)&v23);
    GLuint v17 = HGGLBlendingInfo::GetRGBOperation((HGGLBlendingInfo *)v26);
    GLuint Name = ProGL::TextureHandle::getName(&v23);
    LiSSAASolidRenderer::filterDepthTexture(this, v17, Name, a6, v16, a6, a7, (PCWorkingColorVector *)&v22);
    long long v19 = v22;
    long long v22 = 0uLL;
    int v20 = (std::__shared_weak_count *)*((void *)&v25 + 1);
    long long v25 = v19;
    if (v20)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  ProGL::Framebuffer::detach((ProGL::Framebuffer *)v26, 0x8D40u, 0x8CE0u);
  unsigned int v21 = ProGL::TextureHandle::getName((HGGLBlendingInfo **)&v25);
  LiSolidRenderer::depthBlur(this, a2, a3, a4, v21, a6, a7);
  glBindFramebuffer(0x8D40u, params);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)v26);
}

void sub_1B7AD1C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)va);
  _Unwind_Resume(a1);
}

float LiSSAASolidRenderer::getFullSizePaddedTileSize(LiSSAASolidRenderer *this, unsigned int *a2, unsigned int *a3, unsigned int a4, unsigned int a5)
{
  float v5 = *((float *)this + 218);
  *a2 = (float)(v5 * (float)a4);
  float result = v5 * (float)a5;
  *a3 = result;
  return result;
}

void LiSSAASolidRenderer::setupTile(LiSSAASolidRenderer *this, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
}

uint64_t LiSSAASolidRenderer::getTileSize(uint64_t this, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5, double a6, double a7)
{
  float v7 = *(float *)(this + 872);
  unsigned int v8 = (float)(v7 * (float)a2);
  unsigned int v9 = (float)(v7 * (float)a3);
  if (v8 < 0x801)
  {
    unsigned int v10 = vcvtps_u32_f32((float)v8 / v7);
  }
  else
  {
    LODWORD(a7) = *(_DWORD *)(this + 396);
    a7 = (2048.0 - ((double)*(unint64_t *)&a7 + (double)*(unint64_t *)&a7)) / v7;
    unsigned int v10 = vcvtpd_u64_f64(a7);
  }
  *a4 = v10;
  if (v9 < 0x801)
  {
    unsigned int v11 = vcvtps_u32_f32((float)v9 / v7);
  }
  else
  {
    LODWORD(a7) = *(_DWORD *)(this + 396);
    unsigned int v11 = vcvtpd_u64_f64((2048.0 - ((double)*(unint64_t *)&a7 + (double)*(unint64_t *)&a7)) / v7);
  }
  *a5 = v11;
  return this;
}

uint64_t LiSSAASolidRenderer::getSuperSampledTilePadding(LiSSAASolidRenderer *this)
{
  return (float)(*((float *)this + 218) * (float)*((unsigned int *)this + 99));
}

void *LiSSAASolidRenderer::setRenderingParameter(void *result, int a2, int *a3)
{
  switch(a2)
  {
    case 0:
      *((_DWORD *)result + 109) = 0;
      return result;
    case 2:
      if (a3)
      {
        if (*a3 <= 2)
        {
          *((_DWORD *)result + 219) = *a3;
          return result;
        }
        PCSharedCount v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Invalid filter sent to ", 23);
        float v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"setRenderingParameter", 21);
        PCSharedCount v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" in ", 4);
        unsigned int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSSAASolidRenderer.cpp", 72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
        goto LABEL_21;
      }
      goto LABEL_18;
    case 1:
      if (a3)
      {
        float v3 = *(float *)a3;
        if (*(float *)a3 >= 1.0 && v3 <= 8.0)
        {
          *((float *)result + 218) = v3;
          return result;
        }
        float v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Invalid scale sent to ", 22);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"setRenderingParameter", 21);
        float v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" in ", 4);
        unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSSAASolidRenderer.cpp", 72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
        goto LABEL_21;
      }
LABEL_18:
      unsigned int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Invalid object sent to ", 23);
      unsigned int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"setRenderingParameter", 21);
      unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in ", 4);
      double v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSSAASolidRenderer.cpp", 72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
LABEL_21:
      GLuint v17 = (void *)std::ostream::operator<<();
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  }

  return (void *)LiSolidRenderer::setRenderingParameter((uint64_t)result, a2, a3);
}

void DepthFilterProgram::~DepthFilterProgram(void **this)
{
  *this = &unk_1F1120F40;
  uint64_t v2 = this + 28;
  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(this + 42);
  ProGL::Uniform<int>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);

  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1F1120F40;
  uint64_t v2 = this + 28;
  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(this + 42);
  ProGL::Uniform<int>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void ProGL::makeProgramHandle<DepthFilterProgram>()
{
}

void sub_1B7AD2134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ProGL::Private::ProgramFactory0<DepthFilterProgram>::operator()()
{
}

void sub_1B7AD21D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B3C40135A5F83);
  _Unwind_Resume(a1);
}

void ProGL::Private::ProgramFactory0<DepthFilterProgram>::~ProgramFactory0()
{
}

void std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<DepthFilterProgram,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7AD2278(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<DepthFilterProgram,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<DepthFilterProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,DepthFilterProgram>,std::allocator<DepthFilterProgram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DepthFilterProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,DepthFilterProgram>,std::allocator<DepthFilterProgram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7AD236C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<DepthFilterProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<DepthFilterProgram>>,std::allocator<ProGL::Private::ProgramFactory0<DepthFilterProgram>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<DepthFilterProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<DepthFilterProgram>>,std::allocator<ProGL::Private::ProgramFactory0<DepthFilterProgram>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<ProGL::Private::ProgramHandleImpl>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramHandleImpl,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7AD2468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<ProGL::Private::ProgramHandleImpl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ProGL::Private::ProgramHandleImpl *,std::shared_ptr<ProGL::Private::ProgramHandleImpl>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl,ProGL::Private::ProgramHandleImpl>,std::allocator<ProGL::Private::ProgramHandleImpl>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramHandleImpl *,std::shared_ptr<ProGL::Private::ProgramHandleImpl>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl,ProGL::Private::ProgramHandleImpl>,std::allocator<ProGL::Private::ProgramHandleImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<ProGL::Private::ProgramHandleImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    float v3 = *(std::__shared_weak_count **)(a2 + 56);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(a2 + 16, *(void **)(a2 + 24));
    PCSpinLock::~PCSpinLock((PCSpinLock *)a2);
    JUMPOUT(0x1BA9BFBA0);
  }
}

void std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(a1, a2[1]);
    std::pair<ProGL::Private::ProgramHandleImpl::ContextKey const,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>::~pair((ProGL::ContextHandle *)(a2 + 4));
    operator delete(a2);
  }
}

ProGL::Private::VariableBase *ProGL::UniformSampler<35678u>::UniformSampler(ProGL::Private::VariableBase *a1, ProGL::Program *a2, char *a3)
{
  float v5 = ProGL::Private::VariableBase::VariableBase(a1, a2);
  *(void *)float v5 = &unk_1F11211C0;
  *((_DWORD *)v5 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v5 + 3, a3);
  *((_DWORD *)a1 + 12) = -1;
  return a1;
}

void sub_1B7AD25F8(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::UniformSampler<35678u>::~UniformSampler(void **a1)
{
  ProGL::UniformSampler<35678u>::~UniformSampler(a1);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL ProGL::UniformSampler<35678u>::prepare(uint64_t a1)
{
  FactoryForSerialization = (LiImageSource *)OZFactoryBase::getFactoryForSerialization(a1);
  GLuint v3 = LiImageSource::imageSpace(FactoryForSerialization);
  double v4 = (const GLchar *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    double v4 = *(const GLchar **)v4;
  }
  int UniformLocation = glGetUniformLocation(v3, v4);
  *(_DWORD *)(a1 + 48) = UniformLocation;
  return UniformLocation != -1;
}

void ProGL::UniformSampler<35678u>::upload(uint64_t a1, ProGL::Private *this)
{
}

uint64_t ProGL::UniformSampler<35678u>::getString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"uniform ", 8);
  GLuint v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"sampler2D", 9);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  int v5 = *(char *)(a1 + 47);
  if (v5 >= 0) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 32);
  }
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)";\n", 2);
  unsigned int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"#define _", 9);
  int v10 = *(char *)(a1 + 47);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 24;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 32);
  }
  PCSharedCount v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  float v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(coord) (", 9);
  PCSharedCount v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"texture2D", 9);
  unsigned int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
  int v17 = *(char *)(a1 + 47);
  if (v17 >= 0) {
    uint64_t v18 = a1 + 24;
  }
  else {
    uint64_t v18 = *(void *)(a1 + 24);
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v19 = *(void *)(a1 + 32);
  }
  int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", (coord)))\n", 12);
  std::stringbuf::str();
  v22[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v22[1] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9BFAB0](&v24);
}

void sub_1B7AD28BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::UniformSampler<35678u>::~UniformSampler(void **this)
{
  *this = &unk_1F11211C0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

ProGL::Private::VariableBase *ProGL::Uniform<int>::Uniform(ProGL::Private::VariableBase *a1, ProGL::Program *a2, char *a3)
{
  int v5 = ProGL::Private::VariableBase::VariableBase(a1, a2);
  *(void *)int v5 = &unk_1F1121228;
  *((_DWORD *)v5 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v5 + 3, a3);
  *((_DWORD *)a1 + 12) = -1;
  return a1;
}

void sub_1B7AD2990(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<int>::~Uniform(void **a1)
{
  ProGL::Uniform<int>::~Uniform(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProGL::Uniform<int>::getString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"uniform ", 8);
  GLuint v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"int", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = a1 + 24;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)";\n", 2);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9BFAB0](&v15);
}

void sub_1B7AD2B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<int>::~Uniform(void **this)
{
  *this = &unk_1F1121228;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

uint64_t ProGL::UniformArray<PCVector2<float>,16ul>::UniformArray(uint64_t a1, ProGL::Program *a2, char *a3)
{
  uint64_t v5 = ProGL::Private::VariableBase::VariableBase((ProGL::Private::VariableBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_1F1121290;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)v5 + 20, a3);
  *(_DWORD *)(a1 + 184) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  return a1;
}

void sub_1B7AD2C50(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(void **a1)
{
  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(a1);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL ProGL::UniformArray<PCVector2<float>,16ul>::prepare(uint64_t a1)
{
  FactoryForSerialization = (LiImageSource *)OZFactoryBase::getFactoryForSerialization(a1);
  GLuint v3 = LiImageSource::imageSpace(FactoryForSerialization);
  double v4 = (const GLchar *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    double v4 = *(const GLchar **)v4;
  }
  int UniformLocation = glGetUniformLocation(v3, v4);
  *(_DWORD *)(a1 + 184) = UniformLocation;
  return UniformLocation != -1;
}

void ProGL::UniformArray<PCVector2<float>,16ul>::upload(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 144;
  uint64_t v6 = -128;
  do
  {
    if (*(unsigned char *)(v5 + v4))
    {
      ProGL::Private::uploadUniform(a2, v4 + *(_DWORD *)(a1 + 184), (GLfloat *)(v5 + v6));
      *(unsigned char *)(v5 + v4) = 0;
    }
    ++v4;
    v6 += 8;
  }
  while (v6);
}

uint64_t ProGL::UniformArray<PCVector2<float>,16ul>::getString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"uniform ", 8);
  GLuint v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"vec2", 4);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v6 = a1 + 160;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"[", 1);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"];\n", 3);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9BFAB0](&v16);
}

void sub_1B7AD2EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(void **this)
{
  *this = &unk_1F1121290;
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }

  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

void ProGL::UniformSampler<35678u>::set(_DWORD *a1, int a2)
{
  if (OZFactoryBase::getFactoryForSerialization((uint64_t)a1))
  {
    a1[4] = a2;
    if (a1[12] != -1)
    {
      uint64_t FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)a1);
      ProGL::Private::ProgramHelper::getProgramContext(FactoryForSerialization, v5);
      ProGL::GL::GL((ProGL::GL *)v6, (const ProGL::ContextHandle *)v5);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v5);
      (*(void (**)(_DWORD *, unsigned char *))(*(void *)a1 + 24))(a1, v6);
      ProGL::GL::~GL((ProGL::GL *)v6);
    }
  }
}

void sub_1B7AD3004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<int>::set<int>(_DWORD *a1, _DWORD *a2)
{
  if (OZFactoryBase::getFactoryForSerialization((uint64_t)a1))
  {
    a1[4] = *a2;
    if (a1[12] != -1)
    {
      uint64_t FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)a1);
      ProGL::Private::ProgramHelper::getProgramContext(FactoryForSerialization, v5);
      ProGL::GL::GL((ProGL::GL *)v6, (const ProGL::ContextHandle *)v5);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v5);
      (*(void (**)(_DWORD *, unsigned char *))(*(void *)a1 + 24))(a1, v6);
      ProGL::GL::~GL((ProGL::GL *)v6);
    }
  }
}

void sub_1B7AD30C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void ProGL::UniformArray<PCVector2<float>,16ul>::setAtIndex<PCVector2<float>>(uint64_t a1, uint64_t a2, void *a3)
{
  if (OZFactoryBase::getFactoryForSerialization(a1))
  {
    *(unsigned char *)(a1 + a2 + 144) = 1;
    uint64_t v6 = a1 + 8 * a2;
    *(void *)(v6 + 16) = *a3;
    uint64_t v7 = (GLfloat *)(v6 + 16);
    if (*(_DWORD *)(a1 + 184) != -1)
    {
      uint64_t FactoryForSerialization = OZFactoryBase::getFactoryForSerialization(a1);
      ProGL::Private::ProgramHelper::getProgramContext(FactoryForSerialization, v9);
      ProGL::GL::GL((ProGL::GL *)v10, (const ProGL::ContextHandle *)v9);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v9);
      ProGL::Private::uploadUniform((int)v10, *(_DWORD *)(a1 + 184) + a2, v7);
      *(unsigned char *)(a1 + a2 + 144) = 0;
      ProGL::GL::~GL((ProGL::GL *)v10);
    }
  }
}

void sub_1B7AD319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<DepthFilterProgram,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t LiScriptParameterDescriptor::LiScriptParameterDescriptor(uint64_t a1, CFTypeRef cf, int a3)
{
  *(void *)a1 = CFRetain(cf);
  *(_DWORD *)(a1 + 8) = a3;
  return a1;
}

void Li3DEngineScene::Li3DEngineScene(Li3DEngineScene *this)
{
  uint64_t v2 = MEMORY[0x1BA9BF8F0]();
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2 + 88;
  *(void *)(v2 + 96) = 0;
  *(unsigned char *)(v2 + 104) = 0;
  uint64_t v3 = objc_opt_new();
  *((void *)this + 16) = 0;
  *((void *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = v3;
  *((void *)this + 15) = (char *)this + 128;
  *((void *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = (char *)this + 152;
}

void sub_1B7AD32B8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(v3, *v5);
  ProCore_Impl::PCNSRefImpl::release(v2);
  std::recursive_mutex::~recursive_mutex(v1);
  _Unwind_Resume(a1);
}

void Li3DEngineScene::set(Li3DEngineScene *this, SCNScene *a2)
{
  std::recursive_mutex::lock((std::recursive_mutex *)this);
  id v5 = a2;
  ProCore_Impl::PCNSRefImpl::operator=((id *)this + 8, &v5);
  ProCore_Impl::PCNSRefImpl::release(&v5);
  uint64_t v4 = Li3DEngineScene::sceneID++;
  *((void *)this + 9) = v4;
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 80, *((id **)this + 11));
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = (char *)this + 88;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  std::recursive_mutex::unlock((std::recursive_mutex *)this);
}

void sub_1B7AD3370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineScene::setUseOriginalScene(uint64_t this, char a2)
{
  *(unsigned char *)(this + 104) = a2;
  return this;
}

uint64_t Li3DEngineScene::sceneManager(Li3DEngineScene *this)
{
  return *((void *)this + 14);
}

id Li3DEngineScene::getSceneAndRenderer(Li3DEngineScene *this, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = [a2 registryID];
  unint64_t v24 = v4;
  id v5 = (void *)*((void *)this + 11);
  uint64_t v6 = (void *)*((void *)this + 8);
  if (!v5) {
    goto LABEL_28;
  }
  uint64_t v7 = (void *)((char *)this + 88);
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= v4;
    if (v8 >= v4) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    id v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (void *)((char *)this + 88) && v4 >= v7[4])
  {
    id v12 = (id)v7[5];
  }
  else
  {
LABEL_28:
    if (!*((unsigned char *)this + 104))
    {
      uint64_t v11 = (void *)[MEMORY[0x1E4F3B268] scene];
      objc_msgSend((id)objc_msgSend(v11, "rootNode"), "addChildNode:", objc_msgSend((id)objc_msgSend(v6, "rootNode"), "clone"));
      uint64_t v6 = v11;
    }
    PCMakeNSRefAndRetain<EAGLContext *>((void *)[MEMORY[0x1E4F3B260] rendererWithDevice:a2 options:0], &v23);
    id v12 = v23;
    [v23 setScene:v6];
    long long v25 = &v24;
    PCSharedCount v13 = std::__tree<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,LiMaterialSamplerInfo *>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const* const&>,std::tuple<>>((uint64_t **)this + 10, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25);
    ProCore_Impl::PCNSRefImpl::operator=((id *)v13 + 5, &v23);
    ProCore_Impl::PCNSRefImpl::release(&v23);
  }
  if (!*((unsigned char *)this + 104))
  {
    char v14 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithArray:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "scene"), "rootNode"), "childNodes"));
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v26 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v20 != v16) {
            objc_enumerationMutation(v14);
          }
          [*(id *)(*((void *)&v19 + 1) + 8 * i) removeFromParentNode];
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v26 count:16];
      }
      while (v15);
    }
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "scene"), "rootNode"), "addChildNode:", objc_msgSend((id)objc_msgSend(*((id *)this + 8), "rootNode"), "clone"));
  }
  return v12;
}

void sub_1B7AD35E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Li3DEngineScene::particleParameters(Li3DEngineScene *this, SCNParticleSystem *a2)
{
  unint64_t v4 = (void *)*((void *)this + 19);
  uint64_t v2 = (char *)this + 152;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  id v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2) {
      unint64_t v8 = v3;
    }
    else {
      unint64_t v8 = v3 + 1;
    }
    if (v7) {
      id v5 = (char *)v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((void *)v5 + 4) <= (unint64_t)a2) {
    return *((void *)v5 + 5);
  }
  else {
    return 0;
  }
}

uint64_t Li3DEngineScene::reset_NoLock(id *this)
{
  uint64_t v1 = (void *)[this[8] rootNode];

  return [v1 enumerateChildNodesUsingBlock:&__block_literal_global_70];
}

uint64_t ___ZN15Li3DEngineScene12reset_NoLockEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = objc_msgSend(a2, "particleSystems", 0);
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) reset];
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t Li3DEngineScene::didLoad_NoLock(id *this)
{
  uint64_t v2 = (void *)[this[8] rootNode];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = *(void *)"";
  v4[2] = ___ZN15Li3DEngineScene14didLoad_NoLockEv_block_invoke;
  double v4[3] = &__block_descriptor_40_e21_v24__0__SCNNode_8_B16l;
  v4[4] = this;
  return [v2 enumerateChildNodesUsingBlock:v4];
}

uint64_t ___ZN15Li3DEngineScene14didLoad_NoLockEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "particleSystems"), "countByEnumeratingWithState:objects:count:", v5, v7, 16);
  if (result)
  {
    uint64_t v6 = 0;
    uint64_t v3 = (void *)**((void **)&v5[0] + 1);
    uint64_t v6 = v3;
    [v3 particleSize];
    [v3 setParticleSize:v4 * 512.0];
    operator new();
  }
  return result;
}

void sub_1B7AD3A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,PCSharedCount a24)
{
  PCSharedCount::~PCSharedCount(&a24);
  PCSharedCount::~PCSharedCount(v24);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineScene::didAddNode_NoLock(Li3DEngineScene *this, SCNNode *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = *(void *)"";
  v3[2] = ___ZN15Li3DEngineScene17didAddNode_NoLockEP7SCNNode_block_invoke;
  v3[3] = &__block_descriptor_40_e21_v24__0__SCNNode_8_B16l;
  v3[4] = this;
  return [(SCNNode *)a2 enumerateChildNodesUsingBlock:v3];
}

uint64_t ___ZN15Li3DEngineScene17didAddNode_NoLockEP7SCNNode_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  char v14 = a2;
  uint64_t v2 = *(void *)(a1 + 32);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = objc_msgSend(a2, "particleSystems", 0);
  uint64_t result = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v11;
    long long v7 = (uint64_t **)(v2 + 120);
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * v8) birthRate];
        uint64_t v15 = (unint64_t *)&v14;
        *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(v7, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, &v15)+ 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = (int)v9;
        ++v8;
      }
      while (v5 != v8);
      uint64_t result = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void Li3DEngineScene::setNodeActiveState_NoLock(Li3DEngineScene *this, SCNNode *a2, int a3, double a4)
{
  uint64_t v10 = 0;
  long long v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = *(void *)"";
  double v8[2] = ___ZN15Li3DEngineScene25setNodeActiveState_NoLockEP7SCNNodebd_block_invoke;
  void v8[3] = &unk_1E616D728;
  char v9 = a3;
  v8[4] = &v10;
  v8[5] = this;
  [(SCNNode *)a2 enumerateChildNodesUsingBlock:v8];
  if (!*((unsigned char *)v11 + 24))
  {
    double v7 = 0.0;
    if (a3) {
      double v7 = a4;
    }
    [(SCNNode *)a2 setOpacity:v7];
  }
  _Block_object_dispose(&v10, 8);
}

void sub_1B7AD3CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15Li3DEngineScene25setNodeActiveState_NoLockEP7SCNNodebd_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t v3 = *(void *)(a1 + 40);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  double v4 = objc_msgSend(a2, "particleSystems", 0);
  uint64_t result = [v4 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v14;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        char v9 = *(void **)(*((void *)&v13 + 1) + 8 * v8);
        if (!*(unsigned char *)(a1 + 48))
        {
          double v12 = 0.0;
          goto LABEL_15;
        }
        for (uint64_t i = *(void **)(v3 + 128); i; uint64_t i = (void *)*i)
        {
          unint64_t v11 = i[4];
          if ((unint64_t)v17 >= v11)
          {
            if (v11 >= (unint64_t)v17)
            {
              uint64_t v18 = (unint64_t *)&v17;
              double v12 = (double)*((int *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)(v3 + 120), (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, &v18)+ 10);
LABEL_15:
              [v9 setBirthRate:v12];
              break;
            }
            ++i;
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        ++v8;
      }
      while (v8 != v6);
      uint64_t result = [v4 countByEnumeratingWithState:&v13 objects:v19 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void *Li3DEngineObjectDataBase::defaultPerInstanceColor(Li3DEngineObjectDataBase *this)
{
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&Li3DEngineObjectDataBase::defaultPerInstanceColor(void)::defaultValue, 1.0, 1.0, 1.0, 1.0);
  }
  return &Li3DEngineObjectDataBase::defaultPerInstanceColor(void)::defaultValue;
}

void sub_1B7AD3EF0(_Unwind_Exception *a1)
{
}

uint64_t Li3DEngineObject::Li3DEngineObject(uint64_t a1, void *a2)
{
  *(void *)(a1 + 584) = &unk_1F1199AC8;
  *(void *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  LiSceneObject::LiSceneObject((LiSceneObject *)a1, (uint64_t *)&off_1F11213E8);
  *(void *)a1 = &unk_1F1121320;
  *(void *)(a1 + 584) = &unk_1F11213C8;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 568) = *a2;
  *(void *)(a1 + 576) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1B7AD3FD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 584) = v3;
  *(unsigned char *)(v1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void Li3DEngineObject::~Li3DEngineObject(PCSharedCount *this, PCSharedCount *a2)
{
  int var0 = a2->var0;
  this->int var0 = a2->var0;
  *(PCSharedCount *)((char *)this + *((void *)var0 - 3)) = a2[5];
  uint64_t v5 = (std::__shared_weak_count *)this[72].var0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  LiSceneObject::~LiSceneObject(this, &a2[1].var0);
}

void Li3DEngineObject::~Li3DEngineObject(PCSharedCount *this)
{
  *(void *)(v1 + 584) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 592));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 584) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 592));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'Li3DEngineObject::~Li3DEngineObject(Li3DEngineObject *this)
{
  *(void *)(v1 + 584) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 592);

  PCWeakCount::~PCWeakCount(v2);
}

{
  Li3DEngineObject::~Li3DEngineObject((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t Li3DEngineObject::getSceneData@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 576);
  *a2 = *(void *)(this + 568);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Li3DEngineObject::plane(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0xBFF0000000000000;
}

double Li3DEngineObject::localBoundingBox(uint64_t a1, double *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 568) + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  objc_msgSend((id)objc_msgSend(*(id *)(v3 + 64), "rootNode"), "getBoundingBoxMin:max:", v11, v10);
  double v4 = v10[0];
  double v5 = v11[1];
  double v6 = v10[1];
  double v7 = v11[2];
  double v8 = v10[2];
  *a2 = v11[0];
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  return result;
}

void sub_1B7AD42D8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Li3DEngineObject::cast(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
}

uint64_t Li3DEngineObject::print(void *a1, void *a2, uint64_t a3)
{
  LiImageSource::printIndent(a2, a3);
  double v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Li3DEngineObject(\"", 18);
  if (a1[64]) {
    double v7 = (const char *)a1[64];
  }
  else {
    double v7 = "";
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\" ", 2);
  char v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  unint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  std::ostream::flush();
  double v12 = *(uint64_t (**)(void *, void *, uint64_t))(*a1 + 120);

  return v12(a1, a2, a3);
}

void sub_1B7AD4484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void Li3DEngineObjectData::~Li3DEngineObjectData(id *this)
{
  *this = &unk_1F1121420;

  uint64_t v2 = (std::__shared_weak_count *)this[70];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = this[68];
  if (v3) {
    (*(void (**)(id))(*(void *)v3 + 24))(v3);
  }
  id v4 = this[65];
  if (v4)
  {
    this[66] = v4;
    operator delete(v4);
  }
  id v5 = this[61];
  if (v5)
  {
    this[62] = v5;
    operator delete(v5);
  }
  id v6 = this[58];
  if (v6)
  {
    this[59] = v6;
    operator delete(v6);
  }
  ProCore_Impl::PCNSRefImpl::release(this + 33);
  *this = &unk_1F11216B8;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(this + 21));
}

{
  uint64_t vars8;

  Li3DEngineObjectData::~Li3DEngineObjectData(this);

  JUMPOUT(0x1BA9BFBA0);
}

NSString *Li3DEngineObjectData::setDebugName(id *this, NSString *a2)
{
  double result = a2;
  this[56] = result;
  return result;
}

uint64_t Li3DEngineObjectData::updateScriptingEngine(uint64_t this, float a2)
{
  uint64_t v2 = *(void **)(this + 456);
  if (v2)
  {
    uint64_t v3 = this;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:"), @"arScale");
    double v7 = *(uint64_t **)(v3 + 488);
    size_t v8 = *(uint64_t **)(v3 + 496);
    if (v7 != v8)
    {
      int v9 = 0;
      do
      {
        uint64_t v10 = *v7;
        switch(*((_DWORD *)v7 + 2))
        {
          case 0:
          case 1:
          case 4:
            LODWORD(v4) = *(_DWORD *)(*(void *)(v3 + 464) + 4 * v9);
            objc_msgSend(*(id *)(v3 + 456), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v4), v10);
            ++v9;
            break;
          case 2:
            unint64_t v11 = (float *)(*(void *)(v3 + 464) + 4 * v9);
            v9 += 4;
            uint64_t v12 = [MEMORY[0x1E4F428B8] colorWithRed:*v11 green:v11[1] blue:v11[2] alpha:v11[3]];
            goto LABEL_8;
          case 3:
            long long v13 = (_DWORD *)(*(void *)(v3 + 464) + 4 * v9);
            LODWORD(v4) = *v13;
            LODWORD(v5) = v13[1];
            v9 += 3;
            LODWORD(v6) = v13[2];
            uint64_t v12 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithSCNVector3:", v4, v5, v6);
LABEL_8:
            [*(id *)(v3 + 456) setObject:v12 forKeyedSubscript:v10];
            break;
          default:
            break;
        }
        v7 += 2;
      }
      while (v7 != v8);
    }
    std::locale v14 = (void *)[*(id *)(v3 + 456) objectForKeyedSubscript:@"WillRenderScene"];
    this = [v14 isUndefined];
    if ((this & 1) == 0)
    {
      return [v14 callWithArguments:0];
    }
  }
  return this;
}

uint64_t Li3DEngineObjectData::updateShadingEngine(uint64_t this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(void *)(this + 512))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 544);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 144);
      double v4 = (void *)[*(id *)(this + 440) childNodesPassingTest:&__block_literal_global_16];
      long long v9 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      this = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (this)
      {
        uint64_t v5 = this;
        uint64_t v6 = *(void *)v10;
        do
        {
          uint64_t v7 = 0;
          do
          {
            if (*(void *)v10 != v6) {
              objc_enumerationMutation(v4);
            }
            size_t v8 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v7), "geometry"), "firstMaterial");
            objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E4F3B220], "materialPropertyWithContents:", v3), @"texture");
            if (*(unsigned char *)(v1 + 568)) {
              [v8 setProgram:*(void *)(v1 + 512)];
            }
            ++v7;
          }
          while (v5 != v7);
          this = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
          uint64_t v5 = this;
        }
        while (this);
      }
    }
  }
  return this;
}

BOOL ___ZN20Li3DEngineObjectData19updateShadingEngineEv_block_invoke(uint64_t a1, void *a2)
{
  return [a2 geometry] != 0;
}

uint64_t Li3DEngineObjectData::applyChanges(uint64_t a1, float a2)
{
  Li3DEngineObjectData::updateScriptingEngine(a1, a2);

  return Li3DEngineObjectData::updateShadingEngine(a1);
}

uint64_t Li3DEngineObjectData::getHelium3DEngine(Li3DEngineObjectData *this, LiAgent *a2)
{
  uint64_t result = *((void *)this + 69);
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 24))(&v5);
    uint64_t result = *((void *)this + 68);
    uint64_t v4 = v5;
    if (result == v5)
    {
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
      }
    }
    else
    {
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
        uint64_t v4 = v5;
      }
      *((void *)this + 68) = v4;
    }
  }
  return result;
}

void sub_1B7AD4A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void Li3DEngineObjectData::setTextureSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 552) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 560);
  *(void *)(a1 + 56std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void Li3DEngineWorldData::add3DEngineObjectData(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v8 = a2;
  long long v9 = &v8;
  uint64_t v4 = std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(a1 + 208), &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[6];
  void v4[5] = v6;
  v4[6] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void Li3DEngineWorldData::getHelium3DEngine(Li3DEngineWorldData *this, LiAgent *a2)
{
  uint64_t v2 = (char *)*((void *)this + 26);
  uint64_t v3 = (char *)this + 216;
  if (v2 != (char *)this + 216)
  {
    do
    {
      uint64_t v5 = *((void *)v2 + 5);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v2 + 6);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, LiAgent *))(*(void *)v5 + 16))(v5, a2);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      uint64_t v7 = (char *)*((void *)v2 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (char *)*((void *)v2 + 2);
          BOOL v9 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1B7AD4BC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void Li3DEngineWorldData::applyChanges(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void **)(a1 + 208);
  uint64_t v5 = (void *)(a1 + 216);
  if (v4 != (void *)(a1 + 216))
  {
    do
    {
      uint64_t v9 = v4[5];
      long long v10 = (std::__shared_weak_count *)v4[6];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      long long v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          long long v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v13);
      }
      uint64_t v4 = v12;
    }
    while (v12 != v5);
  }
}

void sub_1B7AD4CB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void Li3DEngineWorldData::unapplyChanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 208);
  uint64_t v4 = (void *)(a1 + 216);
  if (v3 != (void *)(a1 + 216))
  {
    do
    {
      uint64_t v7 = v3[5];
      unint64_t v8 = (std::__shared_weak_count *)v3[6];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2, a3);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      uint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_1B7AD4D98(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

SCNNode *Li3DEngineObjectData::setSCNNode(id *this, SCNNode *a2)
{
  uint64_t result = a2;
  this[55] = result;
  return result;
}

void *Li3DEngineObjectData::setScriptParameters(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v5 = (char *)(a1 + 464);
  if (v5 != (char *)a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v5, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t result = (void *)(a1 + 488);
  if ((long long **)(a1 + 488) != a3)
  {
    uint64_t v7 = *a3;
    unint64_t v8 = a3[1];
    unint64_t v9 = v8 - *a3;
    return std::vector<LiScriptParameterDescriptor>::__assign_with_size[abi:ne180100]<LiScriptParameterDescriptor*,LiScriptParameterDescriptor*>(result, v7, v8, v9);
  }
  return result;
}

void Li3DEngineObjectForceParams::Li3DEngineObjectForceParams(Li3DEngineObjectForceParams *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
}

void Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams(id *this)
{
}

void Li3DEngineObjectForceParams::setUUID(id *this, NSUUID *a2)
{
  PCMakeNSRefAndRetain<EAGLContext *>(a2, &v3);
  ProCore_Impl::PCNSRefImpl::operator=(this + 6, &v3);
  ProCore_Impl::PCNSRefImpl::release(&v3);
}

void sub_1B7AD4EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void Li3DEngineWorldData::~Li3DEngineWorldData(Li3DEngineWorldData *this)
{
  *(void *)this = &unk_1F11214A0;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  *(void *)this = &unk_1F11216B8;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F11214A0;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  *(void *)this = &unk_1F11216B8;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);

  JUMPOUT(0x1BA9BFBA0);
}

void LiParticleParameters::~LiParticleParameters(LiParticleParameters *this)
{
  *((void *)this + 3) = &unk_1F1199AC8;
  *((unsigned char *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 4);
}

{
  uint64_t vars8;

  *((void *)this + 3) = &unk_1F1199AC8;
  *((unsigned char *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 4);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiParticleParameters::~LiParticleParameters(LiParticleParameters *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 3) = &unk_1F1199AC8;
  v1[40] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 4);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 3) = &unk_1F1199AC8;
  v1[40] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 4);

  JUMPOUT(0x1BA9BFBA0);
}

void Li3DEngineObjectDataBase::~Li3DEngineObjectDataBase(Li3DEngineObjectDataBase *this)
{
  *(void *)this = &unk_1F11216B8;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F11216B8;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(uint64_t a1, id *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(a1, a2[1]);
    ProCore_Impl::PCNSRefImpl::release(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::__emplace_unique_key_args<SCNParticleSystem *,std::piecewise_construct_t const&,std::tuple<SCNParticleSystem * const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, PC_Sp_counted_base ***a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<SCNParticleSystem * const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    unint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<SCNParticleSystem * const&>,std::tuple<>>(uint64_t a1@<X0>, PC_Sp_counted_base ***a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (PCSharedCount *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  v6[4].int var0 = **a2;
  v6[5].int var0 = 0;
  PCSharedCount::PCSharedCount(v6 + 6);
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
}

void sub_1B7AD53BC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(PCSharedCount **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      PCSharedCount::~PCSharedCount(v2 + 6);
    }
    operator delete(v2);
  }
}

_DWORD *std::vector<LiScriptParameterDescriptor>::__assign_with_size[abi:ne180100]<LiScriptParameterDescriptor*,LiScriptParameterDescriptor*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (_DWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, v11);
    BOOL v13 = (_DWORD *)a1[1];
    long long v12 = (_DWORD **)(a1 + 1);
    uint64_t result = v13;
    uint64_t v14 = (char *)v13;
    if (v6 != a3)
    {
      uint64_t v14 = (char *)result;
      do
      {
        long long v15 = *v6++;
        *(_OWORD *)uint64_t v14 = v15;
        v14 += 16;
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v25 = v14 - (char *)result;
    goto LABEL_27;
  }
  uint64_t v17 = (_DWORD *)a1[1];
  long long v12 = (_DWORD **)(a1 + 1);
  long long v16 = v17;
  unint64_t v18 = ((char *)v17 - (char *)result) >> 4;
  if (v18 >= a4)
  {
    uint64_t v14 = (char *)result;
    if (a2 != a3)
    {
      float v26 = result;
      do
      {
        uint64_t v27 = *(void *)v6;
        v26[2] = *((_DWORD *)v6 + 2);
        *(void *)float v26 = v27;
        v26 += 4;
        ++v6;
        v14 += 16;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  long long v19 = &a2[v18];
  if (v16 != result)
  {
    uint64_t v20 = 16 * v18;
    do
    {
      uint64_t v21 = *(void *)v6;
      result[2] = *((_DWORD *)v6 + 2);
      *(void *)uint64_t result = v21;
      result += 4;
      ++v6;
      v20 -= 16;
    }
    while (v20);
    uint64_t result = *v12;
  }
  long long v22 = (char *)result;
  if (v19 != a3)
  {
    long long v22 = (char *)result;
    id v23 = result;
    do
    {
      long long v24 = *v19++;
      *v23++ = v24;
      v22 += 16;
    }
    while (v19 != a3);
  }
  int64_t v25 = v22 - (char *)result;
LABEL_27:
  *long long v12 = (_DWORD *)((char *)result + v25);
  return result;
}

void LiRenderer::LiRenderer(LiRenderer *this)
{
  *((void *)this + 52) = &unk_1F1199AC8;
  *((void *)this + 53) = 0;
  *((unsigned char *)this + 432) = 1;
  LiRendererBase::LiRendererBase(this, (uint64_t *)&off_1F1121830);
  *(void *)this = &unk_1F11216F8;
  *((void *)this + 52) = &unk_1F1121810;
  *((unsigned char *)this + 51) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiRenderer *)((char *)this + 52), 1.0, 1.0, 1.0, 1.0);
  LiClipSet::LiClipSet((LiRenderer *)((char *)this + 72));
  *((void *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = &unk_1F111E0E8;
  LiImageFilterChain::LiImageFilterChain((LiRenderer *)((char *)this + 144));
  *((void *)this + 28) = 0x3FF0000000000000;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 13) = _Q0;
  *((void *)this + 38) = 0x3FF0000000000000;
  *((void *)this + 33) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((void *)this + 45) = 0;
  *((void *)this + 4ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 43) = 0x3FF0000000000000;
  *((void *)this + 44) = &unk_1F1121B00;
  *((void *)this + 48) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 49);
  *(void *)((char *)this + 404) = 0;
  *((_WORD *)this + 24) = 256;
  *((unsigned char *)this + 5std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  *((_WORD *)this + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 37ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
}

void sub_1B7AD572C(_Unwind_Exception *a1)
{
  PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(v5);
  LiImageFilterChain::~LiImageFilterChain(v6);
  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray(v4);
  LiClipSet::~LiClipSet(v3);
  LiRendererBase::~LiRendererBase((PCSharedCount *)v1, (const PCString *)&off_1F1121830);
  *(void *)(v1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = v2;
  *(unsigned char *)(v1 + 432) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 424));
  _Unwind_Resume(a1);
}

void LiRenderer::~LiRenderer(PCSharedCount *this, const PCString *a2)
{
  int var0 = a2->var0;
  this->int var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  PCSharedCount::~PCSharedCount(this + 49);
  PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray((uint64_t)&this[44]);
  this[20].int var0 = (PC_Sp_counted_base *)&unk_1F10AD6B0;
  if (SLODWORD(this[21].var0) < 0) {
    int v5 = 1;
  }
  else {
    int v5 = (int)this[21].var0;
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&this[20], 0, v5);
  uint64_t v6 = this[22].var0;
  if (v6) {
    MEMORY[0x1BA9BFB70](v6, 0x1000C8077774924);
  }
  this[22].int var0 = 0;
  LODWORD(this[21].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCSharedCount::~PCSharedCount(this + 19);
  this[15].int var0 = (PC_Sp_counted_base *)&unk_1F111E0E8;
  if (SLODWORD(this[16].var0) < 0) {
    int v7 = 1;
  }
  else {
    int v7 = (int)this[16].var0;
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&this[15], 0, v7);
  uint64_t v8 = this[17].var0;
  if (v8) {
    MEMORY[0x1BA9BFB70](v8, 0x1000C8077774924);
  }
  this[17].int var0 = 0;
  LODWORD(this[16].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  LiClipSet::~LiClipSet((LiClipSet *)&this[9]);

  LiRendererBase::~LiRendererBase(this, a2 + 1);
}

void LiRenderer::~LiRenderer(PCSharedCount *this)
{
  *(void *)(v1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 432) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 424));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 432) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 424));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiRenderer::~LiRenderer(LiRenderer *this)
{
  *(void *)(v1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 432) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 424);

  PCWeakCount::~PCWeakCount(v2);
}

{
  LiRenderer::~LiRenderer((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t LiRenderer::setRootTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 224;
  if (result + 224 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v2 + j) = *(void *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  return result;
}

__n128 LiRenderer::getRootTransform@<Q0>(LiRenderer *this@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *((_OWORD *)this + 19);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 18);
  *(_OWORD *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  long long v3 = *((_OWORD *)this + 21);
  *(_OWORD *)(a2 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = *((_OWORD *)this + 20);
  *(_OWORD *)(a2 + 112) = v3;
  long long v4 = *((_OWORD *)this + 15);
  *(_OWORD *)a2 = *((_OWORD *)this + 14);
  *(_OWORD *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v4;
  __n128 result = *((__n128 *)this + 16);
  long long v6 = *((_OWORD *)this + 17);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

PCShared_base **LiRenderer::setBackground(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 48, (PCShared_base *)a2);
}

uint64_t LiRenderer::addFilter(LiRenderer *this, LiImageFilter *a2)
{
  return LiImageFilterChain::append((LiRenderer *)((char *)this + 144), a2);
}

uint64_t LiRenderer::getBoundary(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (*(unsigned char *)(a1 + 184))
  {
    long long v4 = *(_OWORD *)(a1 + 192);
    long long v5 = *(_OWORD *)(a1 + 208);
  }
  else
  {
    (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 192))(v9);
    uint64_t v7 = *(void *)&v9[0];
    PCSharedCount::~PCSharedCount((PCSharedCount *)v9 + 1);
    if (!v7) {
      uint64_t v7 = **(void **)(a2 + 48);
    }
    (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v7 + 280))(v9, v7);
    long long v4 = v9[0];
    long long v5 = v9[1];
  }
  *a3 = v4;
  a3[1] = v5;
  return 1;
}

__n128 LiRenderer::setBoundary(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 208) = v3;
  *(unsigned char *)(a1 + 184) = 1;
  return result;
}

void LiRenderer::doOneFaceRender()
{
}

void sub_1B7AD614C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LiAgent::~LiAgent((LiAgent *)&a11);
  LiRenderInstance::~LiRenderInstance((LiRenderInstance *)&a69);
  LiRenderer::~LiRenderer((PCSharedCount *)&STACK[0x680]);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x8F8]);
  PCSharedCount::~PCSharedCount(v69);
  _Unwind_Resume(a1);
}

void LiRenderer::doSixFaceRender(LiRenderer *this, LiAgent *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 192))(&v3);
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  float v2 = (double)0 * 0.785398163;
  __sincosf_stret(v2);
  LiRenderer::doOneFaceRender();
}

void sub_1B7AD672C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void LiRenderer::getHelium(LiRenderer *this, LiAgent *a2)
{
  if (*((unsigned char *)this + 401))
  {
    LiRenderer::doSixFaceRender(this, a2);
  }
  LiAgent::getRenderDevice((LiRenderParameters **)a2);
  operator new();
}

void sub_1B7AD69D0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderer::applyRenderToEquirect(uint64_t this, int a2, int a3)
{
  *(unsigned char *)(this + 401) = 1;
  *(_DWORD *)(this + 404) = a2;
  *(_DWORD *)(this + 408) = a3;
  return this;
}

uint64_t LiRenderer::getEquirectWidth(LiRenderer *this)
{
  return *((unsigned int *)this + 101);
}

uint64_t LiRenderer::getEquirectHeight(LiRenderer *this)
{
  return *((unsigned int *)this + 102);
}

uint64_t LiRenderer::pixelTransformSupport(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 401)) {
    return 3;
  }
  else {
    return 6;
  }
}

uint64_t LiRenderer::estimateRenderMemory(PCColorSpaceCache *a1, uint64_t a2)
{
  long long v4 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(a1);
  LegacyColorDescription = (HGComputeDeviceManager *)FxMakeLegacyColorDescription(v4, 1, (uint64_t)v10);
  HGComputeDeviceManager::GetCPUComputeDevice(LegacyColorDescription, &v8);
  long long v9 = v8;
  long long v8 = 0uLL;
  LiRenderInstance::LiRenderInstance(v11, a1, v10, &v9);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v10);
  uint64_t v6 = LiRenderInstance::estimateRenderMemory((uint64_t)v11, a2);
  LiRenderInstance::~LiRenderInstance((LiRenderInstance *)v11);
  return v6;
}

void sub_1B7AD6B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  LiRenderInstance::~LiRenderInstance((LiRenderInstance *)va);
  _Unwind_Resume(a1);
}

void LiRenderer::getBackground(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->int var0 = this[48].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 49);
}

uint64_t LiRenderer::setBlendBackground(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a2;
  return this;
}

uint64_t LiRenderer::getBlendBackground(LiRenderer *this)
{
  return *((unsigned __int8 *)this + 400);
}

void PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(uint64_t a1)
{
  PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1121B00;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = v2 & ~(v2 >> 31);
  }
  if (v3 == v2)
  {
    uint64_t v4 = *(int *)(a1 + 12);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t v6 = (void *)(v5 + 16 * v4 + 8);
      do
      {
        *(v6 - 1) = 0;
        void *v6 = 0x3FF0000000000000;
        v6 += 2;
      }
      while (!__CFADD__(v4++, 1));
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    uint64_t v5 = 0;
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      MEMORY[0x1BA9BFB70](v8, 0x1000C8077774924);
    }
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5) {
LABEL_16:
  }
    MEMORY[0x1BA9BFB70](v5, 0x1000C8077774924);
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiPadImage::LiPadImage(LiPadImage *this)
{
  *((void *)this + 9) = &unk_1F1199AC8;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((unsigned char *)this + 88) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F1121C48);
  *(void *)this = &unk_1F1121B40;
  *((void *)this + 9) = &unk_1F1121C28;
  *((void *)this + 5) = 0;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = _Q0;
}

void sub_1B7AD6D68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void LiPadImage::~LiPadImage(PCSharedCount *this)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiPadImage::~LiPadImage(LiPadImage *this)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  LiPadImage::~LiPadImage((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

__n128 LiPadImage::SetDOD(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)(a2 + 16);
  *(__n128 *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = result;
  return result;
}

uint64_t LiPadImage::getHelium@<X0>(LiPadImage *this@<X0>, long long **a2@<X1>, HGCrop **a3@<X8>)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 2), &v29);
  *a3 = 0;
  uint64_t v6 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v6);
  (*(void (**)(HGTextureWrap *, void, uint64_t))(*(void *)v6 + 120))(v6, 0, v29);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v6, 0, v7);
  v30[0] = 0;
  v30[1] = 0;
  HGTextureWrap::SetTextureBorderColor(v6, (float *)v30);
  uint64_t v8 = a2[20];
  long long v9 = v8[3];
  long long v11 = *v8;
  long long v10 = v8[1];
  v28[2] = v8[2];
  v28[3] = v9;
  v28[0] = v11;
  v28[1] = v10;
  long long v12 = v8[7];
  long long v14 = v8[4];
  long long v13 = v8[5];
  v28[6] = v8[6];
  v28[7] = v12;
  v28[4] = v14;
  v28[5] = v13;
  long long v15 = *(_OWORD *)((char *)this + 56);
  long long v26 = *(_OWORD *)((char *)this + 40);
  long long v27 = v15;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v28, (double *)&v26, (uint64_t)&v26);
  long long v16 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v16);
  (*(void (**)(HGCrop *, void, HGTextureWrap *))(*(void *)v16 + 120))(v16, 0, v6);
  float v17 = *(double *)&v26;
  float v18 = *((double *)&v26 + 1);
  float v19 = *(double *)&v26 + *(double *)&v27;
  float v20 = *((double *)&v26 + 1) + *((double *)&v27 + 1);
  uint64_t v22 = HGRectMake4f(v21, v17, v18, v19, v20);
  (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v16 + 96))(v16, 0, (float)(int)v22, (float)SHIDWORD(v22), (float)v23, (float)v24);
  *a3 = v16;
  (*(void (**)(HGCrop *))(*(void *)v16 + 16))(v16);
  (*(void (**)(HGCrop *))(*(void *)v16 + 24))(v16);
  (*(void (**)(HGTextureWrap *))(*(void *)v6 + 24))(v6);
  uint64_t result = v29;
  if (v29) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  return result;
}

void sub_1B7AD7168(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t LiPadImage::pixelTransformSupport()
{
  return 6;
}

uint64_t LiPadImage::getBoundary(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  long long v3 = *(_OWORD *)(a1 + 56);
  *a3 = *(_OWORD *)(a1 + 40);
  a3[1] = v3;
  return 1;
}

void LiCollectState::LiCollectState(LiCollectState *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 12) = 0x3FF0000000000000;
  *((void *)this + 7) = 0x3FF0000000000000;
  *((void *)this + 2) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((void *)this + 28) = 0x3FF0000000000000;
  *((void *)this + 23) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = _Q1;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 44) = 0x3FF0000000000000;
  *((void *)this + 39) = 0x3FF0000000000000;
  *((void *)this + 33) = 0x3FF0000000000000;
  *((void *)this + 34) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 28std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 29ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 36std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 37ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((void *)this + 49) = 0x3FF0000000000000;
  *((void *)this + 5std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((unsigned char *)this + 408) = 0;
  LiClipSet::LiClipSet((LiCollectState *)((char *)this + 416));
  *((void *)this + 58) = 0;
}

uint64_t LiRenderInstance::LiRenderInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F1121F18;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(unsigned char *)(a2 + 48);
  LiRenderParameters::LiRenderParameters(a1 + 24, a3, a4);
  *(void *)(a1 + 24std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 256));
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 304));
  *(void *)(a1 + 432) = 0x3FF0000000000000;
  *(void *)(a1 + 392) = 0x3FF0000000000000;
  *(void *)(a1 + 352) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 36std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 37ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 45ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(void *)(a1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 56std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 52std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 472) = 0x3FF0000000000000;
  *(void *)(a1 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 728) = 0x3FF0000000000000;
  *(void *)(a1 + 688) = 0x3FF0000000000000;
  *(void *)(a1 + 648) = 0x3FF0000000000000;
  *(void *)(a1 + 608) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 61ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 65ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(void *)(a1 + 85ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(void *)(a1 + 81ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(void *)(a1 + 77ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(void *)(a1 + 73ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 76std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 80std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 84std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 864) = xmmword_1B7E74760;
  *(void *)(a1 + 100std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 96std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 92std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 88std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(void *)(a1 + 1128) = 0x3FF0000000000000;
  *(void *)(a1 + 1088) = 0x3FF0000000000000;
  *(void *)(a1 + 1048) = 0x3FF0000000000000;
  *(void *)(a1 + 1008) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 101ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 105ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 109ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 113ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F111A080;
  *(void *)(a1 + 117ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 116std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F111A080;
  return a1;
}

void sub_1B7AD7538(_Unwind_Exception *a1)
{
  LiClipSet::~LiClipSet(v2);
  LiRenderParameters::~LiRenderParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::LiRenderInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  *(void *)a1 = &unk_1F1121F18;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(unsigned char *)(a2 + 48);
  LiRenderParameters::LiRenderParameters(a1 + 24, a3, a4, a5);
  *(void *)(a1 + 24std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 256));
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 304));
  *(void *)(a1 + 432) = 0x3FF0000000000000;
  *(void *)(a1 + 392) = 0x3FF0000000000000;
  *(void *)(a1 + 352) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 36std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 37ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 45ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(void *)(a1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 56std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 52std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 472) = 0x3FF0000000000000;
  *(void *)(a1 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 728) = 0x3FF0000000000000;
  *(void *)(a1 + 688) = 0x3FF0000000000000;
  *(void *)(a1 + 648) = 0x3FF0000000000000;
  *(void *)(a1 + 608) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 61ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 65ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(void *)(a1 + 85ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(void *)(a1 + 81ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(void *)(a1 + 77ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(void *)(a1 + 73ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 76std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 80std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 84std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 864) = xmmword_1B7E74760;
  *(void *)(a1 + 100std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 96std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 92std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 88std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(void *)(a1 + 1128) = 0x3FF0000000000000;
  *(void *)(a1 + 1088) = 0x3FF0000000000000;
  *(void *)(a1 + 1048) = 0x3FF0000000000000;
  *(void *)(a1 + 1008) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 101ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 105ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 109ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 113ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F111A080;
  *(void *)(a1 + 117ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 116std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F111A080;
  return a1;
}

void sub_1B7AD7734(_Unwind_Exception *a1)
{
  LiClipSet::~LiClipSet(v2);
  LiRenderParameters::~LiRenderParameters(v1);
  _Unwind_Resume(a1);
}

void LiRenderInstance::~LiRenderInstance(LiRenderInstance *this)
{
  *(void *)this = &unk_1F1121F18;
  PCPtrArray<LiDrawer>::deleteAll((unsigned int *)this + 290);
  *((void *)this + 145) = &unk_1F111A0D0;
  int v2 = *((_DWORD *)this + 292);
  if (v2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = v2 & ~(v2 >> 31);
  }
  if (v3 == v2)
  {
    uint64_t v4 = *((int *)this + 293);
    if ((v4 & 0x80000000) != 0)
    {
      do
      {
        *(void *)(*((void *)this + 147) + 8 * v4) = 0;
        BOOL v5 = __CFADD__(v4++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    uint64_t v6 = *((void *)this + 147);
    if (v6) {
      MEMORY[0x1BA9BFB70](v6, 0x1000C8077774924);
    }
    *((void *)this + 147) = 0;
  }
  *((_DWORD *)this + 292) = v3;
  *((_DWORD *)this + 293) = 0;
  uint64_t v7 = *((void *)this + 147);
  if (v7) {
    MEMORY[0x1BA9BFB70](v7, 0x1000C8077774924);
  }
  *((void *)this + 147) = 0;
  *((_DWORD *)this + 292) = 0;
  *((void *)this + 142) = &unk_1F111A0D0;
  int v8 = *((_DWORD *)this + 286);
  if (v8 < 0) {
    int v9 = 1;
  }
  else {
    int v9 = v8 & ~(v8 >> 31);
  }
  if (v9 == v8)
  {
    uint64_t v10 = *((int *)this + 287);
    if ((v10 & 0x80000000) != 0)
    {
      do
      {
        *(void *)(*((void *)this + 144) + 8 * v1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
        BOOL v5 = __CFADD__(v10++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v9) {
      operator new[]();
    }
    uint64_t v11 = *((void *)this + 144);
    if (v11) {
      MEMORY[0x1BA9BFB70](v11, 0x1000C8077774924);
    }
    *((void *)this + 144) = 0;
  }
  *((_DWORD *)this + 28ProCore_Impl::PCNSRefImpl::release(this + 6) = v9;
  *((_DWORD *)this + 287) = 0;
  uint64_t v12 = *((void *)this + 144);
  if (v12) {
    MEMORY[0x1BA9BFB70](v12, 0x1000C8077774924);
  }
  *((void *)this + 144) = 0;
  *((_DWORD *)this + 28ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  LiClipSet::~LiClipSet((LiRenderInstance *)((char *)this + 304));
  LiClipSet::~LiClipSet((LiRenderInstance *)((char *)this + 256));
  long long v13 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 23);
  *((void *)this + 7) = &unk_1F10AD6B0;
  if (*((int *)this + 16) < 0) {
    int v14 = 1;
  }
  else {
    int v14 = *((_DWORD *)this + 16);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 56, 0, v14);
  uint64_t v15 = *((void *)this + 9);
  if (v15) {
    MEMORY[0x1BA9BFB70](v15, 0x1000C8077774924);
  }
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 6);
}

{
  uint64_t vars8;

  LiRenderInstance::~LiRenderInstance(this);

  JUMPOUT(0x1BA9BFBA0);
}

unsigned int *PCPtrArray<LiDrawer>::deleteAll(unsigned int *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[3];
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if (i >= (int)v1[3]) {
        PCArray_base::badIndex((PCArray_base *)result);
      }
      uint64_t result = *(unsigned int **)(*((void *)v1 + 2) + 8 * i);
      if (result) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      if (i >= (int)v1[3]) {
        PCArray_base::badIndex((PCArray_base *)result);
      }
      *(void *)(*((void *)v1 + 2) + 8 * i) = 0;
    }
  }
  int v4 = v1[2];
  if (v4 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = v4 & ~(v4 >> 31);
  }
  if (v5 == v4)
  {
    uint64_t v6 = (int)v1[3];
    if ((v6 & 0x80000000) != 0)
    {
      do
        *(void *)(*((void *)v1 + 2) + 8 * vProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      while (!__CFADD__(v6++, 1));
    }
  }
  else
  {
    if (v5) {
      operator new[]();
    }
    uint64_t result = (unsigned int *)*((void *)v1 + 2);
    if (result) {
      uint64_t result = (unsigned int *)MEMORY[0x1BA9BFB70](result, 0x1000C8077774924);
    }
    *((void *)v1 + 2) = 0;
  }
  v1[2] = v5;
  v1[3] = 0;
  return result;
}

uint64_t LiRenderInstance::getHelium@<X0>(LiRenderInstance *this@<X0>, const LiRenderParameters **a2@<X1>, void *a3@<X8>)
{
  *((unsigned char *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = (*(unsigned __int8 *)(*((void *)this + 1) + 48) | *((unsigned __int8 *)a2 + 248)) != 0;
  uint64_t result = LiAgent::getImageToDocumentTransform((LiAgent *)a2, (uint64_t)v13);
  if (v13 != (char *)this + 352)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      int v8 = (_OWORD *)((char *)this + i + 352);
      long long v9 = *(_OWORD *)&v13[i + 16];
      *int v8 = *(_OWORD *)&v13[i];
      v8[1] = v9;
    }
  }
  uint64_t v10 = (double *)a2[20];
  double v11 = *v10 * *v10 + v10[1] * v10[1] + v10[2] * v10[2] + v10[3] * v10[3];
  if (v11 <= -0.0000001 || v11 >= 0.0000001)
  {
    double v12 = v10[4] * v10[4] + v10[5] * v10[5] + v10[6] * v10[6] + v10[7] * v10[7];
    if (v12 <= -0.0000001 || v12 >= 0.0000001)
    {
      LiClipSet::operator=((uint64_t)this + 256, *((void *)this + 1) + 72);
      LiRenderInstance::setRenderParameters(this, a2[6]);
      *((_DWORD *)a2 + 8) = 1;
      LiRenderInstance::buildHeliumGraph(this, (__n128 *)a2);
    }
  }
  *a3 = 0;
  return result;
}

void LiRenderInstance::setRenderParameters(LiRenderInstance *this, const LiRenderParameters *a2)
{
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2;
  int v4 = (LiRenderInstance *)((char *)this + 40);
  LiImageFilterChain::operator=((uint64_t)this + 40, (uint64_t)a2 + 16);
  long long v5 = *(_OWORD *)((char *)a2 + 88);
  long long v6 = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 56);
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = v6;
  *((_OWORD *)this + 7) = v5;
  long long v7 = *(_OWORD *)((char *)a2 + 120);
  long long v8 = *(_OWORD *)((char *)a2 + 136);
  long long v9 = *(_OWORD *)((char *)a2 + 104);
  *((void *)this + 22) = *((void *)a2 + 19);
  *((_OWORD *)this + 9) = v7;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v8;
  *((_OWORD *)this + 8) = v9;
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)this + 23, (CGColorSpace **)a2 + 20);
  uint64_t v10 = *((void *)a2 + 21);
  *((_DWORD *)this + 5std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((_DWORD *)a2 + 44);
  *((void *)this + 24) = v10;
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 184);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 48);
  uint64_t v12 = *((void *)a2 + 25);
  uint64_t v11 = *((void *)a2 + 26);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v13 = (std::__shared_weak_count *)*((void *)this + 29);
  *((void *)this + 28) = v12;
  *((void *)this + 29) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 192))(&v16);
  uint64_t v14 = v16;
  PCSharedCount::~PCSharedCount(&v17);
  if (v14)
  {
    *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((void *)this + 1);
    *((void *)this + 3) = v14;
    *((void *)this + 4) = 0;
    LiImageFilterChain::clear(v4);
  }
  uint64_t v15 = *((void *)this + 1);
  if (*(unsigned char *)(v15 + 48))
  {
    --*((_DWORD *)this + 24);
    *((void *)this + 11) = v15 + 120;
    *((void *)this + 4) = v15 + 224;
  }
  LiImageFilterChain::append(v4, (const LiImageFilterChain *)(v15 + 144));
}

void LiRenderInstance::buildHeliumGraph(LiRenderInstance *this, __n128 *a2)
{
  int v4 = (LiRenderInstance *)a2[10].n128_u64[0];
  if (LiAgent::haveROI((LiAgent *)a2))
  {
    LiAgent::getROI(a2, (__n128 *)&v14);
    long long v5 = v14;
  }
  else
  {
    long long v5 = xmmword_1B7E74760;
  }
  long long v11 = v5;
  *((void *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  long long v6 = (char *)this + 736;
  if (v4 != (LiRenderInstance *)((char *)this + 736))
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)&v6[j] = *(void *)((char *)v4 + j);
      v6 += 32;
      int v4 = (LiRenderInstance *)((char *)v4 + 32);
    }
  }
  *((_OWORD *)this + 54) = v11;
  LiAgent::get2DClipPlanes((LiAgent *)a2, (LiClipSet *)&v14);
  LiClipSet::operator=((uint64_t)this + 304, (uint64_t)&v14);
  LiClipSet::~LiClipSet((LiClipSet *)&v14);
  (*(void (**)(long long *__return_ptr))(**((void **)this + 1) + 192))(&v14);
  unint64_t v9 = v14;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v14 + 1);
  if (!v9)
  {
    WorldClipPlanes = (const LiClipSet *)LiAgent::getWorldClipPlanes((LiAgent *)a2);
    LiClipSet::add((LiRenderInstance *)((char *)this + 256), WorldClipPlanes);
  }
  LiCompositor::LiCompositor((LiCompositor *)&v14);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 216))(&v12);
  uint64_t v15 = v12;
  PCSharedCount::PCSharedCount(&v18, &v13);
  PCSharedCount::operator=(&v16, (uint64_t *)&v18);
  PCSharedCount::~PCSharedCount(&v18);
  PCSharedCount::~PCSharedCount(&v13);
  char v17 = (*(uint64_t (**)(void))(**((void **)this + 1) + 232))(*((void *)this + 1));
  LiRenderInstance::collect(this);
}

void sub_1B7AD7FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v6 - 56));
  PCSharedCount::~PCSharedCount(v5);
  LiCompositor::~LiCompositor((LiCompositor *)va);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  return LiRenderInstance::estimateRenderMemory(a1, a2, *(char **)(*(void *)(a1 + 8) + 16));
}

uint64_t LiRenderInstance::estimateRenderMemory(uint64_t a1, uint64_t a2, char *a3)
{
  int v3 = a3;
  if (a3)
  {
    if (v6)
    {
      long long v7 = v6;
      (*(void (**)(LiImageSource **__return_ptr))(*(void *)v6 + 160))(&v18);
      long long v8 = v18;
      PCSharedCount::~PCSharedCount(&v19);
      if (v7[159])
      {
        LiImageFilterChain::LiImageFilterChain((LiImageFilterChain *)&v18, (const LiImageFilterChain *)(v7 + 152));
        LiImageFilterChain::setInput((PCShared_base **)&v18, v8);
        uint64_t Tail = LiImageFilterChain::getTail((LiImageFilterChain *)&v18);
        int v3 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Tail + 112))(Tail, a2);
        float v20 = &unk_1F10AD6B0;
        if (v21 < 0) {
          int v10 = 1;
        }
        else {
          int v10 = v21;
        }
        PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v20, 0, v10);
        if (v22) {
          MEMORY[0x1BA9BFB70](v22, 0x1000C8077774924);
        }
        uint64_t v22 = 0;
        int v21 = 0;
        PCSharedCount::~PCSharedCount(&v19);
      }
      else
      {
        return (*(uint64_t (**)(LiImageSource *, uint64_t))(*(void *)v8 + 112))(v8, a2);
      }
    }
    else
    {
      if (v11 && (uint64_t v12 = v11, v13 = (*(uint64_t (**)(void *))(*(void *)v11 + 136))(v11), v13 >= 1))
      {
        int v14 = v13;
        uint64_t v15 = 0;
        int v3 = 0;
        do
        {
          uint64_t v16 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v12 + 144))(v12, v15);
          v3 += LiRenderInstance::estimateRenderMemory(a1, a2, v16);
          uint64_t v15 = (v15 + 1);
        }
        while (v14 != v15);
      }
      else
      {
        return 0;
      }
    }
  }
  return (uint64_t)v3;
}

void sub_1B7AD82BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LiImageFilterChain::~LiImageFilterChain((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::add(LiRenderInstance *this, LiDrawer *a2)
{
  int v4 = (char *)this + 1160;
  int v5 = *((_DWORD *)this + 293);
  if (*((_DWORD *)this + 292) <= v5) {
    int v6 = (2 * (v5 + 1)) | 1;
  }
  else {
    int v6 = *((_DWORD *)this + 292);
  }
  uint64_t result = PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)v4, v5 + 1, v6);
  *(void *)(*((void *)this + 147) + 8 * *((int *)this + 293) - 8) = a2;
  return result;
}

uint64_t LiRenderInstance::getRenderer(LiRenderInstance *this)
{
  return *((void *)this + 30);
}

uint64_t LiRenderInstance::getWorkingColorSpace(LiRenderInstance *this)
{
  return FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 184));
}

uint64_t LiRenderInstance::getWorkingColorDescription(LiRenderInstance *this)
{
  return (uint64_t)this + 184;
}

float LiRenderInstance::getBlendingGamma(LiRenderInstance *this)
{
  return *((float *)this + 54);
}

uint64_t LiRenderInstance::getCamera(LiRenderInstance *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 192))(&v4);
  uint64_t v2 = v4;
  PCSharedCount::~PCSharedCount(&v5);
  if (!v2) {
    return *((void *)this + 3);
  }
  return v2;
}

double LiRenderInstance::getRootTransform@<D0>(LiRenderInstance *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = (long long *)*((void *)this + 4);
  if (v2)
  {
    long long v3 = *v2;
    long long v4 = v2[1];
    long long v5 = v2[3];
    a2[2] = v2[2];
    a2[3] = v5;
    *a2 = v3;
    a2[1] = v4;
    long long v6 = v2[4];
    long long v7 = v2[5];
    long long v8 = v2[7];
    a2[6] = v2[6];
    a2[7] = v8;
    a2[4] = v6;
    a2[5] = v7;
  }
  else
  {
    *(void *)&long long v6 = LiRenderer::getRootTransform((LiRenderer *)*((void *)this + 1), (uint64_t)a2).n128_u64[0];
  }
  return *(double *)&v6;
}

uint64_t LiImageFilterChain::clear(LiImageFilterChain *this)
{
  uint64_t v2 = (char *)this + 16;
  if (*((int *)this + 6) < 0) {
    int v3 = 1;
  }
  else {
    int v3 = *((_DWORD *)this + 6);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v2, 0, v3);
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = MEMORY[0x1BA9BFB70](result, 0x1000C8077774924);
  }
  *((void *)this + 4) = 0;
  *((_DWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  return result;
}

void LiRenderInstance::collect(LiRenderInstance *this)
{
  *((double *)this + 94) = *((double *)this + 94) * 0.0;
  *((double *)this + 98) = *((double *)this + 98) * 0.0;
  *((double *)this + 102) = *((double *)this + 102) * 0.0;
  *((double *)this + 10ProCore_Impl::PCNSRefImpl::release(this + 6) = *((double *)this + 106) * 0.0;
  LiCollectState::LiCollectState((LiCollectState *)v1);
  operator new();
}

void sub_1B7AD8974(_Unwind_Exception *a1)
{
}

uint64_t LiRenderInstance::collect3D(LiRenderInstance *this, LiSceneObject *a2, LiCollectState *a3)
{
  uint64_t result = LiRenderParameters::shouldOmit((LiRenderInstance *)((char *)this + 24), a2);
  if ((result & 1) == 0)
  {
    if (*(unsigned char *)(*((void *)this + 1) + 48))
    {
      if (!*((unsigned char *)a2 + 552)) {
        return result;
      }
    }
    else if (!*((unsigned char *)a2 + 553))
    {
      return result;
    }
    if (*((_DWORD *)a2 + 140)) {
      operator new();
    }
    operator new();
  }
  return result;
}

void sub_1B7AD8EEC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1000C407EBBDD04);
  _Unwind_Resume(a1);
}

BOOL LiRenderInstance::collectGeode(LiRenderInstance *this, LiGeode *a2, LiCollectState *a3)
{
  int v4 = LiSceneObject::blendMode(a2);
  if (*((double *)a3 + 50) != 0.0 || (BOOL result = LiCompositor::isStencil(v4))) {
    operator new();
  }
  return result;
}

void sub_1B7AD93D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B7AD92D8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiRenderInstance::collectEquirectGroup(LiRenderInstance *this, Li3DGroupForEquirect *a2, LiCollectState *a3, LiCollectState *a4)
{
  uint64_t result = (*(uint64_t (**)(Li3DGroupForEquirect *))(*(void *)a2 + 136))(a2);
  if (result)
  {
    uint64_t Renderer = Li3DGroupForEquirect::getRenderer(a2);
    unint64_t v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)Renderer + 176))(Renderer);
    if (v9) {
    else
    }
      int v10 = 0;
    if ((*(unsigned int (**)(Li3DGroupForEquirect *))(*(void *)a2 + 136))(a2))
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = (*(uint64_t (**)(Li3DGroupForEquirect *, uint64_t))(*(void *)a2 + 144))(a2, v11);
        (*(void (**)(void *, uint64_t))(*(void *)v10 + 152))(v10, v12);
        uint64_t v11 = (v11 + 1);
      }
      while (v11 != (*(unsigned int (**)(Li3DGroupForEquirect *))(*(void *)a2 + 136))(a2));
    }
    Geode = (LiGeode *)Li3DGroupForEquirect::getGeode(a2);
    return LiRenderInstance::collectGeode(this, Geode, a3);
  }
  return result;
}

void LiRenderInstance::collectGroup(LiRenderInstance *this, LiGroup *a2, LiCollectState *a3, LiCollectState *a4)
{
}

void sub_1B7AD9FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCSharedCount a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  PCPtrArray<LiDrawer>::~PCPtrArray((uint64_t)&a17);
  LiDepthSorter::~LiDepthSorter((LiDepthSorter *)&a20);
  LiPlanarGroupHerd::~LiPlanarGroupHerd((LiPlanarGroupHerd *)&a29);
  MEMORY[0x1BA9BFBA0](v29, 0x1000C407EBBDD04);
  _Unwind_Resume(a1);
}

uint64_t LiSceneObject_layerOrder(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    throw_PCNullPointerException(1);
  }
  int v2 = *(_DWORD *)(*(void *)a1 + 528);
  if (!*(void *)a2) {
    throw_PCNullPointerException(1);
  }
  int v3 = *(_DWORD *)(*(void *)a2 + 528);
  BOOL v4 = v2 <= v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return v5;
  }
  else {
    return 1;
  }
}

void LiRenderInstance::addLightsAndDOF(LiRenderInstance *this, LiPolygonInstance *a2)
{
  if (a2)
  {
    int v2 = (LiGeode *)*((void *)a2 + 179);
    if (v2)
    {
      (*(void (**)(uint64_t *__return_ptr, void))(*(void *)v2 + 160))(&v3, *((void *)a2 + 179));
      if (!v3) {
        throw_PCNullPointerException(1);
      }
      (*(void (**)(uint64_t))(*(void *)v3 + 152))(v3);
      PCSharedCount::~PCSharedCount(&v4);
      if (LiGeode::needsLights(v2))
      {
        if (*(_DWORD *)(LiGeode::getLightFilter(v2) + 52)) {
          operator new();
        }
      }
    }
  }
}

void sub_1B7ADA358(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LiCollectState>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    LiClipSet::~LiClipSet((LiClipSet *)(v2 + 416));
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t LiRenderParameters::LiRenderParameters(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  LiImageFilterChain::LiImageFilterChain((LiImageFilterChain *)(a1 + 16));
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  *(_DWORD *)(a1 + 7ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x1000000;
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)(a1 + 80));
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 138) = 0;
  long long v6 = *(CGColorSpace **)a2;
  *(void *)(a1 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)a2;
  *(_DWORD *)(a1 + 128) = 5;
  *(void *)(a1 + 152) = 0x3FF0000000000000;
  if (v6) {
    long long v6 = PCCFRefTraits<CGColorSpace *>::retain(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 168) = v7;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 24);
  *(float *)(a1 + 192) = PCRenderModel::getDefaultBlendingGamma(v6);
  uint64_t v8 = a3[1];
  *(void *)(a1 + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *a3;
  *(void *)(a1 + 208) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1B7ADA4CC(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  LiImageFilterChain::~LiImageFilterChain(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderParameters::LiRenderParameters(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  LiImageFilterChain::LiImageFilterChain((LiImageFilterChain *)(a1 + 16));
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  *(_DWORD *)(a1 + 7ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x1000000;
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)(a1 + 80));
  *(_DWORD *)(a1 + 128) = 5;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 138) = 0;
  uint64_t v8 = *(CGColorSpace **)a2;
  *(void *)(a1 + 152) = 0x3FF0000000000000;
  *(void *)(a1 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v8;
  if (v8) {
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 168) = v9;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 24);
  *(float *)(a1 + 192) = a4;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *a3;
  *(void *)(a1 + 208) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1B7ADA5B8(_Unwind_Exception *a1)
{
  LiImageFilterChain::~LiImageFilterChain(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderParameters::getHeliumRenderer(LiRenderParameters *this)
{
  return *((void *)this + 17);
}

uint64_t LiRenderParameters::setHeliumRenderer(uint64_t this, HGRenderer *a2)
{
  *(void *)(this + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  return this;
}

uint64_t LiRenderParameters::getRenderDevice(LiRenderParameters *this)
{
  return (uint64_t)this + 200;
}

uint64_t LiRenderParameters::shouldOmit(LiRenderParameters *this, LiSceneObject *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v10 = a2;
    if (a2) {
      a2 = (LiSceneObject *)((char *)a2 + *(void *)(*(void *)a2 - 24));
    }
    uint64_t v3 = PCSharedCount::PCSharedCount(&v11, a2);
    uint64_t v4 = *(unsigned int *)(v2 + 12);
    if ((int)v4 < 1)
    {
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v5 = 0;
      long long v6 = *(LiSceneObject ***)(v2 + 16);
      do
      {
        uint64_t v7 = *v6;
        if (v10)
        {
          if (v7) {
            BOOL v8 = v10 == v7;
          }
          else {
            BOOL v8 = 0;
          }
          if (v8) {
            goto LABEL_16;
          }
        }
        else if (!v7)
        {
          goto LABEL_16;
        }
        ++v5;
        v6 += 2;
      }
      while (v4 != v5);
      LODWORD(v5) = -1;
LABEL_16:
      uint64_t v2 = (int)v5 >= 0;
    }
    PCSharedCount::~PCSharedCount(v3);
  }
  return v2;
}

uint64_t LiRenderParameters::isDynamicRangeTrackingRender(FxColorDescription *this)
{
  uint64_t v1 = this + 5;
  if (FxColorDescription::isSDR(this + 5)) {
    return 1;
  }

  return FxColorDescription::isHDR(v1);
}

void ProShade::Snippet::loadFromClassBundle(ProShade::Snippet *this, const PCString *a2, objc_object *a3)
{
}

void sub_1B7ADA760(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402E17CF6ALL);
  _Unwind_Resume(a1);
}

void ProShade::Snippet::loadFromBundle(ProShade::Snippet *this, const PCString *a2)
{
  uint64_t v2 = (ProShade::Snippet *)objc_opt_class();

  ProShade::Snippet::loadFromClassBundle(v2, v3, v4);
}

void LiFilteredPolygon::LiFilteredPolygon(LiFilteredPolygon *this)
{
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *((_OWORD *)this + 5) = _Q1;
  *((void *)this + 27) = 0x3FF0000000000000;
  *((void *)this + 22) = 0x3FF0000000000000;
  *((void *)this + 17) = 0x3FF0000000000000;
  *((void *)this + 12) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FFB333333333333;
  *((_WORD *)this + 28) = 1;
  *((_WORD *)this + 112) = 256;
}

void LiFilteredPolygon::setPolygon(LiFilteredPolygon *this, const LiImagePolygon *a2)
{
  copy<LiPolygon::PosFacet,LiChannelT<PCVector3<double>>>((uint64_t)a2 + 88, (uint64_t *)this);

  copy<LiImagePolygon::EdgeFacet,LiChannelT<int>>((uint64_t)a2 + 104, (std::vector<int> *)this + 1);
}

__n128 copy<LiPolygon::PosFacet,LiChannelT<PCVector3<double>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 8) - **(void **)a1;
  std::vector<PCVector3<double>>::resize(a2, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (__n128 *)(**(void **)a1 + 32 * v6);
      BOOL v8 = (__n128 *)(*a2 + 24 * v6);
      __n128 result = *v7;
      v8[1].n128_u64[0] = v7[1].n128_u64[0];
      *BOOL v8 = result;
      ++v6;
    }
    while (v6 != ((unint64_t)v4 >> 5));
  }
  return result;
}

void copy<LiImagePolygon::EdgeFacet,LiChannelT<int>>(uint64_t a1, std::vector<int> *this)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 8) - **(void **)a1;
  std::vector<unsigned int>::resize(this, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v6 = ((unint64_t)v4 >> 5);
    uint64_t v7 = (int *)(**(void **)a1 + 24);
    do
    {
      int v8 = *v7;
      v7 += 8;
      *begin++ = v8;
      --v6;
    }
    while (v6);
  }
}

float LiFilteredPolygon_State::unfilter(uint64_t a1, double *a2, float64_t *a3)
{
  double v3 = a2[10];
  v4.f64[0] = *a3;
  double v5 = -0.0;
  if (*a3 <= 0.0) {
    double v3 = -0.0;
  }
  double v6 = a2[8] + v3;
  float v7 = 1.0;
  if (*a3 <= 0.0) {
    v8.f32[0] = 1.0;
  }
  else {
    v8.f32[0] = -1.0;
  }
  float v9 = v6;
  *(float *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v8.i32[0];
  double v10 = a3[1];
  if (v10 > 0.0) {
    double v5 = a2[11];
  }
  double v11 = a2[9] + v5;
  if (v10 > 0.0) {
    float v7 = -1.0;
  }
  float v12 = v11;
  *(float *)(a1 + 4) = v12;
  *(float *)(a1 + 12) = v7;
  v4.f64[1] = v10;
  float64x2_t v13 = vnegq_f64(v4);
  float v14 = a2[6];
  v8.f32[1] = v7;
  *(float32x2_t *)&v13.f64[0] = vcvt_f32_f64(vmulq_f64(v13, vcvtq_f64_f32(v8)));
  *(int8x8_t *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = vbic_s8(*(int8x8_t *)&v13.f64[0], (int8x8_t)vcltz_f32(*(float32x2_t *)&v13.f64[0]));
  float result = v7 / v14;
  *(float *)(a1 + 8) = v8.f32[0] / v14;
  *(float *)(a1 + 12) = v7 / v14;
  return result;
}

uint64_t *LiFilteredPolygon::makeGeometry(LiEdgeTexture *a1, LiFilteredPolygon_Geometry *a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  float result = (uint64_t *)LiEdgeTexture::getDefaultResolution(a1);
  double v10 = (double)(int)result;
  double v33 = 0.501;
  double v32 = (double)(int)result + -0.501;
  if (a6)
  {
    double v32 = ((double)(int)result + -0.501) / v10;
    double v33 = 0.501 / v10;
  }
  uint64_t v16 = a3;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  memset(v31, 0, sizeof(v31));
  if (*((unsigned char *)a1 + 56))
  {
    if ((int)v11 >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      long long v19 = 0uLL;
      uint64_t v20 = 0;
      HGArray<int,(HGFormat)34>::HGArray((uint64_t)&v18);
    }
  }
  else if ((int)v11 >= 3)
  {
    __int16 v12 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, void *))a2)(a2, v31);
    (**(void (***)(LiFilteredPolygon_Geometry *, void *, uint64_t, double *, double *))a2)(a2, v31, *a3 + 24, &v32, &v32);
    uint64_t v13 = 0;
    uint64_t v14 = v11 - 2;
    uint64_t v15 = 48;
    do
    {
      (**(void (***)(LiFilteredPolygon_Geometry *, void *, uint64_t, double *, double *))a2)(a2, v31, *v16 + v15, &v32, &v32);
      float result = LiFilteredPolygon_Geometry::tri(a2, v12, v12 + (unsigned __int16)v13 + 1, v12 + (unsigned __int16)v13 + 2);
      ++v13;
      v15 += 24;
    }
    while (v14 != v13);
  }
  return result;
}

void sub_1B7ADB7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,PCString a33,uint64_t a34,uint64_t a35,uint64_t a36,HGArrayData *a37)
{
  if (a37) {
    HGArrayData::Release((uint64_t)a37);
  }
  _Unwind_Resume(a1);
}

uint64_t *LiFilteredPolygon_Geometry::tri(LiFilteredPolygon_Geometry *this, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v10 = *((void *)this + 1);
  float32x2_t v8 = (uint64_t *)((char *)this + 8);
  uint64_t v9 = v10;
  if (v10) {
    int v11 = *(_DWORD *)(v9 + 8);
  }
  else {
    int v11 = 0;
  }
  float result = HGArray<short,(HGFormat)3>::resize(v8, v11 + 3);
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(int *)(v13 + 4);
  uint64_t v16 = *((int *)this + 4);
  *(_WORD *)(v14 + (int)v15 * (uint64_t)v11 + v1ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  *(_WORD *)(v14 + v15 + (int)v15 * (uint64_t)v11 + v1ProCore_Impl::PCNSRefImpl::release(this + 6) = a3;
  *(_WORD *)(v14 + v15 * (v11 + 2) + v1ProCore_Impl::PCNSRefImpl::release(this + 6) = a4;
  return result;
}

uint64_t *HGArray<int,(HGFormat)34>::reserve(uint64_t *result, int a2)
{
  if (*result)
  {
    if (*(_DWORD *)(*result + 12) < a2) {
      return (uint64_t *)HGArrayData::allocate(*result, a2);
    }
  }
  else if (a2 > 0)
  {
    HGArrayDataRef::allocate((HGArrayDataRef *)result);
  }
  return result;
}

void LiFilteredPolygon::makeRasterizer(LiFilteredPolygon *this, HGTransform *a2, HGRenderer *a3)
{
  if (-1431655765 * ((*((void *)this + 1) - *(void *)this) >> 3)) {
    LiFilteredPolygon_GeometryGL::LiFilteredPolygon_GeometryGL((LiFilteredPolygon_GeometryGL *)&v4);
  }
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v4, "empty vertex channel");
  PCException::PCException(exception, &v4);
  *(void *)exception = &unk_1F1199218;
}

void sub_1B7ADBC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, PCString a16)
{
}

void make_clockwise(void *a1, char *a2)
{
  int v3 = -1431655765 * ((uint64_t)(a1[1] - *a1) >> 3);
  if (v3 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 - 1;
    uint64_t v6 = 24 * v3;
    uint64_t v7 = 1;
    do
    {
      float32x2_t v8 = (long long *)(*a1 + v4);
      uint64_t v9 = *a1 + v6;
      uint64_t v10 = *((void *)v8 + 2);
      long long v11 = *v8;
      uint64_t v12 = *(void *)(v9 - 8);
      *float32x2_t v8 = *(_OWORD *)(v9 - 24);
      *((void *)v8 + 2) = v12;
      *(_OWORD *)(v9 - 24) = v11;
      *(void *)(v9 - 8) = v10;
      --v5;
      v6 -= 24;
      v4 += 24;
    }
    while (v7++ < v5);
  }
  if (((*((void *)a2 + 1) - *(void *)a2) & 0x3FFFFFFFCLL) != 0)
  {
    memset(&v18, 0, sizeof(v18));
    std::vector<unsigned int>::resize(&v18, v3);
    std::vector<int>::pointer begin = (char *)v18.__begin_;
    if (v3 >= 1)
    {
      int v15 = v3 - 1;
      uint64_t v16 = *(void *)a2;
      uint64_t v17 = 4 * (v3 - 1);
      do
      {
        *(_DWORD *)&begin[4 * (v15 % v3)] = *(_DWORD *)(v16 + v17);
        ++v15;
        v17 -= 4;
      }
      while (v17 != -4);
    }
    if (&v18 != (std::vector<int> *)a2)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, begin, (uint64_t)v18.__end_, ((char *)v18.__end_ - begin) >> 2);
      std::vector<int>::pointer begin = (char *)v18.__begin_;
    }
    if (begin)
    {
      v18.__end_ = (std::vector<int>::pointer)begin;
      operator delete(begin);
    }
  }
}

void sub_1B7ADBE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LiFilteredPolygon_GeometryGL::~LiFilteredPolygon_GeometryGL(LiFilteredPolygon_GeometryGL *this)
{
  *(void *)this = &unk_1F1121F88;
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    HGArrayData::Release(v2);
  }
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    HGArrayData::Release(v3);
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    HGArrayData::Release(v4);
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    HGArrayData::Release(v5);
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    HGArrayData::Release(v6);
  }
  *(void *)this = &unk_1F1121FD0;
  uint64_t v7 = *((void *)this + 1);
  if (v7) {
    HGArrayData::Release(v7);
  }
}

void LiFilteredPolygon::makeEdge(LiFilteredPolygon *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (LiHeEdge *)HGObject::operator new(0x1D0uLL);
  LiHeEdge::LiHeEdge(v4);
  *a2 = (uint64_t)v4;
  {
      LiEdgeTexture::createArray((uint64_t)&LiFilteredPolygon::makeEdge(void)::filter);
  }
  LiHeEdge::setFilter(*a2, (uint64_t)&LiFilteredPolygon::makeEdge(void)::filter);
  signed_area((uint64_t *)this);
  HGArray<PCVector3<float>,(HGFormat)21>::HGArray((uint64_t)&v5);
}

void sub_1B7ADC33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HGArrayData *a11, uint64_t a12, HGArrayData *a13)
{
  if (*v13) {
    (*(void (**)(void))(*(void *)*v13 + 24))(*v13);
  }
  _Unwind_Resume(a1);
}

uint64_t *HGArray<float,(HGFormat)7>::~HGArray(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    HGArrayData::Release(v2);
  }
  return a1;
}

double signed_area(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((int)(-1431655765 * ((a1[1] - *a1) >> 3)) < 1)
  {
    double v5 = 0.0;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = -1431655765 * ((a1[1] - *a1) >> 3);
    uint64_t v4 = (double *)(v1 + 8);
    double v5 = 0.0;
    do
    {
      if (v3 - 1 == v2) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v2 + 1;
      }
      double v7 = *(v4 - 1);
      double v8 = *(double *)(v1 + 24 * v6);
      if (v7 != v8) {
        double v5 = v5 + (v8 - v7) * (*(double *)(v1 + 24 * v6 + 8) + *v4);
      }
      ++v2;
      v4 += 3;
    }
    while (v3 != v2);
  }
  return v5 * 0.5;
}

uint64_t *HGArray<HGVec3f,(HGFormat)21>::resize(uint64_t *result, int a2)
{
  uint64_t v3 = *result;
  if (*result)
  {
    if (*(_DWORD *)(v3 + 12) < a2) {
      float result = (uint64_t *)HGArrayData::allocate(*result, a2);
    }
    *(_DWORD *)(v3 + 8) = a2;
  }
  else if (a2 > 0)
  {
    HGArrayDataRef::allocate((HGArrayDataRef *)result);
  }
  return result;
}

double PCMatrix44Tmpl<double>::toSimdFloat(float64_t *a1)
{
  v1.f64[0] = a1[8];
  v1.f64[1] = a1[12];
  v2.f64[0] = *a1;
  v2.f64[1] = a1[4];
  *(void *)&double result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2), v1).u64[0];
  return result;
}

uint64_t *HGArray<short,(HGFormat)3>::resize(uint64_t *result, int a2)
{
  uint64_t v3 = *result;
  if (*result)
  {
    if (*(_DWORD *)(v3 + 12) < a2) {
      double result = (uint64_t *)HGArrayData::allocate(*result, a2);
    }
    *(_DWORD *)(v3 + 8) = a2;
  }
  else if (a2 > 0)
  {
    HGArrayDataRef::allocate((HGArrayDataRef *)result);
  }
  return result;
}

void LiFilteredPolygon_GeometryGL::LiFilteredPolygon_GeometryGL(LiFilteredPolygon_GeometryGL *this)
{
  *(void *)this = &unk_1F1121FD0;
  HGArray<short,(HGFormat)3>::HGArray((uint64_t)this + 8);
}

void sub_1B7ADC6AC(_Unwind_Exception *exception_object)
{
  double v7 = v4;
  if (*v7) {
    HGArrayData::Release(*v7);
  }
  if (*v6) {
    HGArrayData::Release(*v6);
  }
  if (*v5) {
    HGArrayData::Release(*v5);
  }
  if (*v3) {
    HGArrayData::Release(*v3);
  }
  *float64x2_t v1 = v2;
  uint64_t v9 = v1[1];
  if (v9) {
    HGArrayData::Release(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiFilteredPolygon_GeometryGL::add(uint64_t a1, void *a2, float64x2_t *a3, double *a4, double *a5)
{
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v9 = a1 + 24;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = *(unsigned int *)(v10 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  float32x2_t v13 = vcvt_f32_f64(*a3);
  uint64_t v14 = HGArray<PCVector3<float>,(HGFormat)21>::append(v9);
  *(float32x2_t *)uint64_t v14 = v13;
  *(_DWORD *)(v14 + 8) = 1056964608;
  int v15 = (float *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 40);
  float v16 = *a4;
  float v17 = *a5;
  float *v15 = v16;
  v15[1] = v17;
  *(void *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = *a2;
  *(void *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 72) = a2[1];
  *(void *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 88) = a2[2];
  return v12;
}

uint64_t *LiFilteredPolygon_GeometryGL::reserveImpl(LiFilteredPolygon_GeometryGL *this, int a2)
{
  HGArray<PCVector3<float>,(HGFormat)21>::reserve((uint64_t *)this + 3, a2);
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 5, a2);
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 7, a2);
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 9, a2);

  return HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 11, a2);
}

void HGArray<short,(HGFormat)3>::HGArray(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 3;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1);
}

void sub_1B7ADC884(_Unwind_Exception *exception_object)
{
  if (*v1) {
    HGArrayData::Release(*v1);
  }
  _Unwind_Resume(exception_object);
}

void HGArray<PCVector3<float>,(HGFormat)21>::HGArray(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 21;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1);
}

void sub_1B7ADC8DC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    HGArrayData::Release(*v1);
  }
  _Unwind_Resume(exception_object);
}

void HGArray<PCVector2<float>,(HGFormat)13>::HGArray(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 13;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1);
}

void sub_1B7ADC934(_Unwind_Exception *exception_object)
{
  if (*v1) {
    HGArrayData::Release(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HGArray<PCVector2<float>,(HGFormat)13>::append(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    int v3 = *(_DWORD *)(v2 + 8);
    int v4 = v3 + 1;
    if (v3 < *(_DWORD *)(v2 + 12)) {
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 1;
  }
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)a1, 2 * v4);
LABEL_6:
  HGArray<PCVector2<float>,(HGFormat)13>::resize((uint64_t *)a1, v4);
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 && (uint64_t v6 = *(void *)(v5 + 16)) != 0) {
    return v6 + *(int *)(v5 + 4) * (uint64_t)v3 + *(int *)(a1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t HGArray<PCVector3<float>,(HGFormat)21>::append(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    int v3 = *(_DWORD *)(v2 + 8);
    int v4 = v3 + 1;
    if (v3 < *(_DWORD *)(v2 + 12)) {
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 1;
  }
  HGArray<PCVector3<float>,(HGFormat)21>::reserve((uint64_t *)a1, 2 * v4);
LABEL_6:
  HGArray<HGVec3f,(HGFormat)21>::resize((uint64_t *)a1, v4);
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 && (uint64_t v6 = *(void *)(v5 + 16)) != 0) {
    return v6 + *(int *)(v5 + 4) * (uint64_t)v3 + *(int *)(a1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t *HGArray<PCVector3<float>,(HGFormat)21>::reserve(uint64_t *result, int a2)
{
  if (*result)
  {
    if (*(_DWORD *)(*result + 12) < a2) {
      return (uint64_t *)HGArrayData::allocate(*result, a2);
    }
  }
  else if (a2 > 0)
  {
    HGArrayDataRef::allocate((HGArrayDataRef *)result);
  }
  return result;
}

uint64_t *HGArray<PCVector2<float>,(HGFormat)13>::reserve(uint64_t *result, int a2)
{
  if (*result)
  {
    if (*(_DWORD *)(*result + 12) < a2) {
      return (uint64_t *)HGArrayData::allocate(*result, a2);
    }
  }
  else if (a2 > 0)
  {
    HGArrayDataRef::allocate((HGArrayDataRef *)result);
  }
  return result;
}

uint64_t *HGArray<PCVector2<float>,(HGFormat)13>::resize(uint64_t *result, int a2)
{
  uint64_t v3 = *result;
  if (*result)
  {
    if (*(_DWORD *)(v3 + 12) < a2) {
      double result = (uint64_t *)HGArrayData::allocate(*result, a2);
    }
    *(_DWORD *)(v3 + 8) = a2;
  }
  else if (a2 > 0)
  {
    HGArrayDataRef::allocate((HGArrayDataRef *)result);
  }
  return result;
}

char *std::vector<PCVector3<double>>::__init_with_size[abi:ne180100]<PCVector3<double>*,PCVector3<double>*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
      *(void *)(v7 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a2 + 16);
      v7 += 24;
      a2 += 24;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B7ADCBB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void HGArray<int,(HGFormat)34>::HGArray(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 34;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1);
}

void sub_1B7ADCCBC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    HGArrayData::Release(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiHeEdgeNode::BindTexture(LiHeEdgeNode *this, HGHandler *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, 1, 1);
  }
  else if (!a3)
  {
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
  }
  return 0;
}

void LiHeEdgeNode::~LiHeEdgeNode(LiHeEdgeNode *this)
{
  LiHeEdgeNodeFragment::~LiHeEdgeNodeFragment(this);

  HGObject::operator delete(v1);
}

void LiSceneObject::LiSceneObject(LiSceneObject *this, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  *(void *)this = v3;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[2];
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  *((void *)this + 11) = 0x3FF0000000000000;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 32) = 0x3FF0000000000000;
  *((void *)this + 27) = 0x3FF0000000000000;
  *((void *)this + 22) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((unsigned char *)this + 264) = 0;
  *((void *)this + 49) = 0x3FF0000000000000;
  *((void *)this + 44) = 0x3FF0000000000000;
  *((void *)this + 39) = 0x3FF0000000000000;
  *((void *)this + 34) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 28std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 29ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 36std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 37ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((unsigned char *)this + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((unsigned char *)this + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_DWORD *)this + 121) = 0;
  *((void *)this + 61) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((unsigned char *)this + 424) = 0;
  *((unsigned char *)this + 448) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((unsigned char *)this + 472) = 0;
  *(_OWORD *)((char *)this + 45ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 62);
  *((unsigned char *)this + 504) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = atomic_fetch_add(serial_compositeOrder, 1u) + 1;
  *(void *)((char *)this + 532) = 0;
  *((_WORD *)this + 27std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 68) = 0x3FF0000000000000;
  *((_DWORD *)this + 138) = 257;
  *((unsigned char *)this + 55ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((_DWORD *)this + 14std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((unsigned char *)this + 564) = 0;
}

void LiSceneObject::~LiSceneObject(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  uint64_t v3 = *a2;
  this->int var0 = *a2;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((void *)v3 - 3)) = a2[3];
  LiString::dec((LiString *)&this[64]);
  PCSharedCount::~PCSharedCount(this + 62);
}

uint64_t LiSceneObject::setTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 8;
  if (result + 8 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v2 + j) = *(void *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  return result;
}

uint64_t LiSceneObject::setPlacementTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 136;
  if (result + 136 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v2 + j) = *(void *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  *(unsigned char *)(result + 264) = 1;
  return result;
}

uint64_t LiSceneObject::setPlacementBoundsTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 272;
  if (result + 272 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v2 + j) = *(void *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  *(unsigned char *)(result + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  return result;
}

__n128 LiSceneObject::setPlacementJitterX(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 408) = *a2;
  *(unsigned char *)(a1 + 424) = 1;
  return result;
}

__n128 LiSceneObject::setPlacementJitterY(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[27] = *a2;
  a1[28].n128_u8[0] = 1;
  return result;
}

__n128 LiSceneObject::setPlacementJitterZ(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 45ProCore_Impl::PCNSRefImpl::release(this + 6) = *a2;
  *(unsigned char *)(a1 + 472) = 1;
  return result;
}

uint64_t LiSceneObject::setIndex(uint64_t this, int a2)
{
  *(_DWORD *)(this + 47ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  *(unsigned char *)(this + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  return this;
}

uint64_t LiSceneObject::index(LiSceneObject *this)
{
  return (uint64_t)this + 476;
}

double *LiSceneObject::boundingBox(uint64_t a1, double *a2, double *a3)
{
  long long v20 = xmmword_1B7E736F0;
  long long v21 = xmmword_1B7E736F0;
  long long v19 = xmmword_1B7E736F0;
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 72))(a1, &v19);
  int v5 = 0;
  double v6 = -1.0;
  double v7 = 1.0;
  double v8 = 1.0;
  double v9 = -1.0;
  double v10 = 1.0;
  double v11 = -1.0;
  do
  {
    uint64_t v12 = (long long *)((char *)&v19 + 8);
    if (v5) {
      uint64_t v12 = &v19;
    }
    double v13 = *(double *)v12;
    uint64_t v14 = (long long *)((char *)&v20 + 8);
    if ((v5 & 2) != 0) {
      uint64_t v14 = &v20;
    }
    double v15 = *(double *)v14;
    float v16 = (long long *)((char *)&v21 + 8);
    if ((v5 & 4) != 0) {
      float v16 = &v21;
    }
    double v17 = *(double *)v16;
    double v22 = v13;
    double v23 = v15;
    double v24 = v17;
    __n128 result = PCMatrix44Tmpl<double>::transform<double>(a3, &v22, &v22);
    if (v5)
    {
      if (v7 >= v22) {
        double v7 = v22;
      }
      if (v6 <= v22) {
        double v6 = v22;
      }
      if (v8 >= v23) {
        double v8 = v23;
      }
      if (v9 <= v23) {
        double v9 = v23;
      }
      if (v10 >= v24) {
        double v10 = v24;
      }
      if (v11 <= v24) {
        double v11 = v24;
      }
    }
    else
    {
      double v9 = v23;
      double v11 = v24;
      double v6 = v22;
      double v7 = v22;
      double v8 = v23;
      double v10 = v24;
    }
    ++v5;
  }
  while (v5 != 8);
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  return result;
}

uint64_t LiSceneObject::blendMode(LiSceneObject *this)
{
  return *((unsigned int *)this + 121);
}

void LiSceneObject::blendOptions(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->int var0 = this[61].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 62);
}

void LiSceneObject::setBlendMode(uint64_t a1, int a2, PCSharedCount *a3)
{
  *(_DWORD *)(a1 + 484) = a2;
  *(PCSharedCount *)(a1 + 488) = (PCSharedCount)a3->var0;
  uint64_t v3 = (uint64_t *)(a1 + 496);
  PCSharedCount::PCSharedCount(&v4, a3 + 1);
  PCSharedCount::operator=(v3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B7ADD3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

uint64_t LiSceneObject::preserveOpacity(LiSceneObject *this)
{
  return *((unsigned __int8 *)this + 504);
}

uint64_t LiSceneObject::setPreserveOpacity(uint64_t this, char a2)
{
  *(unsigned char *)(this + 504) = a2;
  return this;
}

uint64_t LiSceneObject::findBounds(BOOL a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v20 = 0x3FF0000000000000;
  uint64_t v17 = 0x3FF0000000000000;
  uint64_t v14 = 0x3FF0000000000000;
  uint64_t v11 = 0x3FF0000000000000;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 24;
    do
    {
      if (v7 >= *(int *)(a2 + 12)) {
        PCArray_base::badIndex((PCArray_base *)a1);
      }
      a1 = PCVector3<double>::normalize((double *)(*(void *)(a2 + 16) + v8), 0.000000100000001);
      ++v7;
      v8 += 48;
    }
    while (v6 != v7);
  }
  unsigned __int8 v10 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, unsigned __int8 *, uint64_t))(*(void *)v5 + 128))(v5, a2, &v11, &v10, a3);
  return v10;
}

double *LiSceneObject::widenBounds(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, char a5)
{
  long long v34 = xmmword_1B7E736F0;
  long long v35 = xmmword_1B7E736F0;
  long long v33 = xmmword_1B7E736F0;
  __n128 result = (double *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 72))(a1, &v33);
  if (*(double *)&v33 <= *((double *)&v33 + 1)
    && *(double *)&v34 <= *((double *)&v34 + 1)
    && *(double *)&v35 <= *((double *)&v35 + 1)
    && ((a5 & 1) != 0
     || sqrt((*((double *)&v33 + 1) - *(double *)&v33) * (*((double *)&v33 + 1) - *(double *)&v33)+ (*((double *)&v34 + 1) - *(double *)&v34) * (*((double *)&v34 + 1) - *(double *)&v34)+ (*((double *)&v35 + 1) - *(double *)&v35) * (*((double *)&v35 + 1) - *(double *)&v35)) != 0.0))
  {
    PCMatrix44Tmpl<double>::operator*(a3, (long long *)(a1 + 8), (uint64_t)v32);
    int v11 = 0;
    uint64_t v12 = *(unsigned int *)(a2 + 12);
    do
    {
      long long v13 = (long long *)((char *)&v33 + 8);
      if (v11) {
        long long v13 = &v33;
      }
      double v14 = *(double *)v13;
      long long v15 = &v34;
      if ((v11 & 2) == 0) {
        long long v15 = (long long *)((char *)&v34 + 8);
      }
      double v16 = *(double *)v15;
      uint64_t v17 = &v35;
      if ((v11 & 4) == 0) {
        uint64_t v17 = (long long *)((char *)&v35 + 8);
      }
      double v18 = *(double *)v17;
      double v29 = v14;
      double v30 = v16;
      double v31 = v18;
      __n128 result = PCMatrix44Tmpl<double>::transform<double>(v32, &v29, &v29);
      if ((int)v12 >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 24;
        do
        {
          if (v19 >= *(int *)(a2 + 12)) {
            PCArray_base::badIndex((PCArray_base *)result);
          }
          long long v21 = (double *)(*(void *)(a2 + 16) + v20);
          double v23 = *(v21 - 3);
          double v22 = *(v21 - 2);
          double v24 = *(v21 - 1);
          double v25 = v21[1];
          double v26 = v21[2];
          double v27 = (v29 - v23) * *v21 + (v30 - v22) * v25 + (v31 - v24) * v26;
          if (v27 < 0.0 || *a4 == 0)
          {
            *(v21 - 3) = v23 + *v21 * v27;
            *(v21 - 2) = v22 + v25 * v27;
            *(v21 - 1) = v24 + v26 * v27;
          }
          ++v19;
          v20 += 48;
        }
        while (v12 != v19);
      }
      *a4 = 1;
      ++v11;
    }
    while (v11 != 8);
  }
  return result;
}

uint64_t LiSceneObject::print(uint64_t a1, void *a2, uint64_t a3)
{
  LiImageSource::printIndent(a2, a3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LiSceneObject(\"", 15);
  if (*(void *)(a1 + 512)) {
    uint64_t v7 = *(const char **)(a1 + 512);
  }
  else {
    uint64_t v7 = "";
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\", compositeOrder=", 18);
  std::ostream::operator<<();
  if (*(_DWORD *)(a1 + 532) || *(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
    if (*(unsigned char *)(a1 + 540)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(r)", 3);
    }
  }
  if (*(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
  }
  if (!*(unsigned char *)(a1 + 552)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", doesReflect=false", 19);
  }
  if (!*(unsigned char *)(a1 + 553)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", visibleOutsideReflection=false", 32);
  }
  if (*(double *)(a1 + 544) != 1.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", opacity=", 10);
    std::ostream::operator<<();
  }
  double v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  unsigned __int8 v10 = std::locale::use_facet(&v13, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  int v11 = *(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 120);

  return v11(a1, a2, a3);
}

void sub_1B7ADD968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void LiSceneObject::printTransform(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a1 + 8;
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)(a1 + 8)))
  {
    PCMatrix44Tmpl<double>::print(v5, a2, a3 + 2);
  }
}

void ShadowMap::ShadowMap(ShadowMap *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 13) = 0x3FF0000000000000;
  *((void *)this + 8) = 0x3FF0000000000000;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0x3FF0000000000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 29) = 0x3FF0000000000000;
  *((void *)this + 24) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 9) = _Q0;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 21ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((void *)this + 5std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 45) = 0x3FF0000000000000;
  *((void *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 17) = _Q0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((void *)this + 55) = 0xBFF0000000000000;
  *((void *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0xBFF0000000000000;
  LiPolygon::LiPolygon((ShadowMap *)((char *)this + 456));
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = _Q0;
  *((unsigned char *)this + 592) = 0;
}

void sub_1B7ADDA98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL ShadowMap::operator*=(uint64_t a1, uint64_t a2)
{
  BOOL result = PCMatrix44Tmpl<double>::isIdentity((double *)a2);
  if (!result)
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    v19[4] = *(_OWORD *)(a2 + 64);
    v19[5] = v5;
    long long v6 = *(_OWORD *)(a2 + 112);
    v19[6] = *(_OWORD *)(a2 + 96);
    v19[7] = v6;
    long long v7 = *(_OWORD *)(a2 + 16);
    v19[0] = *(_OWORD *)a2;
    v19[1] = v7;
    long long v8 = *(_OWORD *)(a2 + 48);
    v19[2] = *(_OWORD *)(a2 + 32);
    v19[3] = v8;
    PCMatrix44Tmpl<double>::invert((double *)v19, (double *)v19, 0.0);
    PCMatrix44Tmpl<double>::operator*(a2, (long long *)(a1 + 24), (uint64_t)v18);
    if (v18 != (unsigned char *)(a1 + 24))
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        unsigned __int8 v10 = (_OWORD *)(a1 + 24 + i);
        long long v11 = *(_OWORD *)&v18[i + 16];
        _OWORD *v10 = *(_OWORD *)&v18[i];
        v10[1] = v11;
      }
    }
    PCMatrix44Tmpl<double>::operator*(a1 + 152, v19, (uint64_t)v18);
    if (v18 != (unsigned char *)(a1 + 152))
    {
      for (uint64_t j = 0; j != 128; j += 32)
      {
        std::locale v13 = (_OWORD *)(a1 + 152 + j);
        long long v14 = *(_OWORD *)&v18[j + 16];
        _OWORD *v13 = *(_OWORD *)&v18[j];
        v13[1] = v14;
      }
    }
    PCMatrix44Tmpl<double>::operator*(a1 + 280, v19, (uint64_t)v18);
    if (v18 != (unsigned char *)(a1 + 280))
    {
      for (uint64_t k = 0; k != 128; k += 32)
      {
        double v16 = (_OWORD *)(a1 + 280 + k);
        long long v17 = *(_OWORD *)&v18[k + 16];
        *double v16 = *(_OWORD *)&v18[k];
        v16[1] = v17;
      }
    }
    return transformPlane<double>((_OWORD *)a2, (double *)(a1 + 472), a1 + 472);
  }
  return result;
}

void ShadowCubeMap::ShadowCubeMap(ShadowCubeMap *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F1122298;
  v6[1] = 0;
  double v6[2] = 0;
  v6[0] = &unk_1F11222E8;
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize((uint64_t)this, 1, 3);
  uint64_t v2 = *((void *)this + 2) + 24 * *((int *)this + 3);
  uint64_t v3 = v2 - 24;
  int v4 = *(_DWORD *)(v2 - 16);
  if (v4 >= 0) {
    int v5 = v4;
  }
  else {
    int v5 = 1;
  }
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(v3, 0, v5);
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray((uint64_t)v6);
}

void sub_1B7ADDD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray((uint64_t)va);
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::~PCArray(v2);
  _Unwind_Resume(a1);
}

uint64_t PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1122358;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void ShadowCubeMap::~ShadowCubeMap(ShadowCubeMap *this)
{
  *(void *)this = &unk_1F1122358;
  if (*((int *)this + 2) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *((_DWORD *)this + 2);
  }
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize((uint64_t)this, 0, v2);
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

{
  uint64_t vars8;

  ShadowCubeMap::~ShadowCubeMap(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ShadowCubeMap::operator*=(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 >= 1)
  {
    uint64_t v4 = result;
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v6 = *(void *)(v4 + 16) + 24 * i;
      if (*(int *)(v6 + 12) >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        do
        {
          BOOL result = ShadowMap::operator*=(*(void *)(v6 + 16) + v7, a2);
          ++v8;
          v7 += 600;
        }
        while (v8 < *(int *)(v6 + 12));
        int v2 = *(_DWORD *)(v4 + 12);
      }
    }
  }
  return result;
}

void ShadowMapsLazy::~ShadowMapsLazy(ShadowMapsLazy *this)
{
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray((uint64_t)this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1122338;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1122338;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ShadowMap::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4 != v5)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      uint64_t v5 = *(void *)(a2 + 16);
    }
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v5;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a1 + 24;
    uint64_t v8 = a2 + 24;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v7 + i) = *(void *)(v8 + i);
      ++v6;
      v7 += 32;
      v8 += 32;
    }
    while (v6 != 4);
    if (a2 != a1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 152;
      uint64_t v12 = a2 + 152;
      do
      {
        for (uint64_t j = 0; j != 32; j += 8)
          *(void *)(v11 + j) = *(void *)(v12 + j);
        ++v10;
        v11 += 32;
        v12 += 32;
      }
      while (v10 != 4);
      if (a2 != a1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = a1 + 280;
        uint64_t v16 = a2 + 280;
        do
        {
          for (uint64_t k = 0; k != 32; k += 8)
            *(void *)(v15 + k) = *(void *)(v16 + k);
          ++v14;
          v15 += 32;
          v16 += 32;
        }
        while (v14 != 4);
      }
    }
  }
  long long v18 = *(_OWORD *)(a2 + 408);
  long long v19 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v19;
  *(_OWORD *)(a1 + 408) = v18;
  LiPolygon::operator=(a1 + 456, a2 + 456);
  char v20 = *(unsigned char *)(a2 + 592);
  long long v21 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 56std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 57ProCore_Impl::PCNSRefImpl::release(this + 6) = v21;
  *(unsigned char *)(a1 + 592) = v20;
  return a1;
}

void PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(uint64_t a1, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v19, "PCArray::resize");
    PCException::PCException(exception, &v19);
    *(void *)exception = &unk_1F1199218;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    int v6 = *(_DWORD *)(a1 + 12);
    if (a2 >= v6)
    {
      if (a2 > v6)
      {
        uint64_t v9 = 600 * v6;
        int v10 = a2 - v6;
        do
        {
          ShadowMap::ShadowMap((ShadowMap *)(*(void *)(a1 + 16) + v9));
          v9 += 600;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      uint64_t v7 = a2;
      uint64_t v8 = 600 * a2;
      do
      {
        ShadowMap::~ShadowMap((ShadowMap *)(*(void *)(a1 + 16) + v8));
        ++v7;
        v8 += 600;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    int v11 = *(_DWORD *)(a1 + 12);
    if (a2 >= v11) {
      int v12 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v12 = a2;
    }
    if (v12 < 1)
    {
      int v12 = 0;
    }
    else
    {
      std::locale v13 = 0;
      do
      {
        ShadowMap::ShadowMap(v13, (ShadowMap *)((char *)v13 + *(void *)(a1 + 16)));
        ShadowMap::~ShadowMap((ShadowMap *)((char *)v13 + *(void *)(a1 + 16)));
        std::locale v13 = (ShadowMap *)((char *)v13 + 600);
      }
      while ((ShadowMap *)(600 * v12) != v13);
      int v11 = *(_DWORD *)(a1 + 12);
    }
    if (v12 < v11)
    {
      uint64_t v14 = 600 * v12;
      do
      {
        ShadowMap::~ShadowMap((ShadowMap *)(*(void *)(a1 + 16) + v14));
        v14 += 600;
        ++v12;
      }
      while (*(_DWORD *)(a1 + 12) > v12);
    }
    if (v12 < a2)
    {
      uint64_t v15 = (ShadowMap *)(600 * v12);
      do
      {
        ShadowMap::ShadowMap(v15);
        uint64_t v15 = (ShadowMap *)(v16 + 600);
        ++v12;
      }
      while (v12 < a2);
    }
    uint64_t v17 = *(void *)(a1 + 16);
    if (v17) {
      MEMORY[0x1BA9BFB70](v17, 0x1000C8077774924);
    }
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B7ADE428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void ShadowMap::ShadowMap(ShadowMap *this, const ShadowMap *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  uint64_t v4 = *((void *)a2 + 2);
  *((void *)this + 2) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  memcpy((char *)this + 24, (char *)a2 + 24, 0x1B0uLL);
  LiPolygon::LiPolygon((ShadowMap *)((char *)this + 456), (const ShadowMap *)((char *)a2 + 456));
  long long v5 = *((_OWORD *)a2 + 35);
  long long v6 = *((_OWORD *)a2 + 36);
  *((unsigned char *)this + 592) = *((unsigned char *)a2 + 592);
  *((_OWORD *)this + 35) = v5;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = v6;
}

void sub_1B7ADE4E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  _Unwind_Resume(exception_object);
}

void ShadowMap::~ShadowMap(ShadowMap *this)
{
  LiPolygon::~LiPolygon((ShadowMap *)((char *)this + 456));
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
}

void PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1122358;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(uint64_t result, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v25, "PCArray::resize");
    PCException::PCException(exception, &v25);
    *(void *)exception = &unk_1F1199218;
  }
  uint64_t v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    uint64_t v6 = *(int *)(result + 12);
    if ((int)v6 <= a2)
    {
      if ((int)v6 < a2)
      {
        uint64_t v9 = 24 * v6;
        uint64_t v10 = a2 - v6;
        do
        {
          int v11 = (void *)(*(void *)(result + 16) + v9);
          v11[1] = 0;
          v11[2] = 0;
          void *v11 = &unk_1F11222E8;
          v9 += 24;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      uint64_t v7 = a2;
      uint64_t v8 = 24 * a2;
      do
      {
        BOOL result = (**(uint64_t (***)(uint64_t))(*(void *)(v5 + 16) + v8))(*(void *)(v5 + 16) + v8);
        ++v7;
        v8 += 24;
      }
      while (v7 < *(int *)(v5 + 12));
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    int v12 = *(_DWORD *)(result + 12);
    if (a2 >= v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = a2;
    }
    if ((int)v13 < 1)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v15 = 24 * i;
        uint64_t v16 = *(void *)(v5 + 16) + 24 * i;
        *(void *)(v15 + 8) = 0;
        *(void *)(v15 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
        *(void *)uint64_t v15 = &unk_1F1122338;
        int v17 = *(_DWORD *)(v16 + 12);
        if (v17 <= 0) {
          int v18 = 0;
        }
        else {
          int v18 = (2 * v17) | 1;
        }
        PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(24 * i, v17, v18);
        if (*(int *)(v16 + 12) >= 1)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          do
          {
            ShadowMap::operator=(*(void *)(24 * i + 0x10) + v19, *(void *)(v16 + 16) + v19);
            ++v20;
            v19 += 600;
          }
          while (v20 < *(int *)(v16 + 12));
        }
        *(void *)uint64_t v15 = &unk_1F11222E8;
        (**(void (***)(uint64_t))(*(void *)(v5 + 16) + 24 * i))(*(void *)(v5 + 16) + 24 * i);
      }
      int v12 = *(_DWORD *)(v5 + 12);
      int v3 = 0;
    }
    if ((int)v13 < v12)
    {
      uint64_t v21 = 24 * v13;
      do
      {
        (**(void (***)(uint64_t))(*(void *)(v5 + 16) + v21))(*(void *)(v5 + 16) + v21);
        v21 += 24;
        LODWORD(v13) = v13 + 1;
      }
      while (*(_DWORD *)(v5 + 12) > (int)v13);
    }
    if ((int)v13 < a2)
    {
      uint64_t v22 = 24 * v13;
      double v23 = (void *)(v22 + 8);
      do
      {
        *double v23 = 0;
        v23[1] = 0;
        *(v23 - 1) = &unk_1F11222E8;
        v23 += 3;
        v22 += 24;
        LODWORD(v13) = v13 + 1;
      }
      while ((int)v13 < a2);
    }
    BOOL result = *(void *)(v5 + 16);
    if (result) {
      BOOL result = MEMORY[0x1BA9BFB70](result, 0x1000C8077774924);
    }
    *(void *)(v5 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B7ADE998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

BOOL liDebug(const char *a1)
{
  {
    uint64_t v20 = getenv("LITHIUM_DEBUG");
    LiString::LiString((LiString *)&v25, v20);
    LiString::trim((LiString *)&v25, (LiString *)&liDebug(char const*)::dbg);
    if (v25 && atomic_fetch_add(v25 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)PCString v25 = 0;
      if (v25) {
        uint64_t v21 = (char *)(v25 - 3);
      }
      else {
        uint64_t v21 = 0;
      }
      free(v21);
    }
    __cxa_atexit((void (*)(void *))LiString::~LiString, &liDebug(char const*)::dbg, &dword_1B73F3000);
  }
  PCString v25 = (atomic_uint *)liDebug(char const*)::dbg;
  if (liDebug(char const*)::dbg) {
    atomic_fetch_add((atomic_uint *volatile)(liDebug(char const*)::dbg - 12), 1u);
  }
  LiString::LiString((LiString *)&v23, a1);
  LiString::trim((LiString *)&v23, (LiString *)&v24);
  if (v23 && atomic_fetch_add(v23 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)double v23 = 0;
    if (v23) {
      int v2 = (char *)(v23 - 3);
    }
    else {
      int v2 = 0;
    }
    free(v2);
  }
  for (uint64_t i = v25; v25; uint64_t i = v25)
  {
    uint64_t v4 = *(i - 2);
    if ((int)v4 < 1) {
      break;
    }
    uint64_t v5 = 0;
    while (*((unsigned char *)i + v5) != 44)
    {
      if (v4 == ++v5) {
        goto LABEL_48;
      }
    }
    if (v5 == -1) {
      break;
    }
    LiString::to((const char **)&v25, v5 - 1, (LiString *)&v22);
    LiString::trim((LiString *)&v22, (LiString *)&v23);
    BOOL v6 = LiString::operator==((const char **)&v23, (const char **)&v24);
    if (v23 && atomic_fetch_add(v23 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)double v23 = 0;
      if (v23) {
        uint64_t v7 = (char *)(v23 - 3);
      }
      else {
        uint64_t v7 = 0;
      }
      free(v7);
      double v23 = 0;
    }
    if (v22 && atomic_fetch_add(v22 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)uint64_t v22 = 0;
      if (v22) {
        uint64_t v8 = v22 - 3;
      }
      else {
        uint64_t v8 = 0;
      }
      free(v8);
    }
    if (v6)
    {
      BOOL v15 = 1;
      goto LABEL_54;
    }
    uint64_t v9 = v25;
    if (!v25)
    {
      PCString v25 = 0;
      break;
    }
    int v10 = *(v25 - 2);
    if (v10 <= (int)v5 + 1 || (int v11 = ~v5 + v10, v11 < 1))
    {
      uint64_t v13 = 0;
    }
    else
    {
      int v12 = (unsigned int *)malloc_type_malloc((~v5 + v10) + 13, 0x8903763CuLL);
      v12[1] = v11;
      v12[2] = v10 - v5;
      atomic_store(1u, v12);
      uint64_t v13 = (const char *)(v12 + 3);
      memcpy(v12 + 3, (char *)v9 + v5 + 1, v11);
      v13[v11] = 0;
      uint64_t v9 = v25;
      if (!v25)
      {
        PCString v25 = (atomic_uint *)v13;
        goto LABEL_42;
      }
    }
    if (atomic_fetch_add(v9 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)PCString v25 = 0;
      if (v25) {
        uint64_t v14 = (char *)(v25 - 3);
      }
      else {
        uint64_t v14 = 0;
      }
      free(v14);
    }
    PCString v25 = (atomic_uint *)v13;
    if (!v13) {
      break;
    }
LABEL_42:
    atomic_fetch_add((atomic_uint *volatile)v13 - 3, 1u);
    if (atomic_fetch_add((atomic_uint *volatile)v13 - 3, 0xFFFFFFFF) == 1)
    {
      const char *v13 = 0;
      free((void *)(v13 - 12));
    }
  }
LABEL_48:
  LiString::trim((LiString *)&v25, (LiString *)&v23);
  BOOL v15 = LiString::operator==((const char **)&v23, (const char **)&v24);
  if (v23 && atomic_fetch_add(v23 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)double v23 = 0;
    if (v23) {
      uint64_t v16 = (char *)(v23 - 3);
    }
    else {
      uint64_t v16 = 0;
    }
    free(v16);
  }
LABEL_54:
  if (v24 && atomic_fetch_add(v24 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)double v24 = 0;
    if (v24) {
      int v17 = (char *)(v24 - 3);
    }
    else {
      int v17 = 0;
    }
    free(v17);
  }
  if (v25 && atomic_fetch_add(v25 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)PCString v25 = 0;
    if (v25) {
      int v18 = (char *)(v25 - 3);
    }
    else {
      int v18 = 0;
    }
    free(v18);
  }
  return v15;
}

void sub_1B7ADEDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12)
{
  if (a12)
  {
    if (atomic_fetch_add(a12 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a12 = 0;
      free(a12 - 3);
    }
  }
  _Unwind_Resume(a1);
}

void LiString::trim(LiString *this@<X0>, LiString *a2@<X8>)
{
  LiString::ltrim(this, (LiString *)&v4);
  LiString::rtrim((const char **)&v4, a2);
  if (v4 && atomic_fetch_add(v4 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v4 = 0;
    if (v4) {
      int v3 = (char *)(v4 - 3);
    }
    else {
      int v3 = 0;
    }
    free(v3);
  }
}

void sub_1B7ADEFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    LiGeode::print(a10, (unsigned char **)&a10);
  }
  _Unwind_Resume(exception_object);
}

void LiString::~LiString(LiString *this)
{
}

void LiString::format(LiString *this@<X0>, LiString *a2@<X8>, ...)
{
  va_start(va, a2);
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  vsnprintf(__str, 0x800uLL, (const char *)this, va);
  LiString::LiString(a2, __str);
}

void LiString::format(LiString *this@<X0>, LiString *a2@<X8>)
{
}

void LiString::format(double a1@<D0>, LiString *a2@<X8>)
{
}

uint64_t LiString::contains(char **this, const char **a2)
{
  int v2 = *this;
  if (!*this) {
    return 0;
  }
  int v3 = *a2;
  if (!v3) {
    return 1;
  }
  uint64_t result = (uint64_t)strstr(*this, v3);
  if (result) {
    return result - v2 != -1;
  }
  return result;
}

void LiString::ltrim(LiString *this@<X0>, LiString *a2@<X8>)
{
  if (*(void *)this)
  {
    uint64_t v4 = *(unsigned int *)(*(void *)this - 8);
    if ((int)v4 < 1)
    {
      LODWORD(v5) = 0;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = MEMORY[0x1E4F14390];
      do
      {
        unsigned int v7 = *(char *)(*(void *)this + v5);
        if ((v7 & 0x80000000) != 0)
        {
          if (!__maskrune(v7, 0x4000uLL)) {
            goto LABEL_12;
          }
        }
        else if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) == 0)
        {
          goto LABEL_12;
        }
        ++v5;
      }
      while (v4 != v5);
      LODWORD(v5) = v4;
    }
LABEL_12:
    LiString::from(this, v5, a2);
  }
  else
  {
    *(void *)a2 = 0;
  }
}

void LiString::rtrim(const char **this@<X0>, LiString *a2@<X8>)
{
  if (*this)
  {
    int v4 = *((_DWORD *)*this - 2);
    uint64_t v5 = MEMORY[0x1E4F14390];
    while (1)
    {
      int v6 = v4;
      if (v4 < 1) {
        break;
      }
      --v4;
      unsigned int v7 = (*this)[v6 - 1];
      if ((v7 & 0x80000000) != 0)
      {
        if (!__maskrune(v7, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    LiString::to(this, v6 - 1, a2);
  }
  else
  {
    *(void *)a2 = 0;
  }
}

void LiString::to(const char **this@<X0>, int a2@<W1>, LiString *a3@<X8>)
{
  int v4 = *this;
  if (!*this)
  {
LABEL_5:
    *(void *)a3 = 0;
    return;
  }
  if (*((_DWORD *)v4 - 2) > a2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      LiString::LiString(a3, v4, a2 + 1);
      return;
    }
    goto LABEL_5;
  }
  *(void *)a3 = v4;
  atomic_fetch_add((atomic_uint *volatile)v4 - 3, 1u);
}

void DiffuseMaterialLayer::setBlendMode(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 32) != a2)
  {
    *(_DWORD *)(a1 + 32) = a2;
    switch(a2)
    {
      case 0:
        int v2 = (void *)(a1 + 40);
        PCPtr<LiImageSource>::reset(v2);
        break;
      case 1:
        operator new();
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      case 7:
        operator new();
      case 8:
        operator new();
      default:
        return;
    }
  }
}

void DiffuseMaterialLayer::ReplaceDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7ADF974(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  *(void *)(v2 - 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 56));
  _Unwind_Resume(a1);
}

void DiffuseMaterialLayer::OverDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7ADFE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCSharedCount a17, void *a18, uint64_t a19, uint64_t a20,PCSharedCount a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,PCSharedCount a29,void *a30,uint64_t a31,uint64_t a32,PCSharedCount a33,void *a34)
{
  a34 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v35 + 3);
  a30 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a33);
  a26 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a29);
  a18 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a21);
  PCSharedCount::~PCSharedCount(v39);
  PCSharedCount::~PCSharedCount(&a17);
  PCSharedCount::~PCSharedCount(v38);
  *(void *)(v40 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v36;
  PCSharedCount::~PCSharedCount(v37);
  *(void *)(v40 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = a9;
  PCSharedCount::~PCSharedCount(v34);
  *(void *)(v40 - 168) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v40 - 144));
  _Unwind_Resume(a1);
}

void DiffuseMaterialLayer::AddDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7AE0604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,PCSharedCount a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,PCSharedCount a39,void *a40)
{
  a40 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v42 + 3);
  PCSharedCount::~PCSharedCount(&a27);
  PCSharedCount::~PCSharedCount(v41);
  PCSharedCount::~PCSharedCount(v40);
  a36 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a39);
  a28 = a9;
  PCSharedCount::~PCSharedCount(v43);
  a32 = a11;
  PCSharedCount::~PCSharedCount(a10);
  *(void *)(v44 - 248) = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v44 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a15;
  PCSharedCount::~PCSharedCount(a14);
  *(void *)(v44 - 184) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v44 - 160));
  _Unwind_Resume(a1);
}

void sub_1B7AE072C()
{
}

void sub_1B7AE0738()
{
}

void sub_1B7AE0740()
{
}

void sub_1B7AE074C()
{
}

void sub_1B7AE0754()
{
}

void sub_1B7AE075C()
{
}

void sub_1B7AE0768()
{
}

void sub_1B7AE0770()
{
}

void sub_1B7AE077C()
{
}

void sub_1B7AE0784(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  *(void *)(v41 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v40);
  *(void *)(v41 - 152) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v41 - 128));
  JUMPOUT(0x1B7AE06ECLL);
}

void sub_1B7AE07F8()
{
}

void sub_1B7AE0800()
{
}

void DiffuseMaterialLayer::OverUnderDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7AE0FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,PCSharedCount a24,void *a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,PCSharedCount a36)
{
  *(void *)(v39 - 112) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v36 + 3);
  a33 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a36);
  a25 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a28);
  PCSharedCount::~PCSharedCount(&a12);
  a21 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a24);
  PCSharedCount::~PCSharedCount(&a16);
  PCSharedCount::~PCSharedCount(v38);
  PCSharedCount::~PCSharedCount(v37);
  *(void *)(v39 - 208) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 184));
  *(void *)(v39 - 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 152));
  *(void *)(v39 - 144) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 120));
  _Unwind_Resume(a1);
}

void sub_1B7AE1384()
{
}

void ProShade::mix(const PCSharedCount *a1, const PCSharedCount *a2, const PCSharedCount *a3)
{
  int var0 = a1[2].var0;
  v12[0] = &unk_1F11193B8;
  v12[2] = var0;
  PCSharedCount::PCSharedCount(&v13, a1 + 3);
  int v6 = a2[2].var0;
  v10[0] = &unk_1F11193B8;
  v10[2] = v6;
  PCSharedCount::PCSharedCount(&v11, a2 + 3);
  unsigned int v7 = a3[2].var0;
  v8[0] = &unk_1F11193B8;
  double v8[2] = v7;
  PCSharedCount::PCSharedCount(&v9, a3 + 3);
  ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::eval((uint64_t)v12, (uint64_t)v10, (uint64_t)v8);
}

void sub_1B7AE14C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void DiffuseMaterialLayer::MultiplyDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7AE1788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28)
{
  PCSharedCount::~PCSharedCount(v30 + 3);
  PCSharedCount::~PCSharedCount(v31);
  *(void *)(v32 - 9ProCore_Impl::PCNSRefImpl::release(this + 6) = v29;
  PCSharedCount::~PCSharedCount(v28);
  PCSharedCount::~PCSharedCount(&a28);
  _Unwind_Resume(a1);
}

void LiMaterialBlend::composite<LiMaterialBlend::Multiply>(uint64_t a1)
{
}

void sub_1B7AE1FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  PCSharedCount::~PCSharedCount(v68);
  PCSharedCount::~PCSharedCount(v67);
  PCSharedCount::~PCSharedCount(&a67);
  *(void *)(v71 - 248) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v71 - 224));
  *(void *)(v71 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = v69;
  PCSharedCount::~PCSharedCount(v70);
  *(void *)(v71 - 184) = a11;
  PCSharedCount::~PCSharedCount(a10);
  *(void *)(v71 - 152) = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v71 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a15;
  PCSharedCount::~PCSharedCount(a14);
  _Unwind_Resume(a1);
}

void sub_1B7AE2360()
{
}

void DiffuseMaterialLayer::SimpleMultiplyDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7AE2974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11)
{
  PCSharedCount::~PCSharedCount(v11 + 3);
  PCSharedCount::~PCSharedCount(v14);
  PCSharedCount::~PCSharedCount(v13);
  PCSharedCount::~PCSharedCount(v12);
  *(void *)(v15 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a10;
  PCSharedCount::~PCSharedCount(a11);
  *(void *)(v15 - 152) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v15 - 128));
  _Unwind_Resume(a1);
}

void sub_1B7AE2BF4()
{
}

void DiffuseMaterialLayer::OverWhiteMultiplyDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7AE3194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,PCSharedCount a31,void *a32,uint64_t a33,uint64_t a34,PCSharedCount a35)
{
  PCSharedCount::~PCSharedCount(v35 + 3);
  PCSharedCount::~PCSharedCount(&a31);
  a32 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a35);
  *(void *)(v36 - 168) = a10;
  PCSharedCount::~PCSharedCount(a11);
  *(void *)(v36 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v36 - 112));
  _Unwind_Resume(a1);
}

void sub_1B7AE341C()
{
}

void DiffuseMaterialLayer::OverBlackScreenDiffuseColor::eval(uint64_t a1, uint64_t a2)
{
  int v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  int v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(void *)(a1 + 8) + 27));
}

void sub_1B7AE3D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCSharedCount a19, void *a20,uint64_t a21,uint64_t a22,PCSharedCount a23,void *a24,uint64_t a25,uint64_t a26,PCSharedCount a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,PCSharedCount a35,void *a36,uint64_t a37,uint64_t a38,PCSharedCount a39)
{
  a28 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v39 + 3);
  a24 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a27);
  PCSharedCount::~PCSharedCount(&a19);
  a20 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a23);
  a32 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a35);
  a36 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a39);
  *(void *)(v40 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v40 - 176));
  *(void *)(v40 - 168) = a10;
  PCSharedCount::~PCSharedCount(a11);
  *(void *)(v40 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v40 - 112));
  _Unwind_Resume(a1);
}

void sub_1B7AE420C()
{
}

uint64_t DiffuseMaterialLayer::computeDiffuseColor(uint64_t a1, uint64_t a2, const PCSharedCount *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(uint64_t, uint64_t, const PCSharedCount *))(*(void *)v4 + 16))(v4, a2, a3);

  return ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[68], a3 + 64);
}

void DiffuseMaterialLayer::getDiffuse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = &unk_1F11193B8;
  char v6 = *(unsigned char *)(a3 + 72);
  uint64_t v7 = *(void *)(a3 + 80);
  PCSharedCount::PCSharedCount(v8, (const PCSharedCount *)(a3 + 88));
  uint64_t v5 = &unk_1F1123EA0;
  PCSharedCount::PCSharedCount(&v4, v8);
  uint64_t v5 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v8);
  LiLightProperties::getAttenuation((LiLightProperties *)a3, (ProShade::Float *)&v5);
}

void sub_1B7AE58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount *a16, uint64_t a17, PCSharedCount *a18, uint64_t a19, PCSharedCount *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,PCSharedCount a47,uint64_t a48,uint64_t a49,uint64_t a50,PCSharedCount a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,PCSharedCount a59,uint64_t a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  *(void *)(v75 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v72 + 3);
  *(void *)(v75 - 152) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v75 - 128));
  a56 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a59);
  a48 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a51);
  PCSharedCount::~PCSharedCount(v74);
  PCSharedCount::~PCSharedCount(&a47);
  PCSharedCount::~PCSharedCount(v73);
  a64 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a67);
  a60 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a63);
  a68 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a71);
  a72 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x210]);
  STACK[0x218] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x230]);
  STACK[0x238] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x250]);
  STACK[0x258] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x270]);
  STACK[0x278] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x290]);
  STACK[0x298] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2B0]);
  STACK[0x2B8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2D0]);
  STACK[0x2D8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2F0]);
  STACK[0x2F8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x310]);
  STACK[0x318] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x330]);
  STACK[0x338] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x350]);
  STACK[0x358] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x370]);
  STACK[0x378] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x390]);
  STACK[0x398] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x3B0]);
  *(void *)(v75 - 248) = a17;
  PCSharedCount::~PCSharedCount(a16);
  *(void *)(v75 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a19;
  PCSharedCount::~PCSharedCount(a18);
  *(void *)(v75 - 184) = a15;
  PCSharedCount::~PCSharedCount(a20);
  _Unwind_Resume(a1);
}

void sub_1B7AE63E4()
{
}

void sub_1B7AE63EC()
{
}

void sub_1B7AE642C()
{
}

void sub_1B7AE6480()
{
}

void sub_1B7AE64B4()
{
}

uint64_t DiffuseMaterialLayer::isOpaque(uint64_t a1, char *a2, os_unfair_lock_s *a3, uint64_t (***a4)(void, void))
{
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  uint64_t v9 = LiMaterialLayerUniform::get(a3, DstAlphaFactor);
  double v12 = 0.0;
  uint64_t result = (uint64_t)LiMaterial::get<double>((PCArray_base *)a3, v9 + 160, (BOOL *)&v12);
  if (*(_DWORD *)(a1 + 32) == 6)
  {
    if (fabs(v12 + -1.0) >= 0.0000001
      || (uint64_t result = LiMaterial::getSamplerInfo(a3, *(const ProShade::SamplerNode **)(v9 + 368)), *(unsigned char *)(result + 316))
      && (uint64_t result = (**a4)(a4, *(void *)(v9 + 368)), (result & 1) == 0))
    {
      char v11 = 0;
LABEL_6:
      *a2 = v11;
    }
  }
  else if (!*(unsigned char *)(a1 + 9) && fabs(v12 + -1.0) < 0.0000001)
  {
    uint64_t result = *(unsigned char *)(LiMaterial::getSamplerInfo(a3, *(const ProShade::SamplerNode **)(v9 + 368)) + 316)
           ? (**a4)(a4, *(void *)(v9 + 368))
           : 1;
    if (!*(unsigned char *)(a1 + 28) && result)
    {
      char v11 = 1;
      goto LABEL_6;
    }
  }
  return result;
}

PCArray_base *LiMaterial::get<double>(PCArray_base *result, uint64_t a2, BOOL *a3)
{
  unint64_t v3 = *((unsigned int *)result + 147);
  if ((int)v3 >= 1)
  {
    uint64_t v5 = 0;
    for (uint64_t i = 8; ; i += 152)
    {
      if (v5 >= *((int *)result + 147)) {
        PCArray_base::badIndex(result);
      }
      uint64_t v7 = *((void *)result + 74);
      if (*(void *)(v7 + i - 8) == *(void *)(a2 + 16)) {
        break;
      }
      if (++v5 >= v3) {
        return result;
      }
    }
    if (v5 >= *((int *)result + 147)) {
      PCArray_base::badIndex(result);
    }
    if (*(_DWORD *)(v7 + i) == 3)
    {
      uint64_t v9 = 0;
      if (v5 >= *((int *)result + 147)) {
        PCArray_base::badIndex(result);
      }
      uint64_t result = (PCArray_base *)ProShade::Value::get((const PCString *)(v7 + i), (const PCString *)*(unsigned int *)(v7 + i), (BOOL *)&v9);
      *(void *)a3 = v9;
    }
    else
    {
      if (v5 >= *((int *)result + 147)) {
        PCArray_base::badIndex(result);
      }
      uint64_t v8 = (const PCString *)*(unsigned int *)(v7 + i);
      return (PCArray_base *)ProShade::Value::get((const PCString *)(v7 + i), v8, a3);
    }
  }
  return result;
}

void DiffuseMaterialLayer::computeColor(HGGLBlendingInfo *a1, uint64_t a2, const PCSharedCount *a3)
{
  uint64_t v5 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(a1);
  uint64_t v7 = LiMaterialLayerUniform::get(v5, DstAlphaFactor);
  if (*((unsigned char *)a1 + 28))
  {
    uint64_t SamplerInfo = LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)(a2 + 40), *(const ProShade::SamplerNode **)(v7 + 1360));
    long long v14 = *(_OWORD *)(SamplerInfo + 316);
    uint64_t v15 = *(void *)(SamplerInfo + 332);
    int v18 = &unk_1F11199B0;
    char v19 = *(unsigned char *)(v7 + 1352);
    uint64_t v20 = *(void *)(v7 + 1360);
    PCSharedCount::PCSharedCount(&v21, (const PCSharedCount *)(v7 + 1368));
    int v18 = &unk_1F1119908;
    ProShade::VarT<ProShade::UniformNode>::VarT(&v22, *(PCShared_base **)(v7 + 1392));
    v22.int var0 = (PC_Sp_counted_base *)&unk_1F1119B30;
    ProShade::VarT<ProShade::UniformNode>::VarT(v23, *(PCShared_base **)(v7 + 1424));
    v23[0].int var0 = (PC_Sp_counted_base *)&unk_1F1119BB0;
    uint64_t v9 = *(void *)(a2 + 40);
    char v16 = *(unsigned char *)(v9 + 697);
    __int16 v17 = *(_WORD *)(v9 + 698);
    v11.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v12, (const PCSharedCount *)(v7 + 1712));
    LiMaterialLayer::sampleTextureMap();
  }
  DiffuseMaterialLayer::computeDiffuseColor((uint64_t)a1, a2, a3);
  if (*((unsigned char *)a1 + 8))
  {
    v11.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v12, (const PCSharedCount *)(v7 + 304));
  }
  else
  {
    v11.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v12, (const PCSharedCount *)(v7 + 144));
  }
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[40], &v11);
  v11.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v13);
  v23[4].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  operator new();
}

void sub_1B7AE78CC(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void LiLightProperties::ambient(LiLightProperties *this)
{
}

void sub_1B7AE805C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void LiLightProperties::~LiLightProperties(PCSharedCount *this)
{
  this[12].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 15);
  this[8].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 11);
  this[4].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 7);
}

int8x8_t *DiffuseMaterialLayer::writeHash(DiffuseMaterialLayer *this, int8x8_t *a2)
{
  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B837CC78 & 0x7FFFFFFFFFFFFFFFLL));
  (*(void (**)(int8x8_t *, void))(*(void *)a2 + 48))(a2, *((unsigned int *)this + 8));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 26));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 27));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 56));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 28));
  char v4 = *((unsigned char *)this + 29);

  return PCHashWriteStream::writeValue(a2, v4);
}

void DiffuseMaterialLayer::DiffuseMaterialLayer(DiffuseMaterialLayer *this, uint64_t a2)
{
  *((void *)this + 8) = &unk_1F1199AC8;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  LiMaterialLayer::LiMaterialLayer(this, (uint64_t *)&off_1F1122420, a2);
  *(void *)this = &unk_1F1122398;
  *((void *)this + 8) = &unk_1F1122400;
  *((_DWORD *)this + 8) = 0;
  *(_DWORD *)((char *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  operator new();
}

void sub_1B7AE82E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v3;
  *(unsigned char *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void SpecularMaterialLayer::ReplaceSpecularColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  uint64_t v8 = LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::getSurfaceSpecularColor((_DWORD *)(*(void *)(a1 + 8) + 144), *(os_unfair_lock_s **)(a2 + 40), v8, a3, v9);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 576, v9);
  v9[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B7AE83A0(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void isoPhongShader(uint64_t a1)
{
  uint64_t v1 = *(const PCSharedCount **)(a1 + 16);
  uint64_t v8 = &unk_1F11193B8;
  char v9 = *(unsigned char *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  PCSharedCount::PCSharedCount(v11, (const PCSharedCount *)(a1 + 88));
  uint64_t v8 = &unk_1F1123EA0;
  uint64_t v4 = v10;
  PCSharedCount::PCSharedCount(&v5, v11);
  uint64_t v8 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v11);
  uint64_t v8 = &unk_1F11193B8;
  uint64_t v10 = v4;
  PCSharedCount::PCSharedCount(v2, &v5);
  int var0 = v1[18].var0;
  v6[0] = &unk_1F11193B8;
  double v6[2] = var0;
  PCSharedCount::PCSharedCount(&v7, v1 + 19);
  ProShade::Func<ProShade::Func_reflect>::eval((uint64_t)&v8, (uint64_t)v6);
}

void sub_1B7AE8948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,PCSharedCount a35)
{
  PCSharedCount::~PCSharedCount(v35);
  *(void *)(v38 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v38 - 96));
  *(void *)(v38 - 152) = v36;
  PCSharedCount::~PCSharedCount(v37);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a27);
  a28 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(a9);
  a32 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a35);
  *(void *)(v38 - 184) = a10;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void isoBlinnPhongShader(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v7.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  char v8 = *(unsigned char *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  PCSharedCount::PCSharedCount(v10, (const PCSharedCount *)(a1 + 88));
  v7.int var0 = (PC_Sp_counted_base *)&unk_1F1123EA0;
  uint64_t v3 = &unk_1F11193B8;
  char v4 = v8;
  uint64_t v5 = v9;
  PCSharedCount::PCSharedCount(&v6, v10);
  v7.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v10);
  ProShade::operator+(&v7, &v3, v1 + 96);
  ProShade::Func<ProShade::Func_normalize>::eval(&v7, (uint64_t)v2);
  v7.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v10);
  ProShade::Func<ProShade::Func_dot>::eval(v1 + 128, (uint64_t)v2);
}

void sub_1B7AE8FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  PCSharedCount::~PCSharedCount(v30);
  *(void *)(v31 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v31 - 96));
  *(void *)(v31 - 152) = v28;
  PCSharedCount::~PCSharedCount(v29);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a17);
  a18 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v27);
  a22 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a25);
  PCSharedCount::~PCSharedCount(v26);
  _Unwind_Resume(a1);
}

void isoWardShader(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  char v15 = *(unsigned char *)(a1 + 104);
  uint64_t v16 = *(void *)(a1 + 112);
  PCSharedCount::PCSharedCount(v17, (const PCSharedCount *)(a1 + 120));
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F1123EA0;
  uint64_t v10 = &unk_1F11193B8;
  char v11 = v15;
  uint64_t v12 = v16;
  PCSharedCount::PCSharedCount(&v13, v17);
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v17);
  v6[1].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  char v7 = *(unsigned char *)(v1 + 136);
  uint64_t v8 = *(void *)(v1 + 144);
  PCSharedCount::PCSharedCount(&v9, (const PCSharedCount *)(v1 + 152));
  uint64_t v3 = &unk_1F11193B8;
  char v4 = *(unsigned char *)(v1 + 104);
  uint64_t v5 = *(void *)(v1 + 112);
  PCSharedCount::PCSharedCount(v6, (const PCSharedCount *)(v1 + 120));
  ProShade::operator+(&v14, &v3, &v10);
  ProShade::Func<ProShade::Func_normalize>::eval(&v14, (uint64_t)v2);
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v17);
  operator new();
}

void sub_1B7AE9F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, PCSharedCount *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,PCSharedCount a33,void *a34,uint64_t a35,uint64_t a36,PCSharedCount a37,void *a38,uint64_t a39,uint64_t a40,PCSharedCount a41,void *a42,uint64_t a43,uint64_t a44,PCSharedCount a45,void *a46,uint64_t a47,uint64_t a48,PCSharedCount a49,void *a50,uint64_t a51,uint64_t a52,PCSharedCount a53,void *a54,uint64_t a55,uint64_t a56,PCSharedCount a57,void *a58,uint64_t a59,uint64_t a60,PCSharedCount a61,void *a62,uint64_t a63)
{
  PCSharedCount::~PCSharedCount(v70 + 3);
  PCSharedCount::~PCSharedCount(v72);
  v71->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v71 + 3);
  PCSharedCount::~PCSharedCount(&a33);
  a34 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a37);
  a38 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a41);
  a42 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a45);
  a46 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a49);
  a50 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a53);
  a54 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a57);
  a58 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a61);
  a62 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a65);
  a66 = a10;
  PCSharedCount::~PCSharedCount(a11);
  a70 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x200]);
  *(void *)(v73 - 248) = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v73 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a14;
  PCSharedCount::~PCSharedCount(a15);
  *(void *)(v73 - 184) = a16;
  PCSharedCount::~PCSharedCount(a17);
  _Unwind_Resume(a1);
}

void sub_1B7AEA644()
{
}

void sub_1B7AEA64C()
{
}

void sub_1B7AEA654()
{
}

void sub_1B7AEA65C()
{
}

void sub_1B7AEA664()
{
}

void sub_1B7AEA66C()
{
}

void anisoWardShader(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  char v15 = *(unsigned char *)(a1 + 104);
  uint64_t v16 = *(void *)(a1 + 112);
  PCSharedCount::PCSharedCount(v17, (const PCSharedCount *)(a1 + 120));
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F1123EA0;
  uint64_t v10 = &unk_1F11193B8;
  char v11 = v15;
  uint64_t v12 = v16;
  PCSharedCount::PCSharedCount(&v13, v17);
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v17);
  v6[1].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  char v7 = *(unsigned char *)(v1 + 136);
  uint64_t v8 = *(void *)(v1 + 144);
  PCSharedCount::PCSharedCount(&v9, (const PCSharedCount *)(v1 + 152));
  uint64_t v3 = &unk_1F11193B8;
  char v4 = *(unsigned char *)(v1 + 104);
  uint64_t v5 = *(void *)(v1 + 112);
  PCSharedCount::PCSharedCount(v6, (const PCSharedCount *)(v1 + 120));
  ProShade::operator+(&v14, &v3, &v10);
  ProShade::Func<ProShade::Func_normalize>::eval(&v14, (uint64_t)v2);
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v17);
  operator new();
}

void sub_1B7AEDE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,PCSharedCount *a32,uint64_t a33,PCSharedCount *a34,PCSharedCount *a35,uint64_t a36,PCSharedCount *a37,PCSharedCount *a38,uint64_t a39,PCSharedCount *a40,uint64_t a41,uint64_t a42,PCSharedCount *a43,uint64_t a44,PCSharedCount *a45)
{
  *(void *)(v49 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v45 + 3);
  STACK[0x3F8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x410]);
  STACK[0x418] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x430]);
  STACK[0x438] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x450]);
  *(void *)(v49 - 168) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v49 - 144));
  STACK[0x458] = v46;
  PCSharedCount::~PCSharedCount(v47);
  STACK[0x478] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x490]);
  STACK[0x498] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x4B0]);
  STACK[0x4B8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x4D0]);
  STACK[0x4D8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x4F0]);
  STACK[0x4F8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x510]);
  STACK[0x518] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x530]);
  STACK[0x538] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x550]);
  STACK[0x558] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x570]);
  STACK[0x578] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x590]);
  STACK[0x598] = a33;
  PCSharedCount::~PCSharedCount(a32);
  STACK[0x5B8] = a31;
  PCSharedCount::~PCSharedCount(a34);
  STACK[0x5D8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x5F0]);
  STACK[0x5F8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x610]);
  STACK[0x618] = a39;
  PCSharedCount::~PCSharedCount(a38);
  STACK[0x638] = a41;
  PCSharedCount::~PCSharedCount(a40);
  STACK[0x658] = a44;
  PCSharedCount::~PCSharedCount(a43);
  STACK[0x678] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x690]);
  STACK[0x698] = a42;
  PCSharedCount::~PCSharedCount(a45);
  *(void *)(v49 - 248) = a36;
  PCSharedCount::~PCSharedCount(a35);
  *(void *)(v49 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = v48;
  PCSharedCount::~PCSharedCount(a37);
  _Unwind_Resume(a1);
}

void sub_1B7AEFB80()
{
}

void sub_1B7AEFB88()
{
}

void ProShade::smoothstep(const PCSharedCount *a1, const PCSharedCount *a2, const PCSharedCount *a3)
{
  int var0 = a1[2].var0;
  v12[0] = &unk_1F11193B8;
  v12[2] = var0;
  PCSharedCount::PCSharedCount(&v13, a1 + 3);
  PCSharedCount v6 = a2[2].var0;
  v10[0] = &unk_1F11193B8;
  PCSharedCount v10[2] = v6;
  PCSharedCount::PCSharedCount(&v11, a2 + 3);
  char v7 = a3[2].var0;
  v8[0] = &unk_1F11193B8;
  PCSharedCount v8[2] = v7;
  PCSharedCount::PCSharedCount(&v9, a3 + 3);
  ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::eval((uint64_t)v12, (uint64_t)v10, (uint64_t)v8);
}

void sub_1B7AEFCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void anisoBlinnPhongShader(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v10.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  char v11 = *(unsigned char *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  PCSharedCount::PCSharedCount(v13, (const PCSharedCount *)(a1 + 88));
  v10.int var0 = (PC_Sp_counted_base *)&unk_1F1123EA0;
  PCSharedCount v6 = &unk_1F11193B8;
  char v7 = v11;
  uint64_t v8 = v12;
  PCSharedCount::PCSharedCount(&v9, v13);
  v10.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v13);
  void v2[4] = &unk_1F11193B8;
  char v3 = *(unsigned char *)(v1 + 136);
  uint64_t v4 = *(void *)(v1 + 144);
  PCSharedCount::PCSharedCount(&v5, (const PCSharedCount *)(v1 + 152));
  ProShade::operator+(&v10, v1 + 96, &v6);
  ProShade::Func<ProShade::Func_normalize>::eval(&v10, (uint64_t)v2);
  v10.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v13);
  ProShade::Selector_base::_select(v1 + 424, 0);
}

void sub_1B7AF09EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, PCSharedCount *a17, PCSharedCount *a18, uint64_t a19, PCSharedCount *a20,uint64_t a21,PCSharedCount *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,PCSharedCount a39,uint64_t a40,uint64_t a41,uint64_t a42,PCSharedCount a43,uint64_t a44,uint64_t a45,uint64_t a46,PCSharedCount a47,uint64_t a48,uint64_t a49,uint64_t a50,PCSharedCount a51,uint64_t a52,uint64_t a53,uint64_t a54,PCSharedCount a55,uint64_t a56,uint64_t a57,uint64_t a58,PCSharedCount a59,uint64_t a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  PCSharedCount::~PCSharedCount(v72 + 3);
  PCSharedCount::~PCSharedCount(v73);
  PCSharedCount::~PCSharedCount(&a39);
  PCSharedCount::~PCSharedCount(a10);
  a40 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a43);
  a44 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a47);
  a48 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a51);
  a52 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a55);
  a56 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a59);
  a60 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a63);
  a64 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a67);
  a68 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a71);
  a72 = a13;
  PCSharedCount::~PCSharedCount(a12);
  STACK[0x218] = a14;
  PCSharedCount::~PCSharedCount(a15);
  STACK[0x238] = a16;
  PCSharedCount::~PCSharedCount(a17);
  STACK[0x258] = a19;
  PCSharedCount::~PCSharedCount(a18);
  *(void *)(v74 - 248) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v74 - 224));
  *(void *)(v74 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a21;
  PCSharedCount::~PCSharedCount(a20);
  *(void *)(v74 - 184) = a23;
  PCSharedCount::~PCSharedCount(a22);
  _Unwind_Resume(a1);
}

void SpecularMaterialLayer::getIsoSpecular(SpecularMaterialLayer *this, const LiMaterialLayerUniform *a2, LiLightProperties *a3)
{
}

void sub_1B7AF1F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCSharedCount *a17, uint64_t a18, PCSharedCount *a19, uint64_t a20,PCSharedCount *a21,uint64_t a22,PCSharedCount *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  PCString::~PCString((PCString *)(v54 - 152));
  PCString::~PCString((PCString *)(v54 - 120));
  if (v52) {
    __cxa_free_exception(v53);
  }
  PCSharedCount::~PCSharedCount(a23);
  *(void *)(v54 - 248) = a18;
  PCSharedCount::~PCSharedCount(a17);
  *(void *)(v54 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a20;
  PCSharedCount::~PCSharedCount(a19);
  *(void *)(v54 - 184) = a22;
  PCSharedCount::~PCSharedCount(a21);
  _Unwind_Resume(a1);
}

void sub_1B7AF24CC()
{
}

void sub_1B7AF24D4()
{
  *(void *)(v1 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v0;
  JUMPOUT(0x1B7AF2488);
}

void sub_1B7AF24E4()
{
}

void sub_1B7AF24EC()
{
  *(void *)(v0 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  JUMPOUT(0x1B7AF2494);
}

void sub_1B7AF2518()
{
}

void sub_1B7AF2520()
{
  *(void *)(v0 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  JUMPOUT(0x1B7AF24A0);
}

void simpleFresnel(uint64_t a1, const PCSharedCount *a2)
{
  ProShade::Func<ProShade::Func_normalize>::eval(a2, (uint64_t)v5);
  ProShade::operator+(v6, a1 + 96, v5);
  ProShade::Func<ProShade::Func_normalize>::eval(v6, (uint64_t)v4);
  v6[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v7);
  char v3 = &unk_1F11193B8;
  operator new();
}

void sub_1B7AF2B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount *a9, uint64_t a10, uint64_t a11, uint64_t a12, PCSharedCount a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,PCSharedCount a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,PCSharedCount a29,void *a30,uint64_t a31,uint64_t a32,PCSharedCount a33)
{
  a22 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v33 + 3);
  a18 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a21);
  PCSharedCount::~PCSharedCount(&a13);
  PCSharedCount::~PCSharedCount(v34);
  a9->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(a9 + 3);
  a26 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a29);
  a30 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a33);
  *(void *)(v35 - 184) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v35 - 160));
  _Unwind_Resume(a1);
}

void sub_1B7AF2E78()
{
}

void sub_1B7AF2E80()
{
}

void SpecularMaterialLayer::getAnisoSpecular(uint64_t a1, uint64_t a2, LiLightProperties *a3)
{
}

void sub_1B7AF48D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCSharedCount *a18, uint64_t a19, _Unwind_Exception *exception_objecta,uint64_t a21,uint64_t a22,PCSharedCount *a23,uint64_t a24,PCSharedCount *a25,uint64_t a26,PCSharedCount *a27,uint64_t a28,PCSharedCount *a29,PCSharedCount *a30,uint64_t a31)
{
  PCString::~PCString((PCString *)(v33 - 168));
  PCString::~PCString((PCString *)(v33 - 136));
  if (v32) {
    __cxa_free_exception(v31);
  }
  STACK[0x258] = a22;
  PCSharedCount::~PCSharedCount(a29);
  STACK[0x278] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x290]);
  STACK[0x298] = a24;
  PCSharedCount::~PCSharedCount(a23);
  STACK[0x2B8] = a26;
  PCSharedCount::~PCSharedCount(a25);
  *(void *)(v33 - 232) = a28;
  PCSharedCount::~PCSharedCount(a27);
  *(void *)(v33 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a31;
  PCSharedCount::~PCSharedCount(a30);
  _Unwind_Resume(a1);
}

void sub_1B7AF53A0()
{
}

void sub_1B7AF53AC()
{
}

void sub_1B7AF53B4()
{
  *(void *)(v1 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = v0;
  JUMPOUT(0x1B7AF5364);
}

void sub_1B7AF53C4()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7AF5368);
}

void sub_1B7AF53E4()
{
}

void sub_1B7AF53EC()
{
  *(void *)(v1 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = v0;
  JUMPOUT(0x1B7AF537CLL);
}

void sub_1B7AF53FC()
{
}

void sub_1B7AF5404()
{
  *(void *)(v0 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  JUMPOUT(0x1B7AF5388);
}

void sub_1B7AF5430()
{
}

void sub_1B7AF5438()
{
  *(void *)(v0 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  JUMPOUT(0x1B7AF5394);
}

void sub_1B7AF5460()
{
}

void sub_1B7AF5468()
{
}

uint64_t SpecularMaterialLayer::computeNormal(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 120);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void SpecularMaterialLayer::computeColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCSharedCount v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  uint64_t v8 = LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  uint64_t v9 = *(void *)(a1 + 72);
  if (!v9) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, a2, a3);
  if (*(unsigned char *)(a1 + 69)) {
    uint64_t v10 = v8 + 992;
  }
  else {
    uint64_t v10 = v8 + 832;
  }
  PCSharedCount v13 = &unk_1F11199B0;
  char v14 = *(unsigned char *)(v10 + 8);
  uint64_t v15 = *(void *)(v10 + 16);
  PCSharedCount::PCSharedCount(&v16, (const PCSharedCount *)(v10 + 24));
  PCSharedCount v13 = &unk_1F1119908;
  ProShade::VarT<ProShade::UniformNode>::VarT(&v17, *(PCShared_base **)(v10 + 48));
  v17.int var0 = (PC_Sp_counted_base *)&unk_1F1119B30;
  ProShade::VarT<ProShade::UniformNode>::VarT(&v18, *(PCShared_base **)(v10 + 80));
  v18.int var0 = (PC_Sp_counted_base *)&unk_1F1119BB0;
  PCSharedCount v13 = &unk_1F111BF18;
  if (*(unsigned char *)(a1 + 69)) {
    uint64_t v11 = v8 + 1856;
  }
  else {
    uint64_t v11 = v8 + 1824;
  }
  ProShade::VarT<ProShade::UniformNode>::VarT(v12, *(PCShared_base **)(v11 + 16));
  v12[0].int var0 = (PC_Sp_counted_base *)&unk_1F1119B88;
  LiMaterialLayer::getSurfaceSpecularShininess(*(os_unfair_lock_s **)(a2 + 40), v8, (uint64_t)&v13, v12);
}

void sub_1B7AF6338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, PCSharedCount *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  PCSharedCount::~PCSharedCount(v66 + 3);
  *(void *)(v67 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v65;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v67 - 96));
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a61);
  a62 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a65);
  *(void *)(v67 - 248) = &unk_1F1119970;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v67 - 224));
  ProShade::Sampler::~Sampler((PCSharedCount *)(v67 - 216));
  _Unwind_Resume(a1);
}

int8x8_t *SpecularMaterialLayerBase::writeHash(SpecularMaterialLayerBase *this, int8x8_t *a2)
{
  LiMaterialLayer::writeHash(this, a2);
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t, int8x8_t *))(*(void *)v4 + 32))(v4, a2);
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    (*(void (**)(uint64_t, int8x8_t *))(*(void *)v5 + 32))(v5, a2);
  }
  (*(void (**)(int8x8_t *, void))(*(void *)a2 + 48))(a2, *((unsigned int *)this + 16));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 68));
  char v6 = *((unsigned char *)this + 69);

  return PCHashWriteStream::writeValue(a2, v6);
}

uint64_t SpecularMaterialLayer::writeHash(SpecularMaterialLayer *this, int8x8_t *a2)
{
  SpecularMaterialLayerBase::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B837CCA7 & 0x7FFFFFFFFFFFFFFFLL));
  (*(void (**)(int8x8_t *, void))(*(void *)a2 + 48))(a2, *((unsigned int *)this + 34));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 140));
  (*(void (**)(int8x8_t *, void))(*(void *)a2 + 48))(a2, *((unsigned int *)this + 36));
  uint64_t v4 = *((void *)this + 9);
  if (v4) {
    (*(void (**)(uint64_t, int8x8_t *))(*(void *)v4 + 32))(v4, a2);
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    (*(void (**)(uint64_t, int8x8_t *))(*(void *)v5 + 32))(v5, a2);
  }
  uint64_t v6 = *((void *)this + 13);
  if (v6) {
    (*(void (**)(uint64_t, int8x8_t *))(*(void *)v6 + 32))(v6, a2);
  }
  uint64_t result = *((void *)this + 15);
  if (result)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v8();
  }
  return result;
}

void *SpecularMaterialLayer::print(uint64_t a1, void *a2, int a3)
{
  uint64_t result = LiMaterialLayer::print(a1, a2, a3);
  if (*(unsigned char *)(a1 + 8))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    PCSharedCount v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"separateEnvResponse: ", 21);
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v8 = "true";
    }
    else {
      uint64_t v8 = "false";
    }
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v9 = 4;
    }
    else {
      uint64_t v9 = 5;
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  }
  if (*(_DWORD *)(a1 + 136) != 2)
  {
    LiImageSource::printIndent(a2, a3 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"specularModel: ", 15);
    int v11 = *(_DWORD *)(a1 + 136);
    if (v11 == 2)
    {
      uint64_t v12 = "Ward";
      PCSharedCount v13 = a2;
      uint64_t v14 = 4;
    }
    else if (v11 == 1)
    {
      uint64_t v12 = "BlinnPhong";
      PCSharedCount v13 = a2;
      uint64_t v14 = 10;
    }
    else
    {
      if (v11)
      {
LABEL_17:
        uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        goto LABEL_18;
      }
      uint64_t v12 = "Phong";
      PCSharedCount v13 = a2;
      uint64_t v14 = 5;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    goto LABEL_17;
  }
LABEL_18:
  if (*(unsigned char *)(a1 + 140))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"fresnel: ", 9);
    if (*(unsigned char *)(a1 + 140)) {
      PCSharedCount v16 = "true";
    }
    else {
      PCSharedCount v16 = "false";
    }
    if (*(unsigned char *)(a1 + 140)) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = 5;
    }
    PCSharedCount v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  if (*(_DWORD *)(a1 + 64))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"anisotropicModel: ", 18);
    switch(*(_DWORD *)(a1 + 64))
    {
      case 0:
        char v19 = "Linear";
        uint64_t v20 = a2;
        uint64_t v21 = 6;
        goto LABEL_32;
      case 1:
        char v19 = "Cylindrical";
        uint64_t v20 = a2;
        uint64_t v21 = 11;
        goto LABEL_32;
      case 2:
        char v19 = "AnisotropicAngleMap";
        uint64_t v20 = a2;
        uint64_t v21 = 19;
        goto LABEL_32;
      case 3:
        char v19 = "Isotropic";
        uint64_t v20 = a2;
        uint64_t v21 = 9;
LABEL_32:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v19, v21);
        break;
      default:
        break;
    }
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  if (*(_DWORD *)(a1 + 144))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"colorModel: ", 12);
    switch(*(_DWORD *)(a1 + 144))
    {
      case 0:
        PCSharedCount v22 = "LerpWhiteToDiffuse";
        double v23 = a2;
        uint64_t v24 = 18;
        goto LABEL_41;
      case 1:
        PCSharedCount v22 = "Solid";
        double v23 = a2;
        uint64_t v24 = 5;
        goto LABEL_41;
      case 2:
        PCSharedCount v22 = "Diffuse";
        double v23 = a2;
        uint64_t v24 = 7;
        goto LABEL_41;
      case 3:
        PCSharedCount v22 = "Map";
        double v23 = a2;
        uint64_t v24 = 3;
        goto LABEL_41;
      case 4:
        PCSharedCount v22 = "ViewDependent";
        double v23 = a2;
        uint64_t v24 = 13;
LABEL_41:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v22, v24);
        break;
      default:
        break;
    }
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  if (!*(unsigned char *)(a1 + 68))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    PCString v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"cylindricalPerGlyph: ", 21);
    if (*(unsigned char *)(a1 + 68)) {
      double v26 = "true";
    }
    else {
      double v26 = "false";
    }
    if (*(unsigned char *)(a1 + 68)) {
      uint64_t v27 = 4;
    }
    else {
      uint64_t v27 = 5;
    }
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
  }
  return result;
}

void SpecularMaterialLayerBase::SpecularMaterialLayerBase(SpecularMaterialLayerBase *this, uint64_t *a2, uint64_t a3)
{
  LiMaterialLayer::LiMaterialLayer(this, a2 + 1, a3);
  uint64_t v5 = *a2;
  uint64_t *v6 = *a2;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[5];
  *((void *)this + 4) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 5);
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((_DWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((_WORD *)this + 34) = 1;
}

void sub_1B7AF6F00(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void SpecularMaterialLayerBase::~SpecularMaterialLayerBase(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  char v3 = *a2;
  this->int var0 = *a2;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((void *)v3 - 3)) = a2[5];
  PCSharedCount::~PCSharedCount(this + 7);
  PCSharedCount::~PCSharedCount(this + 5);
}

void SpecularMaterialLayer::SpecularMaterialLayer(SpecularMaterialLayer *this, uint64_t a2)
{
  *((void *)this + 19) = &unk_1F1199AC8;
  *((void *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((unsigned char *)this + 168) = 1;
  SpecularMaterialLayerBase::SpecularMaterialLayerBase(this, (uint64_t *)off_1F1122518, a2);
  *(void *)this = &unk_1F1122490;
  *((void *)this + 19) = &unk_1F11224F8;
  operator new();
}

void sub_1B7AF7124(_Unwind_Exception *a1)
{
  PCSharedCount v7 = v5;
  PCSharedCount::~PCSharedCount(v7);
  PCSharedCount::~PCSharedCount(v6);
  PCSharedCount::~PCSharedCount(v4);
  SpecularMaterialLayerBase::~SpecularMaterialLayerBase((PCSharedCount *)v1, (PC_Sp_counted_base **)off_1F1122518);
  *(void *)(v1 + 152) = v3;
  *(unsigned char *)(v1 + 168) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void BumpMaterialLayer::BumpMaterialLayer(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  LiMaterialLayer::LiMaterialLayer((LiMaterialLayer *)a1, (uint64_t *)&off_1F11225F0, a2);
  *(void *)a1 = &unk_1F1122568;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11225D0;
  operator new();
}

void sub_1B7AF72B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(unsigned char *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t BumpMaterialLayer::sampleBumpMap(uint64_t a1, os_unfair_lock_s *this, const ProShade::SamplerNode **a3, uint64_t a4)
{
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo(this, a3[82]);
  int v9 = *(unsigned __int8 *)(LiMaterial::getSamplerInfo(this, a3[94]) + 316);
  if (*(unsigned char *)(SamplerInfo + 316)) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  int v11 = !v10;
  uint64_t v12 = LiMaterial::getSamplerInfo(this, a3[70]);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13) {
    BumpMaterialLayer::sampleLeanBumpMap(v12, this, (uint64_t)a3);
  }
  if (*(unsigned char *)(a1 + 24)) {
    int v14 = 0;
  }
  else {
    int v14 = v11;
  }
  if ((v14 & 1) != 0 || *(unsigned char *)(v12 + 316)) {
    BumpMaterialLayer::sampleRegularBumpMap(a1, this, (uint64_t)a3, a4, v14);
  }
  return 0;
}

void sub_1B7AF7490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BumpMapSample::~BumpMapSample((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void BumpMaterialLayer::sampleLeanBumpMap(int a1, os_unfair_lock_s *this, uint64_t a3)
{
  uint64_t SamplerInfo = (LiMaterialLayer *)LiMaterial::getSamplerInfo(this, *(const ProShade::SamplerNode **)(a3 + 656));
  LiMaterialLayer::calculateTriplanarNormal(SamplerInfo);
}

void sub_1B7AF795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount *a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, PCSharedCount *a13, uint64_t a14)
{
  PCSharedCount::~PCSharedCount(v15);
  PCSharedCount::~PCSharedCount(v14);
  PCSharedCount::~PCSharedCount(v16);
  PCSharedCount::~PCSharedCount(a9);
  *(void *)(v17 - 184) = a12;
  PCSharedCount::~PCSharedCount(a11);
  *(void *)(v17 - 152) = a14;
  PCSharedCount::~PCSharedCount(a13);
  *(void *)(v17 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v17 - 96));
  _Unwind_Resume(a1);
}

void BumpMapSample::~BumpMapSample(PCSharedCount *this)
{
  this[8].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 11);
  this[4].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 7);
  this->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 3);
}

void BumpMaterialLayer::sampleRegularBumpMap(int a1, os_unfair_lock_s *this, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = (const ProShade::SamplerNode **)(a3 + 656);
  if (!a5) {
    uint64_t v5 = (const ProShade::SamplerNode **)(a3 + 560);
  }
  uint64_t SamplerInfo = (LiMaterialLayer *)LiMaterial::getSamplerInfo(this, *v5);
  LiMaterialLayer::calculateTriplanarNormal(SamplerInfo);
}

void sub_1B7AFAA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,PCSharedCount *a26,uint64_t a27,uint64_t a28,uint64_t a29,PCSharedCount *a30,uint64_t a31,PCSharedCount *a32,uint64_t a33,PCSharedCount *a34,uint64_t a35,PCSharedCount *a36,uint64_t a37,PCSharedCount *a38,uint64_t a39,PCSharedCount *a40,uint64_t a41,PCSharedCount *a42)
{
  STACK[0x370] = v46;
  PCSharedCount::~PCSharedCount(v47);
  STACK[0x390] = v45;
  PCSharedCount::~PCSharedCount(v43);
  STACK[0x3B0] = v44;
  PCSharedCount::~PCSharedCount(v42);
  STACK[0x3D0] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x3E8]);
  STACK[0x3F0] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x408]);
  STACK[0x410] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x428]);
  STACK[0x490] = a27;
  PCSharedCount::~PCSharedCount(a26);
  BumpMapSample::~BumpMapSample(a42);
  STACK[0x510] = a31;
  PCSharedCount::~PCSharedCount(a30);
  STACK[0x530] = a33;
  PCSharedCount::~PCSharedCount(a32);
  STACK[0x550] = a35;
  PCSharedCount::~PCSharedCount(a34);
  *(void *)(v48 - 232) = a37;
  PCSharedCount::~PCSharedCount(a36);
  *(void *)(v48 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a39;
  PCSharedCount::~PCSharedCount(a38);
  *(void *)(v48 - 168) = a41;
  PCSharedCount::~PCSharedCount(a40);
  *(void *)(v48 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v48 - 112));
  _Unwind_Resume(a1);
}

void sub_1B7AFBCA8()
{
}

void sub_1B7AFBCB0()
{
}

void sub_1B7AFBCE8()
{
}

void sub_1B7AFBCF0()
{
  STACK[0x490] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1);
  STACK[0x410] = v0;
  JUMPOUT(0x1B7AFB414);
}

void sub_1B7AFBD30()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7AFB418);
}

void sub_1B7AFBD50()
{
  STACK[0x490] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1);
  STACK[0x410] = v0;
  JUMPOUT(0x1B7AFB420);
}

void sub_1B7AFBD90()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7AFB424);
}

void sub_1B7AFBDB0()
{
  STACK[0x490] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1);
  STACK[0x410] = v0;
  JUMPOUT(0x1B7AFB42CLL);
}

void sub_1B7AFBDF0()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7AFB430);
}

void sub_1B7AFBE14()
{
}

void sub_1B7AFBE1C()
{
}

void sub_1B7AFBE24()
{
}

void sub_1B7AFBE4C()
{
}

void sub_1B7AFBE54()
{
}

void sub_1B7AFBE80()
{
}

void sub_1B7AFBEAC()
{
}

void sub_1B7AFBEB4()
{
}

void sub_1B7AFBEBC()
{
}

void sub_1B7AFBEC4()
{
}

void BumpMaterialLayer::adjustBumpMapGain(BumpMaterialLayer *this, const PCSharedCount *a2, BumpMapSample *a3)
{
  v7[1].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(v8, a2 + 226);
  v5[0] = *((unsigned char *)a3 + 8);
  uint64_t v6 = *((void *)a3 + 2);
  PCSharedCount::PCSharedCount(v7, (const PCSharedCount *)a3 + 3);
  if (*((_DWORD *)this + 12) == 2) {
    ProShade::Selector_base::_select((uint64_t)v5, (const PCString *)4);
  }
  v8[2].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  operator new();
}

void sub_1B7AFCC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount *a9, uint64_t a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCSharedCount a29,void *a30,uint64_t a31,uint64_t a32,PCSharedCount a33,void *a34,uint64_t a35,uint64_t a36,PCSharedCount a37,uint64_t a38)
{
  *(void *)(v39 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v38 + 3);
  *(void *)(v39 - 152) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 128));
  a34 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a37);
  a30 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a33);
  PCSharedCount::~PCSharedCount(&a29);
  a38 = a10;
  PCSharedCount::~PCSharedCount(a9);
  *(void *)(v39 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v39 - 184) = a11;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 160));
  _Unwind_Resume(a1);
}

void sub_1B7AFD318()
{
}

void BumpMaterialLayer::adjustBumpMapGain(BumpMaterialLayer *a1, const PCSharedCount *a2, const PCSharedCount *a3)
{
  BumpMapSample::BumpMapSample((BumpMapSample *)&v6);
  char v7 = 0;
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v6, a3);
  BumpMaterialLayer::adjustBumpMapGain(a1, a2, (BumpMapSample *)&v6);
}

void sub_1B7AFD440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BumpMapSample::~BumpMapSample((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void BumpMaterialLayer::Add::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  uint64_t v8 = (const ProShade::SamplerNode **)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  BumpMapSample::BumpMapSample((BumpMapSample *)v12);
  if (BumpMaterialLayer::sampleBumpMap(*(void *)(a1 + 8), *(os_unfair_lock_s **)(a2 + 40), v8, a3))
  {
    ProShade::operator-(v10, v12, a3 + 160);
    ProShade::operator+(v19, a3 + 192, v10);
    ProShade::VarT<ProShade::Node>::operator=(a3 + 192, v19);
    v19[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCSharedCount::~PCSharedCount(&v20);
    v10[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCSharedCount::~PCSharedCount(&v11);
    ProShade::operator+(v10, a3 + 192, a3 + 160);
    ProShade::Func<ProShade::Func_normalize>::eval(v10, (uint64_t)v19);
    ProShade::VarT<ProShade::Node>::operator=(a3 + 128, v19);
    v19[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCSharedCount::~PCSharedCount(&v20);
    v10[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCSharedCount::~PCSharedCount(&v11);
    if (v18)
    {
      if (*(unsigned char *)(a3 + 768))
      {
        int v9 = &unk_1F11193B8;
        operator new();
      }
      ProShade::VarT<ProShade::Node>::operator=(a3 + 776, &v14);
      ProShade::VarT<ProShade::Node>::operator=(a3 + 808, &v16);
      *(unsigned char *)(a3 + 768) = 1;
    }
  }
  v16.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v17);
  v14.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v15);
  v12[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B7AFD9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCSharedCount a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,PCSharedCount a25,PCSharedCount a26)
{
  *(void *)(v29 - 9ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v28 + 3);
  PCSharedCount::~PCSharedCount(&a17);
  PCSharedCount::~PCSharedCount(v27);
  a22 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a25);
  PCSharedCount::~PCSharedCount(v26);
  BumpMapSample::~BumpMapSample(&a26);
  _Unwind_Resume(a1);
}

uint64_t BumpMaterialLayer::computeNormal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);

  return v2();
}

uint64_t BumpMaterialLayer::writeHash(BumpMaterialLayer *this, int8x8_t *a2)
{
  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B837CCF4 & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t, int8x8_t *))(*(void *)v4 + 32))(v4, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 12);
  uint64_t v6 = *(uint64_t (**)(int8x8_t *, uint64_t))(*(void *)a2 + 48);

  return v6(a2, v5);
}

void FlatMaterialLayer::Replace::eval(uint64_t a1, uint64_t a2, const PCSharedCount *a3)
{
  uint64_t v5 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  LiMaterialLayerUniform::get(v5, DstAlphaFactor);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 8) + 88, a3 + 88);
  operator new();
}

void sub_1B7AFE130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  PCSharedCount::~PCSharedCount(v26 + 3);
  PCSharedCount::~PCSharedCount(v23);
  PCSharedCount::~PCSharedCount(v25);
  PCSharedCount::~PCSharedCount(v24);
  _Unwind_Resume(a1);
}

void FlatMaterialLayer::sampleLayerColor(FlatMaterialLayer *this, os_unfair_lock_s *a2, const ProShade::SamplerNode **a3)
{
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo(a2, a3[46]);
  long long v5 = *(_OWORD *)(SamplerInfo + 316);
  uint64_t v6 = *(void *)(SamplerInfo + 332);
  uint64_t v4 = &unk_1F11193B8;
  operator new();
}

void sub_1B7AFEA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, uint64_t a12)
{
  *(void *)(v14 - 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v12;
  PCSharedCount::~PCSharedCount(v13);
  *(void *)(v14 - 144) = a12;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void sub_1B7AFED34()
{
}

void FlatMaterialLayer::Over::eval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  long long v5 = (FlatMaterialLayer *)LiMaterialLayerUniform::get(v3, DstAlphaFactor);
  FlatMaterialLayer::sampleLayerColor(v5, *(os_unfair_lock_s **)(a2 + 40), (const ProShade::SamplerNode **)v5);
}

void sub_1B7AFF400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, uint64_t a15)
{
  *(void *)(v15 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a11;
  PCSharedCount::~PCSharedCount(a10);
  *(void *)(v15 - 184) = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v15 - 152) = a15;
  PCSharedCount::~PCSharedCount(a14);
  *(void *)(v15 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v15 - 96));
  _Unwind_Resume(a1);
}

void FlatMaterialLayer::Multiply::eval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  long long v5 = (FlatMaterialLayer *)LiMaterialLayerUniform::get(v3, DstAlphaFactor);
  FlatMaterialLayer::sampleLayerColor(v5, *(os_unfair_lock_s **)(a2 + 40), (const ProShade::SamplerNode **)v5);
}

void sub_1B7AFFB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCSharedCount a19, void *a20,uint64_t a21,uint64_t a22,PCSharedCount a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,PCSharedCount a31)
{
  a20 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a23);
  PCSharedCount::~PCSharedCount(&a19);
  PCSharedCount::~PCSharedCount(v31);
  a28 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a31);
  PCSharedCount::~PCSharedCount(v34);
  PCSharedCount::~PCSharedCount(v33);
  *(void *)(v35 - 184) = a9;
  PCSharedCount::~PCSharedCount(v32);
  *(void *)(v35 - 152) = a11;
  PCSharedCount::~PCSharedCount(a10);
  *(void *)(v35 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v35 - 96));
  _Unwind_Resume(a1);
}

void FlatMaterialLayer::Add::eval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  long long v5 = (FlatMaterialLayer *)LiMaterialLayerUniform::get(v3, DstAlphaFactor);
  FlatMaterialLayer::sampleLayerColor(v5, *(os_unfair_lock_s **)(a2 + 40), (const ProShade::SamplerNode **)v5);
}

void sub_1B7B00140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCSharedCount a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,PCSharedCount a37,uint64_t a38)
{
  a30 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v39 + 3);
  PCSharedCount::~PCSharedCount(&a25);
  PCSharedCount::~PCSharedCount(v38);
  PCSharedCount::~PCSharedCount(v41);
  a26 = a9;
  PCSharedCount::~PCSharedCount(v40);
  a34 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a37);
  a38 = a11;
  PCSharedCount::~PCSharedCount(a10);
  *(void *)(v42 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v42 - 184) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v42 - 160));
  _Unwind_Resume(a1);
}

void LiMaterialBlend::composite<LiMaterialBlend::Add>(uint64_t a1)
{
}

void sub_1B7B009C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  PCSharedCount::~PCSharedCount(v68);
  PCSharedCount::~PCSharedCount(v67);
  PCSharedCount::~PCSharedCount(&a67);
  *(void *)(v71 - 248) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v71 - 224));
  *(void *)(v71 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = v69;
  PCSharedCount::~PCSharedCount(v70);
  *(void *)(v71 - 184) = a11;
  PCSharedCount::~PCSharedCount(a10);
  *(void *)(v71 - 152) = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v71 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a15;
  PCSharedCount::~PCSharedCount(a14);
  _Unwind_Resume(a1);
}

void sub_1B7B00D84()
{
}

uint64_t FlatMaterialLayer::isOpaque(HGGLBlendingInfo *a1, unsigned char *a2, os_unfair_lock_s *a3, uint64_t (***a4)(void, void))
{
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(a1);
  uint64_t result = LiMaterialLayerUniform::get(a3, DstAlphaFactor);
  if (!*((unsigned char *)a1 + 48) && !*((unsigned char *)a1 + 9))
  {
    uint64_t v10 = result;
    double v11 = 0.0;
    uint64_t result = (uint64_t)LiMaterial::get<double>((PCArray_base *)a3, result + 160, (BOOL *)&v11);
    if (fabs(v11 + -1.0) < 0.0000001)
    {
      uint64_t result = LiMaterial::getSamplerInfo(a3, *(const ProShade::SamplerNode **)(v10 + 368));
      if (!*(unsigned char *)(result + 316) || (uint64_t result = (**a4)(a4, *(void *)(v10 + 368)), result)) {
        *a2 = 1;
      }
    }
  }
  return result;
}

uint64_t FlatMaterialLayer::computeColor(uint64_t a1, uint64_t a2, const PCSharedCount *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(uint64_t, uint64_t, const PCSharedCount *))(*(void *)v6 + 16))(v6, a2, a3);
  char v7 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  LiMaterialLayerUniform::get(v7, DstAlphaFactor);
  if (*(unsigned char *)(a1 + 48))
  {
    v17[0] = &unk_1F11193B8;
    PCSharedCount v17[2] = 0;
    PCSharedCount::PCSharedCount(&v18);
    v15[0] = &unk_1F11193B8;
    v15[2] = 0;
    PCSharedCount::PCSharedCount(&v16);
    v13[0] = &unk_1F11193B8;
    PCSharedCount v13[2] = 0;
    PCSharedCount::PCSharedCount(&v14);
    v11[0] = &unk_1F11193B8;
    PCSharedCount v11[2] = 0;
    PCSharedCount::PCSharedCount(&v12);
    if (*(unsigned char *)(a1 + 49))
    {
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v17, a3 + 64);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v15, a3 + 84);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v13, (const PCSharedCount *)(a1 + 56));
      int v9 = (const PCSharedCount *)(a1 + 88);
    }
    else
    {
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v17, a3 + 84);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v15, a3 + 64);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v13, (const PCSharedCount *)(a1 + 88));
      int v9 = (const PCSharedCount *)(a1 + 56);
    }
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v11, v9);
    operator new();
  }
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[68], a3 + 64);
  return ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[84], a3 + 64);
}

void sub_1B7B0192C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, PCSharedCount *a17, PCSharedCount *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,PCSharedCount a35,void *a36,uint64_t a37,uint64_t a38,PCSharedCount a39,void *a40,uint64_t a41,uint64_t a42,PCSharedCount a43,void *a44,uint64_t a45,uint64_t a46,PCSharedCount a47,void *a48,uint64_t a49,uint64_t a50,PCSharedCount a51,uint64_t a52)
{
  *(void *)(v54 - 152) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v53 + 3);
  a36 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a39);
  PCSharedCount::~PCSharedCount(&a35);
  PCSharedCount::~PCSharedCount(v52);
  a40 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a43);
  *(void *)(v54 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v54 - 96));
  a44 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a47);
  a48 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a51);
  a52 = a13;
  PCSharedCount::~PCSharedCount(a12);
  *(void *)(v54 - 248) = a15;
  PCSharedCount::~PCSharedCount(a14);
  *(void *)(v54 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a16;
  PCSharedCount::~PCSharedCount(a17);
  *(void *)(v54 - 184) = a19;
  PCSharedCount::~PCSharedCount(a18);
  _Unwind_Resume(a1);
}

void sub_1B7B01D78()
{
}

void sub_1B7B01D80()
{
}

int8x8_t *FlatMaterialLayer::writeHash(FlatMaterialLayer *this, int8x8_t *a2)
{
  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B837CD1DLL & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t, int8x8_t *))(*(void *)v4 + 32))(v4, a2);
  }
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 48));
  char v5 = *((unsigned char *)this + 49);

  return PCHashWriteStream::writeValue(a2, v5);
}

void FlatMaterialLayer::FlatMaterialLayer(FlatMaterialLayer *this, uint64_t a2)
{
  *((void *)this + 15) = &unk_1F1199AC8;
  *((void *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((unsigned char *)this + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  LiMaterialLayer::LiMaterialLayer(this, (uint64_t *)&off_1F11226E8, a2);
  *(void *)this = &unk_1F1122660;
  *((void *)this + 15) = &unk_1F11226C8;
  operator new();
}

void sub_1B7B01FAC(_Unwind_Exception *a1)
{
  uint64_t v8 = v5;
  void *v7 = v8;
  PCSharedCount::~PCSharedCount(v6);
  PCSharedCount::~PCSharedCount(v4);
  *(void *)(v1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  *(unsigned char *)(v1 + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t *ProShade::Vec3::operator=(uint64_t *a1, const PCSharedCount *a2)
{
  a1[2] = (uint64_t)a2[2].var0;
  uint64_t v3 = a1 + 3;
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
  return a1;
}

void sub_1B7B02054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void ProShade::clamp(const PCSharedCount *a1, const PCSharedCount *a2, const PCSharedCount *a3)
{
  int var0 = a1[2].var0;
  v12[0] = &unk_1F11193B8;
  v12[2] = var0;
  PCSharedCount::PCSharedCount(&v13, a1 + 3);
  uint64_t v6 = a2[2].var0;
  v10[0] = &unk_1F11193B8;
  PCSharedCount v10[2] = v6;
  PCSharedCount::PCSharedCount(&v11, a2 + 3);
  char v7 = a3[2].var0;
  v8[0] = &unk_1F11193B8;
  PCSharedCount v8[2] = v7;
  PCSharedCount::PCSharedCount(&v9, a3 + 3);
  ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::eval((uint64_t)v12, (uint64_t)v10, (uint64_t)v8);
}

void sub_1B7B0219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void AbsorbLayer::AbsorbLayer(AbsorbLayer *this, uint64_t a2)
{
  *((void *)this + 4) = &unk_1F1199AC8;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 1;
  LiMaterialLayer::LiMaterialLayer(this, (uint64_t *)&off_1F11227B0, a2);
  *(void *)this = &unk_1F1122728;
  *((void *)this + 4) = &unk_1F1122790;
  *((unsigned char *)this + 27) = 0;
  *(_WORD *)((char *)this + 25) = 0;
}

void sub_1B7B0228C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

PCArray_base *AbsorbLayer::isOpaque(HGGLBlendingInfo *a1, unsigned char *a2, os_unfair_lock_s *a3)
{
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(a1);
  uint64_t v6 = LiMaterialLayerUniform::get(a3, DstAlphaFactor);
  double v8 = 0.0;
  uint64_t result = LiMaterial::get<double>((PCArray_base *)a3, v6 + 160, (BOOL *)&v8);
  if (fabs(v8 + -1.0) < 0.0000001) {
    *a2 = 1;
  }
  return result;
}

void AbsorbLayer::computeColor(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  uint64_t v6 = (const LiLayeredMaterial *)LiMaterialLayerUniform::get(v4, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(LiMaterialLayer **)(a2 + 40), v6, (const LiMaterialLayerUniform *)a1[26]);
}

void sub_1B7B039DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_objecta, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v70 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v67 + 3);
  *(void *)(v70 - 168) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v70 - 144));
  PCSharedCount::~PCSharedCount(&a67);
  *(void *)(v70 - 232) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v70 - 208));
  PCSharedCount::~PCSharedCount(v69);
  PCSharedCount::~PCSharedCount(v68);
  *(void *)(v70 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v70 - 176));
  _Unwind_Resume(a1);
}

uint64_t *ProShade::Vec4::operator=(uint64_t *a1, const PCSharedCount *a2)
{
  a1[2] = (uint64_t)a2[2].var0;
  uint64_t v3 = a1 + 3;
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
  return a1;
}

void sub_1B7B043DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void ProShade::VarT<ProShade::Node>::setName(const PCSharedCount *a1@<X0>, uint64_t *a2@<X1>, PCSharedCount *a3@<X8>)
{
  int var0 = a1[2].var0;
  if (!var0) {
    throw_PCNullPointerException(1);
  }
  char v7 = (uint64_t *)((char *)var0 + 32);
  if ((uint64_t *)((char *)var0 + 32) != a2)
  {
    LiString::dec((LiString *)((char *)var0 + 32));
    uint64_t v8 = *a2;
    uint64_t *v7 = *a2;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 - 12), 1u);
    }
  }
  a3->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a3[2].int var0 = a1[2].var0;

  PCSharedCount::PCSharedCount(a3 + 3, a1 + 3);
}

int8x8_t *AbsorbLayer::writeHash(AbsorbLayer *this, int8x8_t *a2)
{
  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B837CD46 & 0x7FFFFFFFFFFFFFFFLL));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 26));
  char v4 = *((unsigned char *)this + 27);

  return PCHashWriteStream::writeValue(a2, v4);
}

void LiMaterialLayerOperator::~LiMaterialLayerOperator(LiMaterialLayerOperator *this)
{
  *((void *)this + 1) = &unk_1F1199AC8;
  *((unsigned char *)this + 24) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 2);
}

{
  uint64_t vars8;

  *((void *)this + 1) = &unk_1F1199AC8;
  *((unsigned char *)this + 24) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 2);

  JUMPOUT(0x1BA9BFBA0);
}

void *LiMaterialLayerOperator::eval()
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"no op\n", 6);
}

void virtual thunk to'LiMaterialLayerOperator::~LiMaterialLayerOperator(LiMaterialLayerOperator *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 1) = &unk_1F1199AC8;
  v1[24] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 2);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 1) = &unk_1F1199AC8;
  v1[24] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 2);

  JUMPOUT(0x1BA9BFBA0);
}

void DiffuseMaterialLayer::ReplaceDiffuseColor::~ReplaceDiffuseColor(DiffuseMaterialLayer::ReplaceDiffuseColor *this)
{
  *((void *)this + 2) = &unk_1F1199AC8;
  *((unsigned char *)this + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 3);
}

{
  uint64_t vars8;

  *((void *)this + 2) = &unk_1F1199AC8;
  *((unsigned char *)this + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 3);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'DiffuseMaterialLayer::ReplaceDiffuseColor::~ReplaceDiffuseColor(DiffuseMaterialLayer::ReplaceDiffuseColor *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 2) = &unk_1F1199AC8;
  v1[32] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 3);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 2) = &unk_1F1199AC8;
  v1[32] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 3);

  JUMPOUT(0x1BA9BFBA0);
}

void DiffuseMaterialLayer::~DiffuseMaterialLayer(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122398;
  this[8].int var0 = (PC_Sp_counted_base *)&unk_1F1122400;
  PCSharedCount::~PCSharedCount(this + 6);
  this[8].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[10].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[9].var0);
}

{
  uint64_t vars8;

  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122398;
  this[8].int var0 = (PC_Sp_counted_base *)&unk_1F1122400;
  PCSharedCount::~PCSharedCount(this + 6);
  this[8].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[10].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[9].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'DiffuseMaterialLayer::~DiffuseMaterialLayer(DiffuseMaterialLayer *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122398;
  v1[8].int var0 = (PC_Sp_counted_base *)&unk_1F1122400;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1[8].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[10].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[9].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122398;
  v1[8].int var0 = (PC_Sp_counted_base *)&unk_1F1122400;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1[8].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[10].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[9].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void SpecularMaterialLayer::~SpecularMaterialLayer(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122490;
  this[19].int var0 = (PC_Sp_counted_base *)&unk_1F11224F8;
  PCSharedCount::~PCSharedCount(this + 16);
  PCSharedCount::~PCSharedCount(this + 14);
  PCSharedCount::~PCSharedCount(this + 12);
  PCSharedCount::~PCSharedCount(this + 10);
  this->int var0 = (PC_Sp_counted_base *)off_1F1123500;
  this[19].int var0 = (PC_Sp_counted_base *)off_1F1123568;
  PCSharedCount::~PCSharedCount(this + 7);
  PCSharedCount::~PCSharedCount(this + 5);
  this[19].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[21].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[20].var0);
}

{
  uint64_t vars8;

  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122490;
  this[19].int var0 = (PC_Sp_counted_base *)&unk_1F11224F8;
  PCSharedCount::~PCSharedCount(this + 16);
  PCSharedCount::~PCSharedCount(this + 14);
  PCSharedCount::~PCSharedCount(this + 12);
  PCSharedCount::~PCSharedCount(this + 10);
  this->int var0 = (PC_Sp_counted_base *)off_1F1123500;
  this[19].int var0 = (PC_Sp_counted_base *)off_1F1123568;
  PCSharedCount::~PCSharedCount(this + 7);
  PCSharedCount::~PCSharedCount(this + 5);
  this[19].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[21].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[20].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'SpecularMaterialLayer::~SpecularMaterialLayer(SpecularMaterialLayer *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122490;
  v1[19].int var0 = (PC_Sp_counted_base *)&unk_1F11224F8;
  PCSharedCount::~PCSharedCount(v1 + 16);
  PCSharedCount::~PCSharedCount(v1 + 14);
  PCSharedCount::~PCSharedCount(v1 + 12);
  PCSharedCount::~PCSharedCount(v1 + 10);
  v1->int var0 = (PC_Sp_counted_base *)off_1F1123500;
  v1[19].int var0 = (PC_Sp_counted_base *)off_1F1123568;
  PCSharedCount::~PCSharedCount(v1 + 7);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[19].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[21].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[20].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122490;
  v1[19].int var0 = (PC_Sp_counted_base *)&unk_1F11224F8;
  PCSharedCount::~PCSharedCount(v1 + 16);
  PCSharedCount::~PCSharedCount(v1 + 14);
  PCSharedCount::~PCSharedCount(v1 + 12);
  PCSharedCount::~PCSharedCount(v1 + 10);
  v1->int var0 = (PC_Sp_counted_base *)off_1F1123500;
  v1[19].int var0 = (PC_Sp_counted_base *)off_1F1123568;
  PCSharedCount::~PCSharedCount(v1 + 7);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[19].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[21].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[20].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void BumpMaterialLayer::~BumpMaterialLayer(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122568;
  this[7].int var0 = (PC_Sp_counted_base *)&unk_1F11225D0;
  PCSharedCount::~PCSharedCount(this + 5);
  this[7].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[9].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[8].var0);
}

{
  uint64_t vars8;

  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122568;
  this[7].int var0 = (PC_Sp_counted_base *)&unk_1F11225D0;
  PCSharedCount::~PCSharedCount(this + 5);
  this[7].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[9].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[8].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'BumpMaterialLayer::~BumpMaterialLayer(BumpMaterialLayer *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122568;
  v1[7].int var0 = (PC_Sp_counted_base *)&unk_1F11225D0;
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[7].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[9].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[8].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122568;
  v1[7].int var0 = (PC_Sp_counted_base *)&unk_1F11225D0;
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[7].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[9].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[8].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void FlatMaterialLayer::~FlatMaterialLayer(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122660;
  this[15].int var0 = (PC_Sp_counted_base *)&unk_1F11226C8;
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 14);
  this[7].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 10);
  PCSharedCount::~PCSharedCount(this + 5);
  this[15].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[17].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[16].var0);
}

{
  uint64_t vars8;

  this->int var0 = (PC_Sp_counted_base *)&unk_1F1122660;
  this[15].int var0 = (PC_Sp_counted_base *)&unk_1F11226C8;
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 14);
  this[7].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 10);
  PCSharedCount::~PCSharedCount(this + 5);
  this[15].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[17].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[16].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'FlatMaterialLayer::~FlatMaterialLayer(FlatMaterialLayer *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122660;
  v1[15].int var0 = (PC_Sp_counted_base *)&unk_1F11226C8;
  v1[11].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 14);
  v1[7].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 10);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[15].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[17].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[16].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F1122660;
  v1[15].int var0 = (PC_Sp_counted_base *)&unk_1F11226C8;
  v1[11].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 14);
  v1[7].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 10);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[15].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[17].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[16].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void AbsorbLayer::~AbsorbLayer(AbsorbLayer *this)
{
  *((void *)this + 4) = &unk_1F1199AC8;
  *((unsigned char *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);
}

{
  uint64_t vars8;

  *((void *)this + 4) = &unk_1F1199AC8;
  *((unsigned char *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'AbsorbLayer::~AbsorbLayer(AbsorbLayer *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 4) = &unk_1F1199AC8;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 4) = &unk_1F1199AC8;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);

  JUMPOUT(0x1BA9BFBA0);
}

PCSharedCount *ProShade::Vec4::Vec4(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1123970;
  ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
  return a1;
}

void sub_1B7B057BC(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
  else
  }
    char v4 = 0;
  PCSharedCount v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      if (v6) {
        ProShade::ScalarFunctionTraits_2<ProShade::max_traits>::compute((uint64_t)v4, (uint64_t)v6);
      }
    }
  }
  PCSharedCount::PCSharedCount(&v7);
  operator new();
}

void sub_1B7B0598C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_2<ProShade::max_traits>::compute(uint64_t a1, uint64_t a2)
{
  v8[18] = *MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v8);
  ProShade::Value::Value(v7);
  ProShade::Value::Value(&v6);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 224))(a1, v8);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 224))(a2, v7);
  if (SLODWORD(v8[0]) > 1)
  {
    if (LODWORD(v8[0]) != 2) {
      goto LABEL_8;
    }
    int v4 = v7[0];
  }
  else
  {
    int v4 = v7[0];
    if (SLODWORD(v7[0]) < 2)
    {
      ProShade::eval_type<ProShade::max_traits,BOOL>((uint64_t)v8, (uint64_t)v7, &v6);
      goto LABEL_9;
    }
  }
  if (v4 <= 2)
  {
    ProShade::eval_type<ProShade::max_traits,int>((uint64_t)v8, (uint64_t)v7, &v6);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::max_traits,double>((uint64_t)v8, (uint64_t)v7, &v6);
LABEL_9:
  ProShade::Const::create((ProShade::Const *)&v6, v5);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1123A90);
  *(void *)a1 = &unk_1F11239B8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1123A70;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v13, a2);
  int v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6) {
    int v7 = (2 * (v6 + 1)) | 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  ProShade::VarT<ProShade::Node>::VarT(v13, a3);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 < 1) {
    PCArray_base::badIndex(v10);
  }
  if (v11 <= 1) {
    PCArray_base::badIndex(v10);
  }
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(void *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B05D64(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::max_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"max doesn't apply to BOOL", v8);
  }
  return result;
}

void sub_1B7B05EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::max_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)2, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    int v9 = (int *)(a2 + 16);
    PCString v10 = (int *)(a1 + 16);
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      int v14 = *v9++;
      int v13 = v14;
      if (v11 <= v14) {
        int v11 = v13;
      }
      *(_DWORD *)Serializer = v11;
      Serializer = (void ***)((char *)Serializer + 4);
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B0603C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::max_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    int v9 = (double *)(a2 + 16);
    PCString v10 = (double *)(a1 + 16);
    do
    {
      double v11 = *v10++;
      double v12 = v11;
      double v13 = *v9++;
      double v14 = v13;
      if (v12 < v13) {
        double v12 = v14;
      }
      *(double *)Serializer++ = v12;
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B0619C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "max");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B06338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 24941;
  PCSharedCount v6[2] = 120;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B06454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "max");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      double v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  char v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B06700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::clone()
{
}

void sub_1B7B068B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  uint64_t v5 = (int *)(*(void *)(a2 + 16) + 144);
  int v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2) {
      goto LABEL_16;
    }
    int v7 = *v5;
  }
  else
  {
    int v7 = *v5;
    if (*v5 < 2)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      return ProShade::eval_type<ProShade::max_traits,BOOL>(v8, (uint64_t)v5, a3);
    }
  }
  if (v7 <= 2)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    return ProShade::eval_type<ProShade::max_traits,int>(v10, (uint64_t)v5, a3);
  }
LABEL_16:
  uint64_t v11 = *(void *)(a2 + 16);

  return ProShade::eval_type<ProShade::max_traits,double>(v11, (uint64_t)v5, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1123A90);
  *(void *)a1 = &unk_1F11239B8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1123A70;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B06C30(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5) {
  else
  }
    int v6 = 0;
  int v7 = *(const void **)(a2 + 16);
  if (v7) {
  else
  }
    uint64_t v8 = 0;
  uint64_t v9 = *(const void **)(a3 + 16);
  if (v9)
  {
    if (v6)
    {
      if (v8)
      {
        if (v10) {
          ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::compute((uint64_t)v6, (uint64_t)v8, (uint64_t)v10);
        }
      }
    }
  }
  operator new();
}

void sub_1B7B06E6C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::compute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[18] = *MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v12);
  ProShade::Value::Value(v11);
  ProShade::Value::Value(v10);
  ProShade::Value::Value(&v9);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 224))(a1, v12);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 224))(a2, v11);
  (*(void (**)(uint64_t, void *))(*(void *)a3 + 224))(a3, v10);
  if (SLODWORD(v12[0]) > 1)
  {
    if (LODWORD(v12[0]) != 2) {
      goto LABEL_11;
    }
    int v6 = v11[0];
  }
  else
  {
    int v6 = v11[0];
    if (SLODWORD(v11[0]) < 2)
    {
      int v7 = v10[0];
      if (SLODWORD(v10[0]) < 2)
      {
        ProShade::eval_type<ProShade::mix_traits,BOOL>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
        goto LABEL_12;
      }
LABEL_9:
      if (v7 <= 2)
      {
        ProShade::eval_type<ProShade::mix_traits,int>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
        goto LABEL_12;
      }
LABEL_11:
      ProShade::eval_type<ProShade::mix_traits,double>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
LABEL_12:
      ProShade::Const::create((ProShade::Const *)&v9, v8);
    }
  }
  if (v6 > 2) {
    goto LABEL_11;
  }
  int v7 = v10[0];
  goto LABEL_9;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3, PCShared_base *a4)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1123D08);
  *(void *)a1 = &unk_1F1123C30;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1123CE8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v17, a2);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::VarT<ProShade::Node>::VarT(v17, a3);
  int v10 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v10) {
    int v11 = (2 * (v10 + 1)) | 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v10 + 1, v11);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::VarT<ProShade::Node>::VarT(v17, a4);
  int v12 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v12) {
    int v13 = (2 * (v12 + 1)) | 1;
  }
  else {
    int v13 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v12 + 1, v13);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  int v15 = *(_DWORD *)(a1 + 60);
  if (v15 < 1) {
    PCArray_base::badIndex(v14);
  }
  if (v15 < 2) {
    PCArray_base::badIndex(v14);
  }
  if (v15 <= 2) {
    PCArray_base::badIndex(v14);
  }
  ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(void *)(a1 + 64) + 32), (const PCSharedCount *)(*(void *)(a1 + 64) + 64));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B07324(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::mix_traits,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v12, "not implemented yet");
    PCString::PCString(&v11, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v12, &v11, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result > 0) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"mix doesn't apply to BOOL", v9);
  }
  return result;
}

void sub_1B7B074A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::mix_traits,int>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v21, "not implemented yet");
    PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v21, &v20, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    int v11 = (int *)(a3 + 16);
    PCString v12 = (int *)(a2 + 16);
    int v13 = (int *)(a1 + 16);
    do
    {
      int v15 = *v13++;
      int v14 = v15;
      int v17 = *v12++;
      int v16 = v17;
      int v18 = *v11++;
      *(double *)Serializer++ = (double)v16 * (double)v18 + (1.0 - (double)v18) * (double)v14;
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B07628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::mix_traits,double>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v21, "not implemented yet");
    PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v21, &v20, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    int v11 = (double *)(a3 + 16);
    PCString v12 = (double *)(a2 + 16);
    int v13 = (double *)(a1 + 16);
    do
    {
      double v14 = *v13++;
      double v15 = v14;
      double v16 = *v12++;
      double v17 = v16;
      double v18 = *v11++;
      *(double *)Serializer++ = v17 * v18 + v15 * (1.0 - v18);
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B077A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(uint64_t a1, const PCString *a2, const PCSharedCount *a3, const PCSharedCount *a4)
{
  int var0 = a2[2].var0;
  if (!var0) {
    throw_PCNullPointerException(1);
  }
  int length_high = HIDWORD(var0->length);
  int v10 = a3[2].var0;
  if (!v10) {
    throw_PCNullPointerException(1);
  }
  if (length_high > v10[7])
  {
    int v10 = a2[2].var0;
    if (!v10) {
      throw_PCNullPointerException(1);
    }
  }
  int v11 = v10[7];
  PCString v12 = a4[2].var0;
  if (!v12) {
    throw_PCNullPointerException(1);
  }
  if (v11 > v12[7])
  {
    int v13 = a2[2].var0;
    if (!v13) {
      throw_PCNullPointerException(1);
    }
    int v14 = HIDWORD(v13->length);
    PCString v12 = a3[2].var0;
    if (!v12) {
      throw_PCNullPointerException(1);
    }
    if (v14 > v12[7])
    {
      PCString v12 = a2[2].var0;
      if (!v12) {
        throw_PCNullPointerException(1);
      }
    }
  }
  unsigned int v15 = v12[7];
  *(_DWORD *)(a1 + 28) = v15;
  Width = (const PCString *)ProShade::shapeGetWidth(v15, a2);
  int v18 = *(_DWORD *)(a1 + 28);
  if (v18 >= 2)
  {
    char v19 = Width;
    PCString v20 = a2[2].var0;
    if (!v20) {
      throw_PCNullPointerException(1);
    }
    int v21 = HIDWORD(v20->length);
    if (v21 < v18)
    {
      if (v21 != 1) {
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (first argument)", v17);
      }
      ProShade::Ctor::makeWidth(v20->length, Width, (const PCSharedCount *)a2, v32);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a2, v32);
      v32[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v33);
    }
    PCSharedCount v22 = a3[2].var0;
    if (!v22) {
      throw_PCNullPointerException(1);
    }
    int v23 = *((_DWORD *)v22 + 7);
    if (v23 < *(_DWORD *)(a1 + 28))
    {
      if (v23 != 1) {
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (second argument)", v17);
      }
      ProShade::Ctor::makeWidth(*((_DWORD *)v22 + 6), v19, a3, v32);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, v32);
      v32[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v33);
    }
    uint64_t v24 = a4[2].var0;
    if (!v24) {
      throw_PCNullPointerException(1);
    }
    int v25 = *((_DWORD *)v24 + 7);
    if (v25 < *(_DWORD *)(a1 + 28))
    {
      if (v25 != 1) {
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (third argument)", v17);
      }
      ProShade::Ctor::makeWidth(*((_DWORD *)v24 + 6), v19, a4, v32);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a4, v32);
      v32[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v33);
    }
  }
  double v26 = a2[2].var0;
  if (!v26) {
    throw_PCNullPointerException(1);
  }
  int length = v26->length;
  uint64_t v28 = a3[2].var0;
  if (!v28) {
    throw_PCNullPointerException(1);
  }
  int v29 = *((_DWORD *)v28 + 6);
  double v30 = a4[2].var0;
  if (!v30) {
    throw_PCNullPointerException(1);
  }
  int v31 = *((_DWORD *)v30 + 6);
  if (v29 > v31) {
    int v31 = v29;
  }
  if (length > v31) {
    int v31 = length;
  }
  *(_DWORD *)(a1 + 24) = v31;
}

void sub_1B7B07AD8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "mix");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B07C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 26989;
  PCSharedCount v6[2] = 120;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B07D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "mix");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      PCString v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  char v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B08034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::clone()
{
}

void sub_1B7B081EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::computeValue(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  return ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::computeValue(a2, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1123D08);
  *(void *)a1 = &unk_1F1123C30;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1123CE8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B08480(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::computeValue(uint64_t a1, OZChannelBase *a2)
{
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  size_t v4 = *(int **)(a1 + 16);
  if (v3 < 2) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  if (v3 <= 2) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  uint64_t v5 = v4 + 36;
  int v6 = v4 + 72;
  if (*v4 >= 2)
  {
    if (*v4 != 2) {
      goto LABEL_21;
    }
    int v7 = *v5;
    goto LABEL_15;
  }
  int v7 = *v5;
  if (*v5 >= 2)
  {
LABEL_15:
    if (v7 > 2) {
      goto LABEL_21;
    }
    int v8 = *v6;
    goto LABEL_17;
  }
  int v8 = *v6;
  if (*v6 < 2)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    return ProShade::eval_type<ProShade::mix_traits,BOOL>(v9, (uint64_t)v5, (uint64_t)v6, a2);
  }
LABEL_17:
  if (v8 <= 2)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    return ProShade::eval_type<ProShade::mix_traits,int>(v11, (uint64_t)v5, (uint64_t)v6, a2);
  }
LABEL_21:
  uint64_t v12 = *(void *)(a1 + 16);

  return ProShade::eval_type<ProShade::mix_traits,double>(v12, (uint64_t)v5, (uint64_t)v6, a2);
}

PCSharedCount *ProShade::Vec3::Vec3(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1123EA0;
  ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
  return a1;
}

void sub_1B7B08664(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dot>::eval(uint64_t a1, uint64_t a2)
{
  int v3 = *(const void **)(a1 + 16);
  if (v3) {
  else
  }
    size_t v4 = 0;
  uint64_t v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      if (v6) {
        ProShade::Func_dot::compute(v4, v6, v7);
      }
    }
  }
  PCSharedCount::PCSharedCount(&v8);
  operator new();
}

void sub_1B7B08834(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_dot::compute(ProShade::Func_dot *this, ProShade::Const *a2, ProShade::Const *a3)
{
  if (!ProShade::shapeIsMatrix(*((_DWORD *)this + 7)) && !ProShade::shapeIsMatrix(*((_DWORD *)a2 + 7)))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v12 = 0;
    int v13 = &unk_1F111F378;
    uint64_t v10 = &unk_1F111F378;
    uint64_t v11 = 0;
    (*(void (**)(ProShade::Func_dot *, void **))(*(void *)this + 216))(this, &v13);
    int v6 = (PCArray_base *)(*(uint64_t (**)(ProShade::Const *, void **))(*(void *)a2 + 216))(a2, &v10);
    if (HIDWORD(v14) == HIDWORD(v11))
    {
      if (SHIDWORD(v14) < 1)
      {
        double v9 = 0.0;
      }
      else
      {
        uint64_t v8 = 0;
        double v9 = 0.0;
        do
        {
          if (v8 >= SHIDWORD(v11)) {
            PCArray_base::badIndex(v6);
          }
          if (v8 >= SHIDWORD(v14)) {
            PCArray_base::badIndex(v6);
          }
          double v9 = v9 + *(double *)(v12 + 8 * v8) * *(double *)(v15 + 8 * v8);
          ++v8;
        }
        while (HIDWORD(v14) != v8);
      }
      ProShade::Const::create(v6, v9);
    }
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot arguments must be the same length", v7);
  }
  ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot doesn't apply to matrices", v5);
}

void sub_1B7B08BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t ProShade::Func<ProShade::Func_dot>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1123FC0);
  *(void *)a1 = &unk_1F1123EE8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1123FA0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v19, a2);
  int v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6) {
    int v7 = (2 * (v6 + 1)) | 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v20);
  ProShade::VarT<ProShade::Node>::VarT(v19, a3);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v20);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 < 1) {
    PCArray_base::badIndex(v10);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = v12;
  if (v11 <= 1) {
    PCArray_base::badIndex(v10);
  }
  *(_DWORD *)(a1 + 28) = 1;
  uint64_t v14 = *(void *)(v12 + 16);
  if (!v14) {
    throw_PCNullPointerException(1);
  }
  int v15 = *(_DWORD *)(v14 + 24);
  uint64_t v16 = *(void *)(v13 + 48);
  if (!v16) {
    throw_PCNullPointerException(1);
  }
  int v17 = *(_DWORD *)(v16 + 24);
  if (v15 > v17) {
    int v17 = v15;
  }
  *(_DWORD *)(a1 + 24) = v17;
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B08E2C(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dot>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_dot>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_dot>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "dot");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B08FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dot>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 28516;
  PCSharedCount v6[2] = 116;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B09118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dot>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_dot>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "dot");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_dot>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      uint64_t v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  char v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B093C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dot>::clone()
{
}

void sub_1B7B0957C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void *ProShade::Func<ProShade::Func_dot>::computeValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ProShade::Func_dot::computeValue(a2, a3);
}

void virtual thunk to'ProShade::Func<ProShade::Func_dot>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_dot>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1123FC0);
  *(void *)a1 = &unk_1F1123EE8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1123FA0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B09810(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void *ProShade::Func_dot::computeValue(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 <= 1) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  if (*(_DWORD *)v4 != 3)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v15, "not implemented yet");
    PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v15, &v14, 1087);
    *(void *)exception = &unk_1F10B1208;
  }
  if (*(_DWORD *)(v4 + 144) != 3)
  {
    int v13 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v15, "not implemented yet");
    PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(v13, &v15, &v14, 1090);
    *(void *)int v13 = &unk_1F10B1208;
  }
  if (!ProShade::shapeIsVector(*(_DWORD *)(v4 + 4))) {
    goto LABEL_17;
  }
  int v6 = *(_DWORD *)(v4 + 4);
  if (v6 != *(_DWORD *)(v4 + 148)) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot vectors are not the same shape", v5);
  }
  if (v6 == 4)
  {
    float64x2_t v9 = vmulq_f64(*(float64x2_t *)(v4 + 16), *(float64x2_t *)(v4 + 160));
    float64x2_t v10 = vmulq_f64(*(float64x2_t *)(v4 + 32), *(float64x2_t *)(v4 + 176));
    v15.int var0 = (__CFString *)*(_OWORD *)&vaddq_f64(vaddq_f64(vaddq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)), v10), (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1));
    return ProShade::Value::set(a2, (const PCString *)3, 1, &v15);
  }
  if (v6 == 3)
  {
    float64x2_t v8 = vmulq_f64(*(float64x2_t *)(v4 + 24), *(float64x2_t *)(v4 + 168));
    double v7 = *(double *)(v4 + 16) * *(double *)(v4 + 160) + v8.f64[0] + v8.f64[1];
    goto LABEL_14;
  }
  if (v6 != 2) {
LABEL_17:
  }
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot applies only to vectors", v5);
  double v7 = vaddvq_f64(vmulq_f64(*(float64x2_t *)(v4 + 16), *(float64x2_t *)(v4 + 160)));
LABEL_14:
  v15.int var0 = *(__CFString **)&v7;
  return ProShade::Value::set(a2, (const PCString *)3, 1, &v15);
}

void sub_1B7B09A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_normalize>::eval(const PCSharedCount *a1@<X0>, uint64_t a2@<X8>)
{
  v14[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  int var0 = a1[2].var0;
  if (var0)
  {
    if (v5)
    {
      int v6 = v5;
      ProShade::Value::Value(&v11);
      ProShade::Value::Value(&v10);
      (*(void (**)(void *, void **))(*(void *)v6 + 224))(v6, &v11);
      ProShade::Func_normalize::eval((ProShade::Func_normalize *)&v11, &v10, v7);
      ProShade::Const::create((ProShade::Const *)&v10, v8);
    }
  }
  char v11 = &unk_1F11193B8;
  uint64_t v13 = 0;
  PCSharedCount::PCSharedCount(v14);
  float64x2_t v9 = a1[2].var0;
  if (!v9
  {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v11, a1);
  *(void *)a2 = &unk_1F11193B8;
  *(unsigned char *)(a2 + 8) = v12;
  *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v13;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), v14);
  char v11 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v14);
}

void sub_1B7B09D54(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10B1C40241F72B2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_normalize>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124250);
  *(void *)a1 = &unk_1F1124178;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124230;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B09EF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

OZChannelBase *ProShade::Func_normalize::eval(ProShade::Func_normalize *this, OZChannelBase *a2, ProShade::Value *a3)
{
  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 1))) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"normalize doesn't apply to matrices", v5);
  }
  ProShade::Value::set((uint64_t)a2, (const PCString *)*(unsigned int *)this, *((_DWORD *)this + 1));
  OZChannelBase::getSerializer(a2);
  uint64_t result = (OZChannelBase *)ProShade::shapeGetSize(*((_DWORD *)this + 1), v6);
  switch(*(_DWORD *)this)
  {
    case 0:
      ProShade::Error<PCIllegalArgumentException>::raise(result, v8);
    case 1:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v21, "not implemented yet");
      PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(exception, &v21, &v20, 1352);
      *(void *)exception = &unk_1F10B1208;
    case 2:
      PCSharedCount v18 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v21, "not implemented yet");
      PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(v18, &v21, &v20, 1353);
      *(void *)PCSharedCount v18 = &unk_1F10B1208;
    case 3:
      if ((int)result >= 1)
      {
        float64x2_t v9 = (double *)((char *)this + 16);
        p_var2 = (double *)&a2->var2;
        uint64_t v11 = result;
        double v12 = 0.0;
        uint64_t v13 = result;
        PCString v14 = (double *)((char *)this + 16);
        do
        {
          double v15 = *v14++;
          double v12 = v12 + v15 * v15;
          --v13;
        }
        while (v13);
        double v16 = sqrt(v12);
        do
        {
          double v17 = *v9++;
          *p_var2++ = v17 / v16;
          --v11;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B7B0A120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_normalize>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_normalize>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_normalize>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "normalize");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B0A2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_normalize>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 22, 0x8903763CuLL);
  v5[1] = v4 + 9;
  void v5[2] = v4 + 10;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  v6[8] = 101;
  *(void *)int v6 = *(void *)"normalize";
  *((unsigned char *)v5 + v4 + 21) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *float64x2_t v8 = 0;
    if (v8) {
      double v7 = v8 - 12;
    }
    else {
      double v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B0A3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_normalize>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_normalize>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "normalize");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_normalize>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      double v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  char v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B0A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_normalize>::clone()
{
}

void sub_1B7B0A860(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

OZChannelBase *ProShade::Func<ProShade::Func_normalize>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(ProShade::Func_normalize **)(a2 + 16);

  return ProShade::Func_normalize::eval(v3, a3, (ProShade::Value *)a3);
}

void virtual thunk to'ProShade::Func<ProShade::Func_normalize>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_normalize>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124250);
  *(void *)a1 = &unk_1F1124178;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124230;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B0AB34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
  else
  }
    size_t v4 = 0;
  uint64_t v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      if (v6) {
        ProShade::ScalarFunctionTraits_2<ProShade::min_traits>::compute((uint64_t)v4, (uint64_t)v6);
      }
    }
  }
  PCSharedCount::PCSharedCount(&v7);
  operator new();
}

void sub_1B7B0AD28(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_2<ProShade::min_traits>::compute(uint64_t a1, uint64_t a2)
{
  v8[18] = *MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v8);
  ProShade::Value::Value(v7);
  ProShade::Value::Value(&v6);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 224))(a1, v8);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 224))(a2, v7);
  if (SLODWORD(v8[0]) > 1)
  {
    if (LODWORD(v8[0]) != 2) {
      goto LABEL_8;
    }
    int v4 = v7[0];
  }
  else
  {
    int v4 = v7[0];
    if (SLODWORD(v7[0]) < 2)
    {
      ProShade::eval_type<ProShade::min_traits,BOOL>((uint64_t)v8, (uint64_t)v7, &v6);
      goto LABEL_9;
    }
  }
  if (v4 <= 2)
  {
    ProShade::eval_type<ProShade::min_traits,int>((uint64_t)v8, (uint64_t)v7, &v6);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::min_traits,double>((uint64_t)v8, (uint64_t)v7, &v6);
LABEL_9:
  ProShade::Const::create((ProShade::Const *)&v6, v5);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11244B0);
  *(void *)a1 = &unk_1F11243D8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124490;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v13, a2);
  int v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6) {
    int v7 = (2 * (v6 + 1)) | 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  ProShade::VarT<ProShade::Node>::VarT(v13, a3);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 < 1) {
    PCArray_base::badIndex(v10);
  }
  if (v11 <= 1) {
    PCArray_base::badIndex(v10);
  }
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(void *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B0B100(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::min_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"min doesn't apply to BOOL", v8);
  }
  return result;
}

void sub_1B7B0B278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::min_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)2, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    int v9 = (int *)(a2 + 16);
    PCString v10 = (int *)(a1 + 16);
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      int v14 = *v9++;
      int v13 = v14;
      if (v11 >= v14) {
        int v11 = v13;
      }
      *(_DWORD *)Serializer = v11;
      Serializer = (void ***)((char *)Serializer + 4);
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B0B3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::min_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    int v9 = (double *)(a2 + 16);
    PCString v10 = (double *)(a1 + 16);
    do
    {
      double v11 = *v10++;
      double v12 = v11;
      double v13 = *v9++;
      double v14 = v13;
      if (v12 > v13) {
        double v12 = v14;
      }
      *(double *)Serializer++ = v12;
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B0B538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "min");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B0B6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 26989;
  PCSharedCount v6[2] = 110;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B0B7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "min");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      double v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  char v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B0BA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::clone()
{
}

void sub_1B7B0BC54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  uint64_t v5 = (int *)(*(void *)(a2 + 16) + 144);
  int v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2) {
      goto LABEL_16;
    }
    int v7 = *v5;
  }
  else
  {
    int v7 = *v5;
    if (*v5 < 2)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      return ProShade::eval_type<ProShade::min_traits,BOOL>(v8, (uint64_t)v5, a3);
    }
  }
  if (v7 <= 2)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    return ProShade::eval_type<ProShade::min_traits,int>(v10, (uint64_t)v5, a3);
  }
LABEL_16:
  uint64_t v11 = *(void *)(a2 + 16);

  return ProShade::eval_type<ProShade::min_traits,double>(v11, (uint64_t)v5, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11244B0);
  *(void *)a1 = &unk_1F11243D8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124490;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B0BFCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval(uint64_t a1)
{
  v7[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = v2;
      ProShade::Value::Value(v6);
      ProShade::Value::Value(&v5);
      (*(void (**)(void *, void *))(*(void *)v3 + 224))(v3, v6);
      ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>::eval((int *)v6, &v5);
      ProShade::Const::create((ProShade::Const *)&v5, v4);
    }
  }
  v6[0] = &unk_1F11193B8;
  PCSharedCount v6[2] = 0;
  PCSharedCount::PCSharedCount(v7);
  operator new();
}

void sub_1B7B0C1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124728);
  *(void *)a1 = &unk_1F1124650;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124708;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B0C380(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    uint64_t result = ProShade::shapeGetSize(a1[1], v9);
    if (v4 == 2)
    {
      if ((int)result >= 1)
      {
        uint64_t v10 = a1 + 4;
        do
        {
          int v11 = *v10++;
          *(double *)Serializer++ = sqrt((double)v11);
          uint64_t result = (result - 1);
        }
        while (result);
      }
    }
    else if ((int)result >= 1)
    {
      double v12 = (double *)(a1 + 4);
      do
      {
        double v13 = *v12++;
        *(double *)Serializer++ = sqrt(v13);
        uint64_t result = (result - 1);
      }
      while (result);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    uint64_t result = ProShade::shapeGetSize(a1[1], v5);
    if ((int)result >= 1) {
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"sqrt doesn't apply to BOOL", v7);
    }
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "sqrt");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)OZChannelBase v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B0C5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  OZChannelBase v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  void v5[2] = v4 + 5;
  atomic_store(1u, v5);
  int v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1953657203;
  *((unsigned char *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B0C708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "sqrt");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      double v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  char v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B0C9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::clone()
{
}

void sub_1B7B0CB6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(int **)(a2 + 16);

  return ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>::eval(v3, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124728);
  *(void *)a1 = &unk_1F1124650;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124708;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B0CE40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_reflect>::eval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
  else
  }
    size_t v4 = 0;
  uint64_t v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      if (v6) {
        ProShade::Func_reflect::compute(v4, v6, v7);
      }
    }
  }
  PCSharedCount::PCSharedCount(&v8);
  operator new();
}

void sub_1B7B0D034(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_reflect::compute(ProShade::Func_reflect *this, ProShade::Const *a2, ProShade::Const *a3)
{
  if (!ProShade::shapeIsMatrix(*((_DWORD *)this + 7)) && !ProShade::shapeIsMatrix(*((_DWORD *)a2 + 7)))
  {
    int v6 = *((_DWORD *)this + 7);
    if (v6 == *((_DWORD *)a2 + 7))
    {
      if (v6 != 4)
      {
        if (v6 != 3)
        {
          if (v6 == 2)
          {
            (*(void (**)(double *__return_ptr, ProShade::Func_reflect *))(*(void *)this + 160))(&v16, this);
            (*(void (**)(double *__return_ptr, ProShade::Const *))(*(void *)a2 + 160))(&v12, a2);
            double v7 = v12 * v16 + v13 * v17 + v12 * v16 + v13 * v17;
            double v20 = v16 - v12 * v7;
            double v21 = v17 - v13 * v7;
            ProShade::Const::create();
          }
          ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"reflect arguments must be vectors", v5);
        }
        (*(void (**)(double *__return_ptr, ProShade::Func_reflect *))(*(void *)this + 168))(&v16, this);
        (*(void (**)(double *__return_ptr, ProShade::Const *))(*(void *)a2 + 168))(&v12, a2);
        double v10 = v12 * v16 + v13 * v17 + v14 * v18;
        double v11 = v10 + v10;
        double v20 = v16 - v12 * v11;
        double v21 = v17 - v13 * v11;
        double v22 = v18 - v14 * v11;
        ProShade::Const::create();
      }
      (*(void (**)(double *__return_ptr, ProShade::Func_reflect *))(*(void *)this + 176))(&v16, this);
      (*(void (**)(double *__return_ptr, ProShade::Const *))(*(void *)a2 + 176))(&v12, a2);
      double v8 = v12 * v16 + v13 * v17 + v14 * v18 + v15 * v19;
      double v9 = v8 + v8;
      double v20 = v16 - v12 * v9;
      double v21 = v17 - v13 * v9;
      double v22 = v18 - v14 * v9;
      double v23 = v19 - v15 * v9;
      ProShade::Const::create();
    }
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"reflect arguments must be the same length", v5);
  }
  ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"reflect doesn't apply to matrices", v5);
}

uint64_t ProShade::Func<ProShade::Func_reflect>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11249A0);
  *(void *)a1 = &unk_1F11248C8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124980;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v14, a2);
  int v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6) {
    int v7 = (2 * (v6 + 1)) | 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v15);
  ProShade::VarT<ProShade::Node>::VarT(v14, a3);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v15);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 < 1) {
    PCArray_base::badIndex(v10);
  }
  if (v11 <= 1) {
    PCArray_base::badIndex(v10);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 16);
  if (!v12) {
    throw_PCNullPointerException(1);
  }
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(v12 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v12 + 24);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B0D568(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_reflect>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_reflect>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_reflect>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "reflect");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B0D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_reflect>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 20, 0x8903763CuLL);
  v5[1] = v4 + 7;
  void v5[2] = v4 + 8;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (unsigned int *)((char *)v5 + v4 + 12);
  _DWORD *v6 = 1818649970;
  *(_DWORD *)((char *)v6 + 3) = 1952671084;
  *((unsigned char *)v5 + v4 + 19) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B0D85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_reflect>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_reflect>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "reflect");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_reflect>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      uint64_t v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  double v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B0DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_reflect>::clone()
{
}

void sub_1B7B0DCC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_reflect>::computeValue()
{
}

void virtual thunk to'ProShade::Func<ProShade::Func_reflect>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_reflect>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11249A0);
  *(void *)a1 = &unk_1F11248C8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124980;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B0DF54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_reflect::computeValue()
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 1470);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7B0E030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(const PCSharedCount *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int var0 = a1[2].var0;
  if (var0) {
  else
  }
    int v7 = 0;
  uint64_t v8 = *(const void **)(a2 + 16);
  if (v8)
  {
    if (v7)
    {
      if (v9) {
        ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>::compute((uint64_t)v7, (uint64_t)v9);
      }
    }
  }
  uint64_t v10 = &unk_1F11193B8;
  uint64_t v12 = 0;
  PCSharedCount::PCSharedCount(&v13);
  if (!ProShade::pow_traits::simplify(a1, a2, (uint64_t)&v10)) {
    operator new();
  }
  *(void *)a3 = &unk_1F11193B8;
  *(unsigned char *)(a3 + 8) = v11;
  *(void *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v12;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), &v13);
  uint64_t v10 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B7B0E278(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>::compute(uint64_t a1, uint64_t a2)
{
  v8[18] = *MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v8);
  ProShade::Value::Value(v7);
  ProShade::Value::Value(&v6);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 224))(a1, v8);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 224))(a2, v7);
  if (SLODWORD(v8[0]) > 1)
  {
    if (LODWORD(v8[0]) != 2) {
      goto LABEL_8;
    }
    int v4 = v7[0];
  }
  else
  {
    int v4 = v7[0];
    if (SLODWORD(v7[0]) < 2)
    {
      ProShade::eval_type<ProShade::pow_traits,BOOL>((uint64_t)v8, (uint64_t)v7, &v6);
      goto LABEL_9;
    }
  }
  if (v4 <= 2)
  {
    ProShade::eval_type<ProShade::pow_traits,int>((uint64_t)v8, (uint64_t)v7, &v6);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::pow_traits,double>((uint64_t)v8, (uint64_t)v7, &v6);
LABEL_9:
  ProShade::Const::create((ProShade::Const *)&v6, v5);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124C18);
  *(void *)a1 = &unk_1F1124B40;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124BF8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v13, a2);
  int v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6) {
    int v7 = (2 * (v6 + 1)) | 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  ProShade::VarT<ProShade::Node>::VarT(v13, a3);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 < 1) {
    PCArray_base::badIndex(v10);
  }
  if (v11 <= 1) {
    PCArray_base::badIndex(v10);
  }
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(void *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B0E650(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::pow_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"pow doesn't apply to BOOL", v8);
  }
  return result;
}

void sub_1B7B0E7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::eval_type<ProShade::pow_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  int Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if (Size >= 1)
  {
    int v9 = Size;
    PCString v10 = (int *)(a2 + 16);
    int v11 = (int *)(a1 + 16);
    do
    {
      int v13 = *v11++;
      int v12 = v13;
      int v14 = *v10++;
      *(long double *)Serializer++ = pow((double)v12, (double)v14);
      --v9;
    }
    while (v9);
  }
}

void sub_1B7B0E930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::eval_type<ProShade::pow_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  int Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if (Size >= 1)
  {
    int v9 = Size;
    PCString v10 = (double *)(a2 + 16);
    int v11 = (double *)(a1 + 16);
    do
    {
      double v12 = *v11++;
      long double v13 = v12;
      long double v14 = *v10++;
      *(long double *)Serializer++ = pow(v13, v14);
      --v9;
    }
    while (v9);
  }
}

void sub_1B7B0EA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

BOOL ProShade::pow_traits::simplify(const PCSharedCount *a1, uint64_t a2, uint64_t a3)
{
  BOOL isZero = ProShade::isZero(a2);
  if (isZero) {
    ProShade::Const::create((ProShade::Const *)isZero, 1.0);
  }
  BOOL result = ProShade::isOne(a2);
  if (result)
  {
    ProShade::VarT<ProShade::Node>::operator=(a3, a1);
    return 1;
  }
  return result;
}

void sub_1B7B0EBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, void *a13)
{
  a13 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v13 + 3);
  PCSharedCount::~PCSharedCount(&a12);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "pow");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B0EDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 28528;
  PCSharedCount v6[2] = 119;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B0EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  BOOL result = PCHashWriteStream::writeValue(this, "pow");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      BOOL result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      double v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  double v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B0F17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::clone()
{
}

void sub_1B7B0F334(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  uint64_t v5 = (int *)(*(void *)(a2 + 16) + 144);
  int v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2) {
      goto LABEL_16;
    }
    int v7 = *v5;
  }
  else
  {
    int v7 = *v5;
    if (*v5 < 2)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      ProShade::eval_type<ProShade::pow_traits,BOOL>(v8, (uint64_t)v5, a3);
      return;
    }
  }
  if (v7 <= 2)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    ProShade::eval_type<ProShade::pow_traits,int>(v9, (uint64_t)v5, a3);
    return;
  }
LABEL_16:
  uint64_t v10 = *(void *)(a2 + 16);

  ProShade::eval_type<ProShade::pow_traits,double>(v10, (uint64_t)v5, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124C18);
  *(void *)a1 = &unk_1F1124B40;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124BF8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B0F6AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::eval(uint64_t a1)
{
  v7[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = v2;
      ProShade::Value::Value(v6);
      ProShade::Value::Value(&v5);
      (*(void (**)(void *, void *))(*(void *)v3 + 224))(v3, v6);
      ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>::eval((int *)v6, &v5);
      ProShade::Const::create((ProShade::Const *)&v5, v4);
    }
  }
  v6[0] = &unk_1F11193B8;
  PCSharedCount v6[2] = 0;
  PCSharedCount::PCSharedCount(v7);
  operator new();
}

void sub_1B7B0F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124E90);
  *(void *)a1 = &unk_1F1124DB8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124E70;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B0FA60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>::eval(int *a1, OZChannelBase *a2)
{
  if (*a1 > 1)
  {
    int v7 = a1[1];
    if (*a1 == 2)
    {
      ProShade::Value::set((uint64_t)a2, (const PCString *)2, v7);
      Serializer = OZChannelBase::getSerializer(a2);
      uint64_t result = ProShade::shapeGetSize(a1[1], v9);
      if ((int)result >= 1)
      {
        uint64_t v10 = a1 + 4;
        do
        {
          int v12 = *v10++;
          int v11 = v12;
          if (v12 < 0) {
            int v11 = -v11;
          }
          *(_DWORD *)Serializer = v11;
          Serializer = (void ***)((char *)Serializer + 4);
          uint64_t result = (result - 1);
        }
        while (result);
      }
    }
    else
    {
      ProShade::Value::set((uint64_t)a2, (const PCString *)3, v7);
      int v13 = OZChannelBase::getSerializer(a2);
      uint64_t result = ProShade::shapeGetSize(a1[1], v14);
      if ((int)result >= 1)
      {
        PCSharedCount v15 = (double *)(a1 + 4);
        do
        {
          double v16 = *v15++;
          *(double *)v13++ = fabs(v16);
          uint64_t result = (result - 1);
        }
        while (result);
      }
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    uint64_t result = ProShade::shapeGetSize(a1[1], v4);
    if ((int)result >= 1) {
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"abs doesn't apply to BOOL", v6);
    }
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "abs");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)OZChannelBase v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B0FCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  OZChannelBase v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 25185;
  PCSharedCount v6[2] = 115;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B0FE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "abs");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      int v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  double v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B100B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::clone()
{
}

void sub_1B7B10268(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(int **)(a2 + 16);

  return ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>::eval(v3, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1124E90);
  *(void *)a1 = &unk_1F1124DB8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1124E70;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B1053C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_cond>::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[18] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5) {
  else
  }
    int v6 = 0;
  int v7 = *(const void **)(a2 + 16);
  if (v7) {
  else
  }
    uint64_t v8 = 0;
  uint64_t v9 = *(const void **)(a3 + 16);
  if (v9)
  {
    if (v6)
    {
      if (v8)
      {
        int v12 = v10;
        if (v10)
        {
          if (v8[7] == v10[7])
          {
            ProShade::Value::Value(v17);
            ProShade::Value::Value(v16);
            (*(void (**)(void *, void *))(*(void *)v6 + 224))(v6, v17);
            if (ProShade::Value::asBool((ProShade::Value *)v17, v13)) {
              int v14 = v8;
            }
            else {
              int v14 = v12;
            }
            (*(void (**)(_DWORD *, void *))(*(void *)v14 + 224))(v14, v16);
            ProShade::Const::create((ProShade::Const *)v16, v15);
          }
          ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cond arguments must be the same size", v11);
        }
      }
    }
  }
  operator new();
}

void sub_1B7B10860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cond>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3, PCShared_base *a4)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125108);
  *(void *)a1 = &unk_1F1125030;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11250E8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v22, a2);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v22);
  v22[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v23);
  ProShade::VarT<ProShade::Node>::VarT(v22, a3);
  int v10 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v10) {
    int v11 = (2 * (v10 + 1)) | 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v10 + 1, v11);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v22);
  v22[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v23);
  ProShade::VarT<ProShade::Node>::VarT(v22, a4);
  int v12 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v12) {
    int v13 = (2 * (v12 + 1)) | 1;
  }
  else {
    int v13 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v12 + 1, v13);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v22);
  v22[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v23);
  int v15 = *(_DWORD *)(a1 + 60);
  if (v15 < 1) {
    PCArray_base::badIndex(v14);
  }
  if (v15 < 2) {
    PCArray_base::badIndex(v14);
  }
  uint64_t v16 = *(void *)(a1 + 64);
  if (v15 <= 2) {
    PCArray_base::badIndex(v14);
  }
  uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 48);
  if (!v17) {
    throw_PCNullPointerException(1);
  }
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(v17 + 28);
  int v18 = *(_DWORD *)(v17 + 24);
  uint64_t v19 = *(void *)(v16 + 80);
  if (!v19) {
    throw_PCNullPointerException(1);
  }
  int v20 = *(_DWORD *)(v19 + 24);
  if (v18 > v20) {
    int v20 = v18;
  }
  *(_DWORD *)(a1 + 24) = v20;
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B10B9C(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cond>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_cond>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_cond>::repr(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void ProShade::Func<ProShade::Func_cond>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  void v5[2] = v4 + 5;
  atomic_store(1u, v5);
  int v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1684959075;
  *((unsigned char *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B10DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_cond>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_cond>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "cond");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_cond>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      int v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  uint64_t v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B1109C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_cond>::clone()
{
}

void sub_1B7B11254(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

__CFString **ProShade::Func<ProShade::Func_cond>::computeValue(PCArray_base *a1, uint64_t a2, __CFString **a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  BOOL v5 = ProShade::Value::asBool(*(ProShade::Value **)(a2 + 16), (const PCString *)a2);
  if (v5) {
    int v6 = 1;
  }
  else {
    int v6 = 2;
  }
  if (*(_DWORD *)(a2 + 12) <= v6) {
    PCArray_base::badIndex((PCArray_base *)v5);
  }
  uint64_t v7 = (const PCString *)(*(void *)(a2 + 16) + 144 * v6);

  return ProShade::Value::operator=(a3, v7);
}

void virtual thunk to'ProShade::Func<ProShade::Func_cond>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func_cond::repr(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(int *)(a1 + 12) <= 0) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  ProShade::VarT<ProShade::Node>::repr(*(void *)(a1 + 16));
  if (v32) {
    int v4 = *((_DWORD *)v32 - 2);
  }
  else {
    int v4 = 0;
  }
  BOOL v5 = malloc_type_malloc(v4 + 15, 0x8903763CuLL);
  uint64_t v6 = v4 + 2;
  void v5[2] = v4 + 3;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  *((_WORD *)v5 + ProCore_Impl::PCNSRefImpl::release(this + 6) = 10280;
  uint64_t v7 = v5 + 3;
  v5[1] = v6;
  memcpy((char *)v5 + 14, v32, v4);
  v7[v6] = 0;
  atomic_fetch_add(v5, 1u);
  int v29 = v5;
  size_t v8 = (int)v5[1];
  uint64_t v9 = (unsigned int *)malloc_type_malloc(v8 + 18, 0x8903763CuLL);
  atomic_store(1u, v9);
  atomic_store(0, v9);
  v9[1] = v8 + 5;
  _OWORD v9[2] = v8 + 6;
  uint64_t v10 = (PCArray_base *)memcpy(v9 + 3, v7, v8);
  int v11 = (char *)v9 + v8 + 12;
  *(_DWORD *)int v11 = 541007913;
  v11[4] = 40;
  *((unsigned char *)v9 + v8 + 17) = 0;
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  uint64_t v28 = v9;
  if (*(int *)(a1 + 12) <= 1) {
    PCArray_base::badIndex(v10);
  }
  ProShade::VarT<ProShade::Node>::repr(*(void *)(a1 + 16) + 32);
  size_t v12 = (int)v9[1];
  if (v31) {
    int v13 = *((_DWORD *)v31 - 2);
  }
  else {
    int v13 = 0;
  }
  uint64_t v27 = a2;
  size_t v14 = v12 + v13;
  int v15 = (unsigned int *)malloc_type_malloc(v14 + 13, 0x8903763CuLL);
  v15[1] = v14;
  v15[2] = v14 + 1;
  atomic_store(1u, v15);
  atomic_store(0, v15);
  memcpy(v15 + 3, v9 + 3, v12);
  memcpy((char *)v15 + v12 + 12, v31, v13);
  *((unsigned char *)v15 + v14 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v15, 1u);
  size_t v16 = (int)v15[1];
  uint64_t v17 = (unsigned int *)malloc_type_malloc(v16 + 18, 0x8903763CuLL);
  atomic_store(1u, v17);
  atomic_store(0, v17);
  v17[1] = v16 + 5;
  PCSharedCount v17[2] = v16 + 6;
  PCSharedCount v18 = (PCArray_base *)memcpy(v17 + 3, v15 + 3, v16);
  uint64_t v19 = (char *)v17 + v16 + 12;
  *(_DWORD *)uint64_t v19 = 540680233;
  v19[4] = 40;
  *((unsigned char *)v17 + v16 + 17) = 0;
  atomic_fetch_add((atomic_uint *volatile)v17, 1u);
  if (*(int *)(a1 + 12) <= 2) {
    PCArray_base::badIndex(v18);
  }
  ProShade::VarT<ProShade::Node>::repr(*(void *)(a1 + 16) + 64);
  size_t v20 = (int)v17[1];
  if (v30) {
    int v21 = *((_DWORD *)v30 - 2);
  }
  else {
    int v21 = 0;
  }
  size_t v22 = v20 + v21;
  PCSharedCount v23 = (unsigned int *)malloc_type_malloc(v22 + 13, 0x8903763CuLL);
  v23[1] = v22;
  v23[2] = v22 + 1;
  atomic_store(1u, v23);
  atomic_store(0, v23);
  memcpy(v23 + 3, v17 + 3, v20);
  memcpy((char *)v23 + v20 + 12, v30, v21);
  *((unsigned char *)v23 + v22 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v23, 1u);
  size_t v24 = (int)v23[1];
  int v25 = (unsigned int *)malloc_type_malloc(v24 + 15, 0x8903763CuLL);
  atomic_store(1u, v25);
  double v26 = v25 + 3;
  atomic_store(0, v25);
  v25[1] = v24 + 2;
  v25[2] = v24 + 3;
  memcpy(v25 + 3, v23 + 3, v24);
  *(_WORD *)((char *)v26 + v24) = 10537;
  *((unsigned char *)v26 + v24 + 2) = 0;
  *uint64_t v27 = v25 + 3;
  atomic_fetch_add((atomic_uint *volatile)v25, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1) {
    free(v23);
  }
  if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 - 3, 0xFFFFFFFF) == 1)
  {
    *double v30 = 0;
    free(v30 - 12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1) {
    free(v17);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (v31 && atomic_fetch_add((atomic_uint *volatile)v31 - 3, 0xFFFFFFFF) == 1)
  {
    *int v31 = 0;
    free(v31 - 12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1) {
    free(v28);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1) {
    free(v29);
  }
  if (v32)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v32 - 3, 0xFFFFFFFF) == 1)
    {
      *int v32 = 0;
      free(v32 - 12);
    }
  }
}

void sub_1B7B1183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, atomic_uint *a12, atomic_uint *a13, atomic_uint *a14)
{
  if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1) {
    free(v16);
  }
  if (a12 && atomic_fetch_add(a12 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a12 = 0;
    free(a12 - 3);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1) {
    free(v15);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1) {
    free(v14);
  }
  if (a13 && atomic_fetch_add(a13 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a13 = 0;
    free(a13 - 3);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1) {
    free(a10);
  }
  if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1) {
    free(a11);
  }
  if (a14)
  {
    if (atomic_fetch_add(a14 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a14 = 0;
      free(a14 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::Func<ProShade::Func_cond>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125108);
  *(void *)a1 = &unk_1F1125030;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11250E8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B11AF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::eval(uint64_t a1)
{
  v7[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = v2;
      ProShade::Value::Value(v6);
      ProShade::Value::Value(&v5);
      (*(void (**)(void *, void *))(*(void *)v3 + 224))(v3, v6);
      ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>::eval((int *)v6, &v5);
      ProShade::Const::create((ProShade::Const *)&v5, v4);
    }
  }
  v6[0] = &unk_1F11193B8;
  PCSharedCount v6[2] = 0;
  PCSharedCount::PCSharedCount(v7);
  operator new();
}

void sub_1B7B11D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125380);
  *(void *)a1 = &unk_1F11252A8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125360;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B11EAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    int Size = ProShade::shapeGetSize(a1[1], v8);
    int v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        int v11 = a1 + 4;
        do
        {
          int v12 = *v11++;
          *(long double *)Serializer++ = exp((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      int v13 = (double *)(a1 + 4);
      do
      {
        long double v14 = *v13++;
        *(long double *)Serializer++ = exp(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1) {
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"exp doesn't apply to BOOL", v6);
    }
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "exp");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)OZChannelBase v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B12124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  OZChannelBase v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 30821;
  PCSharedCount v6[2] = 112;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B12240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "exp");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      int v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  uint64_t v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B124EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::clone()
{
}

void sub_1B7B126A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(int **)(a2 + 16);

  ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>::eval(v3, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125380);
  *(void *)a1 = &unk_1F11252A8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125360;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B12978(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5) {
  else
  }
    int v6 = 0;
  int v7 = *(const void **)(a2 + 16);
  if (v7) {
  else
  }
    uint64_t v8 = 0;
  uint64_t v9 = *(const void **)(a3 + 16);
  if (v9)
  {
    if (v6)
    {
      if (v8)
      {
        if (v10) {
          ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::compute((uint64_t)v6, (uint64_t)v8, (uint64_t)v10);
        }
      }
    }
  }
  operator new();
}

void sub_1B7B12BB4(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::compute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[18] = *MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v12);
  ProShade::Value::Value(v11);
  ProShade::Value::Value(v10);
  ProShade::Value::Value(&v9);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 224))(a1, v12);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 224))(a2, v11);
  (*(void (**)(uint64_t, void *))(*(void *)a3 + 224))(a3, v10);
  if (SLODWORD(v12[0]) > 1)
  {
    if (LODWORD(v12[0]) != 2) {
      goto LABEL_11;
    }
    int v6 = v11[0];
  }
  else
  {
    int v6 = v11[0];
    if (SLODWORD(v11[0]) < 2)
    {
      int v7 = v10[0];
      if (SLODWORD(v10[0]) < 2)
      {
        ProShade::eval_type<ProShade::smoothstep_traits,BOOL>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
        goto LABEL_12;
      }
LABEL_9:
      if (v7 <= 2)
      {
        ProShade::eval_type<ProShade::smoothstep_traits,int>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
        goto LABEL_12;
      }
LABEL_11:
      ProShade::eval_type<ProShade::smoothstep_traits,double>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
LABEL_12:
      ProShade::Const::create((ProShade::Const *)&v9, v8);
    }
  }
  if (v6 > 2) {
    goto LABEL_11;
  }
  int v7 = v10[0];
  goto LABEL_9;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3, PCShared_base *a4)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11255F8);
  *(void *)a1 = &unk_1F1125520;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11255D8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v17, a2);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::VarT<ProShade::Node>::VarT(v17, a3);
  int v10 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v10) {
    int v11 = (2 * (v10 + 1)) | 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v10 + 1, v11);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::VarT<ProShade::Node>::VarT(v17, a4);
  int v12 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v12) {
    int v13 = (2 * (v12 + 1)) | 1;
  }
  else {
    int v13 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v12 + 1, v13);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  int v15 = *(_DWORD *)(a1 + 60);
  if (v15 < 1) {
    PCArray_base::badIndex(v14);
  }
  if (v15 < 2) {
    PCArray_base::badIndex(v14);
  }
  if (v15 <= 2) {
    PCArray_base::badIndex(v14);
  }
  ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(void *)(a1 + 64) + 32), (const PCSharedCount *)(*(void *)(a1 + 64) + 64));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B1306C(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::smoothstep_traits,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v12, "not implemented yet");
    PCString::PCString(&v11, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v12, &v11, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result > 0) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"smoothstep doesn't apply to BOOL", v9);
  }
  return result;
}

void sub_1B7B131EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::smoothstep_traits,int>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    int v11 = (int *)(a3 + 16);
    PCString v12 = (int *)(a2 + 16);
    int v13 = (int *)(a1 + 16);
    do
    {
      int v15 = *v13++;
      int v14 = v15;
      int v17 = *v12++;
      int v16 = v17;
      int v18 = *v11++;
      double v19 = ((double)v18 - (double)v14) / ((double)v16 - (double)v14);
      if (v19 > 1.0) {
        double v19 = 1.0;
      }
      if (v19 < 0.0) {
        double v19 = 0.0;
      }
      *(double *)Serializer++ = v19 * v19 * (3.0 - (v19 + v19));
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B13394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::smoothstep_traits,double>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    int v11 = (double *)(a3 + 16);
    PCString v12 = (double *)(a2 + 16);
    int v13 = (double *)(a1 + 16);
    do
    {
      double v14 = *v13++;
      double v15 = v14;
      double v16 = *v12++;
      double v17 = v16;
      double v18 = *v11++;
      double v19 = (v18 - v15) / (v17 - v15);
      if (v19 > 1.0) {
        double v19 = 1.0;
      }
      if (v19 < 0.0) {
        double v19 = 0.0;
      }
      *(double *)Serializer++ = v19 * v19 * (3.0 - (v19 + v19));
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B13530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "smoothstep");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B136CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 23, 0x8903763CuLL);
  v5[1] = v4 + 10;
  void v5[2] = v4 + 11;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *((_WORD *)v6 + 4) = 28773;
  *(void *)int v6 = *(void *)"smoothstep";
  *((unsigned char *)v5 + v4 + 22) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B137F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "smoothstep");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      PCString v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  double v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B13A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::clone()
{
}

void sub_1B7B13C54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::computeValue(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  return ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::computeValue(a2, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11255F8);
  *(void *)a1 = &unk_1F1125520;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11255D8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B13EE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::computeValue(uint64_t a1, OZChannelBase *a2)
{
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  size_t v4 = *(int **)(a1 + 16);
  if (v3 < 2) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  if (v3 <= 2) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  uint64_t v5 = v4 + 36;
  int v6 = v4 + 72;
  if (*v4 >= 2)
  {
    if (*v4 != 2) {
      goto LABEL_21;
    }
    int v7 = *v5;
    goto LABEL_15;
  }
  int v7 = *v5;
  if (*v5 >= 2)
  {
LABEL_15:
    if (v7 > 2) {
      goto LABEL_21;
    }
    int v8 = *v6;
    goto LABEL_17;
  }
  int v8 = *v6;
  if (*v6 < 2)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    return ProShade::eval_type<ProShade::smoothstep_traits,BOOL>(v9, (uint64_t)v5, (uint64_t)v6, a2);
  }
LABEL_17:
  if (v8 <= 2)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    return ProShade::eval_type<ProShade::smoothstep_traits,int>(v11, (uint64_t)v5, (uint64_t)v6, a2);
  }
LABEL_21:
  uint64_t v12 = *(void *)(a1 + 16);

  return ProShade::eval_type<ProShade::smoothstep_traits,double>(v12, (uint64_t)v5, (uint64_t)v6, a2);
}

void ProShade::Func<ProShade::Func_cross>::eval(uint64_t a1, uint64_t a2)
{
  int v3 = *(const void **)(a1 + 16);
  if (v3) {
  else
  }
    size_t v4 = 0;
  uint64_t v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      if (v6) {
        ProShade::Func_cross::compute(v4, v6, v7);
      }
    }
  }
  PCSharedCount::PCSharedCount(&v8);
  operator new();
}

void sub_1B7B141FC(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_cross::compute(ProShade::Func_cross *this, ProShade::Const *a2, ProShade::Const *a3)
{
  if (!ProShade::shapeIsMatrix(*((_DWORD *)this + 7)) && !ProShade::shapeIsMatrix(*((_DWORD *)a2 + 7)))
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F111F378;
    int v7 = &unk_1F111F378;
    uint64_t v8 = 0;
    (*(void (**)(ProShade::Func_cross *, void **))(*(void *)this + 216))(this, &v10);
    (*(void (**)(ProShade::Const *, void **))(*(void *)a2 + 216))(a2, &v7);
    if (HIDWORD(v11) == 3 && HIDWORD(v8) == 3) {
      operator new();
    }
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cross arguments must be 3-vectors", v6);
  }
  ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cross doesn't apply to matrices", v5);
}

void sub_1B7B14574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  MEMORY[0x1BA9BFBA0](v5, 0x10B1C40A585CD1CLL);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cross>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125870);
  *(void *)a1 = &unk_1F1125798;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125850;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v18, a2);
  int v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6) {
    int v7 = (2 * (v6 + 1)) | 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v18);
  v18[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v19);
  ProShade::VarT<ProShade::Node>::VarT(v18, a3);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v18);
  v18[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v19);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 < 1) {
    PCArray_base::badIndex(v10);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (v11 <= 1) {
    PCArray_base::badIndex(v10);
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 16);
  if (!v13) {
    throw_PCNullPointerException(1);
  }
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(v13 + 28);
  int v14 = *(_DWORD *)(v13 + 24);
  uint64_t v15 = *(void *)(v12 + 48);
  if (!v15) {
    throw_PCNullPointerException(1);
  }
  int v16 = *(_DWORD *)(v15 + 24);
  if (v14 > v16) {
    int v16 = v14;
  }
  *(_DWORD *)(a1 + 24) = v16;
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B14814(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstVector::ConstVector(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112D778);
  uint64_t v4 = off_1F112D770;
  *(void *)a1 = off_1F112D770;
  *(void *)(a1 + *(v4 - 3)) = off_1F112D798;
  *(void *)a1 = &unk_1F112D648;
  uint64_t v5 = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = 0x3FF0000000000000;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *(void *)(a1 + 24) = 0x300000003;
  return a1;
}

{
  ProShade::Node *v4;
  const PCString *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  uint64_t v4 = ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112D778);
  *(void *)a1 = &unk_1F112D648;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 24) = 1;
  int v6 = *(unsigned int *)(a2 + 12);
  if ((v6 - 1) >= 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v5);
  }
  int v7 = 0;
  *(_DWORD *)(a1 + 28) = v6;
  do
  {
    if (v7 >= *(int *)(a2 + 12)) {
      PCArray_base::badIndex(v4);
    }
    if (*(unsigned char *)(*(void *)(a2 + 16) + v7)) {
      int v8 = 1.0;
    }
    else {
      int v8 = 0.0;
    }
    *(double *)(a1 + 8 * v7++ + 48) = v8;
  }
  while (v6 != v7);
  *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  return a1;
}

{
  ProShade::Node *v4;
  const PCString *v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  uint64_t v4 = ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112D778);
  *(void *)a1 = &unk_1F112D648;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 24) = 2;
  int v6 = *(unsigned int *)(a2 + 12);
  if ((v6 - 1) >= 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v5);
  }
  int v7 = 0;
  *(_DWORD *)(a1 + 28) = v6;
  do
  {
    if (v7 >= *(int *)(a2 + 12)) {
      PCArray_base::badIndex(v4);
    }
    *(double *)(a1 + 8 * v7 + 48) = (double)*(int *)(*(void *)(a2 + 16) + 4 * v7);
    ++v7;
  }
  while (v6 != v7);
  *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  return a1;
}

{
  ProShade::Node *v4;
  const PCString *v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  uint64_t v4 = ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112D778);
  *(void *)a1 = &unk_1F112D648;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 24) = 3;
  int v6 = *(unsigned int *)(a2 + 12);
  if ((v6 - 1) >= 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v5);
  }
  int v7 = 0;
  *(_DWORD *)(a1 + 28) = v6;
  do
  {
    if (v7 >= *(int *)(a2 + 12)) {
      PCArray_base::badIndex(v4);
    }
    *(void *)(a1 + 8 * v7 + 48) = *(void *)(*(void *)(a2 + 16) + 8 * v7);
    ++v7;
  }
  while (v6 != v7);
  *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  return a1;
}

void sub_1B7B149DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cross>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_cross>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_cross>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "cross");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B14B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_cross>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 18, 0x8903763CuLL);
  v5[1] = v4 + 5;
  void v5[2] = v4 + 6;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)int v6 = 1936683619;
  v6[4] = 115;
  *((unsigned char *)v5 + v4 + 17) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B14C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_cross>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_cross>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "cross");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_cross>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  PCSharedCount v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      uint64_t v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  PCSharedCount v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B14F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_cross>::clone()
{
}

void sub_1B7B150D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_cross>::computeValue()
{
}

void virtual thunk to'ProShade::Func<ProShade::Func_cross>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_cross>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125870);
  *(void *)a1 = &unk_1F1125798;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125850;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B1536C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_cross::computeValue()
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 943);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7B15448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_length>::eval(uint64_t a1)
{
  PCString v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2) {
      ProShade::Func_length::compute(v2, v3);
    }
  }
  PCSharedCount::PCSharedCount(&v4);
  operator new();
}

void sub_1B7B155D8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_length::compute(ProShade::Func_length *this, ProShade::Const *a2)
{
  if (!ProShade::shapeIsMatrix(*((_DWORD *)this + 7)))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    int v7 = &unk_1F111F378;
    PCSharedCount v4 = (PCArray_base *)(*(uint64_t (**)(ProShade::Func_length *, void **))(*(void *)this + 216))(this, &v7);
    if (SHIDWORD(v8) < 1)
    {
      double v6 = 0.0;
    }
    else
    {
      uint64_t v5 = 0;
      double v6 = 0.0;
      do
      {
        if (v5 >= SHIDWORD(v8)) {
          PCArray_base::badIndex(v4);
        }
        double v6 = v6 + *(double *)(v9 + 8 * v5) * *(double *)(v9 + 8 * v5);
        ++v5;
      }
      while (HIDWORD(v8) != v5);
    }
    ProShade::Const::create(v4, sqrt(v6));
  }
  ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"length doesn't apply to matrices", v3);
}

void sub_1B7B157F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_length>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125AE8);
  *(void *)a1 = &unk_1F1125A10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125AC8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B1594C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_length>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_length>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_length>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "length");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      PCSharedCount v4 = v5 - 3;
    }
    else {
      PCSharedCount v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B15AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_length>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 19, 0x8903763CuLL);
  v5[1] = v4 + 6;
  void v5[2] = v4 + 7;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  double v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)double v6 = 1735288172;
  *((_WORD *)v6 + 2) = 26740;
  *((unsigned char *)v5 + v4 + 18) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B15C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_length>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_length>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "length");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_length>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  PCSharedCount v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      uint64_t v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  PCSharedCount v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B15EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_length>::clone()
{
}

void sub_1B7B16064(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

double ProShade::Func<ProShade::Func_length>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(ProShade::Func_length **)(a2 + 16);

  return ProShade::Func_length::eval(v3, a3, (ProShade::Value *)a3);
}

void virtual thunk to'ProShade::Func<ProShade::Func_length>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_length>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125AE8);
  *(void *)a1 = &unk_1F1125A10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125AC8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B16338(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

double ProShade::Func_length::eval(ProShade::Func_length *this, OZChannelBase *a2, ProShade::Value *a3)
{
  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 1))) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"length doesn't apply to matrices", v5);
  }
  ProShade::Value::set((uint64_t)a2, (const PCString *)3, 1);
  OZChannelBase::getSerializer(a2);
  int Size = (OZChannelBase *)ProShade::shapeGetSize(*((_DWORD *)this + 1), v6);
  switch(*(_DWORD *)this)
  {
    case 0:
      ProShade::Error<PCIllegalArgumentException>::raise(Size, v8);
    case 1:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v17, "not implemented yet");
      PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(exception, &v17, &v16, 1296);
      *(void *)exception = &unk_1F10B1208;
    case 2:
      int v14 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v17, "not implemented yet");
      PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(v14, &v17, &v16, 1297);
      *(void *)int v14 = &unk_1F10B1208;
    case 3:
      if ((int)Size < 1)
      {
        double v12 = 0.0;
      }
      else
      {
        uint64_t v10 = (double *)((char *)this + 16);
        uint64_t v11 = Size;
        double v12 = 0.0;
        do
        {
          double v13 = *v10++;
          double v12 = v12 + v13 * v13;
          --v11;
        }
        while (v11);
      }
      double result = sqrt(v12);
      *(double *)&a2->var2 = result;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B7B16558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void BumpMapSample::BumpMapSample(BumpMapSample *this)
{
  *(void *)this = &unk_1F11193B8;
  *((void *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((void *)this + 4) = &unk_1F11193B8;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((void *)this + 8) = &unk_1F11193B8;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
}

void sub_1B7B16678(_Unwind_Exception *a1)
{
  int v7 = v6;
  void *v7 = v4;
  PCSharedCount::~PCSharedCount(v5);
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Vec2::Vec2(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1125C80;
  ProShade::Vec2::checkType((ProShade::Vec2 *)a1);
  return a1;
}

void sub_1B7B16730(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Mat4::Mat4()
{
}

void sub_1B7B167F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C405FD9FD45);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_inverse>::eval(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2) {
      ProShade::Func_inverse::compute(v2, v3);
    }
  }
  PCSharedCount::PCSharedCount(&v4);
  operator new();
}

void sub_1B7B1696C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_inverse::compute(ProShade::Func_inverse *this, ProShade::Const *a2)
{
  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 7)))
  {
    int v4 = *((_DWORD *)this + 7);
    if (v4 != 6)
    {
      if (v4 == 7)
      {
        (*(void (**)(long long *__return_ptr, ProShade::Func_inverse *))(*(void *)this + 192))(&v9, this);
        *((void *)&v18[2] + 1) = 0x3FF0000000000000;
        *(void *)&v18[0] = 0x3FF0000000000000;
        v15[5].int var0 = (__CFString *)0x3FF0000000000000;
        v15[0].int var0 = (__CFString *)0x3FF0000000000000;
        memset(&v15[1], 0, 32);
        long long v16 = 0u;
        long long v17 = 0u;
        memset((char *)v18 + 8, 0, 32);
        if (!PCMatrix44Tmpl<double>::invert((double *)v15, (double *)&v9, 0.0))
        {
          long long v17 = 0u;
          memset(v18, 0, sizeof(v18));
          long long v16 = 0u;
          memset(v15, 0, sizeof(v15));
        }
        ProShade::Const::create();
      }
      if (v4 == 5)
      {
        exception = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(v15, "not implemented yet");
        PCString::PCString((PCString *)&v9, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
        PCException::PCException(exception, v15, (const PCString *)&v9, 1924);
        *(void *)exception = &unk_1F10B1208;
      }
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse arguments must be vectors", v3);
    }
    (*(void (**)(double *__return_ptr, ProShade::Func_inverse *))(*(void *)this + 184))(v14, this);
    long long v9 = 0x3FF0000000000000uLL;
    long long v10 = 0uLL;
    long long v11 = 0x3FF0000000000000uLL;
    long long v12 = 0uLL;
    uint64_t v13 = 0x3FF0000000000000;
    if (!PCMatrix33Tmpl<double>::invert((double *)&v9, v14, 0.0))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
    }
    uint64_t v5 = 0;
    int v6 = &v9;
    do
    {
      int v7 = &v15[v5];
      *(_OWORD *)&v7->int var0 = *v6;
      v7[2].int var0 = (__CFString *)v6[1];
      int v6 = (long long *)((char *)v6 + 24);
      v5 += 4;
    }
    while (v5 != 12);
    v15[3].int var0 = 0;
    *((void *)&v16 + 1) = 0;
    memset((char *)v18 + 8, 0, 32);
    *((void *)&v18[2] + 1) = 0x3FF0000000000000;
    ProShade::Const::create();
  }
  ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse applies only to matrices", v3);
}

void sub_1B7B16C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  PCString::~PCString((PCString *)(v11 - 160));
  if (v10) {
    __cxa_free_exception(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_inverse>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125DE0);
  *(void *)a1 = &unk_1F1125D08;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125DC0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B16DAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_inverse>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_inverse>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_inverse>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "inverse");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B16F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_inverse>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 20, 0x8903763CuLL);
  v5[1] = v4 + 7;
  void v5[2] = v4 + 8;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (unsigned int *)((char *)v5 + v4 + 12);
  _DWORD *v6 = 1702260329;
  *(_DWORD *)((char *)v6 + 3) = 1702064741;
  *((unsigned char *)v5 + v4 + 19) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B17064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_inverse>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_inverse>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  double result = PCHashWriteStream::writeValue(this, "inverse");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      double result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_inverse>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  PCSharedCount v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      long long v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  PCSharedCount v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B17310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_inverse>::clone()
{
}

void sub_1B7B174C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void *ProShade::Func<ProShade::Func_inverse>::computeValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ProShade::Func_inverse::computeValue(a2, a3);
}

void virtual thunk to'ProShade::Func<ProShade::Func_inverse>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_inverse>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1125DE0);
  *(void *)a1 = &unk_1F1125D08;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1125DC0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B1775C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void *ProShade::Func_inverse::computeValue(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 12) <= 0) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  uint64_t v3 = *(double **)(a1 + 16);
  if (*(_DWORD *)v3 != 3)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)v10, "not implemented yet");
    PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, (const PCString *)v10, &v14, 1950);
    *(void *)exception = &unk_1F10B1208;
  }
  if (!ProShade::shapeIsMatrix(*((_DWORD *)v3 + 1))) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse applies only to matrices", v4);
  }
  unsigned int v5 = *((_DWORD *)v3 + 1);
  switch(v5)
  {
    case 6u:
      *(_OWORD *)uint64_t v10 = 0x3FF0000000000000uLL;
      *(void *)&v10[16] = 0;
      *(void *)&v10[24] = 0;
      *(void *)&v10[32] = 0x3FF0000000000000;
      *(void *)&unsigned char v10[40] = 0;
      long long v11 = 0uLL;
      *(void *)&long long v12 = 0x3FF0000000000000;
      if (!PCMatrix33Tmpl<double>::invert((double *)v10, v3 + 2, 0.0))
      {
        *(void *)&long long v12 = 0;
        long long v6 = 0uLL;
        goto LABEL_11;
      }
      break;
    case 7u:
      *((void *)&v13[2] + 1) = 0x3FF0000000000000;
      *(void *)&v13[0] = 0x3FF0000000000000;
      *(void *)&unsigned char v10[40] = 0x3FF0000000000000;
      *(void *)uint64_t v10 = 0x3FF0000000000000;
      memset(&v10[8], 0, 32);
      long long v11 = 0u;
      long long v12 = 0u;
      memset((char *)v13 + 8, 0, 32);
      if (!PCMatrix44Tmpl<double>::invert((double *)v10, v3 + 2, 0.0))
      {
        long long v6 = 0uLL;
        long long v12 = 0u;
        memset(v13, 0, sizeof(v13));
LABEL_11:
        *(_OWORD *)&v10[32] = v6;
        long long v11 = v6;
        *(_OWORD *)uint64_t v10 = v6;
        *(_OWORD *)&v10[16] = v6;
      }
      break;
    case 5u:
      uint64_t v9 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString((PCString *)v10, "not implemented yet");
      PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(v9, (const PCString *)v10, &v14, 1958);
      *(void *)uint64_t v9 = &unk_1F10B1208;
    default:
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse arguments must be matrices", v4);
  }
  return ProShade::Value::set(a2, (const PCString *)*(unsigned int *)v3, *((_DWORD *)v3 + 1), v10);
}

void sub_1B7B179D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString((PCString *)(v11 - 40));
  PCString::~PCString(&a9);
  if (v10) {
    __cxa_free_exception(v9);
  }
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdx>::eval(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2) {
      ProShade::Const::create(v2, 0.0);
    }
  }
  uint64_t v3 = &unk_1F11193B8;
  uint64_t v4 = 0;
  PCSharedCount::PCSharedCount(&v5);
  operator new();
}

void sub_1B7B17B80(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1126058);
  *(void *)a1 = &unk_1F1125F80;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1126038;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B17D14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_dFdx>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_dFdx>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "dFdx");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)PCSharedCount v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B17EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdx>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  PCSharedCount v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  void v5[2] = v4 + 5;
  atomic_store(1u, v5);
  long long v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 2019837540;
  *((unsigned char *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B17FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdx>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_dFdx>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "dFdx");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  PCSharedCount v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      long long v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  PCSharedCount v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B18268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdx>::clone()
{
}

void sub_1B7B18420(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdx>::computeValue()
{
}

void virtual thunk to'ProShade::Func<ProShade::Func_dFdx>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1126058);
  *(void *)a1 = &unk_1F1125F80;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1126038;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B186B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_dFdx::computeValue()
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 1595);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7B18790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdy>::eval(uint64_t a1)
{
  PCString v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2) {
      ProShade::Const::create(v2, 0.0);
    }
  }
  uint64_t v3 = &unk_1F11193B8;
  uint64_t v4 = 0;
  PCSharedCount::PCSharedCount(&v5);
  operator new();
}

void sub_1B7B1892C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11262D0);
  *(void *)a1 = &unk_1F11261F8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11262B0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B18AC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_dFdy>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::Func_dFdy>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "dFdy");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)PCSharedCount v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B18C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdy>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  PCSharedCount v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  void v5[2] = v4 + 5;
  atomic_store(1u, v5);
  int v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 2036614756;
  *((unsigned char *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B18D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdy>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::Func_dFdy>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "dFdy");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  PCSharedCount v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      long long v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  PCSharedCount v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B19014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdy>::clone()
{
}

void sub_1B7B191CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdy>::computeValue()
{
}

void virtual thunk to'ProShade::Func<ProShade::Func_dFdy>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11262D0);
  *(void *)a1 = &unk_1F11261F8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11262B0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B19460(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_dFdy::computeValue()
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 1635);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7B1953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5) {
  else
  }
    int v6 = 0;
  int v7 = *(const void **)(a2 + 16);
  if (v7) {
  else
  }
    uint64_t v8 = 0;
  uint64_t v9 = *(const void **)(a3 + 16);
  if (v9)
  {
    if (v6)
    {
      if (v8)
      {
        if (v10) {
          ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::compute((uint64_t)v6, (uint64_t)v8, (uint64_t)v10);
        }
      }
    }
  }
  operator new();
}

void sub_1B7B1977C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::compute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[18] = *MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v12);
  ProShade::Value::Value(v11);
  ProShade::Value::Value(v10);
  ProShade::Value::Value(&v9);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 224))(a1, v12);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 224))(a2, v11);
  (*(void (**)(uint64_t, void *))(*(void *)a3 + 224))(a3, v10);
  if (SLODWORD(v12[0]) > 1)
  {
    if (LODWORD(v12[0]) != 2) {
      goto LABEL_11;
    }
    int v6 = v11[0];
  }
  else
  {
    int v6 = v11[0];
    if (SLODWORD(v11[0]) < 2)
    {
      int v7 = v10[0];
      if (SLODWORD(v10[0]) < 2)
      {
        ProShade::eval_type<ProShade::clamp_traits,BOOL>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
        goto LABEL_12;
      }
LABEL_9:
      if (v7 <= 2)
      {
        ProShade::eval_type<ProShade::clamp_traits,int>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
        goto LABEL_12;
      }
LABEL_11:
      ProShade::eval_type<ProShade::clamp_traits,double>((uint64_t)v12, (uint64_t)v11, (uint64_t)v10, &v9);
LABEL_12:
      ProShade::Const::create((ProShade::Const *)&v9, v8);
    }
  }
  if (v6 > 2) {
    goto LABEL_11;
  }
  int v7 = v10[0];
  goto LABEL_9;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3, PCShared_base *a4)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1126548);
  *(void *)a1 = &unk_1F1126470;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1126528;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v17, a2);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::VarT<ProShade::Node>::VarT(v17, a3);
  int v10 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v10) {
    int v11 = (2 * (v10 + 1)) | 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v10 + 1, v11);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::VarT<ProShade::Node>::VarT(v17, a4);
  int v12 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v12) {
    int v13 = (2 * (v12 + 1)) | 1;
  }
  else {
    int v13 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v12 + 1, v13);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v17);
  v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v18);
  int v15 = *(_DWORD *)(a1 + 60);
  if (v15 < 1) {
    PCArray_base::badIndex(v14);
  }
  if (v15 < 2) {
    PCArray_base::badIndex(v14);
  }
  if (v15 <= 2) {
    PCArray_base::badIndex(v14);
  }
  ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(void *)(a1 + 64) + 32), (const PCSharedCount *)(*(void *)(a1 + 64) + 64));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B19C34(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::clamp_traits,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v12, "not implemented yet");
    PCString::PCString(&v11, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v12, &v11, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result > 0) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"clamp doesn't apply to BOOL", v9);
  }
  return result;
}

void sub_1B7B19DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::clamp_traits,int>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)2, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    int v11 = (int *)(a3 + 16);
    PCString v12 = (int *)(a2 + 16);
    int v13 = (int *)(a1 + 16);
    do
    {
      int v15 = *v13++;
      int v14 = v15;
      int v17 = *v12++;
      int v16 = v17;
      int v19 = *v11++;
      int v18 = v19;
      if (v14 >= v19) {
        int v14 = v18;
      }
      if (v14 <= v16) {
        int v14 = v16;
      }
      *(_DWORD *)Serializer = v14;
      Serializer = (void ***)((char *)Serializer + 4);
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B19F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::clamp_traits,double>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    int v11 = (double *)(a3 + 16);
    PCString v12 = (double *)(a2 + 16);
    int v13 = (double *)(a1 + 16);
    do
    {
      double v14 = *v13++;
      double v15 = v14;
      double v16 = *v12++;
      double v17 = v16;
      double v18 = *v11++;
      double v19 = v18;
      if (v15 > v18) {
        double v15 = v19;
      }
      if (v15 < v17) {
        double v15 = v17;
      }
      *(double *)Serializer++ = v15;
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B1A09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "clamp");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B1A238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 18, 0x8903763CuLL);
  v5[1] = v4 + 5;
  void v5[2] = v4 + 6;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)int v6 = 1835101283;
  v6[4] = 112;
  *((unsigned char *)v5 + v4 + 17) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B1A358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "clamp");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      PCString v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  double v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B1A604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::clone()
{
}

void sub_1B7B1A7BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::computeValue(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  return ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::computeValue(a2, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1126548);
  *(void *)a1 = &unk_1F1126470;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1126528;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B1AA50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::computeValue(uint64_t a1, OZChannelBase *a2)
{
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  size_t v4 = *(int **)(a1 + 16);
  if (v3 < 2) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  if (v3 <= 2) {
    PCArray_base::badIndex((PCArray_base *)a1);
  }
  uint64_t v5 = v4 + 36;
  int v6 = v4 + 72;
  if (*v4 >= 2)
  {
    if (*v4 != 2) {
      goto LABEL_21;
    }
    int v7 = *v5;
    goto LABEL_15;
  }
  int v7 = *v5;
  if (*v5 >= 2)
  {
LABEL_15:
    if (v7 > 2) {
      goto LABEL_21;
    }
    int v8 = *v6;
    goto LABEL_17;
  }
  int v8 = *v6;
  if (*v6 < 2)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    return ProShade::eval_type<ProShade::clamp_traits,BOOL>(v9, (uint64_t)v5, (uint64_t)v6, a2);
  }
LABEL_17:
  if (v8 <= 2)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    return ProShade::eval_type<ProShade::clamp_traits,int>(v11, (uint64_t)v5, (uint64_t)v6, a2);
  }
LABEL_21:
  uint64_t v12 = *(void *)(a1 + 16);

  return ProShade::eval_type<ProShade::clamp_traits,double>(v12, (uint64_t)v5, (uint64_t)v6, a2);
}

PCSharedCount *ProShade::Float::Float(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11266E0;
  ProShade::Float::checkType((ProShade::Float *)a1);
  return a1;
}

void sub_1B7B1AC34(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Float::checkType(ProShade::Float *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 128);

  return v2();
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this, double a2)
{
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1F112D778);
  size_t v4 = off_1F112D770;
  *(void *)this = off_1F112D770;
  *(void *)((char *)this + *(v4 - 3)) = off_1F112D798;
  *(void *)this = &unk_1F112D648;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *((double *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  *((double *)this + 7) = a2;
  *((double *)this + 8) = a2;
  *((double *)this + 9) = a2;
  *((void *)this + 3) = 0x100000003;
  return this;
}

void sub_1B7B1AE0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this, float a2)
{
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1F112D778);
  size_t v4 = off_1F112D770;
  *(void *)this = off_1F112D770;
  *(void *)((char *)this + *(v4 - 3)) = off_1F112D798;
  *(void *)this = &unk_1F112D648;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *((double *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  *((double *)this + 7) = a2;
  *((double *)this + 8) = a2;
  *((double *)this + 9) = a2;
  *((void *)this + 3) = 0x100000003;
  return this;
}

void sub_1B7B1AF80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

uint64_t LoadLockCache::instance(LoadLockCache *this)
{
  {
    operator new();
  }
  return LoadLockCache::instance(void)::instance + 8;
}

void sub_1B7B1B018(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A64E3564);
  _Unwind_Resume(a1);
}

void LoadLockCache::LoadLockCache(LoadLockCache *this)
{
  PCSingleton::PCSingleton(this, 0);
  *(void *)uint64_t v2 = &unk_1F1126720;
  PCMutex::PCMutex((PCMutex *)(v2 + 8));
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = (char *)this + 88;
}

void sub_1B7B1B0AC(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void LoadLockCache::~LoadLockCache(LoadLockCache *this)
{
  *(void *)this = &unk_1F1126720;
  uint64_t v2 = (PCMutex *)((char *)this + 8);
  std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  PCMutex::~PCMutex(v2);

  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  LoadLockCache::~LoadLockCache(this);

  JUMPOUT(0x1BA9BFBA0);
}

void LiTransform::LiTransform(LiTransform *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 25) = 0x3FF0000000000000;
  *((void *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 15) = 0x3FF0000000000000;
  *((void *)this + 9) = 0;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 24) = _Q0;
  *(_OWORD *)((char *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = _Q0;
}

double PCMatrix44Tmpl<double>::rightRotate(uint64_t a1, double *a2)
{
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v4 = 0x3FF0000000000000;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v4, a2);
  return PCMatrix44Tmpl<double>::rightMult(a1, (double *)&v4);
}

int8x8_t *LiMaterialLayerOperator::writeHash(LiMaterialLayerOperator *this, int8x8_t *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v2 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);

  return PCHashWriteStream::writeValue(a2, v2);
}

void LiMaterialLayer::LiMaterialLayer(LiMaterialLayer *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *(void *)this = v3;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[2];
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  *((_WORD *)this + 4) = 0;
  *((_DWORD *)this + 3) = -1;
  *((void *)this + 2) = a3;
  *((_WORD *)this + 12) = 257;
}

void LiMaterialLayer::getHash(LiMaterialLayer *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  v4[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v4);
  (*(void (**)(uint64_t, int8x8_t *))(*(void *)v1 + 56))(v1, v4);
  *uint64_t v3 = *(_OWORD *)PCHashWriteStream::getHash(v4)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v4);
}

void sub_1B7B1B454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

int8x8_t *LiMaterialLayer::writeHash(LiMaterialLayer *this, int8x8_t *a2)
{
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 8));
  PCHashWriteStream::writeValue(a2, *((unsigned char *)this + 9));
  char v4 = *((unsigned char *)this + 24);

  return PCHashWriteStream::writeValue(a2, v4);
}

void *LiMaterialLayer::print(uint64_t a1, void *a2, int a3)
{
  LiImageSource::printIndent(a2, a3);
  if (!a1) {
    __cxa_bad_typeid();
  }
  size_t v6 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n", 1);
  if (*(unsigned char *)(a1 + 8))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"separateEnvResponse: ", 21);
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v10 = "true";
    }
    else {
      uint64_t v10 = "false";
    }
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = 5;
    }
    long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  }
  if (*(unsigned char *)(a1 + 9))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"onlyWhereOpaque: ", 17);
    if (*(unsigned char *)(a1 + 9)) {
      int v14 = "true";
    }
    else {
      int v14 = "false";
    }
    if (*(unsigned char *)(a1 + 9)) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = 5;
    }
    double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  }
  return result;
}

void LiMaterialLayer::clampColorToEdge(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*a1) {
    ProShade::Selector_base::_select(a3 + 8, 0);
  }
  *(void *)a4 = &unk_1F11193B8;
  *(unsigned char *)(a4 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a2 + 16);
  char v4 = (const PCSharedCount *)(a2 + 24);

  PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 24), v4);
}

void sub_1B7B1C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,PCSharedCount a47)
{
  *(void *)(v50 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v48 + 3);
  *(void *)(v50 - 152) = v49;
  PCSharedCount::~PCSharedCount(v47);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a43);
  a44 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a47);
  *(void *)(v50 - 248) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v50 - 224));
  *(void *)(v50 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v50 - 192));
  *(void *)(v50 - 184) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v50 - 160));
  _Unwind_Resume(a1);
}

void sub_1B7B1CB58()
{
}

void LiMaterialLayer::sampleTextureMap()
{
}

void sub_1B7B1E27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, PCSharedCount *a16, uint64_t a17, PCSharedCount *a18, uint64_t a19, uint64_t a20,PCSharedCount *a21,uint64_t a22,uint64_t a23,PCSharedCount *a24,PCSharedCount *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t *a29)
{
  STACK[0x2C8] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v32 + 3);
  PCSharedCount::~PCSharedCount(v29);
  PCSharedCount::~PCSharedCount(v30);
  STACK[0x208] = v34;
  PCSharedCount::~PCSharedCount(v31);
  STACK[0x228] = v33;
  PCSharedCount::~PCSharedCount(v35);
  STACK[0x248] = a11;
  PCSharedCount::~PCSharedCount(a10);
  STACK[0x2E8] = a15;
  PCSharedCount::~PCSharedCount(a14);
  STACK[0x308] = a17;
  PCSharedCount::~PCSharedCount(a16);
  *(void *)(v36 - 232) = a19;
  PCSharedCount::~PCSharedCount(a18);
  *(void *)(v36 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a20;
  PCSharedCount::~PCSharedCount(a25);
  *(void *)(v36 - 168) = a22;
  PCSharedCount::~PCSharedCount(a21);
  *(void *)(v36 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = a23;
  PCSharedCount::~PCSharedCount(a24);
  *a29 = a13;
  PCSharedCount::~PCSharedCount(a12);
  _Unwind_Resume(a1);
}

void sub_1B7B1EC08()
{
}

void LiMaterialLayer::calculateTriplanarNormal(LiMaterialLayer *this)
{
  uint64_t v1 = &unk_1F11193B8;
  operator new();
}

void sub_1B7B1F8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  *(void *)(v19 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v17 + 3);
  *(void *)(v19 - 248) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v19 - 224));
  PCSharedCount::~PCSharedCount(v18);
  *(void *)(v19 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v19 - 192));
  *(void *)(v19 - 184) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v19 - 160));
  *a17 = a10;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void sub_1B7B1FDDC()
{
}

void sub_1B7B1FDE4()
{
}

void LiMaterialLayer::sampleLayerColor(LiMaterialLayer *this, const LiLayeredMaterial *a2, const LiMaterialLayerUniform *a3)
{
}

void sub_1B7B20D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,PCSharedCount a50)
{
  STACK[0x220] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v53 + 3);
  PCSharedCount::~PCSharedCount(v52);
  STACK[0x200] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x218]);
  PCSharedCount::~PCSharedCount(&a50);
  PCSharedCount::~PCSharedCount(v50);
  PCSharedCount::~PCSharedCount(v51);
  *(void *)(v54 - 224) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v54 - 200));
  *a14 = a9;
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

void sub_1B7B212F8()
{
}

void adjustHSVWithColor()
{
  uint64_t v0 = &v4;
  PCGetRec709YCbCrMatrix((uint64_t)&v4);
  uint64_t v1 = 0;
  for (uint64_t i = &v5; ; i += 32)
  {
    for (uint64_t j = 0; j != 3; ++j)
      *(double *)&i[8 * j] = *((float *)v0 + j);
    ++v1;
    uint64_t v0 = (uint64_t *)((char *)v0 + 12);
    if (v1 == 3)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      long long v8 = 0u;
      long long v9 = 0u;
      uint64_t v10 = 0x3FF0000000000000;
      ProShade::Mat4::Mat4();
    }
  }
}

void sub_1B7B230B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, uint64_t a17, PCSharedCount *a18, PCSharedCount *a19, uint64_t a20,PCSharedCount *a21,uint64_t a22,PCSharedCount *a23,uint64_t a24,uint64_t a25,PCSharedCount *a26,uint64_t a27)
{
  PCSharedCount::~PCSharedCount(v28 + 3);
  PCSharedCount::~PCSharedCount(v29);
  PCSharedCount::~PCSharedCount(v27);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x210]);
  STACK[0x218] = v30;
  PCSharedCount::~PCSharedCount(v31);
  STACK[0x238] = a11;
  PCSharedCount::~PCSharedCount(a10);
  STACK[0x258] = a13;
  PCSharedCount::~PCSharedCount(a12);
  STACK[0x278] = a17;
  PCSharedCount::~PCSharedCount(a14);
  STACK[0x298] = a25;
  PCSharedCount::~PCSharedCount(a18);
  STACK[0x2B8] = a27;
  PCSharedCount::~PCSharedCount(a26);
  STACK[0x2D8] = a20;
  PCSharedCount::~PCSharedCount(a19);
  STACK[0x2F8] = a22;
  PCSharedCount::~PCSharedCount(a21);
  STACK[0x318] = (unint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x330]);
  *(void *)(v32 - 248) = a24;
  PCSharedCount::~PCSharedCount(a23);
  _Unwind_Resume(a1);
}

void sub_1B7B23D10()
{
}

void sub_1B7B23D3C()
{
}

void sub_1B7B23D68()
{
}

void sub_1B7B23D94()
{
}

void sub_1B7B23D9C()
{
}

void sub_1B7B23DA4()
{
}

void sub_1B7B23DAC()
{
}

void sub_1B7B23DB4()
{
}

void sub_1B7B23DBC()
{
}

void sub_1B7B23DC4()
{
}

void LiMaterialLayer::getSurfaceSpecularScalar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  PCGetWorkingColorSpaceLuminanceCoefficients(*a8, (uint64_t)&v9);
  long long v8 = &unk_1F11193B8;
  operator new();
}

void sub_1B7B24358(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  *(void *)(v4 - 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v4 - 152));
  _Unwind_Resume(a1);
}

void sub_1B7B24558()
{
}

void LiMaterialLayer::getSurfaceSpecularColor(_DWORD *a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  a5->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a5[2].int var0 = 0;
  PCSharedCount::PCSharedCount(a5 + 3);
  switch(*a1)
  {
    case 0:
      ProShade::Selector_base::_select(a4 + 552, (const PCString *)0x1D);
    case 1:
      ProShade::Selector_base::_select(a3 + 8, (const PCString *)0x1D);
    case 2:
      ProShade::Selector_base::_select(a4 + 552, (const PCString *)0x1D);
    case 3:
      uint64_t SamplerInfo = LiMaterial::getSamplerInfo(a2, *(const ProShade::SamplerNode **)(a3 + 368));
      long long v13 = *(_OWORD *)(SamplerInfo + 316);
      uint64_t v14 = *(void *)(SamplerInfo + 332);
      PCSharedCount::PCSharedCount(&v10, (const PCSharedCount *)(a3 + 376));
      ProShade::VarT<ProShade::UniformNode>::VarT(&v11, *(PCShared_base **)(a3 + 400));
      v11.int var0 = (PC_Sp_counted_base *)&unk_1F1119B30;
      ProShade::VarT<ProShade::UniformNode>::VarT(&v12, *(PCShared_base **)(a3 + 432));
      v12.int var0 = (PC_Sp_counted_base *)&unk_1F1119BB0;
      uint64_t v15 = &unk_1F11193B8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v17, (const PCSharedCount *)(a3 + 1712));
      LiMaterialLayer::sampleTextureMap();
    case 4:
      uint64_t v15 = &unk_1F11193B8;
      char v16 = *(unsigned char *)(a4 + 136);
      v17.int var0 = *(PC_Sp_counted_base **)(a4 + 144);
      PCSharedCount::PCSharedCount(&v18, (const PCSharedCount *)(a4 + 152));
      operator new();
    default:
      return;
  }
}

void sub_1B7B250CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  *(void *)(v53 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v50;
  PCSharedCount::~PCSharedCount(v51);
  *(void *)(v53 - 152) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v53 - 128));
  *(void *)(v53 - 184) = v52;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v53 - 160));
  ProShade::Sampler::~Sampler((PCSharedCount *)&a37);
  void *v49 = a16;
  PCSharedCount::~PCSharedCount(a15);
  _Unwind_Resume(a1);
}

void LiMaterialLayer::getSurfaceSpecularShininess(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, const PCSharedCount *a4)
{
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo(a1, *(const ProShade::SamplerNode **)(a3 + 16));
  long long v9 = *(_OWORD *)(SamplerInfo + 316);
  uint64_t v10 = *(void *)(SamplerInfo + 332);
  uint64_t v7 = &unk_1F11193B8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v8, a4 + 2);
  uint64_t v6 = &unk_1F11193B8;
  operator new();
}

void sub_1B7B25874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,PCSharedCount a30)
{
  PCSharedCount::~PCSharedCount(v31);
  PCSharedCount::~PCSharedCount(v30);
  PCSharedCount::~PCSharedCount(&a30);
  _Unwind_Resume(a1);
}

void LiMaterialLayer::getSurfaceSpecularIntensity(os_unfair_lock_s *this, const LiLayeredMaterial *a2, const LiMaterialLayerUniform *a3)
{
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo(this, *((const ProShade::SamplerNode **)a2 + 126));
  long long v8 = *(_OWORD *)(SamplerInfo + 316);
  uint64_t v9 = *(void *)(SamplerInfo + 332);
  uint64_t v6 = &unk_1F11193B8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v7, (const PCSharedCount *)a2 + 234);
  char v5 = &unk_1F11193B8;
  operator new();
}

void sub_1B7B25B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCSharedCount a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,PCSharedCount a26)
{
  PCSharedCount::~PCSharedCount(v27 + 3);
  PCSharedCount::~PCSharedCount(&a18);
  PCSharedCount::~PCSharedCount(v26);
  PCSharedCount::~PCSharedCount(&a26);
  _Unwind_Resume(a1);
}

void LiMaterialLayer::tangentSpaceToEyeSpace(const PCSharedCount *this, const PCSharedCount *a2, const ProShade::Vec3 *a3, const ProShade::Vec3 *a4, const ProShade::Vec3 *a5)
{
  ProShade::Func<ProShade::Func_normalize>::eval(this, (uint64_t)v12);
  ProShade::Func<ProShade::Func_normalize>::eval(a2, (uint64_t)v11);
  PCSharedCount v7 = &unk_1F11193B8;
  char v8 = *((unsigned char *)a4 + 8);
  uint64_t v9 = *((void *)a4 + 2);
  PCSharedCount::PCSharedCount(&v10, (const PCSharedCount *)a4 + 3);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v12, (uint64_t)&v7);
}

void sub_1B7B26804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,PCSharedCount a51)
{
  PCSharedCount::~PCSharedCount(v51 + 3);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a47);
  a48 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a51);
  *(void *)(v52 - 248) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v52 - 224));
  *(void *)(v52 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a11;
  PCSharedCount::~PCSharedCount(a10);
  *(void *)(v52 - 184) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v52 - 160));
  *(void *)(v52 - 152) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v52 - 128));
  _Unwind_Resume(a1);
}

void sub_1B7B26EC0()
{
}

void LiMaterialLayerUniform::setup(uint64_t a1, const void **a2, LiString *a3)
{
  uint64_t v4 = *a2;
  if (*a2) {
    int v5 = *(v4 - 2);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = (unsigned int *)malloc_type_malloc(v5 + 14, 0x8903763CuLL);
  v6[1] = v5 + 1;
  PCSharedCount v6[2] = v5 + 2;
  atomic_store(1u, v6);
  atomic_store(0, v6);
  memcpy(v6 + 3, v4, v5);
  *(_WORD *)((char *)v6 + v5 + 12) = 95;
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  LiString::format(a3, (LiString *)v13);
  size_t v7 = (int)v6[1];
  char v8 = (const void *)v13[0];
  if (v13[0]) {
    int v9 = *(_DWORD *)(v13[0] - 8);
  }
  else {
    int v9 = 0;
  }
  size_t v10 = v7 + v9;
  PCSharedCount v11 = (unsigned int *)malloc_type_malloc(v10 + 13, 0x8903763CuLL);
  v11[1] = v10;
  PCSharedCount v11[2] = v10 + 1;
  atomic_store(1u, v11);
  atomic_store(0, v11);
  memcpy(v11 + 3, v6 + 3, v7);
  memcpy((char *)v11 + v7 + 12, v8, v9);
  *((unsigned char *)v11 + v10 + 12) = 0;
  v13[1] = v11 + 3;
  atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  if (v13[0] && atomic_fetch_add((atomic_uint *volatile)(v13[0] - 12), 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)v13[0] = 0;
    if (v13[0]) {
      PCSharedCount v12 = (void *)(v13[0] - 12);
    }
    else {
      PCSharedCount v12 = 0;
    }
    free(v12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1) {
    free(v6);
  }
  operator new();
}

void sub_1B7B270D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12)
{
  MEMORY[0x1BA9BFBA0](v12, 0x10B1C402CAA7C2BLL);
  if (a12)
  {
    if (atomic_fetch_add(a12 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a12 = 0;
      free(a12 - 3);
    }
  }
  _Unwind_Resume(a1);
}

void LiMaterialLayerUniform::setup(LiMaterialLayerUniform *this, const void **a2, const LiString *a3)
{
  uint64_t v4 = *a2;
  if (*a2) {
    int v5 = *(v4 - 2);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = (unsigned int *)malloc_type_malloc(v5 + 14, 0x8903763CuLL);
  v6[1] = v5 + 1;
  PCSharedCount v6[2] = v5 + 2;
  atomic_store(1u, v6);
  atomic_store(0, v6);
  memcpy(v6 + 3, v4, v5);
  *(_WORD *)((char *)v6 + v5 + 12) = 95;
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  LiString::format(a3, (LiString *)v13);
  size_t v7 = (int)v6[1];
  char v8 = (const void *)v13[0];
  if (v13[0]) {
    int v9 = *(_DWORD *)(v13[0] - 8);
  }
  else {
    int v9 = 0;
  }
  size_t v10 = v7 + v9;
  PCSharedCount v11 = (unsigned int *)malloc_type_malloc(v10 + 13, 0x8903763CuLL);
  v11[1] = v10;
  PCSharedCount v11[2] = v10 + 1;
  atomic_store(1u, v11);
  atomic_store(0, v11);
  memcpy(v11 + 3, v6 + 3, v7);
  memcpy((char *)v11 + v7 + 12, v8, v9);
  *((unsigned char *)v11 + v10 + 12) = 0;
  v13[12] = v11 + 3;
  atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  if (v13[0] && atomic_fetch_add((atomic_uint *volatile)(v13[0] - 12), 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)v13[0] = 0;
    if (v13[0]) {
      uint64_t v12 = (void *)(v13[0] - 12);
    }
    else {
      uint64_t v12 = 0;
    }
    free(v12);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1) {
    free(v6);
  }
  operator new();
}

void sub_1B7B27564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_uint *a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x10B1C402CAA7C2BLL);
  if (a10 && atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a10 = 0;
    free(a10 - 3);
  }
  uint64_t v13 = *(void *)(v11 - 88);
  if (v13 && atomic_fetch_add((atomic_uint *volatile)(v13 - 12), 0xFFFFFFFF) == 1)
  {
    **(unsigned char **)(v11 - 88) = 0;
    uint64_t v14 = *(void *)(v11 - 88);
    if (v14) {
      uint64_t v15 = (void *)(v14 - 12);
    }
    else {
      uint64_t v15 = 0;
    }
    free(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t LiMaterialLayerUniform::get(os_unfair_lock_s *this, uint64_t a2)
{
  if (!*(void *)a2) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = (LiLayeredMaterial *)*(unsigned int *)(*(void *)a2 + 12);

  return LiMaterialLayerUniform::get(this, v2);
}

uint64_t LiMaterialLayerUniform::get(os_unfair_lock_s *this, LiLayeredMaterial *a2)
{
  int v2 = (int)a2;
  {
    LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform = 0;
    qword_1E9EE6000 = 0;
    qword_1E9EE6008 = 0;
    __cxa_atexit((void (*)(void *))std::vector<LiMaterialLayerUniform *>::~vector[abi:ne180100], &LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform, &dword_1B73F3000);
  }
  {
    LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::locuint64_t k = 0;
    __cxa_atexit((void (*)(void *))PCSpinLock::~PCSpinLock, &LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock, &dword_1B73F3000);
  }
  PCSpinLock::lock((os_unfair_lock_t)&LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock);
  if (v2 >= (unint64_t)((qword_1E9EE6000 - LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform) >> 3))
  {
    if ((int)((unint64_t)(qword_1E9EE6000 - LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform) >> 3) <= v2) {
      operator new();
    }
  }
  else
  {
    uint64_t SamplerInfo = LiMaterial::getSamplerInfo(this, *(const ProShade::SamplerNode **)(*(void *)(LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform+ 8 * v2)+ 368));
    if (!SamplerInfo || !*(unsigned char *)(SamplerInfo + 312)) {
      LiMaterialLayerUniform::initializeSamplerAttributes(this, *(const ProShade::SamplerNode ***)(LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform + 8 * v2), v5);
    }
  }
  uint64_t v6 = *(void *)(LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform + 8 * v2);
  PCSpinLock::unlock((os_unfair_lock_t)&LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock);
  return v6;
}

void sub_1B7B28C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LiMaterialLayerUniform *>::~vector[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t LiMaterialLayerUniform::initializeSamplerAttributes(os_unfair_lock_s *this, const ProShade::SamplerNode **a2, LiMaterialLayerUniform *a3)
{
  uint64_t v5 = LiMaterial::obtainSamplerInfo(this, a2[46]);
  *(_DWORD *)(v5 + 324) = 0;
  *(void *)(v5 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_WORD *)(v5 + 328) = 257;
  *(_DWORD *)(v5 + 332) = 0;
  *(_WORD *)(v5 + 33ProCore_Impl::PCNSRefImpl::release(this + 6) = 256;
  *(unsigned char *)(v5 + 338) = 0;
  *(unsigned char *)(v5 + 312) = 1;
  uint64_t v6 = LiMaterial::obtainSamplerInfo(this, a2[58]);
  *(_DWORD *)(v6 + 324) = 0;
  *(void *)(v6 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_WORD *)(v6 + 328) = 257;
  *(_DWORD *)(v6 + 332) = 0;
  *(_WORD *)(v6 + 33ProCore_Impl::PCNSRefImpl::release(this + 6) = 256;
  *(unsigned char *)(v6 + 338) = 0;
  *(unsigned char *)(v6 + 312) = 1;
  uint64_t v7 = LiMaterial::obtainSamplerInfo(this, a2[70]);
  *(void *)(v7 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(v7 + 324) = 1;
  *(_WORD *)(v7 + 328) = 257;
  *(_DWORD *)(v7 + 332) = 0;
  *(_DWORD *)(v7 + 335) = 0;
  *(unsigned char *)(v7 + 312) = 1;
  uint64_t v8 = LiMaterial::obtainSamplerInfo(this, a2[82]);
  *(void *)(v8 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(v8 + 324) = 2;
  *(_WORD *)(v8 + 328) = 257;
  *(_DWORD *)(v8 + 332) = 0;
  *(_DWORD *)(v8 + 335) = 0;
  *(unsigned char *)(v8 + 312) = 1;
  uint64_t v9 = LiMaterial::obtainSamplerInfo(this, a2[94]);
  *(void *)(v9 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(v9 + 324) = 3;
  *(_WORD *)(v9 + 328) = 257;
  *(_DWORD *)(v9 + 332) = 0;
  *(_DWORD *)(v9 + 335) = 0;
  *(unsigned char *)(v9 + 312) = 1;
  uint64_t v10 = LiMaterial::obtainSamplerInfo(this, a2[106]);
  *(_DWORD *)(v10 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(v10 + 32std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  *(_WORD *)(v10 + 328) = 257;
  *(_DWORD *)(v10 + 332) = 0;
  *(_DWORD *)(v10 + 335) = 0;
  *(unsigned char *)(v10 + 312) = 1;
  uint64_t v11 = LiMaterial::obtainSamplerInfo(this, a2[126]);
  *(_DWORD *)(v11 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(v11 + 32std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  *(_WORD *)(v11 + 328) = 257;
  *(_DWORD *)(v11 + 332) = 0;
  *(_DWORD *)(v11 + 335) = 0;
  *(unsigned char *)(v11 + 312) = 1;
  uint64_t v12 = LiMaterial::obtainSamplerInfo(this, a2[146]);
  *(_DWORD *)(v12 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(v12 + 32std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  *(_WORD *)(v12 + 328) = 1;
  *(_DWORD *)(v12 + 332) = 0;
  *(_WORD *)(v12 + 33ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(unsigned char *)(v12 + 338) = 1;
  *(unsigned char *)(v12 + 312) = 1;
  uint64_t v13 = LiMaterial::obtainSamplerInfo(this, a2[158]);
  *(_DWORD *)(v13 + 324) = 0;
  *(void *)(v13 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_WORD *)(v13 + 328) = 257;
  *(_DWORD *)(v13 + 332) = 0;
  *(_DWORD *)(v13 + 335) = 0;
  *(unsigned char *)(v13 + 312) = 1;
  uint64_t result = LiMaterial::obtainSamplerInfo(this, a2[170]);
  *(_DWORD *)(result + 324) = 0;
  *(void *)(result + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_WORD *)(result + 328) = 257;
  *(_DWORD *)(result + 332) = 0;
  *(_DWORD *)(result + 335) = 0;
  *(unsigned char *)(result + 312) = 1;
  return result;
}

void LiLayeredMaterial::LiLayeredMaterial(LiLayeredMaterial *this)
{
  *((void *)this + 88) = &unk_1F1199AC8;
  *((void *)this + 89) = 0;
  *((unsigned char *)this + 72std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  LiMaterial::LiMaterial(this, (uint64_t *)off_1F1126868);
  *(void *)this = &unk_1F1126760;
  *((void *)this + 88) = &unk_1F1126848;
  *((_DWORD *)this + 165) = 1065353216;
  *((void *)this + 83) = 0;
  *((void *)this + 85) = 0;
  *((void *)this + 84) = 0;
  *((_DWORD *)this + 172) = 0;
  *(void *)((char *)this + 692) = 16843009;
  *((unsigned char *)this + 70std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
}

void sub_1B7B2911C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 704) = v3;
  *(unsigned char *)(v1 + 72std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiLayeredMaterial::~LiLayeredMaterial(LiLayeredMaterial *this, PC_Sp_counted_base **a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *((void *)v4 - 3)) = a2[7];
  uint64_t v5 = (void **)((char *)this + 664);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  LiMaterial::~LiMaterial(this, a2 + 1);
}

void LiLayeredMaterial::~LiLayeredMaterial(LiLayeredMaterial *this)
{
  *(void *)(v1 + 704) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 72std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 712));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 704) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 72std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 712));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiLayeredMaterial::~LiLayeredMaterial(LiLayeredMaterial *this)
{
  *(void *)(v1 + 704) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 72std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  int v2 = (PC_Sp_counted_base **)(v1 + 712);

  PCWeakCount::~PCWeakCount(v2);
}

{
  LiLayeredMaterial::~LiLayeredMaterial((LiLayeredMaterial *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t LiLayeredMaterial::setErrorState(uint64_t this)
{
  *(unsigned char *)(this + 70std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  return this;
}

uint64_t LiLayeredMaterial::getErrorState(LiLayeredMaterial *this)
{
  return *((unsigned __int8 *)this + 700);
}

void LiLayeredMaterial::getLayer(LiLayeredMaterial *this@<X0>, int a2@<W1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 83);
  if (a2 >= (unint64_t)((*((void *)this + 84) - v3) >> 4))
  {
    a3->int var0 = 0;
    PCSharedCount::PCSharedCount(a3 + 1);
  }
  else
  {
    uint64_t v4 = (const PCSharedCount *)(v3 + 16 * a2);
    a3->int var0 = v4->var0;
    PCSharedCount::PCSharedCount(a3 + 1, v4 + 1);
  }
}

void LiLayeredMaterial::getHash(LiLayeredMaterial *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  v19[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v19);
  uint64_t v4 = *(void *)(v1 + 664);
  if (*(void *)(v1 + 672) != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(LiMaterialLayer **)(v4 + v5);
      if (!v7) {
        throw_PCNullPointerException(1);
      }
      LiMaterialLayer::getHash(v7);
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v8 = (const ProShade::SamplerNode **)LiMaterialLayerUniform::get((os_unfair_lock_s *)v1, (LiLayeredMaterial *)v6);
      uint64_t SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[46]);
      SamplerAttributes::getHash((SamplerAttributes *)(SamplerInfo + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v10 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[58]);
      SamplerAttributes::getHash((SamplerAttributes *)(v10 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v11 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[70]);
      SamplerAttributes::getHash((SamplerAttributes *)(v11 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v12 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[82]);
      SamplerAttributes::getHash((SamplerAttributes *)(v12 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v13 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[94]);
      SamplerAttributes::getHash((SamplerAttributes *)(v13 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v14 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[106]);
      SamplerAttributes::getHash((SamplerAttributes *)(v14 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v15 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[126]);
      SamplerAttributes::getHash((SamplerAttributes *)(v15 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v16 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[146]);
      SamplerAttributes::getHash((SamplerAttributes *)(v16 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      uint64_t v17 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[158]);
      SamplerAttributes::getHash((SamplerAttributes *)(v17 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      ++v6;
      uint64_t v4 = *(void *)(v1 + 664);
      v5 += 16;
    }
    while (v6 < (*(void *)(v1 + 672) - v4) >> 4);
  }
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 688));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 689));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 690));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 697));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 698));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 699));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 691));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 692));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 693));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 694));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 695));
  PCHashWriteStream::writeValue(v19, *(unsigned char *)(v1 + 696));
  PCHashWriteStream::writeValue(v19, *(_DWORD *)(v1 + 656));
  *uint64_t v3 = *(_OWORD *)PCHashWriteStream::getHash(v19)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v19);
}

void sub_1B7B296A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void SamplerAttributes::getHash(SamplerAttributes *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  v4[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v4);
  PCHashWriteStream::writeValue(v4, *(unsigned char *)v1);
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 1));
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 2));
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 3));
  PCHashWriteStream::writeValue(v4, *(_DWORD *)(v1 + 4));
  PCHashWriteStream::writeValue(v4, *(_DWORD *)(v1 + 8));
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 12));
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 13));
  PCHashWriteStream::writeValue(v4, *(_DWORD *)(v1 + 16));
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 20));
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 21));
  PCHashWriteStream::writeValue(v4, *(unsigned char *)(v1 + 22));
  *uint64_t v3 = *(_OWORD *)PCHashWriteStream::getHash(v4)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v4);
}

void sub_1B7B29818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t LiLayeredMaterial::appendLayer(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3 = (PCSharedCount *)a1[84];
  v4.int var0 = a2->var0;
  if (!a2->var0) {
    throw_PCNullPointerException(1);
  }
  *((_DWORD *)v4.var0 + 3) = ((unint64_t)v3 - a1[83]) >> 4;
  if ((unint64_t)v3 >= a1[85])
  {
    uint64_t result = std::vector<PCPtr<LiMaterialLayer>>::__push_back_slow_path<PCPtr<LiMaterialLayer> const&>(a1 + 83, a2);
  }
  else
  {
    v3->int var0 = v4.var0;
    PCSharedCount::PCSharedCount(v3 + 1, a2 + 1);
    uint64_t result = (uint64_t)&v3[2];
    a1[84] = (uint64_t)&v3[2];
  }
  a1[84] = result;
  return result;
}

void sub_1B7B298C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 672) = v2;
  _Unwind_Resume(a1);
}

PCSharedCount *LiLayeredMaterial::insertLayer(uint64_t a1, int a2, PCSharedCount *a3)
{
  uint64_t v3 = *(void *)(a1 + 664);
  if (!a3->var0) {
    throw_PCNullPointerException(1);
  }
  *((_DWORD *)a3->var0 + 3) = (unint64_t)(*(void *)(a1 + 672) - v3) >> 4;
  PCSharedCount v4 = (PCSharedCount *)(v3 + 16 * a2);
  uint64_t v5 = (uint64_t *)(a1 + 664);

  return std::vector<PCPtr<LiMaterialLayer>>::insert(v5, v4, a3);
}

PCSharedCount *std::vector<PCPtr<LiMaterialLayer>>::insert(uint64_t *a1, PCSharedCount *a2, PCSharedCount *a3)
{
  PCSharedCount v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = ((uint64_t)a2 - *a1) >> 4;
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v12 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v12 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v10 - v7;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v21 = v9;
    if (v14) {
      uint64_t v15 = (PC_Sp_counted_base *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v9, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    v17.int var0 = v15;
    PCSharedCount v18 = (char *)v15 + 16 * v8;
    uint64_t v19 = v18;
    uint64_t v20 = (char *)v15 + 16 * v14;
    std::__split_buffer<PCPtr<LiMaterialLayer>>::push_back[abi:ne180100]((PCSharedCount **)&v17, a3);
    PCSharedCount v4 = (PCSharedCount *)std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(a1, &v17, (uint64_t)v4);
    std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)&v17);
  }
  else if (a2 == (PCSharedCount *)v6)
  {
    a2->int var0 = a3->var0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(v7 + 16 * v8 + 8), a3 + 1);
    a1[1] = (uint64_t)&v4[2];
  }
  else
  {
    std::vector<PCPtr<LiMaterialLayer>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)&a2[2]);
    if (v4 <= a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    v4->int var0 = a3->var0;
    PCSharedCount::PCSharedCount(&v17, a3 + 1);
    PCSharedCount::operator=((uint64_t *)(v7 + 16 * v8 + 8), (uint64_t *)&v17);
    PCSharedCount::~PCSharedCount(&v17);
  }
  return v4;
}

void sub_1B7B29AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void LiLayeredMaterial::getTopLayer(LiLayeredMaterial *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 84);
  if (*((void *)this + 83) == v4)
  {
    a2->int var0 = 0;
    PCSharedCount::PCSharedCount(a2 + 1);
  }
  else
  {
    a2->int var0 = *(PC_Sp_counted_base **)(v4 - 16);
    PCSharedCount::PCSharedCount(a2 + 1, (const PCSharedCount *)(v4 - 8));
  }
}

uint64_t LiLayeredMaterial::setMultipass(uint64_t this, char a2)
{
  *(unsigned char *)(this + 691) = a2;
  return this;
}

uint64_t LiLayeredMaterial::setUseEnvironmentMap(uint64_t this, char a2)
{
  *(unsigned char *)(this + 692) = a2;
  return this;
}

uint64_t LiLayeredMaterial::setUseDiffuseContributions(uint64_t this, char a2)
{
  *(unsigned char *)(this + 693) = a2;
  return this;
}

uint64_t LiLayeredMaterial::setUseSpecularContributions(uint64_t this, char a2)
{
  *(unsigned char *)(this + 694) = a2;
  return this;
}

void LiLayeredMaterial::setUnlimitedSamplers(LiLayeredMaterial *this, char a2)
{
  *((unsigned char *)this + 695) = a2;
  uint64_t v2 = (*((void *)this + 84) - *((void *)this + 83)) >> 4;
  if ((int)v2 >= 1)
  {
    int v5 = 0;
    do
    {
      LiLayeredMaterial::getLayer(this, v5, &v6);
      if (!v6.var0) {
        throw_PCNullPointerException(1);
      }
      *((unsigned char *)v6.var0 + 24) = a2;
      PCSharedCount::~PCSharedCount(&v7);
      ++v5;
    }
    while (v2 != v5);
  }
}

void sub_1B7B29BE0(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t LiLayeredMaterial::setDiffuseAlphaOnly(uint64_t this, char a2)
{
  *(unsigned char *)(this + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  return this;
}

void LiLayeredMaterial::sampleSpecEnvironment()
{
  uint64_t v0 = &unk_1F11193B8;
  operator new();
}

void sub_1B7B29F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCSharedCount a29)
{
  PCSharedCount::~PCSharedCount(&a29);
  *(void *)(v31 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v29;
  PCSharedCount::~PCSharedCount(v30);
  _Unwind_Resume(a1);
}

void LiLayeredMaterial::sampleDiffEnvironment()
{
  uint64_t v0 = &unk_1F11193B8;
  operator new();
}

void sub_1B7B2A49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCSharedCount a29)
{
  PCSharedCount::~PCSharedCount(&a29);
  *(void *)(v31 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v29;
  PCSharedCount::~PCSharedCount(v30);
  _Unwind_Resume(a1);
}

void LiLayeredMaterial::makeProgram(LiLayeredMaterial *this, const LiContext *a2)
{
  uint64_t v11 = &unk_1F1199AC8;
  uint64_t v12 = 0;
  char v13 = 1;
  LiMaterial::LiMaterial((LiMaterial *)v8, (uint64_t *)off_1F1126CD0);
  v8[0] = &unk_1F1126BC8;
  uint64_t v11 = &unk_1F1126CB0;
  v8[83] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v9 = _Q0;
  uint64_t v10 = 0x3FF0000000000000;
  LiErrorLimitsExceededMaterial::makeProgram((LiErrorLimitsExceededMaterial *)v8, v7);
}

void sub_1B7B2A714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void LiErrorLimitsExceededMaterial::makeProgram(LiErrorLimitsExceededMaterial *this, const LiContext *a2)
{
}

void sub_1B7B2AAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v28 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v27;
  PCSharedCount::~PCSharedCount(v26);
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

void sub_1B7B2AC7C()
{
}

void LiErrorLimitsExceededMaterial::~LiErrorLimitsExceededMaterial(LiErrorLimitsExceededMaterial *this)
{
  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1F1126CD0);
  *(void *)(v1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
}

{
  uint64_t v1;
  uint64_t vars8;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1F1126CD0);
  *(void *)(v1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));

  JUMPOUT(0x1BA9BFBA0);
}

void *LiLayeredMaterial::printMaterialDetails(uint64_t a1, void *a2, int a3)
{
  LiImageSource::printIndent(a2, a3 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Layers:\n", 8);
  PCSharedCount v6 = *(const PCSharedCount **)(a1 + 664);
  for (uint64_t i = *(const PCSharedCount **)(a1 + 672); v6 != i; v6 += 2)
  {
    int var0 = v6->var0;
    PCSharedCount::PCSharedCount(&v10, v6 + 1);
    if (!var0) {
      throw_PCNullPointerException(1);
    }
    (*(void (**)(PC_Sp_counted_base *, void *, void))(*(void *)var0 + 64))(var0, a2, (a3 + 2));
    PCSharedCount::~PCSharedCount(&v10);
  }
  return LiMaterial::printMaterialDetails((__CFString **)a1, a2, a3);
}

void sub_1B7B2ADDC(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

BOOL LiLayeredMaterial::isOpaque(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const PCSharedCount **)(a1 + 672);
  uint64_t v3 = *(const PCSharedCount **)(a1 + 664);
  if (v2 == v3) {
    return 1;
  }
  char v9 = 0;
  do
  {
    int var0 = v3->var0;
    PCSharedCount::PCSharedCount(&v8, v3 + 1);
    if (!var0) {
      throw_PCNullPointerException(1);
    }
    (*(void (**)(PC_Sp_counted_base *, char *, uint64_t, uint64_t))(*(void *)var0 + 16))(var0, &v9, a1, a2);
    PCSharedCount::~PCSharedCount(&v8);
    v3 += 2;
  }
  while (v3 != v2);
  return v9 != 0;
}

void sub_1B7B2AEC8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

ProShade::Program *ProShade::Program::Program(ProShade::Program *this)
{
  *((void *)this + 194) = &unk_1F1199AC8;
  *((void *)this + 195) = 0;
  *((unsigned char *)this + 1568) = 1;
  ProShade::ProgramBase::ProgramBase(this, (uint64_t *)&off_1F1119270);
  *(void *)this = &unk_1F1119200;
  *((void *)this + 194) = &unk_1F1119250;
  ProShade::VertexProgram::VertexProgram((ProShade::Program *)((char *)this + 272));
  ProShade::FragmentProgram::FragmentProgram((ProShade::Program *)((char *)this + 912));
  *((_DWORD *)this + 328) = 0;
  *((void *)this + 168) = 0;
  *((void *)this + 167) = 0;
  *((void *)this + 16ProCore_Impl::PCNSRefImpl::release(this + 6) = (char *)this + 1336;
  *((void *)this + 165) = &unk_1F11191C0;
  *((void *)this + 169) = &unk_1F1119A88;
  *((void *)this + 171) = 0;
  *((void *)this + 17std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 174) = 0;
  *((void *)this + 173) = 0;
  *((void *)this + 172) = (char *)this + 1384;
  *((void *)this + 175) = &unk_1F1119AC0;
  *((void *)this + 177) = 0;
  *((void *)this + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 178) = &unk_1F1119AC0;
  *((void *)this + 18std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 179) = 0;
  *((void *)this + 181) = &unk_1F1119BF0;
  *((void *)this + 183) = 0;
  *((void *)this + 182) = 0;
  ProShade::UniformProgram::UniformProgram((void *)this + 184);
  *((unsigned char *)this + 1544) = 0;
  return this;
}

void sub_1B7B2B0A4(_Unwind_Exception *a1)
{
  uint64_t v10 = v6;
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::~PCArray(v10);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray(v8);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray(v7);
  ProShade::InsertUniform::~InsertUniform(v5);
  ProShade::FragmentProgram::~FragmentProgram(v4);
  ProShade::VertexProgram::~VertexProgram(v3);
  ProShade::ProgramBase::~ProgramBase((ProShade::ProgramBase *)v1, (uint64_t *)(v9 + 8));
  *(void *)(v1 + 1552) = v2;
  *(unsigned char *)(v1 + 1568) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1560));
  _Unwind_Resume(a1);
}

void LiErrorLimitsExceededMaterial::getHash(LiErrorLimitsExceededMaterial *this)
{
  MEMORY[0x1F4188790](this);
  uint64_t v2 = v1;
  v3[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v3);
  PCHashWriteStream::writeValue(v3, 54321);
  *uint64_t v2 = *(_OWORD *)PCHashWriteStream::getHash(v3)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v3);
}

void sub_1B7B2B1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void LiVramLimitsExceededMaterial::makeProgram(LiVramLimitsExceededMaterial *this, const LiContext *a2)
{
}

void sub_1B7B2B588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v28 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v27;
  PCSharedCount::~PCSharedCount(v26);
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

void sub_1B7B2B70C()
{
}

void LiVramLimitsExceededMaterial::getHash(LiVramLimitsExceededMaterial *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  v6[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v6);
  PCHashWriteStream::writeValue(v6, 7654321);
  uint64_t v4 = 0;
  uint64_t v5 = v1 + 664;
  do
  {
    PCHashWriteStream::writeValue(v6, *(double *)(v5 + v4));
    v4 += 8;
  }
  while (v4 != 32);
  *uint64_t v3 = *(_OWORD *)PCHashWriteStream::getHash(v6)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v6);
}

void sub_1B7B2B7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'LiErrorLimitsExceededMaterial::~LiErrorLimitsExceededMaterial(LiErrorLimitsExceededMaterial *this)
{
  LiMaterial::~LiMaterial((LiErrorLimitsExceededMaterial *)((char *)this + *(void *)(*(void *)this - 24)), (PC_Sp_counted_base **)off_1F1126CD0);
  *(void *)(v1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 712) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 704);

  PCWeakCount::~PCWeakCount(v2);
}

{
  PC_Sp_counted_base **v1;
  uint64_t vars8;

  uint64_t v1 = (PC_Sp_counted_base **)((char *)this + *(void *)(*(void *)this - 24));
  LiMaterial::~LiMaterial((LiMaterial *)v1, (PC_Sp_counted_base **)off_1F1126CD0);
  v1[87] = (PC_Sp_counted_base *)&unk_1F1199AC8;
  *((unsigned char *)v1 + 712) = 0;
  PCWeakCount::~PCWeakCount(v1 + 88);

  JUMPOUT(0x1BA9BFBA0);
}

void LiVramLimitsExceededMaterial::~LiVramLimitsExceededMaterial(LiVramLimitsExceededMaterial *this)
{
  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1F1127090);
  *(void *)(v1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
}

{
  uint64_t v1;
  uint64_t vars8;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1F1127090);
  *(void *)(v1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiVramLimitsExceededMaterial::~LiVramLimitsExceededMaterial(LiVramLimitsExceededMaterial *this)
{
  LiMaterial::~LiMaterial((LiVramLimitsExceededMaterial *)((char *)this + *(void *)(*(void *)this - 24)), (PC_Sp_counted_base **)off_1F1127090);
  *(void *)(v1 + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 712) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 704);

  PCWeakCount::~PCWeakCount(v2);
}

{
  PC_Sp_counted_base **v1;
  uint64_t vars8;

  uint64_t v1 = (PC_Sp_counted_base **)((char *)this + *(void *)(*(void *)this - 24));
  LiMaterial::~LiMaterial((LiMaterial *)v1, (PC_Sp_counted_base **)off_1F1127090);
  v1[87] = (PC_Sp_counted_base *)&unk_1F1199AC8;
  *((unsigned char *)v1 + 712) = 0;
  PCWeakCount::~PCWeakCount(v1 + 88);

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
  else
  }
    uint64_t v4 = 0;
  uint64_t v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    if (v4)
    {
      if (v6) {
        ProShade::ScalarFunctionTraits_2<ProShade::step_traits>::compute((uint64_t)v4, (uint64_t)v6);
      }
    }
  }
  PCSharedCount::PCSharedCount(&v7);
  operator new();
}

void sub_1B7B2BD18(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_2<ProShade::step_traits>::compute(uint64_t a1, uint64_t a2)
{
  v8[18] = *MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v8);
  ProShade::Value::Value(v7);
  ProShade::Value::Value(&v6);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 224))(a1, v8);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 224))(a2, v7);
  if (SLODWORD(v8[0]) > 1)
  {
    if (LODWORD(v8[0]) != 2) {
      goto LABEL_8;
    }
    int v4 = v7[0];
  }
  else
  {
    int v4 = v7[0];
    if (SLODWORD(v7[0]) < 2)
    {
      ProShade::eval_type<ProShade::step_traits,BOOL>((uint64_t)v8, (uint64_t)v7, &v6);
      goto LABEL_9;
    }
  }
  if (v4 <= 2)
  {
    ProShade::eval_type<ProShade::step_traits,int>((uint64_t)v8, (uint64_t)v7, &v6);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::step_traits,double>((uint64_t)v8, (uint64_t)v7, &v6);
LABEL_9:
  ProShade::Const::create((ProShade::Const *)&v6, v5);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::Func(uint64_t a1, PCShared_base *a2, PCShared_base *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1127420);
  *(void *)a1 = &unk_1F1127348;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1127400;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  ProShade::VarT<ProShade::Node>::VarT(v13, a2);
  int v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6) {
    int v7 = (2 * (v6 + 1)) | 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  ProShade::VarT<ProShade::Node>::VarT(v13, a3);
  int v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8) {
    int v9 = (2 * (v8 + 1)) | 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 56);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v13);
  v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v14);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 < 1) {
    PCArray_base::badIndex(v10);
  }
  if (v11 <= 1) {
    PCArray_base::badIndex(v10);
  }
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(void *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B2C0F0(_Unwind_Exception *a1)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v4);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::step_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"step doesn't apply to BOOL", v8);
  }
  return result;
}

void sub_1B7B2C268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::step_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    int v9 = (int *)(a2 + 16);
    PCString v10 = (int *)(a1 + 16);
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      int v13 = *v9++;
      if (v13 >= v11) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      *(double *)Serializer++ = v14;
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B2C3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::step_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(void *)exception = &unk_1F10B1208;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    int v9 = (double *)(a2 + 16);
    PCString v10 = (double *)(a1 + 16);
    do
    {
      double v11 = *v10++;
      double v12 = v11;
      double v13 = *v9++;
      if (v13 < v12) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      *(double *)Serializer++ = v14;
      uint64_t result = (result - 1);
    }
    while (result);
  }
  return result;
}

void sub_1B7B2C538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "step");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v5 = 0;
    if (v5) {
      uint64_t v4 = v5 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B2C6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  void v5[2] = v4 + 5;
  atomic_store(1u, v5);
  int v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1885697139;
  *((unsigned char *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *int v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B2C7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "step");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      double v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  uint64_t v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B2CA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::clone()
{
}

void sub_1B7B2CC4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    PCArray_base::badIndex(a1);
  }
  if (v4 <= 1) {
    PCArray_base::badIndex(a1);
  }
  uint64_t v5 = (int *)(*(void *)(a2 + 16) + 144);
  int v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2) {
      goto LABEL_16;
    }
    int v7 = *v5;
  }
  else
  {
    int v7 = *v5;
    if (*v5 < 2)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      return ProShade::eval_type<ProShade::step_traits,BOOL>(v8, (uint64_t)v5, a3);
    }
  }
  if (v7 <= 2)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    return ProShade::eval_type<ProShade::step_traits,int>(v10, (uint64_t)v5, a3);
  }
LABEL_16:
  uint64_t v11 = *(void *)(a2 + 16);

  return ProShade::eval_type<ProShade::step_traits,double>(v11, (uint64_t)v5, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1127420);
  *(void *)a1 = &unk_1F1127348;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1127400;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B2CFC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiMaterialLayerUniform::LiMaterialLayerUniform(LiMaterialLayerUniform *this)
{
  *(void *)this = &unk_1F1119970;
  *((void *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *(void *)this = &unk_1F1119B88;
  *((void *)this + 4) = &unk_1F1119970;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((void *)this + 4) = &unk_1F1119B88;
  *((void *)this + 8) = &unk_1F1119970;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((void *)this + 8) = &unk_1F1119B88;
  *((void *)this + 12) = &unk_1F1119970;
  *((void *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  *((void *)this + 12) = &unk_1F1119B88;
  *((void *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1119970;
  *((void *)this + 18) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 19);
  *((void *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1119B88;
  *((void *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1119970;
  *((void *)this + 22) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 23);
  *((void *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1119B88;
  *((void *)this + 24) = &unk_1F1119970;
  *((void *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 27);
  *((void *)this + 24) = &unk_1F1119B88;
  *((void *)this + 28) = &unk_1F1119970;
  *((void *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *((void *)this + 28) = &unk_1F1119B88;
  *((void *)this + 32) = &unk_1F1119970;
  *((void *)this + 34) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 35);
  *((void *)this + 32) = &unk_1F1119B88;
  *((void *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1119970;
  *((void *)this + 38) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 39);
  *((void *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1119B88;
  *((void *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1119970;
  *((void *)this + 42) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  *((void *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1119B88;
  ProShade::SamplerT<3553,false,false,false>::SamplerT();
}

void sub_1B7B2DF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, PCSharedCount *a12, uint64_t a13, uint64_t *a14, PCSharedCount *a15, uint64_t a16, uint64_t *a17, PCSharedCount *a18, uint64_t a19, uint64_t *a20,PCSharedCount *a21,uint64_t a22,uint64_t *a23,PCSharedCount *a24,uint64_t a25,uint64_t *a26,PCSharedCount *a27,uint64_t a28,uint64_t *a29,PCSharedCount *a30,uint64_t a31,uint64_t *a32,PCSharedCount *a33,uint64_t a34,uint64_t *a35,PCSharedCount *a36,uint64_t a37,uint64_t *a38,PCSharedCount *a39,uint64_t a40,uint64_t *a41,PCSharedCount *a42,uint64_t a43,uint64_t *a44,PCSharedCount *a45,uint64_t a46,uint64_t *a47,PCSharedCount *a48,uint64_t a49,uint64_t *a50,PCSharedCount *a51,uint64_t a52,uint64_t *a53,PCSharedCount *a54,uint64_t a55,uint64_t *a56,PCSharedCount *a57,uint64_t a58,uint64_t *a59,PCSharedCount *a60,uint64_t a61,uint64_t *a62,PCSharedCount *a63)
{
  *double v79 = v74;
  PCSharedCount::~PCSharedCount(v80);
  *long long v77 = v78;
  PCSharedCount::~PCSharedCount(v76);
  *uint64_t v75 = a11;
  PCSharedCount::~PCSharedCount(a10);
  *uint64_t v73 = a13;
  PCSharedCount::~PCSharedCount(a12);
  *a14 = a16;
  PCSharedCount::~PCSharedCount(a15);
  *a17 = a19;
  PCSharedCount::~PCSharedCount(a18);
  *a20 = a22;
  PCSharedCount::~PCSharedCount(a21);
  *a23 = a25;
  PCSharedCount::~PCSharedCount(a24);
  *a26 = a28;
  PCSharedCount::~PCSharedCount(a27);
  *a29 = a31;
  PCSharedCount::~PCSharedCount(a30);
  *a32 = a34;
  PCSharedCount::~PCSharedCount(a33);
  *a35 = a37;
  PCSharedCount::~PCSharedCount(a36);
  *a38 = a40;
  PCSharedCount::~PCSharedCount(a39);
  *a41 = a43;
  PCSharedCount::~PCSharedCount(a42);
  *a44 = a46;
  PCSharedCount::~PCSharedCount(a45);
  *a47 = a49;
  PCSharedCount::~PCSharedCount(a48);
  *a50 = a52;
  PCSharedCount::~PCSharedCount(a51);
  *a53 = a55;
  PCSharedCount::~PCSharedCount(a54);
  *a56 = a58;
  PCSharedCount::~PCSharedCount(a57);
  *a59 = a61;
  PCSharedCount::~PCSharedCount(a60);
  *a62 = a64;
  PCSharedCount::~PCSharedCount(a63);
  *a65 = a67;
  PCSharedCount::~PCSharedCount(a66);
  *a68 = a70;
  PCSharedCount::~PCSharedCount(a69);
  *a71 = STACK[0x200];
  PCSharedCount::~PCSharedCount(a72);
  *(void *)STACK[0x208] = STACK[0x218];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x210]);
  *(void *)STACK[0x220] = STACK[0x230];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x228]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x238]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x240]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x248]);
  *(void *)STACK[0x250] = STACK[0x260];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x258]);
  *(void *)STACK[0x268] = STACK[0x278];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x270]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x280]);
  *(void *)STACK[0x288] = STACK[0x298];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x290]);
  *(void *)STACK[0x2A0] = STACK[0x2B0];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x2A8]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x2B8]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x2C0]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x2C8]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x2D0]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x2D8]);
  ProShade::Sampler::~Sampler((PCSharedCount *)STACK[0x2E0]);
  *(void *)STACK[0x2E8] = STACK[0x2F8];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x2F0]);
  *(void *)STACK[0x300] = STACK[0x310];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x308]);
  *(void *)STACK[0x318] = STACK[0x328];
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x320]);
  *(void *)STACK[0x330] = *(void *)(v81 - 256);
  PCSharedCount::~PCSharedCount((PCSharedCount *)STACK[0x338]);
  double v83 = *(PCSharedCount **)(v81 - 240);
  **(void **)(v81 - 248) = *(void *)(v81 - 232);
  PCSharedCount::~PCSharedCount(v83);
  v84 = *(PCSharedCount **)(v81 - 216);
  **(void **)(v81 - 224) = *(void *)(v81 - 208);
  PCSharedCount::~PCSharedCount(v84);
  double v85 = *(PCSharedCount **)(v81 - 192);
  **(void **)(v81 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(v81 - 184);
  PCSharedCount::~PCSharedCount(v85);
  **(void **)(v81 - 168) = *(void *)(v81 - 176);
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v81 - 160));
  **(void **)(v81 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(v81 - 144);
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v81 - 152));
  **(void **)(v81 - 112) = *(void *)(v81 - 120);
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v81 - 128));
  double v86 = *(PCSharedCount **)(v81 - 104);
  void *v72 = *(void *)(v81 - 96);
  PCSharedCount::~PCSharedCount(v86);
  _Unwind_Resume(a1);
}

void sub_1B7B2E240()
{
}

void sub_1B7B2E248()
{
}

void sub_1B7B2E250()
{
}

void sub_1B7B2E258()
{
}

void sub_1B7B2E260()
{
}

void sub_1B7B2E268()
{
}

void sub_1B7B2E270()
{
}

void sub_1B7B2E278()
{
}

void sub_1B7B2E280()
{
}

void sub_1B7B2E288()
{
}

void sub_1B7B2E290()
{
}

void sub_1B7B2E298()
{
}

void sub_1B7B2E2A0()
{
}

void sub_1B7B2E2A8()
{
}

void sub_1B7B2E2B0()
{
}

void sub_1B7B2E2B8()
{
}

void sub_1B7B2E2C0()
{
}

void sub_1B7B2E2C8()
{
}

void sub_1B7B2E2D0()
{
}

void sub_1B7B2E2D8()
{
}

void sub_1B7B2E2E0()
{
}

void sub_1B7B2E2E8()
{
}

void sub_1B7B2E2F0()
{
}

void sub_1B7B2E2F8()
{
}

void sub_1B7B2E300()
{
}

void sub_1B7B2E308()
{
}

void sub_1B7B2E310()
{
}

void sub_1B7B2E318()
{
}

void sub_1B7B2E320()
{
}

void sub_1B7B2E328()
{
}

void sub_1B7B2E330()
{
}

void sub_1B7B2E338()
{
}

void sub_1B7B2E340()
{
}

void sub_1B7B2E348()
{
}

void sub_1B7B2E350()
{
}

void sub_1B7B2E358()
{
}

void sub_1B7B2E360()
{
}

void sub_1B7B2E368()
{
}

void sub_1B7B2E370()
{
}

void sub_1B7B2E378()
{
}

void sub_1B7B2E380()
{
}

void sub_1B7B2E388()
{
}

void sub_1B7B2E390()
{
}

void sub_1B7B2E398()
{
}

void sub_1B7B2E3A0()
{
}

void sub_1B7B2E3A8()
{
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::eval(uint64_t a1)
{
  v7[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = v2;
      ProShade::Value::Value(v6);
      ProShade::Value::Value(&v5);
      (*(void (**)(void *, void *))(*(void *)v3 + 224))(v3, v6);
      ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>::eval((int *)v6, &v5);
      ProShade::Const::create((ProShade::Const *)&v5, v4);
    }
  }
  v6[0] = &unk_1F11193B8;
  PCSharedCount v6[2] = 0;
  PCSharedCount::PCSharedCount(v7);
  operator new();
}

void sub_1B7B2E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1127698);
  *(void *)a1 = &unk_1F11275C0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1127678;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B2E728(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    int Size = ProShade::shapeGetSize(a1[1], v8);
    int v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        uint64_t v11 = a1 + 4;
        do
        {
          int v12 = *v11++;
          *(long double *)Serializer++ = cos((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      int v13 = (double *)(a1 + 4);
      do
      {
        long double v14 = *v13++;
        *(long double *)Serializer++ = cos(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1) {
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cos doesn't apply to BOOL", v6);
    }
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "cos");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)OZChannelBase v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B2E9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  OZChannelBase v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 28515;
  PCSharedCount v6[2] = 115;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B2EABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "cos");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      int v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  uint64_t v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B2ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::clone()
{
}

void sub_1B7B2EF20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(int **)(a2 + 16);

  ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>::eval(v3, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1127698);
  *(void *)a1 = &unk_1F11275C0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1127678;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B2F1F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::eval(uint64_t a1)
{
  v7[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = v2;
      ProShade::Value::Value(v6);
      ProShade::Value::Value(&v5);
      (*(void (**)(void *, void *))(*(void *)v3 + 224))(v3, v6);
      ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>::eval((int *)v6, &v5);
      ProShade::Const::create((ProShade::Const *)&v5, v4);
    }
  }
  v6[0] = &unk_1F11193B8;
  PCSharedCount v6[2] = 0;
  PCSharedCount::PCSharedCount(v7);
  operator new();
}

void sub_1B7B2F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1127910);
  *(void *)a1 = &unk_1F1127838;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11278F0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B2F5A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    int Size = ProShade::shapeGetSize(a1[1], v8);
    int v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        uint64_t v11 = a1 + 4;
        do
        {
          int v12 = *v11++;
          *(long double *)Serializer++ = sin((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      int v13 = (double *)(a1 + 4);
      do
      {
        long double v14 = *v13++;
        *(long double *)Serializer++ = sin(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1) {
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"sin doesn't apply to BOOL", v6);
    }
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "sin");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)OZChannelBase v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B2F820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  OZChannelBase v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  void v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  int v6 = (char *)v5 + v4 + 12;
  *(_WORD *)int v6 = 26995;
  PCSharedCount v6[2] = 110;
  *((unsigned char *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B2F93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "sin");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      int v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  uint64_t v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B2FBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::clone()
{
}

void sub_1B7B2FDA0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(int **)(a2 + 16);

  ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>::eval(v3, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1127910);
  *(void *)a1 = &unk_1F1127838;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11278F0;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B30074(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::InsertUniform::~InsertUniform(ProShade::InsertUniform *this)
{
  *(void *)this = &unk_1F11191C0;
  std::__tree<LiString>::destroy((uint64_t)this + 56, *((void **)this + 8));
  *((void *)this + 4) = &unk_1F1119A88;
  if (*((int *)this + 10) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *((_DWORD *)this + 10);
  }
  PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize((uint64_t)this + 32, 0, v2);
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((_DWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(void *)this = &unk_1F112DF28;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy((uint64_t)this + 8, *((PCSharedCount **)this + 2));
}

void ProShade::Vec4::Vec4()
{
}

void sub_1B7B3022C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstVector::ConstVector(uint64_t a1, _OWORD *a2)
{
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112D778);
  size_t v4 = off_1F112D770;
  *(void *)a1 = off_1F112D770;
  *(void *)(a1 + *(v4 - 3)) = off_1F112D798;
  *(void *)a1 = &unk_1F112D648;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *(_OWORD *)(a1 + 48) = *a2;
  *(_OWORD *)(a1 + 64) = a2[1];
  *(void *)(a1 + 24) = 0x400000003;
  return a1;
}

{
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112D778);
  *(void *)a1 = &unk_1F112D648;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *(_OWORD *)(a1 + 48) = *a2;
  *(_OWORD *)(a1 + 64) = xmmword_1B7E733E0;
  *(void *)(a1 + 24) = 0x200000003;
  return a1;
}

void sub_1B7B303A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (PCSharedCount *)**a1;
  if (v2)
  {
    size_t v4 = (PCSharedCount *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 2;
        PCSharedCount::~PCSharedCount(v4 - 1);
        size_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<PCPtr<LiMaterialLayer>>::__push_back_slow_path<PCPtr<LiMaterialLayer> const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  PCString v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (PCSharedCount *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  PCString v16 = &v10[16 * v9];
  v11->int var0 = a2->var0;
  PCSharedCount::PCSharedCount(v11 + 1, a2 + 1);
  v15 += 2;
  std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B7B30524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 24; ; i -= 16)
  {
    uint64_t v12 = a3 + i;
    if (a3 + i - 24 == a5) {
      break;
    }
    *(void *)(a7 + i - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(v12 - 40);
    int v13 = (PCSharedCount *)(a7 + i - 32);
    PCSharedCount::PCSharedCount(v13, (const PCSharedCount *)(v12 - 32));
  }
  return a6;
}

uint64_t std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = i - 16;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const PCSharedCount *std::vector<PCPtr<LiMaterialLayer>>::__move_range(uint64_t a1, const PCSharedCount *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (const PCSharedCount *)((char *)a2 + v6 - a4);
  uint64_t v8 = (PCSharedCount *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v10 = (const PCSharedCount *)((char *)a2 + v6 - a4);
    uint64_t v8 = *(PCSharedCount **)(a1 + 8);
    do
    {
      v8->int var0 = v10->var0;
      PCSharedCount::PCSharedCount(v8 + 1, v10 + 1);
      v10 += 2;
      v8 += 2;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>((uint64_t)&v12, a2, v7, v6);
}

void sub_1B7B30748(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__split_buffer<PCPtr<LiMaterialLayer>>::push_back[abi:ne180100](PCSharedCount **a1, PCSharedCount *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (char *)v5 - (char *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v4 - *a1;
      }
      uint64_t v14 = (uint64_t)a1[4];
      uint64_t v29 = a1[4];
      uint64_t v15 = (PCSharedCount *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v14, v13);
      PCString v16 = &v15[2 * (v13 >> 2)];
      double v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      PCSharedCount v18 = (char *)&v15[2 * v17];
      v27.i64[1] = (uint64_t)v16;
      uint64_t v28 = v18;
      unint64_t v19 = (unint64_t)a1[1];
      uint64_t v20 = (uint64_t)a1[2] - v19;
      if (v20)
      {
        uint64_t v21 = (char *)v16 + (v20 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v22 = 16 * (v20 >> 4);
        PCSharedCount v23 = (const PCSharedCount *)(v19 + 8);
        do
        {
          v16->int var0 = v23[-1].var0;
          PCSharedCount::PCSharedCount(v16 + 1, v23);
          v16 += 2;
          v23 += 2;
          v22 -= 16;
        }
        while (v22);
        uint64_t v15 = v26;
        PCString v16 = (PCSharedCount *)v27.i64[0];
        int64x2_t v24 = *(int64x2_t *)(a1 + 1);
        PCSharedCount v18 = v28;
      }
      else
      {
        int64x2_t v24 = vdupq_n_s64(v19);
        uint64_t v21 = (char *)&v15[2 * (v13 >> 2)];
      }
      double v26 = *a1;
      *a1 = v15;
      a1[1] = v16;
      int64x2_t v27 = v24;
      int v25 = (char *)a1[3];
      a1[2] = (PCSharedCount *)v21;
      a1[3] = (PCSharedCount *)v18;
      uint64_t v28 = v25;
      std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)&v26);
      uint64_t v4 = a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>((int)&v26, v5, v4, &v5[-2 * (v10 >> 1)].var0);
      uint64_t v4 = v12;
      a1[1] -= 2 * v11;
      a1[2] = v12;
    }
  }
  v4->int var0 = a2->var0;
  PCSharedCount::PCSharedCount(v4 + 1, a2 + 1);
  a1[2] += 2;
}

void sub_1B7B308AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

const PCSharedCount *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>(uint64_t a1, const PCSharedCount *a2, const PCSharedCount *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = (uint64_t *)(a4 - 8);
    uint64_t v7 = a3 - 1;
    do
    {
      *(v6 - 1) = (uint64_t)v7[-1].var0;
      PCSharedCount::PCSharedCount(&v10, v7);
      PCSharedCount::operator=(v6, (uint64_t *)&v10);
      PCSharedCount::~PCSharedCount(&v10);
      v6 -= 2;
      uint64_t v8 = v7 - 1;
      v7 -= 2;
    }
    while (v8 != a2);
  }
  return a3;
}

void sub_1B7B30A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

PCSharedCount *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>(int a1, PCSharedCount *a2, PCSharedCount *a3, PC_Sp_counted_base **a4)
{
  uint64_t v4 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  do
  {
    int var0 = v4->var0;
    uint64_t v6 = v4 + 1;
    *a4 = var0;
    uint64_t v8 = (uint64_t *)(a4 + 1);
    PCSharedCount::PCSharedCount(&v10, v6);
    PCSharedCount::operator=(v8, (uint64_t *)&v10);
    PCSharedCount::~PCSharedCount(&v10);
    uint64_t v4 = (PCSharedCount *)&v6[1];
    a4 = (PC_Sp_counted_base **)(v8 + 1);
  }
  while (v4 != v5);
  return v5;
}

void sub_1B7B30AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + v7 + 8), (const PCSharedCount *)(a2 + v7 + 8));
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B7B30B24(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v4 + v2));
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void PSShaderBase::PSShaderBase(PSShaderBase *this)
{
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F1127AA8;
  *((_WORD *)this + 12) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
}

void sub_1B7B30BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  char v12 = v11;
  a10 = v12;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v14 = *(std::__shared_weak_count **)(v10 + 16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void PSShaderBase::~PSShaderBase(PCString *this)
{
  this->int var0 = (__CFString *)&unk_1F1127AA8;
  PCString::~PCString(this + 7);
  uint64_t v3 = this + 4;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  int var0 = (std::__shared_weak_count *)this[2].var0;
  if (var0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](var0);
  }
}

uint64_t PSShaderBase::id(std::__shared_weak_count **this)
{
  uint64_t v2 = (ProGL::ObjectHandle *)(this + 1);
  if (!ProGL::ObjectHandle::name((ProGL::ObjectHandle *)(this + 1)))
  {
    ProGL::GL::GL((ProGL::GL *)v8);
    GLenum v3 = ((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
    ProGL::createShaderObject((ProGL *)v8, v3, &v7);
    long long v4 = v7;
    long long v7 = 0uLL;
    uint64_t v5 = this[2];
    *(_OWORD *)(this + 1) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (*((void *)&v7 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
      }
    }
    ProGL::GL::~GL((ProGL::GL *)v8);
  }
  return ProGL::ObjectHandle::name(v2);
}

void sub_1B7B30CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void PSShaderBase::setSource(PSShaderBase *this, PCString *a2, int a3)
{
  unsigned int v6 = PCString::size(a2);
  uint64_t v7 = *((void *)this + 4);
  uint64_t v8 = *((void *)this + 5);
  unint64_t v9 = (unint64_t)(v8 - v7) >> 3;
  if (v6)
  {
    if ((int)v9 <= a3)
    {
      do
      {
        PCString::PCString(&v11, "");
        std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)this + 4, &v11);
        PCString::~PCString(&v11);
        uint64_t v7 = *((void *)this + 4);
      }
      while ((int)((unint64_t)(*((void *)this + 5) - v7) >> 3) <= a3);
    }
    uint64_t v10 = (PCString *)(v7 + 8 * a3);
    if (PCString::compare(v10, a2))
    {
      PCString::set(v10, a2);
      *((unsigned char *)this + 24) = 0;
    }
  }
  else
  {
    if ((int)v9 <= a3) {
      goto LABEL_10;
    }
    PCString::set((PCString *)(v7 + 8 * a3), a2);
    while (1)
    {
      uint64_t v7 = *((void *)this + 4);
      uint64_t v8 = *((void *)this + 5);
LABEL_10:
      if (v8 == v7 || PCString::size((PCString *)(v8 - 8))) {
        break;
      }
      std::vector<PCString>::resize((uint64_t *)this + 4, ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3) - 1);
    }
  }
}

void std::vector<PCString>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != v6)
        PCString::~PCString((PCString *)(v3 - 8));
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<PCString>::__append(a1, v5);
  }
}

uint64_t PSShaderBase::compile(uint64_t this)
{
  if (!*(unsigned char *)(this + 24))
  {
    PSShaderBase::id((std::__shared_weak_count **)this);
    ProGL::GL::GL((ProGL::GL *)v3);
    uint64_t v1 = 0x1400000000;
    uint64_t v2 = 0;
    operator new[]();
  }
  return this;
}

void sub_1B7B31280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  if (v23) {
    __cxa_free_exception(v22);
  }
  MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  if (a14) {
    MEMORY[0x1BA9BFB70](a14, 0x50C80EE9192B6);
  }
  PCDynamicArray<std::string>::~PCDynamicArray((uint64_t)&a19);
  ProGL::GL::~GL((ProGL::GL *)&a21);
  _Unwind_Resume(a1);
}

void printWithLineNumbers(PCString *a1)
{
  int v2 = PCString::size(a1);
  CStr = PCString::createCStr(a1);
  unint64_t v4 = CStr;
  if (v2 >= 1)
  {
    BOOL v5 = 0;
    uint64_t v6 = v2;
    uint64_t v7 = (void *)MEMORY[0x1E4FBA240];
    uint64_t v8 = 1;
    unint64_t v9 = CStr;
    do
    {
      int v11 = *v9++;
      int v10 = v11;
      if (!v5)
      {
        LiString::format((LiString *)"%4d: ", (LiString *)&v15, v8);
        char v12 = v15 ? v15 : "";
        size_t v13 = strlen(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v12, v13);
        if (v15)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v15 - 3, 0xFFFFFFFF) == 1)
          {
            const char *v15 = 0;
            if (v15) {
              uint64_t v14 = (char *)(v15 - 12);
            }
            else {
              uint64_t v14 = 0;
            }
            free(v14);
          }
        }
      }
      BOOL v5 = v10 != 10;
      if (v10 == 10) {
        uint64_t v8 = (v8 + 1);
      }
      else {
        uint64_t v8 = v8;
      }
      char v16 = v10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v16, 1);
      --v6;
    }
    while (v6);
  }
  free(v4);
}

void sub_1B7B314C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    LiGeode::print(a11, (unsigned char **)&a11);
  }
  _Unwind_Resume(exception_object);
}

void PSShaderBase::source(PSShaderBase *this@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount::PCSharedCount(a2);
  unint64_t v4 = *((void *)this + 5) - *((void *)this + 4);
  if ((int)(v4 >> 3) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v4 & 0x7FFFFFFF8;
    do
    {
      if (PCString::size((PCString *)(*((void *)this + 4) + v5)))
      {
        if (*((unsigned char *)this + 25))
        {
          PCString::ssprintf((PCString *)"// segment %d\n", &v8, v6);
          PCString::append((PCString *)a2, &v8);
          PCString::~PCString(&v8);
        }
        PCString::append((PCString *)a2, (const PCString *)(*((void *)this + 4) + v5));
      }
      uint64_t v6 = (v6 + 1);
      v5 += 8;
    }
    while (v7 != v5);
  }
}

void sub_1B7B315A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  PCString::~PCString(v10);
  _Unwind_Resume(a1);
}

void PCGLSLException::PCGLSLException(PCGLSLException *this, const PCString *a2, const PCString *a3)
{
  PCException::PCException(this, a2);
  v4->int var0 = (__CFString *)&unk_1F1119A48;
  PCString::PCString(v4 + 8, a3);
}

void sub_1B7B31620(_Unwind_Exception *a1)
{
  PCException::~PCException(v1);
  _Unwind_Resume(a1);
}

void std::vector<PCString>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(PCSharedCount **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 3)
  {
    if (a2)
    {
      uint64_t v14 = 8 * a2;
      uint64_t v15 = &v7[a2];
      do
      {
        PCSharedCount::PCSharedCount(v7++);
        v14 -= 8;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = (uint64_t)v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v22 = v4;
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    char v16 = (PCSharedCount *)&v13[8 * v10];
    v19[0] = v13;
    v19[1] = v16;
    uint64_t v20 = v16;
    uint64_t v21 = &v13[8 * v12];
    uint64_t v17 = 8 * a2;
    PCSharedCount v18 = &v16[a2];
    do
    {
      PCSharedCount::PCSharedCount(v16++);
      v17 -= 8;
    }
    while (v17);
    uint64_t v20 = v18;
    std::vector<PCString>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<PCString>::~__split_buffer((uint64_t)v19);
  }
}

void sub_1B7B31740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PCString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PCDynamicArray<std::string>::~PCDynamicArray(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      do
      {
        if (*(char *)(v2 + v4 - 1) < 0) {
          operator delete(*(void **)(v2 + v4 - 24));
        }
        v4 -= 24;
      }
      while (v4);
    }
    MEMORY[0x1BA9BFB70](v2 - 16, 0x1012C80EC159624);
  }
  *(void *)(a1 + 8) = 0;
  return a1;
}

BOOL PCDynamicArray<std::string>::insert(int *a1, unsigned int a2, const std::string *a3)
{
  int v6 = *a1;
  int v7 = a1[1];
  if (*a1 == v7)
  {
    a1[1] = 2 * v6;
    operator new[]();
  }
  uint64_t v8 = *((void *)a1 + 1) + 24 * a2;
  memmove((void *)(v8 + 24), (const void *)v8, 24 * (*a1 - a2));
  std::string::operator=((std::string *)(*((void *)a1 + 1) + 24 * a2), a3);
  ++*a1;
  return v6 == v7;
}

BOOL PCDynamicArray<char const*>::insert(int *a1, unsigned int a2, void *a3)
{
  int v6 = *a1;
  int v7 = a1[1];
  if (*a1 == v7)
  {
    a1[1] = 2 * v6;
    operator new[]();
  }
  uint64_t v8 = *((void *)a1 + 1) + 8 * a2;
  memmove((void *)(v8 + 8), (const void *)v8, 8 * (*a1 - a2));
  *(void *)(*((void *)a1 + 1) + 8 * a2) = *a3;
  ++*a1;
  return v6 == v7;
}

void LiHeBackgroundGenerator::LiHeBackgroundGenerator(LiHeBackgroundGenerator *this)
{
}

void LiHeBackgroundGenerator::~LiHeBackgroundGenerator(HGNode *this)
{
  LiHeBackgroundGeneratorShader::~LiHeBackgroundGeneratorShader(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeBackgroundGenerator::GetDOD(LiHeBackgroundGenerator *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = &HGRectInfinite;
  if (a3) {
    uint64_t v4 = &HGRectNull;
  }
  return *(void *)v4;
}

void LiSolidRendererImageSource::LiSolidRendererImageSource(LiSolidRendererImageSource *this)
{
  *((void *)this + 29) = &unk_1F1199AC8;
  *((void *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((unsigned char *)this + 248) = 1;
  LiRendererBase::LiRendererBase(this, (uint64_t *)&off_1F1127E58);
  *(void *)this = &unk_1F1127D50;
  *((void *)this + 29) = &unk_1F1127E38;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((_DWORD *)this + 18) = 1065353216;
  *((_DWORD *)this + 19) = 0;
  *((_DWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_DWORD *)this + 21) = 512;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((_DWORD *)this + 25) = 0;
  *((void *)this + 28) = 0x3FF0000000000000;
  *((void *)this + 23) = 0x3FF0000000000000;
  *((void *)this + 18) = 0x3FF0000000000000;
  *((void *)this + 13) = 0x3FF0000000000000;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  (*(void (**)(LiSolidRendererImageSource *, uint64_t))(*(void *)this + 88))(this, 2);
}

void sub_1B7B31BDC(_Unwind_Exception *a1)
{
  PCString::~PCString(v4);
  LiRendererBase::~LiRendererBase((PCSharedCount *)v1, (const PCString *)&off_1F1127E58);
  *(void *)(v1 + 232) = v3;
  *(unsigned char *)(v1 + 248) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiSolidRendererImageSource::~LiSolidRendererImageSource(PCString *this, const PCString *a2)
{
  int var0 = a2->var0;
  this->int var0 = a2->var0;
  *(PCString *)((char *)this + var0[-1].info) = a2[7];
  PCString::~PCString(this + 11);

  LiRendererBase::~LiRendererBase((PCSharedCount *)this, a2 + 1);
}

void LiSolidRendererImageSource::~LiSolidRendererImageSource(PCString *this)
{
  *(void *)(v1 + 232) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 248) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 240));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 232) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 248) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 240));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiSolidRendererImageSource::~LiSolidRendererImageSource(LiSolidRendererImageSource *this)
{
  *(void *)(v1 + 232) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 248) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 240);

  PCWeakCount::~PCWeakCount(v2);
}

{
  LiSolidRendererImageSource::~LiSolidRendererImageSource((PCString *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t LiSolidRendererImageSource::pixelTransformSupport(LiSolidRendererImageSource *this, const LiRenderParameters *a2)
{
  return 6;
}

uint64_t LiSolidRendererImageSource::supportsHeliumCPURendering(LiSolidRendererImageSource *this)
{
  return 0;
}

void LiSolidRendererImageSource::getHelium(LiSolidRendererImageSource *this, long long **a2)
{
  uint64_t RequestedColorDescription = LiAgent::getRequestedColorDescription((LiAgent *)a2);
  FxColorDescription::FxColorDescription((uint64_t)&v94, RequestedColorDescription, 0);
  LiAgentRequestedColorSpaceSentry::LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)v93, (LiAgent *)a2, &v94);
  uint64_t v5 = (char *)HGObject::operator new(0x730uLL);
  LiHeSolidRendererNode::LiHeSolidRendererNode((LiHeSolidRendererNode *)v5);
  v5[1480] = LiRenderingTechnology::getDebugShaders((LiRenderingTechnology *)(a2[6] + 5));
  v5[1481] = *((unsigned char *)a2 + 248);
  int v6 = (void *)*((void *)this + 4);
  if (!v6) {
    int v6 = *(void **)a2[6];
  }
  __n128 ObjectToWorldTransform = LiAgent::getObjectToWorldTransform((LiAgent *)a2, (uint64_t)v92);
  (*(void (**)(void *__return_ptr, void *, __n128))(*v6 + 240))(v90, v6, ObjectToWorldTransform);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v90, v92, (uint64_t)v91);
  LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)v90);
  {
    LiCamera::copy((uint64_t)v90, (uint64_t)v6);
    if (LiSimpleCamera::getAngleOfView((LiSimpleCamera *)v90) == 0.0)
    {
      int v6 = v90;
    }
    else
    {
      LiSolidUtils::getBoundsOfGeometry(*((void *)this + 2), (double *)v91, v89);
      double FarPlane = v89[4] * -1.02;
      double v9 = fmax(v89[5] * -0.98, 0.1);
      if ((LiSimpleCamera::getCrop((LiSimpleCamera *)v90) & 1) != 0
        || LiSimpleCamera::getFarCrop((LiSimpleCamera *)v90))
      {
        double v10 = LiSimpleCamera::getNearPlaneFade((LiSimpleCamera *)v90);
        double FarPlaneFade = LiSimpleCamera::getFarPlaneFade((LiSimpleCamera *)v90);
        double v9 = v9 - v10;
        if (v9 < LiSimpleCamera::getNearPlane((LiSimpleCamera *)v90)
          || v9 > LiSimpleCamera::getFarPlane((LiSimpleCamera *)v90))
        {
          double v9 = LiSimpleCamera::getNearPlane((LiSimpleCamera *)v90);
        }
        double FarPlane = FarPlane + FarPlaneFade;
        if (FarPlane < LiSimpleCamera::getNearPlane((LiSimpleCamera *)v90)
          || FarPlane > LiSimpleCamera::getFarPlane((LiSimpleCamera *)v90))
        {
          double FarPlane = LiSimpleCamera::getFarPlane((LiSimpleCamera *)v90);
        }
      }
      LiSimpleCamera::setNearPlane((uint64_t)v90, v9);
      int v6 = v90;
      LiSimpleCamera::setFarPlane((uint64_t)v90, FarPlane);
    }
  }
  (*(void (**)(double *__return_ptr, void *))(*v6 + 200))(v89, v6);
  unint64_t v12 = a2[20];
  long long v13 = v12[3];
  long long v15 = *v12;
  long long v14 = v12[1];
  v88[2] = v12[2];
  v88[3] = v13;
  v88[0] = v15;
  v88[1] = v14;
  long long v16 = v12[7];
  long long v18 = v12[4];
  long long v17 = v12[5];
  v88[6] = v12[6];
  v88[7] = v16;
  v88[4] = v18;
  v88[5] = v17;
  long long v19 = *(_OWORD *)((char *)this + 184);
  long long v84 = *(_OWORD *)((char *)this + 168);
  long long v85 = v19;
  long long v20 = *(_OWORD *)((char *)this + 216);
  long long v86 = *(_OWORD *)((char *)this + 200);
  long long v87 = v20;
  long long v21 = *(_OWORD *)((char *)this + 120);
  long long v80 = *(_OWORD *)((char *)this + 104);
  long long v81 = v21;
  long long v22 = *(_OWORD *)((char *)this + 152);
  long long v82 = *(_OWORD *)((char *)this + 136);
  long long v83 = v22;
  if (*((void *)this + 4))
  {
    uint64_t v23 = *(void *)a2[6];
    if (v23)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v23 + 48))(v66);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v66, &v80, (uint64_t)&v72);
      for (uint64_t i = 0; i != 128; i += 32)
      {
        int v25 = (long long *)((char *)&v80 + i);
        long long v26 = *(long long *)((char *)&v72 + i + 16);
        *int v25 = *(long long *)((char *)&v72 + i);
        v25[1] = v26;
      }
    }
  }
  if (!PCMatrix44Tmpl<double>::is2Didentity((double *)&v80))
  {
    uint64_t v27 = 0;
    *((void *)&v79 + 1) = *((void *)&v87 + 1);
    long long v72 = v80;
    *((void *)&v73 + 1) = *((void *)&v81 + 1);
    long long v74 = v82;
    *((void *)&v75 + 1) = *((void *)&v83 + 1);
    uint64_t v28 = &v72;
    *(void *)&long long v79 = 0;
    *(void *)&long long v75 = 0;
    *(void *)&long long v73 = 0;
    long long v76 = 0uLL;
    long long v77 = xmmword_1B7E733D0;
    long long v78 = v86;
    double v29 = 1.0
        / sqrt(*(double *)&v86 * *(double *)&v86+ *((double *)&v86 + 1) * *((double *)&v86 + 1)+ *((double *)&v87 + 1) * *((double *)&v87 + 1));
    do
    {
      for (uint64_t j = 0; j != 2; ++j)
        v28[j] = (__int128)vmulq_n_f64((float64x2_t)v28[j], v29);
      ++v27;
      v28 += 2;
    }
    while (v27 != 4);
    long long v78 = 0uLL;
    uint64_t v71 = 0x3FF0000000000000;
    *(void *)uint64_t v70 = 0x3FF0000000000000;
    uint64_t v67 = 0x3FF0000000000000;
    *(void *)double v66 = 0x3FF0000000000000;
    memset(&v66[8], 0, 32);
    long long v68 = 0u;
    long long v69 = 0u;
    memset(&v70[8], 0, 32);
    if (PCMatrix44Tmpl<double>::invert((double *)v66, (double *)&v72, 0.0))
    {
      PCMatrix44Tmpl<double>::operator*((uint64_t)v88, &v72, (uint64_t)v65);
      for (unint64_t k = 0; k != 16; k += 4)
      {
        uint64_t v32 = &v88[k / 2];
        long long v33 = *(_OWORD *)&v65[k + 2].var0;
        *uint64_t v32 = *(_OWORD *)&v65[k].var0;
        v32[1] = v33;
      }
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v80, (long long *)v66, (uint64_t)v65);
      for (uint64_t m = 0; m != 16; m += 4)
      {
        uint64_t v35 = (long long *)((char *)&v80 + m * 8);
        long long v36 = *(_OWORD *)&v65[m + 2].var0;
        *uint64_t v35 = *(_OWORD *)&v65[m].var0;
        v35[1] = v36;
      }
    }
  }
  long long v76 = v91[4];
  long long v77 = v91[5];
  long long v78 = v91[6];
  long long v79 = v91[7];
  long long v72 = v91[0];
  long long v73 = v91[1];
  long long v74 = v91[2];
  long long v75 = v91[3];
  PCMatrix44Tmpl<double>::invert((double *)&v72, (double *)&v72, 0.0);
  LiHeSolidRendererNode::setCameraInfo((LiHeSolidRendererNode *)v5, (const LiCamera *)v6);
  double v37 = v5 + 432;
  if (v5 + 432 != (char *)v91)
  {
    uint64_t v38 = 0;
    uint64_t v39 = v91;
    do
    {
      for (uint64_t n = 0; n != 32; n += 8)
        *(void *)&v37[n] = *(void *)((char *)v39 + n);
      ++v38;
      v37 += 32;
      v39 += 2;
    }
    while (v38 != 4);
  }
  uint64_t v41 = v5 + 560;
  if (v5 + 560 != (char *)&v72)
  {
    uint64_t v42 = 0;
    double v43 = &v72;
    do
    {
      for (iuint64_t i = 0; ii != 32; ii += 8)
        *(void *)&v41[ii] = *(void *)((char *)v43 + ii);
      ++v42;
      v41 += 32;
      v43 += 2;
    }
    while (v42 != 4);
  }
  unint64_t v45 = v5 + 688;
  if (v5 + 688 != (char *)v89)
  {
    uint64_t v46 = 0;
    float64x2_t v47 = v89;
    do
    {
      for (juint64_t j = 0; jj != 4; ++jj)
        *(double *)&v45[jj * 8] = v47[jj];
      ++v46;
      v45 += 32;
      v47 += 4;
    }
    while (v46 != 4);
  }
  uint64_t v49 = v5 + 816;
  if (v5 + 816 != (char *)v92)
  {
    uint64_t v50 = 0;
    double v51 = v92;
    do
    {
      for (kunint64_t k = 0; kk != 32; kk += 8)
        *(void *)&v49[kk] = *(void *)((char *)v51 + kk);
      ++v50;
      v49 += 32;
      v51 += 2;
    }
    while (v50 != 4);
  }
  (*(void (**)(unsigned char *__return_ptr, void *))(*v6 + 344))(v66, v6);
  long long v53 = *(_OWORD *)&v66[16];
  *((_OWORD *)v5 + 59) = *(_OWORD *)v66;
  *((_OWORD *)v5 + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v53;
  long long v63 = 0uLL;
  uint64_t v64 = 0;
  long long v61 = 0uLL;
  uint64_t v62 = 0;
  long long v59 = 0uLL;
  uint64_t v60 = 0;
  if ((*(unsigned int (**)(void *, long long *, long long *))(*v6 + 568))(v6, &v61, &v59))
  {
    uint64_t v55 = *((void *)&v59 + 1);
    double v54 = *(double *)&v59;
    uint64_t v56 = v60;
  }
  else
  {
    long long v59 = 0x3FF0000000000000uLL;
    uint64_t v60 = 0;
    uint64_t v62 = 0;
    long long v61 = 0x3FF0000000000000uLL;
    double v54 = 1.0;
    uint64_t v56 = 0;
    uint64_t v55 = 0;
  }
  long long v63 = v61;
  uint64_t v64 = v62;
  if ((*(unsigned int (**)(void *, long long *, long long *))(*v6 + 608))(v6, &v61, &v59))
  {
    long long v57 = v59;
    uint64_t v58 = v60;
  }
  else
  {
    long long v59 = 0x3FF0000000000000uLL;
    uint64_t v60 = 0;
    long long v61 = 0x3FF0000000000000uLL;
    uint64_t v62 = 0;
    long long v57 = xmmword_1B7E733D0;
    uint64_t v58 = 0;
  }
  *((_OWORD *)v5 + 93) = v63;
  *((void *)v5 + 188) = v64;
  *((double *)v5 + 189) = v54;
  *((void *)v5 + 19std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v55;
  *((void *)v5 + 191) = v56;
  *((_OWORD *)v5 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = v61;
  *((void *)v5 + 194) = v62;
  *(_OWORD *)(v5 + 156std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v57;
  *((void *)v5 + 197) = v58;
  *((_DWORD *)v5 + 39ProCore_Impl::PCNSRefImpl::release(this + 6) = *((_DWORD *)this + 25);
  *((_DWORD *)v5 + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = *((_DWORD *)this + 24);
  LiHeSolidRendererNode::setScene((PCShared_base **)v5, *((LiSceneObject **)this + 2), (const LiRenderParameters **)a2);
  *((_OWORD *)v5 + 69) = *((_OWORD *)this + 3);
  LiHeSolidRendererNode::setAAType((LiHeSolidRendererNode *)v5, *((_DWORD *)this + 16));
}

void sub_1B7B32A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,PCString a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,PCSharedCount a47)
{
  if (a47.var0) {
    (*(void (**)(PC_Sp_counted_base *))(*(void *)a47.var0 + 24))(a47.var0);
  }
  if (*a10) {
    (*(void (**)(void))(*(void *)*a10 + 24))(*a10);
  }
  PCArray<PCPtr<LiMaterialFilter>,PCArray_Traits<PCPtr<LiMaterialFilter>>>::~PCArray((uint64_t)&a27);
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&STACK[0x430], v50);
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 24))(v47);
  }
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)(v48 - 200));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v48 - 160));
  _Unwind_Resume(a1);
}

void LiHeSolidRendererNode::setMaterialFilters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1240;
  int v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 1248) >= v5) {
    int v6 = *(_DWORD *)(a1 + 1248);
  }
  else {
    int v6 = (2 * v5) | 1;
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      double v9 = (const PCSharedCount *)(*(void *)(a2 + 16) + v7);
      double v10 = (PC_Sp_counted_base **)(*(void *)(a1 + 1256) + v7);
      PCString *v10 = v9->var0;
      PCSharedCount::PCSharedCount(&v11, v9 + 1);
      PCSharedCount::operator=((uint64_t *)v10 + 1, (uint64_t *)&v11);
      PCSharedCount::~PCSharedCount(&v11);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(int *)(a2 + 12));
  }
}

void sub_1B7B32C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

uint64_t LiSolidRendererImageSource::estimateRenderMemory()
{
  return 0;
}

uint64_t LiSolidRendererImageSource::print(uint64_t a1, void *a2, uint64_t a3)
{
  LiImageSource::printIndent(a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"----- LiSolidRendererImageSource: scene graph -----\n", 52);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 752))(v6, a2, a3);
  }
  else {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Active camera\n", 14);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    throw_PCNullPointerException(1);
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v7 + 112);

  return v8();
}

LiSolidUtils *LiSolidRendererImageSource::adjustCasterLocalToWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t result = (LiSolidUtils *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  if (!result) {
    return result;
  }
  LiSolidUtils::getBoundsOfGeometry(result, &v85);
  double v11 = (v85 + v86) * 0.5;
  double v12 = (v87 + v88) * 0.5;
  double v13 = (v89 + v90) * 0.5;
  v84[0] = v11;
  v84[1] = v12;
  v84[2] = v13;
  double v14 = (v86 - v85) * (v86 - v85) + (v88 - v87) * (v88 - v87);
  double v15 = (v90 - v89) * (v90 - v89);
  double v16 = (v12 - v87) * 0.5;
  memset(v79, 0, sizeof(v79));
  int v80 = 4;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v83 = 0;
  PCMatrix44Tmpl<double>::getTransformation((long long *)a4, (uint64_t)v79);
  double v17 = *(double *)(a4 + 24);
  double v18 = *(double *)(a4 + 56);
  double v19 = *(double *)(a4 + 88);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 32) = xmmword_1B7E733E0;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a4 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a4 + 104) = 0;
  *(void *)(a4 + 112) = 0;
  *(void *)(a4 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  long long v77 = 0uLL;
  double v78 = 0.0;
  if (*(_DWORD *)(a2 + 656) == 1)
  {
    LODWORD(v2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = fabs(*(double *)(a2 + 632)) > fabs(*(double *)(a2 + 624));
    if (fabs(*(double *)(a2 + 640)) <= fabs(*(double *)(a2 + 624 + 8 * v20))) {
      uint64_t v20 = v20;
    }
    else {
      uint64_t v20 = 2;
    }
    double v21 = 1.0;
    if (*(double *)(a2 + 624 + 8 * v20) < 0.0) {
      double v21 = -1.0;
    }
    float v22 = v21;
    *((double *)&v77 + v2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = (float)-v22;
    uint64_t v23 = (double *)(a4 + 32 * v20 + 24);
    if (v22 <= 0.0)
    {
      uint64_t v67 = *(void *)&v85;
      *(double *)&long long v68 = v87;
      *((double *)&v68 + 1) = v89;
      double v24 = *((double *)&v67 + v20);
      double v25 = *v23;
      BOOL v26 = v24 < *v23;
    }
    else
    {
      uint64_t v67 = *(void *)&v86;
      *(double *)&long long v68 = v88;
      *((double *)&v68 + 1) = v90;
      double v24 = *((double *)&v67 + v20);
      double v25 = *v23;
      BOOL v26 = *v23 < v24;
    }
    if (!v26) {
      double v24 = v25;
    }
    char v29 = 0;
    *uint64_t v23 = v24;
    if ((v20 + 1) < 3) {
      int v31 = v20 + 1;
    }
    else {
      int v31 = v20 - 2;
    }
    double v11 = v84[v31];
    unsigned int v32 = v20 + 2;
    unsigned int v33 = v20 - 1;
    if (v32 < 3) {
      unsigned int v33 = v32;
    }
    double v12 = v84[v33];
    goto LABEL_43;
  }
  double v27 = *(double *)(a2 + 680);
  double v28 = v89;
  if (v27 < v89)
  {
    char v29 = 0;
    long long v77 = 0uLL;
    double v78 = -1.0;
    BOOL v30 = v89 < v19;
LABEL_23:
    if (v30) {
      double v34 = v28;
    }
    else {
      double v34 = v19;
    }
    *(double *)(a4 + 88) = v34;
    goto LABEL_43;
  }
  double v28 = v90;
  if (v27 > v90)
  {
    char v29 = 0;
    long long v77 = 0uLL;
    double v78 = 1.0;
    BOOL v30 = v19 < v90;
    goto LABEL_23;
  }
  double v35 = *(double *)(a2 + 672);
  double v36 = v87;
  if (v35 < v87)
  {
    char v29 = 0;
    *((void *)&v77 + 1) = 0xBFF0000000000000;
    BOOL v37 = v87 < v18;
LABEL_31:
    if (v37) {
      double v38 = v36;
    }
    else {
      double v38 = v18;
    }
    *(double *)(a4 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v38;
    double v12 = v13;
    goto LABEL_43;
  }
  double v36 = v88;
  if (v35 > v88)
  {
    char v29 = 0;
    *((void *)&v77 + 1) = 0x3FF0000000000000;
    BOOL v37 = v18 < v88;
    goto LABEL_31;
  }
  double v39 = *(double *)(a2 + 664);
  double v40 = v85;
  if (v39 < v85)
  {
    char v29 = 0;
    unint64_t v41 = 0xBFF0000000000000;
    BOOL v42 = v85 < v17;
LABEL_39:
    double v78 = 0.0;
    if (v42) {
      double v17 = v40;
    }
    long long v77 = v41;
    *(double *)(a4 + 24) = v17;
    double v11 = v13;
    goto LABEL_43;
  }
  double v40 = v86;
  if (v39 > v86)
  {
    char v29 = 0;
    unint64_t v41 = 0x3FF0000000000000;
    BOOL v42 = v17 < v86;
    goto LABEL_39;
  }
  *(double *)(a4 + 24) = v11;
  *(double *)(a4 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v12;
  char v29 = 1;
  *(double *)(a4 + 88) = v13;
LABEL_43:
  double v43 = v14 + v15;
  uint64_t v76 = 0x3FF0000000000000;
  uint64_t v73 = 0x3FF0000000000000;
  uint64_t v70 = 0x3FF0000000000000;
  uint64_t v66 = 0x3FF0000000000000;
  uint64_t v67 = 0x3FF0000000000000;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  uint64_t v63 = 0x3FF0000000000000;
  uint64_t v60 = 0x3FF0000000000000;
  uint64_t v57 = 0x3FF0000000000000;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v57, (float64x2_t)0, v16, 0.0);
  if ((v29 & 1) == 0)
  {
    double v44 = *((double *)&v77 + 1) - v78 * 0.0;
    double v45 = v78 * 0.0 - *(double *)&v77;
    double v46 = *(double *)&v77 * 0.0 - *((double *)&v77 + 1) * 0.0;
    double v47 = -acos(v78 + *((double *)&v77 + 1) * 0.0 + *(double *)&v77 * 0.0);
    double v48 = sqrt(v44 * v44 + v45 * v45 + v46 * v46);
    if (v48 <= -0.000000100000001 || v48 >= 0.000000100000001)
    {
      double v44 = v44 / v48;
      double v45 = v45 / v48;
      double v46 = v46 / v48;
    }
    v56[0] = v44;
    v56[1] = v45;
    v56[2] = v46;
    v56[3] = 1.0;
    PCMatrix44Tmpl<double>::rotate((uint64_t)&v67, v56, 0, v47);
  }
  double v49 = sqrt(v43);
  PCMatrix44Tmpl<double>::operator*(a4, (long long *)&v57, (uint64_t)v55);
  uint64_t result = (LiSolidUtils *)PCMatrix44Tmpl<double>::operator*((uint64_t)v55, (long long *)&v67, (uint64_t)v56);
  if (v56 != (double *)a4)
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      double v51 = (_OWORD *)(a4 + i * 8);
      long long v52 = *(_OWORD *)&v56[i + 2];
      _OWORD *v51 = *(_OWORD *)&v56[i];
      v51[1] = v52;
    }
  }
  *(_OWORD *)(a5 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v77;
  *(double *)(a5 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v78;
  uint64_t v53 = *(void *)(a4 + 56);
  uint64_t v54 = *(void *)(a4 + 88);
  *(void *)(a5 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a4 + 24);
  *(void *)(a5 + 24) = v53;
  *(void *)(a5 + 32) = v54;
  *a6 = v11 - v49 * 0.5;
  a6[1] = v12 - v49 * 0.5;
  a6[2] = v49;
  a6[3] = v49;
  return result;
}

uint64_t LiSolidRendererImageSource::handlesDepthOfField(LiSolidRendererImageSource *this)
{
  return 1;
}

void LiLightProperties::LiLightProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = a4;
  *(unsigned char *)(a1 + 24) = a5;
  ProShade::Vec3::Vec3((ProShade::Vec3 *)(a1 + 32));
}

void sub_1B7B33B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10)
{
  *(void *)(v12 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v11 + 3);
  *(void *)(v12 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v12 - 192));
  *(void *)(v12 - 184) = a9;
  PCSharedCount::~PCSharedCount(a10);
  v10[12].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v10 + 15);
  v10[8].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v10 + 11);
  v10[4].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v10 + 7);
  _Unwind_Resume(a1);
}

void sub_1B7B34074()
{
}

void sub_1B7B34088()
{
}

void sub_1B7B34090()
{
}

void LiLightProperties::reflectedViewDir(LiLightProperties *this)
{
  uint64_t v2 = *((void *)this + 2);
  v3[4] = &unk_1F11193B8;
  char v4 = *(unsigned char *)(v2 + 104);
  uint64_t v5 = *(void *)(v2 + 112);
  PCSharedCount::PCSharedCount(v6, (const PCSharedCount *)(v2 + 120));
  ProShade::Func<ProShade::Func_normalize>::eval((const PCSharedCount *)(*((void *)this + 2) + 128), (uint64_t)v3);
  v6[17].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  operator new();
}

void sub_1B7B3433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, PCSharedCount a20,void *a21,uint64_t a22,uint64_t a23,PCSharedCount a24,void *a25)
{
  a25 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v26 + 3);
  a21 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a24);
  a17 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a20);
  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v25);
  _Unwind_Resume(a1);
}

void LiLightProperties::lightAngle(LiLightProperties *this)
{
  uint64_t v1 = &unk_1F11193B8;
  operator new();
}

void sub_1B7B34890(_Unwind_Exception *a1)
{
  *(void *)(v5 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  PCSharedCount::~PCSharedCount(v4 + 3);
  *(void *)(v5 - 152) = v1;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B7B34A10()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7B34A08);
}

uint64_t *ProShade::Float::operator=(uint64_t *a1, const PCSharedCount *a2)
{
  a1[2] = (uint64_t)a2[2].var0;
  uint64_t v3 = a1 + 3;
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  ProShade::Float::checkType((ProShade::Float *)a1);
  return a1;
}

void sub_1B7B34A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void LiLightProperties::getAttenuation(LiLightProperties *this@<X0>, ProShade::Float *a2@<X8>)
{
  PCSharedCount v5 = &unk_1F11193B8;
  char v6 = *((unsigned char *)this + 40);
  uint64_t v7 = *((void *)this + 6);
  PCSharedCount::PCSharedCount(&v8, (const PCSharedCount *)this + 7);
  PCSharedCount v5 = &unk_1F1123EA0;
  PCSharedCount::PCSharedCount(&v4, (const PCSharedCount *)this + 11);
  if (*(_DWORD *)(*(void *)this + 656) <= 1u) {
    ProShade::Float::Float(a2, 1.0);
  }
  operator new();
}

void sub_1B7B35F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_objecta, PCSharedCount *a18, PCSharedCount *a19, uint64_t a20,PCSharedCount *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,PCSharedCount a45,uint64_t a46,uint64_t a47,uint64_t a48,PCSharedCount a49,uint64_t a50,uint64_t a51,uint64_t a52,PCSharedCount a53,uint64_t a54,uint64_t a55,uint64_t a56,PCSharedCount a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v70 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v69 + 3);
  PCSharedCount::~PCSharedCount(&a45);
  a46 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a49);
  a50 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a53);
  a54 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a57);
  a58 = a13;
  PCSharedCount::~PCSharedCount(a14);
  a62 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a65);
  a66 = (uint64_t)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a69);
  *(void *)(v70 - 248) = a15;
  PCSharedCount::~PCSharedCount(a21);
  *(void *)(v70 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = a16;
  PCSharedCount::~PCSharedCount(a18);
  *(void *)(v70 - 184) = a20;
  PCSharedCount::~PCSharedCount(a19);
  _Unwind_Resume(a1);
}

void sub_1B7B366D0()
{
}

void sub_1B7B366D8()
{
}

void sub_1B7B366E0()
{
}

void sub_1B7B366EC()
{
}

void sub_1B7B366F4()
{
}

void sub_1B7B366FC()
{
}

void sub_1B7B36704()
{
}

void sub_1B7B36710()
{
}

void sub_1B7B36718()
{
}

void sub_1B7B36724()
{
}

void sub_1B7B3672C()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7B36674);
}

void sub_1B7B3674C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  *(void *)(v66 - 152) = v64;
  PCSharedCount::~PCSharedCount(v65);
  *(void *)(v66 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v62;
  PCSharedCount::~PCSharedCount(v63);
  a58 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a61);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a53);
  a54 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a57);
  JUMPOUT(0x1B7B36698);
}

void sub_1B7B367F4()
{
}

void sub_1B7B367FC()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7B3669CLL);
}

void sub_1B7B3681C()
{
  MEMORY[0x1BA9BFBA0](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B7B366ACLL);
}

void sub_1B7B3683C()
{
}

void sub_1B7B36858()
{
}

void sub_1B7B36864()
{
}

void sub_1B7B3686C()
{
}

void sub_1B7B3687C()
{
}

void LiLightProperties::getLightColor(LiLightProperties *this)
{
}

void sub_1B7B37E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount *a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_objecta, PCSharedCount *a20,uint64_t a21)
{
  *(void *)(v21 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a21;
  PCSharedCount::~PCSharedCount(a20);
  _Unwind_Resume(a1);
}

void sub_1B7B388E8()
{
}

void sub_1B7B38900()
{
}

void sub_1B7B38924()
{
}

void loadSampleShadowJitter(void)
{
  {
    ProShade::External::External((PCSharedCount *)&loadSampleShadowJitter(void)::_sampleShadow);
    __cxa_atexit((void (*)(void *))ProShade::External::~External, &loadSampleShadowJitter(void)::_sampleShadow, &dword_1B73F3000);
  }
  LiLightInfo::loadShadowSnippet(&v5);
  PCString::PCString(&v4, "sampleShadowJitter");
  ProShade::External::define((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, &v5, &v4, 3, 1);
  PCString::~PCString(&v4);
  PCString::PCString(&v3, "shadowCoord");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 3, &v3);
  PCString::~PCString(&v3);
  PCString::PCString(&v2, "texPerPixel");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 2, &v2);
  PCString::~PCString(&v2);
  PCString::PCString(&v1, "shadowMap");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 9, &v1);
  PCString::~PCString(&v1);
  PCString::PCString(&v0, "noiseMap");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 9, &v0);
  PCString::~PCString(&v0);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B7B38ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,PCString a23)
{
}

void loadSampleCubeShadowJitter(void)
{
  {
    ProShade::External::External((PCSharedCount *)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter);
    __cxa_atexit((void (*)(void *))ProShade::External::~External, &loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, &dword_1B73F3000);
  }
  LiLightInfo::loadShadowSnippet(&v6);
  PCString::PCString(&v5, "sampleCubeShadowJitter");
  ProShade::External::define((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, &v6, &v5, 3, 1);
  PCString::~PCString(&v5);
  PCString::PCString(&v4, "shadowCoord");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 3, &v4);
  PCString::~PCString(&v4);
  PCString::PCString(&v3, "blurRadius");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 2, &v3);
  PCString::~PCString(&v3);
  PCString::PCString(&v2, "lightProjectionMatrix");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 7, &v2);
  PCString::~PCString(&v2);
  PCString::PCString(&v1, "shadowMap");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 13, &v1);
  PCString::~PCString(&v1);
  PCString::PCString(&v0, "noiseMap");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 9, &v0);
  PCString::~PCString(&v0);
  PCSharedCount::~PCSharedCount(&v7);
}

void sub_1B7B38CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,PCString a23)
{
}

uint64_t LiPerContext<BOOL,LiPerContextValue_Traits<BOOL>,LiOpenGLContextGetter>::get(uint64_t a1)
{
  PCString v2 = (os_unfair_lock_s *)(a1 + 24);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 24));
  v6[1] = 0;
  v6[0] = LiGLState::getCurrentContext(v3);
  uint64_t v4 = std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::find<LiOpenGLContextGetter::C>(a1, v6);
  if (a1 + 8 == v4)
  {
    PCSharedCount v7 = v6;
    uint64_t v4 = (uint64_t)std::__tree<std::__value_type<LiOpenGLContextGetter::C,BOOL>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,BOOL>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,BOOL>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>((uint64_t **)a1, v6, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7);
  }
  PCSpinLock::unlock(v2);
  return v4 + 48;
}

void sub_1B7B38DFC(_Unwind_Exception *a1)
{
  PCSpinLock::unlock(v1);
  _Unwind_Resume(a1);
}

void LiShadowGenMaterial::makeProgram(LiShadowGenMaterial *this, const LiContext *a2)
{
}

void sub_1B7B39DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,PCSharedCount a55)
{
  long long v59 = v56;
  PCSharedCount::~PCSharedCount(v55);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a39);
  a40 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a43);
  a44 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a47);
  a48 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a51);
  a52 = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&a55);
  *(void *)(v58 - 248) = v57;
  PCSharedCount::~PCSharedCount(v59);
  *(void *)(v58 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v58 - 192));
  *(void *)(v58 - 184) = a12;
  PCSharedCount::~PCSharedCount(a11);
  *(void *)(v58 - 152) = a15;
  PCSharedCount::~PCSharedCount(a14);
  PCSharedCount::~PCSharedCount(a9);
  _Unwind_Resume(a1);
}

void sub_1B7B3A554()
{
}

void sub_1B7B3A55C()
{
}

void sub_1B7B3A5A4()
{
}

void sub_1B7B3A5E4()
{
}

void LiShadowGenMaterial::getHash(LiShadowGenMaterial *this)
{
  MEMORY[0x1F4188790](this);
  PCString v2 = v1;
  v3[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v3);
  PCHashWriteStream::writeValue(v3, 123456);
  *PCString v2 = *(_OWORD *)PCHashWriteStream::getHash(v3)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v3);
}

void sub_1B7B3A68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void LiShadowGenMaterial::~LiShadowGenMaterial(LiShadowGenMaterial *this)
{
  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1F1128238);
  *(void *)(v1 + 664) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 672));
}

{
  uint64_t v1;
  uint64_t vars8;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1F1128238);
  *(void *)(v1 + 664) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 672));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiShadowGenMaterial::~LiShadowGenMaterial(LiShadowGenMaterial *this)
{
  LiMaterial::~LiMaterial((LiShadowGenMaterial *)((char *)this + *(void *)(*(void *)this - 24)), (PC_Sp_counted_base **)off_1F1128238);
  *(void *)(v1 + 664) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCString v2 = (PC_Sp_counted_base **)(v1 + 672);

  PCWeakCount::~PCWeakCount(v2);
}

{
  PC_Sp_counted_base **v1;
  uint64_t vars8;

  uint64_t v1 = (PC_Sp_counted_base **)((char *)this + *(void *)(*(void *)this - 24));
  LiMaterial::~LiMaterial((LiMaterial *)v1, (PC_Sp_counted_base **)off_1F1128238);
  v1[83] = (PC_Sp_counted_base *)&unk_1F1199AC8;
  *((unsigned char *)v1 + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(v1 + 84);

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Vec3::Vec3(ProShade::Vec3 *this)
{
}

void sub_1B7B3A938(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::eval(uint64_t a1)
{
  v7[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2)
    {
      PCString v3 = v2;
      ProShade::Value::Value(v6);
      ProShade::Value::Value(&v5);
      (*(void (**)(void *, void *))(*(void *)v3 + 224))(v3, v6);
      ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>::eval((int *)v6, &v5);
      ProShade::Const::create((ProShade::Const *)&v5, v4);
    }
  }
  v6[0] = &unk_1F11193B8;
  uint64_t v6[2] = 0;
  PCSharedCount::PCSharedCount(v7);
  operator new();
}

void sub_1B7B3AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11285C8);
  *(void *)a1 = &unk_1F11284F0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11285A8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B3ACD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    int Size = ProShade::shapeGetSize(a1[1], v8);
    int v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        double v11 = a1 + 4;
        do
        {
          int v12 = *v11++;
          *(long double *)Serializer++ = acos((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      double v13 = (double *)(a1 + 4);
      do
      {
        long double v14 = *v13++;
        *(long double *)Serializer++ = acos(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1) {
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"acos doesn't apply to BOOL", v6);
    }
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "acos");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)OZChannelBase v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B3AF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  OZChannelBase v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  void v5[2] = v4 + 5;
  atomic_store(1u, v5);
  PCSharedCount v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1936679777;
  *((unsigned char *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *PCSharedCount v8 = 0;
    if (v8) {
      PCSharedCount v7 = v8 - 12;
    }
    else {
      PCSharedCount v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B3B060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "acos");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      int v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  double v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B3B30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::clone()
{
}

void sub_1B7B3B4C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(int **)(a2 + 16);

  ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>::eval(v3, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F11285C8);
  *(void *)a1 = &unk_1F11284F0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F11285A8;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B3B798(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Float::Float(ProShade::Float *this, double a2)
{
}

void sub_1B7B3B884(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::eval(uint64_t a1)
{
  v7[15] = *(PCSharedCount *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1)
  {
    if (v2)
    {
      uint64_t v3 = v2;
      ProShade::Value::Value(v6);
      ProShade::Value::Value(&v5);
      (*(void (**)(void *, void *))(*(void *)v3 + 224))(v3, v6);
      ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>::eval((int *)v6, &v5);
      ProShade::Const::create((ProShade::Const *)&v5, v4);
    }
  }
  v6[0] = &unk_1F11193B8;
  uint64_t v6[2] = 0;
  PCSharedCount::PCSharedCount(v7);
  operator new();
}

void sub_1B7B3BA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1128840);
  *(void *)a1 = &unk_1F1128768;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1128820;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0) {
    PCArray_base::badIndex(v4);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(void *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3) {
    *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  }
  return a1;
}

void sub_1B7B3BC20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    int Size = ProShade::shapeGetSize(a1[1], v8);
    int v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        double v11 = a1 + 4;
        do
        {
          int v12 = *v11++;
          *(long double *)Serializer++ = asin((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      int v13 = (double *)(a1 + 4);
      do
      {
        long double v14 = *v13++;
        *(long double *)Serializer++ = asin(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1) {
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"asin doesn't apply to BOOL", v6);
    }
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::~Func(uint64_t a1)
{
  *(void *)(v2 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v2 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::~Func(uint64_t a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 48;
  LiString::LiString((LiString *)&v5, "asin");
  ProShade::func_repr((PCArray_base *)&v5, v3, a2);
  if (v5 && atomic_fetch_add(v5 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)OZChannelBase v5 = 0;
    if (v5) {
      int v4 = v5 - 3;
    }
    else {
      int v4 = 0;
    }
    free(v4);
  }
}

void sub_1B7B3BE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::description(void *a1@<X8>)
{
  LiString::LiString((LiString *)&v8, "Func ");
  uint64_t v2 = v8;
  if (v8) {
    int v3 = *((_DWORD *)v8 - 2);
  }
  else {
    int v3 = 0;
  }
  size_t v4 = v3;
  OZChannelBase v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  void v5[2] = v4 + 5;
  atomic_store(1u, v5);
  int v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1852404577;
  *((unsigned char *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 - 3, 0xFFFFFFFF) == 1)
  {
    *uint64_t v8 = 0;
    if (v8) {
      int v7 = v8 - 12;
    }
    else {
      int v7 = 0;
    }
    free(v7);
  }
}

void sub_1B7B3BFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::shortDescription(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  PCHashWriteStream::writeValue(this, "Func");
  uint64_t result = PCHashWriteStream::writeValue(this, "asin");
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(void *)(a1 + 64) + v5, &v7);
      uint64_t result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, uint64_t)@<X1>, PCArray_base *a3@<X8>)
{
  size_t v4 = a3;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v19 = &unk_1F1119AF8;
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 16;
    do
    {
      if (v7 >= *(int *)(a1 + 60)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v10 = *(void *)(a1 + 64);
      (**a2)(v17, a2, v10 + v9 - 16);
      int var0 = v17[2].var0;
      int v12 = *(PC_Sp_counted_base **)(v10 + v9);
      if ((int)v20 <= SHIDWORD(v20)) {
        int v13 = (2 * (HIDWORD(v20) + 1)) | 1;
      }
      else {
        int v13 = v20;
      }
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v13);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v8 |= var0 != v12;
      v17[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v7;
      v9 += 32;
    }
    while (v5 != v7);
    if (v8) {
      operator new();
    }
    size_t v4 = a3;
  }
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)v4, (PCShared_base *)a1);
  double v19 = &unk_1F1119AF8;
  if ((int)v20 < 0) {
    int v14 = 1;
  }
  else {
    int v14 = v20;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B3C258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x1BA9BFBA0](v8, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::clone()
{
}

void sub_1B7B3C410(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(a1);
  }
  int v3 = *(int **)(a2 + 16);

  ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>::eval(v3, a3);
}

void virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::~Func(void *a1)
{
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 80);

  PCWeakCount::~PCWeakCount(v2);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  *(void *)(v1 + 72) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  *(void *)(a1 + 72) = &unk_1F1199AC8;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F1128840);
  *(void *)a1 = &unk_1F1128768;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1F1128820;
  *(void *)(a1 + 48) = &unk_1F1119AF8;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  int v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6) {
    int v7 = *(_DWORD *)(a1 + 56);
  }
  else {
    int v7 = (2 * v6) | 1;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(void *)(a1 + 64) + v8, (const PCSharedCount *)(*(void *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B7B3C6E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiSolidUtils::createRedTexture(PCWorkingColorVector *a1@<X8>)
{
}

void LiSolidUtils::createColorTexture(LiSolidUtils *this@<X0>, ProGL::GL *a2@<X1>, int a3@<W2>, int a4@<W3>, HGGLBlendingInfo **a5@<X8>, int a6, int a7)
{
}

void LiSolidUtils::aux_createTexture(LiSolidUtils *this@<X0>, ProGL::GL *a2@<X1>, int a3@<W2>, int a4@<W3>, GLenum a5@<W4>, GLenum a6@<W5>, GLvoid *a7@<X6>, HGGLBlendingInfo **a8@<X8>, int a9, int a10)
{
  int v16 = (int)a2;
  ProGL::GL::getPGLContextHandle(this, v21);
  ProGL::TextureDescription::TextureDescription((ProGL::TextureDescription *)v22, 0xDE1u, v16, a3, 0, a4, (const ProGL::ContextHandle *)v21);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v21);
  ProGL::GL::getPGLContextHandle(this, v21);
  VirtualScreeuint64_t n = ProGL::ContextHandle::getVirtualScreen((ProGL::ContextHandle *)v21);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v21);
  int v23 = VirtualScreen;
  ProGL::createTextureFromPool(this, (ProGL::GL *)v22, a8);
  glActiveTexture(0x84C0u);
  GLuint Name = ProGL::TextureHandle::getName(a8);
  glBindTexture(0xDE1u, Name);
  glEnable(0xDE1u);
  glTexParameteri(0xDE1u, 0x2800u, 9729);
  glTexParameteri(0xDE1u, 0x2801u, 9729);
  glTexParameteri(0xDE1u, 0x2802u, 33071);
  glTexParameteri(0xDE1u, 0x2803u, 33071);
  ProGL::TextureHandle::texImage2D((OZChannelBase **)a8, this, 0xDE1u, 0, a4, v16, a3, 0, a5, a6, a7);
  glBindTexture(0xDE1u, 0);
  glDisable(0xDE1u);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v22);
}

void sub_1B7B3C8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)va);
  _Unwind_Resume(a1);
}

void LiSolidUtils::createMultisampleColorBuffer(ProGL *this, ProGL::GL *a2)
{
}

uint64_t LiSolidUtils::getBoundsOfGeometry@<X0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  *((_OWORD *)a3 + 1) = xmmword_1B7E736F0;
  *((_OWORD *)a3 + 2) = xmmword_1B7E736F0;
  *(_OWORD *)a3 = xmmword_1B7E736F0;
  LiSceneIterator<LiSolid,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v23, a1);
  while (1)
  {
    uint64_t v5 = v24;
    if (!(v24 ? LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next : 0)) {
      break;
    }
    v22[4] = v29;
    v22[5] = v30;
    double v22[6] = v31;
    v22[7] = v32;
    v22[0] = v25;
    v22[1] = v26;
    v22[2] = v27;
    PCSharedCount v22[3] = v28;
    PCMatrix44Tmpl<double>::leftMult((uint64_t)v22, a2);
    long long v20 = xmmword_1B7E736F0;
    long long v21 = xmmword_1B7E736F0;
    long long v19 = xmmword_1B7E736F0;
    (*(void (**)(uint64_t, long long *, _OWORD *))(*(void *)v5 + 80))(v5, &v19, v22);
    double v7 = *a3;
    double v8 = a3[1];
    if (*a3 <= v8 && (v10 = a3[2], double v9 = a3[3], v10 <= v9) && (v12 = a3[4], v11 = a3[5], v12 <= v11))
    {
      if (*(double *)&v19 <= *((double *)&v19 + 1))
      {
        long long v14 = v20;
        if (*(double *)&v20 <= *((double *)&v20 + 1))
        {
          long long v15 = v21;
          if (*(double *)&v21 <= *((double *)&v21 + 1))
          {
            if (v7 >= *(double *)&v19) {
              double v7 = *(double *)&v19;
            }
            if (v8 <= *((double *)&v19 + 1)) {
              double v8 = *((double *)&v19 + 1);
            }
            *a3 = v7;
            a3[1] = v8;
            if (v10 >= *(double *)&v14) {
              double v16 = *(double *)&v14;
            }
            else {
              double v16 = v10;
            }
            if (v9 <= *((double *)&v14 + 1)) {
              double v9 = *((double *)&v14 + 1);
            }
            a3[2] = v16;
            a3[3] = v9;
            if (v12 >= *(double *)&v15) {
              double v17 = *(double *)&v15;
            }
            else {
              double v17 = v12;
            }
            if (v11 <= *((double *)&v15 + 1)) {
              double v11 = *((double *)&v15 + 1);
            }
            a3[4] = v17;
            a3[5] = v11;
          }
        }
      }
    }
    else
    {
      long long v13 = v20;
      *(_OWORD *)a3 = v19;
      *((_OWORD *)a3 + 1) = v13;
      *((_OWORD *)a3 + 2) = v21;
    }
    LiSceneIterator<LiSolid,LiSceneIteratorAlways>::operator++((uint64_t)v23);
  }
  return LiSceneIterator<LiSolid,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v23);
}

void sub_1B7B3CA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t LiSceneIterator<LiSolid,LiSceneIteratorAlways>::operator++(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    do
    {
      LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next(a1);
      uint64_t v2 = *(const void **)(a1 + 8);
    }
    while (v2
  }
  return a1;
}

uint64_t LiSolidUtils::getBoundsOfGeometry@<X0>(LiSolidUtils *this@<X0>, double *a2@<X8>)
{
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v4 = 0x3FF0000000000000;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  return LiSolidUtils::getBoundsOfGeometry((uint64_t)this, (double *)&v4, a2);
}

uint64_t LiSolidUtils::anyTransparencyInScene(uint64_t this, LiSceneObject *a2)
{
  if (this)
  {
    uint64_t v2 = (const void *)this;
    if (v3)
    {
      double Alpha = LiMaterial::getAlpha(v3);
      double v7 = v6 * (Alpha * v5);
      if (v7 < 1.0 && fabs(v7 + -1.0) >= 0.0000001) {
        return 2;
      }
    }
    if (this)
    {
      uint64_t v8 = this;
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)this + 136))(this);
      if (v9 < 1)
      {
LABEL_11:
        long long v14 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 248))(v8);
        if (*(unsigned char *)v14)
        {
          long long v15 = v14;
          this = 0;
          float v16 = v15[5];
          if (v16 < 1.0 && fabsf(v16 + -1.0) >= 0.00001) {
            return 2;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        int v10 = v9;
        uint64_t v11 = 0;
        while (1)
        {
          long long v12 = (LiSolidUtils *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 144))(v8, v11);
          this = LiSolidUtils::anyTransparencyInScene(v12, v13);
          if (this) {
            break;
          }
          uint64_t v11 = (v11 + 1);
          if (v10 == v11) {
            goto LABEL_11;
          }
        }
      }
    }
  }
  return this;
}

void LiSolidUtils::drawRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  float v6 = *(float *)(a2 + 4);
  LODWORD(v12) = *(_DWORD *)a2;
  *((float *)&v12 + 1) = v6;
  float v7 = *(float *)(a2 + 12);
  *(float *)&uint64_t v11 = *(float *)&v12 + *(float *)(a2 + 8);
  *((float *)&v11 + 1) = v6;
  LODWORD(v1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v11;
  *((float *)&v10 + 1) = v6 + v7;
  LODWORD(v9) = v12;
  *((float *)&v9 + 1) = v6 + v7;
  uint64_t v8 = *a4;
  LiSolidUtils::drawRect(a1, &v12, &v11, &v10, &v9, a6, &v8);
}

void LiSolidUtils::drawRect(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, void *a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  GLuint buffers = 0;
  glGenBuffers(1, &buffers);
  if (buffers)
  {
    glBindBuffer(0x8892u, buffers);
    *(void *)&long long v12 = *a2;
    *((void *)&v12 + 1) = *a7;
    long long data = v12;
    uint64_t v19 = *a3;
    float v20 = 1.0 - *((float *)&v12 + 2);
    int v21 = HIDWORD(v12);
    uint64_t v22 = *a4;
    float v23 = 1.0 - *((float *)&v12 + 2);
    float v24 = 1.0 - *((float *)&v12 + 3);
    uint64_t v25 = *a5;
    int v26 = DWORD2(v12);
    float v27 = 1.0 - *((float *)&v12 + 3);
    glBufferData(0x8892u, 64, &data, 0x88E4u);
  }
  else
  {
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Unable to generate VBO in ", 26);
    long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSolidRendererUtils.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
    long long v15 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    float v16 = std::locale::use_facet((const std::locale *)&data, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale((std::locale *)&data);
    std::ostream::put();
    std::ostream::flush();
  }
}

void sub_1B7B3CF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

void LiSolidUtils::createBumpMapFromHeightMap(void *a1)
{
  uint64_t v2 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v2);
  (*(void (**)(HGTextureWrap *, void, void))(*(void *)v2 + 120))(v2, 0, *a1);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v2, (const char *)3, v3);
  uint64_t v4 = (HgcSolidRendererBumpMap *)HGObject::operator new(0x1A0uLL);
  HgcSolidRendererBumpMap::HgcSolidRendererBumpMap(v4);
}

void sub_1B7B3D228(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiSolidUtils::createBumpMapFromNormalMap@<X0>(void *a1@<X0>, unsigned int a2@<W1>, HgcNormalMapToBumpMap **a3@<X8>)
{
  float v6 = (HgcNormalMapToBumpMap *)HGObject::operator new(0x1A0uLL);
  HgcNormalMapToBumpMap::HgcNormalMapToBumpMap(v6);
  (*(void (**)(HgcNormalMapToBumpMap *, void, void))(*(void *)v6 + 120))(v6, 0, *a1);
  uint64_t result = (*(uint64_t (**)(HgcNormalMapToBumpMap *, void, float, double, double, double))(*(void *)v6 + 96))(v6, 0, (float)a2, 0.0, 0.0, 0.0);
  *a3 = v6;
  return result;
}

void sub_1B7B3D3B4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LiSolidUtils::createLean1MapFromBumpMap@<X0>(void *a1@<X0>, HgcLean1 **a2@<X8>)
{
  uint64_t v4 = (HgcLean1 *)HGObject::operator new(0x1A0uLL);
  HgcLean1::HgcLean1(v4);
  uint64_t result = (*(uint64_t (**)(HgcLean1 *, void, void))(*(void *)v4 + 120))(v4, 0, *a1);
  *a2 = v4;
  return result;
}

void sub_1B7B3D46C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiSolidUtils::createLean2MapFromBumpMap@<X0>(void *a1@<X0>, HgcLean2 **a2@<X8>)
{
  uint64_t v4 = (HgcLean2 *)HGObject::operator new(0x1A0uLL);
  HgcLean2::HgcLean2(v4);
  uint64_t result = (*(uint64_t (**)(HgcLean2 *, void, void))(*(void *)v4 + 120))(v4, 0, *a1);
  *a2 = v4;
  return result;
}

void sub_1B7B3D524(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void LiSolidUtils::depthBlur(LiSolidUtils *this, ProGL::GL *a2, const LiSolidDofInfo *a3, unsigned int a4, GLsizei width, GLsizei height)
{
  glViewport(0, 0, width, height);
  glDisable(0xB71u);
  glDisable(0xBE2u);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v9);
  {
    ProGL::makeProgramHandle<LiSolidUtils::CirclesOfConfusionProgram>();
  }
  ProGL::UseProgramSentry::UseProgramSentry((ProGL::UseProgramSentry *)v8, this, (const ProGL::ProgramHandle *)&LiSolidUtils::depthBlur(ProGL::GL &,LiSolidDofInfo const&,unsigned int,unsigned int,int,int)::circlesHandle);
  ProGL::ProgramHandle::getProgram<LiSolidUtils::CirclesOfConfusionProgram>((os_unfair_lock_s **)&LiSolidUtils::depthBlur(ProGL::GL &,LiSolidDofInfo const&,unsigned int,unsigned int,int,int)::circlesHandle, this);
  ProGL::UseProgramSentry::~UseProgramSentry((ProGL::UseProgramSentry *)v8);
  glBindFramebuffer(0x8D40u, 0);
  for (int i = 0; i != -6; --i)
  {
    glActiveTexture(i + 33989);
    glBindTexture(0xDE1u, 0);
  }
  glEnable(0xB71u);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1B7B3D694(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void ProGL::makeProgramHandle<LiSolidUtils::CirclesOfConfusionProgram>()
{
}

void sub_1B7B3D798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *ProGL::ProgramHandle::getProgram<LiSolidUtils::CirclesOfConfusionProgram>(os_unfair_lock_s **a1, ProGL::GL *a2)
{
  ProGL::Private::ProgramHandleImpl::getProgram(*a1, a2, &lpsrc);
  if (lpsrc) {
  else
  }
    uint64_t v2 = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

uint64_t LiSolidUtils::getGLRenderer(LiSolidUtils *this, ProGL::GL *a2)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN12LiSolidUtils13getGLRendererERN5ProGL2GLE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  block[4] = this;
  if (LiSolidUtils::getGLRenderer(ProGL::GL &)::predicate != -1) {
    dispatch_once(&LiSolidUtils::getGLRenderer(ProGL::GL &)::predicate, block);
  }
  return LiSolidUtils::getGLRenderer(ProGL::GL &)::renderer;
}

void ___ZN12LiSolidUtils13getGLRendererERN5ProGL2GLE_block_invoke()
{
  String = (char *)glGetString(0x1F01u);
  if (String)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, String);
    uint64_t v1 = v28;
    unsigned __int8 v2 = v28;
    uint64_t v4 = v26;
    uint64_t v3 = v27;
    if ((v28 & 0x80u) == 0) {
      double v5 = (char *)&v26 + v28;
    }
    else {
      double v5 = (char *)v26 + v27;
    }
    if ((v28 & 0x80u) == 0) {
      float v6 = (char *)&v26;
    }
    else {
      float v6 = (char *)v26;
    }
    if (v6 != v5)
    {
      do
      {
        char *v6 = __tolower(*v6);
        ++v6;
      }
      while (v6 != v5);
      uint64_t v1 = v28;
      uint64_t v4 = v26;
      uint64_t v3 = v27;
      unsigned __int8 v2 = v28;
    }
    if ((v2 & 0x80u) == 0) {
      uint64_t v7 = v1;
    }
    else {
      uint64_t v7 = v3;
    }
    if ((v2 & 0x80u) == 0) {
      uint64_t v8 = (void **)&v26;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v9 = v8;
    uint64_t v10 = (char *)v8 + v7;
    if (v7 > 5)
    {
      uint64_t v11 = v7;
      long long v12 = v8;
      do
      {
        uint64_t v13 = (char *)memchr(v12, 110, v11 - 5);
        if (!v13) {
          break;
        }
        if (*(_DWORD *)v13 == 1684633198 && *((_WORD *)v13 + 2) == 24937)
        {
          if (v13 != v10 && v13 - (char *)v8 != -1)
          {
            int v15 = 2;
            goto LABEL_62;
          }
          break;
        }
        long long v12 = (void **)(v13 + 1);
        uint64_t v11 = v10 - (char *)v12;
      }
      while (v10 - (char *)v12 > 5);
    }
    if (v7 >= 5)
    {
      uint64_t v16 = v7;
      double v17 = v8;
      do
      {
        PCSharedCount v18 = (char *)memchr(v17, 105, v16 - 4);
        if (!v18) {
          break;
        }
        if (*(_DWORD *)v18 == 1702129257 && v18[4] == 108)
        {
          if (v18 != v10 && v18 - (char *)v8 != -1)
          {
            int v15 = 1;
            goto LABEL_62;
          }
          break;
        }
        double v17 = (void **)(v18 + 1);
        uint64_t v16 = v10 - (char *)v17;
      }
      while (v10 - (char *)v17 >= 5);
    }
    if (v7 >= 3)
    {
      uint64_t v20 = v7;
      int v21 = v8;
      while (1)
      {
        uint64_t v22 = (char *)memchr(v21, 97, v20 - 2);
        if (!v22) {
          goto LABEL_52;
        }
        if (*(_WORD *)v22 == 28001 && v22[2] == 100) {
          break;
        }
        int v21 = (void **)(v22 + 1);
        uint64_t v20 = v10 - (char *)v21;
        if (v10 - (char *)v21 < 3) {
          goto LABEL_52;
        }
      }
      if (v22 == v10 || v22 - (char *)v8 == -1)
      {
LABEL_52:
        do
        {
          float v24 = (char *)memchr(v9, 97, v7 - 2);
          if (!v24) {
            break;
          }
          if (*(_WORD *)v24 == 29793 && v24[2] == 105)
          {
            if (v24 == v10 || v24 - (char *)v8 == -1) {
              break;
            }
            goto LABEL_61;
          }
          uint64_t v9 = (void **)(v24 + 1);
          uint64_t v7 = v10 - (v24 + 1);
        }
        while (v7 >= 3);
      }
      else
      {
LABEL_61:
        int v15 = 3;
LABEL_62:
        LiSolidUtils::getGLRenderer(ProGL::GL &)::renderer = v15;
      }
    }
    if ((v2 & 0x80) != 0) {
      operator delete(v4);
    }
  }
}

void sub_1B7B3DB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiSceneIterator<LiSolid,LiSceneIteratorAlways>::LiSceneIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11289D8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  while (1)
  {
    uint64_t v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      break;
    }
    LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next(a1);
  }
  return a1;
}

void sub_1B7B3DC68(_Unwind_Exception *a1)
{
  PCArray<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

double LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next(uint64_t a1)
{
  unsigned __int8 v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (v3
      && (uint64_t v4 = v3,
          uint64_t v3 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *))(*(void *)v3 + 136))(v3),
          v3))
    {
      int v5 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 24) <= v5) {
        int v6 = (2 * (v5 + 1)) | 1;
      }
      else {
        int v6 = *(_DWORD *)(a1 + 24);
      }
      PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v5 + 1, v6);
      uint64_t v7 = *(void *)(a1 + 32) + 144 * *(int *)(a1 + 28);
      *(void *)(v7 - 144) = v4;
      *(_DWORD *)(v7 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      uint64_t v8 = v7 - 128;
      if (a1 + 40 != v7 - 128)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a1 + 40;
        uint64_t v11 = v8;
        do
        {
          for (uint64_t i = 0; i != 32; i += 8)
            *(void *)(v11 + i) = *(void *)(v10 + i);
          ++v9;
          v11 += 32;
          v10 += 32;
        }
        while (v9 != 4);
      }
      uint64_t v13 = (*(uint64_t (**)(PCArray_base *, void))(*(void *)v4 + 144))(v4, 0);
      *(void *)(a1 + 8) = v13;
      PCMatrix44Tmpl<double>::operator*(v8, (long long *)(v13 + 8), (uint64_t)v34);
      if (v34 != (_OWORD *)(a1 + 40))
      {
        for (uint64_t j = 0; j != 8; j += 2)
        {
          uint64_t v16 = (_OWORD *)(a1 + 40 + j * 16);
          long long v14 = v34[j];
          long long v17 = v34[j + 1];
          *uint64_t v16 = v14;
          v16[1] = v17;
        }
      }
    }
    else
    {
      int v18 = *(_DWORD *)(a1 + 28);
      if (v18)
      {
        uint64_t v19 = (_OWORD *)(a1 + 40);
        while (1)
        {
          if (v18 <= 0) {
            PCArray_base::badIndex(v3);
          }
          uint64_t v20 = v18 - 1;
          uint64_t v21 = *(void *)(a1 + 32);
          uint64_t v22 = (uint64_t *)(v21 + 144 * v20);
          uint64_t v23 = *v22;
          signed int v25 = *((_DWORD *)v22 + 2);
          float v24 = v22 + 1;
          if (v25 < (int)((*(uint64_t (**)(uint64_t))(*(void *)v23 + 136))(v23) - 1)) {
            break;
          }
          int v26 = *(_DWORD *)(a1 + 28) - 1;
          if (*(_DWORD *)(a1 + 24) >= v26) {
            int v27 = *(_DWORD *)(a1 + 24);
          }
          else {
            int v27 = (2 * v26) | 1;
          }
          uint64_t v3 = (PCArray_base *)PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v26, v27);
          int v18 = *(_DWORD *)(a1 + 28);
          if (!v18) {
            goto LABEL_25;
          }
        }
        ++*v24;
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 144))(v23);
        *(void *)(a1 + 8) = v28;
        PCMatrix44Tmpl<double>::operator*(v21 + 144 * v20 + 16, (long long *)(v28 + 8), (uint64_t)v34);
        if (v34 != v19)
        {
          long long v29 = v38;
          *(_OWORD *)(a1 + 104) = v37;
          *(_OWORD *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v29;
          long long v30 = v40;
          *(_OWORD *)(a1 + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = v39;
          *(_OWORD *)(a1 + 152) = v30;
          long long v31 = v34[1];
          *uint64_t v19 = v34[0];
          *(_OWORD *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v31;
          *(void *)&long long v14 = v35;
          long long v32 = v36;
          *(_OWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 88) = v32;
        }
      }
      else
      {
LABEL_25:
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)&long long v14 = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PCArray<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F11289D8;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F11289D8;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t LiSceneIterator<LiSolid,LiSceneIteratorAlways>::~LiSceneIterator(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11289D8;
  if (*(int *)(a1 + 24) < 0) {
    int v3 = 1;
  }
  else {
    int v3 = *(_DWORD *)(a1 + 24);
  }
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(v2, 0, v3);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8077774924);
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

ProGL::Private::VariableBase *ProGL::Uniform<float>::Uniform(ProGL::Private::VariableBase *a1, ProGL::Program *a2, char *a3)
{
  int v5 = ProGL::Private::VariableBase::VariableBase(a1, a2);
  *(void *)int v5 = &unk_1F1128A10;
  *((_DWORD *)v5 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v5 + 3, a3);
  *((_DWORD *)a1 + 12) = -1;
  return a1;
}

void sub_1B7B3E174(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<float>::~Uniform(void **a1)
{
  ProGL::Uniform<float>::~Uniform(a1);

  JUMPOUT(0x1BA9BFBA0);
}

void ProGL::Uniform<float>::upload(uint64_t a1, ProGL::Private *this)
{
}

uint64_t ProGL::Uniform<float>::getString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"uniform ", 8);
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"float", 5);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = a1 + 24;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)";\n", 2);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9BFAB0](&v15);
}

void sub_1B7B3E360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<float>::~Uniform(void **this)
{
  *this = &unk_1F1128A10;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

void ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>::operator()()
{
}

void sub_1B7B3E408()
{
  std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<LiSolidUtils::CirclesOfConfusionProgram,void>(v0, v1);
}

void sub_1B7B3E42C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B3C40CCE93B6BLL);
  _Unwind_Resume(a1);
}

void LiSolidUtils::CirclesOfConfusionProgram::CirclesOfConfusionProgram(LiSolidUtils::CirclesOfConfusionProgram *this)
{
  ProGL::Program::Program(this);
  *uint64_t v2 = &unk_1F1128AB8;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "zBuffer");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 280), this, "dofNear");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 336), this, "dofFar");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 392), this, "farPlane");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 448), this, "aperture");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 504), this, "maxRadius");
  ProGL::Uniform<PCMatrix44Tmpl<float>>::Uniform((uint64_t)this + 560, this, "invProj");
  HGProgramDescriptor::SetFragmentFunctionName(this, "#version 120\n");
}

void sub_1B7B3E548()
{
  ProGL::Program::setFragmentSource(v0, "float depthBufferToEyeZ( float z) { z = 2.0 * z - 1.0; vec4 vz = vec4( 0.0, 0.0, z, 1.0); vec4 tmp = invProj * vz;"
    " tmp = tmp / tmp.w; z = -tmp.z; return z; } void main() { vec4 uint64_t result = vec4(0.0); vec2 uv = gl_TexCoord[0].st; floa"
    "t clipZ = texture2D( zBuffer, uv).x; float z = depthBufferToEyeZ( clipZ); if ((z < dofNear) || (z > dofFar)) { flo"
    "at diff; if (z < dofNear) { diff = dofNear - z; } else if (abs(clipZ) > 0.9999) { diff = 0.0; } else { diff = min( z"
    " - dofFar, farPlane - dofFar); } float r = (diff * aperture) / z; r = min(r, maxRadius); uint64_t result = vec4( r, r, r, 1."
    "0); } gl_FragColor = result; }");
}

uint64_t sub_1B7B3E558()
{
  return v0;
}

void sub_1B7B3E574(_Unwind_Exception *a1)
{
  ProGL::Uniform<float>::~Uniform(v7);
  ProGL::Uniform<float>::~Uniform(v6);
  ProGL::Uniform<float>::~Uniform(v5);
  ProGL::Uniform<float>::~Uniform(v4);
  ProGL::Uniform<float>::~Uniform(v3);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void LiSolidUtils::CirclesOfConfusionProgram::~CirclesOfConfusionProgram(void **this)
{
  *this = &unk_1F1128AB8;
  uint64_t v2 = this + 28;
  ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(this + 70);
  ProGL::Uniform<float>::~Uniform(this + 63);
  ProGL::Uniform<float>::~Uniform(this + 56);
  ProGL::Uniform<float>::~Uniform(this + 49);
  ProGL::Uniform<float>::~Uniform(this + 42);
  ProGL::Uniform<float>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);

  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1F1128AB8;
  uint64_t v2 = this + 28;
  ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(this + 70);
  ProGL::Uniform<float>::~Uniform(this + 63);
  ProGL::Uniform<float>::~Uniform(this + 56);
  ProGL::Uniform<float>::~Uniform(this + 49);
  ProGL::Uniform<float>::~Uniform(this + 42);
  ProGL::Uniform<float>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t ProGL::Uniform<PCMatrix44Tmpl<float>>::Uniform(uint64_t a1, ProGL::Program *a2, char *a3)
{
  uint64_t v5 = ProGL::Private::VariableBase::VariableBase((ProGL::Private::VariableBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_1F1128B00;
  *((_DWORD *)v5 + 19) = 1065353216;
  *((_DWORD *)v5 + LiPolygonInstance::~LiPolygonInstance(this - 14) = 1065353216;
  *((_DWORD *)v5 + 9) = 1065353216;
  *((_DWORD *)v5 + 4) = 1065353216;
  *(void *)((char *)v5 + 28) = 0;
  *(void *)((char *)v5 + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)((char *)v5 + 68) = 0;
  *(void *)(a1 + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v5 + 10, a3);
  *(_DWORD *)(a1 + 104) = -1;
  return a1;
}

void sub_1B7B3E7B0(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(void **a1)
{
  ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(a1);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL ProGL::Uniform<PCMatrix44Tmpl<float>>::prepare(uint64_t a1)
{
  uint64_t FactoryForSerialization = (LiImageSource *)OZFactoryBase::getFactoryForSerialization(a1);
  GLuint v3 = LiImageSource::imageSpace(FactoryForSerialization);
  uint64_t v4 = (const GLchar *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    uint64_t v4 = *(const GLchar **)v4;
  }
  int UniformLocation = glGetUniformLocation(v3, v4);
  *(_DWORD *)(a1 + 104) = UniformLocation;
  return UniformLocation != -1;
}

void ProGL::Uniform<PCMatrix44Tmpl<float>>::upload(uint64_t a1, int a2)
{
}

uint64_t ProGL::Uniform<PCMatrix44Tmpl<float>>::getString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"uniform ", 8);
  GLuint v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"mat4", 4);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v6 = a1 + 80;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)";\n", 2);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9BFAB0](&v15);
}

void sub_1B7B3E9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(void **this)
{
  *this = &unk_1F1128B00;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }

  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

void std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<LiSolidUtils::CirclesOfConfusionProgram,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7B3EAC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<DepthFilterProgram,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<LiSolidUtils::CirclesOfConfusionProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,LiSolidUtils::CirclesOfConfusionProgram>,std::allocator<LiSolidUtils::CirclesOfConfusionProgram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<LiSolidUtils::CirclesOfConfusionProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,LiSolidUtils::CirclesOfConfusionProgram>,std::allocator<LiSolidUtils::CirclesOfConfusionProgram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7B3EBB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>,std::allocator<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>,std::allocator<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void buildSCNLights(uint64_t a1@<X0>, CGColorSpace *a2@<X1>, CGColorSpace *a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v30 = *MEMORY[0x1E4F3B300];
    uint64_t v29 = *MEMORY[0x1E4F3B318];
    uint64_t v27 = *MEMORY[0x1E4F3B308];
    uint64_t v28 = *MEMORY[0x1E4F3B310];
    uint64_t v31 = (uint64_t)(a5 + 2);
    do
    {
      uint64_t v8 = *(void *)(a1 + 16);
      id v9 = objc_alloc_init(MEMORY[0x1E4F3B228]);
      [v9 setLight:objc_alloc_init(MEMORY[0x1E4F3B210])];
      switch(*(_DWORD *)(v8 + 944 * v7 + 656))
      {
        case 0:
          uint64_t v10 = (void *)[v9 light];
          uint64_t v11 = v30;
          goto LABEL_8;
        case 1:
          uint64_t v10 = (void *)[v9 light];
          uint64_t v11 = v27;
LABEL_8:
          [v10 setType:v11];
          double v12 = 1000.0;
          goto LABEL_9;
        case 2:
          objc_msgSend((id)objc_msgSend(v9, "light"), "setType:", v28);
          double v12 = 406250.0;
          goto LABEL_9;
        case 3:
          objc_msgSend((id)objc_msgSend(v9, "light"), "setType:", v29);
          uint64_t v13 = v8 + 944 * v7;
          objc_msgSend((id)objc_msgSend(v9, "light"), "setSpotInnerAngle:", (*(double *)(v13 + 696) + *(double *)(v13 + 696)) * 180.0 / 3.14159265);
          objc_msgSend((id)objc_msgSend(v9, "light"), "setSpotOuterAngle:", (*(double *)(v13 + 696) + *(double *)(v13 + 704) + *(double *)(v13 + 696) + *(double *)(v13 + 704))* 180.0/ 3.14159265);
          double v12 = 406250.0;
LABEL_9:
          PCMatrix44Tmpl<double>::operator*(a4, (long long *)(v8 + 944 * v7 + 760), (uint64_t)&v36);
          for (uint64_t i = 0; i != 4; ++i)
            *((float32x4_t *)&v37 + i) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v36.var0.var0 + 2 * i)), *(float64x2_t *)&v36.var0.var1[4 * i + 1]);
          *(float *)long long v35 = v37;
          *(float *)&v35[1] = v40[1];
          *(float *)&v35[2] = v40[5];
          *(float *)&v35[3] = v40[9];
          *(float *)&v35[4] = v38;
          *(float *)&v35[5] = v40[2];
          *(float *)&v35[6] = v40[6];
          *(float *)&v35[7] = v40[10];
          *(float *)&v35[8] = v39;
          *(float *)&v35[9] = v40[3];
          *(float *)&v35[10] = v40[7];
          *(float *)&v35[11] = v40[11];
          *(float *)&v35[12] = v40[0];
          *(float *)&v35[13] = v40[4];
          *(float *)&v35[14] = v40[8];
          *(float *)&v35[15] = v40[12];
          [v9 setTransform:v35];
          PCColor::PCColor(&v36, *(float *)(v8 + 944 * v7 + 608), *(float *)(v8 + 944 * v7 + 612), *(float *)(v8 + 944 * v7 + 616), *(float *)(v8 + 944 * v7 + 620), a2);
          PCColor::getRGBA(&v36, &v37, &v38, &v39, v40, a3);
          objc_msgSend((id)objc_msgSend(v9, "light"), "setColor:", objc_msgSend(MEMORY[0x1E4F428B8], "colorWithRed:green:blue:alpha:", v37, v38, v39, v40[0]));
          PCCFRef<CGColorSpace *>::~PCCFRef(&v36.var1._obj);
          objc_msgSend((id)objc_msgSend(v9, "light"), "setIntensity:", v12 * *(double *)(v8 + 944 * v7 + 648));
          uint64_t v16 = a5[1];
          unint64_t v15 = (unint64_t)a5[2];
          if ((unint64_t)v16 >= v15)
          {
            uint64_t v18 = ((char *)v16 - (unsigned char *)*a5) >> 3;
            if ((unint64_t)(v18 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = v15 - (void)*a5;
            uint64_t v20 = v19 >> 2;
            if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
              uint64_t v20 = v18 + 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v31, v21);
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v22[8 * v18];
            *(void *)uint64_t v23 = v9;
            long long v17 = v23 + 8;
            signed int v25 = (char *)*a5;
            float v24 = (char *)a5[1];
            if (v24 != *a5)
            {
              do
              {
                uint64_t v26 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v23 - 1) = v26;
                v23 -= 8;
              }
              while (v24 != v25);
              float v24 = (char *)*a5;
            }
            *a5 = v23;
            a5[1] = v17;
            a5[2] = &v22[8 * v21];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *uint64_t v16 = v9;
            long long v17 = v16 + 1;
          }
          a5[1] = v17;
          break;
        default:
          fwrite("unknown light type\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);

          break;
      }
      ++v7;
    }
    while (v7 < *(int *)(a1 + 12));
  }
}

void sub_1B7B3F074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void LiHeEdge::RenderTile(LiHeEdge *this, HGTile *a2)
{
  HGArray<int,(HGFormat)34>::HGArray((uint64_t)&v2);
}

void sub_1B7B3F660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HGArrayData *a14, uint64_t a15, HGArrayData *a16, uint64_t a17, HGArrayData *a18)
{
  if (a16) {
    HGArrayData::Release((uint64_t)a16);
  }
  if (a18) {
    HGArrayData::Release((uint64_t)a18);
  }
  _Unwind_Resume(exception_object);
}

unint64_t LiHeEdge::GetDOD(LiHeEdge *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v6 = &HGRectNull;
LABEL_5:
    LODWORD(v4) = *(_DWORD *)v6;
    unint64_t v8 = *((unsigned int *)v6 + 1);
    return v4 | (v8 << 32);
  }
  if (*((int *)this + 104) <= 2)
  {
    uint64_t v6 = &HGRectInfinite;
    goto LABEL_5;
  }
  unint64_t v11 = HLine::dilate(*((HLine **)this + 51), *(float *)(*(void *)(*((void *)this + 53) + 16) + *((int *)this + 108)));
  LODWORD(v15) = *((_DWORD *)this + 104);
  if ((int)v15 < 1)
  {
    float v29 = 0.0;
    float v28 = 0.0;
    float v20 = 0.0;
    float v17 = 0.0;
  }
  else
  {
    unint64_t v16 = v12;
    unint64_t v4 = HIDWORD(v11);
    unint64_t v5 = HIDWORD(v12);
    float v17 = 0.0;
    uint64_t v18 = 1;
    uint64_t v19 = 16;
    float v20 = 0.0;
    float v21 = 0.0;
    float v22 = 0.0;
    unint64_t v23 = HIDWORD(v11);
    unint64_t v24 = HIDWORD(v12);
    unint64_t v25 = v12;
    do
    {
      unint64_t v13 = v4;
      unint64_t v14 = v5;
      unint64_t v26 = v16;
      if (v18 != v15)
      {
        unint64_t v13 = HLine::dilate((HLine *)(*((void *)this + 51) + v19), *(float *)(*(void *)(*((void *)this + 53) + 16)+ *(int *)(*((void *)this + 53) + 4) * (uint64_t)(int)v18+ *((int *)this + 108))) >> 32;
        unint64_t v14 = HIDWORD(v26);
      }
      if (vabds_f32(*(float *)&v23 * *(float *)&v26, *(float *)&v25 * *(float *)&v13) < 0.0000001)
      {
        unint64_t v26 = v25;
        unint64_t v14 = v24;
        unint64_t v13 = v23;
        float v29 = v22;
        float v28 = v21;
      }
      else
      {
        float v27 = (float)(*(float *)&v23 * *(float *)&v26) - (float)(*(float *)&v25 * *(float *)&v13);
        float v28 = (float)((float)(*(float *)&v25 * *(float *)&v14) - (float)(*(float *)&v24 * *(float *)&v26)) / v27;
        float v29 = (float)((float)(*(float *)&v24 * *(float *)&v13) - (float)(*(float *)&v23 * *(float *)&v14)) / v27;
        if (v18 == 1)
        {
          float v20 = (float)((float)(*(float *)&v24 * *(float *)&v13) - (float)(*(float *)&v23 * *(float *)&v14)) / v27;
          float v17 = (float)((float)(*(float *)&v25 * *(float *)&v14) - (float)(*(float *)&v24 * *(float *)&v26)) / v27;
        }
        else
        {
          float v17 = fmaxf(v28, v17);
          float v28 = fminf(v28, v21);
          float v20 = fmaxf(v29, v20);
          float v29 = fminf(v29, v22);
        }
      }
      uint64_t v15 = *((int *)this + 104);
      v19 += 16;
      float v21 = v28;
      float v22 = v29;
      unint64_t v23 = v13;
      unint64_t v24 = v14;
      unint64_t v25 = v26;
    }
    while (v18++ < v15);
  }
  LODWORD(v4) = vcvtms_s32_f32(v28);
  LODWORD(v5) = vcvtms_s32_f32(v29);
  LODWORD(v13) = vcvtps_s32_f32(v17);
  LODWORD(vLiPolygonInstance::~LiPolygonInstance(this - 14) = vcvtps_s32_f32(v20);
  uint64_t v31 = v13 | (v14 << 32);
  if ((*(int (**)(LiHeEdge *, HGRenderer *))(*(void *)this + 312))(this, a2) < 1)
  {
    unint64_t v8 = v5;
  }
  else
  {
    uint64_t v32 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    unint64_t v33 = HGRectGrow(v4 | (v5 << 32), v31, v32);
    unint64_t v8 = HIDWORD(v33);
    LODWORD(v4) = v33;
  }
  return v4 | (v8 << 32);
}

unint64_t HLine::dilate(HLine *this, float a2)
{
  if (a2 == 0.0)
  {
    float v2 = *((float *)this + 1);
  }
  else
  {
    float v2 = *((float *)this + 1);
    float v3 = *((float *)this + 2);
    if (fabsf(v3) >= 0.0000001)
    {
      if (fabsf(v2) >= 0.0000001)
      {
        float v4 = -1.0;
        if (v3 >= 0.0) {
          float v4 = 1.0;
        }
        float v2 = -(float)((float)((float)-v2 / v3) * v4);
      }
      else
      {
        float v2 = 0.0;
      }
    }
  }
  return (unint64_t)LODWORD(v2) << 32;
}

uint64_t LiHeEdge::GetROI(LiHeEdge *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v4 = *(void *)&a4.var0;
  if ((*(int (**)(LiHeEdge *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v5, v6);
  }
  return v4;
}

void LiHeEdge::LiHeEdge(LiHeEdge *this)
{
  HGNode3D::HGNode3D(this);
  *uint64_t v1 = &unk_1F1128C58;
  HGArray<float,(HGFormat)7>::HGArray((uint64_t)(v1 + 53));
}

void sub_1B7B3FB60(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  if (*v4) {
    HGArrayData::Release(*v4);
  }
  if (*v2) {
    HGArrayData::Release(*v2);
  }
  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdge::~LiHeEdge(LiHeEdge *this)
{
  *(void *)this = &unk_1F1128C58;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFB70](v2, 0x1000C80451B5BE8);
  }
  *((void *)this + 51) = 0;
  uint64_t v3 = *((void *)this + 57);
  if (v3) {
    MEMORY[0x1BA9BFBA0](v3, 0x1000C40E0EAB150);
  }
  uint64_t v4 = *((void *)this + 55);
  if (v4) {
    HGArrayData::Release(v4);
  }
  uint64_t v5 = *((void *)this + 53);
  if (v5) {
    HGArrayData::Release(v5);
  }

  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeEdge::~LiHeEdge(this);

  HGObject::operator delete(v1);
}

void LiHeEdge::setLines(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    int v2 = *(_DWORD *)(*(void *)a2 + 8);
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = v2;
  uint64_t v3 = *(void *)(a1 + 408);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C80451B5BE8);
  }
  operator new[]();
}

float HLine::setLine(uint64_t a1, float a2, float a3, float a4)
{
  if (a2 > 0.0 || a3 > 0.0)
  {
    if (a2 <= 0.0 || a3 >= 0.0)
    {
      if (a3 < 0.0 || a2 < 0.0) {
        int v4 = 2;
      }
      else {
        int v4 = 3;
      }
    }
    else
    {
      int v4 = 1;
    }
  }
  else
  {
    int v4 = 0;
  }
  *(_DWORD *)a1 = v4;
  float v6 = 1.0 / sqrtf((float)(a2 * a2) + (float)(a3 * a3));
  *(float *)(a1 + 4) = a2 * v6;
  *(float *)(a1 + 8) = a3 * v6;
  float result = a4 * v6;
  *(float *)(a1 + 12) = a4 * v6;
  return result;
}

uint64_t LiHeEdge::setThickness(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 424);
  uint64_t v5 = *(atomic_uint **)a2;
  if (result != *(void *)a2)
  {
    if (result)
    {
      uint64_t result = HGArrayData::Release(result);
      uint64_t v5 = *(atomic_uint **)a2;
    }
    *(void *)(a1 + 424) = v5;
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
  }
  *(void *)(a1 + 432) = *(void *)(a2 + 8);
  return result;
}

uint64_t LiHeEdge::setFilter(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 440);
  uint64_t v5 = *(atomic_uint **)a2;
  if (result != *(void *)a2)
  {
    if (result)
    {
      uint64_t result = HGArrayData::Release(result);
      uint64_t v5 = *(atomic_uint **)a2;
    }
    *(void *)(a1 + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v5;
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
  }
  *(void *)(a1 + 448) = *(void *)(a2 + 8);
  return result;
}

uint64_t LiHeEdge::SetParameter(LiHeEdge *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v8 = (__n128 *)*((void *)this + 57);
  if (v8->n128_f32[0] == a3.n128_f32[0]
    && v8->n128_f32[1] == a3.n128_f32[0]
    && v8->n128_f32[2] == a3.n128_f32[0]
    && v8->n128_f32[3] == a3.n128_f32[0])
  {
    return 0;
  }
  int32x4_t v9 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  *unint64_t v8 = (__n128)v9;
  v8[1] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeEdge::GetParameter(LiHeEdge *this, int a2, float *a3)
{
  if (!a2)
  {
    uint64_t v3 = (float *)*((void *)this + 57);
    *a3 = v3[4];
    a3[1] = v3[5];
    a3[2] = v3[6];
    float result = v3[7];
    a3[3] = result;
  }
  return result;
}

uint64_t HGArray<float,(HGFormat)7>::append(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    int v3 = *(_DWORD *)(v2 + 8);
    int v4 = v3 + 1;
    if (v3 < *(_DWORD *)(v2 + 12)) {
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 1;
  }
  HGArray<int,(HGFormat)34>::reserve((uint64_t *)a1, 2 * v4);
LABEL_6:
  HGArray<float,(HGFormat)7>::resize((uint64_t *)a1, v4);
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 && (uint64_t v6 = *(void *)(v5 + 16)) != 0) {
    return v6 + *(int *)(v5 + 4) * (uint64_t)v3 + *(int *)(a1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t LiHeEdgeMix::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v10 = v9;
  unint64_t v11 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v12 = HGRenderer::GetDOD(a2, v11);
  uint64_t v14 = v13;
  uint64_t v15 = HGRenderer::GetInput(a2, this, 2u);
  uint64_t v16 = HGRenderer::GetDOD(a2, v15);
  uint64_t v18 = HGRectIntersection(DOD, v10, v16, v17);
  return HGRectUnion(v12, v14, v18, v19);
}

uint64_t LiHeEdgeMix::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 == 2)
  {
    unint64_t v8 = a2;
    unsigned int v9 = 0;
LABEL_6:
    Input = HGRenderer::GetInput(v8, this, v9);
    uint64_t DOD = HGRenderer::GetDOD(a2, Input);
    return HGRectIntersection(v5, v4, DOD, v12);
  }
  if (a3 != 1)
  {
    if (a3) {
      return 0;
    }
    unint64_t v8 = a2;
    unsigned int v9 = 2;
    goto LABEL_6;
  }
  return v5;
}

uint64_t LiHeEdgeMix::BindTexture(LiHeEdgeMix *this, HGHandler *a2, uint64_t a3)
{
  if (a3 <= 1) {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
  }
  return 0;
}

void LiHeEdgeMix::~LiHeEdgeMix(LiHeEdgeMix *this)
{
  LiHeEdgeMixShader::~LiHeEdgeMixShader(this);

  HGObject::operator delete(v1);
}

float64x2_t project@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, float64x2_t *a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  float64x2_t v22 = *(float64x2_t *)a1;
  *(void *)&long long v23 = v7;
  *((void *)&v23 + 1) = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*(a3, a2, (uint64_t)v19);
  float64x2_t v20 = 0u;
  long long v21 = 0u;
  PCMatrix44Tmpl<double>::transform<double>(v19, v22.f64, v20.f64);
  float64x2_t v22 = v20;
  long long v23 = v21;
  double v8 = (*(double *)&v21 / *((double *)&v21 + 1) + 1.0) * 0.5;
  uint64_t v9 = a4[1];
  v10.i64[0] = (int)*a4;
  v10.i64[1] = (int)HIDWORD(*a4);
  float64x2_t v11 = vcvtq_f64_s64(v10);
  v10.i64[0] = (int)v9;
  v10.i64[1] = SHIDWORD(v9);
  __asm
  {
    FMOV            V4.2D, #1.0
    FMOV            V3.2D, #0.5
  }
  float64x2_t result = vaddq_f64(vmulq_f64(vmulq_f64(vaddq_f64(vdivq_f64(v20, (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v21 + 1), 0)), _Q4), vcvtq_f64_s64(v10)), _Q3), v11);
  *a5 = result;
  a5[1].f64[0] = v8;
  return result;
}

void LiSceneDrawer::LiSceneDrawer(LiSceneDrawer *this)
{
  *(void *)this = &unk_1F1129148;
  *((void *)this + 11) = 0x3FF0000000000000;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 27) = 0x3FF0000000000000;
  *((void *)this + 22) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q1;
  *((_OWORD *)this + 9) = 0u;
  long long v7 = _Q1;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 48) = 0x3FF0000000000000;
  *((void *)this + 43) = 0x3FF0000000000000;
  *((void *)this + 38) = 0x3FF0000000000000;
  *((_OWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = _Q1;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((unsigned char *)this + 444) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiSceneDrawer *)((char *)this + 448));
  *((_DWORD *)this + 11ProCore_Impl::PCNSRefImpl::release(this + 6) = 1065353216;
  *((_WORD *)this + 234) = 257;
  *((unsigned char *)this + 47std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_DWORD *)this + 118) = 0;
  *(_DWORD *)((char *)this + 475) = 0;
  *((void *)this + 71) = 0x3FF0000000000000;
  *((void *)this + 6ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = -1;
  *((void *)this + 61) = 0x3FF0000000000000;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 53ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((void *)this + 92) = 0x3FF0000000000000;
  *((void *)this + 87) = 0x3FF0000000000000;
  *((void *)this + 82) = 0x3FF0000000000000;
  *((_OWORD *)this + 38) = v7;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((void *)this + 95) = &unk_1F10AD5F8;
  *((void *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 97) = 0;
  *((unsigned char *)this + 784) = 0;
  *((void *)this + 10std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 101) = 0;
  *((void *)this + 99) = (char *)this + 800;
  *((void *)this + 103) = 0;
  *((void *)this + 104) = 0;
  *((void *)this + 102) = (char *)this + 824;
  *((void *)this + 112) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 53) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 113);
  *((void *)this + 1LiPolygonInstance::~LiPolygonInstance(this - 14) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 115);
}

void sub_1B7B404D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  PCSharedCount::~PCSharedCount(v15);
  a12 = v12 + 872;
  std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  uint64_t v18 = *(void **)(v12 + 848);
  if (v18)
  {
    *(void *)(v12 + 85ProCore_Impl::PCNSRefImpl::release(this + 6) = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12 + 816, *v16);
  std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(v12 + 792, *v14);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v13);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::LiSceneDrawer(LiSceneDrawer *this, const LiSceneDrawer *a2)
{
  *(void *)this = &unk_1F1129148;
  *((void *)this + 11) = 0x3FF0000000000000;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 27) = 0x3FF0000000000000;
  *((void *)this + 22) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q1;
  *((_OWORD *)this + 9) = 0u;
  long long v17 = _Q1;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 48) = 0x3FF0000000000000;
  *((void *)this + 43) = 0x3FF0000000000000;
  *((void *)this + 38) = 0x3FF0000000000000;
  *((_OWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = _Q1;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((unsigned char *)this + 444) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiSceneDrawer *)((char *)this + 448));
  *((_DWORD *)this + 11ProCore_Impl::PCNSRefImpl::release(this + 6) = 1065353216;
  *((_WORD *)this + 234) = 257;
  *((unsigned char *)this + 47std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_DWORD *)this + 118) = 0;
  *(_DWORD *)((char *)this + 475) = 0;
  uint64_t v9 = (char *)this + 488;
  *((void *)this + 71) = 0x3FF0000000000000;
  *((void *)this + 6ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = -1;
  *((void *)this + 61) = 0x3FF0000000000000;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 53ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 37) = 0u;
  int64x2_t v10 = (char *)this + 616;
  *((void *)this + 92) = 0x3FF0000000000000;
  *((void *)this + 87) = 0x3FF0000000000000;
  *((void *)this + 82) = 0x3FF0000000000000;
  *((_OWORD *)this + 38) = v17;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((void *)this + 95) = &unk_1F10AD5F8;
  *((void *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 97) = 0;
  *((unsigned char *)this + 784) = 0;
  *((void *)this + 10std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 101) = 0;
  *((void *)this + 99) = (char *)this + 800;
  *((void *)this + 103) = 0;
  *((void *)this + 104) = 0;
  *((void *)this + 102) = (char *)this + 824;
  *((void *)this + 112) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 53) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 113);
  *((void *)this + 1LiPolygonInstance::~LiPolygonInstance(this - 14) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 115);
  *((_DWORD *)this + 118) = *((_DWORD *)a2 + 118);
  *((unsigned char *)this + 47ProCore_Impl::PCNSRefImpl::release(this + 6) = *((unsigned char *)a2 + 476);
  *(_WORD *)((char *)this + 477) = *(_WORD *)((char *)a2 + 477);
  if (a2 == this)
  {
    *((void *)this + 105) = *((void *)a2 + 105);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = (char *)a2 + 488;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)&v9[i] = *(void *)&v12[i];
      ++v11;
      v9 += 32;
      v12 += 32;
    }
    while (v11 != 4);
    *((void *)this + 105) = *((void *)a2 + 105);
    if (a2 != this)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (char *)a2 + 616;
      do
      {
        for (uint64_t j = 0; j != 32; j += 8)
          *(void *)&v10[j] = *(void *)&v15[j];
        ++v14;
        v10 += 32;
        v15 += 32;
      }
      while (v14 != 4);
    }
  }
  *(_OWORD *)((char *)this + 744) = *(_OWORD *)((char *)a2 + 744);
  *((void *)this + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((void *)a2 + 60);
}

void sub_1B7B407C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  PCSharedCount::~PCSharedCount(v14);
  a12 = v12 + 872;
  std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  uint64_t v18 = *(void **)(v12 + 848);
  if (v18)
  {
    *(void *)(v12 + 85ProCore_Impl::PCNSRefImpl::release(this + 6) = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12 + 816, *v16);
  std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(v12 + 792, *v15);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v13);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::~LiSceneDrawer(LiSceneDrawer *this)
{
  *(void *)this = &unk_1F1129148;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 115);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 113);
  int v3 = (void **)((char *)this + 872);
  std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 106);
  if (v2)
  {
    *((void *)this + 107) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 816, *((void **)this + 103));
  std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy((uint64_t)this + 792, *((PCSharedCount **)this + 100));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 760);
}

{
  uint64_t vars8;

  LiSceneDrawer::~LiSceneDrawer(this);

  JUMPOUT(0x1BA9BFBA0);
}

__CFString **LiSceneDrawer::setupLight(LiSceneDrawer *this, const LiLight *a2)
{
  CurrentContextUniformData = (ProShade::UniformData *)ProShade::UniformData::getCurrentContextUniformData(this);
  uint64_t v5 = LiLightInfo::get(a2, v4);
  v18[0] = *(PCString *)((char *)a2 + 688);
  ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 128, (uint64_t *)v18);
  v18[0] = *(PCString *)((char *)a2 + 600);
  ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 712, (uint64_t *)v18);
  ProShade::UniformData::set<PCVector3<double>>(CurrentContextUniformData, v5 + 744, (char *)a2 + 576);
  *(_OWORD *)&v18[0].int var0 = xmmword_1B7E734D0;
  ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)v18);
  *(_OWORD *)&v18[0].int var0 = xmmword_1B7E734D0;
  ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 32, (float32x2_t *)v18);
  float32x4_t v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)a2 + 608)), *((double *)a2 + 81))), vmulq_n_f64(vcvt_hight_f64_f32(*((float32x4_t *)a2 + 38)), *((double *)a2 + 81)));
  switch(*((_DWORD *)a2 + 164))
  {
    case 0:
      return ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 32, (float32x2_t *)&v21);
    case 1:
      ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)&v21);
      double v15 = *((double *)a2 + 80);
      *(_OWORD *)&v18[0].int var0 = *((_OWORD *)a2 + 39);
      double v19 = v15;
      uint64_t v20 = 0;
      goto LABEL_11;
    case 2:
      ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)&v21);
      double v7 = *((double *)a2 + 85);
      *(_OWORD *)&v18[0].int var0 = *(_OWORD *)((char *)a2 + 664);
      double v19 = v7;
      uint64_t v20 = 0x3FF0000000000000;
LABEL_11:
      float64x2_t result = ProShade::UniformData::set<PCVector4<double>>(CurrentContextUniformData, v5, v18);
      break;
    case 3:
      ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)&v21);
      double v8 = *((double *)a2 + 85);
      *(_OWORD *)&v18[0].int var0 = *(_OWORD *)((char *)a2 + 664);
      double v19 = v8;
      uint64_t v20 = 0x3FF0000000000000;
      ProShade::UniformData::set<PCVector4<double>>(CurrentContextUniformData, v5, v18);
      v18[0].int var0 = COERCE__CFSTRING_(cos(*((long double *)a2 + 87)));
      ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 584, (uint64_t *)v18);
      v18[0].int var0 = COERCE__CFSTRING_(cos(*((double *)a2 + 88) + *((double *)a2 + 87)));
      ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 616, (uint64_t *)v18);
      v18[0] = *(PCString *)((char *)a2 + 712);
      ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 680, (uint64_t *)v18);
      double v9 = *((double *)a2 + 80);
      double v10 = v9 * v9;
      double v11 = -v9;
      float64x2_t v12 = *((float64x2_t *)a2 + 39);
      double v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)) + v10);
      if (v13 < 0.000000100000001 && v13 > -0.000000100000001) {
        double v13 = 1.0;
      }
      *(float64x2_t *)&v18[0].int var0 = vdivq_f64(vnegq_f64(v12), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0));
      double v19 = v11 / v13;
      float64x2_t result = ProShade::UniformData::set<PCVector3<double>>(CurrentContextUniformData, v5 + 648, v18);
      break;
    default:
      exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(v18, "not implemented yet");
      PCString::PCString(&v17, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSceneDrawer.cpp");
      PCException::PCException(exception, v18, &v17, 204);
      *(void *)exceptiouint64_t n = &unk_1F10B1208;
  }
  return result;
}

void sub_1B7B40C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13)
{
  PCString::~PCString(&a12);
  PCString::~PCString(&a13);
  if (v14) {
    __cxa_free_exception(v13);
  }
  _Unwind_Resume(a1);
}

__CFString **ProShade::UniformData::set<double>(ProShade::UniformData *a1, uint64_t a2, uint64_t *a3)
{
  v8[18] = *(PCString *)MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v8);
  uint64_t v7 = *a3;
  ProShade::Value::set((uint64_t)v8, (const PCString *)3, 1, &v7);
  return ProShade::UniformData::set(a1, *(ProShade::UniformNode **)(a2 + 16), v8);
}

__CFString **ProShade::UniformData::set<PCVector3<double>>(ProShade::UniformData *a1, uint64_t a2, const void *a3)
{
  void v7[18] = *(PCString *)MEMORY[0x1E4F143B8];
  ProShade::Value::Value(v7);
  ProShade::Value::set((uint64_t)v7, (const PCString *)3, 3, a3);
  return ProShade::UniformData::set(a1, *(ProShade::UniformNode **)(a2 + 16), v7);
}

void LiSceneDrawer::setupLights(LiSceneDrawer *this, LiSceneObject *a2, LiLightSet *a3)
{
  uint64_t v6 = (__CFString **)ProGL::GL::GL((ProGL::GL *)v25);
  if (!*((unsigned char *)this + 476))
  {
    uint64_t v7 = *((unsigned int *)a3 + 3);
    if ((int)v7 >= 1)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (i >= *((int *)a3 + 3)) {
          PCArray_base::badIndex((PCArray_base *)v6);
        }
        uint64_t v6 = LiSceneDrawer::setupLight((LiSceneDrawer *)v6, (const LiLight *)(*((void *)a3 + 2) + 944 * i));
      }
    }
    LiSceneIterator<LiLight,LiSceneIteratorShineOut>::LiSceneIterator((uint64_t)v15, (uint64_t)a2);
    double v9 = (char *)this + 488;
    int v10 = 8;
    do
    {
      if (!v16) {
        break;
      }
      LiLight::LiLight((LiLight *)v14, v16);
      void v12[4] = v21;
      v12[5] = v22;
      v12[6] = v23;
      v12[7] = v24;
      v12[0] = v17;
      v12[1] = v18;
      v12[2] = v19;
      void v12[3] = v20;
      PCMatrix44Tmpl<double>::operator*((uint64_t)v9, v12, (uint64_t)v13);
      LiLight::transform((uint64_t)v14, v13);
      double v11 = (LiSceneDrawer *)LiLightSet::add((uint64_t)a3, (const LiLight *)v14);
      LiSceneDrawer::setupLight(v11, (const LiLight *)v14);
      LiSceneIterator<LiLight,LiSceneIteratorShineOut>::operator++((uint64_t)v15);
      LiLight::~LiLight(v14);
      --v10;
    }
    while (v10);
    LiSceneIterator<LiLight,LiSceneIteratorShineOut>::~LiSceneIterator((uint64_t)v15);
  }
  ProGL::GL::~GL((ProGL::GL *)v25);
}

void sub_1B7B40ED8(_Unwind_Exception *a1)
{
  ProGL::GL::~GL((ProGL::GL *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t LiSceneIterator<LiLight,LiSceneIteratorShineOut>::operator++(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    do
    {
      LiSceneIterator<LiLight,LiSceneIteratorShineOut>::next(a1);
      uint64_t v2 = *(const void **)(a1 + 8);
    }
    while (v2
  }
  return a1;
}

void LiSceneDrawer::beginRender(unsigned char *a1, uint64_t a2, uint64_t a3, long long *a4, void *a5, uint64_t *a6, uint64_t a7)
{
  long long v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v27 = *a6;
  a1[928] = 0;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, long long *, void *, uint64_t, PCSharedCount ***))(*(void *)a1 + 16))(a1, a2, a3, a4, a5, a7, &v24);
  if ((_BYTE)v27)
  {
    LiContext::LiContext((LiContext *)v15);
    char v17 = a1[476];
    LiClipSet::operator=((uint64_t)v16, a3);
    v16[9] = *a5;
    LiContext::setMaterialFilters((uint64_t)v15, a7);
    long long v12 = a4[3];
    long long v20 = a4[2];
    long long v21 = v12;
    long long v13 = a4[5];
    long long v22 = a4[4];
    long long v23 = v13;
    long long v14 = a4[1];
    long long v18 = *a4;
    long long v19 = v14;
    LiSceneDrawer::render_zsort((uint64_t)a1, (uint64_t)v15, (uint64_t)&v24);
    LiContext::~LiContext((LiContext *)v15);
  }
  v15[0] = (void **)v26;
  std::vector<LiLightSet>::__destroy_vector::operator()[abi:ne180100](v15);
  std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy((uint64_t)&v24, v25[0]);
}

void sub_1B7B410D4(_Unwind_Exception *a1)
{
  LiSceneDrawer::PaintersAlgorithmSceneData::~PaintersAlgorithmSceneData((PCSharedCount **)(v1 - 120));
  _Unwind_Resume(a1);
}

void LiContext::setMaterialFilters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 520;
  int v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 528) >= v5) {
    int v6 = *(_DWORD *)(a1 + 528);
  }
  else {
    int v6 = (2 * v5) | 1;
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      double v9 = (const PCSharedCount *)(*(void *)(a2 + 16) + v7);
      int v10 = (PC_Sp_counted_base **)(*(void *)(a1 + 536) + v7);
      char *v10 = v9->var0;
      PCSharedCount::PCSharedCount(&v11, v9 + 1);
      PCSharedCount::operator=((uint64_t *)v10 + 1, (uint64_t *)&v11);
      PCSharedCount::~PCSharedCount(&v11);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(int *)(a2 + 12));
  }
}

void sub_1B7B411B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void LiSceneDrawer::render_zsort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    uint64_t v3 = a3;
    uint64_t v4 = (ProShade::UniformData *)ProGL::GL::GL((ProGL::GL *)v92);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZL31should_do_INTEL_6000_workaroundRN5ProGL2GLE_block_invoke;
    block[3] = &__block_descriptor_tmp_30;
    block[4] = v92;
    if (should_do_INTEL_6000_workaround(ProGL::GL &)::predicate != -1) {
      dispatch_once(&should_do_INTEL_6000_workaround(ProGL::GL &)::predicate, block);
    }
    int v5 = should_do_INTEL_6000_workaround(ProGL::GL &)::isINTEL6000;
    CurrentContextUniformData = (uint64_t *)ProShade::UniformData::getCurrentContextUniformData(v4);
    LiFBOCompositor::LiFBOCompositor((LiFBOCompositor *)block, *(_DWORD *)(v3 + 52));
    float64x2_t v89 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v72 = _Q0;
    long long v90 = _Q0;
    v88[0] = 0;
    v88[1] = 0;
    double v87 = (uint64_t *)v88;
    int v76 = v5 ^ 1;
    PCSharedCount v11 = (void *)(v3 + 8);
    if (v3 + 8 == *(void *)v3)
    {
      uint64_t v13 = a2;
    }
    else
    {
      long long v12 = (void *)(v3 + 8);
      uint64_t v13 = a2;
      do
      {
        v82.f64[0] = 0.0;
        long long v14 = (void *)*v12;
        double v15 = (void *)*v12;
        uint64_t v16 = v12;
        if (*v12)
        {
          do
          {
            char v17 = v15;
            double v15 = (void *)v15[1];
          }
          while (v15);
        }
        else
        {
          do
          {
            char v17 = (void *)v16[2];
            _ZF = *v17 == (void)v16;
            uint64_t v16 = v17;
          }
          while (_ZF);
        }
        double v18 = *((double *)v17 + 4);
        v82.f64[0] = v18;
        long long v19 = v14;
        long long v20 = v12;
        if (v14)
        {
          do
          {
            long long v21 = v19;
            long long v19 = (void *)v19[1];
          }
          while (v19);
        }
        else
        {
          do
          {
            long long v21 = (void *)v20[2];
            _ZF = *v21 == (void)v20;
            long long v20 = v21;
          }
          while (_ZF);
        }
        long long v22 = v12;
        if (v14)
        {
          do
          {
            long long v23 = v14;
            long long v14 = (void *)v14[1];
          }
          while (v14);
        }
        else
        {
          do
          {
            long long v23 = (void *)v22[2];
            _ZF = *v23 == (void)v22;
            long long v22 = v23;
          }
          while (_ZF);
        }
        BOOL v24 = *((unsigned char *)v23 + 584) == 0;
        unint64_t v25 = v88[0];
        if (!v88[0]) {
          goto LABEL_27;
        }
        unint64_t v26 = v88;
        do
        {
          uint64_t v27 = v25;
          float v28 = v26;
          double v29 = *((double *)v25 + 4);
          uint64_t v30 = v25 + 1;
          if (v29 >= v18)
          {
            uint64_t v30 = v27;
            unint64_t v26 = (void **)v27;
          }
          unint64_t v25 = (void *)*v30;
        }
        while (v25);
        if (v26 == v88) {
          goto LABEL_27;
        }
        if (v29 < v18) {
          uint64_t v27 = v28;
        }
        if (v18 < *((double *)v27 + 4))
        {
LABEL_27:
          v79[0].int var0 = (PC_Sp_counted_base *)&v82;
          *(_OWORD *)(std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, v82.f64, (uint64_t)&std::piecewise_construct, v79)+ 7) = v72;
        }
        v79[0].int var0 = (PC_Sp_counted_base *)&v82;
        uint64_t v31 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, v82.f64, (uint64_t)&std::piecewise_construct, v79);
        uint64_t v32 = (float64x2_t *)(v21 + 69);
        PCRect<double>::operator|=((float64x2_t *)(v31 + 5), v32);
        PCRect<double>::operator|=(&v89, v32);
        unint64_t v33 = (void *)*v12;
        if (*v12)
        {
          do
          {
            double v34 = v33;
            unint64_t v33 = (void *)v33[1];
          }
          while (v33);
        }
        else
        {
          do
          {
            double v34 = (void *)v12[2];
            _ZF = *v34 == (void)v12;
            long long v12 = v34;
          }
          while (_ZF);
        }
        v76 &= v24;
        long long v12 = v34;
      }
      while (v34 != *(void **)v3);
    }
    long long v77 = (void **)(v13 + 592);
    int v35 = 1;
    long long v71 = (void *)(v3 + 8);
    while (1)
    {
      int v78 = v35;
      LiFBOCompositor::beginDrawToFBO((LiFBOCompositor *)block);
      double v86 = 0.0;
      uint64_t v36 = *v11;
      float v37 = v11;
      if (*v11)
      {
        do
        {
          uint64_t v38 = v36;
          uint64_t v36 = *(void *)(v36 + 8);
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v38 = v37[2];
          _ZF = *(void *)v38 == (void)v37;
          float v37 = (void *)v38;
        }
        while (_ZF);
      }
      double v86 = *(double *)(v38 + 32);
      uint64_t v84 = 0;
      PCSharedCount::PCSharedCount(&v85);
      PCPtr<LiImageSource>::reset(&v84);
      float64x2_t v82 = 0uLL;
      long long v83 = v72;
      if (v76)
      {
        glEnable(0xC11u);
        glScissor((int)v89.f64[0], (int)v89.f64[1], (int)*(double *)&v90, (int)*((double *)&v90 + 1));
      }
      if (v11 != *(void **)v3) {
        break;
      }
LABEL_92:
      PCSharedCount v11 = v71;
      if (v76)
      {
        glEnable(0xC11u);
        v79[0].int var0 = (PC_Sp_counted_base *)&v86;
        uint64_t v70 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, &v86, (uint64_t)&std::piecewise_construct, v79);
        PCRect<double>::operator|=(&v82, (float64x2_t *)(v70 + 5));
        glScissor((int)v82.f64[0], (int)v82.f64[1], (int)*(double *)&v83, (int)*((double *)&v83 + 1));
      }
      LiFBOCompositor::endDrawToFBO((LiFBOCompositor *)block);
      if (v76) {
        glDisable(0xC11u);
      }
      PCSharedCount::~PCSharedCount(&v85);
      int v35 = 0;
      if ((v78 & 1) == 0)
      {
        LiFBOCompositor::renderResults((LiFBOCompositor *)block);
        unbindAllTextures();
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v87, v88[0]);
        LiFBOCompositor::~LiFBOCompositor((LiFBOCompositor *)block);
        ProGL::GL::~GL((ProGL::GL *)v92);
        return;
      }
    }
    uint64_t v39 = -1;
    long long v40 = v71;
    while (1)
    {
      double v81 = 0.0;
      uint64_t v41 = *v40;
      uint64_t v42 = *v40;
      double v43 = v40;
      if (*v40)
      {
        do
        {
          uint64_t v44 = v42;
          uint64_t v42 = *(void *)(v42 + 8);
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v44 = v43[2];
          _ZF = *(void *)v44 == (void)v43;
          double v43 = (void *)v44;
        }
        while (_ZF);
      }
      double v81 = *(double *)(v44 + 32);
      double v45 = v40;
      if (v41)
      {
        do
        {
          uint64_t v46 = v41;
          uint64_t v41 = *(void *)(v41 + 8);
        }
        while (v41);
      }
      else
      {
        do
        {
          uint64_t v46 = v45[2];
          _ZF = *(void *)v46 == (void)v45;
          double v45 = (void *)v46;
        }
        while (_ZF);
      }
      double v47 = *(LiMaterial **)(v46 + 528);
      if (!v47) {
        throw_PCNullPointerException(1);
      }
      double Alpha = LiMaterial::getAlpha(v47);
      if (((v78 ^ (v50 * (Alpha * v49) < 1.0)) & 1) == 0) {
        goto LABEL_87;
      }
      if (v81 < v86)
      {
        v93[0] = &v81;
        double v51 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, &v81, (uint64_t)&std::piecewise_construct, v93);
        long long v52 = *(_OWORD *)(v51 + 7);
        *(_OWORD *)&v79[0].int var0 = *(_OWORD *)(v51 + 5);
        long long v80 = v52;
        v93[0] = &v86;
        uint64_t v53 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, &v86, (uint64_t)&std::piecewise_construct, v93);
        PCRect<double>::operator|=(&v82, (float64x2_t *)(v53 + 5));
        double v86 = v81;
        if ((v78 & 1) == 0 && PCRect<double>::overlaps((double *)v79, v82.f64))
        {
          if (v76)
          {
            glEnable(0xC11u);
            glScissor((int)v82.f64[0], (int)v82.f64[1], (int)*(double *)&v83, (int)*((double *)&v83 + 1));
          }
          LiFBOCompositor::endDrawToFBO((LiFBOCompositor *)block);
          if (v76) {
            glDisable(0xC11u);
          }
          long long v83 = v72;
          LiFBOCompositor::beginDrawToFBO((LiFBOCompositor *)block);
        }
      }
      uint64_t v54 = *(ProShade::ProgramBase **)(v46 + 512);
      if (!v54) {
        throw_PCNullPointerException(1);
      }
      if (!ProShade::ProgramBase::id(v54)) {
        goto LABEL_87;
      }
      LiGL::useProgram(v77, *(ProShade::Program **)(v46 + 512));
      uint64_t v55 = *(ProShade::Program **)(v46 + 512);
      if (!v55) {
        throw_PCNullPointerException(1);
      }
      UniformWorkspace = (__CFString **)ProShade::Program::getUniformWorkspace(v55);
      uint64_t v57 = (PCString *)UniformWorkspace;
      uint64_t v58 = *(void *)(v46 + 528);
      if (v84)
      {
        if (!v58 || v84 != v58)
        {
LABEL_73:
          ProGL::GL::GL((ProGL::GL *)v79);
          should_do_NVIDIA_gpureset_workaround((ProGL::GL *)v79);
          ProGL::GL::~GL((ProGL::GL *)v79);
          long long v59 = *(LiMaterial ***)(v46 + 528);
          if (!v59) {
            throw_PCNullPointerException(1);
          }
          LiMaterial::setUniforms(v59, *(const LiTextureCoordinator **)(a1 + 840));
          uint64_t v84 = *(void *)(v46 + 528);
          PCSharedCount::PCSharedCount(v79, (const PCSharedCount *)(v46 + 536));
          PCSharedCount::operator=((uint64_t *)&v85, (uint64_t *)v79);
          PCSharedCount::~PCSharedCount(v79);
        }
      }
      else if (v58)
      {
        goto LABEL_73;
      }
      uint64_t v60 = *(void *)(v46 + 544);
      if (v39 != v60)
      {
        uint64_t v61 = v3;
        uint64_t v62 = *(void *)(v3 + 24) + 32 * v60;
        LODWORD(v63) = *(_DWORD *)(v62 + 12);
        if (v63)
        {
          uint64_t v64 = 0;
          unint64_t v65 = 0;
          do
          {
            if ((v65 & 0x80000000) != 0 || (int)v63 <= (int)v65) {
              PCArray_base::badIndex((PCArray_base *)UniformWorkspace);
            }
            UniformWorkspace = LiSceneDrawer::setupLight((LiSceneDrawer *)UniformWorkspace, (const LiLight *)(*(void *)(v62 + 16) + 944 * SHIDWORD(v64)));
            ++v65;
            unint64_t v63 = *(int *)(v62 + 12);
            v64 += 0x100000000;
          }
          while (v65 < v63);
        }
        uint64_t v13 = a2;
        LiContext::setLights(a2, v62);
        uint64_t v39 = v60;
        uint64_t v3 = v61;
      }
      uint64_t v66 = *(ProShade::Program **)(v46 + 512);
      if (!v66) {
        throw_PCNullPointerException(1);
      }
      uint64_t v67 = ProShade::Program::bindTextures(v66);
      *(_DWORD *)(v13 + 432) = *(_DWORD *)(v46 + 472);
      LiSceneDrawer::setMaterialUniforms(v67, v13, v46 + 40);
      ProShade::UniformData::setWorkspaceGlobals(CurrentContextUniformData, v57);
      ProShade::UniformWorkspace::computeAllOutputs((uint64_t)v57);
      ProShade::UniformWorkspace::sendChangedUniforms((uint64_t **)v57);
      (*(void (**)(void, uint64_t))(**(void **)(v46 + 504) + 152))(*(void *)(v46 + 504), v13);
      LiGL::useProgram(v77, 0);
LABEL_87:
      long long v68 = (void *)*v40;
      if (*v40)
      {
        do
        {
          long long v69 = v68;
          long long v68 = (void *)v68[1];
        }
        while (v68);
      }
      else
      {
        do
        {
          long long v69 = (void *)v40[2];
          _ZF = *v69 == (void)v40;
          long long v40 = v69;
        }
        while (_ZF);
      }
      long long v40 = v69;
      if (v69 == *(void **)v3) {
        goto LABEL_92;
      }
    }
  }
}

void sub_1B7B419F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount a21)
{
  PCSharedCount::~PCSharedCount(v23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v24, v24[1]);
  LiFBOCompositor::~LiFBOCompositor((LiFBOCompositor *)&v25);
  ProGL::GL::~GL((ProGL::GL *)(v21 - 160));
  _Unwind_Resume(a1);
}

void LiSceneDrawer::PaintersAlgorithmSceneData::~PaintersAlgorithmSceneData(PCSharedCount **this)
{
  uint64_t v2 = (void **)(this + 3);
  std::vector<LiLightSet>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy((uint64_t)this, this[1]);
}

void LiSceneDrawer::traverseAndRender(uint64_t a1, LiSceneObject *a2, uint64_t a3, long long *a4, void *a5, uint64_t a6, uint64_t a7)
{
  LiContext::LiContext((LiContext *)v25);
  char v27 = *(unsigned char *)(a1 + 476);
  LiClipSet::operator=((uint64_t)v26, a3);
  v26[9] = *a5;
  LiContext::setMaterialFilters((uint64_t)v25, a6);
  long long v14 = a4[3];
  long long v30 = a4[2];
  long long v31 = v14;
  long long v15 = a4[5];
  long long v32 = a4[4];
  long long v33 = v15;
  long long v16 = a4[1];
  long long v28 = *a4;
  long long v29 = v16;
  LiSceneDrawer::setupLights((LiSceneDrawer *)a1, a2, (LiLightSet *)(a1 + 760));
  LiContext::setLights((uint64_t)v25, a1 + 760);
  unint64_t v17 = *(void *)(a7 + 32);
  if (v17 >= *(void *)(a7 + 40))
  {
    uint64_t v18 = std::vector<LiLightSet>::__push_back_slow_path<LiLightSet const&>((uint64_t *)(a7 + 24), a1 + 760);
  }
  else
  {
    std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>(a7 + 40, *(void *)(a7 + 32), a1 + 760);
    uint64_t v18 = v17 + 32;
    *(void *)(a7 + 32) = v17 + 32;
  }
  *(void *)(a7 + 32) = v18;
  uint64_t v23 = 0;
  PCSharedCount::PCSharedCount(&v24);
  if (*(unsigned char *)(a1 + 476)) {
    operator new();
  }
  LiSceneDrawer::traverseObject(a1, (uint64_t)v25, (uint64_t)a2, a3, (uint64_t)a4, a1 + 8, 1, a7);
  if (!*(unsigned char *)(a7 + 48)) {
    LiSceneDrawer::render((LiSceneDrawer *)a1, (LiContext *)v25);
  }
  uint64_t v19 = *(void *)(a1 + 848);
  for (uint64_t i = *(void *)(a1 + 856); v19 != i; v19 += 472)
  {
    LiSceneDrawer::LiSceneDrawer((LiSceneDrawer *)&v22, (const LiSceneDrawer *)a1);
    __n128 v21 = LiSceneDrawer::setDrawAttrs((uint64_t)&v22, v19 + 8);
    if (*(unsigned char *)(*(void *)v19 + 644)) {
      LiSceneDrawer::setLights((uint64_t)&v22, a1 + 760);
    }
    LiSceneDrawer::traverseAndRender(&v22, v21);
    LiSceneDrawer::~LiSceneDrawer((LiSceneDrawer *)&v22);
  }
  PCSharedCount::~PCSharedCount(&v24);
  LiContext::~LiContext((LiContext *)v25);
}

void sub_1B7B41E8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  LiContext::~LiContext((LiContext *)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::traverseObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14 = a1;
  v213[24] = *(_OWORD **)MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 478))
  {
    if (!*(unsigned char *)(a3 + 552)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a3 + 553))
  {
    return;
  }
  int v15 = *(unsigned __int8 *)(a1 + 476);
  long long v16 = (_OWORD *)(a6 + 436);
  long long v17 = *(_OWORD *)(a6 + 436);
  *(_OWORD *)(a2 + 575) = *(_OWORD *)(a6 + 447);
  *(_OWORD *)(a2 + 564) = v17;
  if (!v15)
  {
    uint64_t v19 = v18;
    if (v18)
    {
      double v149 = 0.0;
      PCSharedCount::PCSharedCount(v150);
      LiSceneDrawer::buildProgram((uint64_t)v19, (LiContext *)a2, (uint64_t)&v149);
      PCSharedCount::PCSharedCount(v132);
      v132[1].int var0 = 0;
      PCSharedCount::PCSharedCount(&v132[2]);
      *(double *)&v131.int var0 = v149;
      PCSharedCount::PCSharedCount((PCSharedCount *)__src, v150);
      PCSharedCount::operator=((uint64_t *)v132, (uint64_t *)__src);
      PCSharedCount::~PCSharedCount((PCSharedCount *)__src);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v132[1], v19);
      if (*(unsigned char *)(v14 + 928))
      {
        std::vector<LiSceneDrawer::MaterialInfo>::__base_destruct_at_end[abi:ne180100](v14 + 872, *(void *)(v14 + 872));
        *(unsigned char *)(v14 + 928) = 0;
      }
      unint64_t v20 = *(void *)(v14 + 880);
      if (v20 >= *(void *)(v14 + 888))
      {
        uint64_t v21 = std::vector<LiSceneDrawer::MaterialInfo>::__push_back_slow_path<LiSceneDrawer::MaterialInfo const&>((uint64_t *)(v14 + 872), &v131);
      }
      else
      {
        std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>(v14 + 888, *(PCSharedCount **)(v14 + 880), &v131);
        uint64_t v21 = v20 + 32;
        *(void *)(v14 + 88std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v20 + 32;
      }
      *(void *)(v14 + 88std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v21;
      *(void *)__src = &v149;
      float v37 = std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__emplace_unique_key_args<PCPtr<ProShade::Program>,std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(v14 + 792, (uint64_t)&v149, (uint64_t)&std::piecewise_construct, (const PCSharedCount **)__src);
      *(_DWORD *)__src = v19;
      *(void *)&__src[8] = v19;
      uint64_t v38 = v37[6];
      v213[0] = __src;
      uint64_t v39 = std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__emplace_unique_key_args<LiSceneDrawer::ByMaterial::MaterialKey,std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(v38, (int *)__src, (uint64_t)&std::piecewise_construct, v213);
      unsigned int v40 = (*(uint64_t (**)(PCShared_base *))(*(void *)v19 + 152))(v19);
      int v41 = 0;
      LODWORD(v213[0]) = 0;
      uint64_t v42 = (uint64_t **)(v14 + 816);
      do
      {
        if ((v40 >> v41))
        {
          *(void *)__src = v213;
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v42, (int *)v213, (uint64_t)&std::piecewise_construct, (_DWORD **)__src)[5] = v39 + 6;
          int v41 = (int)v213[0];
        }
        LODWORD(v213[0]) = v41 + 1;
      }
      while (v41++ < 8);
      PCSharedCount::~PCSharedCount(&v132[2]);
      PCSharedCount::~PCSharedCount(v132);
      uint64_t v44 = v150;
      goto LABEL_24;
    }
  }
  v150[4].int var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  double v149 = 1.0;
  memset(v150, 0, 32);
  long long v151 = 0u;
  long long v152 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  uint64_t v153 = 0x3FF0000000000000;
  uint64_t v157 = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  v156[0] = _Q1;
  memset(&v156[1], 0, 32);
  long long v158 = 0u;
  long long v159 = 0u;
  long long v162 = 0u;
  long long v161 = 0u;
  char v27 = (char *)v163 + 8;
  uint64_t v170 = 0x3FF0000000000000;
  uint64_t v167 = 0x3FF0000000000000;
  uint64_t v160 = 0x3FF0000000000000;
  uint64_t v164 = 0x3FF0000000000000;
  long long v128 = _Q1;
  v163[0] = _Q1;
  memset(&v163[1], 0, 32);
  long long v165 = 0u;
  long long v166 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  v174[4] = 0;
  float64x2_t v171 = 0u;
  float64x2_t v172 = 0u;
  float64x2_t v173 = 0u;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v174[8]);
  char v129 = a7;
  *(_OWORD *)&v174[4] = *v16;
  *(_OWORD *)&v174[15] = *(_OWORD *)(a6 + 447);
  PCMatrix44Tmpl<double>::operator*(a6, (long long *)(a3 + 8), (uint64_t)&v131);
  uint64_t v28 = 0;
  long long v29 = (float64x2_t *)(a3 + 408);
  long long v30 = (char *)v156 + 8;
  do
  {
    long long v31 = &v150[v28 - 1];
    long long v32 = *(_OWORD *)&v132[v28 + 1].var0;
    *(_OWORD *)&v31->int var0 = *(_OWORD *)((char *)&v131.var0 + v28 * 8);
    *(_OWORD *)&v31[2].int var0 = v32;
    v28 += 4;
  }
  while (v28 != 16);
  if (*(unsigned char *)(a3 + 264))
  {
    uint64_t v33 = a3 + 136;
    if ((_OWORD *)(a3 + 136) != (_OWORD *)((char *)v156 + 8))
    {
      for (uint64_t i = 0; i != 8; i += 2)
      {
        int v35 = (_OWORD *)((char *)&v156[i] + 8);
        long long v36 = *(_OWORD *)(v33 + i * 16 + 16);
        *int v35 = *(_OWORD *)(v33 + i * 16);
        v35[1] = v36;
      }
    }
  }
  else
  {
    PCMatrix44Tmpl<double>::operator*(a6 + 128, (long long *)(a3 + 8), (uint64_t)&v131);
    for (unint64_t j = 0; j != 16; j += 4)
    {
      uint64_t v46 = (_OWORD *)((char *)&v156[j / 2] + 8);
      long long v47 = *(_OWORD *)&v132[j + 1].var0;
      *uint64_t v46 = *(_OWORD *)((char *)&v131.var0 + j * 8);
      v46[1] = v47;
    }
    long long v29 = (float64x2_t *)(a3 + 408);
  }
  if (*(unsigned char *)(a3 + 400))
  {
    uint64_t v48 = a3 + 272;
    if ((_OWORD *)(a3 + 272) != (_OWORD *)((char *)v163 + 8))
    {
      for (uint64_t k = 0; k != 8; k += 2)
      {
        double v50 = (_OWORD *)((char *)&v163[k] + 8);
        long long v51 = *(_OWORD *)(v48 + k * 16 + 16);
        _OWORD *v50 = *(_OWORD *)(v48 + k * 16);
        v50[1] = v51;
      }
    }
  }
  else
  {
    uint64_t v52 = v14;
    uint64_t v53 = a4;
    uint64_t v54 = v29;
    PCMatrix44Tmpl<double>::operator*(a6 + 256, (long long *)(a3 + 8), (uint64_t)&v131);
    unint64_t v55 = 0;
    long long v29 = v54;
    do
    {
      uint64_t v56 = (_OWORD *)((char *)&v163[v55 / 2] + 8);
      long long v57 = *(_OWORD *)&v132[v55 + 1].var0;
      _OWORD *v56 = *(_OWORD *)((char *)&v131.var0 + v55 * 8);
      v56[1] = v57;
      v55 += 4;
    }
    while (v55 != 16);
    a4 = v53;
    uint64_t v14 = v52;
  }
  if (*(unsigned char *)(a3 + 424)) {
    float64x2_t v171 = *(float64x2_t *)(a3 + 408);
  }
  else {
    float64x2_t v171 = vaddq_f64(*(float64x2_t *)(a6 + 384), *v29);
  }
  if (*(unsigned char *)(a3 + 448)) {
    float64x2_t v58 = *(float64x2_t *)(a3 + 432);
  }
  else {
    float64x2_t v58 = vaddq_f64(*(float64x2_t *)(a6 + 400), *(float64x2_t *)(a3 + 432));
  }
  float64x2_t v172 = v58;
  if (*(unsigned char *)(a3 + 472)) {
    float64x2_t v59 = *(float64x2_t *)(a3 + 456);
  }
  else {
    float64x2_t v59 = vaddq_f64(*(float64x2_t *)(a6 + 416), v29[3]);
  }
  float64x2_t v173 = v59;
  if (*(unsigned char *)(a3 + 480)) {
    uint64_t v60 = (_DWORD *)LiSceneObject::index((LiSceneObject *)a3);
  }
  else {
    uint64_t v60 = (_DWORD *)(a6 + 432);
  }
  *(_DWORD *)v174 = *v60;
  if (v61)
  {
    uint64_t v62 = v61;
    v148[1] = xmmword_1B7E736F0;
    v148[2] = xmmword_1B7E736F0;
    v148[0] = xmmword_1B7E736F0;
    (*(void (**)(void *, _OWORD *))(*(void *)v61 + 72))(v61, v148);
    if (LiClipSet::containsBox(a4, (uint64_t *)v148, &v149))
    {
      int v147 = 0;
      int v147 = (*(uint64_t (**)(void *))(*(void *)v62 + 136))(v62);
      *(double *)&v131.int var0 = COERCE_DOUBLE(&v147);
      unint64_t v63 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v14 + 816), &v147, (uint64_t)&std::piecewise_construct, &v131)[5];
      if (v63)
      {
        uint64_t v64 = *v63;
        int v66 = *(_DWORD *)(*v63 + 8);
        int v65 = *(_DWORD *)(*v63 + 12);
        if (v66 <= v65) {
          int v67 = (2 * (v65 + 1)) | 1;
        }
        else {
          int v67 = v66;
        }
        PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(v64, v65 + 1, v67);
        uint64_t v68 = *(void *)(v64 + 16) + 472 * *(int *)(v64 + 12);
        long long v69 = (_OWORD *)(v68 - 472);
        *(void *)(v68 - 8) = v62;
        if (&v149 != (double *)(v68 - 472))
        {
          uint64_t v70 = 0;
          long long v71 = &v149;
          long long v72 = v69;
          do
          {
            for (uint64_t m = 0; m != 4; ++m)
              *(double *)((char *)v72 + m * 8) = v71[m];
            ++v70;
            v72 += 2;
            v71 += 4;
          }
          while (v70 != 4);
          uint64_t v74 = 0;
          long long v75 = v69 + 8;
          do
          {
            for (uint64_t n = 0; n != 32; n += 8)
              *(void *)((char *)v75 + n) = *(void *)&v30[n];
            ++v74;
            v75 += 2;
            v30 += 32;
          }
          while (v74 != 4);
          uint64_t v77 = 0;
          int v78 = v69 + 16;
          do
          {
            for (iuint64_t i = 0; ii != 32; ii += 8)
              *(void *)((char *)v78 + ii) = *(void *)&v27[ii];
            ++v77;
            v78 += 2;
            v27 += 32;
          }
          while (v77 != 4);
        }
        v69[24] = v171;
        float64x2_t v80 = v172;
        float64x2_t v81 = v173;
        long long v82 = *(_OWORD *)v174;
        *(_OWORD *)((char *)v69 + 447) = *(_OWORD *)&v174[15];
        v69[26] = v81;
        v69[27] = v82;
        v69[25] = v80;
      }
      if (*(unsigned char *)(a8 + 48))
      {
        PCMatrix44Tmpl<double>::operator*(v14 + 488, (long long *)&v149, (uint64_t)v146);
        *(double *)&v131.int var0 = 0.0;
        v132[0].int var0 = 0;
        v132[1].int var0 = 0;
        v132[2].int var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
        long long v144 = 0u;
        long long v145 = 0u;
        PCMatrix44Tmpl<double>::transform<double>((double *)v146, (double *)&v131, (double *)&v144);
        double v143 = fabs(*(double *)&v145);
        long long v141 = xmmword_1B7E736F0;
        long long v142 = xmmword_1B7E736F0;
        long long v140 = xmmword_1B7E736F0;
        (*(void (**)(void *, long long *))(*(void *)v62 + 72))(v62, &v140);
        uint64_t v83 = 0;
        int v84 = 0;
        v213[0] = (_OWORD *)v140;
        v213[1] = (_OWORD *)v141;
        v213[2] = (_OWORD *)v142;
        v213[3] = *((_OWORD **)&v140 + 1);
        v213[4] = (_OWORD *)v141;
        v213[5] = (_OWORD *)v142;
        v213[6] = *((_OWORD **)&v140 + 1);
        v213[7] = *((_OWORD **)&v141 + 1);
        v213[8] = (_OWORD *)v142;
        v213[9] = (_OWORD *)v140;
        v213[10] = *((_OWORD **)&v141 + 1);
        v213[11] = (_OWORD *)v142;
        v213[12] = (_OWORD *)v140;
        v213[13] = (_OWORD *)v141;
        v213[14] = *((_OWORD **)&v142 + 1);
        v213[15] = *((_OWORD **)&v140 + 1);
        v213[16] = (_OWORD *)v141;
        v213[17] = *((_OWORD **)&v142 + 1);
        v213[18] = *((_OWORD **)&v140 + 1);
        v213[19] = *((_OWORD **)&v141 + 1);
        double v85 = -1.0;
        v213[20] = *((_OWORD **)&v142 + 1);
        v213[21] = (_OWORD *)v140;
        double v86 = 0.0;
        double v87 = 0.0;
        v213[22] = *((_OWORD **)&v141 + 1);
        v213[23] = *((_OWORD **)&v142 + 1);
        double v88 = -1.0;
        do
        {
          project((uint64_t)&v213[v83], v146, v14 + 616, (void *)(v14 + 744), (float64x2_t *)&v131);
          int var0 = v131.var0;
          float64x2_t v89 = v132[0].var0;
          if (*(double *)&v132[1].var0 > 1.0) {
            ++v84;
          }
          if (v85 < 0.0 || v88 < 0.0)
          {
            double v88 = 0.0;
            double v85 = 0.0;
            double v87 = *(double *)&v132[0].var0;
            double v86 = *(double *)&v131.var0;
          }
          else
          {
            double v91 = v85 + v86;
            if (v86 > *(double *)&v131.var0) {
              double v86 = *(double *)&v131.var0;
            }
            if (v91 >= *(double *)&v131.var0) {
              *(double *)&int var0 = v91;
            }
            double v92 = v88 + v87;
            if (v87 > *(double *)&v132[0].var0) {
              double v87 = *(double *)&v132[0].var0;
            }
            if (v92 >= *(double *)&v132[0].var0) {
              *(double *)&float64x2_t v89 = v92;
            }
            double v85 = *(double *)&var0 - v86;
            double v88 = *(double *)&v89 - v87;
          }
          v83 += 3;
        }
        while (v83 != 24);
        BOOL v93 = (v84 - 1) < 7;
        long long v136 = 0;
        PCSharedCount::PCSharedCount(&v137);
        int v138 = 0;
        PCSharedCount::PCSharedCount(&v139);
        PCPtr<LiImageSource>::reset(&v138);
        if (*(unsigned char *)(v14 + 476))
        {
          long long v136 = *(PC_Sp_counted_base **)(v14 + 896);
          PCSharedCount::PCSharedCount(&v131, (const PCSharedCount *)(v14 + 904));
          PCSharedCount::operator=((uint64_t *)&v137, (uint64_t *)&v131);
          PCSharedCount::~PCSharedCount(&v131);
          int v138 = *(PC_Sp_counted_base **)(v14 + 912);
          PCSharedCount::PCSharedCount(&v131, (const PCSharedCount *)(v14 + 920));
          PCSharedCount::operator=((uint64_t *)&v139, (uint64_t *)&v131);
        }
        else
        {
          char v114 = (*(uint64_t (**)(void *))(*(void *)v62 + 136))(v62);
          v115 = *(const PCSharedCount **)(v14 + 872);
          v116 = *(const PCSharedCount **)(v14 + 880);
          if (v115 == v116)
          {
LABEL_88:
            uint64_t v176 = 0x3FF0000000000000;
            *(void *)__src = 0x3FF0000000000000;
            memset(&__src[8], 0, 32);
            long long v177 = 0u;
            long long v178 = 0u;
            long long v180 = 0u;
            long long v181 = 0u;
            uint64_t v179 = 0x3FF0000000000000;
            uint64_t v185 = 0x3FF0000000000000;
            long long v182 = v128;
            long long v183 = 0u;
            long long v184 = 0u;
            long long v186 = 0u;
            long long v187 = 0u;
            long long v190 = 0u;
            long long v189 = 0u;
            uint64_t v200 = 0x3FF0000000000000;
            uint64_t v197 = 0x3FF0000000000000;
            uint64_t v188 = 0x3FF0000000000000;
            uint64_t v194 = 0x3FF0000000000000;
            long long v191 = v128;
            long long v192 = 0u;
            long long v193 = 0u;
            long long v195 = 0u;
            long long v196 = 0u;
            long long v198 = 0u;
            long long v199 = 0u;
            v204[4] = 0;
            float64x2_t v201 = 0u;
            float64x2_t v202 = 0u;
            float64x2_t v203 = 0u;
            PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v204[8]);
            *(_DWORD *)&v204[24] = 1065353216;
            *(_WORD *)&v204[28] = 257;
            v204[30] = 0;
            v206 = 0;
            PCSharedCount::PCSharedCount(&v207);
            v208 = 0;
            PCSharedCount::PCSharedCount(v209);
            uint64_t v94 = 0;
            double v95 = v86 + -2.0;
            double v96 = v87 + -2.0;
            double v97 = v85 + 4.0;
            double v98 = v88 + 4.0;
            __asm { FMOV            V1.2D, #-1.0 }
            long long v210 = 0u;
            long long v211 = _Q1;
            v205 = v62;
            do
            {
              int v100 = &__src[v94 * 8];
              long long v101 = *(_OWORD *)&v150[v94 + 1].var0;
              *int v100 = *(_OWORD *)&v150[v94 - 1].var0;
              v100[1] = v101;
              v94 += 4;
            }
            while (v94 != 16);
            do
            {
              int v102 = &__src[v94 * 8];
              long long v103 = *(_OWORD *)&v150[v94 + 1].var0;
              *int v102 = *(_OWORD *)&v150[v94 - 1].var0;
              v102[1] = v103;
              v94 += 4;
            }
            while (v94 != 32);
            do
            {
              uint64_t v104 = &__src[v94 * 8];
              long long v105 = *(_OWORD *)&v150[v94 + 1].var0;
              *uint64_t v104 = *(_OWORD *)&v150[v94 - 1].var0;
              v104[1] = v105;
              v94 += 4;
            }
            while (v94 != 48);
            float64x2_t v203 = v173;
            *(_OWORD *)v204 = *(_OWORD *)v174;
            *(_OWORD *)&v204[15] = *(_OWORD *)&v174[15];
            float64x2_t v201 = v171;
            float64x2_t v202 = v172;
            v206 = v136;
            PCSharedCount::PCSharedCount(&v131, &v137);
            PCSharedCount::operator=((uint64_t *)&v207, (uint64_t *)&v131);
            PCSharedCount::~PCSharedCount(&v131);
            v208 = v138;
            PCSharedCount::PCSharedCount(&v131, &v139);
            PCSharedCount::operator=((uint64_t *)v209, (uint64_t *)&v131);
            PCSharedCount::~PCSharedCount(&v131);
            v209[1].int var0 = (PC_Sp_counted_base *)(((uint64_t)(*(void *)(a8 + 32) - *(void *)(a8 + 24)) >> 5) - 1);
            *(double *)&long long v210 = v95;
            *((double *)&v210 + 1) = v96;
            *(double *)&long long v211 = v97;
            *((double *)&v211 + 1) = v98;
            BOOL v212 = v93;
            std::pair<double,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double const&,LiSceneDrawer::ObjectDrawInfo&,0>((uint64_t)&v131, &v143, __src);
            std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__emplace_multi<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>(a8, (uint64_t)&v131);
            PCSharedCount::~PCSharedCount(&v135);
            PCSharedCount::~PCSharedCount(&v134);
            *(unsigned char *)(v14 + 928) = 1;
            PCSharedCount::~PCSharedCount(v209);
            PCSharedCount::~PCSharedCount(&v207);
            PCSharedCount::~PCSharedCount(&v139);
            uint64_t v44 = &v137;
LABEL_24:
            PCSharedCount::~PCSharedCount(v44);
            return;
          }
          int v117 = 1 << v114;
          while (1)
          {
            v118 = v115[2].var0;
            if (!v118) {
              throw_PCNullPointerException(1);
            }
            if (((*(unsigned int (**)(PC_Sp_counted_base *))(*(void *)v118 + 152))(v118) & v117) != 0) {
              break;
            }
            v115 += 4;
            if (v115 == v116) {
              goto LABEL_88;
            }
          }
          long long v136 = v115->var0;
          PCSharedCount::PCSharedCount(&v131, v115 + 1);
          PCSharedCount::operator=((uint64_t *)&v137, (uint64_t *)&v131);
          PCSharedCount::~PCSharedCount(&v131);
          int v138 = v115[2].var0;
          PCSharedCount::PCSharedCount(&v131, v115 + 3);
          PCSharedCount::operator=((uint64_t *)&v139, (uint64_t *)&v131);
        }
        PCSharedCount::~PCSharedCount(&v131);
        goto LABEL_88;
      }
    }
  }
  else
  {
    if (v106)
    {
      float64x2_t v107 = v106;
      if (!*(unsigned char *)(v14 + 476)
        || (uint64_t v108 = *(void *)(v14 + 480), v108 == -1)
        || v106[645]
        || v108 == *((_DWORD *)v106 + 130))
      {
        uint64_t v109 = (*(uint64_t (**)(unsigned char *))(*(void *)v106 + 248))(v106);
        if ((v129 & 1) != 0 || v107[644] && v107[645])
        {
          if (*(unsigned char *)(v14 + 476) || *(_DWORD *)(v14 + 472) == 1)
          {
            if (!*(unsigned char *)(v109 + 24)) {
              return;
            }
          }
          else if (*(unsigned char *)(v109 + 26))
          {
            return;
          }
          if (*(unsigned char *)v109)
          {
            long long v110 = *(_OWORD *)v109;
            *(_OWORD *)&v174[15] = *(_OWORD *)(v109 + 11);
            *(_OWORD *)&v174[4] = v110;
          }
          int v111 = (*(uint64_t (**)(unsigned char *))(*(void *)v107 + 136))(v107);
          if (v111 >= 1)
          {
            uint64_t v112 = 0;
            do
            {
              uint64_t v113 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v107 + 144))(v107, v112);
              LiSceneDrawer::traverseObject(v14, a2, v113, a4, a5, &v149, 0, a8);
              uint64_t v112 = (v112 + 1);
            }
            while (v111 != v112);
          }
        }
        else
        {
          v119 = *(PC_Sp_counted_base **)(a6 + 384);
          v120 = *(PC_Sp_counted_base **)(a6 + 392);
          v121 = *(PC_Sp_counted_base **)(a6 + 400);
          int v122 = *(PC_Sp_counted_base **)(a6 + 408);
          int v123 = *(PC_Sp_counted_base **)(a6 + 416);
          int v124 = *(PC_Sp_counted_base **)(a6 + 424);
          *(_OWORD *)__src = *(_OWORD *)(a6 + 432);
          *(_OWORD *)&__src[15] = *(_OWORD *)(a6 + 447);
          if (*(unsigned char *)v109)
          {
            *(_OWORD *)&__src[4] = *(_OWORD *)v109;
            *(_OWORD *)&__src[15] = *(_OWORD *)(v109 + 11);
          }
          v131.int var0 = (PC_Sp_counted_base *)v107;
          memcpy(v132, (const void *)a6, 0x180uLL);
          v132[48].int var0 = v119;
          v132[49].int var0 = v120;
          v132[50].int var0 = v121;
          v132[51].int var0 = v122;
          v132[52].int var0 = v123;
          v132[53].int var0 = v124;
          v133[0] = *(_OWORD *)__src;
          *(_OWORD *)((char *)v133 + 15) = *(_OWORD *)&__src[15];
          unint64_t v125 = *(void *)(v14 + 856);
          if (v125 >= *(void *)(v14 + 864))
          {
            uint64_t v127 = std::vector<LiSceneDrawer::DeferredGroup>::__push_back_slow_path<LiSceneDrawer::DeferredGroup>((uint64_t *)(v14 + 848), &v131);
          }
          else
          {
            *(double *)unint64_t v125 = *(double *)&v107;
            memcpy((void *)(v125 + 8), v132, 0x180uLL);
            *(void *)(v125 + 392) = v119;
            *(void *)(v125 + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v120;
            *(void *)(v125 + 408) = v121;
            *(void *)(v125 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = v122;
            *(void *)(v125 + 424) = v123;
            *(void *)(v125 + 432) = v124;
            long long v126 = *(_OWORD *)((char *)v133 + 15);
            *(_OWORD *)(v125 + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v133[0];
            *(_OWORD *)(v125 + 455) = v126;
            uint64_t v127 = v125 + 472;
          }
          *(void *)(v14 + 85ProCore_Impl::PCNSRefImpl::release(this + 6) = v127;
        }
      }
    }
  }
}

void sub_1B7B42EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  PCSharedCount::~PCSharedCount(v12);
  PCSharedCount::~PCSharedCount(v11);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::render(LiSceneDrawer *this, LiContext *a2)
{
  CurrentContextUniformData = (uint64_t *)ProShade::UniformData::getCurrentContextUniformData(this);
  long long v29 = this;
  uint64_t v4 = (char *)*((void *)this + 99);
  int v5 = (char *)this + 800;
  if (v4 != v5)
  {
    int v6 = (void **)((char *)a2 + 592);
    char v27 = v5;
    do
    {
      uint64_t v7 = (ProShade::ProgramBase *)*((void *)v4 + 4);
      if (v7 && ProShade::ProgramBase::id(v7))
      {
        LiGL::useProgram(v6, *((ProShade::Program **)v4 + 4));
        uint64_t v8 = (ProShade::Program *)*((void *)v4 + 4);
        if (!v8) {
          throw_PCNullPointerException(1);
        }
        uint64_t UniformWorkspace = ProShade::Program::getUniformWorkspace(v8);
        int v10 = (void *)*((void *)v4 + 6);
        PCSharedCount v11 = (void *)*v10;
        if ((void *)*v10 != v10 + 1)
        {
          long long v12 = (PCString *)UniformWorkspace;
          do
          {
            uint64_t v13 = *(unsigned int *)(v11[6] + 12);
            if (v13)
            {
              uint64_t v14 = (LiMaterial **)v11[5];
              uint64_t v33 = v14;
              if (v14) {
                int v15 = (PCShared_base *)((char *)v14 + *((void *)*v14 - 3));
              }
              else {
                int v15 = 0;
              }
              PCSharedCount::PCSharedCount(&v34, v15);
              if (!v33) {
                throw_PCNullPointerException(1);
              }
              LiMaterial::setUniforms(v33, *((const LiTextureCoordinator **)v29 + 105));
              long long v16 = (ProShade::Program *)*((void *)v4 + 4);
              if (!v16) {
                throw_PCNullPointerException(1);
              }
              ProShade::Program::bindTextures(v16);
              long long v17 = ProShade::UniformData::setWorkspaceGlobals(CurrentContextUniformData, v12);
              v32[0] = 0;
              v32[1] = 0;
              long long v31 = v32;
              if ((int)v13 >= 1)
              {
                uint64_t v18 = 0;
                uint64_t v19 = 464;
                do
                {
                  uint64_t v20 = v11[6];
                  if (v18 >= *(int *)(v20 + 12)) {
                    PCArray_base::badIndex((PCArray_base *)v17);
                  }
                  uint64_t v21 = *(void *)(v20 + 16);
                  LiSceneDrawer::setMaterialUniforms((uint64_t)v17, (uint64_t)a2, v21 + v19 - 464);
                  ProShade::UniformData::setWorkspaceGlobals((uint64_t *)&v31, v12);
                  *((_DWORD *)a2 + 108) = *(_DWORD *)(v21 + v19 - 32);
                  ProShade::UniformWorkspace::computeAllOutputs((uint64_t)v12);
                  ProShade::UniformWorkspace::sendChangedUniforms((uint64_t **)v12);
                  long long v17 = (uint64_t *)(*(uint64_t (**)(void, LiContext *))(**(void **)(v21 + v19) + 152))(*(void *)(v21 + v19), a2);
                  ++v18;
                  v19 += 472;
                }
                while (v13 != v18);
              }
              ProGL::GL::GL((ProGL::GL *)v30);
              should_do_NVIDIA_gpureset_workaround((ProGL::GL *)v30);
              ProGL::GL::~GL((ProGL::GL *)v30);
              std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v31, v32[0]);
              PCSharedCount::~PCSharedCount(&v34);
            }
            PCSharedCount v22 = (void *)v11[1];
            if (v22)
            {
              do
              {
                uint64_t v23 = v22;
                PCSharedCount v22 = (void *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                uint64_t v23 = (void *)v11[2];
                BOOL v24 = *v23 == (void)v11;
                PCSharedCount v11 = v23;
              }
              while (!v24);
            }
            PCSharedCount v11 = v23;
          }
          while (v23 != (void *)(*((void *)v4 + 6) + 8));
        }
        int v6 = (void **)((char *)a2 + 592);
        LiGL::useProgram((void **)a2 + 74, 0);
        int v5 = v27;
      }
      uint64_t v25 = (char *)*((void *)v4 + 1);
      if (v25)
      {
        do
        {
          unint64_t v26 = v25;
          uint64_t v25 = *(char **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          unint64_t v26 = (char *)*((void *)v4 + 2);
          BOOL v24 = *(void *)v26 == (void)v4;
          uint64_t v4 = v26;
        }
        while (!v24);
      }
      uint64_t v4 = v26;
    }
    while (v26 != v5);
  }
  unbindAllTextures();
}

void sub_1B7B434D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCSharedCount *a14)
{
}

void sub_1B7B434E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCSharedCount *a14)
{
}

void sub_1B7B434F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

__n128 LiSceneDrawer::setDrawAttrs(uint64_t a1, uint64_t a2)
{
  if (a1 + 8 != a2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = a2;
    uint64_t v4 = a1 + 8;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v4 + i) = *(void *)(v3 + i);
      ++v2;
      v4 += 32;
      v3 += 32;
    }
    while (v2 != 4);
    uint64_t v6 = 0;
    uint64_t v7 = a1 + 136;
    uint64_t v8 = a2 + 128;
    do
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v7 + j) = *(void *)(v8 + j);
      ++v6;
      v7 += 32;
      v8 += 32;
    }
    while (v6 != 4);
    uint64_t v10 = 0;
    uint64_t v11 = a1 + 264;
    uint64_t v12 = a2 + 256;
    do
    {
      for (uint64_t k = 0; k != 32; k += 8)
        *(void *)(v11 + k) = *(void *)(v12 + k);
      ++v10;
      v11 += 32;
      v12 += 32;
    }
    while (v10 != 4);
  }
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 384);
  __n128 result = *(__n128 *)(a2 + 400);
  long long v15 = *(_OWORD *)(a2 + 416);
  long long v16 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 455) = *(_OWORD *)(a2 + 447);
  *(_OWORD *)(a1 + 424) = v15;
  *(_OWORD *)(a1 + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v16;
  *(__n128 *)(a1 + 408) = result;
  return result;
}

void LiSceneDrawer::setLights(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 760;
  int v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 768) >= v5) {
    int v6 = *(_DWORD *)(a1 + 768);
  }
  else {
    int v6 = (2 * v5) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      LiLight::operator=(*(void *)(a1 + 776) + v7, *(void *)(a2 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a2 + 12));
  }
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a2 + 24);
}

uint64_t LiSceneDrawer::buildProgram(uint64_t a1, LiContext *a2, uint64_t a3)
{
  {
    PCMutex::PCMutex(&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex);
    __cxa_atexit((void (*)(void *))PCMutex::~PCMutex, &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex, &dword_1B73F3000);
  }
  {
    qword_1E9EE6150 = 0;
    qword_1E9EE6148 = 0;
    LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus = (uint64_t)&qword_1E9EE6148;
    __cxa_atexit((void (*)(void *))std::map<PCHash128,BOOL>::~map[abi:ne180100], &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, &dword_1B73F3000);
  }
  (*(void (**)(PCSharedCount *__return_ptr, uint64_t))(*(void *)a1 + 168))(v20, a1);
  uint64_t v18 = &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex;
  PCMutex::lock(&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex);
  char v19 = 1;
  if (!a3)
  {
    uint64_t v10 = std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>((uint64_t)&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, (const PCHash128 *)v20);
    if (v10 != &qword_1E9EE6148)
    {
      BOOL v11 = 0;
      a3 = *((unsigned char *)v10 + 44) != 0;
      uint64_t v12 = &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex;
      if (!&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex) {
        return a3;
      }
      goto LABEL_19;
    }
  }
  int var0 = 0;
  PCSharedCount::PCSharedCount(&v17);
  int v6 = 0;
  char v7 = 1;
  while (1)
  {
    char v8 = v7;
    LiMaterial::getProgram(a1, a2, v6, (uint64_t)&v14);
    int var0 = v14.var0;
    PCSharedCount::PCSharedCount(&v21, &v15);
    PCSharedCount::operator=((uint64_t *)&v17, (uint64_t *)&v21);
    PCSharedCount::~PCSharedCount(&v21);
    PCSharedCount::~PCSharedCount(&v15);
    double v9 = var0;
    if (!var0) {
      throw_PCNullPointerException(1);
    }
    *((_DWORD *)var0 + 328) = v6;
    (*(void (**)(PC_Sp_counted_base *))(*(void *)v9 + 16))(v9);
    if (!var0)
    {
LABEL_10:
      v14.int var0 = (PC_Sp_counted_base *)v20;
      *((unsigned char *)std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>((uint64_t **)&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, (const PCHash128 *)v20, (uint64_t)&std::piecewise_construct, &v14)+ 44) = 0;
      if (a3)
      {
        *(void *)a3 = var0;
        PCSharedCount::PCSharedCount(&v14, &v17);
        PCSharedCount::operator=((uint64_t *)(a3 + 8), (uint64_t *)&v14);
        PCSharedCount::~PCSharedCount(&v14);
        a3 = 0;
      }
      goto LABEL_18;
    }
    if (*((_DWORD *)var0 + 66) == 1) {
      break;
    }
    char v7 = 0;
    int v6 = 1;
    if ((v8 & 1) == 0) {
      goto LABEL_10;
    }
  }
  if (a3)
  {
    *(void *)a3 = var0;
    PCSharedCount::PCSharedCount(&v14, &v17);
    PCSharedCount::operator=((uint64_t *)(a3 + 8), (uint64_t *)&v14);
    PCSharedCount::~PCSharedCount(&v14);
  }
  v14.int var0 = (PC_Sp_counted_base *)v20;
  a3 = 1;
  *((unsigned char *)std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>((uint64_t **)&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, (const PCHash128 *)v20, (uint64_t)&std::piecewise_construct, &v14)+ 44) = 1;
LABEL_18:
  PCSharedCount::~PCSharedCount(&v17);
  uint64_t v12 = v18;
  BOOL v11 = v19 == 0;
  if (v18)
  {
LABEL_19:
    if (!v11) {
      PCMutex::unlock(v12);
    }
  }
  return a3;
}

void sub_1B7B43A24()
{
}

void sub_1B7B43A38(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&v3);
  _Unwind_Resume(a1);
}

uint64_t std::map<PCHash128,BOOL>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void unbindAllTextures(void)
{
  ProGL::GL::GL((ProGL::GL *)v0);
  glActiveTexture(0x84C0u);
  ProGL::GL::~GL((ProGL::GL *)v0);
}

void sub_1B7B43AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

__n128 LiSceneDrawer::setMaterialUniforms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a3;
    uint64_t v5 = a2;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v5 + i) = *(void *)(v4 + i);
      ++v3;
      v5 += 32;
      v4 += 32;
    }
    while (v3 != 4);
  }
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a3 + 128;
    uint64_t v9 = a2 + 128;
    do
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v9 + j) = *(void *)(v8 + j);
      ++v7;
      v9 += 32;
      v8 += 32;
    }
    while (v7 != 4);
  }
  if (a2 != a3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a3 + 256;
    uint64_t v13 = a2 + 256;
    do
    {
      for (uint64_t k = 0; k != 32; k += 8)
        *(void *)(v13 + k) = *(void *)(v12 + k);
      ++v11;
      v13 += 32;
      v12 += 32;
    }
    while (v11 != 4);
  }
  *(_OWORD *)(a2 + 384) = *(_OWORD *)(a3 + 384);
  *(_OWORD *)(a2 + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a3 + 400);
  __n128 result = *(__n128 *)(a3 + 416);
  *(__n128 *)(a2 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = result;
  *(_DWORD *)(a2 + 432) = *(_DWORD *)(a3 + 432);
  return result;
}

void should_do_NVIDIA_gpureset_workaround(ProGL::GL *a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL36should_do_NVIDIA_gpureset_workaroundRN5ProGL2GLE_block_invoke;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = a1;
  if (should_do_NVIDIA_gpureset_workaround(ProGL::GL &)::predicate != -1) {
    dispatch_once(&should_do_NVIDIA_gpureset_workaround(ProGL::GL &)::predicate, block);
  }
}

BOOL PCRect<double>::overlaps(double *a1, double *a2)
{
  double v2 = a1[2];
  if (v2 < 0.0) {
    return 0;
  }
  double v3 = a1[3];
  if (v3 < 0.0) {
    return 0;
  }
  uint64_t v4 = 0;
  double v5 = a2[2];
  if (v5 >= 0.0)
  {
    double v6 = a2[3];
    if (v6 >= 0.0)
    {
      double v7 = v5 + *a2;
      if (v2 + *a1 > *a2 && *a1 < v7)
      {
        double v9 = a1[1];
        double v10 = a2[1];
        if (v9 < v10 + v6) {
          return v9 + v3 > v10;
        }
      }
      return 0;
    }
  }
  return v4;
}

uint64_t LiSceneDrawer::setIsolatedGroupToRender(uint64_t this, uint64_t a2)
{
  *(void *)(this + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a2;
  return this;
}

void std::vector<LiLightSet>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    double v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v4 - 32);
      while ((void *)v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy(a1, a2[1].var0);
    PCSharedCount::~PCSharedCount(a2 + 67);
    PCSharedCount::~PCSharedCount(a2 + 65);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__emplace_unique_key_args<LiSceneDrawer::ByMaterial::MaterialKey,std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
LABEL_8:
  }
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(a1, a4, (uint64_t)v9);
  int v5 = *a2;
  while (1)
  {
    while (1)
    {
      double v6 = (uint64_t *)v4;
      int v7 = *(_DWORD *)(v4 + 32);
      if (v7 >= v5) {
        break;
      }
      uint64_t v4 = *v6;
      if (!*v6) {
        goto LABEL_8;
      }
    }
    if (v5 >= v7) {
      return v6;
    }
    uint64_t v4 = v6[1];
    if (!v4) {
      goto LABEL_8;
    }
  }
}

void std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  uint64_t v6[2] = **a2;
  operator new();
}

void sub_1B7B43F38(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1129180;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1129180;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

void PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(uint64_t a1, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v29, "PCArray::resize");
    PCException::PCException(exception, &v29);
    *(void *)exceptiouint64_t n = &unk_1F1199218;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    int v6 = *(_DWORD *)(a1 + 12);
    if (a2 > v6)
    {
      uint64_t v7 = 472 * v6;
      int v8 = a2 - v6;
      __asm { FMOV            V0.2D, #1.0 }
      long long v27 = _Q0;
      do
      {
        uint64_t v14 = *(void *)(a1 + 16) + v7;
        *(void *)(v14 + 464) = 0;
        *(_OWORD *)(v14 + 448) = 0u;
        *(void *)(v14 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(v14 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)uint64_t v14 = 0x3FF0000000000000;
        *(_OWORD *)(v14 + 8) = 0u;
        *(_OWORD *)(v14 + 24) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 88) = 0u;
        *(_OWORD *)(v14 + 104) = 0u;
        *(void *)(v14 + 208) = 0x3FF0000000000000;
        *(void *)(v14 + 168) = 0x3FF0000000000000;
        *(_OWORD *)(v14 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v27;
        *(_OWORD *)(v14 + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v14 + 152) = 0u;
        *(_OWORD *)(v14 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 21ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v14 + 232) = 0u;
        *(void *)(v14 + 37ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
        *(void *)(v14 + 33ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
        *(void *)(v14 + 29ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
        *(_OWORD *)(v14 + 248) = v27;
        *(_OWORD *)(v14 + 264) = 0u;
        *(_OWORD *)(v14 + 28std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 32std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v14 + 344) = 0u;
        *(_OWORD *)(v14 + 36std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v14 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v14 + 440));
        *(_DWORD *)(v14 + 45ProCore_Impl::PCNSRefImpl::release(this + 6) = 1065353216;
        *(_WORD *)(v14 + 46std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 257;
        v7 += 472;
        *(unsigned char *)(v14 + 462) = 0;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    int v15 = *(_DWORD *)(a1 + 12);
    if (a2 >= v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = a2;
    }
    if ((int)v16 < 1)
    {
      LODWORD(v1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = 0;
      uint64_t v19 = v16;
      do
      {
        memcpy((void *)v18, (const void *)v17, 0x1B0uLL);
        long long v20 = *(_OWORD *)(v17 + 432);
        *(_OWORD *)(v18 + 447) = *(_OWORD *)(v17 + 447);
        *(_OWORD *)(v18 + 432) = v20;
        *(void *)(v18 + 464) = *(void *)(v17 + 464);
        v18 += 472;
        v17 += 472;
        --v19;
      }
      while (v19);
    }
    if ((int)v16 <= v15) {
      unsigned int v21 = v15;
    }
    else {
      unsigned int v21 = v16;
    }
    if ((int)v21 < a2)
    {
      uint64_t v22 = 472 * v21 + 248;
      unint64_t v23 = a2 - (unint64_t)v21;
      __asm { FMOV            V0.2D, #1.0 }
      long long v28 = _Q0;
      do
      {
        *(void *)(v22 + 21ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
        *(_OWORD *)(v22 + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v22 + 184) = 0u;
        *(void *)(v22 - 168) = 0x3FF0000000000000;
        *(void *)(v22 - 208) = 0x3FF0000000000000;
        *(void *)(v22 - 248) = 0x3FF0000000000000;
        *(_OWORD *)(v22 - 24std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v22 - 224) = 0u;
        *(_OWORD *)(v22 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v22 - 184) = 0u;
        *(_OWORD *)(v22 - 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
        *(_OWORD *)(v22 - 144) = 0u;
        *(void *)(v22 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(v22 - 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(_OWORD *)(v22 - 128) = v28;
        *(_OWORD *)(v22 - 112) = 0u;
        *(_OWORD *)(v22 - 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v22 - 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v22 - 72) = 0u;
        *(_OWORD *)(v22 - 32) = 0u;
        *(_OWORD *)(v22 - 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(void *)(v22 + 128) = 0x3FF0000000000000;
        *(void *)(v22 + 88) = 0x3FF0000000000000;
        *(void *)(v22 + 48) = 0x3FF0000000000000;
        *(_OWORD *)uint64_t v22 = v28;
        *(_OWORD *)(v22 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)(v22 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
        *(_OWORD *)(v22 + 152) = 0u;
        *(_OWORD *)(v22 + 168) = 0u;
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v22 + 192));
        *(_DWORD *)(v22 + 208) = 1065353216;
        *(_WORD *)(v22 + 212) = 257;
        *(unsigned char *)(v22 + 2LiPolygonInstance::~LiPolygonInstance(this - 14) = 0;
        v22 += 472;
        --v23;
      }
      while (v23);
    }
    uint64_t v25 = *(void *)(a1 + 16);
    if (v25) {
      MEMORY[0x1BA9BFB70](v25, 0x1000C8077774924);
    }
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B7B443B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[6];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::pair<double,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double const&,LiSceneDrawer::ObjectDrawInfo&,0>(uint64_t a1, void *a2, char *__src)
{
  uint64_t v5 = (_OWORD *)(a1 + 392);
  *(void *)a1 = *a2;
  uint64_t v6 = a1 + 8;
  memcpy((void *)(a1 + 8), __src, 0x180uLL);
  _OWORD *v5 = *((_OWORD *)__src + 24);
  v5[1] = *((_OWORD *)__src + 25);
  void v5[2] = *((_OWORD *)__src + 26);
  long long v7 = *((_OWORD *)__src + 27);
  *(_OWORD *)(v6 + 447) = *(_OWORD *)(__src + 447);
  *(_OWORD *)(v6 + 432) = v7;
  v5[5] = *((_OWORD *)__src + 29);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 488), (const PCSharedCount *)__src + 60);
  *(void *)(a1 + 49ProCore_Impl::PCNSRefImpl::release(this + 6) = *((void *)__src + 61);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 504), (const PCSharedCount *)__src + 62);
  long long v8 = *(_OWORD *)(__src + 504);
  long long v9 = *(_OWORD *)(__src + 520);
  *(_OWORD *)(a1 + 537) = *(_OWORD *)(__src + 529);
  *(_OWORD *)(a1 + 512) = v8;
  *(_OWORD *)(a1 + 528) = v9;
  return a1;
}

void sub_1B7B4452C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ___ZL36should_do_NVIDIA_gpureset_workaroundRN5ProGL2GLE_block_invoke()
{
  String = (char *)glGetString(0x1F01u);
  if (String)
  {
    uint64_t v1 = v9;
    std::string::basic_string[abi:ne180100]<0>(v9, String);
    uint64_t v2 = v10;
    int v3 = (char)v10;
    uint64_t v4 = (void *)v9[0];
    if ((v10 & 0x80u) != 0)
    {
      uint64_t v2 = v9[1];
      uint64_t v1 = (void *)v9[0];
    }
    if (v2 >= 6)
    {
      uint64_t v5 = (char *)v1 + v2;
      uint64_t v6 = v1;
      do
      {
        long long v7 = (char *)memchr(v6, 78, v2 - 5);
        if (!v7) {
          break;
        }
        if (*(_DWORD *)v7 == 1145656910 && *((_WORD *)v7 + 2) == 16713)
        {
          if (v7 != v5 && v7 - (char *)v1 != -1) {
            should_do_NVIDIA_gpureset_workaround(ProGL::GL &)::isNVIDIA = 1;
          }
          break;
        }
        uint64_t v6 = v7 + 1;
        uint64_t v2 = v5 - (unsigned char *)v6;
      }
      while (v5 - (unsigned char *)v6 >= 6);
    }
    if (v3 < 0) {
      operator delete(v4);
    }
  }
}

void ___ZL31should_do_INTEL_6000_workaroundRN5ProGL2GLE_block_invoke()
{
  String = (char *)glGetString(0x1F01u);
  std::string::basic_string[abi:ne180100]<0>(&v2, String);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v1, "intel.* pro graphics 6[[:digit:]]{3}", 33);
}

void sub_1B7B44710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a10);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }

  std::locale::~locale(this);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  uint64_t v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1B7B44804(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1BA9BFA40]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1B7B44870(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1B7B44A44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B44ABC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  end = a1->__end_;
  long long v7 = a2;
  do
  {
    long long v8 = v7;
    long long v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    long long v9 = a1->__end_;
    unsigned __int8 v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      long long v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  uint64_t v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      int v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v3 = a3;
  end = a1->__end_;
  long long v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  long long v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    long long v9 = a1->__end_;
    unsigned __int8 v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    long long v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  end = a1->__end_;
  long long v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    long long v8 = v7;
  }
  else {
    long long v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    long long v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      long long v8 = v9;
    }
    else {
      long long v8 = a3;
    }
    unsigned __int8 v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  end = a1->__end_;
  long long v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    long long v8 = v7;
  }
  else {
    long long v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    long long v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      long long v8 = v9;
    }
    else {
      long long v8 = a3;
    }
    unsigned __int8 v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B450E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7B45170(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__empty_state<char>::~__empty_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x1BA9BFBA0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    long long v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      long long v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        long long v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            int v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_1B7B456A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        long long v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        size_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        size_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      unsigned int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        unsigned int v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    int v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            unsigned int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unsigned int v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              unsigned int v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            unsigned int v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unint64_t v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          unsigned int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unsigned int v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        uint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            unsigned int v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                unsigned int v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            unsigned int v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unsigned int v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    unsigned int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_1B7B45E34(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B45E9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v4;
  return result;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F11293C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F11293C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1F1129408;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F1129408;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F1129408;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x1BA9BFBA0);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
    std::vector<int>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(a1 + 8);
  std::vector<int>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    int v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1B7B46594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)float v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::vector<std::csub_match> __p = 0u;
    memset(v39, 0, 21);
    uint64_t v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    int v35 = a4;
    int v12 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    uint64_t v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      uint64_t v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      int v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          std::vector<std::csub_match>::value_type v18 = (const char *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            long long v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          uint64_t v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)float v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          std::vector<std::csub_match>::value_type v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            uint64_t v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            *uint64_t v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v24;
            uint64_t v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          uint64_t v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)float v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1B7B46A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<int>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      uint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<PCVector3<double>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::csub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B46D04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B46D5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_OZKeyframeInfo>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::vector<std::csub_match>::pointer v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::vector<std::csub_match>::pointer v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1B7B46EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 9ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v8;
      *(void *)(v7 - 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (void *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      long long v15 = &v9[__n];
      std::vector<std::csub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v17 = __x->std::pair<const char *, const char *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)p_end_cap, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    uint64_t v19 = &v18[__n];
    std::vector<std::csub_match>::size_type v20 = 24 * __n;
    std::pair<const char *, const char *> v21 = v18;
    do
    {
      std::pair<const char *, const char *> v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v21 = v22;
      std::pair<const char *, const char *> v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    long long v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v26 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)p_end_cap, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    long long v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::csub_match>::size_type v16 = &v14[__n];
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B7B47488(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B7B474FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B478AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B47978(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned int v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned int v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      char v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_64;
          }
          int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_64;
          }
          char v15 = -87;
LABEL_35:
          std::string::value_type v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4) {
            std::string::operator=(a4, v16);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        uint64_t v7 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          uint64_t v7 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          uint64_t v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    char v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v18 = v17 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v18);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B7B47F3C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B47FA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F1129498;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_1B7B4817C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = (uint64_t)v1[1];
  if (v4) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1129498;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1129498;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F11294E0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F11294E0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  return result;
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1129570;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1129570;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F11295B8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F11295B8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v8;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1BA9BFBA0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1B7B48B2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v8[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const char *, const char *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v25[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::csub_match>::size_type v20 = &v15[(void)v12];
  std::pair<const char *, const char *> v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 17std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_1B7B48EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  void *v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v37 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v125 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v126 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v125 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v126 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second) {
        goto LABEL_218;
      }
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
    char v15 = v124;
    int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0) {
          size_t size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v14->first.__r_.__value_.__l.__size_;
        }
        if (v23 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = v14;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        }
        if (size >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = size;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= size;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0) {
            size_t v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v30 = v14->second.__r_.__value_.__l.__size_;
          }
          if (v29 >= 0) {
            long long data = &v14->second;
          }
          else {
            long long data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(data, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          int v35 = 0;
          BOOL negate = 0;
          goto LABEL_162;
        }
      }
      BOOL negate = 1;
      int v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      BOOL negate = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_200;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  uint64_t v90 = v124;
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    double v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      unint64_t v99 = &v89[v92];
      std::string::size_type v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      int v101 = (char)v100;
      if ((v100 & 0x80u) != 0) {
        std::string::size_type v100 = v99->__r_.__value_.__l.__size_;
      }
      if (v96 == v100)
      {
        if (v101 >= 0) {
          int v102 = &v89[v92];
        }
        else {
          int v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            long long v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0]) {
                goto LABEL_188;
              }
              long long v103 = (void **)((char *)v103 + 1);
              int v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            BOOL negate = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          BOOL negate = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_masuint64_t k = this->__neg_mask_;
            goto LABEL_213;
          }
          masuint64_t k = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          std::ctype_base::mask v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_masuint64_t k = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              int v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              BOOL negate = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    BOOL negate = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = *a2->__current_;
  unsigned __int8 v125 = v39;
  if (this->__icase_)
  {
    unsigned __int8 v39 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    unsigned __int8 v125 = v39;
  }
  std::vector<char>::pointer v40 = this->__chars_.__begin_;
  unint64_t v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    BOOL negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  std::regex_traits<char>::char_class_type v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    long long v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end) {
      goto LABEL_77;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    int64_t v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      uint64_t v119 = v37;
      BOOL v116 = negate;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        uint64_t v54 = &__p;
      }
      else {
        uint64_t v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0) {
          size_t v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v58 = v49->first.__r_.__value_.__l.__size_;
        }
        if (v57 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = v49;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0) {
            size_t v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v64 = v49->second.__r_.__value_.__l.__size_;
          }
          if (v63 >= 0) {
            int v65 = &v49->second;
          }
          else {
            int v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          BOOL negate = v116;
          goto LABEL_123;
        }
      }
      BOOL negate = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_154;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  std::vector<std::string>::pointer v69 = this->__equivalences_.__begin_;
  uint64_t v70 = v124;
  int64_t v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    uint64_t v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      long long v79 = &v69[v72];
      std::string::size_type v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      int v81 = (char)v80;
      if ((v80 & 0x80u) != 0) {
        std::string::size_type v80 = v79->__r_.__value_.__l.__size_;
      }
      if (v76 == v80)
      {
        if (v81 >= 0) {
          long long v82 = &v69[v72];
        }
        else {
          long long v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        }
        if ((v70 & 0x80) != 0)
        {
          BOOL v117 = negate;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          BOOL negate = v117;
          if (!v86)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          uint64_t v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            uint64_t v83 = (void **)((char *)v83 + 1);
            long long v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              BOOL negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    std::regex_traits<char>::char_class_type v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    int v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    int v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  signed __int8 v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B7B49C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1B7B49DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B7B49F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B49FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (int64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v1ProCore_Impl::PCNSRefImpl::release(this + 6) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v1ProCore_Impl::PCNSRefImpl::release(this + 6) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_1B7B4A340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_1B7B4A548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        uint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      uint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        char v20 = a2;
        if (a2[23] < 0) {
          char v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)std::vector<char>::pointer v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(unsigned char **)v4;
      }
      *size_t v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      *int v35 = v34;
    }
    *(_OWORD *)std::vector<char>::pointer v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_1B7B4AE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        std::vector<char>::pointer v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B4B138(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1B7B4B1E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B7B4B300(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B4B580(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1B7B4B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      unint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unint64_t v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  long long v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  unint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      long long v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)p_end_cap, v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    std::__split_buffer<std::string>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::__split_buffer<std::string>::pointer end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1B7B4BA08(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B4BA60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(result + 8);
  return result;
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1B7B4BE6C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B4BF88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B4BFE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1BA9BFBA0);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1BA9BFBA0);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F1129780;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA9BF600](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B7B4C340(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int marked_count = a1->__marked_count_;
        do
        {
          long long v11 = (char *)v9;
          uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        uint64_t v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        BOOL v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      BOOL v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        long long v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          long long v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    unint64_t v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (BOOL v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  std::basic_regex<char>::value_type v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    v3 += v10;
    return v3;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    long long v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::csub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::csub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    unint64_t v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  int v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v50;
}

void sub_1B7B4D41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v54 = 0;
  char v55 = 0;
  v56[0] = 0;
  *(_DWORD *)uint64_t v51 = 0;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v49, 0, 21);
    char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    int v42 = a4;
    unsigned int v11 = v55;
    *((_DWORD *)v55 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v55 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v43 = a3;
    int v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (const char *)(a3 - a2);
    uint64_t v15 = v55;
    *((void *)v55 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = (const char *)*((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = &v20[-*((void *)v15 - 11)];
          unint64_t v29 = v44;
          if ((v27 & ((uint64_t)v44 >= (uint64_t)v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)uint64_t v51 = *(_OWORD *)v19;
            *(_OWORD *)&v51[16] = v30;
            if (v51 != v19)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v51[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v53, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v15 - 11);
            v53[3] = v31;
            unint64_t v29 = v28;
          }
          char v32 = v55;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v54;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, v32);
            }
            char v55 = (_OWORD *)v33;
            char v12 = 1;
            int v44 = v14;
          }
          else
          {
            int v44 = v29;
            unint64_t v34 = v55 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
            char v55 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v55 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
          char v55 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            _OWORD *v55 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
            *((void *)v24 + 7) = 0;
            v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v26;
            char v55 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      uint64_t v15 = v55;
    }
    while (v54 != v55);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = &v44[(void)a2];
      *(unsigned char *)(v35 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
      if ((void)v52 != *(void *)&v51[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v51[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(void *)&v51[32])
  {
    *(void *)&long long v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(void *)uint64_t v51 = &v54;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  return v6;
}

void sub_1B7B4D9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v9;
  *(void *)(v8 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  unsigned int v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 9ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v8;
  *(void *)(v7 - 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B7E73590);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7B4DFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v11);
      unint64_t v43 = (char *)__p;
      int v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              int v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              int v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      int v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        int v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B7B4E348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      unint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *BOOL v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

void std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(a1, a2[1].var0);
    LiSceneDrawer::ByMaterial::~ByMaterial((LiSceneDrawer::ByMaterial *)&a2[6]);
    PCSharedCount::~PCSharedCount(a2 + 5);
    operator delete(a2);
  }
}

void LiSceneDrawer::ByMaterial::~ByMaterial(LiSceneDrawer::ByMaterial *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(*(void *)this, *(void **)(v1 + 8));
    MEMORY[0x1BA9BFBA0](v1, 0x1020C4062D53EE8);
  }
}

void std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(a1, a2[1]);
    uint64_t v4 = a2[6];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete(a2);
  }
}

void std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<LiSceneDrawer::MaterialInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<LiSceneDrawer::MaterialInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 32)
  {
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 8));
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 24));
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t LiSceneIterator<LiLight,LiSceneIteratorShineOut>::LiSceneIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11298D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  while (1)
  {
    uint64_t v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      break;
    }
    LiSceneIterator<LiLight,LiSceneIteratorShineOut>::next(a1);
  }
  return a1;
}

void sub_1B7B4EAB0(_Unwind_Exception *a1)
{
  PCArray<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

double LiSceneIterator<LiLight,LiSceneIteratorShineOut>::next(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (v3
      && (uint64_t v4 = v3,
          uint64_t v3 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *))(*(void *)v3 + 136))(v3),
          v3)
      && (v4 == *(PCArray_base **)a1 || *((unsigned char *)v4 + 645)))
    {
      int v5 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 24) <= v5) {
        int v6 = (2 * (v5 + 1)) | 1;
      }
      else {
        int v6 = *(_DWORD *)(a1 + 24);
      }
      PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v5 + 1, v6);
      uint64_t v7 = *(void *)(a1 + 32) + 144 * *(int *)(a1 + 28);
      *(void *)(v7 - 144) = v4;
      *(_DWORD *)(v7 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      uint64_t v8 = v7 - 128;
      if (a1 + 40 != v7 - 128)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a1 + 40;
        uint64_t v11 = v8;
        do
        {
          for (uint64_t i = 0; i != 32; i += 8)
            *(void *)(v11 + i) = *(void *)(v10 + i);
          ++v9;
          v11 += 32;
          v10 += 32;
        }
        while (v9 != 4);
      }
      uint64_t v13 = (*(uint64_t (**)(PCArray_base *, void))(*(void *)v4 + 144))(v4, 0);
      *(void *)(a1 + 8) = v13;
      PCMatrix44Tmpl<double>::operator*(v8, (long long *)(v13 + 8), (uint64_t)v34);
      if (v34 != (_OWORD *)(a1 + 40))
      {
        for (uint64_t j = 0; j != 8; j += 2)
        {
          long long v16 = (_OWORD *)(a1 + 40 + j * 16);
          long long v14 = v34[j];
          long long v17 = v34[j + 1];
          *long long v16 = v14;
          v16[1] = v17;
        }
      }
    }
    else
    {
      int v18 = *(_DWORD *)(a1 + 28);
      if (v18)
      {
        unint64_t v19 = (_OWORD *)(a1 + 40);
        while (1)
        {
          if (v18 <= 0) {
            PCArray_base::badIndex(v3);
          }
          uint64_t v20 = v18 - 1;
          uint64_t v21 = *(void *)(a1 + 32);
          uint64_t v22 = (uint64_t *)(v21 + 144 * v20);
          uint64_t v23 = *v22;
          signed int v25 = *((_DWORD *)v22 + 2);
          long long v24 = v22 + 1;
          if (v25 < (int)((*(uint64_t (**)(uint64_t))(*(void *)v23 + 136))(v23) - 1)) {
            break;
          }
          int v26 = *(_DWORD *)(a1 + 28) - 1;
          if (*(_DWORD *)(a1 + 24) >= v26) {
            int v27 = *(_DWORD *)(a1 + 24);
          }
          else {
            int v27 = (2 * v26) | 1;
          }
          uint64_t v3 = (PCArray_base *)PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v26, v27);
          int v18 = *(_DWORD *)(a1 + 28);
          if (!v18) {
            goto LABEL_27;
          }
        }
        ++*v24;
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 144))(v23);
        *(void *)(a1 + 8) = v28;
        PCMatrix44Tmpl<double>::operator*(v21 + 144 * v20 + 16, (long long *)(v28 + 8), (uint64_t)v34);
        if (v34 != v19)
        {
          long long v29 = v38;
          *(_OWORD *)(a1 + 104) = v37;
          *(_OWORD *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v29;
          long long v30 = v40;
          *(_OWORD *)(a1 + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = v39;
          *(_OWORD *)(a1 + 152) = v30;
          long long v31 = v34[1];
          *unint64_t v19 = v34[0];
          *(_OWORD *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v31;
          *(void *)&long long v14 = v35;
          long long v32 = v36;
          *(_OWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 88) = v32;
        }
      }
      else
      {
LABEL_27:
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(a1 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
        *(void *)&long long v14 = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PCArray<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F11298D0;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F11298D0;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t LiSceneIterator<LiLight,LiSceneIteratorShineOut>::~LiSceneIterator(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11298D0;
  if (*(int *)(a1 + 24) < 0) {
    int v3 = 1;
  }
  else {
    int v3 = *(_DWORD *)(a1 + 24);
  }
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(v2, 0, v3);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8077774924);
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::vector<LiLightSet>::__push_back_slow_path<LiLightSet const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  int64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  unint64_t v12 = &v8[32 * v3];
  long long v14 = &v8[32 * v7];
  std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  std::vector<LiLightSet>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<LiLightSet>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1B7B4F048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LiLightSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)a2 = &unk_1F10AD5F8;
  int v5 = *(_DWORD *)(a3 + 12);
  if (v5 <= 0) {
    int v6 = 0;
  }
  else {
    int v6 = (2 * v5) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a2, v5, v6);
  if (*(int *)(a3 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      LiLight::operator=(*(void *)(a2 + 16) + v7, *(void *)(a3 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a3 + 12));
  }
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
}

uint64_t std::vector<LiLightSet>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiLightSet>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiLightSet>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = a7 - 32;
  while (a3 + v11 != a5)
  {
    uint64_t v13 = v12 + v11;
    v11 -= 32;
    std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<LiLightSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = i - 32;
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__emplace_unique_key_args<PCPtr<ProShade::Program>,std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const PCSharedCount **a4)
{
  unint64_t v4 = *(void **)(a1 + 8);
  if (!v4) {
LABEL_8:
  }
    std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(a1, a4, (uint64_t)v9);
  unint64_t v5 = *(void *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = v4;
      unint64_t v7 = v4[5];
      if (v5 >= v7) {
        break;
      }
      unint64_t v4 = (void *)*v6;
      if (!*v6) {
        goto LABEL_8;
      }
    }
    if (v7 >= v5) {
      return v6;
    }
    unint64_t v4 = (void *)v6[1];
    if (!v4) {
      goto LABEL_8;
    }
  }
}

void std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(uint64_t a1@<X0>, const PCSharedCount **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (PCSharedCount *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  std::pair<PCPtr<ProShade::Program> const,LiSceneDrawer::ByMaterial>::pair[abi:ne180100]<PCPtr<ProShade::Program> const&>(v6 + 4, *a2);
}

void sub_1B7B4F398(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::pair<PCPtr<ProShade::Program> const,LiSceneDrawer::ByMaterial>::pair[abi:ne180100]<PCPtr<ProShade::Program> const&>(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->int var0 = a2->var0;
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  operator new();
}

void sub_1B7B4F418(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCSharedCount *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    LiSceneDrawer::ByMaterial::~ByMaterial((LiSceneDrawer::ByMaterial *)&__p[6]);
    PCSharedCount::~PCSharedCount(__p + 5);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(uint64_t a1, const PCHash128 *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = operator<((const PCHash128 *)((char *)v3 + 28), a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || operator<(a2, (const PCHash128 *)((char *)v5 + 28))) {
    return v2;
  }
  return v5;
}

_DWORD *std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  BOOL v6 = (void **)std::__tree<PCHash128>::__find_equal<PCHash128>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x30uLL);
    uint64_t v9 = *a4;
    v7[7] = **a4;
    v7[8] = v9[1];
    v7[9] = v9[2];
    v7[10] = v9[3];
    *((unsigned char *)v7 + 44) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::vector<LiSceneDrawer::MaterialInfo>::__push_back_slow_path<LiSceneDrawer::MaterialInfo const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  int64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = (PCSharedCount *)&v8[32 * v3];
  long long v14 = &v8[32 * v7];
  std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>((uint64_t)(a1 + 2), v12, a2);
  uint64_t v13 = v12 + 4;
  std::vector<LiSceneDrawer::MaterialInfo>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<LiSceneDrawer::MaterialInfo>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1B7B4F684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LiSceneDrawer::MaterialInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>(uint64_t a1, PCSharedCount *a2, const PCSharedCount *a3)
{
  a2->int var0 = a3->var0;
  PCSharedCount::PCSharedCount(a2 + 1, a3 + 1);
  a2[2].int var0 = a3[2].var0;
  PCSharedCount::PCSharedCount(a2 + 3, a3 + 3);
}

void sub_1B7B4F6F0(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LiSceneDrawer::MaterialInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>((uint64_t)(a1 + 2), a1[1], (const PCSharedCount *)a1[1], *a1, (const PCSharedCount *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>(uint64_t a1, uint64_t a2, const PCSharedCount *a3, uint64_t a4, const PCSharedCount *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 4;
      std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>(a1, (PCSharedCount *)(v7 - 32), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B7B4F834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(PCSharedCount **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(PCSharedCount **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    PCSharedCount::~PCSharedCount(v1 + 3);
    PCSharedCount::~PCSharedCount(v1 + 1);
    v1 += 4;
  }
}

uint64_t std::__split_buffer<LiSceneDrawer::MaterialInfo>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<LiSceneDrawer::MaterialInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = i - 32;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 8));
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 24));
  }
}

double *std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__emplace_multi<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__construct_node<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (v7[4] >= *((double *)v4 + 4)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, (uint64_t *)v7);
  return v7;
}

uint64_t std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__construct_node<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x250uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  uint64_t result = std::pair<double const,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double,LiSceneDrawer::ObjectDrawInfo,0>((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  return result;
}

void sub_1B7B4FA48(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<double const,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double,LiSceneDrawer::ObjectDrawInfo,0>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x180uLL);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(_OWORD *)(a1 + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  long long v6 = *(_OWORD *)(v5 + 432);
  *(_OWORD *)(v4 + 447) = *(_OWORD *)(v5 + 447);
  *(_OWORD *)(v4 + 432) = v6;
  uint64_t v7 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v7;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 488), (const PCSharedCount *)(a2 + 488));
  *(void *)(a1 + 49ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a2 + 496);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 504), (const PCSharedCount *)(a2 + 504));
  long long v8 = *(_OWORD *)(a2 + 512);
  long long v9 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
  *(_OWORD *)(a1 + 512) = v8;
  *(_OWORD *)(a1 + 528) = v9;
  return a1;
}

void sub_1B7B4FB30(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCSharedCount *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    PCSharedCount::~PCSharedCount(__p + 67);
    PCSharedCount::~PCSharedCount(__p + 65);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::vector<LiSceneDrawer::DeferredGroup>::__push_back_slow_path<LiSceneDrawer::DeferredGroup>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCBEEA4E1A08AD8F3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x8AD8F2FBA93868) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a2 + 49;
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCBEEA4E1A08AD8F3 * ((a1[2] - v3) >> 3);
  if (2 * v9 > v5) {
    unint64_t v5 = 2 * v9;
  }
  if (v9 >= 0x456C797DD49C34) {
    unint64_t v10 = 0x8AD8F2FBA93868;
  }
  else {
    unint64_t v10 = v5;
  }
  uint64_t v22 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>>(v8, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  std::string __p = v11;
  unint64_t v19 = &v11[472 * v4];
  uint64_t v21 = &v11[472 * v10];
  uint64_t v14 = *a2;
  uint64_t v13 = a2 + 1;
  uint64_t v12 = v19;
  *(void *)unint64_t v19 = v14;
  memcpy(v12 + 1, v13, 0x180uLL);
  *(_OWORD *)(v12 + 49) = *v7;
  *(_OWORD *)(v12 + 51) = v7[1];
  *(_OWORD *)(v12 + 53) = v7[2];
  long long v15 = v13[27];
  *(_OWORD *)((char *)v12 + 455) = *(_OWORD *)((char *)v13 + 447);
  *(_OWORD *)(v12 + 55) = v15;
  uint64_t v20 = (char *)(v12 + 59);
  std::vector<LiSceneDrawer::DeferredGroup>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v16 = a1[1];
  if (v20 != v19) {
    uint64_t v20 = &v19[(v20 - v19 - 472) % 0x1D8uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v16;
}

void sub_1B7B4FD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LiSceneDrawer::DeferredGroup>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x8AD8F2FBA93869) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(472 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v10 = a3;
    uint64_t v11 = a7 - 80;
    do
    {
      *(void *)(v11 - 392) = *(void *)(v10 - 472);
      memcpy((void *)(v11 - 384), (const void *)(v10 - 464), 0x1B0uLL);
      long long v12 = *(_OWORD *)(v10 - 32);
      *(_OWORD *)(v11 + 63) = *(_OWORD *)(v10 - 17);
      *(_OWORD *)(v11 + 48) = v12;
      v11 -= 472;
      v7 -= 472;
      v10 -= 472;
    }
    while (v10 != a5);
  }
  return a6;
}

uint64_t **std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x48uLL);
    *((void *)v11 + 4) = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void LiHeSolidRendererNode::LiHeSolidRendererNode(LiHeSolidRendererNode *this)
{
  HGNode::HGNode((HGNode *)this);
  v2->int var0 = (PC_Sp_counted_base *)&unk_1F1129908;
  v2[51].int var0 = 0;
  PCSharedCount::PCSharedCount(v2 + 52);
  *((void *)this + 69) = 0x3FF0000000000000;
  *((void *)this + 64) = 0x3FF0000000000000;
  *((void *)this + 59) = 0x3FF0000000000000;
  *((void *)this + 54) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 45ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *(_OWORD *)((char *)this + 52std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 53ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((void *)this + 85) = 0x3FF0000000000000;
  *((void *)this + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 75) = 0x3FF0000000000000;
  *((void *)this + 7std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((void *)this + 101) = 0x3FF0000000000000;
  *((void *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 91) = 0x3FF0000000000000;
  *((void *)this + 8ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_OWORD *)this + 4ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 77ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((void *)this + 117) = 0x3FF0000000000000;
  *((void *)this + 112) = 0x3FF0000000000000;
  *((void *)this + 107) = 0x3FF0000000000000;
  *((void *)this + 102) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 84std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *(_OWORD *)((char *)this + 92std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((void *)this + 137) = 0x3FF0000000000000;
  *((void *)this + 132) = 0x3FF0000000000000;
  *((void *)this + 127) = 0x3FF0000000000000;
  *((void *)this + 122) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 100std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *(_OWORD *)((char *)this + 108std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((void *)this + 141) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((void *)this + 142) = 1065353216;
  *((void *)this + 143) = 0x20000000000;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 144);
  *(_OWORD *)((char *)this + 116std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((void *)this + 147) = 0xBFF0000000000000;
  *((void *)this + 148) = 0xBFF0000000000000;
  LiClipSet::LiClipSet((LiHeSolidRendererNode *)((char *)this + 1192));
  *((void *)this + 155) = &unk_1F111A398;
  *((void *)this + 157) = 0;
  *((void *)this + 15ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((_DWORD *)this + 31ProCore_Impl::PCNSRefImpl::release(this + 6) = 1065353216;
  LiSolidDofInfo::LiSolidDofInfo((LiHeSolidRendererNode *)((char *)this + 1272));
  *((_WORD *)this + 74std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_DWORD *)this + 39ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 218) = 0x3FF0000000000000;
  *((void *)this + 213) = 0x3FF0000000000000;
  *((void *)this + 208) = 0x3FF0000000000000;
  *((void *)this + 203) = 0x3FF0000000000000;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 103) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((void *)this + 222) = 0;
  *((_OWORD *)this + 11std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((void *)this + 223) = (char *)this + 1792;
  *((_OWORD *)this + 113) = 0u;
  *((void *)this + 228) = 0;
  operator new();
}

void sub_1B7B502AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v17 = v15;
  MEMORY[0x1BA9BFBA0](v17, 0x10B1C406A02D483);
  unint64_t v19 = *(void **)(v10 + 1808);
  if (v19)
  {
    *(void *)(v10 + 181ProCore_Impl::PCNSRefImpl::release(this + 6) = v19;
    operator delete(v19);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v10 + 1784, *v16);
  a10 = (void **)(v10 + 1760);
  std::vector<LiMaterialTextureInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  PCArray<PCPtr<LiMaterialFilter>,PCArray_Traits<PCPtr<LiMaterialFilter>>>::~PCArray(v14);
  LiClipSet::~LiClipSet(v13);
  PCString::~PCString(v12);
  PCSharedCount::~PCSharedCount(v11);
  HGNode::~HGNode((HGNode *)v10);
  _Unwind_Resume(a1);
}

void LiHeSolidRendererNode::~LiHeSolidRendererNode(LiHeSolidRendererNode *this)
{
  *(void *)this = &unk_1F1129908;
  uint64_t v2 = *((void *)this + 140);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 226);
  if (v3)
  {
    *((void *)this + 227) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1784, *((void **)this + 224));
  uint64_t v6 = (void **)((char *)this + 1760);
  std::vector<LiMaterialTextureInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((void *)this + 155) = &unk_1F111A398;
  if (*((int *)this + 312) < 0) {
    int v4 = 1;
  }
  else {
    int v4 = *((_DWORD *)this + 312);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 1240, 0, v4);
  uint64_t v5 = *((void *)this + 157);
  if (v5) {
    MEMORY[0x1BA9BFB70](v5, 0x1000C8077774924);
  }
  *((void *)this + 157) = 0;
  *((_DWORD *)this + 312) = 0;
  LiClipSet::~LiClipSet((LiHeSolidRendererNode *)((char *)this + 1192));
  PCString::~PCString((PCString *)this + 144);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 52);
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeSolidRendererNode::~LiHeSolidRendererNode(this);

  HGObject::operator delete(v1);
}

void LiHeSolidRendererNode::addHeliumImageSourceInput(uint64_t a1, void *a2, int a3)
{
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 136))(*a2, 0xFFFFFFFFLL, 2);
  (*(void (**)(void, void, void *, void *, void *))(*(void *)a2[21] + 184))(a2[21], *(void *)(a2[22] + 16), a2, a2 + 1, a2 + 5);
  uint64_t v6 = a2[22];
  long long v32 = 0uLL;
  *(void *)&long long v33 = 0;
  DWORD2(v33) = 1;
  BYTE12(v33) = 1;
  *(void *)&v37[40] = 0x3FF0000000000000;
  *(void *)long long v37 = 0x3FF0000000000000;
  *(void *)&v34[40] = 0x3FF0000000000000;
  *(void *)unint64_t v34 = 0x3FF0000000000000;
  memset(&v34[8], 0, 32);
  long long v35 = 0u;
  long long v36 = 0u;
  memset(&v37[8], 0, 32);
  long long v38 = xmmword_1B7E74760;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v39);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v41);
  uint64_t v7 = *a2;
  double v8 = (const PCSharedCount *)a2[22];
  *(void *)&long long v32 = a2[21];
  *((void *)&v32 + 1) = v7;
  int var0 = v8[12].var0;
  PCSharedCount::PCSharedCount(&v31, v8 + 13);
  *(void *)&long long v33 = var0;
  PCSharedCount::~PCSharedCount(v9);
  uint64_t v10 = a2[22];
  DWORD2(v33) = *(_DWORD *)(v10 + 320);
  if (a2 + 5 != (void *)v34)
  {
    uint64_t v11 = 0;
    long long v12 = a2 + 5;
    do
    {
      uint64_t v13 = &v34[v11 * 8];
      long long v14 = *(_OWORD *)&v12[v11 + 2];
      _OWORD *v13 = *(_OWORD *)&v12[v11];
      v13[1] = v14;
      v11 += 4;
    }
    while (v11 != 16);
  }
  long long v39 = *(_OWORD *)(v10 + 120);
  uint64_t SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)a2[21], *(const ProShade::SamplerNode **)(v6 + 16));
  char v16 = *(unsigned char *)(SamplerInfo + 337);
  BYTE12(v33) = *(unsigned char *)(SamplerInfo + 329) & 1;
  char v40 = v16 & 1;
  unint64_t v17 = *(void *)(a1 + 1768);
  if (v17 >= *(void *)(a1 + 1776))
  {
    uint64_t v27 = std::vector<LiMaterialTextureInfo>::__push_back_slow_path<LiMaterialTextureInfo const&>((uint64_t *)(a1 + 1760), &v32);
  }
  else
  {
    long long v18 = v32;
    long long v19 = *(_OWORD *)v34;
    *(_OWORD *)(v17 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v33;
    *(_OWORD *)(v17 + 32) = v19;
    *(_OWORD *)unint64_t v17 = v18;
    long long v20 = *(_OWORD *)&v34[16];
    long long v21 = *(_OWORD *)&v34[32];
    long long v22 = v36;
    *(_OWORD *)(v17 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v35;
    *(_OWORD *)(v17 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = v22;
    *(_OWORD *)(v17 + 48) = v20;
    *(_OWORD *)(v17 + 64) = v21;
    long long v23 = *(_OWORD *)v37;
    long long v24 = *(_OWORD *)&v37[16];
    long long v25 = v38;
    *(_OWORD *)(v17 + 144) = *(_OWORD *)&v37[32];
    *(_OWORD *)(v17 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v25;
    *(_OWORD *)(v17 + 112) = v23;
    *(_OWORD *)(v17 + 128) = v24;
    *(_OWORD *)(v17 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v39;
    *(unsigned char *)(v17 + 192) = v40;
    *(void *)(v17 + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v41;
    int v26 = v42;
    *(void *)(v17 + 208) = v42;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = v17 + 216;
    *(void *)(a1 + 1768) = v17 + 216;
  }
  *(void *)(a1 + 1768) = v27;
  if (a3)
  {
    (*(void (**)(uint64_t, void, void))(*(void *)a1 + 120))(a1, *(unsigned int *)(a1 + 1752), *a2);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 136))(a1, *(unsigned int *)(a1 + 1752), 2);
    uint64_t v28 = *(void *)(a1 + 1768);
    uint64_t v29 = *(void *)(a1 + 1760);
    int var0 = (PC_Sp_counted_base *)(a1 + 1752);
    *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 1784), (int *)(a1 + 1752), (uint64_t)&std::piecewise_construct, (unsigned int **)&var0)+ 8) = 1749801491 * ((unint64_t)(v28 - v29) >> 3) - 1;
    ++*(_DWORD *)(a1 + 1752);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
}

void sub_1B7B507D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  _Unwind_Resume(exception_object);
}

void LiHeSolidRendererNode::createHeliumNodesFromImageSources(void *a1, const void **a2, const LiRenderParameters **a3)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (!*a2) {
    return;
  }
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = (*(uint64_t (**)(void *))(*(void *)v6 + 136))(v6);
    if (v8 >= 1)
    {
      int v9 = v8;
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = (void *)(*(uint64_t (**)(void *, uint64_t))(*(void *)v7 + 144))(v7, v10);
        *(void *)uint64_t v120 = v11;
        if (v11) {
          long long v12 = (PCShared_base *)((char *)v11 + *(void *)(*v11 - 24));
        }
        else {
          long long v12 = 0;
        }
        PCSharedCount::PCSharedCount((PCSharedCount *)&v120[8], v12);
        LiHeSolidRendererNode::createHeliumNodesFromImageSources(a1, v120, a3);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v120[8]);
        uint64_t v10 = (v10 + 1);
      }
      while (v9 != v10);
    }
    return;
  }
  if (!v13) {
    return;
  }
  long long v14 = v13;
  *((void *)&v107[2] + 1) = 0x3FF0000000000000;
  std::ctype_base::mask v108 = 0;
  *(void *)&v107[0] = 0x3FF0000000000000;
  *((void *)&v104[2] + 1) = 0x3FF0000000000000;
  uint64_t v103 = 0;
  *(void *)&v104[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)v104 + 8) = 0u;
  *(_OWORD *)((char *)&v104[1] + 8) = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  *(_OWORD *)((char *)v107 + 8) = 0u;
  *(_OWORD *)((char *)&v107[1] + 8) = 0u;
  int v101 = 0;
  int v102 = 0;
  LiMaterial::getSamplerInfos((uint64_t)v13, &v101);
  uint64_t v15 = v101;
  int64_t v91 = v102;
  if (v101 == v102) {
    goto LABEL_133;
  }
  std::regex_traits<char>::char_class_type v87 = a3;
  char v16 = (PCSharedCount *)&v120[8];
  int v86 = a1 + 226;
  double v95 = a1 + 220;
  __asm { FMOV            V0.2D, #-1.0 }
  float64x2_t v92 = _Q0;
  uint64_t v90 = v14;
  do
  {
    uint64_t v22 = *(void *)v15;
    *(void *)uint64_t v120 = *(void *)(*(void *)v15 + 96);
    PCSharedCount::PCSharedCount(v16, (const PCSharedCount *)(v22 + 104));
    uint64_t v23 = *(void *)v120;
    PCSharedCount::~PCSharedCount(v24);
    if (!v23) {
      goto LABEL_108;
    }
    int v25 = *(_DWORD *)(v22 + 324);
    int v88 = *(unsigned __int8 *)(v22 + 328);
    int v89 = *(unsigned __int8 *)(v22 + 319);
    int32x4_t v100 = *(int32x4_t *)(v22 + 120);
    SamplerAttributes::getHash((SamplerAttributes *)(v22 + 316));
    PCHash128::operator+=(v100.i32, (int *)v120);
    int v26 = (int32x4_t *)a1[227];
    uint64_t v27 = (int32x4_t *)a1[226];
    uint64_t v28 = (char *)v26 - (char *)v27;
    if (v26 != v27)
    {
      uint64_t v29 = 0;
      BOOL v30 = 0;
      unint64_t v31 = v28 / 24;
      if (v31 <= 1) {
        uint64_t v32 = 1;
      }
      else {
        uint64_t v32 = v31;
      }
      long long v33 = v27 + 1;
      while (1)
      {
        if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v100, v33[-1])), 0xFuLL))))
        {
          __int32 v34 = v33->i32[0];
          if (v33->i32[0] != -1)
          {
            if (*(void *)(*v95 + 216 * v34 + 8)) {
              break;
            }
          }
        }
        long long v33 = (int32x4_t *)((char *)v33 + 24);
        BOOL v30 = v31 <= ++v29;
        if (v32 == v29) {
          goto LABEL_23;
        }
      }
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v120);
      *(int32x4_t *)uint64_t v120 = v100;
      *(_DWORD *)&v120[16] = 1749801491 * ((a1[221] - a1[220]) >> 3);
      *(_DWORD *)&v120[20] = v34;
      unint64_t v45 = a1[227];
      if (v45 >= a1[228])
      {
        uint64_t v46 = std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__push_back_slow_path<LiHeSolidRendererNode::UniqueInputInfo const&>(v86, (uint64_t)v120);
      }
      else
      {
        *(_DWORD *)unint64_t v45 = *(_DWORD *)v120;
        *(_DWORD *)(v45 + 4) = *(_DWORD *)&v120[4];
        *(_DWORD *)(v45 + 8) = *(_DWORD *)&v120[8];
        *(_DWORD *)(v45 + 12) = *(_DWORD *)&v120[12];
        *(void *)(v45 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)&v120[16];
        uint64_t v46 = v45 + 24;
      }
      a1[227] = v46;
      uint64_t v59 = a1[220];
      size_t v60 = *(HGCrop **)(v59 + 216 * v34 + 8);
      if (v60)
      {
        (*(void (**)(HGCrop *))(*(void *)v60 + 16))(v60);
        long long v61 = v108;
        if (v108 == v60)
        {
          (*(void (**)(HGCrop *))(*(void *)v60 + 24))(v60);
LABEL_78:
          long long v62 = (_OWORD *)(v59 + 216 * v34 + 32);
          if (v62 != v104)
          {
            uint64_t v63 = 0;
            size_t v64 = v104;
            do
            {
              for (uint64_t i = 0; i != 32; i += 8)
                *(void *)((char *)v64 + i) = *(void *)((char *)v62 + i);
              ++v63;
              v64 += 2;
              v62 += 2;
            }
            while (v63 != 4);
          }
          uint64_t v66 = v59 + 216 * v34;
          uint64_t v67 = *(void *)(v66 + 160);
          v68.i64[0] = (int)v67;
          v68.i64[1] = SHIDWORD(v67);
          float64x2_t v94 = vcvtq_f64_s64(v68);
          double v51 = (double)*(int *)(v66 + 168);
          double v52 = (double)*(int *)(v66 + 172);
          long long v58 = v90;
          goto LABEL_103;
        }
      }
      else
      {
        long long v61 = v108;
        if (!v108) {
          goto LABEL_78;
        }
      }
      if (v61) {
        (*(void (**)(HGCrop *))(*(void *)v61 + 24))(v61);
      }
      std::ctype_base::mask v108 = v60;
      goto LABEL_78;
    }
LABEL_23:
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v98);
    int32x4_t v98 = v100;
    unint64_t v99 = (1749801491 * ((a1[221] - a1[220]) >> 3)) | 0xFFFFFFFF00000000;
    long long v35 = (int32x4_t *)a1[227];
    if ((unint64_t)v35 >= a1[228])
    {
      uint64_t v36 = std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__push_back_slow_path<LiHeSolidRendererNode::UniqueInputInfo const&>(v86, (uint64_t)&v98);
    }
    else
    {
      *long long v35 = v98;
      v35[1].i64[0] = v99;
      uint64_t v36 = (uint64_t)&v35[1].i64[1];
    }
    a1[227] = v36;
    CGColorSpace = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(v22 + 112));
    PCGetColorSpaceLuminanceCoefficients(CGColorSpace, (float *)&v127);
    size_t v96 = *(LiImageSource **)(v22 + 96);
    PCSharedCount::PCSharedCount(&v97, (const PCSharedCount *)(v22 + 104));
    long long v38 = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(v22 + 112));
    double v93 = *(double *)(v22 + 136);
    LiAgent::LiAgent((LiAgent *)v120, v87[6], 1);
    uint64_t RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)v87);
    FxColorDescription::FxColorDescription(&v119, RequestedColorDescription, v38);
    LiAgent::setRequestedColorDescription((CGColorSpace **)v120, &v119);
    float64x2_t v117 = 0uLL;
    float64x2_t v118 = v92;
    if (!v96) {
      throw_PCNullPointerException(1);
    }
    if ((*(unsigned int (**)(LiImageSource *, unsigned char *, float64x2_t *))(*(void *)v96 + 24))(v96, v120, &v117))
    {
      double v40 = v117.f64[1];
      double v41 = v117.f64[0];
    }
    else
    {
      float64x2_t v117 = 0uLL;
      double v40 = 0.0;
      double v41 = 0.0;
      float64x2_t v118 = v92;
    }
    double v42 = -v41;
    v104[0] = 0x3FF0000000000000uLL;
    double v43 = -v40;
    *(void *)&v104[1] = 0;
    *((double *)&v104[1] + 1) = v42;
    v104[2] = xmmword_1B7E733E0;
    *(void *)&long long v105 = 0;
    *((double *)&v105 + 1) = v43;
    long long v106 = 0uLL;
    *(void *)&v107[0] = 0x3FF0000000000000;
    *(_OWORD *)((char *)v107 + 8) = 0u;
    *(_OWORD *)((char *)&v107[1] + 8) = 0u;
    *((void *)&v107[2] + 1) = 0x3FF0000000000000;
    if (v93 != 1.0)
    {
      *(double *)uint64_t v104 = v93;
      *((double *)v104 + 1) = v93 * 0.0;
      *(double *)&v104[1] = v93 * 0.0;
      *((double *)&v104[1] + 1) = v93 * v42;
      *(double *)&v104[2] = v93 * 0.0;
      *((double *)&v104[2] + 1) = v93;
      *(double *)&long long v105 = v93 * 0.0;
      *((double *)&v105 + 1) = v93 * v43;
      *(double *)&long long v106 = v93 * 0.0;
      *((double *)&v106 + 1) = v93 * 0.0;
      *(double *)float64x2_t v107 = v93;
      *((double *)v107 + 1) = v93 * 0.0;
    }
    LiAgent::setPixelTransform((uint64_t)v120, (uint64_t)v104);
    float64x2_t v117 = vmulq_n_f64(v117, v93);
    float64x2_t v118 = vmulq_n_f64(v118, v93);
    LiAgent::getHelium((LiAgent *)v120, v96, (uint64_t *)&v116);
    if (!v116)
    {
      int v44 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v44);
      if (v116 == v44)
      {
        if (v44) {
          (*(void (**)(HGNode *))(*(void *)v44 + 24))(v44);
        }
      }
      else
      {
        if (v116) {
          (*(void (**)(void))(*(void *)v116 + 24))();
        }
        BOOL v116 = v44;
      }
    }
    LiAgent::getDOD((uint64_t)v120, (uint64_t)&v112);
    double v47 = v118.f64[0];
    if (v118.f64[0] <= 0.0 || (double v48 = v118.f64[1], v118.f64[1] <= 0.0))
    {
      v49.i64[0] = v112;
      v49.i64[1] = v113;
      float64x2_t v117 = vcvtq_f64_s64(v49);
      double v47 = (double)v114;
      double v48 = (double)v115;
      v118.f64[0] = (double)v114;
      v118.f64[1] = (double)v115;
    }
    uint64_t v50 = (HGCrop *)HGObject::operator new(0x1A0uLL);
    HGCrop::HGCrop(v50);
    (*(void (**)(HGCrop *, void, HGNode *))(*(void *)v50 + 120))(v50, 0, v116);
    (*(void (**)(HGCrop *, void, double, double, float, float))(*(void *)v50 + 96))(v50, 0, 0.0, 0.0, (float)(int)v47, (float)(int)v48);
    if (v108 != v50)
    {
      if (v108) {
        (*(void (**)(void))(*(void *)v108 + 24))();
      }
      std::ctype_base::mask v108 = v50;
      (*(void (**)(HGCrop *))(*(void *)v50 + 16))(v50);
    }
    LiAgent::getBoundary((LiAgent *)v120, (uint64_t)&v109);
    double v51 = v110;
    if (v110 <= 0.0 || (double v52 = v111, v111 <= 0.0))
    {
      v53.i64[0] = v112;
      v53.i64[1] = v113;
      float64x2_t v94 = vcvtq_f64_s64(v53);
      double v51 = (double)v114;
      double v52 = (double)v115;
    }
    else
    {
      float64x2_t v94 = v109;
    }
    uint64_t v54 = *(void *)&v120[160];
    if (*(_OWORD **)&v120[160] != v104)
    {
      uint64_t v55 = 0;
      BOOL v56 = v104;
      do
      {
        for (uint64_t j = 0; j != 32; j += 8)
          *(void *)((char *)v56 + j) = *(void *)(v54 + j);
        ++v55;
        v56 += 2;
        v54 += 32;
      }
      while (v55 != 4);
    }
    (*(void (**)(HGCrop *))(*(void *)v50 + 24))(v50);
    if (v116) {
      (*(void (**)(HGNode *))(*(void *)v116 + 24))(v116);
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v119._pcColorDesc._colorSpaceRef._obj);
    LiAgent::~LiAgent((LiAgent *)v120);
    PCSharedCount::~PCSharedCount(&v97);
    if (v25 == 1)
    {
      if (v88) {
        LiSolidUtils::createBumpMapFromHeightMap(&v108);
      }
      LiSolidUtils::createBumpMapFromNormalMap(&v108, v89 != 0, (HgcNormalMapToBumpMap **)v120);
      long long v58 = v90;
      uint64_t v70 = *(HGCrop **)v120;
      if (v108 != *(HGCrop **)v120)
      {
        if (v108)
        {
LABEL_100:
          (*(void (**)(void))(*(void *)v108 + 24))();
          uint64_t v70 = *(HGCrop **)v120;
        }
LABEL_101:
        std::ctype_base::mask v108 = v70;
        goto LABEL_102;
      }
      if (v108) {
LABEL_117:
      }
        (*(void (**)(void))(*(void *)v108 + 24))();
    }
    else if (v25 == 2)
    {
      if (v88) {
        LiSolidUtils::createBumpMapFromHeightMap(&v108);
      }
      LiSolidUtils::createBumpMapFromNormalMap(&v108, v89 != 0, (HgcNormalMapToBumpMap **)v120);
      long long v58 = v90;
      int64_t v71 = *(HGCrop **)v120;
      if (v108 == *(HGCrop **)v120)
      {
        if (v108) {
          (*(void (**)(void))(*(void *)v108 + 24))();
        }
      }
      else
      {
        if (v108)
        {
          (*(void (**)(void))(*(void *)v108 + 24))();
          int64_t v71 = *(HGCrop **)v120;
        }
        std::ctype_base::mask v108 = v71;
      }
      LiSolidUtils::createLean1MapFromBumpMap(&v108, (HgcLean1 **)v120);
      uint64_t v70 = *(HGCrop **)v120;
      if (v108 != *(HGCrop **)v120)
      {
        if (v108) {
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (v108) {
        goto LABEL_117;
      }
    }
    else
    {
      _ZF = v25 == 3;
      long long v58 = v90;
      if (!_ZF) {
        goto LABEL_102;
      }
      if (v88) {
        LiSolidUtils::createBumpMapFromHeightMap(&v108);
      }
      LiSolidUtils::createBumpMapFromNormalMap(&v108, v89 != 0, (HgcNormalMapToBumpMap **)v120);
      std::vector<std::string>::pointer v69 = *(HGCrop **)v120;
      if (v108 == *(HGCrop **)v120)
      {
        if (v108) {
          (*(void (**)(void))(*(void *)v108 + 24))();
        }
      }
      else
      {
        if (v108)
        {
          (*(void (**)(void))(*(void *)v108 + 24))();
          std::vector<std::string>::pointer v69 = *(HGCrop **)v120;
        }
        std::ctype_base::mask v108 = v69;
      }
      LiSolidUtils::createLean2MapFromBumpMap(&v108, (HgcLean2 **)v120);
      uint64_t v70 = *(HGCrop **)v120;
      if (v108 != *(HGCrop **)v120)
      {
        if (v108) {
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (v108) {
        goto LABEL_117;
      }
    }
LABEL_102:
    BOOL v30 = 1;
LABEL_103:
    memset(v120, 0, 24);
    *(float64x2_t *)&v120[24] = v92;
    *(void *)&v120[160] = 0x3FF0000000000000;
    *(void *)&v120[120] = 0x3FF0000000000000;
    *(void *)&v120[80] = 0x3FF0000000000000;
    *(void *)&v120[40] = 0x3FF0000000000000;
    memset(&v120[48], 0, 32);
    memset(&v120[88], 0, 32);
    memset(&v120[128], 0, 32);
    if (v108)
    {
      *(void *)uint64_t v120 = v108;
      (*(void (**)(HGCrop *))(*(void *)v108 + 16))(v108);
    }
    *(float64x2_t *)&v120[8] = v94;
    *(double *)&v120[24] = v51;
    *(double *)&v120[32] = v52;
    *(_OWORD *)&v120[104] = v106;
    *(_OWORD *)&v120[120] = v107[0];
    *(_OWORD *)&v120[136] = v107[1];
    *(_OWORD *)&v120[152] = v107[2];
    *(_OWORD *)&v120[40] = v104[0];
    *(_OWORD *)&v120[56] = v104[1];
    *(_OWORD *)&v120[72] = v104[2];
    *(_OWORD *)&v120[88] = v105;
    *(void *)&v120[168] = v58;
    uint64_t v121 = v22;
    LiHeSolidRendererNode::addHeliumImageSourceInput((uint64_t)a1, v120, v30);
    if (*(void *)v120) {
      (*(void (**)(void))(**(void **)v120 + 24))(*(void *)v120);
    }
    char v16 = (PCSharedCount *)&v120[8];
LABEL_108:
    v15 += 8;
  }
  while (v15 != v91);
  uint64_t v72 = (LiMaterialSamplerInfo **)v101;
  uint64_t v15 = v102;
  if (v101 != v102)
  {
    do
    {
      unint64_t v73 = *v72;
      if (LiMaterialSamplerInfo::textureID(*v72))
      {
        int v74 = *((_DWORD *)v73 + 80);
        memset(v120, 0, 24);
        *(_DWORD *)&v120[24] = 1;
        v120[28] = 1;
        *(void *)&v120[152] = 0x3FF0000000000000;
        *(void *)&v120[112] = 0x3FF0000000000000;
        *(void *)&v120[72] = 0x3FF0000000000000;
        *(void *)&v120[32] = 0x3FF0000000000000;
        memset(&v120[40], 0, 32);
        memset(&v120[80], 0, 32);
        memset(&v120[120], 0, 32);
        *(_OWORD *)&v120[160] = xmmword_1B7E74760;
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v121);
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v125);
        *(void *)uint64_t v120 = v90;
        *(_DWORD *)&v120[24] = v74;
        LiMaterialSamplerInfo::getTexture(v73, (PCWorkingColorVector *)&v119);
        LiMaterialTextureInfo::setTexture((LiMaterialTextureInfo *)v120, (const ProGL::TextureHandle *)&v119);
        if (*(void *)&v119._pcColorDesc._dynamicRange) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119._pcColorDesc._dynamicRange);
        }
        unint64_t v75 = a1[221];
        if (v75 >= a1[222])
        {
          uint64_t v85 = std::vector<LiMaterialTextureInfo>::__push_back_slow_path<LiMaterialTextureInfo const&>(v95, (long long *)v120);
        }
        else
        {
          long long v76 = *(_OWORD *)v120;
          long long v77 = *(_OWORD *)&v120[32];
          *(_OWORD *)(v75 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)&v120[16];
          *(_OWORD *)(v75 + 32) = v77;
          *(_OWORD *)unint64_t v75 = v76;
          long long v78 = *(_OWORD *)&v120[48];
          long long v79 = *(_OWORD *)&v120[64];
          long long v80 = *(_OWORD *)&v120[96];
          *(_OWORD *)(v75 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)&v120[80];
          *(_OWORD *)(v75 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = v80;
          *(_OWORD *)(v75 + 48) = v78;
          *(_OWORD *)(v75 + 64) = v79;
          long long v81 = *(_OWORD *)&v120[112];
          long long v82 = *(_OWORD *)&v120[128];
          long long v83 = *(_OWORD *)&v120[160];
          *(_OWORD *)(v75 + 144) = *(_OWORD *)&v120[144];
          *(_OWORD *)(v75 + 16std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v83;
          *(_OWORD *)(v75 + 112) = v81;
          *(_OWORD *)(v75 + 128) = v82;
          *(void *)(v75 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v121;
          *(_DWORD *)(v75 + 184) = v122;
          *(_DWORD *)(v75 + 188) = v123;
          *(unsigned char *)(v75 + 192) = v124;
          *(void *)(v75 + 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v125;
          uint64_t v84 = v126;
          *(void *)(v75 + 208) = v126;
          if (v84) {
            atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v85 = v75 + 216;
          a1[221] = v75 + 216;
        }
        a1[221] = v85;
        if (v126) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v126);
        }
      }
      ++v72;
    }
    while (v72 != (LiMaterialSamplerInfo **)v15);
    uint64_t v15 = v101;
  }
LABEL_133:
  if (v15)
  {
    int v102 = v15;
    operator delete(v15);
  }
  if (v108) {
    (*(void (**)(HGCrop *))(*(void *)v108 + 24))(v108);
  }
}

void sub_1B7B51970(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

_DWORD *setWorkingGamutForSceneObject(_DWORD *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = (*(uint64_t (**)(void *))(*(void *)v4 + 136))(v4);
      if (v6 >= 1)
      {
        int v7 = v6;
        uint64_t v8 = 0;
        do
        {
          uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 144))(v5, v8);
          setWorkingGamutForSceneObject(v9, a2);
          uint64_t v8 = (v8 + 1);
        }
        while (v7 != v8);
      }
    }
    if (result) {
      result[164] = a2;
    }
  }
  return result;
}

_DWORD *LiHeSolidRendererNode::setScene(PCShared_base **this, LiSceneObject *a2, const LiRenderParameters **a3)
{
  int v6 = (const void **)(this + 51);
  PCPtr<LiImageSource>::operator=<LiImageSource>(this + 51, a2);
  *((_DWORD *)this + 438) = 0;
  LiHeSolidRendererNode::createHeliumNodesFromImageSources(this, v6, a3);
  uint64_t v7 = *((unsigned int *)this + 396);

  return setWorkingGamutForSceneObject(a2, v7);
}

void LiHeSolidRendererNode::setAAType(LiHeSolidRendererNode *this, int a2)
{
  *((_DWORD *)this + 282) = a2;
  uint64_t v3 = *((void *)this + 140);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    a2 = *((_DWORD *)this + 282);
  }
  *((void *)this + 14std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  if (a2 == 4) {
    operator new();
  }
  operator new();
}

void sub_1B7B51FE0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406A02D483);
  _Unwind_Resume(a1);
}

uint64_t LiHeSolidRendererNode::setPixelTransform(uint64_t result, double *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  double v4 = sqrt(a2[12] * a2[12] + a2[13] * a2[13] + a2[14] * a2[14] + a2[15] * a2[15]);
  uint64_t v5 = result + 976;
  do
  {
    for (unint64_t i = 0; i != 128; i += 32)
    {
      if (v3 == 2 || i == 64)
      {
        if (v2 == i) {
          double v7 = 1.0;
        }
        else {
          double v7 = 0.0;
        }
      }
      else
      {
        double v7 = a2[i / 8] / v4;
      }
      *(double *)(v5 + i) = v7;
    }
    ++v3;
    v2 += 32;
    v5 += 8;
    ++a2;
  }
  while (v3 != 4);
  return result;
}

uint64_t LiHeSolidRendererNode::SetInput(HGNode *this, uint64_t a2, HGNode *a3)
{
  if (*((_DWORD *)this + 22) < (int)a2)
  {
    int v6 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v6);
    signed int v7 = *((_DWORD *)this + 22);
    if (v7 < (int)a2)
    {
      do
        HGNode::SetInput(this, v7++, v6);
      while (a2 != v7);
    }
    (*(void (**)(HGNode *))(*(void *)v6 + 24))(v6);
  }
  uint64_t v8 = HGNode::SetInput(this, a2, a3);
  if ((int)a2 >= 1) {
    (*(void (**)(HGNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, a2, 16);
  }
  return v8;
}

void sub_1B7B5219C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float PCMatrix44Tmpl<float>::rightMult(uint64_t a1, float *a2)
{
  for (uint64_t i = 0; i != 64; i += 16)
  {
    uint64_t v3 = (float *)(a1 + i);
    float v4 = *(float *)(a1 + i);
    float v5 = *(float *)(a1 + i + 4);
    float v6 = *(float *)(a1 + i + 8);
    float v7 = *(float *)(a1 + i + 12);
    *uint64_t v3 = (float)((float)((float)(v4 * *a2) + (float)(v5 * a2[4])) + (float)(v6 * a2[8])) + (float)(v7 * a2[12]);
    v3[1] = (float)((float)((float)(v4 * a2[1]) + (float)(v5 * a2[5])) + (float)(v6 * a2[9])) + (float)(v7 * a2[13]);
    v3[2] = (float)((float)((float)(v4 * a2[2]) + (float)(v5 * a2[6])) + (float)(v6 * a2[10])) + (float)(v7 * a2[14]);
    float result = (float)((float)((float)(v4 * a2[3]) + (float)(v5 * a2[7])) + (float)(v6 * a2[11])) + (float)(v7 * a2[15]);
    v3[3] = result;
  }
  return result;
}

int LiHeSolidRendererNode::getTilePadding(LiHeSolidRendererNode *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 1348))
  {
    uint64_t v2 = (LiSolidUtils *)*((void *)this + 51);
    if (v2)
    {
      LiSolidUtils::getBoundsOfGeometry(v2, (double *)v33);
      uint64_t v3 = 0;
      float v4 = (LiHeSolidRendererNode *)((char *)this + 1272);
      memset(v34, 0, sizeof(v34));
      int8x16_t v5 = (int8x16_t)vdupq_lane_s64(v33[0], 0);
      int8x16_t v6 = (int8x16_t)vdupq_lane_s64(v33[1], 0);
      int8x16_t v7 = (int8x16_t)vdupq_lane_s64(v33[2], 0);
      int8x16_t v8 = (int8x16_t)vdupq_lane_s64(v33[3], 0);
      int8x16_t v9 = (int8x16_t)vdupq_lane_s64(v33[4], 0);
      int32x2_t v10 = (int32x2_t)0x100000000;
      __asm { FMOV            V20.2D, #1.0 }
      int8x16_t v16 = (int8x16_t)vdupq_lane_s64(v33[5], 0);
      do
      {
        int32x2_t v17 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)v10, (int8x8_t)0x100000001));
        v18.i64[0] = v17.i32[0];
        v18.i64[1] = v17.i32[1];
        int8x16_t v19 = vbslq_s8(v18, v5, v6);
        int32x2_t v20 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)v10, (int8x8_t)0x200000002));
        v18.i64[0] = v20.i32[0];
        v18.i64[1] = v20.i32[1];
        int8x16_t v21 = vbslq_s8(v18, v7, v8);
        int32x2_t v22 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)v10, (int8x8_t)0x400000004));
        v18.i64[0] = v22.i32[0];
        v18.i64[1] = v22.i32[1];
        int8x16_t v23 = vbslq_s8(v18, v9, v16);
        long long v24 = (double *)&v34[v3];
        vst4q_f64(v24, *(float64x2x4_t *)(&_Q20 - 3));
        int32x2_t v10 = vadd_s32(v10, (int32x2_t)0x200000002);
        v3 += 4;
      }
      while (v3 != 16);
      uint64_t v25 = 0;
      int v26 = (double *)((char *)this + 432);
      double v27 = 0.0;
      do
      {
        long long v31 = 0u;
        long long v32 = 0u;
        PCMatrix44Tmpl<double>::transform<double>(v26, (double *)&v34[v25], (double *)&v31);
        double CircleOfConfusionRadius = LiDofInfo::getCircleOfConfusionRadius(v4, -*(double *)&v32);
        if (CircleOfConfusionRadius > v27) {
          double v27 = CircleOfConfusionRadius;
        }
        v25 += 2;
      }
      while (v25 != 16);
      double v29 = *(float *)v4 * 3.0;
      if (v27 >= v29) {
        double v29 = v27;
      }
      LODWORD(v2) = vcvtpd_u64_f64(fmin(v29, 150.0));
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return (int)v2;
}

uint64_t LiHeSolidRendererNode::RenderTile(HGNode *this, HGTile *a2)
{
  uint64_t result = HGNode::RenderTile(this, a2);
  if (a2)
  {
    uint64_t v5 = *((void *)a2 + 2);
    if (v5)
    {
      int v6 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
      if (v6 >= 1)
      {
        int v7 = 0;
        long long v8 = *((_OWORD *)this + 69);
        int v9 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        uint64_t v10 = 16 * *((int *)a2 + 6);
        do
        {
          if (v9 >= 1)
          {
            uint64_t v11 = 0;
            do
            {
              *(_OWORD *)(v5 + v11) = v8;
              v11 += 16;
            }
            while (16 * v9 != v11);
          }
          ++v7;
          v5 += v10;
        }
        while (v7 != v6);
      }
    }
  }
  return result;
}

uint64_t LiHeSolidRendererNode::RenderPage(LiHeSolidRendererNode *this, HGPage *a2)
{
  return 0;
}

uint64_t LiHeSolidRendererNode::setCameraInfo(LiHeSolidRendererNode *this, const LiCamera *a2)
{
  return (*(uint64_t (**)(const LiCamera *, char *))(*(void *)a2 + 264))(a2, (char *)this + 1592);
}

uint64_t LiHeSolidRendererNode::GetDOD(LiHeSolidRendererNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  LODWORD(v5) = 0;
  unint64_t v4 = 0;
  if (a3) {
    return v5 | (v4 << 32);
  }
  uint64_t v8 = *((void *)this + 51);
  if (!v8) {
    return v5 | (v4 << 32);
  }
  LiSolidUtils::getBoundsOfGeometry(v8, (double *)this + 54, &v68);
  if (v68 <= v69 && v70 <= v71 && v72 <= v73[0])
  {
    size_t v60 = (double *)((char *)this + 976);
    long long v61 = (double *)((char *)this + 688);
    PCMatrix44Tmpl<double>::operator*((uint64_t)this + 976, (long long *)this + 43, (uint64_t)&v66);
    int v9 = 0;
    double v10 = -1.0;
    double v11 = 1.0;
    double v12 = 1.0;
    double v13 = -1.0;
    do
    {
      long long v14 = &v69;
      if (v9) {
        long long v14 = &v68;
      }
      float64_t v15 = *v14;
      int8x16_t v16 = &v71;
      if ((v9 & 2) != 0) {
        int8x16_t v16 = &v70;
      }
      float64_t v17 = *v16;
      int8x16_t v18 = v73;
      if ((v9 & 4) != 0) {
        int8x16_t v18 = &v72;
      }
      float64_t v19 = *v18;
      v64.f64[0] = v15;
      v64.f64[1] = v17;
      v65.f64[0] = v19;
      PCMatrix44Tmpl<double>::transform<double>(v66.f64, v64.f64, v64.f64);
      if (v9)
      {
        if (v11 >= v64.f64[0]) {
          double v11 = v64.f64[0];
        }
        if (v10 <= v64.f64[0]) {
          double v10 = v64.f64[0];
        }
        if (v12 >= v64.f64[1]) {
          double v12 = v64.f64[1];
        }
        if (v13 <= v64.f64[1]) {
          double v13 = v64.f64[1];
        }
      }
      else
      {
        double v13 = v64.f64[1];
        double v12 = v64.f64[1];
        double v10 = v64.f64[0];
        double v11 = v64.f64[0];
      }
      ++v9;
    }
    while (v9 != 8);
    float v21 = v11;
    float v22 = v12;
    float v23 = v10;
    float v24 = v13;
    unint64_t v5 = HGRectMake4f(v20, v21, v22, v23, v24);
    unint64_t v26 = v25;
    unsigned int v27 = 0;
    int v28 = 1;
    float64x2_t v29 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    long long v59 = _Q0;
    char v35 = 1;
    do
    {
      uint64_t v36 = &v70;
      long long v37 = &v69;
      if ((v27 & 1) == 0) {
        long long v37 = &v68;
      }
      if ((v27 & 2) != 0) {
        uint64_t v36 = &v71;
      }
      float64_t v38 = *v36;
      if (v27 >= 4) {
        long long v39 = v73;
      }
      else {
        long long v39 = &v72;
      }
      double v40 = *v39;
      v64.f64[0] = *v37;
      v64.f64[1] = v38;
      v65.f64[0] = v40;
      BOOL v41 = v40 > 0.0;
      v65.f64[1] = 1.0;
      BOOL v42 = v40 <= 0.0;
      float64x2_t v66 = v29;
      float64x2_t v67 = v29;
      PCMatrix44Tmpl<double>::transform<double>(v61, v64.f64, v66.f64);
      float64x2_t v62 = vmulq_n_f64(v66, 1.0 / v67.f64[1]);
      long long v63 = v59;
      float64x2_t v64 = 0u;
      float64x2_t v65 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(v60, v62.f64, v64.f64);
      if (v65.f64[1] < 0.0) {
        return 0x8000000080000000;
      }
      v35 &= v42;
      v28 &= v41;
      ++v27;
      float64x2_t v29 = 0uLL;
    }
    while (v27 != 8);
    double v43 = *((double *)this + 100);
    uint64_t v44 = v43 >= 0.0000001 || v43 <= -0.0000001;
    int v45 = *((_DWORD *)this + 106);
    if (!((v45 == 1) & ~v44 | v35 & 1))
    {
      if (v28)
      {
        if (v45 == 1) {
          LODWORD(v44) = 1;
        }
        if (v44 == 1)
        {
          unint64_t v5 = 0;
          unint64_t v26 = 0;
        }
      }
      else
      {
        if (v45 == 1)
        {
          float v46 = *((double *)this + 125) + *((double *)this + 125);
          float v47 = *((double *)this + 129) + *((double *)this + 129);
          uint64_t v48 = HGRectMake4f(v44, -v46, -v47, v46, v47);
        }
        else
        {
          float64x2_t v64 = 0uLL;
          __asm { FMOV            V2.2D, #-1.0 }
          float64x2_t v65 = _Q2;
          double v51 = *((double *)this + 200);
          if (v51 <= -0.0000001 || v51 >= 0.0000001)
          {
            getClippedAndProjectedBounds(&v68, v61, (uint64_t)&v66);
            float64x2_t v64 = v66;
            float64x2_t v65 = v67;
            BOOL v52 = PCMatrix44Tmpl<double>::transformRect<double>(v60, v64.f64, (uint64_t)&v64);
          }
          else
          {
            PCMatrix44Tmpl<double>::operator*((uint64_t)v60, (long long *)v61, (uint64_t)&v66);
            v62.f64[0] = v68;
            v62.f64[1] = v70;
            *(double *)&long long v63 = v69 - v68;
            *((double *)&v63 + 1) = v71 - v70;
            BOOL v52 = PCMatrix44Tmpl<double>::transformRect<double>(v66.f64, v62.f64, (uint64_t)&v64);
          }
          if (!v52) {
            return 0x8000000080000000;
          }
          float v54 = v64.f64[0];
          float v55 = v64.f64[1];
          float v56 = v64.f64[0] + v65.f64[0];
          float v57 = v64.f64[1] + v65.f64[1];
          uint64_t v48 = HGRectMake4f(v53, v54, v55, v56, v57);
        }
        unint64_t v5 = v48;
        unint64_t v26 = v49;
      }
    }
    unint64_t v4 = HIDWORD(v5);
    if (!HGRectIsInfinite(v5, v26))
    {
      int TilePadding = LiHeSolidRendererNode::getTilePadding(this);
      LODWORD(v5) = v5 - TilePadding;
      unint64_t v4 = (v4 - TilePadding);
    }
    return v5 | (v4 << 32);
  }
  return 0;
}

void getClippedAndProjectedBounds(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = 0;
  double v6 = *a1;
  double v7 = a1[1];
  double v8 = a1[2];
  double v9 = a1[3];
  double v10 = fmin(a1[4], -1.0);
  double v11 = fmin(a1[5], -1.0);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = _Q0;
  do
  {
    if (v5) {
      float64_t v17 = v7;
    }
    else {
      float64_t v17 = v6;
    }
    if ((v5 & 2) != 0) {
      float64_t v18 = v9;
    }
    else {
      float64_t v18 = v8;
    }
    v20.f64[0] = v17;
    v20.f64[1] = v18;
    if ((v5 & 4) != 0) {
      double v19 = v11;
    }
    else {
      double v19 = v10;
    }
    double v21 = v19;
    uint64_t v22 = 0x3FF0000000000000;
    float64x2_t v23 = 0u;
    long long v24 = 0u;
    PCMatrix44Tmpl<double>::transform<double>(a2, v20.f64, v23.f64);
    float64x2_t v20 = vmulq_n_f64(v23, 1.0 / *((double *)&v24 + 1));
    PCRect<double>::operator|=((float64x2_t *)a3, &v20);
    ++v5;
  }
  while (v5 != 8);
}

uint64_t LiHeSolidRendererNode::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  Input = HGRenderer::GetInput(a2, this, a3);

  return HGRenderer::GetDOD(a2, Input);
}

void std::vector<LiMaterialTextureInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<LiMaterialTextureInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<LiMaterialTextureInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 216)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<LiMaterialTextureInfo>::__push_back_slow_path<LiMaterialTextureInfo const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x12F684BDA12F684) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x97B425ED097B42) {
    unint64_t v9 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v9 = v5;
  }
  v24[4] = a1 + 2;
  double v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiMaterialTextureInfo>>(v7, v9);
  double v11 = &v10[216 * v4];
  v24[0] = v10;
  v24[1] = v11;
  v24[3] = &v10[216 * v12];
  long long v13 = *a2;
  long long v14 = a2[1];
  *((_OWORD *)v11 + 2) = a2[2];
  long long v15 = a2[6];
  long long v17 = a2[3];
  long long v16 = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + ProCore_Impl::PCNSRefImpl::release(this + 6) = v15;
  *((_OWORD *)v11 + 3) = v17;
  *((_OWORD *)v11 + 4) = v16;
  long long v18 = a2[10];
  long long v20 = a2[7];
  long long v19 = a2[8];
  *((_OWORD *)v11 + 9) = a2[9];
  *((_OWORD *)v11 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v18;
  *((_OWORD *)v11 + 7) = v20;
  *((_OWORD *)v11 + 8) = v19;
  *(_OWORD *)double v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_DWORD *)v11 + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)v11 + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)v11 + 4ProCore_Impl::PCNSRefImpl::release(this + 6) = *((_DWORD *)a2 + 46);
  *((_DWORD *)v11 + 47) = *((_DWORD *)a2 + 47);
  v11[192] = *((unsigned char *)a2 + 192);
  *((void *)v11 + 25) = *((void *)a2 + 25);
  uint64_t v21 = *((void *)a2 + 26);
  *((void *)v11 + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  v24[2] = v11 + 216;
  std::vector<LiMaterialTextureInfo>::__swap_out_circular_buffer(a1, v24);
  uint64_t v22 = a1[1];
  std::__split_buffer<LiMaterialTextureInfo>::~__split_buffer(v24);
  return v22;
}

void sub_1B7B52CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LiMaterialTextureInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LiMaterialTextureInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LiMaterialTextureInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v22 = a6;
  *((void *)&v22 + 1) = a7;
  long long v21 = v22;
  v19[0] = a1;
  v19[1] = &v21;
  void v19[2] = &v22;
  if (a3 == a5)
  {
    uint64_t v17 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 216);
      long long v9 = *(_OWORD *)(a3 - 200);
      *(_OWORD *)(v7 - 184) = *(_OWORD *)(a3 - 184);
      *(_OWORD *)(v7 - 20std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v9;
      *(_OWORD *)(v7 - 21ProCore_Impl::PCNSRefImpl::release(this + 6) = v8;
      long long v10 = *(_OWORD *)(a3 - 168);
      long long v11 = *(_OWORD *)(a3 - 152);
      long long v12 = *(_OWORD *)(a3 - 136);
      *(_OWORD *)(v7 - 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a3 - 120);
      *(_OWORD *)(v7 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = v12;
      *(_OWORD *)(v7 - 152) = v11;
      *(_OWORD *)(v7 - 168) = v10;
      long long v13 = *(_OWORD *)(a3 - 104);
      long long v14 = *(_OWORD *)(a3 - 88);
      long long v15 = *(_OWORD *)(a3 - 72);
      *(_OWORD *)(v7 - 5ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v15;
      *(_OWORD *)(v7 - 88) = v14;
      *(_OWORD *)(v7 - 104) = v13;
      *(_DWORD *)(v7 - 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_DWORD *)(a3 - 40);
      *(_DWORD *)(v7 - 3ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_DWORD *)(a3 - 36);
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 - 32);
      *(_DWORD *)(v7 - 28) = *(_DWORD *)(a3 - 28);
      *(unsigned char *)(v7 - 24) = *(unsigned char *)(a3 - 24);
      *(void *)(v7 - 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a3 - 16);
      uint64_t v16 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v16;
      if (v16)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v22 + 1);
      }
      a3 -= 216;
      v7 -= 216;
      *((void *)&v22 + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v17 = v22;
  }
  char v20 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v19);
  return v17;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 208);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 216;
  }
}

void **std::__split_buffer<LiMaterialTextureInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<LiMaterialTextureInfo>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v1 - 216;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 216;
    }
  }
}

uint64_t std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__push_back_slow_path<LiHeSolidRendererNode::UniqueInputInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v19 = a1 + 2;
  long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  long long v11 = &v10[24 * v4];
  std::string __p = v10;
  uint64_t v16 = v11;
  long long v18 = &v10[24 * v12];
  *(_DWORD *)long long v11 = *(_DWORD *)a2;
  *((_DWORD *)v11 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  uint64_t v17 = v11 + 24;
  std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B7B530FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 24);
    v2 -= 24;
    *(_DWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    *(void *)(v4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(v2 + 16);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void LiHeLightInitPass::LiHeLightInitPass(LiHeLightInitPass *this, const PCWorkingColorVector *a2)
{
}

void sub_1B7B53218(_Unwind_Exception *a1)
{
  LiHeLightProgramInitPass::~LiHeLightProgramInitPass(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightInitPass::GetDOD(LiHeLightInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0x8000000080000000;
}

uint64_t LiHeLightInitPass::GetROI(LiHeLightInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeLightInitPass::~LiHeLightInitPass(HGNode *this)
{
  LiHeLightProgramInitPass::~LiHeLightProgramInitPass(this);

  HGObject::operator delete(v1);
}

const void *LiHeUtil::isLiHeLightSurfaceFinalPass(const void *this, HGNode *a2)
{
  if (this) {
  return this;
  }
}

uint64_t LiHeUtil::hasHGAnisotropicXForm(LiHeUtil *this, HGNode *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  int v5 = v6;
  if (this)
  {
    hasHGAnisotropicXForunint64_t m = LiHeUtil::aux_hasHGAnisotropicXForm(this, (uint64_t)&v5);
    uint64_t v3 = (void *)v6[0];
  }
  else
  {
    uint64_t v3 = 0;
    hasHGAnisotropicXForunint64_t m = 0;
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v5, v3);
  return hasHGAnisotropicXForm;
}

void sub_1B7B53340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t LiHeUtil::aux_hasHGAnisotropicXForm(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  lpsrc = a1;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a2, (unint64_t *)&lpsrc, (uint64_t *)&lpsrc);
  uint64_t v3 = lpsrc;
  if (v4)
  {
    (*(void (**)(void *, void, unsigned char *))(*(void *)v4 + 104))(v4, 0, v13);
    if (v14 > 0.0) {
      return 1;
    }
    uint64_t v3 = lpsrc;
  }
  int v5 = (*(uint64_t (**)(void *))(*(void *)v3 + 112))(v3);
  if (v5 < 1) {
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = 0;
  while (1)
  {
    unint64_t v8 = (*(uint64_t (**)(void *, uint64_t))(*(void *)lpsrc + 128))(lpsrc, v7);
    if (v8)
    {
      for (uint64_t i = *(void **)(a2 + 8); i; uint64_t i = (void *)*i)
      {
        unint64_t v10 = i[4];
        if (v8 >= v10)
        {
          if (v10 >= v8) {
            goto LABEL_13;
          }
          ++i;
        }
      }
      if (LiHeUtil::aux_hasHGAnisotropicXForm()) {
        return 1;
      }
    }
LABEL_13:
    uint64_t v7 = (v7 + 1);
    if (v7 == v6) {
      return 0;
    }
  }
}

void LiHeLightSurfaceFinalPass::LiHeLightSurfaceFinalPass(LiHeLightProgramSurfaceFinalPass *a1)
{
}

void sub_1B7B53574(_Unwind_Exception *a1)
{
  LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightSurfaceFinalPass::GetDOD(LiHeLightSurfaceFinalPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLightSurfaceFinalPass::GetROI(LiHeLightSurfaceFinalPass *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLightSurfaceFinalPass::~LiHeLightSurfaceFinalPass(HGNode *this)
{
  LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(this);

  HGObject::operator delete(v1);
}

uint64_t LiSetCachingDelegate(uint64_t result)
{
  sDelegate = result;
  return result;
}

uint64_t LiCachingDelegateAddBitmap(uint64_t a1, uint64_t a2)
{
  uint64_t result = sDelegate;
  if (sDelegate) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)sDelegate + 32))(sDelegate, a1, a2);
  }
  return result;
}

uint64_t LiCachingDelegateGetBitmap@<X0>(const PCHash128 *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sDelegate;
  if (sDelegate) {
    return (*(uint64_t (**)(uint64_t, const PCHash128 *))(*(void *)sDelegate + 40))(sDelegate, a1);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t LiHeMix::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  unint64_t v10 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v12 = HGRenderer::GetDOD(a2, v10);

  return HGRectUnion(DOD, v9, v12, v11);
}

uint64_t LiHeMix::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v12 = v11;
  uint64_t v13 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v14 = HGRenderer::GetDOD(a2, v13);
  uint64_t v16 = HGRectUnion(DOD, v12, v14, v15);
  if (a3 != 2)
  {
    if (a3 > 1) {
      return 0;
    }
    else {
      return HGRectIntersection(v5, v4, v16, v17);
    }
  }
  return v5;
}

void LiHeMix::~LiHeMix(HGNode *this)
{
  LiHeMixShader::~LiHeMixShader(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeReflection::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    *(void *)&a4.int var0 = HGRenderer::GetDOD(a2, Input);
  }
  else if (a3)
  {
    *(void *)&a4.int var0 = 0;
  }
  return *(void *)&a4.var0;
}

uint64_t LiHeReflection::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t DOD = HGRenderer::GetDOD(a2, this);
  return HGRectIntersection(v6, v5, DOD, v8);
}

void LiHeReflection::~LiHeReflection(HGNode *this)
{
  LiHeReflectionShader::~LiHeReflectionShader(this);

  HGObject::operator delete(v1);
}

void LiHeRGBAdditionNode::LiHeRGBAdditionNode(LiHeProgramRGBAdditionNode *a1)
{
}

void sub_1B7B53994(_Unwind_Exception *a1)
{
  LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeRGBAdditionNode::GetDOD(LiHeRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeRGBAdditionNode::GetROI(LiHeRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeRGBAdditionNode::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27) {
    return 27;
  }
  else {
    return a2;
  }
}

void LiHeRGBAdditionNode::~LiHeRGBAdditionNode(HGNode *this)
{
  LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(this);

  HGObject::operator delete(v1);
}

void LiGradientEnvGenerator::LiGradientEnvGenerator(LiGradientEnvGenerator *this)
{
  *(unsigned char *)this = 0;
  uint64_t v2 = (void *)((char *)this + 32);
  std::vector<float>::vector((void *)this + 1, 0x400uLL);
  std::vector<float>::vector(v2, 0x400uLL);
  std::vector<float>::vector((void *)this + 7, 0x400uLL);
  std::vector<float>::vector((void *)this + 10, 0x100uLL);
}

void sub_1B7B53A8C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[8] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v3;
  if (*v3)
  {
    v1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v2;
  if (*v2)
  {
    std::regex_traits<char> v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void LiGradientEnvGenerator::setGradientImage(void **this, float *a2)
{
  *(unsigned char *)this = 1;
  uint64_t v3 = this + 1;
  memcpy(this[1], a2, 0x1000uLL);
  heliumBlurGradientEnvironment(v3, this + 4, 128.0);
  heliumBlurGradientEnvironment(this + 4, this + 7, 256.0);
  std::vector<float>::vector(&__dst, 0x100uLL);
  int v4 = (int)(((unint64_t)this[2] - *v3) >> 2) / 4;
  unint64_t v5 = (unint64_t)((char *)v43 - (unsigned char *)__dst) >> 2;
  if ((v5 & 0x80000000) == 0) {
    int v6 = (unint64_t)((char *)v43 - (unsigned char *)__dst) >> 2;
  }
  else {
    int v6 = v5 + 3;
  }
  HGRect::Init(&v45, 0, 0, v4, 1);
  uint64_t v7 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v7, *(void *)&v45.var0, *(void *)&v45.var2, 28, *v3, 16 * v4);
  uint64_t v8 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v8, v7);
  uint64_t v9 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v9);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v9, (const char *)1, v10);
  (*(void (**)(HGTextureWrap *, void, HGBitmapLoader *))(*(void *)v9 + 120))(v9, 0, v8);
  HGTransform::HGTransform((HGTransform *)v44);
  uint64_t v11 = (v6 >> 2);
  HGTransform::Scale((HGTransform *)v44, (float)((float)(int)v11 / (float)v4), 1.0, 1.0);
  uint64_t v12 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v12);
  (*(void (**)(HGXForm *, void, HGTextureWrap *))(*(void *)v12 + 120))(v12, 0, v9);
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v12 + 576))(v12, v44);
  uint64_t v13 = (HGRenderer *)HGObject::operator new(0x450uLL);
  HGRenderer::HGRenderer(v13);
  (*(void (**)(HGRenderer *, uint64_t, void))(*(void *)v13 + 120))(v13, 36, 0);
  uint64_t v14 = (*(uint64_t (**)(HGRenderer *, void, uint64_t, uint64_t, HGXForm *, uint64_t))(*(void *)v13 + 56))(v13, 0, v11 | 0x100000000, 28, v12, 1);
  (*(void (**)(HGBitmap *))(*(void *)v7 + 24))(v7);
  (*(void (**)(HGBitmapLoader *))(*(void *)v8 + 24))(v8);
  (*(void (**)(HGTextureWrap *))(*(void *)v9 + 24))(v9);
  (*(void (**)(HGXForm *))(*(void *)v12 + 24))(v12);
  (*(void (**)(HGRenderer *))(*(void *)v13 + 24))(v13);
  if (*(_DWORD *)(v14 + 16) == 28) {
    memcpy(__dst, *(const void **)(v14 + 80), 16 * v11);
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  HGTransform::~HGTransform((HGTransform *)v44);
  uint64_t v15 = (float32x4_t *)this[10];
  unint64_t v16 = (unint64_t)((unsigned char *)this[11] - (unsigned char *)v15) >> 2;
  uint64_t v17 = (float32x4_t *)__dst;
  if ((int)v16 >= 4)
  {
    uint64_t v18 = v16 >> 2;
    unint64_t v19 = (unint64_t)((char *)v43 - (unsigned char *)__dst) >> 2;
    int v20 = 2 * ((int)v19 / 4);
    double v21 = (float)((float)(int)v18 / (float)(2 * v18 - 1));
    __double2 v22 = __sincos_stret((v21 + v21 + -1.0) * -3.14159265);
    uint64_t v23 = 0;
    do
    {
      __double2 v24 = __sincos_stret((float)((float)(int)v23 / (float)(v18 - 1)) * 3.14159265);
      if ((int)v19 < 4)
      {
        int32x2_t v38 = 0;
        float32x4_t v40 = 0u;
      }
      else
      {
        float v25 = 0.0;
        v38.i32[0] = 0;
        float32x4_t v40 = 0u;
        do
        {
          float32x4_t v35 = v17[v25];
          float v34 = v25;
          __double2 v26 = __sincos_stret((float)(v25 / (float)((int)v19 / 4 - 1)) * 3.14159265);
          float64x2_t v27 = vcvt_hight_f64_f32(v35);
          float64x2_t v36 = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
          float64x2_t v37 = v27;
          float v28 = 0.0;
          v30.i32[0] = v38.i32[0];
          float32x4_t v29 = v40;
          do
          {
            float v39 = *(float *)v30.i32;
            float32x4_t v41 = v29;
            __double2 v31 = __sincos_stret(((float)(v28 / (float)(v20 - 1)) + (float)(v28 / (float)(v20 - 1)) + -1.0) * -3.14159265);
            double v32 = fmax(v22.__cosval * v24.__sinval * (v26.__sinval * v31.__cosval)+ v24.__cosval * v26.__cosval+ v22.__sinval * v24.__sinval * (v26.__sinval * v31.__sinval), 0.0);
            if (v32 > 1.0) {
              double v32 = 1.0;
            }
            double v33 = v32 * v32;
            *(float *)v30.i32 = v33 + v39;
            float32x4_t v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v36, v33), vcvtq_f64_f32(*(float32x2_t *)v41.f32))), vaddq_f64(vmulq_n_f64(v37, v33), vcvt_hight_f64_f32(v41)));
            float v28 = v28 + 1.0;
          }
          while (v28 < (float)v20);
          int32x2_t v38 = v30;
          float32x4_t v40 = v29;
          float v25 = v34 + 1.0;
        }
        while ((float)(v34 + 1.0) < (float)((int)v19 / 4));
      }
      v15[v23++] = vdivq_f32(v40, (float32x4_t)vdupq_lane_s32(v38, 0));
    }
    while (v23 != v18);
  }
  if (v17)
  {
    double v43 = v17;
    operator delete(v17);
  }
}

void sub_1B7B540EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  HGObject::operator delete(v35);
  HGTransform::~HGTransform((HGTransform *)&a35);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t heliumBlurGradientEnvironment(void *a1, void **a2, float a3)
{
  HGRect::Init(&v14, 0, 0, (int)((a1[1] - *a1) >> 2) / 4, 1);
  int v6 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v6, *(void *)&v14.var0, *(void *)&v14.var2, 28, *a1, 4096);
  uint64_t v7 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v7, v6);
  uint64_t v8 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v8);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v8, (const char *)1, v9);
  (*(void (**)(HGTextureWrap *, void, HGBitmapLoader *))(*(void *)v8 + 120))(v8, 0, v7);
  unint64_t v10 = (HGBlur *)HGObject::operator new(0x220uLL);
  HGBlur::HGBlur(v10);
  (*(void (**)(HGBlur *, void, float, double, double, double))(*(void *)v10 + 96))(v10, 0, a3, 0.0, 0.0, 0.0);
  (*(void (**)(HGBlur *, void, HGTextureWrap *))(*(void *)v10 + 120))(v10, 0, v8);
  uint64_t v11 = (HGRenderer *)HGObject::operator new(0x450uLL);
  HGRenderer::HGRenderer(v11);
  (*(void (**)(HGRenderer *, uint64_t, void))(*(void *)v11 + 120))(v11, 36, 0);
  uint64_t v12 = (*(uint64_t (**)(HGRenderer *, void, void, uint64_t, HGBlur *, uint64_t))(*(void *)v11 + 56))(v11, *(void *)&v14.var0, *(void *)&v14.var2, 28, v10, 1);
  (*(void (**)(HGBitmap *))(*(void *)v6 + 24))(v6);
  (*(void (**)(HGBitmapLoader *))(*(void *)v7 + 24))(v7);
  (*(void (**)(HGTextureWrap *))(*(void *)v8 + 24))(v8);
  (*(void (**)(HGBlur *))(*(void *)v10 + 24))(v10);
  (*(void (**)(HGRenderer *))(*(void *)v11 + 24))(v11);
  if (*(_DWORD *)(v12 + 16) == 28) {
    memcpy(*a2, *(const void **)(v12 + 80), 0x1000uLL);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
}

void sub_1B7B5446C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void LiGradientEnvGenerator::buildTexture()
{
  ProGL::GL::GL((ProGL::GL *)v1);
  ProGL::createTexture((ProGL *)v1, v0);
}

void sub_1B7B544F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

uint64_t LiGradientEnvCache::instance(LiGradientEnvCache *this)
{
  {
    operator new();
  }
  return LiGradientEnvCache::instance(void)::instance;
}

void sub_1B7B54580(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t LiGradientEnvCache::get(LiGradientEnvCache *this, const PCHash128 *a2, LiGradientEnvCache::value_t *a3)
{
  unsigned __int8 v17 = 0;
  PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::findValue(*((void *)this + 1), a2, &v17, &v13);
  long long v4 = v13;
  long long v13 = 0uLL;
  unint64_t v5 = (std::__shared_weak_count *)*((void *)a3 + 1);
  *(_OWORD *)a3 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = v14;
  long long v14 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a3 + 3);
  *((_OWORD *)a3 + 1) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = v15;
  long long v15 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a3 + 5);
  *((_OWORD *)a3 + 2) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  long long v10 = v16;
  long long v16 = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a3 + 7);
  *((_OWORD *)a3 + 3) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v16 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  return v17;
}

void LiGradientEnvCache::value_t::~value_t(LiGradientEnvCache::value_t *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void LiGradientEnvCache::add(LiGradientEnvCache *this, const PCHash128 *a2, float *a3, LiGradientEnvCache::value_t *a4)
{
  LiGradientEnvGenerator::LiGradientEnvGenerator((LiGradientEnvGenerator *)&v5);
  LiGradientEnvGenerator::setGradientImage(&v5, a3);
  LiGradientEnvGenerator::buildTexture();
}

void sub_1B7B54830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  LiGradientEnvGenerator::~LiGradientEnvGenerator((LiGradientEnvGenerator *)va);
  _Unwind_Resume(a1);
}

void LiGradientEnvGenerator::~LiGradientEnvGenerator(LiGradientEnvGenerator *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

void LiGradientEnvCache::LiGradientEnvCache(LiGradientEnvCache *this)
{
  PCSingleton::PCSingleton(this, 0);
  *uint64_t v1 = &unk_1F112A778;
  operator new();
}

void sub_1B7B54948(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void LiGradientEnvCache::~LiGradientEnvCache(os_unfair_lock_s **this)
{
  *this = (os_unfair_lock_s *)&unk_1F112A778;
  PCCache<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCache(this + 1);

  PCSingleton::~PCSingleton((PCSingleton *)this);
}

{
  uint64_t vars8;

  *this = (os_unfair_lock_s *)&unk_1F112A778;
  PCCache<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCache(this + 1);
  PCSingleton::~PCSingleton((PCSingleton *)this);

  JUMPOUT(0x1BA9BFBA0);
}

os_unfair_lock_s **PCCache<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCache(os_unfair_lock_s **a1)
{
  return a1;
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::clear(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 + 4;
  PCSpinLock::lock(a1 + 4);
  uint64_t v3 = *(void **)&v1[8]._os_unfair_lock_opaque;
  v1 += 8;
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy((uint64_t)&v1[-2], v3);
  *(void *)&v1[-2]._os_unfair_lock_opaque = v1;
  *(void *)&v1->_os_unfair_lock_opaque = 0;
  *(void *)&v1[2]._os_unfair_lock_opaque = 0;
  *(void *)&v1[6]._os_unfair_lock_opaque = *(void *)&v1[4]._os_unfair_lock_opaque;
  *(void *)&v1[12]._os_unfair_lock_opaque = 0;
  PCSpinLock::unlock(v2);
}

void std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, a2[1]);
    LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)(a2 + 6));
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 16));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::findValue(uint64_t a1@<X0>, const PCHash128 *a2@<X1>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  long long v8 = (os_unfair_lock_s *)(a1 + 16);
  v15[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
  v15[0] = v9;
  if ((void *)(a1 + 32) == v9)
  {
    *a3 = 0;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)a4);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a4 + 2));
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a4 + 4));
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a4 + 6));
  }
  else
  {
    *a4 = v9[6];
    uint64_t v10 = v9[7];
    a4[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    a4[2] = v9[8];
    uint64_t v11 = v9[9];
    a4[3] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    a4[4] = v9[10];
    uint64_t v12 = v9[11];
    a4[5] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    a4[6] = v9[12];
    uint64_t v13 = v9[13];
    a4[7] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(void *)(a1 + 72) + 1;
    *(void *)(a1 + 72) = v14;
    v9[15] = v14;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v15);
    *a3 = 1;
  }
  PCSpinLock::unlock(v8);
}

void sub_1B7B54CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  long long v4 = (std::__shared_weak_count *)v2[5];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)v2[3];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)v2[1];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::addValue(uint64_t a1, const PCHash128 *a2, uint64_t *a3, unint64_t a4)
{
  long long v8 = (os_unfair_lock_s *)(a1 + 16);
  v45[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  if (*(void *)(a1 + 88) >= a4 || *(void *)(a1 + 104))
  {
    uint64_t v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
    uint64_t v10 = v9;
    v45[0] = v9;
    if ((void *)(a1 + 32) == v9)
    {
      uint64_t v23 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 72) = v23;
      uint64_t v25 = *a3;
      uint64_t v24 = a3[1];
      v42[0] = *a3;
      v42[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = a3[2];
      uint64_t v26 = a3[3];
      v42[2] = v27;
      v42[3] = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = a3[4];
      uint64_t v28 = a3[5];
      v42[4] = v29;
      v42[5] = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = a3[6];
      uint64_t v30 = a3[7];
      v42[6] = v31;
      v42[7] = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v43 = a4;
      *((void *)&v43 + 1) = v23;
      uint64_t v44 = 0;
      long long v37 = *(_OWORD *)a2;
      v38[0] = v25;
      v38[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      v38[2] = v27;
      v38[3] = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      v38[4] = v29;
      v38[5] = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v38[6] = v31;
      v38[7] = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      long long v39 = v43;
      uint64_t v40 = v44;
      v41[0] = (uint64_t)std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>((uint64_t **)(a1 + 24), (const PCHash128 *)&v37, (uint64_t)&v37);
      v41[1] = v32;
      LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)v38);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v41);
      unint64_t v33 = *(void *)(a1 + 80) + a4;
      *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v33;
      if (!*(void *)(a1 + 104))
      {
        while (v33 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
        {
          float64x2_t v36 = *(void **)(a1 + 48);
          if (v36 == *(void **)(a1 + 56)) {
            break;
          }
          *(void *)&long long v37 = *v36;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v37);
          float v34 = (uint64_t *)v37;
          float32x4_t v35 = (LiGradientEnvCache::value_t *)(v37 + 48);
          *(void *)(a1 + 80) -= *(void *)(v37 + 112);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v34);
          LiGradientEnvCache::value_t::~value_t(v35);
          operator delete(v34);
          unint64_t v33 = *(void *)(a1 + 80);
        }
      }
      LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)v42);
    }
    else
    {
      uint64_t v12 = *a3;
      uint64_t v11 = a3[1];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (std::__shared_weak_count *)v9[7];
      v10[6] = v12;
      v10[7] = v11;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = a3[2];
      uint64_t v14 = a3[3];
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      long long v16 = (std::__shared_weak_count *)v10[9];
      v10[8] = v15;
      v10[9] = v14;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      uint64_t v18 = a3[4];
      uint64_t v17 = a3[5];
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v19 = (std::__shared_weak_count *)v10[11];
      v10[10] = v18;
      v10[11] = v17;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      uint64_t v21 = a3[6];
      uint64_t v20 = a3[7];
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      __double2 v22 = (std::__shared_weak_count *)v10[13];
      v10[12] = v21;
      v10[13] = v20;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::update(a1, (uint64_t)v45, a4);
    }
  }
  PCSpinLock::unlock(v8);
}

void sub_1B7B55050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)va);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)(v16 - 72));
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 72) + 1;
  *(void *)(a1 + 72) = v6;
  *(void *)(*(void *)a2 + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v6;
  uint64_t v7 = (uint64_t *)(a1 + 48);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), a2);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = a3 - *(void *)(*(void *)a2 + 112);
  if (v9)
  {
    unint64_t v10 = v9 + *(void *)(a1 + 80);
    *(void *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v10;
    *(void *)(v8 + 112) = a3;
    if (!*(void *)(a1 + 104))
    {
      while (v10 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
      {
        uint64_t v11 = *(uint64_t ***)(a1 + 48);
        if (v11 == *(uint64_t ***)(a1 + 56)) {
          break;
        }
        uint64_t v14 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v14);
        uint64_t v12 = v14;
        uint64_t v13 = (LiGradientEnvCache::value_t *)(v14 + 6);
        *(void *)(a1 + 80) -= v14[14];
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v12);
        LiGradientEnvCache::value_t::~value_t(v13);
        operator delete(v12);
        unint64_t v10 = *(void *)(a1 + 80);
      }
    }
  }
}

void *std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x88uLL);
    v9[1] = (uint64_t)(a1 + 1);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data::Data((__n128 *)v6 + 3, (__n128 *)(a3 + 16));
    char v10 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](v9, 0);
  }
  return v6;
}

__n128 PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data::Data(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[1];
  a1->n128_u64[0] = a2->n128_u64[0];
  a1->n128_u64[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v3 = a2[1].n128_u64[1];
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = a2[2].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[2].n128_u64[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = a2[3].n128_u64[1];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[3].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a2[4];
  a1[5].n128_u64[0] = a2[5].n128_u64[0];
  a1[4] = result;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)(v2 + 48));
    }
    operator delete((void *)v2);
  }
}

void LiLight::LiLight(LiLight *this)
{
  *((void *)this + 115) = &unk_1F1199AC8;
  *((void *)this + 11ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((unsigned char *)this + 93ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  LiSceneObject::LiSceneObject(this, (uint64_t *)&off_1F112A898);
  *(void *)this = &unk_1F112A7C8;
  *((void *)this + 115) = &unk_1F112A878;
  *((_DWORD *)this + 142) = -1;
  *((void *)this + 72) = 0x3FF0000000000000;
  *((void *)this + 73) = 0;
  *((void *)this + 75) = 0;
  *((void *)this + 74) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 608), 1.0, 1.0, 1.0, 1.0);
  *((void *)this + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((void *)this + 81) = 0x3FF0000000000000;
  *((_DWORD *)this + 164) = 100;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((void *)this + 87) = 0x3FF921FB54442D18;
  *((_WORD *)this + 36std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 257;
  *((_OWORD *)this + 44) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 724), 0.0, 0.0, 0.0, 1.0);
  *((void *)this + 93) = 0;
  *((unsigned char *)this + 752) = 0;
  *((void *)this + 11std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 105) = 0x3FF0000000000000;
  *((void *)this + 10std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 95) = 0x3FF0000000000000;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  ShadowCubeMap::ShadowCubeMap((LiLight *)((char *)this + 888));
  *((_DWORD *)this + 228) = -1;
}

void sub_1B7B55480(_Unwind_Exception *a1)
{
  LiSceneObject::~LiSceneObject((PCSharedCount *)v1, (PC_Sp_counted_base **)&off_1F112A898);
  *(void *)(v1 + 92std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 93ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 928));
  _Unwind_Resume(a1);
}

uint64_t LiLight::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    LiSceneObject::operator=(a1, a2);
    uint64_t v4 = 0;
    *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 568);
    long long v5 = *(_OWORD *)(a2 + 576);
    *(void *)(a1 + 592) = *(void *)(a2 + 592);
    *(_OWORD *)(a1 + 57ProCore_Impl::PCNSRefImpl::release(this + 6) = v5;
    *(void *)(a1 + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(a2 + 600);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    uint64_t v6 = *(void *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(void *)(a1 + 64std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v6;
    *(void *)(a1 + 648) = *(void *)(a2 + 648);
    *(_DWORD *)(a1 + 65ProCore_Impl::PCNSRefImpl::release(this + 6) = *(_DWORD *)(a2 + 656);
    long long v7 = *(_OWORD *)(a2 + 664);
    *(void *)(a1 + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(a2 + 680);
    *(_OWORD *)(a1 + 664) = v7;
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(unsigned char *)(a1 + 72std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(unsigned char *)(a2 + 720);
    BOOL v9 = (*(_DWORD *)(a2 + 656) - 1) < 3 && *(unsigned char *)(a2 + 721) != 0;
    *(unsigned char *)(a1 + 721) = v9;
    *(_OWORD *)(a1 + 724) = *(_OWORD *)(a2 + 724);
    *(void *)(a1 + 744) = *(void *)(a2 + 744);
    *(unsigned char *)(a1 + 752) = *(unsigned char *)(a2 + 752);
    uint64_t v10 = a2 + 760;
    uint64_t v11 = a1 + 760;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v11 + i) = *(void *)(v10 + i);
      ++v4;
      v11 += 32;
      v10 += 32;
    }
    while (v4 != 4);
    int v13 = *(_DWORD *)(a2 + 900);
    if (*(_DWORD *)(a1 + 896) >= v13) {
      int v14 = *(_DWORD *)(a1 + 896);
    }
    else {
      int v14 = (2 * v13) | 1;
    }
    PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(a1 + 888, v13, v14);
    if (*(int *)(a2 + 900) >= 1)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(a2 + 904) + 24 * v15;
        uint64_t v17 = *(void *)(a1 + 904) + 24 * v15;
        int v18 = *(_DWORD *)(v16 + 12);
        if (*(_DWORD *)(v17 + 8) >= v18) {
          int v19 = *(_DWORD *)(v17 + 8);
        }
        else {
          int v19 = (2 * v18) | 1;
        }
        PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(*(void *)(a1 + 904) + 24 * v15, v18, v19);
        if (*(int *)(v16 + 12) >= 1)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          do
          {
            ShadowMap::operator=(*(void *)(v17 + 16) + v20, *(void *)(v16 + 16) + v20);
            ++v21;
            v20 += 600;
          }
          while (v21 < *(int *)(v16 + 12));
        }
        ++v15;
      }
      while (v15 < *(int *)(a2 + 900));
    }
    *(_DWORD *)(a1 + 912) = *(_DWORD *)(a2 + 912);
  }
  return a1;
}

void LiLight::LiLight(LiLight *this, const LiLight *a2)
{
  *((void *)this + 115) = &unk_1F1199AC8;
  *((void *)this + 11ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((unsigned char *)this + 93ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  LiSceneObject::LiSceneObject(this, (uint64_t *)&off_1F112A898);
  *(void *)this = &unk_1F112A7C8;
  *((void *)this + 115) = &unk_1F112A878;
  *((void *)this + 72) = 0;
  *((void *)this + 74) = 0;
  *((void *)this + 73) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 608));
  *((void *)this + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((void *)this + 83) = 0;
  *((_OWORD *)this + 42) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 724));
  *((void *)this + 11std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 105) = 0x3FF0000000000000;
  *((void *)this + 10std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 95) = 0x3FF0000000000000;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  ShadowCubeMap::ShadowCubeMap((LiLight *)((char *)this + 888));
  LiLight::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_1B7B557BC(_Unwind_Exception *a1)
{
  ShadowCubeMap::~ShadowCubeMap(v3);
  LiSceneObject::~LiSceneObject((PCSharedCount *)v1, (PC_Sp_counted_base **)&off_1F112A898);
  *(void *)(v1 + 92std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 93ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 928));
  _Unwind_Resume(a1);
}

uint64_t LiSceneObject::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    goto LABEL_17;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  do
  {
    for (uint64_t i = 0; i != 32; i += 8)
      *(void *)(v5 + i) = *(void *)(v6 + i);
    ++v4;
    v5 += 32;
    v6 += 32;
  }
  while (v4 != 4);
  if (a2 == a1)
  {
LABEL_17:
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = a1 + 136;
    uint64_t v10 = a2 + 136;
    do
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v9 + j) = *(void *)(v10 + j);
      ++v8;
      v9 += 32;
      v10 += 32;
    }
    while (v8 != 4);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    if (a2 != a1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = a1 + 272;
      uint64_t v14 = a2 + 272;
      do
      {
        for (uint64_t k = 0; k != 32; k += 8)
          *(void *)(v13 + k) = *(void *)(v14 + k);
        ++v12;
        v13 += 32;
        v14 += 32;
      }
      while (v12 != 4);
    }
  }
  long long v16 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 40std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = v16;
  long long v17 = *(_OWORD *)(a2 + 432);
  long long v18 = *(_OWORD *)(a2 + 448);
  long long v19 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(void *)(a2 + 480);
  *(_OWORD *)(a1 + 448) = v18;
  *(_OWORD *)(a1 + 464) = v19;
  *(_OWORD *)(a1 + 432) = v17;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  PCSharedCount::PCSharedCount(&v24, (const PCSharedCount *)(a2 + 496));
  PCSharedCount::operator=((uint64_t *)(a1 + 496), (uint64_t *)&v24);
  PCSharedCount::~PCSharedCount(&v24);
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  if (a2 != a1)
  {
    LiString::dec((LiString *)(a1 + 512));
    uint64_t v20 = *(void *)(a2 + 512);
    *(void *)(a1 + 512) = v20;
    if (v20) {
      atomic_fetch_add((atomic_uint *volatile)(v20 - 12), 1u);
    }
  }
  long long v21 = *(_OWORD *)(a2 + 520);
  long long v22 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 549) = *(_OWORD *)(a2 + 549);
  *(_OWORD *)(a1 + 52std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v21;
  *(_OWORD *)(a1 + 53ProCore_Impl::PCNSRefImpl::release(this + 6) = v22;
  return a1;
}

void sub_1B7B559A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

uint64_t LiLight::getSolidSceneID(LiLight *this)
{
  return *((unsigned int *)this + 228);
}

void LiLight::~LiLight(PCSharedCount *this)
{
  this[115].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[117].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[116].var0);
}

{
  uint64_t vars8;

  LiLight::~LiLight(this);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiLight::~LiLight(LiLight *this)
{
}

{
  uint64_t vars8;

  LiLight::~LiLight((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1BA9BFBA0);
}

double LiLight::localBoundingBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 664);
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(a1 + 672);
  *(void *)(a2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(void *)(a2 + 24) = v3;
  double result = *(double *)(a1 + 680);
  *(double *)(a2 + 32) = result;
  *(double *)(a2 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = result;
  return result;
}

double LiLight::plane@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void LiLight::cast(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
}

double *LiLight::transform(uint64_t a1, double *a2)
{
  PCMatrix44Tmpl<double>::transform<double>(a2, (double *)(a1 + 664), (double *)(a1 + 664));

  return PCMatrix44Tmpl<double>::transform_vector<double>(a2, (double *)(a1 + 624), (double *)(a1 + 624));
}

uint64_t LiLight::mapShadows(uint64_t a1, uint64_t a2)
{
  return ShadowCubeMap::operator*=(a1 + 888, a2);
}

uint64_t LiLight::getHeliumNodeSurface@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = a2[1];
  if (*(unsigned char *)(v4 + 98)
    && ((int v5 = *(_DWORD *)(result + 656), (v5 - 1) <= 2) && *(unsigned char *)(result + 721)
     || !*(unsigned char *)(v4 + 103)))
  {
    *a3 = 0;
    switch(v5)
    {
      case 0:
        LiLight::getAmbientNode(result);
      case 1:
        double result = LiLight::getDirectionalNode(result, (uint64_t)a2, &v7);
        goto LABEL_14;
      case 2:
        double result = LiLight::getPointNodeSurface(result, (uint64_t)a2, &v7);
LABEL_14:
        if (v7) {
          *a3 = v7;
        }
        break;
      case 3:
        LiLight::getSpotNodeSurface(result, a2, &v7);
      default:
        return result;
    }
  }
  else
  {
    double result = *a2;
    *a3 = *a2;
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v6();
    }
  }
  return result;
}

void LiLight::getAmbientNode(uint64_t a1)
{
  double v1 = *(double *)(a1 + 648);
  float v2 = v1 * *(float *)(a1 + 608);
  float v3 = v1 * *(float *)(a1 + 612);
  *(float *)&double v1 = v1 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v5, v2, v3, *(float *)&v1, *(float *)(a1 + 620));
  uint64_t v4 = (LiHeLightAmbient *)HGObject::operator new(0x1A0uLL);
  LiHeLightAmbient::LiHeLightAmbient(v4);
}

void sub_1B7B55DB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiLight::getDirectionalNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v32 = *(_OWORD *)(a1 + 624);
  uint64_t v33 = *(void *)(a1 + 640);
  uint64_t v6 = PCMatrix44Tmpl<double>::transform_vector<double>(*(double **)(a2 + 32), (double *)&v32, (double *)&v32);
  double v7 = *v6;
  double v8 = v6[1];
  double v9 = v6[2];
  double v10 = sqrt(v7 * v7 + v8 * v8 + v9 * v9);
  if (v10 < 0.000000100000001 && v10 > -0.000000100000001) {
    double v10 = 1.0;
  }
  v31[0] = v7 / v10;
  v31[1] = v8 / v10;
  v31[2] = v9 / v10;
  uint64_t v12 = *(double **)(a2 + 24);
  double v13 = *v12 + v7 / v10;
  double v14 = v8 / v10 + v12[1];
  double v15 = v9 / v10 + v12[2];
  double v16 = sqrt(v13 * v13 + v14 * v14 + v15 * v15);
  if (v16 < 0.000000100000001 && v16 > -0.000000100000001) {
    double v16 = 1.0;
  }
  v30[0] = v13 / v16;
  v30[1] = v14 / v16;
  v30[2] = v15 / v16;
  double v18 = *(double *)(a1 + 648);
  float v19 = v18 * *(float *)(a1 + 608);
  float v20 = v18 * *(float *)(a1 + 612);
  *(float *)&double v18 = v18 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v29, v19, v20, *(float *)&v18, *(float *)(a1 + 620));
  uint64_t v21 = *(void *)(a2 + 8);
  if (*(unsigned char *)(v21 + 97)) {
    long long v28 = *(_OWORD *)(v21 + 64);
  }
  else {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v28, 0.0, 0.0, 0.0, 0.0);
  }
  uint64_t v22 = *(void *)a2;
  uint64_t v27 = v22;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  uint64_t v23 = *(void *)(a2 + 16);
  double v24 = *(double *)(*(void *)(a2 + 8) + 88);
  uint64_t v25 = HGObject::operator new(0x1A0uLL);
  LiHeLightDirectional::LiHeLightDirectional(v25, &v27, v31, v30, v29, &v28, v23, v24);
  *a3 = v25;
  uint64_t result = v27;
  if (v27) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
  return result;
}

void sub_1B7B5604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t LiLight::getPointNodeSurface@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 97);
  double v7 = *(double *)(a1 + 648);
  float v8 = v7 * *(float *)(a1 + 608);
  float v9 = v7 * *(float *)(a1 + 612);
  *(float *)&double v7 = v7 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v26, v8, v9, *(float *)&v7, *(float *)(a1 + 620));
  uint64_t v10 = *(void *)(a1 + 592);
  long long v24 = *(_OWORD *)(a1 + 576);
  uint64_t v25 = v10;
  long long v22 = *(_OWORD *)(a1 + 664);
  uint64_t v23 = *(void *)(a1 + 680);
  *a3 = 0;
  if (v6)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v21 = v11;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    }
    PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v22, (double *)&v22);
    uint64_t v12 = (LiHeLightProgramPointSurface *)HGObject::operator new(0x1A0uLL);
    LiHeLightPointSurface::LiHeLightPointSurface(v12);
  }
  uint64_t v13 = *(void *)a2;
  uint64_t v21 = v13;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
  }
  double v14 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v22, (double *)&v22);
  uint64_t v15 = *(void *)(a2 + 16);
  double v16 = *(double *)(a1 + 600);
  uint64_t v17 = *(void *)(a2 + 40);
  double v18 = HGObject::operator new(0x1A0uLL);
  float v19 = v16;
  LiHeLightPointSurfaceDiffuse::LiHeLightPointSurfaceDiffuse(v18, &v21, v14, v26, v15, &v24, v17, v19);
  if (v18) {
    *a3 = v18;
  }
  uint64_t result = v21;
  if (v21) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21);
  }
  return result;
}

void sub_1B7B562E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void LiLight::getSpotNodeSurface(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  int v6 = *(unsigned __int8 *)(a2[1] + 97);
  double v7 = *(double *)(a1 + 648);
  float v8 = v7 * *(float *)(a1 + 608);
  float v9 = v7 * *(float *)(a1 + 612);
  *(float *)&double v7 = v7 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v17, v8, v9, *(float *)&v7, *(float *)(a1 + 620));
  long long v15 = *(_OWORD *)(a1 + 664);
  uint64_t v16 = *(void *)(a1 + 680);
  double v10 = -*(double *)(a1 + 640);
  float64x2_t v13 = vnegq_f64(*(float64x2_t *)(a1 + 624));
  double v14 = v10;
  *a3 = 0;
  if (v6)
  {
    if (*a2) {
      (*(void (**)(void))(*(void *)*a2 + 16))(*a2);
    }
    PCMatrix44Tmpl<double>::transform<double>((double *)a2[4], (double *)&v15, (double *)&v15);
    PCMatrix44Tmpl<double>::transform_vector<double>((double *)a2[4], v13.f64, v13.f64);
    uint64_t v11 = (LiHeLightProgramSpotSurface *)HGObject::operator new(0x1A0uLL);
    LiHeLightSpotSurface::LiHeLightSpotSurface(v11);
  }
  if (*a2) {
    (*(void (**)(void))(*(void *)*a2 + 16))(*a2);
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)a2[4], (double *)&v15, (double *)&v15);
  PCMatrix44Tmpl<double>::transform_vector<double>((double *)a2[4], v13.f64, v13.f64);
  uint64_t v12 = (LiHeLightProgramSpotSurfaceDiffuse *)HGObject::operator new(0x1A0uLL);
  LiHeLightSpotSurfaceDiffuse::LiHeLightSpotSurfaceDiffuse(v12);
}

void sub_1B7B5670C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void LiLight::getHeliumNodeShadows(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 656);
  if ((v4 - 1) <= 2 && *(unsigned char *)(a1 + 721))
  {
    *a3 = 0;
    if (v4 == 3 || v4 == 2 || v4 == 1)
    {
      LiLight::getPointNodeShadow(a1, (uint64_t)a2, &v7);
      if (v7) {
        *a3 = (uint64_t)v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *a2;
    *a3 = *a2;
    if (v5)
    {
      int v6 = *(void (**)(void))(*(void *)v5 + 16);
      v6();
    }
  }
}

void LiLight::getPointNodeShadow(uint64_t a1@<X0>, uint64_t a2@<X1>, LiHeLightInitPass **a3@<X8>)
{
  v107[1] = *(double *)MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 656) - 1) > 2
    || !*(unsigned char *)(a1 + 721)
    || (int v6 = (long long *)(a2 + 8), !*(unsigned char *)(*(void *)(a2 + 8) + 102)))
  {
    double v44 = *(double *)a2;
    *a3 = *(LiHeLightInitPass **)a2;
    if (v44 != 0.0)
    {
      HGRect v45 = *(void (**)(void))(**(void **)&v44 + 16);
      v45();
    }
    return;
  }
  double v7 = *(double *)a2;
  double v91 = v7;
  if (v7 != 0.0) {
    (*(void (**)(double))(**(void **)&v7 + 16))(COERCE_DOUBLE(*(void *)&v7));
  }
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v96 = *(_OWORD *)(a2 + 72);
  long long v97 = v8;
  long long v98 = *(_OWORD *)(a2 + 104);
  uint64_t v99 = *(void *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v92 = *v6;
  long long v93 = v9;
  long long v10 = *(_OWORD *)(a2 + 56);
  long long v94 = *(_OWORD *)(a2 + 40);
  long long v95 = v10;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  if (*(int *)(a1 + 900) < 1) {
    goto LABEL_61;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  do
  {
    double v100 = 0.0;
    *(void *)&long long v85 = 0;
    LiLight::getShadowFromFace(a1, (uint64_t *)&v91, *(void *)(a1 + 904) + v11, (uint64_t *)&v100, (uint64_t *)&v85);
    if (v100 == 0.0) {
      goto LABEL_16;
    }
    if (v90)
    {
      float64x2_t v13 = (LiHeProgramMaxBlend *)HGObject::operator new(0x1A0uLL);
      LiHeMaxBlend::LiHeMaxBlend(v13);
    }
    uint64_t v90 = *(HGNode **)&v100;
    (*(void (**)(void))(**(void **)&v100 + 16))();
    uint64_t v14 = v89;
    uint64_t v15 = v85;
    if (v89 != (void)v85)
    {
      if (v89)
      {
        (*(void (**)(void))(*(void *)v89 + 24))();
        uint64_t v15 = v85;
      }
      uint64_t v89 = v15;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      }
LABEL_16:
      uint64_t v14 = v85;
    }
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
    }
    if (v100 != 0.0) {
      (*(void (**)(double))(**(void **)&v100 + 24))(COERCE_DOUBLE(*(void *)&v100));
    }
    ++v12;
    v11 += 24;
  }
  while (v12 < *(int *)(a1 + 900));
  if (v90)
  {
    if (*(double *)(a1 + 744) != 0.0)
    {
      int v16 = *(unsigned __int8 *)(a1 + 752);
      uint64_t v17 = *(void *)(a2 + 80);
      double v100 = 0.0;
      double v101 = 0.0;
      double v102 = 1.0;
      PCMatrix44Tmpl<double>::transform_normal<double>(v17, &v100, &v87);
      double v18 = sqrt(v87.f64[0] * v87.f64[0] + v87.f64[1] * v87.f64[1] + v88 * v88);
      if (v18 <= -0.000000100000001 || v18 >= 0.000000100000001)
      {
        v87.f64[0] = v87.f64[0] / v18;
        v87.f64[1] = v87.f64[1] / v18;
        double v88 = v88 / v18;
      }
      float v19 = *(double **)(a2 + 80);
      double v100 = 0.0;
      double v101 = 0.0;
      double v102 = 0.0;
      double v103 = 1.0;
      long long v85 = 0u;
      long long v86 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(v19, &v100, (double *)&v85);
      double v20 = *(double *)(a1 + 664);
      double v21 = *(double *)(a1 + 672);
      double v22 = *(double *)(a1 + 680);
      double v23 = (v20 - *(double *)&v85) * v87.f64[0]
          + (v21 - *((double *)&v85 + 1)) * v87.f64[1]
          + (v22 - *(double *)&v86) * v88;
      v84[0] = v20 - v87.f64[0] * v23;
      v84[1] = v21 - v87.f64[1] * v23;
      v84[2] = v22 - v88 * v23;
      double v84[3] = 1.0;
      long long v24 = *(double **)(a2 + 72);
      float64x2_t v82 = 0u;
      long long v83 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(v24, v84, v82.f64);
      double v25 = 1.0;
      double v26 = v82.f64[0] * (1.0 / *((double *)&v83 + 1));
      double v27 = 1.0 / *((double *)&v83 + 1) * v82.f64[1];
      v82.f64[0] = v26;
      v82.f64[1] = v27;
      double v28 = 1.0 / *((double *)&v83 + 1) * *(double *)&v83;
      *(double *)&long long v83 = v28;
      *((double *)&v83 + 1) = *((double *)&v83 + 1) * (1.0 / *((double *)&v83 + 1));
      if (v16) {
        double v25 = *(double *)(a1 + 744);
      }
      uint64_t v29 = *(float64x2_t **)(a2 + 88);
      double v80 = 0.0;
      double v81 = 0.0;
      __p[0] = *(void **)&v26;
      __p[1] = *(void **)&v27;
      double v79 = v28;
      approximateStretch(v29, (double *)__p, &v81, &v80, v25);
      __p[0] = *(void **)&v82.f64[0];
      __p[1] = 0;
      double v79 = 0.0;
      approximateStretch(v29, (double *)__p, &v100, &v101, v25);
      __p[0] = 0;
      __p[1] = *(void **)&v82.f64[1];
      double v79 = 0.0;
      approximateStretch(v29, (double *)__p, &v102, &v103, v25);
      __asm { FMOV            V1.2D, #0.5 }
      *(float64x2_t *)std::string __p = vmulq_f64(v82, _Q1);
      double v79 = 0.0;
      approximateStretch(v29, (double *)__p, &v104, &v105, v25);
      __p[0] = 0;
      __p[1] = 0;
      double v79 = 0.0;
      approximateStretch(v29, (double *)__p, &v106, v107, v25);
      double v35 = v81;
      if (v81 >= v106) {
        double v35 = v106;
      }
      if (v35 >= v104) {
        double v35 = v104;
      }
      if (v35 >= v102) {
        double v35 = v102;
      }
      double v36 = v100;
      if (v35 < v100) {
        double v36 = v35;
      }
      double v37 = v80;
      if (v80 >= v107[0]) {
        double v37 = v107[0];
      }
      if (v37 >= v105) {
        double v37 = v105;
      }
      if (v37 >= v103) {
        double v37 = v103;
      }
      if (v37 >= v101) {
        double v37 = v101;
      }
      if (v16)
      {
        double v38 = *(double *)(a1 + 744) * 15.0;
        if (v38 >= v36) {
          double v39 = v36;
        }
        else {
          double v39 = *(double *)(a1 + 744) * 15.0;
        }
        if (v38 >= v37) {
          double v40 = v37;
        }
        else {
          double v40 = *(double *)(a1 + 744) * 15.0;
        }
        double v80 = v40;
        double v81 = v39;
        float32x4_t v41 = (HGBlur *)HGObject::operator new(0x220uLL);
        HGBlur::HGBlur(v41);
        (*(void (**)(HGBlur *, void, HGNode *))(*(void *)v41 + 120))(v41, 0, v90);
        float v42 = v39;
        float v43 = v40;
        (*(void (**)(HGBlur *, void, float, float, double, double))(*(void *)v41 + 96))(v41, 0, v42, v43, 0.0, 0.0);
        if (v90 != (HGNode *)v41)
        {
          if (v90) {
            (*(void (**)(void))(*(void *)v90 + 24))();
          }
          uint64_t v90 = (HGNode *)v41;
          (*(void (**)(HGBlur *))(*(void *)v41 + 16))(v41);
        }
        (*(void (**)(HGBlur *))(*(void *)v41 + 24))(v41);
      }
      else
      {
        if (v36 > 15.0) {
          double v36 = 15.0;
        }
        double v76 = v36;
        if (v37 <= 15.0) {
          double v48 = v37;
        }
        else {
          double v48 = 15.0;
        }
        double v80 = v48;
        double v81 = v36;
        LODWORD(__y) = 0;
        std::vector<float>::vector(__p, 1uLL, &__y);
        double v49 = *(double *)(a1 + 744);
        double __y = 0.0;
        long double v50 = modf((v49 + -100.0) / 100.0, &__y);
        double v51 = v50 + __y;
        if (v51 <= 0.0) {
          double v52 = 6.0;
        }
        else {
          double v52 = v51 + 6.0;
        }
        double v53 = __y + 7.0;
        if (v49 < 2.0) {
          double v53 = 0.0;
        }
        int v54 = (int)v53;
        if ((int)v53 >= 1)
        {
          int v55 = 0;
          float v56 = *(float *)__p[0];
          do
          {
            double v57 = fmax(floor(v49 * pow(((double)v55 + 1.0) / (double)v54, v52) + 1.0 + 0.0000001), 2.0);
            if (v57 > v56 + 2.0)
            {
              float v56 = v57;
              long long v58 = (char *)__p[1];
              if (__p[1] >= (void *)*(void *)&v79)
              {
                size_t v60 = (char *)__p[0];
                int64_t v61 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v63 = *(void *)&v79 - (unint64_t)__p[0];
                if ((uint64_t)(*(void *)&v79 - (unint64_t)__p[0]) >> 1 > v62) {
                  unint64_t v62 = v63 >> 1;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  float64x2_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v79, v64);
                  size_t v60 = (char *)__p[0];
                  long long v58 = (char *)__p[1];
                }
                else
                {
                  float64x2_t v65 = 0;
                }
                float64x2_t v66 = (float *)&v65[4 * v61];
                *float64x2_t v66 = v56;
                long long v59 = v66 + 1;
                while (v58 != v60)
                {
                  int v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66-- - 1) = v67;
                }
                __p[0] = v66;
                __p[1] = v59;
                *(void *)&double v79 = &v65[4 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                *(float *)__p[1] = v56;
                long long v59 = v58 + 4;
              }
              __p[1] = v59;
            }
            ++v55;
          }
          while (v55 != v54);
        }
        double v68 = (HGModulatedBlur *)HGObject::operator new(0x1D0uLL);
        HGModulatedBlur::HGModulatedBlur(v68);
        *(void *)double v68 = &unk_1F112C918;
        off_1F112C990((HGNode *)v68, 0, v90);
        (*(void (**)(HGModulatedBlur *, uint64_t, uint64_t))(*(void *)v68 + 120))(v68, 1, v89);
        HGModulatedBlur::setBlurValues(v68, (const float *)__p[0], ((char *)__p[1] - (char *)__p[0]) >> 2);
        (*(void (**)(HGModulatedBlur *, void, float, double, double, double))(*(void *)v68 + 96))(v68, 0, 1.0, 0.0, 0.0, 0.0);
        float v69 = v76;
        float v70 = v48;
        (*(void (**)(HGModulatedBlur *, uint64_t, float, float, double, double))(*(void *)v68 + 96))(v68, 1, v69, v70, 0.0, 0.0);
        if (v90 != (HGNode *)v68)
        {
          if (v90) {
            (*(void (**)(void))(*(void *)v90 + 24))();
          }
          uint64_t v90 = (HGNode *)v68;
          (*(void (**)(HGModulatedBlur *))(*(void *)v68 + 16))(v68);
        }
        (*(void (**)(HGModulatedBlur *))(*(void *)v68 + 24))(v68);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v71 = *(void *)v6;
    if (!*(unsigned char *)(*(void *)v6 + 98))
    {
      LiLight::NodeParams::setInput((uint64_t *)&v91, (uint64_t *)&v90);
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v100, 1.0, 1.0, 1.0, 0.0);
      double v72 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
      LiHeLightInitPass::LiHeLightInitPass(v72, (const PCWorkingColorVector *)&v100);
      *(void *)&long long v85 = v72;
      LiLight::stencilShadowByLight(a1, (uint64_t)&v91, &v100);
      unint64_t v73 = *(HGNode **)&v100;
      if (v90 != *(HGNode **)&v100)
      {
        if (v90) {
          (*(void (**)(void))(*(void *)v90 + 24))();
        }
        uint64_t v90 = v73;
        if (v73) {
          (*(void (**)(HGNode *))(*(void *)v73 + 16))(v73);
        }
      }
      LiLight::NodeParams::setInput((uint64_t *)&v91, (uint64_t *)&v85);
      if (v73) {
        (*(void (**)(HGNode *))(*(void *)v73 + 24))(v73);
      }
      if ((void)v85) {
        (*(void (**)(void))(*(void *)v85 + 24))(v85);
      }
      uint64_t v71 = *(void *)v6;
    }
    if (*(unsigned char *)(v71 + 103)) {
      BOOL v74 = 1;
    }
    else {
      BOOL v74 = *(unsigned __int8 *)(v71 + 98) == 0;
    }
    double v100 = v91;
    if (v91 != 0.0) {
      (*(void (**)(double))(**(void **)&v91 + 16))(COERCE_DOUBLE(*(void *)&v91));
    }
    unint64_t v75 = (LiHeLightInitPass *)HGObject::operator new(0x1B0uLL);
    LiHeShadowSoft::LiHeShadowSoft(v75, &v100, &v90, a1 + 724, v74);
    *a3 = v75;
    if (v100 != 0.0) {
      (*(void (**)(double))(**(void **)&v100 + 24))(COERCE_DOUBLE(*(void *)&v100));
    }
    goto LABEL_120;
  }
LABEL_61:
  if (*(unsigned char *)(*(void *)v6 + 103))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v100, 0.0, 0.0, 0.0, 0.0);
    float v46 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
    LiHeLightInitPass::LiHeLightInitPass(v46, (const PCWorkingColorVector *)&v100);
    *a3 = v46;
  }
  else
  {
    double v47 = *(double *)a2;
    *a3 = *(LiHeLightInitPass **)a2;
    if (v47 != 0.0) {
      (*(void (**)(double))(**(void **)&v47 + 16))(COERCE_DOUBLE(*(void *)&v47));
    }
  }
LABEL_120:
  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 24))(v89);
  }
  if (v90) {
    (*(void (**)(HGNode *))(*(void *)v90 + 24))(v90);
  }
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&v91);
}

void sub_1B7B57610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 24))(a25);
  }
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 24))(a32);
  }
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 24))(a33);
  }
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&a34);
  _Unwind_Resume(a1);
}

uint64_t LiLight::getShadowFromFace(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if ((*(_DWORD *)(a1 + 656) - 1) <= 2 && *(unsigned char *)(a1 + 721) && *(unsigned char *)(a2[1] + 102))
  {
    uint64_t v23 = 0;
    long long v24 = 0;
    if (*(int *)(a3 + 12) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v21 = 0;
        double v22 = 0;
        LiLight::getShadowFromMap((double *)a1, (uint64_t)a2, *(void *)(a3 + 16) + v10, &v22, &v21);
        if (v22)
        {
          if (v24)
          {
            uint64_t v12 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
            LiHeShadowBlendAdd::LiHeShadowBlendAdd(v12);
          }
          long long v24 = v22;
          (*(void (**)(void))(*(void *)v22 + 16))();
          uint64_t v13 = v23;
          uint64_t v14 = v21;
          if (v23 == v21) {
            goto LABEL_15;
          }
          if (v23)
          {
            (*(void (**)(void))(*(void *)v23 + 24))();
            uint64_t v14 = v21;
          }
          uint64_t v23 = v14;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
          }
        }
        uint64_t v13 = v21;
LABEL_15:
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
        }
        if (v22) {
          (*(void (**)(void *))(*(void *)v22 + 24))(v22);
        }
        ++v11;
        v10 += 600;
        if (v11 >= *(int *)(a3 + 12))
        {
          uint64_t v15 = v24;
          goto LABEL_30;
        }
      }
    }
    uint64_t v15 = 0;
LABEL_30:
    uint64_t v18 = *a4;
    if ((void *)*a4 != v15)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 24))(*a4);
        uint64_t v15 = v24;
      }
      *a4 = (uint64_t)v15;
      if (v15) {
        (*(void (**)(void *))(*(void *)v15 + 16))(v15);
      }
    }
    uint64_t v19 = *a5;
    uint64_t v20 = v23;
    if (*a5 != v23)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
        uint64_t v20 = v23;
      }
      *a5 = v20;
      if (!v20) {
        goto LABEL_42;
      }
      (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      uint64_t v19 = v23;
    }
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
    }
LABEL_42:
    uint64_t result = (uint64_t)v24;
    if (v24) {
      return (*(uint64_t (**)(void *))(*(void *)v24 + 24))(v24);
    }
    return result;
  }
  uint64_t v16 = *a2;
  if (*a2)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
    uint64_t result = *a4;
    if (*a4 == v16) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    }
  }
  else
  {
    uint64_t result = *a4;
    if (!*a4) {
      return result;
    }
  }
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *a4 = v16;
  return result;
}

void sub_1B7B57EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

double *LiLight::getShadowFromMap(double *result, uint64_t a2, uint64_t a3, void **a4, uint64_t *a5)
{
  long long v9 = result;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 8);
  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(v10 + 264) || *(_DWORD *)(a3 + 12) != *(_DWORD *)(v10 + 268))
  {
    uint64_t result = (double *)PCMath::equal((double *)(a3 + 472), (double *)(v10 + 176), 0.015);
    if ((result & 1) == 0)
    {
      PCMatrix44Tmpl<double>::operator*(a3 + 280, *(long long **)(a2 + 80), (uint64_t)v73);
      uint64_t result = LiMaterialProperties::getZExtent(*(void *)(a2 + 8), v73, v72);
      if (*(double *)(a3 + 408) < v72[1])
      {
        if (*((_DWORD *)v9 + 164) == 1)
        {
          double v11 = -*(double *)(a3 + 304);
          double v12 = -*(double *)(a3 + 336);
          double v13 = -*(double *)(a3 + 368);
        }
        else
        {
          *(void *)&v77[40] = 0x3FF0000000000000;
          *(void *)long long v77 = 0x3FF0000000000000;
          *(void *)&v74[40] = 0x3FF0000000000000;
          *(void *)BOOL v74 = 0x3FF0000000000000;
          memset(&v74[8], 0, 32);
          long long v75 = 0u;
          long long v76 = 0u;
          memset(&v77[8], 0, 32);
          uint64_t result = (double *)PCMatrix44Tmpl<double>::invert((double *)v74, (double *)(a3 + 280), 0.0);
          double v11 = *(double *)&v74[24];
          double v12 = *((double *)&v75 + 1);
          double v13 = *(double *)&v77[8];
        }
        double v14 = *(double *)(v10 + 176);
        double v15 = *(double *)(v10 + 184);
        double v16 = *(double *)(v10 + 192);
        double v17 = *(double *)(v10 + 200);
        double v18 = *(double *)(v10 + 208);
        double v19 = *(double *)(v10 + 216);
        float v20 = (v11 - v14) * v17 + (v12 - v15) * v18 + (v13 - v16) * v19;
        float v21 = v17 * (*(double *)(a3 + 472) - v14)
            + v18 * (*(double *)(a3 + 480) - v15)
            + v19 * (*(double *)(a3 + 488) - v16);
        if ((float)(v20 * v21) >= 0.0) {
          goto LABEL_15;
        }
        double v22 = *(double *)(a3 + 576);
        if (v22 >= 0.0)
        {
          double v23 = *(double *)(a3 + 584);
          if (v23 >= 0.0)
          {
            unint64_t v24 = 0;
            double v25 = *(double *)(a3 + 568);
            *(void *)BOOL v74 = *(void *)(a3 + 560);
            *(double *)&v74[8] = v25;
            *(double *)&v74[16] = v22 + *(double *)v74;
            *(double *)&v74[24] = v25;
            *(double *)&v74[32] = v22 + *(double *)v74;
            *(double *)&v74[40] = v25 + v23;
            *(void *)&long long v75 = *(void *)v74;
            *((double *)&v75 + 1) = v25 + v23;
            double v26 = v20;
            do
            {
              *(_OWORD *)size_t v60 = *(_OWORD *)&v74[16 * v24];
              *(void *)&v60[16] = 0x3FF0000000000000;
              double v69 = 0.0;
              float64x2_t v70 = 0uLL;
              uint64_t result = PCMatrix44Tmpl<double>::transform<double>((double *)(a3 + 24), (double *)v60, &v69);
              float64x2_t v27 = vmulq_f64(vsubq_f64(v70, *(float64x2_t *)(v10 + 184)), *(float64x2_t *)(v10 + 208));
              double v28 = ((v69 - *(double *)(v10 + 176)) * *(double *)(v10 + 200) + v27.f64[0] + v27.f64[1]) * v26;
              if (v24 > 2) {
                break;
              }
              ++v24;
            }
            while (v28 <= 0.0);
            if (v28 > 0.0)
            {
LABEL_15:
              uint64_t v29 = *(double **)(a3 + 16);
              uint64_t v71 = v29;
              if (v29) {
                (*(void (**)(double *))(*(void *)v29 + 16))(v29);
              }
              long long v30 = *(_OWORD *)(a3 + 232);
              long long v76 = *(_OWORD *)(a3 + 216);
              *(_OWORD *)long long v77 = v30;
              long long v31 = *(_OWORD *)(a3 + 248);
              long long v32 = *(_OWORD *)(a3 + 168);
              *(_OWORD *)BOOL v74 = *(_OWORD *)(a3 + 152);
              *(_OWORD *)&v74[16] = v32;
              long long v33 = *(_OWORD *)(a3 + 200);
              *(_OWORD *)&v74[32] = *(_OWORD *)(a3 + 184);
              long long v75 = v33;
              long long v34 = *(_OWORD *)(a3 + 264);
              *(_OWORD *)&v77[16] = v31;
              *(_OWORD *)&v77[32] = v34;
              PCMatrix44Tmpl<double>::operator*((uint64_t)v74, *(long long **)(a2 + 56), (uint64_t)&v69);
              uint64_t v68 = 0x3FF0000000000000;
              uint64_t v65 = 0x3FF0000000000000;
              uint64_t v62 = 0x3FF0000000000000;
              *(void *)size_t v60 = 0x3FF0000000000000;
              *(_OWORD *)&v60[8] = 0u;
              long long v61 = 0u;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v66 = 0u;
              long long v67 = 0u;
              PCMatrix44Tmpl<double>::invert((double *)v60, (double *)(a3 + 24), 0.0);
              PCMatrix44Tmpl<double>::operator*((uint64_t)v60, *(long long **)(a2 + 56), (uint64_t)v59);
              PCMatrix44Tmpl<double>::operator*(a3 + 280, (long long *)(a3 + 24), (uint64_t)v58);
              double v35 = *(_OWORD **)(a2 + 8);
              long long v36 = v35[22];
              v57[4] = v35[21];
              v57[5] = v36;
              long long v37 = v35[24];
              v57[6] = v35[23];
              v57[7] = v37;
              long long v38 = v35[18];
              v57[0] = v35[17];
              v57[1] = v38;
              long long v39 = v35[20];
              v57[2] = v35[19];
              v57[3] = v39;
              uint64_t v56 = 0x3FF0000000000000;
              uint64_t v53 = 0x3FF0000000000000;
              uint64_t v50 = 0x3FF0000000000000;
              uint64_t v47 = 0x3FF0000000000000;
              long long v48 = 0u;
              long long v49 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              PCMatrix44Tmpl<double>::invert((double *)&v47, (double *)v57, 0.0);
              PCMatrix44Tmpl<double>::operator*((uint64_t)&v47, *(long long **)(a2 + 48), (uint64_t)v46);
              LiSoftShadow::LiSoftShadow(&v44, &v71, *((unsigned char *)v9 + 752), *((_DWORD *)v9 + 164) == 1, (uint64_t)v59, (uint64_t)v58, &v69, (double *)(a3 + 424), v9[93], *(unsigned char *)(a3 + 592));
              double v40 = v44;
              if (v44)
              {
                (*(void (**)(void *))(*(void *)v44 + 16))(v44);
                float32x4_t v41 = *a4;
                if (*a4 == v40)
                {
                  (*(void (**)(void *))(*(void *)v40 + 24))(v40);
                  goto LABEL_24;
                }
              }
              else
              {
                float32x4_t v41 = *a4;
                if (!*a4) {
                  goto LABEL_24;
                }
              }
              if (v41) {
                (*(void (**)(void *))(*(void *)v41 + 24))(v41);
              }
              *a4 = v40;
LABEL_24:
              uint64_t v42 = v45;
              if (v45)
              {
                (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
                uint64_t v43 = *a5;
                if (*a5 == v42)
                {
                  (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
                  goto LABEL_31;
                }
              }
              else
              {
                uint64_t v43 = *a5;
                if (!*a5)
                {
LABEL_31:
                  LiSoftShadow::~LiSoftShadow((LiSoftShadow *)&v44);
                  uint64_t result = v71;
                  if (v71) {
                    return (double *)(*(uint64_t (**)(double *))(*(void *)v71 + 24))(v71);
                  }
                  return result;
                }
              }
              if (v43) {
                (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
              }
              *a5 = v42;
              goto LABEL_31;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B7B585FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

double approximateStretch(float64x2_t *a1, double *a2, double *a3, double *a4, double a5)
{
  memset(v32, 0, sizeof(v32));
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2, (double *)v32);
  PCMatrix44Tmpl<double>::jacobianPost(a1, (double *)v32, (uint64_t)&v23);
  double v9 = v29;
  double v10 = v30;
  double v11 = v23;
  double v12 = v24;
  double v13 = v25;
  double v14 = v26;
  double v15 = v27;
  double v16 = v28;
  double v17 = v31;
  double v18 = v31 + v29 * a5 + v30 * 0.0;
  double v19 = (v25 + v23 * a5 + v24 * 0.0) / v18;
  *a3 = sqrt(v19 * v19 + (v28 + v26 * a5 + v27 * 0.0) / v18 * ((v28 + v26 * a5 + v27 * 0.0) / v18));
  double v20 = v17 + v9 * 0.0 + v10 * a5;
  double v21 = (v13 + v11 * 0.0 + v12 * a5) / v20;
  double result = sqrt(v21 * v21 + (v16 + v14 * 0.0 + v15 * a5) / v20 * ((v16 + v14 * 0.0 + v15 * a5) / v20));
  *a4 = result;
  return result;
}

uint64_t LiLight::NodeParams::setInput(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t result = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      uint64_t result = *a2;
    }
    *a1 = result;
    if (result)
    {
      int v6 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v6();
    }
  }
  return result;
}

uint64_t LiLight::stencilShadowByLight@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 656);
  if (v6 == 2)
  {
    long long v34 = *(_OWORD *)(a1 + 664);
    uint64_t v35 = *(void *)(a1 + 680);
    uint64_t v24 = *(void *)a2;
    *(void *)&v32.f64[0] = v24;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
    }
    double v25 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v34, (double *)&v34);
    uint64_t v26 = *(void *)(a2 + 16);
    uint64_t v27 = *(void *)(a2 + 40);
    double v28 = HGObject::operator new(0x1A0uLL);
    LiHePointLightStencil::LiHePointLightStencil(v28, &v32, v25, v26, v27);
    *a3 = v28;
    uint64_t result = *(void *)&v32.f64[0];
    if (*(void *)&v32.f64[0]) {
      return (*(uint64_t (**)(void))(**(void **)&v32.f64[0] + 24))(*(void *)&v32.f64[0]);
    }
  }
  else if (v6 == 3)
  {
    long long v34 = *(_OWORD *)(a1 + 664);
    uint64_t v35 = *(void *)(a1 + 680);
    double v7 = -*(double *)(a1 + 640);
    float64x2_t v32 = vnegq_f64(*(float64x2_t *)(a1 + 624));
    double v33 = v7;
    uint64_t v8 = *(void *)a2;
    uint64_t v31 = v8;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    }
    double v9 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v34, (double *)&v34);
    double v10 = PCMatrix44Tmpl<double>::transform_vector<double>(*(double **)(a2 + 32), v32.f64, v32.f64);
    double v11 = *v10;
    double v12 = v10[1];
    double v13 = v10[2];
    double v14 = sqrt(v11 * v11 + v12 * v12 + v13 * v13);
    if (v14 < 0.000000100000001 && v14 > -0.000000100000001) {
      double v14 = 1.0;
    }
    v30[0] = v11 / v14;
    v30[1] = v12 / v14;
    v30[2] = v13 / v14;
    uint64_t v16 = *(void *)(a2 + 16);
    double v17 = *(double *)(a1 + 696);
    double v18 = *(double *)(a1 + 704);
    uint64_t v19 = *(void *)(a2 + 40);
    double v20 = HGObject::operator new(0x1A0uLL);
    float v21 = v17;
    float v22 = v17 + v18;
    LiHeSpotLightStencil::LiHeSpotLightStencil(v20, &v31, v9, v30, v16, v19, v21, v22);
    *a3 = v20;
    uint64_t result = v31;
    if (v31) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
    }
  }
  else
  {
    uint64_t result = *(void *)a2;
    *a3 = *(void *)a2;
    if (result)
    {
      double v29 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v29();
    }
  }
  return result;
}

void sub_1B7B58B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  HGObject::operator delete(v13);
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 24))(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t LiLight::copyPCMatrixToVec4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = 0;
  int v6 = (double *)(a1 + 64);
  do
  {
    float v7 = *(v6 - 8);
    float v8 = *(v6 - 4);
    float v9 = *v6;
    float v10 = v6[4];
    uint64_t result = (*(uint64_t (**)(uint64_t, void, float, float, float, float))(*(void *)a2 + 96))(a2, (a3 + v4++), v7, v8, v9, v10);
    ++v6;
  }
  while (v4 != 4);
  return result;
}

uint64_t LiLightSet::add(uint64_t this, const LiLight *a2)
{
  uint64_t v2 = this;
  if (*((unsigned char *)a2 + 720))
  {
    int v4 = *(_DWORD *)(this + 12);
    if (*(_DWORD *)(this + 8) <= v4) {
      int v5 = (2 * (v4 + 1)) | 1;
    }
    else {
      int v5 = *(_DWORD *)(this + 8);
    }
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize(this, v4 + 1, v5);
    uint64_t v6 = *(void *)(v2 + 16) + 944 * *(int *)(v2 + 12) - 944;
    return LiLight::operator=(v6, (uint64_t)a2);
  }
  else
  {
    *(unsigned char *)(this + 24) = 1;
  }
  return this;
}

void LiLightSet::add(uint64_t this, uint64_t a2)
{
  *(unsigned char *)(this + 24) |= *(unsigned char *)(a2 + 24);
  PCArray<LiLight,PCArray_Traits<LiLight>>::append(this, a2);
}

void LiLight::buildHeliumGraphSurface(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v11 = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  long long v16 = *(_OWORD *)(a2 + 72);
  long long v17 = *(_OWORD *)(a2 + 88);
  long long v18 = *(_OWORD *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 8);
  long long v13 = *(_OWORD *)(a2 + 24);
  long long v14 = *(_OWORD *)(a2 + 40);
  long long v15 = *(_OWORD *)(a2 + 56);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v10, 0.0, 0.0, 0.0, 0.0);
  float v7 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
  LiHeLightInitPass::LiHeLightInitPass(v7, (const PCWorkingColorVector *)v10);
  float v9 = v7;
  LiLight::NodeParams::setInput(&v11, (uint64_t *)&v9);
  LiLight::getHeliumNodeSurface(a1, &v11, &v8);
  LiLight::NodeParams::setInput(&v11, &v8);
  LiLight::getHeliumNodeShadows(a1, &v11, a3);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  if (v9) {
    (*(void (**)(LiHeLightInitPass *))(*(void *)v9 + 24))(v9);
  }
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&v11);
}

void sub_1B7B58EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t LiLightSet::getHeliumGraphSurface@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, HGLegacyBlend **a3@<X8>)
{
  uint64_t v4 = result;
  int v5 = (HGLegacyBlend *)*a2;
  uint64_t v6 = (unsigned char *)a2[1];
  *a3 = (HGLegacyBlend *)*a2;
  if (v5) {
    uint64_t result = (*(uint64_t (**)(HGLegacyBlend *))(*(void *)v5 + 16))(v5);
  }
  int v7 = *(_DWORD *)(v4 + 12);
  if (!v7) {
    return result;
  }
  if (v6[98] && !v6[103] || !v6[102])
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v34, 0.0, 0.0, 0.0, 0.0);
    long long v17 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
    LiHeLightInitPass::LiHeLightInitPass(v17, (const PCWorkingColorVector *)v34);
    double v33 = v17;
    if (*(int *)(v4 + 12) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      char v20 = 0;
      while (1)
      {
        LiLight::buildHeliumGraphSurface(*(void *)(v4 + 16) + v18, (uint64_t)a2, &v32);
        if (!v32) {
          __cxa_bad_typeid();
        }
        float v22 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
        LiHeRGBAdditionNode::LiHeRGBAdditionNode(v22, &v33, &v32);
        if (v33 != v22) {
          break;
        }
        if (v22) {
          goto LABEL_39;
        }
LABEL_40:
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
        }
        v20 |= v21;
        ++v19;
        v18 += 944;
        if (v19 >= *(int *)(v4 + 12)) {
          goto LABEL_45;
        }
      }
      if (v33) {
        (*(void (**)(void))(*(void *)v33 + 24))();
      }
      double v33 = v22;
      if (!v22) {
        goto LABEL_40;
      }
      (*(void (**)(LiHeLightInitPass *))(*(void *)v22 + 16))(v22);
LABEL_39:
      (*(void (**)(LiHeLightInitPass *))(*(void *)v22 + 24))(v22);
      goto LABEL_40;
    }
    char v20 = 0;
LABEL_45:
    uint64_t v23 = *a2;
    uint64_t v32 = v23;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
    }
    uint64_t v24 = (HGLegacyBlend *)HGObject::operator new(0x1A0uLL);
    LiHeLightSurfaceFinalPass::LiHeLightSurfaceFinalPass(v24, &v32, &v33);
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
    }
    if (v5 == v24)
    {
      if (!v5) {
        goto LABEL_68;
      }
    }
    else
    {
      if (v5) {
        (*(void (**)(HGLegacyBlend *))(*(void *)v5 + 24))(v5);
      }
      *a3 = v24;
      if (!v24)
      {
        int v5 = 0;
LABEL_68:
        uint64_t result = (uint64_t)v33;
        if (v33) {
          uint64_t result = (*(uint64_t (**)(LiHeLightInitPass *))(*(void *)v33 + 24))(v33);
        }
        if (v20) {
          return (*(uint64_t (**)(HGLegacyBlend *, uint64_t, uint64_t))(*(void *)v5 + 136))(v5, 0xFFFFFFFFLL, 2);
        }
        return result;
      }
      (*(void (**)(HGLegacyBlend *))(*(void *)v24 + 16))(v24);
      int v5 = v24;
    }
    (*(void (**)(HGLegacyBlend *))(*(void *)v24 + 24))(v24);
    goto LABEL_68;
  }
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    char v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      LiLight::buildHeliumGraphSurface(*(void *)(v4 + 16) + v8, (uint64_t)a2, v34);
      if (v9)
      {
        if (v11) {
        else
        }
          long long v12 = 0;
        BOOL v14 = v12 != 0;
        long long v15 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
        HGLegacyBlend::HGLegacyBlend(v15);
        (*(void (**)(HGLegacyBlend *, void, HGLegacyBlend *))(*(void *)v15 + 120))(v15, 0, v11);
        (*(void (**)(HGLegacyBlend *, uint64_t, uint64_t))(*(void *)v15 + 120))(v15, 1, v34[0]);
        (*(void (**)(HGLegacyBlend *, void, float, double, double, double))(*(void *)v15 + 96))(v15, 0, 1.0, 0.0, 0.0, 0.0);
        if (v11 == v15)
        {
          long long v16 = v11;
        }
        else
        {
          if (v11) {
            (*(void (**)(HGLegacyBlend *))(*(void *)v11 + 24))(v11);
          }
          (*(void (**)(HGLegacyBlend *))(*(void *)v15 + 16))(v15);
          long long v16 = v15;
        }
        (*(void (**)(HGLegacyBlend *))(*(void *)v15 + 24))(v15);
        v10 |= v14;
        uint64_t v11 = (HGLegacyBlend *)v34[0];
      }
      else
      {
        if (v11 != (HGLegacyBlend *)v34[0])
        {
          if (v11)
          {
            (*(void (**)(HGLegacyBlend *))(*(void *)v11 + 24))(v11);
            uint64_t v11 = (HGLegacyBlend *)v34[0];
            if (!v34[0]) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v11 = (HGLegacyBlend *)v34[0];
            if (!v34[0])
            {
LABEL_29:
              char v10 = 1;
              goto LABEL_25;
            }
          }
          (*(void (**)(HGLegacyBlend *))(*(void *)v11 + 16))(v11);
          char v10 = 1;
          long long v13 = v11;
LABEL_24:
          (*(void (**)(HGLegacyBlend *))(*(void *)v13 + 24))(v13);
          goto LABEL_25;
        }
        char v10 = 1;
        long long v16 = v11;
      }
      long long v13 = v11;
      uint64_t v11 = v16;
      if (v13) {
        goto LABEL_24;
      }
LABEL_25:
      ++v9;
      v8 += 944;
      if (v9 >= *(int *)(v4 + 12)) {
        goto LABEL_57;
      }
    }
  }
  uint64_t v11 = 0;
  char v10 = 0;
LABEL_57:
  double v25 = (HGStencil *)HGObject::operator new(0x1C0uLL);
  HGStencil::HGStencil(v25);
  *((_DWORD *)v25 + 109) = 0;
  (*(void (**)(HGStencil *, void, HGLegacyBlend *))(*(void *)v25 + 120))(v25, 0, v11);
  uint64_t v26 = *a2;
  if (*a2) {
    (*(void (**)(uint64_t))(*(void *)v26 + 16))(*a2);
  }
  (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(void *)v25 + 120))(v25, 1, v26);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
  }
  if (v6[98] || v6[103])
  {
    uint64_t v27 = *a3;
    if (*a3 != v25)
    {
      if (v27) {
        (*(void (**)(HGLegacyBlend *))(*(void *)v27 + 24))(v27);
      }
      *a3 = v25;
      (*(void (**)(HGStencil *))(*(void *)v25 + 16))(v25);
    }
  }
  else
  {
    double v28 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
    HGLegacyBlend::HGLegacyBlend(v28);
    uint64_t v29 = *a2;
    if (*a2) {
      (*(void (**)(uint64_t))(*(void *)v29 + 16))(*a2);
    }
    (*(void (**)(HGLegacyBlend *, void, uint64_t))(*(void *)v28 + 120))(v28, 0, v29);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
    }
    (*(void (**)(HGLegacyBlend *, uint64_t, HGStencil *))(*(void *)v28 + 120))(v28, 1, v25);
    (*(void (**)(HGLegacyBlend *, void, double, double, double, double))(*(void *)v28 + 96))(v28, 0, 0.0, 0.0, 0.0, 0.0);
    double v30 = *a3;
    if (*a3 != v28)
    {
      if (v30) {
        (*(void (**)(HGLegacyBlend *))(*(void *)v30 + 24))(v30);
      }
      *a3 = v28;
      (*(void (**)(HGLegacyBlend *))(*(void *)v28 + 16))(v28);
    }
    (*(void (**)(HGLegacyBlend *))(*(void *)v28 + 24))(v28);
  }
  uint64_t result = (*(uint64_t (**)(HGStencil *))(*(void *)v25 + 24))(v25);
  if (v11) {
    uint64_t result = (*(uint64_t (**)(HGLegacyBlend *))(*(void *)v11 + 24))(v11);
  }
  if (v10)
  {
    int v5 = *a3;
    return (*(uint64_t (**)(HGLegacyBlend *, uint64_t, uint64_t))(*(void *)v5 + 136))(v5, 0xFFFFFFFFLL, 2);
  }
  return result;
}

void sub_1B7B59914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  if (*a10) {
    (*(void (**)(void))(*(void *)*a10 + 24))(*a10);
  }
  _Unwind_Resume(a1);
}

void LiSoftShadow::~LiSoftShadow(LiSoftShadow *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (*(void *)this) {
    (*(void (**)(void))(**(void **)this + 24))(*(void *)this);
  }
}

double *PCMatrix44Tmpl<double>::transform_vector<double>(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  *a3 = *a2 * *a1 + v4 * a1[1] + v5 * a1[2];
  a3[1] = v3 * a1[4] + v4 * a1[5] + v5 * a1[6];
  a3[2] = v3 * a1[8] + v4 * a1[9] + v5 * a1[10];
  return a3;
}

void LiHeShadowBlendAdd::LiHeShadowBlendAdd(HGLegacyBlend *a1)
{
}

void sub_1B7B59E38(_Unwind_Exception *a1)
{
  HGLegacyBlend::~HGLegacyBlend(v1);
  _Unwind_Resume(a1);
}

void LiHeShadowBlendAdd::~LiHeShadowBlendAdd(HGNode *this)
{
  HGLegacyBlend::~HGLegacyBlend(this);

  HGObject::operator delete(v1);
}

HGNode *LiHeShadowBlendAdd::GetOutput(HGNode *this, HGRenderer *a2)
{
  (*(void (**)(HGNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 2);

  return HGLegacyBlend::GetOutput(this, a2);
}

void LiHeMaxBlend::LiHeMaxBlend(LiHeProgramMaxBlend *a1)
{
}

void sub_1B7B59F70(_Unwind_Exception *a1)
{
  LiHeProgramMaxBlend::~LiHeProgramMaxBlend(v1);
  _Unwind_Resume(a1);
}

void LiHeMaxBlend::~LiHeMaxBlend(HGNode *this)
{
  LiHeProgramMaxBlend::~LiHeProgramMaxBlend(this);

  HGObject::operator delete(v1);
}

HGNode *LiHeMaxBlend::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v7 = v6;
  uint64_t v8 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v9 = HGRenderer::GetDOD(a2, v8);
  uint64_t v11 = v10;
  if (HGRectIsNull(DOD, v7))
  {
    uint64_t v12 = a2;
    long long v13 = this;
    unsigned int v14 = 1;
LABEL_5:
    return HGRenderer::GetInput(v12, v13, v14);
  }
  if (HGRectIsNull(v9, v11))
  {
    uint64_t v12 = a2;
    long long v13 = this;
    unsigned int v14 = 0;
    goto LABEL_5;
  }

  return (HGNode *)LiHeProgramMaxBlend::GetOutput((LiHeProgramMaxBlend *)this, a2);
}

void PCArray<LiLight,PCArray_Traits<LiLight>>::append(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  int v5 = *(_DWORD *)(a2 + 12) + v4;
  if (*(_DWORD *)(a1 + 8) >= v5) {
    int v6 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v6 = (2 * v5) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a1, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 944 * v4;
    do
    {
      LiLight::operator=(*(void *)(a1 + 16) + v9 + v7, *(void *)(a2 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a2 + 12));
  }
}

void LiHe3DEngineNode::LiHe3DEngineNode(LiHe3DEngineNode *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v2 = &unk_1F112AF00;
  *(_OWORD *)(v2 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)(v2 + 448));
  *((void *)this + 57) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 58);
  *((void *)this + 75) = 0x3FF0000000000000;
  *((void *)this + 7std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 65) = 0x3FF0000000000000;
  *((void *)this + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_OWORD *)this + 38) = xmmword_1B7E74760;
  *((void *)this + 79) = 0;
  *((void *)this + 81) = 0x3FF0000000000000;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  (*(void (**)(LiHe3DEngineNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 1024);
  (*(void (**)(LiHe3DEngineNode *, uint64_t, uint64_t))(*(void *)this + 144))(this, 0xFFFFFFFFLL, 512);
  *((_DWORD *)this + 103) = -1082130432;
  *((unsigned char *)this + 64std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  double v3 = (PCColorSpaceCache *)(*(uint64_t (**)(LiHe3DEngineNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 4);
  int v4 = (PCColorSpaceCache *)PCColorSpaceCache::cgRec709Linear(v3);
  *((void *)this + 8ProCore_Impl::PCNSRefImpl::release(this + 6) = v4;
  *((void *)this + 87) = PCColorSpaceCache::cgRec709Linear(v4);
}

void sub_1B7B5A2A8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v2);
  uint64_t v4 = *(void *)(v1 + 432);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 424);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 416);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::~LiHe3DEngineNode(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F112AF00;
  PCSharedCount::~PCSharedCount(this + 58);
  PCSharedCount::~PCSharedCount(this + 56);
  int var0 = this[54].var0;
  if (var0) {
    (*(void (**)(PC_Sp_counted_base *))(*(void *)var0 + 24))(var0);
  }
  double v3 = this[53].var0;
  if (v3) {
    (*(void (**)(PC_Sp_counted_base *))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = this[52].var0;
  if (v4) {
    (*(void (**)(PC_Sp_counted_base *))(*(void *)v4 + 24))(v4);
  }

  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;
  uint64_t vars8;

  LiHe3DEngineNode::~LiHe3DEngineNode(this);

  HGObject::operator delete(v1);
}

uint64_t LiHe3DEngineNode::setVideoOrientation(uint64_t result, int a2)
{
  *(_DWORD *)(result + 408) = a2;
  return result;
}

void LiHe3DEngineNode::setScene(uint64_t a1, const PCSharedCount *a2)
{
  *(PCSharedCount *)(a1 + 44std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = (PCSharedCount)a2->var0;
  uint64_t v2 = (uint64_t *)(a1 + 448);
  PCSharedCount::PCSharedCount(&v3, a2 + 1);
  PCSharedCount::operator=(v2, (uint64_t *)&v3);
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B7B5A4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void LiHe3DEngineNode::setCamera(uint64_t a1, const PCSharedCount *a2, char a3)
{
  *(PCSharedCount *)(a1 + 45ProCore_Impl::PCNSRefImpl::release(this + 6) = (PCSharedCount)a2->var0;
  uint64_t v5 = (uint64_t *)(a1 + 464);
  PCSharedCount::PCSharedCount(&v6, a2 + 1);
  PCSharedCount::operator=(v5, (uint64_t *)&v6);
  PCSharedCount::~PCSharedCount(&v6);
  *(unsigned char *)(a1 + 472) = a3;
}

void sub_1B7B5A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

uint64_t LiHe3DEngineNode::setPixelTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 480;
  if (result + 480 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v2 + j) = *(void *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  *(void *)(result + 56std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  return result;
}

__n128 LiHe3DEngineNode::setROI(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[38] = *a2;
  return result;
}

uint64_t LiHe3DEngineNode::setTimeInSeconds(uint64_t this, double a2)
{
  *(double *)(this + 624) = a2;
  return this;
}

uint64_t LiHe3DEngineNode::setEnvironmentMap(uint64_t this, CGImage *a2)
{
  *(void *)(this + 632) = a2;
  return this;
}

uint64_t LiHe3DEngineNode::setEnvironmentMapIntensity(uint64_t this, double a2)
{
  *(double *)(this + 648) = a2;
  return this;
}

__n128 LiHe3DEngineNode::setOrthoCameraShift(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[41] = *a2;
  return result;
}

uint64_t LiHe3DEngineNode::IntermediateFormat()
{
  return 27;
}

uint64_t LiHe3DEngineNode::GetDOD(LiHe3DEngineNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4 = *((_DWORD *)this + 152);
  double v5 = *((double *)this + 60);
  float v6 = v5 * (double)v4;
  int v7 = *((_DWORD *)this + 154);
  double v8 = (double)(v7 + v4);
  int v9 = *((_DWORD *)this + 153);
  *(float *)&double v8 = v5 * v8;
  double v10 = *((double *)this + 65);
  float v11 = v10 * (double)v9;
  int v12 = *((_DWORD *)this + 155);
  uint64_t v13 = (v12 + v9);
  float v14 = v10 * (double)(int)v13;
  return HGRectMake4f(v13, v6 - (float)((float)(*(float *)&v8 - v6) - (float)v7), v11 - (float)((float)(v14 - v11) - (float)v12), *(float *)&v8, v14);
}

uint64_t LiHe3DEngineNode::GetROI(LiHe3DEngineNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

uint64_t LiHe3DEngineNode::setupColorTexture@<X0>(HGGPURenderer **a1@<X1>, void *a2@<X8>)
{
  MetalContext = (HGMetalContext *)HGGPURenderer::GetMetalContext(*a1);
  int v7 = *(void **)(*((void *)MetalContext + 2) + 16);
  double v8 = (uint64_t *)HGMetalContext::texturePool(MetalContext);
  uint64_t v9 = HGRectMake4i(0, 0, *((_DWORD *)a1 + 6) - *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 7) - *((_DWORD *)a1 + 5));
  return HGMetalTexture::create(v7, v8, v9, v10, 27, 0, 1, 0, a2, 1);
}

HGBitmap *LiHe3DEngineNode::setupOutputColorTexture(LiHe3DEngineNode *this, HGPage *a2)
{
  Buffer = (char *)*((void *)a2 + 1);
  if (Buffer)
  {
    (*(void (**)(void))(*(void *)Buffer + 16))(*((void *)a2 + 1));
  }
  else
  {
    uint64_t v4 = *(void *)a2;
    *(void *)&v8.int var0 = *((void *)a2 + 2);
    *(void *)&v8.var2 = *((void *)a2 + 3);
    Buffer = HGGPURenderer::CreateBuffer(v4, v8, *((unsigned int *)a2 + 8), 1, 1, 0);
    *((void *)a2 + 1) = Buffer;
  }
  double v5 = *(HGMetalTexture ***)a2;

  return HGGPURenderer::ConvertToMetalTexture(v5, (HGBitmap *)Buffer);
}

uint64_t LiHe3DEngineNode::createTextureFromPool@<X0>(uint64_t a1@<X1>, int a2@<W2>, unsigned int a3@<W3>, void *a4@<X8>)
{
  MetalContext = (HGMetalContext *)HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a1);
  uint64_t v9 = *(void **)(*((void *)MetalContext + 2) + 16);
  uint64_t v10 = (uint64_t *)HGMetalContext::texturePool(MetalContext);
  uint64_t v11 = HGRectMake4i(0, 0, *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 20));
  return HGMetalTexture::create(v9, v10, v11, v12, a2, 0, 1, 0, a4, 2, a3);
}

void *getRenderPassClearColorClearDepthResolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  HGRect v8 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setResolveTexture:", a2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setResolveTexture:", a4);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setClearDepth:", 1.0);
  return v8;
}

void *getRenderPassClearColorLoadDepthResolve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setResolveTexture:", a2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setClearDepth:", 1.0);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setStoreAction:", 1);
  return v6;
}

void *getRenderPassClearColorClearDepth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setClearDepth:", 1.0);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setStoreAction:", 1);
  return v5;
}

void *getRenderPassLoadColorLoadDepth(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
  objc_msgSend((id)objc_msgSend(v4, "depthAttachment"), "setTexture:", a2);
  objc_msgSend((id)objc_msgSend(v4, "depthAttachment"), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend(v4, "depthAttachment"), "setStoreAction:", 1);
  return v4;
}

void LiHe3DEngineNode::getHelium3DEngine(LiHe3DEngineNode *this, LiSceneObject *a2, LiAgent *a3)
{
  if (a2)
  {
    if (v6)
    {
      Li3DEngineObject::getSceneData((uint64_t)v6, &v13);
      (*(void (**)(uint64_t, LiAgent *))(*(void *)v13 + 16))(v13, a3);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    else
    {
      if (v7)
      {
        HGRect v8 = v7;
        int v9 = (*(uint64_t (**)(void *))(*(void *)v7 + 136))(v7);
        if (v9 >= 1)
        {
          int v10 = v9;
          uint64_t v11 = 0;
          do
          {
            uint64_t v12 = (LiSceneObject *)(*(uint64_t (**)(void *, uint64_t))(*(void *)v8 + 144))(v8, v11);
            LiHe3DEngineNode::getHelium3DEngine(this, v12, a3);
            uint64_t v11 = (v11 + 1);
          }
          while (v10 != v11);
        }
      }
    }
  }
}

void sub_1B7B5AD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void LiHe3DEngineNode::traverse(uint64_t a1, const void *a2, uint64_t *a3)
{
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = (uint64_t)v6;
      Li3DEngineObject::getSceneData((uint64_t)v6, &v27);
      HGRect v8 = (std::recursive_mutex *)v27[1];
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      std::recursive_mutex::lock(v8);
      if (PCBitmap::getRepresentation((PCBitmap *)v8))
      {
        Li3DEngineObject::getSceneData(v7, &v26);
        unint64_t v9 = a3[2];
        int v10 = (std::__shared_count *)a3[1];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v17 = ((uint64_t)v10 - *a3) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v9 - *a3;
          if (v19 >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          uint64_t v31 = a3 + 2;
          BOOL v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a3 + 2), v20);
          float v22 = (std::__shared_weak_count *)&v21[2 * v17];
          uint64_t v27 = v21;
          double v28 = v22;
          double v30 = (char *)&v21[2 * v23];
          v22->std::__shared_count = v26;
          std::__shared_count v26 = (std::__shared_count)0;
          p_shared_weak_owners = &v22->__shared_weak_owners_;
          std::vector<std::shared_ptr<Li3DEngineObjectDataBase>>::__swap_out_circular_buffer(a3, &v27);
          uint64_t v24 = a3[1];
          std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer((void **)&v27);
          shared_owners = (std::__shared_weak_count *)v26.__shared_owners_;
          a3[1] = v24;
          if (shared_owners) {
            std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
          }
        }
        else
        {
          std::__shared_count *v10 = v26;
          a3[1] = (uint64_t)&v10[1];
        }
      }
      std::recursive_mutex::unlock(v8);
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = v11;
        int v13 = (*(uint64_t (**)(void *))(*(void *)v11 + 136))(v11);
        if (v13 >= 1)
        {
          int v14 = v13;
          uint64_t v15 = 0;
          do
          {
            uint64_t v16 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v12 + 144))(v12, v15);
            LiHe3DEngineNode::traverse(a1, v16, a3);
            uint64_t v15 = (v15 + 1);
          }
          while (v14 != v15);
        }
      }
    }
  }
}

void sub_1B7B5AFCC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer((void **)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::recursive_mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::render(uint64_t a1, const void ***a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10, int32x2_t a11, id *a12, void *a13, void *a14, double *a15)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx, &dword_1B73F3000);
  }
  std::mutex::lock(&LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx);
  unint64_t v18 = *a2;
  uint64_t v17 = a2[1];
  if (v17 == *a2)
  {
    fwrite("LiHe3DEngineNode: no scenes to render were found.\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    goto LABEL_122;
  }
  long long v169 = (LiHe3DEngineNode *)a1;
  unint64_t v19 = 0;
  uint64_t v159 = (char *)v17 - (char *)*a2;
  unint64_t v154 = v159 >> 4;
  do
  {
    unint64_t v20 = (int *)*v18;
    v18 += 2;
    unint64_t v21 = v20[45];
    if (v19 <= v21) {
      unint64_t v19 = v21;
    }
  }
  while (v18 != v17);
  unint64_t v172 = v19;
  uint64_t v213 = 0;
  long long v211 = 0u;
  long long v212 = 0u;
  long long v209 = 0u;
  long long v210 = 0u;
  long long v207 = 0u;
  long long v208 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v201 = 0u;
  long long v202 = 0u;
  long long v193 = *(PC_Sp_counted_base **)(a1 + 456);
  long long v199 = 0u;
  long long v200 = 0u;
  PCSharedCount::PCSharedCount(&v194, (const PCSharedCount *)(a1 + 464));
  double v23 = *a15;
  double v22 = a15[1];
  double v24 = *(double *)(a1 + 656);
  double v25 = *(double *)(a1 + 664);
  int v26 = *(unsigned __int8 *)(a1 + 472);
  v232 = v193;
  PCSharedCount::PCSharedCount(&v233, &v194);
  uint64_t v167 = a2;
  if (!v232) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v232 + 232))(&v235);
  uint64_t v27 = 0;
  double v28 = (double)(a14 - a13);
  double v29 = (double)(HIDWORD(a14) - HIDWORD(a13));
  do
  {
    *((float32x4_t *)&v217 + v27) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v235 + 2 * v27)), *((float64x2_t *)&v235 + 2 * v27 + 1));
    ++v27;
  }
  while (v27 != 4);
  trans((const Mat4f *)&v217, (uint64_t)&v245);
  long long v195 = v245;
  long long v196 = v246;
  long long v197 = v247;
  long long v198 = v248;
  PCSharedCount::~PCSharedCount(&v233);
  v215.int var0 = v193;
  PCSharedCount::PCSharedCount(&v216, &v194);
  double v164 = v24;
  double v173 = v25;
  v214.f64[0] = v23;
  v214.f64[1] = v22;
  uint64_t v185 = (id *)a11;
  long long v186 = a12;
  v234[0] = a13;
  v234[1] = a14;
  if (!v215.var0) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(PC_Sp_counted_base *))(*(void *)v215.var0 + 504))(v215.var0);
  if (v26 && v30 > -0.0000001 && v30 < 0.0000001)
  {
    if (!v215.var0) {
      throw_PCNullPointerException(1);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v215.var0 + 232))(&v245);
    double v31 = *((double *)&v246 + 1);
    double v32 = *((double *)&v248 + 1);
    double v33 = v249;
    double v34 = v250;
    uint64_t v244 = 0x3FF0000000000000;
    uint64_t v241 = 0x3FF0000000000000;
    uint64_t v238 = 0x3FF0000000000000;
    *(void *)v237 = 0x3FF0000000000000;
    memset(&v237[8], 0, 32);
    long long v239 = 0u;
    long long v240 = 0u;
    long long v242 = 0u;
    long long v243 = 0u;
    if (!v215.var0) {
      throw_PCNullPointerException(1);
    }
    (*(void (**)(PC_Sp_counted_base *, long long *))(*(void *)v215.var0 + 264))(v215.var0, &v235);
    if (!v215.var0) {
      throw_PCNullPointerException(1);
    }
    (*(void (**)(double *__return_ptr))(*(void *)v215.var0 + 272))(&v251);
    float v35 = sqrt(v31 * v31 + v32 * v32 + v33 * v33 + v34 * v34);
    double v36 = (double)(HIDWORD(a12) - a11.i32[1]);
    double v37 = (double)(a12 - a11.i32[0]) * 0.5 * (*(double *)&v236 / v251) / v23;
    double v38 = v36 * 0.5 * (*((double *)&v236 + 1) / v252) / v22;
    float v39 = v164 * (*(double *)&v236 / v251) / v23;
    float v40 = v173 * (*((double *)&v236 + 1) / v252) / v22;
    double v41 = v39;
    double v42 = v41 - v37;
    double v43 = v37 + v41;
    double v44 = v40;
    double v45 = v44 - v38;
    double v46 = v38 + v44;
    double v47 = v35;
    double v48 = v47 + -100000.0;
    double v49 = (v43 - v42) / (double)(a12 - a11.i32[0]);
    double v50 = (v46 - v45) / v36;
    double v51 = v42 + v49 * (double)(int)a13;
    double v52 = v45 + v50 * (double)(HIDWORD(a12) - a11.i32[1] - HIDWORD(a14));
    double v53 = v49 * v28 + v51;
    double v54 = v50 * v29 + v52;
    double v55 = v47 + 100000.0 - (v47 + -100000.0);
    *((void *)&v219 + 1) = 0;
    double v220 = 2.0 / (v54 - v52);
    *(_OWORD *)&v222[1] = 0u;
    long long v225 = 0u;
    long long v218 = 0u;
    double v221 = 0.0;
    double v217 = 2.0 / (v53 - v51);
    *(double *)&long long v219 = -(v51 + v53) / (v53 - v51);
    double v223 = -1.0 / v55;
    v222[0] = -(v52 + v54) / (v54 - v52);
    double v224 = -v48 / v55;
    long long v56 = xmmword_1B7E733E0;
  }
  else
  {
    double v217 = (*(double *)v237 + *(double *)v237) / (*((double *)&v235 + 1) - *(double *)&v235);
    *(void *)&long long v218 = 0;
    double v220 = (*(double *)v237 + *(double *)v237) / (*((double *)&v236 + 1) - *(double *)&v236);
    *((double *)&v218 + 1) = -(*((double *)&v235 + 1) + *(double *)&v235) / (*((double *)&v235 + 1) - *(double *)&v235);
    double v221 = -(*((double *)&v236 + 1) + *(double *)&v236) / (*((double *)&v236 + 1) - *(double *)&v236);
    long long v219 = 0u;
    memset(v222, 0, sizeof(v222));
    double v223 = -*(double *)&v237[8] / (*(double *)&v237[8] - *(double *)v237);
    double v224 = -(*(double *)&v237[8] * *(double *)v237) / (*(double *)&v237[8] - *(double *)v237);
    long long v56 = xmmword_1B7E7C890;
    long long v225 = 0u;
  }
  long long v226 = v56;
  double v57 = a10;
  long long v58 = (LiHe3DEngineNode *)a1;
  for (uint64_t i = 0; i != 4; ++i)
    *(float32x4_t *)&v227[2 * i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(&v217 + 4 * i)), *(float64x2_t *)((char *)&v218 + 32 * i + 8));
  trans((const Mat4f *)v227, (uint64_t)&v228);
  long long v199 = v228;
  long long v200 = v229;
  long long v201 = v230;
  long long v202 = v231;
  PCSharedCount::~PCSharedCount(&v216);
  PCSharedCount::~PCSharedCount(&v194);
  uint64_t v60 = *(void *)(a1 + 456);
  if (!v60) {
    throw_PCNullPointerException(1);
  }
  uint64_t v61 = 0;
  unsigned int v158 = 0;
  char v153 = 0;
  float v62 = (*(double (**)(uint64_t, void))(*(void *)v60 + 248))(v60, 0);
  do
  {
    uint64_t v63 = 16 * v61;
    long long v64 = (std::recursive_mutex *)*((void *)(*a2)[2 * v61] + 1);
    std::recursive_mutex::lock(v64);
    double v65 = *((double *)(*a2)[2 * v61] + 2);
    long long v155 = (Li3DEngineWorldData *)v64;
    SceneAnduint64_t Renderer = Li3DEngineScene::getSceneAndRenderer((Li3DEngineScene *)v64, v57);
    id v157 = objc_alloc_init(MEMORY[0x1E4F3B228]);
    [v157 setCamera:objc_alloc_init(MEMORY[0x1E4F3B1F0])];
    [v157 setName:@"RenderingCameraNode"];
    v192[0] = v195;
    v192[1] = v196;
    v192[2] = v197;
    v192[3] = v198;
    [v157 setTransform:v192];
    long long v67 = (void *)[v157 camera];
    v191[0] = v199;
    v191[1] = v200;
    v191[2] = v201;
    v191[3] = v202;
    [v67 setProjectionTransform:v191];
    [SceneAndRenderer setPointOfView:v157];
    [SceneAndRenderer setSceneTime:v65];
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode"), "addChildNode:", v157);
    if (*((unsigned char *)v58 + 640))
    {
      uint64_t v68 = **a2;
      if (v68) {
      else
      }
        double v69 = 0;
      LiPhysicsUtils::ConfigureScene(v69, v155, (Li3DEngineScene *)[SceneAndRenderer scene], (SCNScene *)(v65 == 0.0), v62);
      goto LABEL_51;
    }
    float64x2_t v70 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode"), "childNodes");
    if (v64[1].__m_.__opaque[32]) {
      uint64_t v71 = objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode");
    }
    else {
      uint64_t v71 = (void *)[v70 firstObject];
    }
    double v72 = v71;
    unint64_t v73 = *a2;
    BOOL v74 = (float *)(*a2)[2 * v61];
    if (*((unsigned char *)v74 + 112))
    {
      int v75 = *((_DWORD *)v74 + 29);
      BOOL v76 = v75 == 8;
      if (*((unsigned char *)v74 + 88))
      {
        v153 |= v76;
LABEL_43:
        long long v77 = (Li3DEngineObjectDataBase *)[v71 setOpacity:v74[27]];
        long long v235 = *(_OWORD *)((char *)(*a2)[2 * v61] + 92);
        if (!v76)
        {
          uint64_t v78 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(v77);
          if (!operator!=((float *)&v235, v78)) {
            goto LABEL_49;
          }
        }
        goto LABEL_48;
      }
      if (v75 == 8)
      {
        long long v235 = *(_OWORD *)Li3DEngineObjectDataBase::defaultPerInstanceColor((Li3DEngineObjectDataBase *)v71);
        char v153 = 1;
        BOOL v76 = 1;
LABEL_48:
        v188[0] = MEMORY[0x1E4F143A8];
        v188[1] = *(void *)"";
        v188[2] = ___ZN16LiHe3DEngineNode6renderERKNSt3__16vectorINS0_10shared_ptrI24Li3DEngineObjectDataBaseEENS0_9allocatorIS4_EEEEPU21objcproto10MTLTexture11objc_objectSB_SB_SB_SB_SB_PU26objcproto15MTLCommandQueue11objc_objectPU19objcproto9MTLDevice11objc_object6HGRectSG_9PCVector2IdE_block_invoke;
        v188[3] = &unk_1E616D7D8;
        long long v189 = v235;
        BOOL v190 = v76;
        v188[4] = v72;
        [v72 enumerateChildNodesUsingBlock:v188];
LABEL_49:
        unint64_t v73 = *a2;
      }
    }
    else if (*((unsigned char *)v74 + 88))
    {
      BOOL v76 = 0;
      goto LABEL_43;
    }
    memset(v237, 0, 32);
    long long v235 = 0u;
    long long v236 = 0u;
    double v79 = (char *)v73[2 * v61];
    long long v80 = *(_OWORD *)(v79 + 40);
    long long v81 = *(_OWORD *)(v79 + 24);
    long long v82 = *(_OWORD *)(v79 + 72);
    long long v247 = *(_OWORD *)(v79 + 56);
    long long v248 = v82;
    long long v245 = v81;
    long long v246 = v80;
    trans((const Mat4f *)&v245, (uint64_t)&v235);
    v187[0] = v235;
    v187[1] = v236;
    v187[2] = *(_OWORD *)v237;
    v187[3] = *(_OWORD *)&v237[16];
    [v72 setTransform:v187];
LABEL_51:
    uint64_t v83 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "contents");
    uint64_t v84 = *((void *)v58 + 79);
    if (v83 != v84) {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "setContents:", v84);
    }
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "setIntensity:", *((double *)v58 + 81));
    uint64_t v156 = v61;
    uint64_t v85 = (uint64_t)(*a2)[2 * v61] + 168;
    long long v86 = (CGColorSpace *)*((void *)v58 + 86);
    float64x2_t v87 = (CGColorSpace *)*((void *)v58 + 87);
    long long v176 = 0u;
    long long v177 = 0u;
    uint64_t v175 = 0x3FF0000000000000;
    uint64_t v178 = 0x3FF0000000000000;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v182 = 0u;
    long long v183 = 0u;
    uint64_t v181 = 0x3FF0000000000000;
    uint64_t v184 = 0x3FF0000000000000;
    buildSCNLights(v85, v86, v87, (uint64_t)&v175, (void **)&v185);
    LODWORD(v88) = 0;
    unint64_t v89 = v186 - v185;
    uint64_t v90 = (void *)*((void *)&v210 + 1);
    uint64_t v162 = *((void *)&v211 + 1);
    uint64_t v91 = v213;
    long long v92 = (void *)*((void *)&v212 + 1);
    uint64_t v165 = v63;
    do
    {
      v174 = (void *)[a9 commandBuffer];
      [v174 setLabel:objc_msgSend(NSString, "stringWithFormat:", @"light %d command buffer", v88)];
      BOOL hasDepthMatte = LiHe3DEngineNode::hasDepthMatte(v169);
      if (v172 < 9)
      {
        if (v159 != 16)
        {
          if (!v158)
          {
            if (!hasDepthMatte)
            {
              RenderPassClearColorClearDepth = getRenderPassClearColorClearDepth(a3, v94, (uint64_t)a7);
              goto LABEL_66;
            }
LABEL_64:
            RenderPassClearColorClearDepth = getRenderPassLoadColorLoadDepth(a3, (uint64_t)a7);
            goto LABEL_66;
          }
          if (v154 - 1 != v156) {
            goto LABEL_64;
          }
LABEL_62:
          RenderPassClearColorClearDepth = getRenderPassLoadColorLoadDepthResolve(a3, (uint64_t)a6, (uint64_t)a7, a8);
          goto LABEL_66;
        }
        uint64_t v95 = (uint64_t)a6;
        if (hasDepthMatte) {
          goto LABEL_62;
        }
LABEL_59:
        RenderPassClearColorClearDepth = getRenderPassClearColorClearDepthResolve(a3, v95, (uint64_t)a7, a8);
        goto LABEL_66;
      }
      uint64_t v95 = (uint64_t)a4;
      if (!v88) {
        goto LABEL_59;
      }
      RenderPassClearColorClearDepth = getRenderPassClearColorLoadDepthResolve(a3, (uint64_t)a4, (uint64_t)a7);
LABEL_66:
      long long v97 = RenderPassClearColorClearDepth;
      [MEMORY[0x1E4F3B280] begin];
      uint64_t v98 = *(uint64_t *)((char *)*v167 + v63);
      (*(void (**)(uint64_t, uint64_t, void *, float))(*(void *)v98 + 24))(v98, [SceneAndRenderer scene], v57, v62);
      uint64_t v99 = 8;
      unint64_t v100 = v88;
      do
      {
        if (v89 > v100)
        {
          double v101 = objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode");
          [v101 addChildNode:v185[v100]];
        }
        ++v100;
        --v99;
      }
      while (v99);
      [MEMORY[0x1E4F3B280] commit];
      [MEMORY[0x1E4F3B280] flush];
      objc_msgSend(SceneAndRenderer, "renderAtTime:viewport:commandBuffer:passDescriptor:", v174, v97, v65, 0.0, 0.0, v28, v29);
      uint64_t v102 = 8;
      unint64_t v103 = v88;
      do
      {
        if (v89 > v103) {
          [v185[v103] removeFromParentNode];
        }
        ++v103;
        --v102;
      }
      while (v102);
      double v57 = a10;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v98 + 32))(v98, [SceneAndRenderer scene], a10);
      if (v172 >= 9)
      {
        if (v90 != a10)
        {
          uint64_t v104 = [a4 width];
          uint64_t v105 = [a4 height];
          if (v90) {
          *((void *)&v210 + 1) = a10;
          }
          v234[0] = 0;
          double v106 = objc_msgSend(a10, "newLibraryWithSource:options:error:", objc_msgSend(NSString, "stringWithUTF8String:", "\n            #include <metal_stdlib>\n\n            using namespace metal;\n"
                             "            //---------------------------------------\n"
                             "            // clip space processing\n"
                             "            //---------------------------------------\n"
                             "\n"
                             "            typedef struct\n"
                             "            {\n"
                             "                float3 position [[attribute(0)]];\n"
                             "            } ClipVertex;\n"
                             "\n"
                             "            typedef struct\n"
                             "            {\n"
                             "                float4 position [[position]];\n"
                             "            } ClipData;\n"
                             "\n"
                             "            vertex ClipData vertexShader(ClipVertex in [[stage_in]])\n"
                             "            {\n"
                             "                ClipData out;\n"
                             "                out.positiouint64_t n = float4(in.position, 1.0);\n"
                             "                return out;\n"
                             "            }\n"
                             "\n"
                             "            fragment float4 fragmentShader(ClipData frag [[stage_in]],\n"
                             "                                           texture2d<half> colorMap0 [[ texture(0) ]],\n"
                             "                                           texture2d<half> colorMap1 [[ texture(1) ]])\n"
                             "            {\n"
                             "                constexpr sampler colorSampler(mip_filter::none,\n"
                             "                                               mag_filter::nearest,\n"
                             "                                               min_filter::nearest);\n"
                             "\n"
                             "                const float2 texCoord0(frag.position.x / colorMap0.get_width(),\n"
                             "                                       frag.position.y / colorMap0.get_height());\n"
                             "                const half4 color0 = colorMap0.sample(colorSampler, texCoord0);\n"
                             "\n"
                             "                const float2 texCoord1(frag.position.x / colorMap1.get_width(),\n"
                             "                                       frag.position.y / colorMap1.get_height());\n"
                             "                const half4 color1 = colorMap1.sample(colorSampler, texCoord1);\n"
                             "            \n"
                             "                float3 rgb = float3( color0.rgb + color1.rgb);\n"
                             "                float a = float( max(color0.a, color1.a));\n"
                             "                return float4(rgb,a);\n"
                             "            }"),
                           0,
                           v234);
          *(void *)&long long v211 = v106;
          float64x2_t v107 = (_anonymous_namespace_::QuadDraw *)v234[0];
          if (v234[0])
          {
            NSLog(&stru_1F119C630.isa, [v234[0] localizedDescription]);
            NSLog(&stru_1F119C630.isa, [v234[0] localizedFailureReason]);
          }
          id v109 = objc_alloc_init(MEMORY[0x1E4F352F0]);
          [v109 setRasterSampleCount:1];
          objc_msgSend(v109, "setVertexFunction:", (id)objc_msgSend(v106, "newFunctionWithName:", @"vertexShader"));
          objc_msgSend(v109, "setFragmentFunction:", (id)objc_msgSend(v106, "newFunctionWithName:", @"fragmentShader"));
          [v109 setVertexDescriptor:VertexDescriptor];
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v109, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 115);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v109, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setBlendingEnabled:", 0);
          v234[0] = 0;
          uint64_t v162 = [a10 newRenderPipelineStateWithDescriptor:v109 error:v234];
          *((void *)&v211 + 1) = v162;
          if (v234[0]) {
            NSLog(&cfstr_FailedToCreate_5.isa, v234[0]);
          }

          uint64_t v213 = v91;
          double v110 = (void *)[MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:115 width:v104 height:v105 mipmapped:0];
          [v110 setResourceOptions:32];
          [v110 setTextureType:2];
          [v110 setUsage:1];
          long long v92 = (void *)[a10 newTextureWithDescriptor:v110];
          *((void *)&v212 + 1) = v92;
          [v92 setLabel:@"TemporaryColorCopy"];
        }
        double v111 = (void *)[v174 blitCommandEncoder];
        uint64_t v112 = [a5 width];
        uint64_t v113 = [a5 height];
        if (v88)
        {
          long long v228 = 0uLL;
          *(void *)&long long v229 = 0;
          v227[0] = v112;
          v227[1] = v113;
          v227[2] = 1;
          double v252 = 0.0;
          uint64_t v253 = 0;
          double v251 = 0.0;
          [v111 copyFromTexture:a5 sourceSlice:0 sourceLevel:0 sourceOrigin:&v228 sourceSize:v227 toTexture:v92 destinationSlice:0 destinationLevel:0 destinationOrigin:&v251];
          [v111 endEncoding];
          int v114 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v114, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a5);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v114, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 1);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v114, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
          objc_msgSend((id)objc_msgSend(v114, "depthAttachment"), "setTexture:", 0);
          int v115 = (void *)[v174 renderCommandEncoderWithDescriptor:v114];
          [v115 setRenderPipelineState:v162];
          [v115 setFragmentTexture:a4 atIndex:0];
          [v115 setFragmentTexture:v92 atIndex:1];
          [v115 setFrontFacingWinding:1];
          [v115 setCullMode:2];
          [v115 setVertexBuffer:v91 offset:0 atIndex:0];
          [v115 drawPrimitives:3 vertexStart:0 vertexCount:6];
          [v115 endEncoding];
        }
        else
        {
          long long v235 = 0uLL;
          *(void *)&long long v236 = 0;
          *(void *)&long long v245 = v112;
          *((void *)&v245 + 1) = v113;
          *(void *)&long long v246 = 1;
          double v217 = 0.0;
          long long v218 = 0uLL;
          [v111 copyFromTexture:a4 sourceSlice:0 sourceLevel:0 sourceOrigin:&v235 sourceSize:&v245 toTexture:a5 destinationSlice:0 destinationLevel:0 destinationOrigin:&v217];
          [v111 endEncoding];
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "setIntensity:", 0.0);
        }
        uint64_t v90 = a10;
      }
      [v174 commit];
      [v174 waitUntilCompleted];
      unint64_t v88 = (v88 + 8);
      uint64_t v63 = v165;
    }
    while (v89 > v88);
    float64x2_t v117 = v185;
    BOOL v116 = v186;
    a2 = v167;
    long long v58 = v169;
    if (v185 != v186)
    {
      do
      {
        id v118 = *v117;

        ++v117;
      }
      while (v117 != v116);
      float64x2_t v117 = v185;
    }
    if (v117)
    {
      long long v186 = v117;
      operator delete(v117);
    }
    if (v172 > 8)
    {
      v174 = (void *)[a9 commandBuffer];
      [v174 setLabel:objc_msgSend(NSString, "stringWithFormat:", @"depth comp. command buffer"];
      uint64_t v119 = *((void *)&v206 + 1);
      if (*((void **)&v206 + 1) != a10)
      {
        uint64_t v120 = [a7 width];
        uint64_t v121 = [a7 height];
        if (v119) {
        *((void *)&v206 + 1) = a10;
        }
        *(void *)&long long v235 = 0;
        id v122 = objc_retain((id)objc_msgSend(a10, "newLibraryWithSource:options:error:", objc_msgSend(NSString, "stringWithUTF8String:", "\n        #include <metal_stdlib>\n\n        using namespace metal;\n"
                                   "        //---------------------------------------\n"
                                   "        // clip space processing\n"
                                   "        //---------------------------------------\n"
                                   "\n"
                                   "        typedef struct {\n"
                                   "            float3 position [[attribute(0)]];\n"
                                   "        } ClipVertex;\n"
                                   "\n"
                                   "        typedef struct {\n"
                                   "            float4 position [[position]];\n"
                                   "        } ClipData;\n"
                                   "\n"
                                   "        typedef struct {\n"
                                   "            float4 fragColor [[color(0)]];\n"
                                   "            float fragDepth  [[color(1)]];\n"
                                   "        } FragData;\n"
                                   "\n"
                                   "        vertex ClipData vertexShader(ClipVertex in [[stage_in]])\n"
                                   "        {\n"
                                   "            ClipData out;\n"
                                   "            out.positiouint64_t n = float4(in.position, 1.0);\n"
                                   "            return out;\n"
                                   "        }\n"
                                   "\n"
                                   "        fragment FragData fragmentShader( ClipData frag             [[stage_in]],\n"
                                   "                                          texture2d<half> colorMap1 [[ texture(0) ]],"
                                   "\n"
                                   "                                          depth2d_ms<float> depth1  [[ texture(1) ]],"
                                   "\n"
                                   "                                          texture2d<half> colorMap2 [[ texture(2) ]],"
                                   "\n"
                                   "                                          texture2d<float> depth2   [[ texture(3) ]],"
                                   "\n"
                                   "                                          constant float4 &flags    [[ buffer(0) ]])"
                                   "\n"
                                   "        {\n"
                                   "            FragData out;\n"
                                   "\n"
                                   "            constexpr sampler s(mip_filter::none, mag_filter::nearest, min_filter::ne"
                                   "arest);\n"
                                   "\n"
                                   "            const float2 texCoordC(frag.position.x / colorMap1.get_width(),\n"
                                   "                                   frag.position.y / colorMap1.get_height());\n"
                                   "\n"
                                   "            const uint2 texCoordD(frag.position.x, frag.position.y);\n"
                                   "\n"
                                   "            const BOOL firstPass = (flags.x > 0.0);\n"
                                   "\n"
                                   "            float d1 = depth1.read(texCoordD,0);\n"
                                   "            float d2 = depth2.read(texCoordD).r;\n"
                                   "            \n"
                                   "            if (firstPass || (d1 > d2)) {\n"
                                   "               out.fragColor = float4( colorMap1.sample(s, texCoordC));\n"
                                   "               out.fragDepth = d1;\n"
                                   "            } else {\n"
                                   "               out.fragColor = float4( colorMap2.sample(s, texCoordC));\n"
                                   "               out.fragDepth = d2;\n"
                                   "          }\n"
                                   "\n"
                                   "          return out;\n"
                                   "        }"),
                                 0,
                                 &v235));
        *(void *)&long long v207 = v122;
        int v123 = (_anonymous_namespace_::QuadDraw *)v235;
        if ((void)v235)
        {
          NSLog(&stru_1F119C630.isa, [(id)v235 localizedDescription]);
          NSLog(&stru_1F119C630.isa, [(id)v235 localizedFailureReason]);
        }
        id v125 = objc_alloc_init(MEMORY[0x1E4F352F0]);
        [v125 setRasterSampleCount:1];
        objc_msgSend(v125, "setVertexFunction:", (id)objc_msgSend(v122, "newFunctionWithName:", @"vertexShader"));
        objc_msgSend(v125, "setFragmentFunction:", (id)objc_msgSend(v122, "newFunctionWithName:", @"fragmentShader"));
        [v125 setVertexDescriptor:v124];
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v125, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 115);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v125, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setBlendingEnabled:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v125, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setPixelFormat:", 55);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v125, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setBlendingEnabled:", 0);
        *((void *)&v207 + 1) = [a10 newRenderPipelineStateWithDescriptor:v125 error:&v235];
        if ((void)v235) {
          NSLog(&cfstr_FailedToCreate_5.isa, (void)v235);
        }

        uint64_t v126 = 0;
        char v127 = 1;
        do
        {
          char v128 = v127;
          char v129 = (void *)[MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:55 width:v120 height:v121 mipmapped:0];
          [v129 setResourceOptions:32];
          [v129 setTextureType:2];
          [v129 setUsage:5];
          [v129 setSampleCount:1];
          float64x2_t v130 = (void *)[a10 newTextureWithDescriptor:v129];
          *((void *)&v208 + v12ProCore_Impl::PCNSRefImpl::release(this + 6) = v130;
          [v130 setLabel:objc_msgSend(NSString, "stringWithFormat:", @"DepthTexPingPong(%d)", v126)];
          char v127 = 0;
          uint64_t v126 = 1;
        }
        while ((v128 & 1) != 0);
        long long v58 = v169;
        PCSharedCount v131 = (void *)[MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:115 width:v120 height:v121 mipmapped:0];
        [v131 setResourceOptions:32];
        [v131 setTextureType:2];
        [v131 setUsage:1];
        *(void *)&long long v209 = [a10 newTextureWithDescriptor:v131];
        [(id)v209 setLabel:@"TemporaryColorCopy"];
      }
      if (v158)
      {
        float64x2_t v132 = (void *)[v174 blitCommandEncoder];
        uint64_t v133 = [a6 width];
        uint64_t v134 = [a6 height];
        long long v235 = 0uLL;
        *(void *)&long long v236 = 0;
        *(void *)&long long v245 = v133;
        *((void *)&v245 + 1) = v134;
        *(void *)&long long v246 = 1;
        double v217 = 0.0;
        long long v218 = 0uLL;
        [v132 copyFromTexture:a6 sourceSlice:0 sourceLevel:0 sourceOrigin:&v235 sourceSize:&v245 toTexture:(void)v209 destinationSlice:0 destinationLevel:0 destinationOrigin:&v217];
        float v166 = 0.0;
        [v132 endEncoding];
      }
      else
      {
        float v166 = 1.0;
      }
      PCSharedCount v135 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v135, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a6);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v135, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", v158 != 0);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v135, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v135, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setTexture:", *(void *)(((unint64_t)&v206 | (8 * !(v158 & 1))) + 0x20));
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v135, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setLoadAction:", v158 != 0);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v135, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setStoreAction:", 1);
      long long v136 = (void *)[v174 renderCommandEncoderWithDescriptor:v135];
      [v136 setLabel:@"Depth Comp. RenderEncoder"];
      [v136 setRenderPipelineState:*((void *)&v207 + 1)];
      [v136 setFragmentTexture:a5 atIndex:0];
      [v136 setFragmentTexture:a7 atIndex:1];
      [v136 setFragmentTexture:(void)v209 atIndex:2];
      [v136 setFragmentTexture:*(void *)(((unint64_t)&v206 | (8 * (v158 & 1))) + 0x20) atIndex:3];
      long long v228 = LODWORD(v166);
      [v136 setFragmentBytes:&v228 length:16 atIndex:0];
      uint64_t v137 = *((void *)&v209 + 1);
      [v136 setFrontFacingWinding:1];
      [v136 setCullMode:2];
      [v136 setVertexBuffer:v137 offset:0 atIndex:0];
      [v136 drawPrimitives:3 vertexStart:0 vertexCount:6];
      [v136 endEncoding];
      [v174 commit];
      [v174 waitUntilCompleted];
    }
    [v157 removeFromParentNode];

    std::recursive_mutex::unlock((std::recursive_mutex *)v155);
    uint64_t v61 = ++v158;
  }
  while (v154 > v158);
  if (v153)
  {
    v174 = (void *)[a9 commandBuffer];
    [v174 setLabel:objc_msgSend(NSString, "stringWithFormat:", @"alpha clamp. command buffer"];
    uint64_t v138 = *((void *)&v203 + 1);
    if (*((void **)&v203 + 1) != a10)
    {
      uint64_t v139 = [a6 width];
      uint64_t v140 = [a6 height];
      if (v138) {
      *((void *)&v203 + 1) = a10;
      }
      *(void *)&long long v235 = 0;
      long long v141 = objc_msgSend(a10, "newLibraryWithSource:options:error:", objc_msgSend(NSString, "stringWithUTF8String:", "\n        #include <metal_stdlib>\n\n        using namespace metal;\n"
                         "        //---------------------------------------\n"
                         "        // clip space processing\n"
                         "        //---------------------------------------\n"
                         "\n"
                         "        typedef struct\n"
                         "        {\n"
                         "            float3 position [[attribute(0)]];\n"
                         "        } ClipVertex;\n"
                         "\n"
                         "        typedef struct\n"
                         "        {\n"
                         "            float4 position [[position]];\n"
                         "        } ClipData;\n"
                         "\n"
                         "        vertex ClipData vertexShader(ClipVertex in [[stage_in]])\n"
                         "        {\n"
                         "            ClipData out;\n"
                         "            out.positiouint64_t n = float4(in.position, 1.0);\n"
                         "            return out;\n"
                         "        }\n"
                         "\n"
                         "        fragment float4 fragmentShader(ClipData frag [[stage_in]],\n"
                         "                                       texture2d<half> colorMap0 [[ texture(0) ]])\n"
                         "        {\n"
                         "            constexpr sampler colorSampler(mip_filter::none,\n"
                         "                                           mag_filter::nearest,\n"
                         "                                           min_filter::nearest);\n"
                         "\n"
                         "            const float2 texCoord0(frag.position.x / colorMap0.get_width(),\n"
                         "                                   frag.position.y / colorMap0.get_height());\n"
                         "            float4 color0 = float4(colorMap0.sample(colorSampler, texCoord0));\n"
                         "            color0.a = min(1.0, color0.a);\n"
                         "            return color0;\n"
                         "        }"),
                       0,
                       &v235);
      *(void *)&long long v204 = v141;
      long long v142 = (_anonymous_namespace_::QuadDraw *)v235;
      if ((void)v235)
      {
        NSLog(&stru_1F119C630.isa, [(id)v235 localizedDescription]);
        NSLog(&stru_1F119C630.isa, [(id)v235 localizedFailureReason]);
      }
      id v144 = objc_alloc_init(MEMORY[0x1E4F352F0]);
      [v144 setRasterSampleCount:1];
      objc_msgSend(v144, "setVertexFunction:", (id)objc_msgSend(v141, "newFunctionWithName:", @"vertexShader"));
      objc_msgSend(v144, "setFragmentFunction:", (id)objc_msgSend(v141, "newFunctionWithName:", @"fragmentShader"));
      [v144 setVertexDescriptor:v143];
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v144, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 115);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v144, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setBlendingEnabled:", 0);
      *(void *)&long long v235 = 0;
      *((void *)&v204 + 1) = [a10 newRenderPipelineStateWithDescriptor:v144 error:&v235];
      if ((void)v235) {
        NSLog(&cfstr_FailedToCreate_5.isa, (void)v235);
      }

      long long v145 = (void *)[MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:115 width:v139 height:v140 mipmapped:0];
      [v145 setResourceOptions:32];
      [v145 setTextureType:2];
      [v145 setUsage:1];
      *(void *)&long long v205 = [a10 newTextureWithDescriptor:v145];
      [(id)v205 setLabel:@"TemporaryCopy"];
    }
    std::vector<int> v146 = (void *)[v174 blitCommandEncoder];
    uint64_t v147 = [a6 width];
    uint64_t v148 = [a6 height];
    long long v235 = 0uLL;
    *(void *)&long long v236 = 0;
    *(void *)&long long v245 = v147;
    *((void *)&v245 + 1) = v148;
    *(void *)&long long v246 = 1;
    uint64_t v149 = v205;
    double v217 = 0.0;
    long long v218 = 0uLL;
    [v146 copyFromTexture:a6 sourceSlice:0 sourceLevel:0 sourceOrigin:&v235 sourceSize:&v245 toTexture:(void)v205 destinationSlice:0 destinationLevel:0 destinationOrigin:&v217];
    [v146 endEncoding];
    v150 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v150, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a6);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v150, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 0);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v150, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
    objc_msgSend((id)objc_msgSend(v150, "depthAttachment"), "setTexture:", 0);
    long long v151 = (void *)[v174 renderCommandEncoderWithDescriptor:v150];
    [v151 setRenderPipelineState:*((void *)&v204 + 1)];
    [v151 setFragmentTexture:v149 atIndex:0];
    uint64_t v152 = *((void *)&v205 + 1);
    [v151 setFrontFacingWinding:1];
    [v151 setCullMode:2];
    [v151 setVertexBuffer:v152 offset:0 atIndex:0];
    [v151 drawPrimitives:3 vertexStart:0 vertexCount:6];
    [v151 endEncoding];
    [v174 commit];
  }
  if (v174) {
    [v174 waitUntilScheduled];
  }
LABEL_122:
  std::mutex::unlock(&LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx);
}

void sub_1B7B5CAAC(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  std::mutex::unlock(&LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16LiHe3DEngineNode6renderERKNSt3__16vectorINS0_10shared_ptrI24Li3DEngineObjectDataBaseEENS0_9allocatorIS4_EEEEPU21objcproto10MTLTexture11objc_objectSB_SB_SB_SB_SB_PU26objcproto15MTLCommandQueue11objc_objectPU19objcproto9MTLDevice11objc_object6HGRectSG_9PCVector2IdE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = [a2 geometry];
  if (result)
  {
    double v5 = objc_msgSend((id)objc_msgSend(a2, "geometry"), "copy");
    [a2 setGeometry:v5];

    float v6 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "materials"), "count"));
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v7 = objc_msgSend((id)objc_msgSend(a2, "geometry"), "materials");
    uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v23 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v18;
      uint64_t v11 = *MEMORY[0x1E4F3B3C8];
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v18 != v10) {
            objc_enumerationMutation(v7);
          }
          int v13 = (void *)[*(id *)(*((void *)&v17 + 1) + 8 * i) copy];
          objc_msgSend((id)objc_msgSend(v13, "multiply"), "setContents:", objc_msgSend(MEMORY[0x1E4F428B8], "colorWithRed:green:blue:alpha:", *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52)));
          if (*(unsigned char *)(a1 + 56))
          {
            uint64_t v21 = v11;
            int v14 = NSString;
            [*(id *)(a1 + 32) opacity];
            uint64_t v22 = objc_msgSend(v14, "stringWithFormat:", @"_output.color *= %.3f;", v15 * 0.5);
            objc_msgSend(v13, "setShaderModifiers:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
            [v13 setDoubleSided:1];
            uint64_t v16 = *(unsigned __int8 *)(a1 + 56);
          }
          else
          {
            uint64_t v16 = 0;
          }
          [v13 setBlendMode:v16];
          [v13 setReadsFromDepthBuffer:*(unsigned char *)(a1 + 56) == 0];
          [v6 addObject:v13];
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v23 count:16];
      }
      while (v9);
    }
    return objc_msgSend((id)objc_msgSend(a2, "geometry"), "setMaterials:", v6);
  }
  return result;
}

BOOL LiHe3DEngineNode::hasDepthMatte(LiHe3DEngineNode *this)
{
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), "isEqualToString:", @"com.apple.motionapp"))
  {
    uint64_t v2 = (char *)this + 432;
    return *(void *)v2 != 0;
  }
  if (*((void *)this + 52))
  {
    uint64_t v2 = (char *)this + 424;
    return *(void *)v2 != 0;
  }
  return 0;
}

uint64_t LiHe3DEngineNode::RenderPageMetal(HGNode *this, HGPage *a2)
{
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v35, this, a2);
  double v32 = 0;
  double v33 = 0;
  uint64_t v34 = 0;
  LiHe3DEngineNode::traverse((uint64_t)this, *((const void **)this + 55), (uint64_t *)&v32);
  double v5 = v32;
  if (v33 == v32)
  {
    uint64_t v11 = LiHe3DEngineNode::setupOutputColorTexture(v4, a2);
    HGGPURenderer::ClearMetal(*(HGGPURenderer **)a2, *((HGBitmap **)a2 + 1), *((HGRect *)a2 + 1), v12);
    (*(void (**)(HGBitmap *))(*(void *)v11 + 24))(v11);
    uint64_t v13 = *((void *)a2 + 1);
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (int *)*v5;
      v5 += 2;
      unint64_t v8 = v7[45];
      if (v6 <= v8) {
        unint64_t v6 = v8;
      }
    }
    while (v5 != v33);
    uint64_t v9 = LiHe3DEngineNode::setupOutputColorTexture(v4, a2);
    uint64_t v10 = (void *)*((void *)v9 + 18);
    if (v6 < 9)
    {
      v36[0] = 0;
      double v31 = 0;
    }
    else
    {
      LiHe3DEngineNode::setupColorTexture((HGGPURenderer **)a2, v36);
      LiHe3DEngineNode::setupColorTexture((HGGPURenderer **)a2, &v31);
    }
    int v14 = *(void **)(*(void *)(HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a2) + 16) + 16);
    uint64_t DeviceInfo = HGMetalDeviceInfo::getDeviceInfo((uint64_t)v14);
    if (DeviceInfo) {
      unsigned int v16 = *(_DWORD *)(DeviceInfo + 52);
    }
    else {
      unsigned int v16 = 4;
    }
    LiHe3DEngineNode::createTextureFromPool((uint64_t)a2, 27, v16, &v30);
    LiHe3DEngineNode::createTextureFromPool((uint64_t)a2, 9, v16, &v29);
    LiHe3DEngineNode::createTextureFromPool((uint64_t)a2, 9, 1u, &v28);
    long long v17 = (id *)HGRectMake4f((*((_DWORD *)this + 155) + *((_DWORD *)this + 153)), (float)*((int *)this + 152), (float)*((int *)this + 153), (float)(*((_DWORD *)this + 154) + *((_DWORD *)this + 152)), (float)(*((_DWORD *)this + 155) + *((_DWORD *)this + 153)));
    long long v19 = v18;
    long long v20 = (void *)*((void *)a2 + 2);
    uint64_t v21 = (double *)*((void *)a2 + 3);
    double v22 = *((double *)this + 60);
    double v23 = *(void **)(HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a2) + 32);
    LiHe3DEngineNode::doPeopleOcclusion((uint64_t)this, (uint64_t)a2, v23, (uint64_t)v14, v30[18], v29[18]);
    if (v36[0]) {
      uint64_t v24 = v36[0][18];
    }
    else {
      uint64_t v24 = 0;
    }
    double v25 = fabs(v22);
    if (v31) {
      int v26 = (void *)v31[18];
    }
    else {
      int v26 = 0;
    }
    LiHe3DEngineNode::render((uint64_t)this, &v32, (uint64_t)v30[18], v24, v26, v10, (void *)v29[18], v28[18], v23, v14, *(int32x2_t *)&v25, v17, v19, v20, v21);
    (*(void (**)(HGBitmap *))(*(void *)v9 + 24))(v9);
    uint64_t v13 = *((void *)a2 + 1);
    if (v28) {
      (*(void (**)(uint64_t *))(*v28 + 24))(v28);
    }
    if (v29) {
      (*(void (**)(uint64_t *))(*v29 + 24))(v29);
    }
    if (v30) {
      (*((void (**)(void **))*v30 + 3))(v30);
    }
    if (v31) {
      (*(void (**)(void *))(*v31 + 24))(v31);
    }
    if (v36[0]) {
      (*((void (**)(void **))*v36[0] + 3))(v36[0]);
    }
  }
  v36[0] = (void **)&v32;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](v36);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v35);
  return v13;
}

void sub_1B7B5D1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v25 = *(void *)(v23 - 112);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }
  *(void *)(v23 - 112) = &a23;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 112));
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)(v23 - 120));
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::doPeopleOcclusion(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (LiHe3DEngineNode::hasDepthMatte((LiHe3DEngineNode *)a1))
  {
    uint64_t v12 = (void *)[a3 commandBuffer];
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), "isEqualToString:", @"com.apple.motionapp"))
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(*(void *)(a1 + 432) + 144);
    }
    else
    {
      double v15 = *(HGRenderer **)a2;
      uint64_t DOD = HGRenderer::GetDOD(*(HGRenderer **)a2, *(HGNode **)(a1 + 416));
      uint64_t v18 = v17;
      Input = HGRenderer::GetInput(v15, *(HGNode **)(a1 + 416), 0);
      *(void *)&v39.int var0 = DOD;
      *(void *)&v39.var2 = v18;
      NodeMetalTexture = HGGPURenderer::GetNodeMetalTexture(v15, Input, v39, 0, 1u);
      uint64_t v13 = *((void *)NodeMetalTexture + 18);
      (*(void (**)(HGBitmap *))(*(void *)NodeMetalTexture + 24))(NodeMetalTexture);
      uint64_t v21 = HGRenderer::GetInput(v15, *(HGNode **)(a1 + 424), 0);
      *(void *)&v40.int var0 = HGRectMake4i(0xFFFFD8F0, 0xFFFFD8F0, 0x2710u, 0x2710u);
      *(void *)&v40.var2 = v22;
      uint64_t v23 = HGGPURenderer::GetNodeMetalTexture(v15, v21, v40, 0, 1u);
      uint64_t v14 = *((void *)v23 + 18);
      (*(void (**)(HGBitmap *))(*(void *)v23 + 24))(v23);
    }
    v38[0] = (int32x2_t)HGRectMake4f((*(_DWORD *)(a1 + 620) + *(_DWORD *)(a1 + 612)), (float)*(int *)(a1 + 608), (float)*(int *)(a1 + 612), (float)(*(_DWORD *)(a1 + 616) + *(_DWORD *)(a1 + 608)), (float)(*(_DWORD *)(a1 + 620) + *(_DWORD *)(a1 + 612)));
    v38[1] = v24;
    long long v37 = *(_OWORD *)(a2 + 16);
    double v25 = fabs(*(double *)(a1 + 520));
    v36.f64[0] = fabs(*(double *)(a1 + 480));
    v36.f64[1] = v25;
    uint64_t v27 = *(void *)(a1 + 456);
    if (!v27) {
      throw_PCNullPointerException(1);
    }
    *(float *)&unsigned int v28 = (*(double (**)(uint64_t, void, double))(*(void *)v27 + 248))(v27, 0, PerspectiveFrustumLimits);
    *(float *)&unsigned int v29 = v34;
    *(float *)&unsigned int v30 = v35;
    uint64_t v31 = *(unsigned int *)(a1 + 408);
    double v32 = -[LiPersonDepthWriter initWithDevice:sampleCount:]([LiPersonDepthWriter alloc], "initWithDevice:sampleCount:", a4, [a5 sampleCount]);
    -[LiPersonDepthWriter writeWithDepthMap:matte:depthTexture:colorTexture:uniforms:windowSize:commandBuffer:](v32, "writeWithDepthMap:matte:depthTexture:colorTexture:uniforms:windowSize:commandBuffer:", v14, v13, a6, a5, v28 | ((unint64_t)v29 << 32), v30 | (unint64_t)(v31 << 32), (double)*(int *)(a1 + 616), (double)*(int *)(a1 + 620), v12);
    [v12 commit];
    [v12 waitUntilCompleted];
  }
}

float64_t anonymous namespace'::getPerspectiveFrustumLimits@<D0>(const PCSharedCount *a1@<X0>, int32x2_t *a2@<X1>, _DWORD *a3@<X2>, float64x2_t *a4@<X3>, uint64_t a5@<X8>)
{
  int var0 = a1->var0;
  PCSharedCount::PCSharedCount(&v48, a1 + 1);
  if (!var0) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(_OWORD *__return_ptr))(*(void *)var0 + 56))(v56);
  *(_OWORD *)&v51[32] = v56[4];
  long long v52 = v56[5];
  long long v53 = v56[6];
  *(_OWORD *)double v54 = v56[7];
  long long v49 = v56[0];
  float64x2_t v50 = (float64x2_t)v56[1];
  *(_OWORD *)double v51 = v56[2];
  *(_OWORD *)&v51[16] = v56[3];
  PCMatrix44Tmpl<double>::invert((double *)&v49, (double *)&v49, 0.0);
  long long v57 = xmmword_1B7E7C890;
  long long v58 = xmmword_1B7E73BA0;
  long long v59 = 0u;
  long long v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  float64_t v42 = *((double *)&v60 + 1);
  float64_t v44 = *(double *)&v59;
  long long v57 = xmmword_1B7E733D0;
  long long v58 = xmmword_1B7E73BA0;
  long long v59 = 0u;
  long long v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  float64_t v39 = *((double *)&v60 + 1);
  float64_t v40 = *(double *)&v59;
  long long v57 = xmmword_1B7E7E030;
  long long v58 = xmmword_1B7E73BA0;
  long long v59 = 0u;
  long long v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  float64_t v38 = *((double *)&v59 + 1);
  float64_t v37 = *((double *)&v60 + 1);
  long long v57 = xmmword_1B7E733E0;
  long long v58 = xmmword_1B7E73BA0;
  long long v59 = 0u;
  long long v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  float64_t v36 = *((double *)&v59 + 1);
  float64_t v35 = *((double *)&v60 + 1);
  long long v57 = 0uLL;
  long long v58 = xmmword_1B7E73BA0;
  long long v59 = 0u;
  long long v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  long long v9 = v60;
  long long v57 = 0uLL;
  __asm { FMOV            V1.2D, #1.0 }
  float64x2_t v46 = (float64x2_t)_Q1;
  long long v58 = _Q1;
  long long v59 = 0u;
  long long v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  long long v15 = v60;
  uint64_t v55 = 0x3FF0000000000000;
  *(void *)double v54 = 0x3FF0000000000000;
  *(void *)&unsigned char v51[40] = 0x3FF0000000000000;
  *(void *)double v51 = 0x3FF0000000000000;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  long long v53 = 0u;
  memset(&v54[8], 0, 32);
  (*(void (**)(PC_Sp_counted_base *, long long *))(*(void *)var0 + 264))(var0, &v49);
  v16.f64[0] = v42;
  v16.f64[1] = v37;
  v17.f64[0] = v39;
  v17.f64[1] = v35;
  v18.f64[0] = v44;
  v18.f64[1] = v38;
  float64x2_t v19 = vmulq_f64(v18, vdivq_f64(v46, v16));
  v16.f64[0] = v40;
  v16.f64[1] = v36;
  float64x2_t v41 = vmulq_f64(v16, vdivq_f64(v46, v17));
  int64x2_t v43 = vcvtq_s64_f64(v50);
  float64x2_t v45 = v19;
  PCSharedCount::~PCSharedCount(&v48);
  int32x2_t v20 = vsub_s32(a2[1], *a2);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  int v22 = a3[1];
  int v23 = a3[2];
  unsigned int v24 = v23 - *a3;
  int v25 = v20.i32[0] - v23;
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v27 = vmulq_f64(vaddq_f64(v45, v41), _Q3);
  float64x2_t v28 = vcvtq_f64_u64(v21);
  float64x2_t v29 = vmulq_f64(vdivq_f64(v46, *a4), vmulq_f64(vdivq_f64(vsubq_f64(v41, v45), vcvtq_f64_s64(v43)), vmulq_f64(v28, _Q3)));
  float64x2_t v30 = vsubq_f64(v27, v29);
  float64x2_t v31 = vdivq_f64(vsubq_f64(vaddq_f64(v27, v29), v30), v28);
  v32.f64[0] = (double)v24;
  v32.f64[1] = (double)v22;
  v30.f64[0] = v30.f64[0] + (double)v25 * v31.f64[0];
  float64x2_t v33 = vaddq_f64(vmulq_f64(v31, v32), v30);
  v31.f64[0] = vmuld_lane_f64((double)(a3[3] - v22), v31, 1);
  *(float64_t *)a5 = v30.f64[0];
  *(float64x2_t *)(a5 + 8) = v33;
  float64_t result = v31.f64[0] + v33.f64[1];
  *(float64_t *)(a5 + 24) = result;
  *(double *)(a5 + 32) = *(double *)&v9 * (-1.0 / *((double *)&v9 + 1));
  *(double *)(a5 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(double *)&v15 * (-1.0 / *((double *)&v15 + 1));
  return result;
}

void sub_1B7B5D9C0(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void *getRenderPassLoadColorLoadDepthResolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setResolveTexture:", a2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setResolveTexture:", a4);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setLoadAction:", 1);
  return v8;
}

void anonymous namespace'::ColorAccumulator::releaseResources(id *this)
{
  id v2 = this[6];
}

void *anonymous namespace'::QuadDraw::createVertexDescriptor(_anonymous_namespace_::QuadDraw *this)
{
  uint64_t v1 = objc_opt_new();
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "attributes"), "objectAtIndexedSubscript:", 0), "setFormat:", 30);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "attributes"), "objectAtIndexedSubscript:", 0), "setOffset:", 0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "attributes"), "objectAtIndexedSubscript:", 0), "setBufferIndex:", 0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "layouts"), "objectAtIndexedSubscript:", 0), "setStride:", 12);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "layouts"), "objectAtIndexedSubscript:", 0), "setStepRate:", 1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "layouts"), "objectAtIndexedSubscript:", 0), "setStepFunction:", 1);
  return v1;
}

void anonymous namespace'::RGBDepthCompositor::releaseResources(id *this)
{
  id v2 = this[7];
}

void anonymous namespace'::AlphaClamper::releaseResources(id *this)
{
  id v2 = this[5];
}

uint64_t std::vector<std::shared_ptr<Li3DEngineObjectDataBase>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Li3DEngineObjectDataBase>>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Li3DEngineObjectDataBase>>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Li3DEngineObjectDataBase>>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Li3DEngineObjectDataBase>>,std::reverse_iterator<std::shared_ptr<Li3DEngineObjectDataBase>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TXTextObject>>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void LiHeLightAmbient::LiHeLightAmbient(LiHeLightAmbient *this)
{
}

uint64_t LiHeLightAmbient::setColor(LiHeLightAmbient *this, const PCWorkingColorVector *a2)
{
  return (*(uint64_t (**)(LiHeLightAmbient *, void, float, float, float, double))(*(void *)this + 96))(this, 0, *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), 0.0);
}

void LiHeLightAmbient::~LiHeLightAmbient(HGNode *this)
{
  LiHeLightProgramAmbient::~LiHeLightProgramAmbient(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightAmbient::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3) {
    return 27;
  }
  else {
    return a2;
  }
}

void LiHeLightDirectional::LiHeLightDirectional(LiHeLightAmbient *a1)
{
}

void sub_1B7B5DFF4(_Unwind_Exception *a1)
{
  LiHeLightAmbient::~LiHeLightAmbient(v1);
  _Unwind_Resume(a1);
}

void LiHeLightDirectional::~LiHeLightDirectional(LiHeLightDirectional *this)
{
  LiHeLightAmbient::~LiHeLightAmbient(this);

  HGObject::operator delete(v1);
}

void LiHeLightPointSurface::LiHeLightPointSurface(LiHeLightProgramPointSurface *a1)
{
}

{
  LiHeLightPointSurface::LiHeLightPointSurface(a1);
}

void sub_1B7B5E2D0(_Unwind_Exception *a1)
{
  LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightPointSurface::setScreenToLocal(uint64_t a1, double *a2)
{
  float v4 = *a2;
  float v5 = a2[4];
  float v6 = a2[8];
  float v7 = a2[12];
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 8, v4, v5, v6, v7);
  float v9 = a2[1];
  float v10 = a2[5];
  float v11 = a2[9];
  float v12 = a2[13];
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 9, v9, v10, v11, v12);
  int v14 = v13 + v8;
  float v15 = a2[2];
  float v16 = a2[6];
  float v17 = a2[10];
  float v18 = a2[14];
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 10, v15, v16, v17, v18);
  float v20 = a2[3];
  float v21 = a2[7];
  float v22 = a2[11];
  float v23 = a2[15];
  return v14
       + v19
       + (*(unsigned int (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 11, v20, v21, v22, v23);
}

void LiHeLightPointSurface::~LiHeLightPointSurface(HGNode *this)
{
  LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightPointSurface::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3) {
    return 27;
  }
  else {
    return a2;
  }
}

uint64_t LiAsyncBitmapLoader::LiAsyncBitmapLoader(uint64_t a1, _DWORD *a2, PCURL *a3, int a4, CGColorSpace **a5, char a6)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_DWORD *)(a1 + 8) = a2[2];
  *(_DWORD *)(a1 + 12) = a2[3];
  PCURL::PCURL((PCURL *)(a1 + 16), a3);
  *(_DWORD *)(a1 + 24) = a4;
  float v10 = *a5;
  *(void *)(a1 + 32) = *a5;
  if (v10) {
    PCCFRefTraits<CGColorSpace *>::retain(v10);
  }
  *(unsigned char *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a6;
  return a1;
}

void sub_1B7B5E524(_Unwind_Exception *a1)
{
  PCURL::~PCURL(v1);
  _Unwind_Resume(a1);
}

LoadLockCache *LiAsyncBitmapLoader::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (LoadLockCache *)LiCachingDelegateGetBitmap((const PCHash128 *)a1, a2);
  if (!*a2)
  {
    float v5 = (PCMutex *)LoadLockCache::instance(result);
    LiLockCache<PCHash128,PCMutex>::getLock(v5, (const PCHash128 *)a1, (uint64_t)&v30.var5);
    LiCachingDelegateGetBitmap((const PCHash128 *)a1, &v30);
    long long v6 = *(_OWORD *)&v30.var0;
    v30.int var0 = 0;
    v30.var1 = 0;
    float v7 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (v30.var1) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v30.var1);
      }
      if (*a2) {
        return (LoadLockCache *)LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&v30.var5);
      }
    }
    else if ((void)v6)
    {
      return (LoadLockCache *)LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&v30.var5);
    }
    PCTimer::PCTimer((PCTimer *)&v30);
    PCTimer::start((PCTimer *)&v30);
    CFURLRef v8 = *(const __CFURL **)(a1 + 16);
    CGColorSpace = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(a1 + 32));
    int v28 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v10 = *(unsigned int *)(a1 + 24);
    PCLoadBitmap(v8, v29);
    float64x2_t v27 = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)v29[0]);
    unsigned int v11 = (*(uint64_t (**)(void))(**((void **)v29[0] + 8) + 48))(*((void *)v29[0] + 8));
    int hasGray = PCPixelFormat::hasGray(v10);
    hasdouble Alpha = PCPixelFormat::hasAlpha(v10);
    int v14 = PCPixelFormat::hasGray(v11);
    int v15 = PCPixelFormat::hasAlpha(v11);
    BOOL isFloat = PCPixelFormat::isFloat(v11);
    int BitsPerChannel = PCPixelFormat::getBitsPerChannel(v11);
    if (CGColorSpace) {
      BOOL v17 = !PCColorSpaceHandle::isSameColorSpace(CGColorSpace, v27, v16);
    }
    else {
      BOOL v17 = 0;
    }
    if (((hasGray | v17) & 1) == 0 && ((v14 ^ 1) & 1) == 0) {
      uint64_t v10 = PCPixelFormat::setGray(v10);
    }
    if (((hasAlpha ^ 1 | v15) & 1) == 0) {
      uint64_t v10 = PCPixelFormat::removeAlpha(v10);
    }
    BOOL v18 = PCPixelFormat::isFloat(v11);
    BOOL v19 = PCPixelFormat::isFloat(v10);
    if (v18)
    {
      if (!v19)
      {
LABEL_24:
        if (v10 != v11)
        {
          if (CGColorSpace) {
            getColorSpaceForConversion(CGColorSpace, v10, (CGColorSpace **)&v30.var11);
          }
          else {
            getColorSpaceForConversion(v27, v10, (CGColorSpace **)&v30.var11);
          }
          (*(void (**)(PCBitmap *))(*(void *)v29[0] + 16))(v29[0]);
          (*(void (**)(PCBitmap *))(*(void *)v29[0] + 24))(v29[0]);
          PCCreateBitmap();
        }
        if (((*(uint64_t (**)(PCBitmap *))(*(void *)v29[0] + 48))(v29[0]) & 1) == 0) {
          PCBitmap::premultiply(v29[0]);
        }
        if (v28) {
          PCBitmap::flip(v29[0]);
        }
        long long v22 = *(_OWORD *)v29;
        v29[0] = 0;
        v29[1] = 0;
        float v23 = (std::__shared_weak_count *)a2[1];
        *(_OWORD *)a2 = v22;
        if (v23)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          if (v29[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29[1]);
          }
        }
        PCTimer::stop((PCTimer *)&v30);
        PCTimer::getSeconds((PCTimer *)&v30);
        LiCachingDelegateAddBitmap((uint64_t)a2, a1);
        OZChannelBase::setRangeName(&v30, v24);
        return (LoadLockCache *)LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&v30.var5);
      }
    }
    else if (v19)
    {
      BOOL v20 = 1;
      goto LABEL_22;
    }
    unsigned int v21 = PCPixelFormat::getBitsPerChannel(v11);
    BOOL v20 = v21 < PCPixelFormat::getBitsPerChannel(v10);
LABEL_22:
    if (v20 && !v17) {
      LODWORD(v1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = PCPixelFormat::setDepth(v10, BitsPerChannel, isFloat);
    }
    goto LABEL_24;
  }
  return result;
}

void sub_1B7B5E8DC(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, OZChannelBase *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&a15, a2);
  LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&a20);
  long long v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void LiLoadBitmapAsync(PCURL *a1@<X1>, long long *a2@<X0>, int a3@<W2>, CGColorSpace **a4@<X3>, char a5@<W4>, void *a6@<X8>)
{
  long long v7 = *a2;
  LiAsyncBitmapLoader::LiAsyncBitmapLoader((uint64_t)&v8, &v7, a1, a3, a4, a5);
  std::async[abi:ne180100]<LiAsyncBitmapLoader>(3, &v8, a6);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  PCURL::~PCURL((PCURL *)&v9);
}

void sub_1B7B5E9E8(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 32));
  PCURL::~PCURL((PCURL *)(v1 + 16));
  _Unwind_Resume(a1);
}

void getColorSpaceForConversion(CGColorSpace *a1@<X0>, unsigned int a2@<W1>, CGColorSpace **a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CGColorSpaceGetModel(a1) == kCGColorSpaceModelRGB)
  {
    if (!PCPixelFormat::hasRGB(a2))
    {
      PCICCProfile::PCICCProfile((PCICCProfile *)v7, a1);
      PCMakeDisplayGrayProfileFromRGBProfile((const PCICCProfile *)v7, (PCICCProfile *)v6);
      PCMakeColorSpaceFromProfile((const PCICCProfile *)v6, a3);
LABEL_8:
      PCICCProfile::~PCICCProfile((PCICCProfile *)v6);
      PCICCProfile::~PCICCProfile((PCICCProfile *)v7);
      return;
    }
  }
  else
  {
    if (CGColorSpaceGetModel(a1))
    {
      *a3 = 0;
      return;
    }
    if (PCPixelFormat::hasRGB(a2))
    {
      PCICCProfile::PCICCProfile((PCICCProfile *)v7, a1);
      PCMakeDisplayRGBProfileFromGrayProfile((const PCICCProfile *)v7, (PCICCProfile *)v6);
      PCMakeColorSpaceFromProfile((const PCICCProfile *)v6, a3);
      goto LABEL_8;
    }
  }

  PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)a3, a1);
}

void sub_1B7B5EB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2)
  {
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a10);
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a38);
    __cxa_begin_catch(exception_object);
    if (PCEstimateGamma(v39) == 1.0) {
      PCColorSpaceCache::rec709Linear(v38);
    }
    else {
      PCColorSpaceCache::sRGB(v38);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B7B5EACCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::async[abi:ne180100]<LiAsyncBitmapLoader>@<X0>(uint64_t result@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  if (result)
  {
    long long v4 = *a2;
    PCURL::PCURL((PCURL *)&v5, (const PCURL *)(a2 + 1));
    int v6 = *((_DWORD *)a2 + 6);
    uint64_t v7 = *((void *)a2 + 4);
    *((void *)a2 + 4) = 0;
    char v8 = *((unsigned char *)a2 + 40);
    std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100]((uint64_t)v9, (uint64_t)&v4);
    std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>();
  }
  if ((result & 2) != 0)
  {
    long long v4 = *a2;
    PCURL::PCURL((PCURL *)&v5, (const PCURL *)(a2 + 1));
    int v6 = *((_DWORD *)a2 + 6);
    uint64_t v7 = *((void *)a2 + 4);
    *((void *)a2 + 4) = 0;
    char v8 = *((unsigned char *)a2 + 40);
    std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100]((uint64_t)v9, (uint64_t)&v4);
    std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>();
  }
  *a3 = 0;
  return result;
}

void sub_1B7B5EDE8(_Unwind_Exception *a1)
{
}

void std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>()
{
}

void sub_1B7B5EF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12)
{
  if (!atomic_fetch_add(v13, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>()
{
}

void sub_1B7B5F140(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(v2, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::~__async_assoc_state(uint64_t a1)
{
  *(void *)a1 = &unk_1F112B8A0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F112B8A0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::__on_zero_shared(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);

  return std::__assoc_state<std::shared_ptr<PCBitmap>>::__on_zero_shared((uint64_t)a1);
}

void std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::__execute(uint64_t a1)
{
  LiAsyncBitmapLoader::operator()(a1 + 160, &v2);
  std::__assoc_state<std::shared_ptr<PCBitmap>>::set_value<std::shared_ptr<PCBitmap>>(a1, (uint64_t)&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1B7B5F3A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v14.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v12, v14);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1B7B5F390);
}

void sub_1B7B5F3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  PCURL::PCURL((PCURL *)(a1 + 16), (const PCURL *)(a2 + 16));
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(unsigned char *)(a2 + 40);
  return a1;
}

void std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>*,void>()
{
}

void sub_1B7B5F544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>*>>(uint64_t *a1)
{
  uint64_t v7 = (const void **)a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *v7;
  std::__shared_weak_count *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  PCSharedCount v3 = (void (*)(void *))v7[1];
  uint64_t v4 = (uint64_t)v7[2];
  uint64_t v5 = (char *)v7[3] + (v4 >> 1);
  if (v4) {
    PCSharedCount v3 = *(void (**)(void *))(*v5 + v3);
  }
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100]((uint64_t **)&v7, 0);
  return 0;
}

void sub_1B7B5F62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

void std::__deferred_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::~__deferred_assoc_state(uint64_t a1)
{
  *(void *)a1 = &unk_1F112B8E8;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F112B8E8;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__deferred_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::__execute(uint64_t a1)
{
  LiAsyncBitmapLoader::operator()(a1 + 160, &v2);
  std::__assoc_state<std::shared_ptr<PCBitmap>>::set_value<std::shared_ptr<PCBitmap>>(a1, (uint64_t)&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1B7B5F7CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v14.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v12, v14);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1B7B5F7BCLL);
}

void sub_1B7B5F810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void LiHeLightPointSurfaceDiffuse::LiHeLightPointSurfaceDiffuse(LiHeLightProgramPointSurfaceDiffuse *a1)
{
}

void sub_1B7B5FA00(_Unwind_Exception *a1)
{
  LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightPointSurfaceDiffuse::setScreenToLocal(uint64_t a1, double *a2)
{
  float v4 = *a2;
  float v5 = a2[4];
  float v6 = a2[8];
  float v7 = a2[12];
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 5, v4, v5, v6, v7);
  float v9 = a2[1];
  float v10 = a2[5];
  float v11 = a2[9];
  float v12 = a2[13];
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 6, v9, v10, v11, v12);
  int v14 = v13 + v8;
  float v15 = a2[2];
  float v16 = a2[6];
  float v17 = a2[10];
  float v18 = a2[14];
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 7, v15, v16, v17, v18);
  float v20 = a2[3];
  float v21 = a2[7];
  float v22 = a2[11];
  float v23 = a2[15];
  return v14
       + v19
       + (*(unsigned int (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 8, v20, v21, v22, v23);
}

void LiHeLightPointSurfaceDiffuse::~LiHeLightPointSurfaceDiffuse(HGNode *this)
{
  LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightPointSurfaceDiffuse::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3) {
    return 27;
  }
  else {
    return a2;
  }
}

void LiHeLightSpotSurface::LiHeLightSpotSurface(LiHeLightProgramSpotSurface *a1)
{
}

{
  LiHeLightSpotSurface::LiHeLightSpotSurface(a1);
}

void sub_1B7B5FF78(_Unwind_Exception *a1)
{
  LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(v1);
  _Unwind_Resume(a1);
}

void LiHeLightSpotSurface::~LiHeLightSpotSurface(HGNode *this)
{
  LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightSpotSurface::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3) {
    return 27;
  }
  else {
    return a2;
  }
}

void LiHeLightSpotSurfaceDiffuse::LiHeLightSpotSurfaceDiffuse(LiHeLightProgramSpotSurfaceDiffuse *a1)
{
}

{
  LiHeLightSpotSurfaceDiffuse::LiHeLightSpotSurfaceDiffuse(a1);
}

void sub_1B7B6030C(_Unwind_Exception *a1)
{
  LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightSpotSurfaceDiffuse::setScreenToLocal(uint64_t a1, double *a2)
{
  float v4 = *a2;
  float v5 = a2[4];
  float v6 = a2[8];
  float v7 = a2[12];
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 6, v4, v5, v6, v7);
  float v9 = a2[1];
  float v10 = a2[5];
  float v11 = a2[9];
  float v12 = a2[13];
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 7, v9, v10, v11, v12);
  int v14 = v13 + v8;
  float v15 = a2[2];
  float v16 = a2[6];
  float v17 = a2[10];
  float v18 = a2[14];
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 8, v15, v16, v17, v18);
  float v20 = a2[3];
  float v21 = a2[7];
  float v22 = a2[11];
  float v23 = a2[15];
  return v14
       + v19
       + (*(unsigned int (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 9, v20, v21, v22, v23);
}

void LiHeLightSpotSurfaceDiffuse::~LiHeLightSpotSurfaceDiffuse(HGNode *this)
{
  LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightSpotSurfaceDiffuse::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3) {
    return 27;
  }
  else {
    return a2;
  }
}

void LiHePointLightStencil::LiHePointLightStencil(LiHeProgramPointLightStencil *a1)
{
}

void sub_1B7B605E0(_Unwind_Exception *a1)
{
  LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHePointLightStencil::GetDOD(LiHePointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHePointLightStencil::GetROI(LiHePointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHePointLightStencil::~LiHePointLightStencil(HGNode *this)
{
  LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(this);

  HGObject::operator delete(v1);
}

void LiHeShadowPCSS::LiHeShadowPCSS(LiHeShadowProgramPCSS *a1)
{
}

void sub_1B7B60860(_Unwind_Exception *a1)
{
  LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeShadowPCSS::GetDOD(LiHeShadowPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0x8000000080000000;
}

uint64_t LiHeShadowPCSS::GetROI(LiHeShadowPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

uint64_t LiHeShadowPCSS::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27) {
    return 27;
  }
  else {
    return a2;
  }
}

void LiHeShadowPCSS::~LiHeShadowPCSS(HGNode *this)
{
  LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(this);

  HGObject::operator delete(v1);
}

void LiImageReflection::LiImageReflection(LiImageReflection *this)
{
  *((void *)this + 9) = &unk_1F1199AC8;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((unsigned char *)this + 88) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F112C648);
  *(void *)this = &unk_1F112C540;
  *((void *)this + 9) = &unk_1F112C628;
  *((void *)this + 5) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 6);
  *((void *)this + 7) = 0x3FE0000000000000;
  *((_DWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
}

void sub_1B7B609A0(_Unwind_Exception *a1)
{
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1F112C648);
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiImageReflection::clone(LiImageReflection *this)
{
}

void sub_1B7B60B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

PCShared_base **LiImageReflection::setReflectionInput(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 5, (PCShared_base *)a2);
}

uint64_t LiImageReflection::setReflectivity(uint64_t this, double a2)
{
  *(double *)(this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  return this;
}

uint64_t LiImageReflection::setBlendMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

uint64_t LiImageReflection::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, LiHeLimit **a3@<X8>)
{
  LiAgent::passROI(a2);
  LiAgent::getHelium(a2, this[5], &v14);
  LiAgent::getHelium(a2, this[2], (uint64_t *)&v13);
  if (v14 && v13)
  {
    int v6 = *((_DWORD *)this + 16);
    if (!v6)
    {
      float v11 = (LiHeReflectionShader *)HGObject::operator new(0x1A0uLL);
      *((_OWORD *)v11 + 24) = 0u;
      *((_OWORD *)v11 + 25) = 0u;
      *((_OWORD *)v11 + 22) = 0u;
      *((_OWORD *)v11 + 23) = 0u;
      *((_OWORD *)v11 + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
      *((_OWORD *)v11 + 21) = 0u;
      *((_OWORD *)v11 + 18) = 0u;
      *((_OWORD *)v11 + 19) = 0u;
      *((_OWORD *)v11 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
      *((_OWORD *)v11 + 17) = 0u;
      *((_OWORD *)v11 + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0u;
      *((_OWORD *)v11 + 15) = 0u;
      *((_OWORD *)v11 + 12) = 0u;
      *((_OWORD *)v11 + 13) = 0u;
      *((_OWORD *)v11 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
      *((_OWORD *)v11 + 11) = 0u;
      *((_OWORD *)v11 + 8) = 0u;
      *((_OWORD *)v11 + 9) = 0u;
      *((_OWORD *)v11 + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
      *((_OWORD *)v11 + 7) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *(_OWORD *)float v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      LiHeReflectionShader::LiHeReflectionShader(v11);
    }
    unsigned int v7 = LiHelium::convertMotionBlendMode(v6);
    int v8 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
    HGHWBlendFlipped::HGHWBlendFlipped(v8);
    (*(void (**)(HGHWBlendFlipped *, void, float, double, double, double))(*(void *)v8 + 96))(v8, 0, (float)v7, 0.0, 0.0, 0.0);
    float v9 = *((double *)this + 7);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, float, double, double, double))(*(void *)v8 + 96))(v8, 1, v9, 0.0, 0.0, 0.0);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, double, double, double, double))(*(void *)v8 + 96))(v8, 2, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, float, double, double, double))(*(void *)v8 + 96))(v8, 5, *(float *)(*((void *)a2 + 6) + 192), 0.0, 0.0, 0.0);
    (*(void (**)(HGHWBlendFlipped *, void, LiHeLimit *))(*(void *)v8 + 120))(v8, 0, v13);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, uint64_t))(*(void *)v8 + 120))(v8, 1, v14);
    float v10 = (LiHeLimit *)HGObject::operator new(0x1A0uLL);
    LiHeLimit::LiHeLimit(v10);
    (*(void (**)(LiHeLimit *, void, LiHeLimit *))(*(void *)v10 + 120))(v10, 0, v13);
    (*(void (**)(LiHeLimit *, uint64_t, HGHWBlendFlipped *))(*(void *)v10 + 120))(v10, 1, v8);
    *a3 = v10;
    (*(void (**)(HGHWBlendFlipped *))(*(void *)v8 + 24))(v8);
    if (v13) {
      (*(void (**)(LiHeLimit *))(*(void *)v13 + 24))(v13);
    }
  }
  else
  {
    *a3 = v13;
  }
  uint64_t result = v14;
  if (v14) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  return result;
}

void sub_1B7B60F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t LiImageReflection::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = LiImageFilter::estimateRenderMemory(a1);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    v4 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
  }
  return v4;
}

void LiImageReflection::~LiImageReflection(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F112C540;
  this[9].int var0 = (PC_Sp_counted_base *)&unk_1F112C628;
  PCSharedCount::~PCSharedCount(this + 6);
  this->int var0 = (PC_Sp_counted_base *)off_1F112C698;
  this[9].int var0 = (PC_Sp_counted_base *)off_1F112C780;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F112C650);
  this[9].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[11].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[10].var0);
}

{
  uint64_t vars8;

  this->int var0 = (PC_Sp_counted_base *)&unk_1F112C540;
  this[9].int var0 = (PC_Sp_counted_base *)&unk_1F112C628;
  PCSharedCount::~PCSharedCount(this + 6);
  this->int var0 = (PC_Sp_counted_base *)off_1F112C698;
  this[9].int var0 = (PC_Sp_counted_base *)off_1F112C780;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F112C650);
  this[9].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[11].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[10].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiImageReflection::~LiImageReflection(LiImageReflection *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F112C540;
  v1[9].int var0 = (PC_Sp_counted_base *)&unk_1F112C628;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->int var0 = (PC_Sp_counted_base *)off_1F112C698;
  v1[9].int var0 = (PC_Sp_counted_base *)off_1F112C780;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F112C650);
  v1[9].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[11].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[10].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F112C540;
  v1[9].int var0 = (PC_Sp_counted_base *)&unk_1F112C628;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->int var0 = (PC_Sp_counted_base *)off_1F112C698;
  v1[9].int var0 = (PC_Sp_counted_base *)off_1F112C780;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F112C650);
  v1[9].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[11].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[10].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void **LiSoftShadow::LiSoftShadow(void **a1, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double *a8, double a9, unsigned __int8 a10)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v18 = HGRectMake4i((int)*a8, (int)a8[1], (int)a8[2] + (int)*a8, (int)a8[3] + (int)a8[1]);
  uint64_t v20 = v19;
  if (a9 != 0.0 && (a3 & 1) == 0)
  {
    uint64_t v21 = HGRectMake4i((int)-(a9 * 0.5), (int)-(a9 * 0.5), (int)(a9 * 0.5), (int)(a9 * 0.5));
    uint64_t v18 = HGRectGrow(v18, v20, v21);
    uint64_t v20 = v22;
  }
  uint64_t v39 = 0;
  HGRect::Init(&v53, v18 - 10, HIDWORD(v18) - 10, v20 + 10, HIDWORD(v20) + 10);
  float v23 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v23);
  (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v23 + 96))(v23, 0, (float)v53.var0, (float)v53.var1, (float)v53.var2, (float)v53.var3);
  (*(void (**)(HGCrop *, void, void))(*(void *)v23 + 120))(v23, 0, *a2);
  double v52 = 1.0;
  uint64_t v49 = 0x3FF0000000000000;
  uint64_t v46 = 0x3FF0000000000000;
  uint64_t v43 = 0x3FF0000000000000;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v43, a7, 0.0);
  double v24 = sqrt(*((double *)&v50 + 1) * *((double *)&v50 + 1)+ *(double *)&v51 * *(double *)&v51+ *((double *)&v51 + 1) * *((double *)&v51 + 1)+ v52 * v52);
  if (v24 > 0.001)
  {
    uint64_t v25 = 0;
    int v26 = &v43;
    double v27 = 1.0 / v24;
    do
    {
      for (uint64_t i = 0; i != 4; i += 2)
        *(float64x2_t *)&v26[i] = vmulq_n_f64(*(float64x2_t *)&v26[i], v27);
      ++v25;
      v26 += 4;
    }
    while (v25 != 4);
  }
  float64x2_t v41 = v23;
  (*(void (**)(HGCrop *))(*(void *)v23 + 16))(v23);
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v40 = _D0;
  LiHelium::createTransformNode((uint64_t)&v43, (uint64_t *)&v41, a10, (float *)&v40, &v42);
  if (v41) {
    (*(void (**)(HGCrop *))(*(void *)v41 + 24))(v41);
  }
  if (v42)
  {
    uint64_t v39 = v42;
    (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
    }
  }
  (*(void (**)(HGCrop *))(*(void *)v23 + 24))(v23);
  double v34 = HGObject::operator new(0x1A0uLL);
  LiHeDepthCompare::LiHeDepthCompare(v34, &v39, a4, a6, a5);
  float64_t v35 = *a1;
  if (*a1 != v34)
  {
    if (v35) {
      (*(void (**)(void *))(*(void *)v35 + 24))(v35);
    }
    *a1 = v34;
    if (v34) {
      (*(void (**)(void *))(*(void *)v34 + 16))(v34);
    }
  }
  if (a9 > 0.0 && (a3 & 1) == 0)
  {
    float64_t v36 = HGObject::operator new(0x1A0uLL);
    LiHeShadowPCSS::LiHeShadowPCSS(v36, a4, a6, a5, a9);
    float64_t v37 = a1[1];
    if (v37 == v36)
    {
      if (!v36) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (v37) {
      (*(void (**)(void *))(*(void *)v37 + 24))(v37);
    }
    a1[1] = v36;
    if (v36)
    {
      (*(void (**)(void *))(*(void *)v36 + 16))(v36);
LABEL_27:
      (*(void (**)(void *))(*(void *)v36 + 24))(v36);
    }
  }
LABEL_28:
  if (v34) {
    (*(void (**)(void *))(*(void *)v34 + 24))(v34);
  }
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  }
  return a1;
}

{
  return LiSoftShadow::LiSoftShadow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B7B619E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  uint64_t v13 = v9[1];
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  if (*v9) {
    (*(void (**)(void))(*(void *)*v9 + 24))(*v9);
  }
  _Unwind_Resume(a1);
}

uint64_t LiHeModulatedBlurBuffered::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t Output = HGModulatedBlur::GetOutput(this, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Output + 136))(Output, 0xFFFFFFFFLL, 2);
  return Output;
}

void LiHeModulatedBlurBuffered::~LiHeModulatedBlurBuffered(HGNode *this)
{
  HGModulatedBlur::~HGModulatedBlur(this);

  HGObject::operator delete(v1);
}

void LiHeShadowSoft::LiHeShadowSoft(LiHeShadowProgramSoft *a1)
{
}

void sub_1B7B61DDC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 424);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  LiHeShadowProgramSoft::~LiHeShadowProgramSoft((HGNode *)v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeShadowSoft::GetDOD(LiHeShadowSoft *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeShadowSoft::GetROI(LiHeShadowSoft *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeShadowSoft::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27) {
    return 27;
  }
  else {
    return a2;
  }
}

HGNode *LiHeShadowSoft::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 1u);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  if (HGRectIsNull(DOD, v6))
  {
    if (*((unsigned char *)this + 416))
    {
      unsigned int v7 = (LiHeLightInitPass *)*((void *)this + 53);
      if (!v7)
      {
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v10, 0.0, 0.0, 0.0, 0.0);
        unsigned int v7 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
        LiHeLightInitPass::LiHeLightInitPass(v7, (const PCWorkingColorVector *)v10);
        int v8 = (LiHeLightInitPass *)*((void *)this + 53);
        if (v8 == v7)
        {
          if (v7)
          {
            (*(void (**)(LiHeLightInitPass *))(*(void *)v7 + 24))(v7);
            return (HGNode *)*((void *)this + 53);
          }
        }
        else
        {
          if (v8) {
            (*(void (**)(LiHeLightInitPass *))(*(void *)v8 + 24))(v8);
          }
          *((void *)this + 53) = v7;
        }
      }
      return (HGNode *)v7;
    }
    else
    {
      return HGRenderer::GetInput(a2, this, 0);
    }
  }
  else
  {
    return (HGNode *)LiHeShadowProgramSoft::GetOutput((LiHeShadowProgramSoft *)this, a2);
  }
}

void sub_1B7B61FC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void LiHeShadowSoft::~LiHeShadowSoft(HGNode *this)
{
  LiHeShadowSoft::~LiHeShadowSoft(this);

  HGObject::operator delete(v1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F112CB80;
  uint64_t v2 = *((void *)this + 53);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  LiHeShadowProgramSoft::~LiHeShadowProgramSoft(this);
}

void LiContext::LiContext(LiContext *this)
{
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)this + 5) = 0x3FF0000000000000;
  *(void *)this = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 21) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = _Q1;
  *(_OWORD *)((char *)this + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 21ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((void *)this + 47) = 0x3FF0000000000000;
  *((void *)this + 42) = 0x3FF0000000000000;
  *((void *)this + 37) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 248) = _Q1;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 36std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((void *)this + 55) = &unk_1F10AD5F8;
  *((void *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 57) = 0;
  *((unsigned char *)this + 464) = 0;
  LiClipSet::LiClipSet((LiContext *)((char *)this + 472));
  *((void *)this + 65) = &unk_1F111A398;
  *((_DWORD *)this + 139) = 0;
  *((unsigned char *)this + 56std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((unsigned char *)this + 564) = 0;
  *((void *)this + 6ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *((void *)this + 68) = 0;
  *((void *)this + 67) = 0;
  *((unsigned char *)this + 552) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiContext *)((char *)this + 568));
  *((_DWORD *)this + 14ProCore_Impl::PCNSRefImpl::release(this + 6) = 1065353216;
  *((_WORD *)this + 294) = 257;
  *((unsigned char *)this + 59std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 74);
  *(_OWORD *)((char *)this + 68std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *(_OWORD *)((char *)this + 69ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 61ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 60std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
}

void sub_1B7B6220C(_Unwind_Exception *a1)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

void LiContext::~LiContext(LiContext *this)
{
  ProGL::ContextHandle::~ContextHandle((LiContext *)((char *)this + 600));
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 592), v2);
  *((void *)this + 65) = &unk_1F111A398;
  if (*((int *)this + 132) < 0) {
    int v3 = 1;
  }
  else {
    int v3 = *((_DWORD *)this + 132);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 520, 0, v3);
  uint64_t v4 = *((void *)this + 67);
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8077774924);
  }
  *((void *)this + 67) = 0;
  *((_DWORD *)this + 132) = 0;
  LiClipSet::~LiClipSet((LiContext *)((char *)this + 472));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 440);
}

void LiContext::getHash(LiContext *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  int v3 = v2;
  v18[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  uint64_t v4 = PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v18);
  uint64_t v5 = *(unsigned int *)(v1 + 452);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 752;
    do
    {
      if (v6 >= *(int *)(v1 + 452)) {
        PCArray_base::badIndex(v4);
      }
      uint64_t v8 = *(void *)(v1 + 456);
      int SolidSceneID = LiLight::getSolidSceneID((LiLight *)(v8 + v7 - 752));
      PCHashWriteStream::writeValue(v18, SolidSceneID);
      PCHashWriteStream::writeValue(v18, *(_DWORD *)(v8 + v7 - 96));
      char v10 = (*(_DWORD *)(v8 + v7 - 96) - 1) <= 2 && *(unsigned char *)(v8 + v7 - 31) != 0;
      PCHashWriteStream::writeValue(v18, v10);
      PCHashWriteStream::writeValue(v18, *(unsigned char *)(v8 + v7));
      PCHashWriteStream::writeValue(v18, *(double *)(v8 + v7 - 8) > 0.0);
      uint64_t v12 = LiLightInfo::get((LiLightInfo *)(v8 + v7 - 752), v11);
      uint64_t v13 = (char *)LiPerContext<BOOL,LiPerContextValue_Traits<BOOL>,LiOpenGLContextGetter>::get(v12 + 776);
      uint64_t v4 = (PCArray_base *)PCHashWriteStream::writeValue(v18, *v13);
      ++v6;
      v7 += 944;
    }
    while (v5 != v6);
  }
  PCHashWriteStream::writeValue(v18, *(_DWORD *)(v1 + 484));
  PCHashWriteStream::writeValue(v18, *(_DWORD *)(v1 + 548) > 0);
  PCHashWriteStream::writeValue(v18, *(_DWORD *)(v1 + 544));
  uint64_t v14 = (PCArray_base *)PCHashWriteStream::writeValue(v18, *(unsigned char *)(v1 + 560));
  uint64_t v15 = *(unsigned int *)(v1 + 532);
  if ((int)v15 >= 1)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if (i >= *(int *)(v1 + 532)) {
        PCArray_base::badIndex(v14);
      }
      uint64_t v17 = *(void *)(*(void *)(v1 + 536) + 16 * i);
      if (!v17) {
        throw_PCNullPointerException(1);
      }
      uint64_t v14 = (PCArray_base *)(*(uint64_t (**)(uint64_t, int8x8_t *))(*(void *)v17 + 16))(v17, v18);
    }
  }
  PCHashWriteStream::writeValue(v18, *(unsigned char *)(v1 + 564));
  *int v3 = *(_OWORD *)PCHashWriteStream::getHash(v18)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v18);
}

void sub_1B7B6251C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t LiGLState::getCurrentContext(LiGLState *this)
{
  ProGL::getCurrentContext(v3);
  uint64_t EAGLContext = ProGL::ContextHandle::getEAGLContext((ProGL::ContextHandle *)v3);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v3);
  return EAGLContext;
}

void sub_1B7B62588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *LiGLState::get(LiGLState *this)
{
  {
    pthread_key_create((pthread_key_t *)&LiGLState::get(void)::state, (void (__cdecl *)(void *))PCThreadSpecific<LiGLState>::destroy);
  }
  uint64_t v1 = pthread_getspecific(LiGLState::get(void)::state);
  if (!v1) {
    operator new();
  }
  return v1;
}

void sub_1B7B62654(_Unwind_Exception *a1)
{
}

uint64_t LiGLState::setCurrentProgram(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = a2;
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t PCThreadSpecific<LiGLState>::destroy(uint64_t result)
{
  if (result) {
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void LiFBOCompositor::LiFBOCompositor(LiFBOCompositor *this, int a2)
{
  *(_DWORD *)this = a2;
  int v3 = (LiFBOCompositor *)((char *)this + 32);
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 16));
  PCWorkingColorVector::PCWorkingColorVector(v3);
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 48));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 96));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 112));
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 128));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 176));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 192));
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 208));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 256));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 272));
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 288));
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  LiFBOCompositor::init(this);
}

void sub_1B7B630CC(_Unwind_Exception *a1)
{
  uint64_t v7 = (std::__shared_weak_count *)v1[43];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  ProGL::Framebuffer::~Framebuffer(v5);
  uint64_t v8 = (std::__shared_weak_count *)v1[35];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  float v9 = (std::__shared_weak_count *)v1[33];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  ProGL::Framebuffer::~Framebuffer(v4);
  char v10 = (std::__shared_weak_count *)v1[25];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)v1[23];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  ProGL::Framebuffer::~Framebuffer(v3);
  uint64_t v12 = (std::__shared_weak_count *)v1[15];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v1[13];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  ProGL::Framebuffer::~Framebuffer(v2);
  uint64_t v14 = (std::__shared_weak_count *)v1[5];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v1[3];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void sub_1B7B631A4()
{
}

void sub_1B7B631AC()
{
}

void sub_1B7B631B4()
{
}

void LiFBOCompositor::init(LiFBOCompositor *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  ProGL::GL::GL((ProGL::GL *)v2);
  ProGL::GL_Wrap::getIntegerv((ProGL::GL_Wrap *)v2, 0xBA2u, &params);
  *(void *)((char *)this + 4) = v4;
  if (*(_DWORD *)this) {
    LiFBOCompositor::initMultisampleFBO((LiFBOCompositor *)((char *)this + 48), (HGGLBlendingInfo **)this + 12, (HGGLBlendingInfo **)this + 14);
  }
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v2, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v2, 0x8D40u);
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v2, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v2, 0x8D40u);
  getShaderBlend();
  getShaderCopy();
  ProGL::GL::~GL((ProGL::GL *)v2);
}

void sub_1B7B632F8(_Unwind_Exception *exception_object)
{
}

void LiFBOCompositor::~LiFBOCompositor(LiFBOCompositor *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 288));
  int v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 208));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 128));
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 48));
  float v9 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  char v10 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void getShaderBlend(void)
{
  {
      ProGL::makeProgramHandle<CompShader>();
  }
}

void sub_1B7B6345C(_Unwind_Exception *a1)
{
}

void getShaderCopy(void)
{
  {
      ProGL::makeProgramHandle<CopyShader>();
  }
}

void sub_1B7B63504(_Unwind_Exception *a1)
{
}

void LiFBOCompositor::beginDrawToFBO(LiFBOCompositor *this)
{
  ProGL::GL::GL((ProGL::GL *)v2);
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 48), (ProGL::GL *)v2, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::GL::~GL((ProGL::GL *)v2);
}

void sub_1B7B63590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void LiFBOCompositor::endDrawToFBO(LiFBOCompositor *this)
{
  ProGL::GL::GL((ProGL::GL *)v5);
  if (*(_DWORD *)this)
  {
    GLBOOLean params = 0;
    glGetBooleanv(0xC11u, &params);
    int v2 = params;
    if (params) {
      glDisable(0xC11u);
    }
    ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 128), (ProGL::GL *)v5, 0x8CA9u);
    ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 48), (ProGL::GL *)v5, 0x8CA8u);
    if (v2) {
      glEnable(0xC11u);
    }
  }
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v5, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::ObjectHandle::name((LiFBOCompositor *)((char *)this + 336));
  getShaderBlend();
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v5, 0x8D40u);
  glUseProgram(0);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v5, v3);
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v5, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  getShaderCopy();
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v5, 0x8D40u);
  glUseProgram(0);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v5, v4);
  ProGL::GL::~GL((ProGL::GL *)v5);
}

void sub_1B7B63700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void LiFBOCompositor::renderResults(LiFBOCompositor *this)
{
  ProGL::GL::GL((ProGL::GL *)v3);
  glBindFramebuffer(0x8D40u, *((_DWORD *)this + 3));
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  getShaderCopy();
  glUseProgram(0);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v3, v2);
  ProGL::GL::~GL((ProGL::GL *)v3);
}

void sub_1B7B63780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void LiFBOCompositor::initMultisampleFBO(ProGL::Framebuffer *a1, HGGLBlendingInfo **a2, HGGLBlendingInfo **a3)
{
  ProGL::GL::GL((ProGL::GL *)v7);
  ProGL::GL::getPGLContextHandle(v7, v6);
  ProGL::Framebuffer::bind(a1, (ProGL::GL *)v7, 0x8D40u);
  ProGL::Framebuffer::attach((uint64_t)a1, (int)v7, 0x8D40u, 0x8CE0u, a2);
  ProGL::Framebuffer::attach((uint64_t)a1, (int)v7, 0x8D40u, 0x8D00u, a3);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v6);
  ProGL::GL::~GL((ProGL::GL *)v7);
}

void sub_1B7B63830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void ProGL::makeProgramHandle<CompShader>()
{
}

void sub_1B7B63914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ProGL::Private::ProgramFactory0<CompShader>::operator()()
{
}

void sub_1B7B63994()
{
  std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CompShader,void>(v0, v1);
}

void sub_1B7B639B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B3C40AB3A38E5);
  _Unwind_Resume(a1);
}

void CompShader::CompShader(CompShader *this)
{
  ProGL::Program::Program(this);
  *uint64_t v2 = &unk_1F112CE28;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "colorTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CompShader *)((char *)this + 280), this, "depthTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CompShader *)((char *)this + 336), this, "currentColorTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CompShader *)((char *)this + 392), this, "currentDepthTex");
  ProGL::Program::setFragmentSource(this, "        void main()                                                                     \n        {                                                                               \n                                                                                        \n            /* incoming color and depth (premult) */                                    \n                                                                                        \n            vec4 color  = texture2D(colorTex, gl_TexCoord[0].xy);                       \n"
    "            float depth = texture2D(depthTex, gl_TexCoord[0].xy).r;                     \n"
    "                                                                                        \n"
    "                                                                                        \n"
    "            /* current color and depth (premult) */                                     \n"
    "                                                                                        \n"
    "            vec4 currentColor  = texture2D(currentColorTex, gl_TexCoord[0].xy);         \n"
    "            float currentDepth = texture2D(currentDepthTex, gl_TexCoord[0].xy).r;       \n"
    "                                                                                        \n"
    "            /* blend */                                                                 \n"
    "                                                                                        \n"
    "            vec4 finalColor;                                                            \n"
    "            float finalDepth;                                                           \n"
    "                                                                                        \n"
    "            vec4 s; /* source */                                                        \n"
    "            vec4 b; /* background */                                                    \n"
    "                                                                                        \n"
    "            if (depth < currentDepth)                                                   \n"
    "            {                                                                           \n"
    "                s = color;                                                              \n"
    "                b = currentColor;                                                       \n"
    "                finalDepth = depth;                                                     \n"
    "            }                                                                           \n"
    "            else                                                                        \n"
    "            {                                                                           \n"
    "                s = currentColor;                                                       \n"
    "                b = color;                                                              \n"
    "                finalDepth = currentDepth;                                              \n"
    "            }                                                                           \n"
    "                                                                                        \n"
    "            /* premult over operator */                                                 \n"
    "                                                                                        \n"
    "            finalColor.rgb = s.rgb + b.rgb * (1. - s.a);                                \n"
    "            finalColor.a = s.a + b.a * (1. - s.a);                                      \n"
    "                                                                                        \n"
    "            /* output results */                                                        \n"
    "                                                                                        \n"
    "            gl_FragColor = finalColor;                                                  \n"
    "            gl_FragDepth = finalDepth;                                                  \n"
    "        }                                                                               \n"
    "        ");
}

uint64_t sub_1B7B63A88()
{
  return v0;
}

void sub_1B7B63AA0(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  ProGL::UniformSampler<35678u>::~UniformSampler(v6);
  ProGL::UniformSampler<35678u>::~UniformSampler(v5);
  ProGL::UniformSampler<35678u>::~UniformSampler(v3);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void CompShader::~CompShader(void **this)
{
  *this = &unk_1F112CE28;
  uint64_t v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 49);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 42);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);

  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1F112CE28;
  uint64_t v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 49);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 42);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CompShader,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7B63C5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<DepthFilterProgram,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CompShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CompShader>,std::allocator<CompShader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CompShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CompShader>,std::allocator<CompShader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<CompShader>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7B63D50(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CompShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CompShader>>,std::allocator<ProGL::Private::ProgramFactory0<CompShader>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CompShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CompShader>>,std::allocator<ProGL::Private::ProgramFactory0<CompShader>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ProGL::makeProgramHandle<CopyShader>()
{
}

void sub_1B7B63E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ProGL::Private::ProgramFactory0<CopyShader>::operator()()
{
}

void sub_1B7B63F1C()
{
  std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CopyShader,void>(v0, v1);
}

void sub_1B7B63F40(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B3C402738F2C7);
  _Unwind_Resume(a1);
}

void CopyShader::CopyShader(CopyShader *this)
{
  ProGL::Program::Program(this);
  *uint64_t v2 = &unk_1F112CFA0;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "colorTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CopyShader *)((char *)this + 280), this, "depthTex");
  ProGL::Program::setFragmentSource(this, "        void main()                                                     \n        {                                                               \n            gl_FragColor = texture2D(colorTex, gl_TexCoord[0].xy);      \n"
    "            gl_FragDepth = texture2D(depthTex, gl_TexCoord[0].xy).r;    \n"
    "        }                                                               \n"
    "        ");
}

uint64_t sub_1B7B63FDC()
{
  return v0;
}

void sub_1B7B63FF0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  ProGL::UniformSampler<35678u>::~UniformSampler(v4);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void CopyShader::~CopyShader(void **this)
{
  *this = &unk_1F112CFA0;
  uint64_t v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);

  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1F112CFA0;
  uint64_t v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CopyShader,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7B6416C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<DepthFilterProgram,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CopyShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CopyShader>,std::allocator<CopyShader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CopyShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CopyShader>,std::allocator<CopyShader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<CopyShader>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7B64260(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CopyShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CopyShader>>,std::allocator<ProGL::Private::ProgramFactory0<CopyShader>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CopyShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CopyShader>>,std::allocator<ProGL::Private::ProgramFactory0<CopyShader>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void LiHeSpotLightStencil::LiHeSpotLightStencil(LiHeProgramSpotLightStencil *a1)
{
}

void sub_1B7B64638(_Unwind_Exception *a1)
{
  LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeSpotLightStencil::GetDOD(LiHeSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeSpotLightStencil::GetROI(LiHeSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeSpotLightStencil::~LiHeSpotLightStencil(HGNode *this)
{
  LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(this);

  HGObject::operator delete(v1);
}

ProShade::ProgramBase *ProShade::ProgramBase::ProgramBase(ProShade::ProgramBase *this, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  *(void *)this = v3;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[2];
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  *((_WORD *)this + 4) = 0;
  PSShaderBase::PSShaderBase((ProShade::ProgramBase *)((char *)this + 16));
  *((void *)this + 2) = &unk_1F112D358;
  PSShaderBase::PSShaderBase((ProShade::ProgramBase *)((char *)this + 80));
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D398;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::ProgramBase *)((char *)this + 144));
  PCMutex::PCMutex((PCMutex *)((char *)this + 160), 1);
  *((void *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F10933F0;
  *((void *)this + 31) = 0;
  *((void *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  *((void *)this + 29) = (char *)this + 240;
  *((_DWORD *)this + 64) = 0;
  *((_DWORD *)this + 6ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  return this;
}

void sub_1B7B6487C(_Unwind_Exception *a1)
{
  PSShaderBase::~PSShaderBase(v1);
  _Unwind_Resume(a1);
}

void ProShade::ProgramBase::~ProgramBase(ProShade::ProgramBase *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  uint64_t v4 = (char *)*((void *)this + 29);
  uint64_t v5 = (char *)this + 240;
  if (v4 != (char *)this + 240)
  {
    do
    {
      LiPerContextObject_Traits<ProShade::ProgramBase::Exe>::destroy(*((ProShade::ProgramBase::Exe **)v4 + 6));
      uint64_t v6 = (char *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != v5);
  }
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 64);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 232, *((void **)this + 30));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 160));
  PSShaderBase::~PSShaderBase((PCString *)this + 10);
  PSShaderBase::~PSShaderBase((PCString *)this + 2);
}

uint64_t ProShade::ProgramBase::id(ProShade::ProgramBase *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 160);
  char v10 = (char *)this + 160;
  PCMutex::lock((PCMutex *)((char *)this + 160));
  char v11 = 1;
  v9[0] = 0;
  uint64_t v3 = *(void *)LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)this + 232, v9);
  if (!ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v3))
  {
    ProGL::GL::GL((ProGL::GL *)v9);
    ProGL::createProgramObject((ProGL *)v9, &v8);
    long long v5 = v8;
    long long v8 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(v3 + 8);
    *(_OWORD *)uint64_t v3 = v5;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (*((void *)&v8 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
      }
    }
    *(unsigned char *)(v3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
    ProGL::GL::~GL((ProGL::GL *)v9);
    goto LABEL_8;
  }
  if (*(unsigned char *)(v3 + 17))
  {
LABEL_8:
    uint64_t v4 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v3);
    goto LABEL_9;
  }
  uint64_t v4 = 0;
LABEL_9:
  PCMutex::unlock(v2);
  return v4;
}

void sub_1B7B64AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  PCLockSentry<PCMutex>::~PCLockSentry(v4 - 32);
  _Unwind_Resume(a1);
}

void ProShade::ProgramBase::computeHash(ProShade::ProgramBase *this)
{
  uint64_t v1 = (_OWORD *)MEMORY[0x1F4188790](this);
  v3[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v3);
  PSShaderBase::source((PSShaderBase *)(v1 + 1), (PCSharedCount *)&v2);
  PCHashWriteStream::writeValue(v3, &v2);
  PCString::~PCString(&v2);
  PSShaderBase::source((PSShaderBase *)(v1 + 5), (PCSharedCount *)&v2);
  PCHashWriteStream::writeValue(v3, &v2);
  PCString::~PCString(&v2);
  v1[9] = *(_OWORD *)PCHashWriteStream::getHash(v3)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v3);
}

void sub_1B7B64BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

void sub_1B7B64BDC()
{
}

uint64_t ProShade::ProgramBase::link(std::__shared_weak_count **this)
{
  PCString v2 = (PCMutex *)(this + 20);
  v16[1].int var0 = (PC_Sp_counted_base *)(this + 20);
  PCMutex::lock((PCMutex *)(this + 20));
  char v17 = 1;
  LOBYTE(v16[0].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  uint64_t v3 = LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)(this + 29), v16);
  uint64_t v4 = *(void *)v3;
  if (*(unsigned char *)(*(void *)v3 + 16) || !*(unsigned char *)(v4 + 17))
  {
    uint64_t v5 = 0;
  }
  else
  {
    ProShade::ProgramBase::id((ProShade::ProgramBase *)this);
    PCSharedCount::PCSharedCount(v16);
    ((void (*)(std::__shared_weak_count **))(*this)[1].__shared_owners_)(this);
    if (*((unsigned char *)this + 8))
    {
      GLuint v6 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
      GLuint v7 = PSShaderBase::id(this + 2);
      glAttachShader(v6, v7);
    }
    if (*((unsigned char *)this + 9))
    {
      GLuint v8 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
      GLuint v9 = PSShaderBase::id(this + 10);
      glAttachShader(v8, v9);
    }
    GLuint v10 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
    glLinkProgram(v10);
    GLuint v11 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
    LODWORD(v15.varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
    glGetProgramiv(v11, 0x8B82u, (GLint *)&v15);
    if (!LODWORD(v15.var0))
    {
      exceptiouint64_t n = (PCGLSLException *)__cxa_allocate_exception(0x48uLL);
      PCString::PCString(&v15, "link failed");
      PCGLSLException::PCGLSLException(exception, &v15);
    }
    ProShade::ProgramBase::computeHash((ProShade::ProgramBase *)this);
    *(_WORD *)(v4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 257;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v4 + 24, *(char **)(v4 + 32));
    *(void *)(v4 + 24) = v4 + 32;
    *(void *)(v4 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
    *(void *)(v4 + 32) = 0;
    ((void (*)(std::__shared_weak_count **, uint64_t))(*this)[1].__shared_weak_owners_)(this, v4);
    OZChannelBase::setRangeName((OZChannelBase *)v16, v12);
    uint64_t v5 = 1;
    *((_DWORD *)this + 6ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  }
  PCMutex::unlock(v2);
  return v5;
}

void sub_1B7B64DD0(uint64_t a1, OZChannelBase *a2)
{
}

void sub_1B7B64EAC()
{
  __cxa_free_exception(v0);
  __cxa_end_catch();
  JUMPOUT(0x1B7B64EC4);
}

uint64_t ProShade::ProgramBase::compileShaders(ProShade::ProgramBase *this)
{
  if (!*((unsigned char *)this + 8) && !*((unsigned char *)this + 9))
  {
    exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(_8, "no shader specified");
    PCException::PCException(exception, _8);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)_8);
  if (*((unsigned char *)this + 8)) {
    PSShaderBase::compile((uint64_t)this + 16);
  }
  if (*((unsigned char *)this + 9)) {
    PSShaderBase::compile((uint64_t)this + 80);
  }
  return OZChannelBase::setRangeName((OZChannelBase *)_8, v2);
}

void sub_1B7B64F90(_Unwind_Exception *a1, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t ProShade::ProgramBase::use(ProShade::ProgramBase *this)
{
  (*(void (**)(ProShade::ProgramBase *))(*(void *)this + 16))(this);
  PCSharedCount::PCSharedCount(_8);
  GLuint v2 = ProShade::ProgramBase::id(this);
  glUseProgram(v2);
  LiGL::setCurrentProgram((void **)&_8[0].var0, 0);
  return OZChannelBase::setRangeName((OZChannelBase *)_8, v3);
}

void sub_1B7B65048(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t ProShade::ProgramBase::getUniformLocation(ProShade::ProgramBase *this, char *a2)
{
  uint64_t v4 = (PCMutex *)((char *)this + 160);
  _0.var4.int var0 = (__CFString *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  LOBYTE(_0.var5) = 1;
  LOBYTE(_0.var1) = 0;
  uint64_t v5 = *(void *)LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)this + 232, &_0.var1);
  std::string::basic_string[abi:ne180100]<0>(&_0.var1, a2);
  uint64_t v6 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v5 + 24, (const void **)&_0.var1);
  if (v5 + 32 == v6)
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)&_0);
    (*(void (**)(ProShade::ProgramBase *))(*(void *)this + 16))(this);
    GLuint v8 = ProShade::ProgramBase::id(this);
    if (*((char *)&_0.var3 + 7) >= 0) {
      p_var1 = (const GLchar *)&_0.var1;
    }
    else {
      p_var1 = (const GLchar *)_0.var1;
    }
    uint64_t UniformLocation = glGetUniformLocation(v8, p_var1);
    _0.var7 = (unint64_t)&_0.var1;
    *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 24), (const void **)&_0.var1, (uint64_t)&std::piecewise_construct, (long long **)&_0.var7)+ LiPolygonInstance::~LiPolygonInstance(this - 14) = UniformLocation;
    OZChannelBase::setRangeName(&_0, v10);
  }
  else
  {
    uint64_t UniformLocation = *(unsigned int *)(v6 + 56);
  }
  if (*((char *)&_0.var3 + 7) < 0) {
    operator delete(_0.var1);
  }
  PCMutex::unlock(v4);
  return UniformLocation;
}

void sub_1B7B65188(_Unwind_Exception *a1, const PCString *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void PSShader<35633u>::~PSShader(PCString *a1)
{
  PSShaderBase::~PSShaderBase(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PSShader<35633u>::type()
{
  return 35633;
}

uint64_t PSShader<35632u>::type()
{
  return 35632;
}

ProShade::ProgramBase::Exe *LiPerContextObject_Traits<ProShade::ProgramBase::Exe>::destroy(ProShade::ProgramBase::Exe *result)
{
  if (result)
  {
    ProShade::ProgramBase::Exe::~Exe(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void ProShade::ProgramBase::Exe::~Exe(ProShade::ProgramBase::Exe *this)
{
  GLuint v2 = (ProShade::UniformWorkspace *)*((void *)this + 9);
  if (v2)
  {
    ProShade::UniformWorkspace::~UniformWorkspace(v2);
    MEMORY[0x1BA9BFBA0]();
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void ProShade::UniformWorkspace::~UniformWorkspace(ProShade::UniformWorkspace *this)
{
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  GLuint v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    GLuint v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      GLuint v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    GLuint v8 = a3;
  }
  else {
    GLuint v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        GLuint v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        size_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      size_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    GLuint v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  GLuint v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + ProCore_Impl::PCNSRefImpl::release(this + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0;
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
}

void sub_1B7B65634(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void LiHeDepthCompare::LiHeDepthCompare(LiHeDepthCompareProgram *a1)
{
}

void sub_1B7B65864(_Unwind_Exception *a1)
{
  LiHeDepthCompareProgram::~LiHeDepthCompareProgram(v1);
  _Unwind_Resume(a1);
}

void LiHeDepthCompare::~LiHeDepthCompare(HGNode *this)
{
  LiHeDepthCompareProgram::~LiHeDepthCompareProgram(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeDepthCompare::GetDOD(LiHeDepthCompare *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeDepthCompare::GetROI(LiHeDepthCompare *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t ProShade::typeGetSize(unsigned int a1, const PCString *a2)
{
  if (a1 >= 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  }
  return dword_1B837E950[a1];
}

void *ProShade::copyData(void *result, const PCString *a2, int a3, BOOL *__dst, int a5)
{
  if (!result || !a3) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"no type", a2);
  }
  if (result == 3)
  {
    if (a3 == 1)
    {
      if (a5 >= 1)
      {
        unsigned int v15 = a5 + 1;
        do
        {
          double v16 = *(double *)&a2->var0;
          ++a2;
          *__dst++ = v16 != 0.0;
          --v15;
        }
        while (v15 > 1);
      }
      return result;
    }
    if (a3 != 3)
    {
      if (a3 != 2) {
        goto LABEL_49;
      }
      if (a5 >= 1)
      {
        unsigned int v8 = a5 + 1;
        do
        {
          double v9 = *(double *)&a2->var0;
          ++a2;
          *(_DWORD *)__dst = (int)v9;
          __dst += 4;
          --v8;
        }
        while (v8 > 1);
      }
      return result;
    }
    size_t v12 = 8 * a5;
    goto LABEL_45;
  }
  if (result == 2)
  {
    if (a3 == 1)
    {
      if (a5 >= 1)
      {
        unsigned int v17 = a5 + 1;
        do
        {
          int var0 = (int)a2->var0;
          a2 = (const PCString *)((char *)a2 + 4);
          *__dst++ = var0 != 0;
          --v17;
        }
        while (v17 > 1);
      }
      return result;
    }
    if (a3 != 2)
    {
      if (a3 != 3) {
        goto LABEL_49;
      }
      if (a5 >= 1)
      {
        unsigned int v10 = a5 + 1;
        do
        {
          int v11 = (int)a2->var0;
          a2 = (const PCString *)((char *)a2 + 4);
          *(double *)__dst = (double)v11;
          __dst += 8;
          --v10;
        }
        while (v10 > 1);
      }
      return result;
    }
    size_t v12 = 4 * a5;
LABEL_45:
    return memcpy(__dst, a2, v12);
  }
  if (result != 1) {
    goto LABEL_49;
  }
  if (a3 == 1)
  {
    size_t v12 = a5;
    goto LABEL_45;
  }
  if (a3 != 2)
  {
    if (a3 == 3)
    {
      if (a5 >= 1)
      {
        unsigned int v5 = a5 + 1;
        do
        {
          int var0_low = LOBYTE(a2->var0);
          a2 = (const PCString *)((char *)a2 + 1);
          if (var0_low) {
            double v7 = 1.0;
          }
          else {
            double v7 = 0.0;
          }
          *(double *)__dst = v7;
          __dst += 8;
          --v5;
        }
        while (v5 > 1);
      }
      return result;
    }
LABEL_49:
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  }
  if (a5 >= 1)
  {
    unsigned int v13 = a5 + 1;
    do
    {
      int v14 = LOBYTE(a2->var0);
      a2 = (const PCString *)((char *)a2 + 1);
      *(_DWORD *)__dst = v14;
      __dst += 4;
      --v13;
    }
    while (v13 > 1);
  }
  return result;
}

uint64_t ProShade::shapeGetWidth(unsigned int a1, const PCString *a2)
{
  if (a1 >= 0xE) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown shape", a2);
  }
  return dword_1B837EC08[a1];
}

uint64_t ProShade::shapeGetSize(unsigned int a1, const PCString *a2)
{
  if (a1 >= 0xE) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown shape", a2);
  }
  return dword_1B837EC40[a1];
}

BOOL ProShade::shapeIsVector(int a1)
{
  return a1 == 4 || (a1 & 0xFFFFFFFE) == 2;
}

BOOL ProShade::shapeIsMatrix(int a1)
{
  return (a1 - 5) < 3;
}

uint64_t ProShade::shapeTexture(ProShade *this, const PCString *a2)
{
  if (a2)
  {
    if (this == 34067) {
      return 13;
    }
LABEL_9:
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid target", a2);
  }
  if (this == 3553) {
    return 9;
  }
  if (this != 34067) {
    goto LABEL_9;
  }
  return 11;
}

void ProShade::shapeString(OZChannelBase *a1@<X0>, const PCString *a2@<X1>, LiString *a3@<X8>)
{
  int v3 = (int)a2;
  int v4 = (int)a1;
  switch((int)a1)
  {
    case 0:
      uint64_t v6 = "void";
      goto LABEL_14;
    case 1:
      switch((int)a2)
      {
        case 0:
          ProShade::Error<PCIllegalArgumentException>::raise(a1, a2);
        case 1:
          uint64_t v6 = "BOOL";
          goto LABEL_14;
        case 2:
          uint64_t v6 = "int";
          goto LABEL_14;
        case 3:
          uint64_t v6 = "float";
          goto LABEL_14;
        default:
          uint64_t Width = ProShade::shapeGetWidth(1u, a2);
          goto LABEL_19;
      }
    case 8:
      uint64_t v6 = "sampler1D";
      goto LABEL_14;
    case 9:
      uint64_t v6 = "sampler2D";
      goto LABEL_14;
    case 10:
      uint64_t v6 = "sampler3D";
      goto LABEL_14;
    case 11:
      uint64_t v6 = "samplerCube";
      goto LABEL_14;
    case 12:
      uint64_t v6 = "sampler2DRect";
      goto LABEL_14;
    case 13:
      uint64_t v6 = "samplerCubeShadow";
LABEL_14:
      LiString::LiString(a3, v6);
      return;
    default:
      uint64_t Width = ProShade::shapeGetWidth(a1, a2);
      if ((v4 - 5) > 2)
      {
LABEL_19:
        LiString::format((LiString *)"vec%d", a3, Width);
        switch(v3)
        {
          case 1:
            int v11 = "b";
            break;
          case 2:
            int v11 = "i";
            break;
          case 0:
            ProShade::Error<PCIllegalArgumentException>::raise(v9, v10);
          default:
            return;
        }
        LiString::append(a3, v11, 1);
        return;
      }
      if (v3 != 3) {
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"matrices must be float", v8);
      }
      LiString::format((LiString *)"mat%d", a3, Width);
      return;
  }
}

void sub_1B7B65D8C(_Unwind_Exception *a1)
{
  LiString::dec(v1);
  _Unwind_Resume(a1);
}

void *ProShade::Value::Value(void *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

__CFString **ProShade::Value::operator=(__CFString **a1, const PCString *a2)
{
  *a1 = a2->var0;
  Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)a1, a2);
  memcpy(a1 + 2, &a2[2], AllocSize);
  a1[1] = a2[1].var0;
  return a1;
}

ProShade::Value *ProShade::Value::Value(PCString *this, const PCString *a2)
{
  this->int var0 = 0;
  this[1].int var0 = (__CFString *)-1;
  this->int var0 = a2->var0;
  Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)this, a2);
  memcpy(&this[2], &a2[2], AllocSize);
  this[1].int var0 = a2[1].var0;
  return (ProShade::Value *)this;
}

uint64_t ProShade::Value::getAllocSize(ProShade::Value *this, const PCString *a2)
{
  uint64_t v2 = *(int *)this;
  if (v2 >= 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  }
  int v3 = dword_1B837E950[v2];
  return ProShade::shapeGetSize(*((_DWORD *)this + 1), a2) * v3;
}

void ProShade::Value::set(uint64_t a1, const PCString *a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)a1, a2);
  bzero((void *)(a1 + 16), AllocSize);
  *(void *)(a1 + 8) = -1;
}

void *ProShade::Value::set(uint64_t a1, const PCString *a2, int a3, const void *a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)a1, a2);
  uint64_t result = memcpy((void *)(a1 + 16), a4, AllocSize);
  *(void *)(a1 + 8) = -1;
  return result;
}

void *ProShade::Value::get(const PCString *a1, const PCString *a2, BOOL *a3)
{
  int v4 = (int)a2;
  unsigned int v5 = a1 + 2;
  int var0_low = (void *)LODWORD(a1->var0);
  int Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);

  return ProShade::copyData(var0_low, v5, v4, a3, Size);
}

void ProShade::Value::repr(ProShade::Value *this@<X0>, LiString *a2@<X8>)
{
  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 1), (const PCString *)*(unsigned int *)this, a2);
  LiString::append(a2, "(", 1);
  int Size = ProShade::shapeGetSize(*((_DWORD *)this + 1), v4);
  switch(*(_DWORD *)this)
  {
    case 0:
      LiString::append(a2, "NULL", 4);
      break;
    case 1:
      if (Size >= 1)
      {
        uint64_t v6 = 0;
        int v7 = Size;
        do
        {
          if (v6) {
            LiString::append(a2, ",", 1);
          }
          LiString::format((LiString *)*((unsigned __int8 *)this + v6 + 16), (LiString *)&__src);
          if (__src) {
            signed int v8 = *((_DWORD *)__src - 2);
          }
          else {
            signed int v8 = 0;
          }
          LiString::append(a2, __src, v8);
          if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
          {
            char *__src = 0;
            if (__src) {
              double v9 = __src - 12;
            }
            else {
              double v9 = 0;
            }
            free(v9);
          }
          ++v6;
        }
        while (v7 != v6);
      }
      break;
    case 2:
      if (Size >= 1)
      {
        uint64_t v10 = 0;
        int v11 = Size;
        do
        {
          if (v10) {
            LiString::append(a2, ",", 1);
          }
          LiString::format((LiString *)*((unsigned int *)this + v10 + 4), (LiString *)&__src);
          if (__src) {
            signed int v12 = *((_DWORD *)__src - 2);
          }
          else {
            signed int v12 = 0;
          }
          LiString::append(a2, __src, v12);
          if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
          {
            char *__src = 0;
            if (__src) {
              unsigned int v13 = __src - 12;
            }
            else {
              unsigned int v13 = 0;
            }
            free(v13);
          }
          ++v10;
        }
        while (v11 != v10);
      }
      break;
    case 3:
      if (Size >= 1)
      {
        uint64_t v14 = 0;
        int v15 = Size;
        do
        {
          if (v14) {
            LiString::append(a2, ",", 1);
          }
          LiString::format(*((double *)this + v14 + 2), (LiString *)&__src);
          if (__src) {
            signed int v16 = *((_DWORD *)__src - 2);
          }
          else {
            signed int v16 = 0;
          }
          LiString::append(a2, __src, v16);
          if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
          {
            char *__src = 0;
            if (__src) {
              unsigned int v17 = __src - 12;
            }
            else {
              unsigned int v17 = 0;
            }
            free(v17);
          }
          ++v14;
        }
        while (v15 != v14);
      }
      break;
    default:
      break;
  }
  LiString::append(a2, ")", 1);
}

void sub_1B7B66268(_Unwind_Exception *a1)
{
  LiString::dec(v1);
  _Unwind_Resume(a1);
}

BOOL ProShade::Value::asBool(ProShade::Value *this, const PCString *a2)
{
  if (*((_DWORD *)this + 1) != 1) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"predicate not scalar", a2);
  }
  switch(*(_DWORD *)this)
  {
    case 0:
      ProShade::Error<PCIllegalArgumentException>::raise((OZChannelBase *)this, a2);
    case 1:
      int v2 = *((unsigned __int8 *)this + 16);
      goto LABEL_5;
    case 2:
      int v2 = *((_DWORD *)this + 4);
LABEL_5:
      BOOL v3 = v2 == 0;
      break;
    case 3:
      BOOL v3 = *((double *)this + 2) == 0.0;
      break;
    default:
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"unknown type", a2);
  }
  return !v3;
}

void ProShade::ValueVisitor::~ValueVisitor(ProShade::ValueVisitor *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    int v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x1BA9BFBA0](v1, 0x20C40960023A9);
  }
}

uint64_t ProShade::ValueVisitor::alreadyComputed(uint64_t **this, const PCString *a2, ProShade::Value *a3)
{
  BOOL v3 = *this;
  if (!*this) {
    return 0;
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (v5 == v4) {
    return 0;
  }
  while (*(const PCString **)v5 != a2)
  {
    v5 += 152;
    if (v5 == v4) {
      return 0;
    }
  }
  *(void *)a3 = *(void *)(v5 + 8);
  Allocint Size = ProShade::Value::getAllocSize(a3, a2);
  memcpy((char *)a3 + 16, (const void *)(v5 + 24), AllocSize);
  *((void *)a3 + 1) = *(void *)(v5 + 16);
  return 1;
}

uint64_t **ProShade::ValueVisitor::addResult(uint64_t **this, __CFString *a2, const ProShade::Value *a3)
{
  v11[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *this;
  if (!*this) {
    operator new();
  }
  for (uint64_t i = (const ProShade::Node **)*v4; i != (const ProShade::Node **)v4[1]; i += 19)
  {
    if (*i == (const ProShade::Node *)a2) {
      return this;
    }
  }
  v8.int var0 = a2;
  uint64_t v10 = -1;
  uint64_t v9 = *(void *)a3;
  Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)&v9, (const PCString *)a2);
  memcpy(v11, (char *)a3 + 16, AllocSize);
  uint64_t v10 = *((void *)a3 + 1);
  unint64_t v7 = v4[1];
  if (v7 >= v4[2])
  {
    this = (uint64_t **)std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__push_back_slow_path<std::pair<ProShade::Node const*,ProShade::Value>>(v4, &v8);
  }
  else
  {
    std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__construct_one_at_end[abi:ne180100]<std::pair<ProShade::Node const*,ProShade::Value>>((uint64_t)v4, &v8);
    this = (uint64_t **)(v7 + 152);
  }
  v4[1] = (uint64_t)this;
  return this;
}

ProShade::Node *ProShade::Node::Node(ProShade::Node *this, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  *(void *)this = v3;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[2];
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  PCWorkingColorVector::PCWorkingColorVector((ProShade::Node *)((char *)this + 8));
  *((_DWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 3;
  *(void *)((char *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(void *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  return this;
}

uint64_t ProShade::Node::po(ProShade::Node *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v1 = (atomic_uint *)*((void *)this + 4);
  uint64_t v18 = v1;
  uint64_t v19 = &unk_1F1119C28;
  if (v1) {
    atomic_fetch_add(v1 - 3, 1u);
  }
  ProShade::VarT<ProShade::Node>::VarT(v16, this);
  ProShade::Output::Output(v22, &v18, v16);
  if ((int)v20 <= SHIDWORD(v20)) {
    int v2 = (2 * (HIDWORD(v20) + 1)) | 1;
  }
  else {
    int v2 = v20;
  }
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v2);
  uint64_t v3 = v21;
  uint64_t v4 = SHIDWORD(v20) - 1;
  uint64_t v5 = (PCSharedCount *)(v21 + 40 * v4);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v5, v22);
  if (v5 != v22)
  {
    LiString::dec((LiString *)(v3 + 40 * v4 + 32));
    uint64_t v6 = v24;
    *(void *)(v3 + 40 * v4 + 32) = v24;
    if (v6) {
      atomic_fetch_add(v6 - 3, 1u);
    }
  }
  v22[0].int var0 = (PC_Sp_counted_base *)&unk_1F1119118;
  if (v24 && atomic_fetch_add(v24 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)double v24 = 0;
    if (v24) {
      unint64_t v7 = v24 - 3;
    }
    else {
      unint64_t v7 = 0;
    }
    free(v7);
    double v24 = 0;
  }
  v22[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v23);
  v16[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v17);
  int v15 = 0;
  v16[0].int var0 = 0;
  ProShade::Program::Program((ProShade::Program *)v22);
  ProShade::Program::shader((uint64_t)v22, (uint64_t)&v19, (LiString *)v16, (LiString *)&v15);
  if (v16[0].var0) {
    int var0 = (const char *)v16[0].var0;
  }
  else {
    int var0 = "";
  }
  size_t v9 = strlen(var0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)var0, v9);
  uint64_t v25 = &unk_1F1199AC8;
  char v27 = 0;
  PCWeakCount::~PCWeakCount(&v26);
  if (v15 && atomic_fetch_add(v15 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)int v15 = 0;
    if (v15) {
      uint64_t v10 = v15 - 3;
    }
    else {
      uint64_t v10 = 0;
    }
    free(v10);
  }
  if (v16[0].var0 && atomic_fetch_add((atomic_uint *volatile)v16[0].var0 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)v16[0].int var0 = 0;
    if (v16[0].var0) {
      int v11 = (char *)v16[0].var0 - 12;
    }
    else {
      int v11 = 0;
    }
    free(v11);
  }
  if (v18 && atomic_fetch_add(v18 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)uint64_t v18 = 0;
    if (v18) {
      signed int v12 = v18 - 3;
    }
    else {
      signed int v12 = 0;
    }
    free(v12);
  }
  uint64_t v19 = &unk_1F1119C28;
  if ((int)v20 < 0) {
    int v13 = 1;
  }
  else {
    int v13 = v20;
  }
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize((uint64_t)&v19, 0, v13);
  uint64_t result = v21;
  if (v21) {
    return MEMORY[0x1BA9BFB70](v21, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B66A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::Node::dump(int *a1, void *a2, int a3)
{
  if (a3 >= 1)
  {
    int v6 = a3;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
      --v6;
    }
    while (v6);
  }
  (*(void (**)(std::locale *__return_ptr, int *))(*(void *)a1 + 24))(&v27, a1);
  unint64_t v7 = "";
  if (v27.__locale_) {
    std::basic_regex<char>::value_type locale = (const char *)v27.__locale_;
  }
  else {
    std::basic_regex<char>::value_type locale = "";
  }
  size_t v9 = strlen(locale);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)locale, v9);
  if (v27.__locale_ && atomic_fetch_add((atomic_uint *volatile)v27.__locale_ - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)v27.__locale_ = 0;
    if (v27.__locale_) {
      uint64_t v10 = (char *)v27.__locale_ - 12;
    }
    else {
      uint64_t v10 = 0;
    }
    free(v10);
  }
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" (", 2);
  (*(void (**)(std::locale *__return_ptr, int *))(*(void *)a1 + 120))(&v27, a1);
  if (v27.__locale_) {
    unint64_t v7 = (const char *)v27.__locale_;
  }
  size_t v12 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v7, v12);
  int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
  uint64_t v14 = a1[10];
  if (v14 > 3) {
    int v15 = "?";
  }
  else {
    int v15 = off_1E616D820[v14];
  }
  signed int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")", 1);
  if (v27.__locale_ && atomic_fetch_add((atomic_uint *volatile)v27.__locale_ - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)v27.__locale_ = 0;
    if (v27.__locale_) {
      PCSharedCount v17 = (char *)v27.__locale_ - 12;
    }
    else {
      PCSharedCount v17 = 0;
    }
    free(v17);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v18 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  v27.__locale_ = (std::locale::__imp *)&unk_1F1119AF8;
  uint64_t v19 = (PCArray_base *)(*(uint64_t (**)(int *, std::locale *))(*(void *)a1 + 64))(a1, &v27);
  uint64_t v20 = HIDWORD(v28);
  if (SHIDWORD(v28) >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (a3 + 4);
    uint64_t v23 = 16;
    do
    {
      if (v21 >= SHIDWORD(v28)) {
        PCArray_base::badIndex(v19);
      }
      uint64_t v24 = *(void *)(v29 + v23);
      if (!v24) {
        throw_PCNullPointerException(1);
      }
      uint64_t v19 = (PCArray_base *)(*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v24 + 40))(v24, a2, v22);
      ++v21;
      v23 += 32;
    }
    while (v20 != v21);
  }
  v27.__locale_ = (std::locale::__imp *)&unk_1F1119AF8;
  if ((int)v28 < 0) {
    int v25 = 1;
  }
  else {
    int v25 = v28;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v27, 0, v25);
  uint64_t result = v29;
  if (v29) {
    return MEMORY[0x1BA9BFB70](v29, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B66EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t ProShade::Node::shortDescription(ProShade::Node *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void ProShade::Node::typeString(ProShade::Node *this@<X0>, LiString *a2@<X8>)
{
}

uint64_t ProShade::Node::checkType(uint64_t result, const PCString *a2, int a3)
{
  if (*(_DWORD *)(result + 24) != a2 || *(_DWORD *)(result + 28) != a3) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"type mismatch", a2);
  }
  return result;
}

int8x8_t *ProShade::Node::hash(int8x8_t *this, char a2)
{
  if ((a2 & 1) != 0
    || !*(void *)&vorr_s8(this[1], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)this[1].i8, *(int8x16_t *)this[1].i8, 8uLL)))
  {
    operator new();
  }
  return this + 1;
}

void sub_1B7B67038(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1091C40E2C1B576);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Node::setFrequency(ProShade::Node *this)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = &unk_1F1119AF8;
  int v2 = (PCArray_base *)(*(uint64_t (**)(ProShade::Node *, void **))(*(void *)this + 64))(this, &v10);
  unint64_t v3 = HIDWORD(v11);
  if (SHIDWORD(v11) < 1)
  {
    int v6 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    do
    {
      if (v5 >= SHIDWORD(v11)) {
        PCArray_base::badIndex(v2);
      }
      int v2 = (PCArray_base *)ProShade::VarT<ProShade::Node>::frequency(v12 + v4);
      if (v6 <= (int)v2) {
        int v6 = (int)v2;
      }
      if (++v5 >= v3) {
        break;
      }
      v4 += 32;
    }
    while (v6 < 3);
  }
  int v7 = *((_DWORD *)this + 11);
  if (v6 < v7) {
    int v7 = v6;
  }
  *((_DWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v7;
  uint64_t v10 = &unk_1F1119AF8;
  if ((int)v11 < 0) {
    int v8 = 1;
  }
  else {
    int v8 = v11;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v10, 0, v8);
  uint64_t result = v12;
  if (v12) {
    return MEMORY[0x1BA9BFB70](v12, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B671BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

double ProShade::Node::copyFrom(ProShade::Node *this, const ProShade::Node *a2)
{
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((void *)this + 3) = *((void *)a2 + 3);
  if (a2 != this)
  {
    LiString::dec((ProShade::Node *)((char *)this + 32));
    uint64_t v4 = *((void *)a2 + 4);
    *((void *)this + 4) = v4;
    if (v4) {
      atomic_fetch_add((atomic_uint *volatile)(v4 - 12), 1u);
    }
  }
  double result = *((double *)a2 + 5);
  *((double *)this + 5) = result;
  return result;
}

uint64_t ProShade::Node::snippet(ProShade::Node *this)
{
  return 0;
}

uint64_t ProShade::Node::getValue(PCString *this, ProShade::Value *a2, uint64_t **a3)
{
  uint64_t result = ProShade::ValueVisitor::alreadyComputed(a3, this, a2);
  if ((result & 1) == 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    signed int v16 = &unk_1F111DD98;
    int v13 = &unk_1F1119AF8;
    uint64_t v14 = 0;
    ((void (*)(PCString *, void **))this->var0[2].isa)(this, &v13);
    if (SHIDWORD(v14) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 16;
      do
      {
        uint64_t v9 = *(void *)(v15 + v8);
        if (!v9) {
          break;
        }
        int v10 = (int)v17 <= SHIDWORD(v17) ? (2 * (HIDWORD(v17) + 1)) | 1 : v17;
        PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize(&v16, HIDWORD(v17) + 1, v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)v9 + 104))(v9, v18 + 144 * SHIDWORD(v17) - 144, a3);
        ++v7;
        v8 += 32;
      }
      while (v7 < SHIDWORD(v14));
    }
    ((void (*)(PCString *, void **, ProShade::Value *))this->var0[3].data)(this, &v16, a2);
    ProShade::ValueVisitor::addResult(a3, (__CFString *)this, a2);
    int v13 = &unk_1F1119AF8;
    if ((int)v14 < 0) {
      int v11 = 1;
    }
    else {
      int v11 = v14;
    }
    PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v13, 0, v11);
    if (v15) {
      MEMORY[0x1BA9BFB70](v15, 0x1000C8077774924);
    }
    signed int v16 = &unk_1F111DD98;
    if ((int)v17 < 0) {
      int v12 = 1;
    }
    else {
      int v12 = v17;
    }
    PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize(&v16, 0, v12);
    uint64_t result = v18;
    if (v18) {
      return MEMORY[0x1BA9BFB70](v18, 0x1000C8077774924);
    }
  }
  return result;
}

void sub_1B7B67468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void ProShade::NodeOperator::operator()(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    int v6 = (void *)a1[2];
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t v7 = a1 + 2;
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= v5;
      if (v8 >= v5) {
        int v10 = v6;
      }
      else {
        int v10 = v6 + 1;
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      int v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 == a1 + 2 || v5 < v7[4])
    {
LABEL_13:
      uint64_t v11 = (uint64_t)(a1 + 1);
      (*(void (**)(void *, uint64_t))(*a1 + 8))(a1, a2);
      unint64_t v15 = *(void *)(a2 + 16);
      signed int v16 = (PC_Sp_counted_base **)&v15;
      int v12 = std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__emplace_unique_key_args<ProShade::Node const*,std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(v11, &v15, (uint64_t)&std::piecewise_construct, &v16);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)(v12 + 5), (const PCSharedCount *)a3);
      return;
    }
    *(void *)a3 = &unk_1F11193B8;
    *(unsigned char *)(a3 + 8) = *((unsigned char *)v7 + 48);
    *(void *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v7[7];
    int v13 = (PCSharedCount *)(a3 + 24);
    uint64_t v14 = (const PCSharedCount *)(v7 + 8);
  }
  else
  {
    *(void *)a3 = &unk_1F11193B8;
    *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
    int v13 = (PCSharedCount *)(a3 + 24);
    uint64_t v14 = (const PCSharedCount *)(a2 + 24);
  }

  PCSharedCount::PCSharedCount(v13, v14);
}

void sub_1B7B675F8(_Unwind_Exception *a1)
{
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::NodeOperator::apply(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(void *__return_ptr))(*(void *)v4 + 80))(a2);
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v5 != v6)
  {
    if (!v5) {
      throw_PCNullPointerException(1);
    }
    if (!v6) {
      throw_PCNullPointerException(1);
    }
    if (v5 != v6)
    {
      LiString::dec((LiString *)(v5 + 32));
      uint64_t v7 = *(void *)(v6 + 32);
      *(void *)(v5 + 32) = v7;
      if (v7) {
        atomic_fetch_add((atomic_uint *volatile)(v7 - 12), 1u);
      }
    }
  }
}

void sub_1B7B67700(_Unwind_Exception *a1)
{
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Const::create(ProShade::Const *this, double a2)
{
}

void sub_1B7B67780(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void ProShade::Const::create()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_1B7B677EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B7B678DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void sub_1B7B67940(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B7B679AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B7B67A18(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C405FD9FD45);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstMatrix::ConstMatrix(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112D8F0);
  *(void *)a1 = &unk_1F112D7C0;
  *(void *)(a1 + 48) = 0x3FF0000000000000;
  uint64_t v4 = a1 + 48;
  *(void *)(a1 + 168) = 0x3FF0000000000000;
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F112D8C8;
  *(void *)(a1 + 128) = 0x3FF0000000000000;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 24) = 0x700000003;
  *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  if (a1 + 48 != a2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v4 + j) = *(void *)(a2 + j);
      v4 += 32;
      a2 += 32;
    }
  }
  return a1;
}

void sub_1B7B67B60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v2;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Const::create(ProShade::Const *this, const ProShade::Value *a2)
{
  if ((*((_DWORD *)this + 1) - 5) <= 2) {
    operator new();
  }
  operator new();
}

void sub_1B7B67BFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

ProShade::ConstMatrix *ProShade::ConstMatrix::ConstMatrix(ProShade::ConstMatrix *this, const ProShade::Value *a2)
{
  *((void *)this + 22) = &unk_1F1199AC8;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1F112D8F0);
  *(void *)this = &unk_1F112D7C0;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 21) = 0x3FF0000000000000;
  *((void *)this + 22) = &unk_1F112D8C8;
  *((void *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 11) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v5 = (void *)*(unsigned int *)a2;
  unsigned int v4 = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = v5;
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  int Size = ProShade::shapeGetSize(v4, v6);
  ProShade::copyData(v5, (const PCString *)a2 + 2, 3, (BOOL *)this + 48, Size);
  return this;
}

void sub_1B7B67D38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this, const ProShade::Value *a2)
{
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1F112D778);
  *(void *)this = &unk_1F112D648;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  uint64_t v5 = (void *)*(unsigned int *)a2;
  unsigned int v4 = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = v5;
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  int Size = ProShade::shapeGetSize(v4, v6);
  ProShade::copyData(v5, (const PCString *)a2 + 2, 3, (BOOL *)this + 48, Size);
  return this;
}

void sub_1B7B67E54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B7B67ED0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B7B68020(_Unwind_Exception *a1)
{
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)&off_1F112D770);
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B7B680A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B7B681E0(_Unwind_Exception *a1)
{
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)&off_1F112D770);
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B7B68260(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B7B6839C(_Unwind_Exception *a1)
{
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)&off_1F112D770);
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this)
{
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1F112D778);
  *(void *)this = &unk_1F112D648;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F112D750;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1B7B68480(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v2;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::ConstVector::repr(ProShade::ConstVector *this@<X0>, const PCString *a2@<X1>, LiString *a3@<X8>)
{
  long long v44 = 0;
  uint64_t v5 = (OZChannelBase *)*((unsigned int *)this + 7);
  if ((v5 - 2) < 3)
  {
    int Width = ProShade::shapeGetWidth(v5, a2);
    if (Width >= 1)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (char *)this + 48;
      uint64_t v9 = Width;
      do
      {
        if (v7) {
          LiString::append((LiString *)&v44, ", ", 2);
        }
        if (*((_DWORD *)this + 6) == 1)
        {
          if (*(double *)&v8[8 * v7] == 0.0) {
            int v10 = "false";
          }
          else {
            int v10 = "true";
          }
          if (*v10)
          {
            uint64_t v11 = 0;
            while (v10[++v11])
              ;
          }
          else
          {
            LODWORD(v11) = 0;
          }
          LiString::append((LiString *)&v44, v10, v11);
        }
        else
        {
          LiString::format(*(double *)&v8[8 * v7], (LiString *)&__src);
          if (__src) {
            signed int v13 = *((_DWORD *)__src - 2);
          }
          else {
            signed int v13 = 0;
          }
          LiString::append((LiString *)&v44, __src, v13);
          if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
          {
            char *__src = 0;
            if (__src) {
              uint64_t v14 = __src - 12;
            }
            else {
              uint64_t v14 = 0;
            }
            free(v14);
          }
        }
        ++v7;
      }
      while (v7 != v9);
    }
    ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
    unint64_t v15 = __src;
    if (__src) {
      int v16 = *((_DWORD *)__src - 2);
    }
    else {
      int v16 = 0;
    }
    size_t v19 = v16;
    uint64_t v20 = (unsigned int *)malloc_type_malloc(v16 + 14, 0x8903763CuLL);
    v20[1] = v19 + 1;
    PCSharedCount v20[2] = v19 + 2;
    atomic_store(1u, v20);
    uint64_t v21 = v20 + 3;
    atomic_store(0, v20);
    memcpy(v20 + 3, v15, v19);
    v21[v19] = 40;
    v21[v19 + 1] = 0;
    atomic_fetch_add((atomic_uint *volatile)v20, 1u);
    size_t v22 = (int)v20[1];
    uint64_t v23 = v44;
    if (v44) {
      int v24 = *((_DWORD *)v44 - 2);
    }
    else {
      int v24 = 0;
    }
    size_t v25 = v22 + v24;
    int v26 = (unsigned int *)malloc_type_malloc(v25 + 13, 0x8903763CuLL);
    v26[1] = v25;
    v26[2] = v25 + 1;
    atomic_store(1u, v26);
    atomic_store(0, v26);
    memcpy(v26 + 3, v21, v22);
    memcpy((char *)v26 + v22 + 12, v23, v24);
    *((unsigned char *)v26 + v25 + 12) = 0;
    atomic_fetch_add((atomic_uint *volatile)v26, 1u);
    size_t v27 = (int)v26[1];
    uint64_t v28 = (unsigned int *)malloc_type_malloc(v27 + 14, 0x8903763CuLL);
    atomic_store(1u, v28);
    uint64_t v29 = v28 + 3;
    atomic_store(0, v28);
    v28[1] = v27 + 1;
    v28[2] = v27 + 2;
    memcpy(v28 + 3, v26 + 3, v27);
    *((unsigned char *)v29 + v27) = 41;
    *((unsigned char *)v29 + v27 + 1) = 0;
    *(void *)a3 = v28 + 3;
    atomic_fetch_add((atomic_uint *volatile)v28, 1u);
    if (atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1) {
      free(v26);
    }
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1) {
      free(v20);
    }
    goto LABEL_48;
  }
  if (v5 != 1)
  {
    ProShade::shapeString(v5, (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
    OZChannelBase v30 = __src;
    if (__src) {
      int v31 = *((_DWORD *)__src - 2);
    }
    else {
      int v31 = 0;
    }
    size_t v33 = v31;
    double v34 = (unsigned int *)malloc_type_malloc(v31 + 18, 0x8903763CuLL);
    v34[1] = v33 + 5;
    uint64_t v34[2] = v33 + 6;
    atomic_store(1u, v34);
    atomic_store(0, v34);
    memcpy(v34 + 3, v30, v33);
    float64_t v35 = (char *)v34 + v33 + 12;
    *(_DWORD *)float64_t v35 = 1497976360;
    v35[4] = 41;
    *((unsigned char *)v34 + v33 + 17) = 0;
    *(void *)a3 = v34 + 3;
    atomic_fetch_add((atomic_uint *volatile)v34, 1u);
LABEL_48:
    if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
    {
      char *__src = 0;
      if (__src) {
        float64_t v36 = __src - 12;
      }
      else {
        float64_t v36 = 0;
      }
      free(v36);
    }
    goto LABEL_54;
  }
  double v17 = *((double *)this + 6);
  if (*((_DWORD *)this + 6) == 1)
  {
    if (v17 == 0.0) {
      uint64_t v18 = "false";
    }
    else {
      uint64_t v18 = "true";
    }
    LiString::LiString(a3, v18);
  }
  else
  {
    LiString::format(v17, a3);
    LiString::LiString((LiString *)&__src, ".");
    if (LiString::contains((char **)a3, (const char **)&__src))
    {
      int v32 = 0;
    }
    else
    {
      LiString::LiString((LiString *)&v42, "e");
      if (LiString::contains((char **)a3, (const char **)&v42))
      {
        int v32 = 0;
      }
      else
      {
        LiString::LiString((LiString *)&v41, "E");
        int v32 = LiString::contains((char **)a3, (const char **)&v41) ^ 1;
        if (v41 && atomic_fetch_add(v41 - 3, 0xFFFFFFFF) == 1)
        {
          *(unsigned char *)float64x2_t v41 = 0;
          if (v41) {
            float64_t v38 = (char *)(v41 - 3);
          }
          else {
            float64_t v38 = 0;
          }
          free(v38);
        }
      }
      if (v42 && atomic_fetch_add(v42 - 3, 0xFFFFFFFF) == 1)
      {
        *(unsigned char *)uint64_t v42 = 0;
        if (v42) {
          uint64_t v39 = (char *)(v42 - 3);
        }
        else {
          uint64_t v39 = 0;
        }
        free(v39);
      }
    }
    if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
    {
      char *__src = 0;
      if (__src) {
        uint64_t v40 = __src - 12;
      }
      else {
        uint64_t v40 = 0;
      }
      free(v40);
    }
    if (v32) {
      LiString::append(a3, ".", 1);
    }
  }
LABEL_54:
  if (v44 && atomic_fetch_add((atomic_uint *volatile)v44 - 3, 0xFFFFFFFF) == 1)
  {
    *long long v44 = 0;
    if (v44) {
      float64_t v37 = v44 - 12;
    }
    else {
      float64_t v37 = 0;
    }
    free(v37);
  }
}

void sub_1B7B689CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uint *a9, atomic_uint *a10, atomic_uint *a11, atomic_uint *a12)
{
  if (a9 && atomic_fetch_add(a9 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a9 = 0;
    free(a9 - 3);
  }
  if (a10 && atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a10 = 0;
    free(a10 - 3);
  }
  if (a11 && atomic_fetch_add(a11 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a11 = 0;
    free(a11 - 3);
  }
  LiString::dec(v12);
  if (a12)
  {
    if (atomic_fetch_add(a12 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a12 = 0;
      free(a12 - 3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstVector::description(ProShade::ConstVector *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

int8x8_t *ProShade::ConstVector::computeHash(ProShade::ConstVector *this, int8x8_t *a2)
{
  return PCHashWriteStream::writeData(a2, (char *)this + 48, 0x20uLL);
}

void ProShade::ConstVector::inputs(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a2 + 8);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v2);
}

double ProShade::ConstVector::getFloat(ProShade::ConstVector *this)
{
  return *((double *)this + 6);
}

__n128 ProShade::ConstVector::getVec2@<Q0>(__n128 *this@<X0>, const PCString *a2@<X1>, __n128 *a3@<X8>)
{
  if (this[1].n128_u32[3] - 5 <= 2) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
  }
  __n128 result = this[3];
  *a3 = result;
  return result;
}

double ProShade::ConstVector::getVec3@<D0>(ProShade::ConstVector *this@<X0>, const PCString *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*((_DWORD *)this + 7) - 5) <= 2) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
  }
  double result = *((double *)this + 8);
  *(_OWORD *)a3 = *((_OWORD *)this + 3);
  *(double *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = result;
  return result;
}

__n128 ProShade::ConstVector::getVec4@<Q0>(__n128 *this@<X0>, const PCString *a2@<X1>, __n128 *a3@<X8>)
{
  if (this[1].n128_u32[3] - 5 <= 2) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
  }
  __n128 result = this[3];
  __n128 v4 = this[4];
  *a3 = result;
  a3[1] = v4;
  return result;
}

void ProShade::ConstVector::getMat3(ProShade::ConstVector *this, const PCString *a2)
{
}

void ProShade::ConstVector::getMat4(ProShade::ConstVector *this, const PCString *a2)
{
}

void ProShade::ConstVector::getData(uint64_t a1, uint64_t a2)
{
  int Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), (const PCString *)a2);
  if (*(_DWORD *)(a2 + 8) >= Size) {
    int v5 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v5 = (2 * Size) | 1;
  }
  PCArray<BOOL,PCArray_Traits<BOOL>>::resize(a2, Size, v5);
  if (Size >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 48;
    do
    {
      if (v7 >= *(int *)(a2 + 12)) {
        PCArray_base::badIndex(v6);
      }
      *(unsigned char *)(*(void *)(a2 + 16) + v7) = *(double *)(v8 + 8 * v7) != 0.0;
      ++v7;
    }
    while (Size != v7);
  }
}

{
  int Size;
  int v5;
  PCArray_base *v6;
  uint64_t v7;
  uint64_t v8;

  int Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), (const PCString *)a2);
  if (*(_DWORD *)(a2 + 8) >= Size) {
    int v5 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v5 = (2 * Size) | 1;
  }
  PCArray<int,PCArray_Traits<int>>::resize(a2, Size, v5);
  if (Size >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 48;
    do
    {
      if (v7 >= *(int *)(a2 + 12)) {
        PCArray_base::badIndex(v6);
      }
      *(_DWORD *)(*(void *)(a2 + 16) + 4 * v7) = (int)*(double *)(v8 + 8 * v7);
      ++v7;
    }
    while (Size != v7);
  }
}

{
  int Size;
  int v5;
  PCArray_base *v6;
  uint64_t v7;
  uint64_t v8;

  int Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), (const PCString *)a2);
  if (*(_DWORD *)(a2 + 8) >= Size) {
    int v5 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v5 = (2 * Size) | 1;
  }
  PCArray<double,PCArray_Traits<double>>::resize(a2, Size, v5);
  if (Size >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 48;
    do
    {
      if (v7 >= *(int *)(a2 + 12)) {
        PCArray_base::badIndex(v6);
      }
      *(void *)(*(void *)(a2 + 16) + 8 * v7) = *(void *)(v8 + 8 * v7);
      ++v7;
    }
    while (Size != v7);
  }
}

PCSharedCount *ProShade::ConstVector::apply@<X0>(PCShared_base *a1@<X0>, PCSharedCount *a2@<X8>)
{
  return ProShade::VarT<ProShade::Node>::VarT(a2, a1);
}

uint64_t ProShade::ConstVector::atomic(ProShade::ConstVector *this)
{
  return 1;
}

void ProShade::ConstVector::clone(ProShade::ConstVector *this)
{
}

void sub_1B7B68F14(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void *ProShade::ConstVector::getValue(ProShade::ConstVector *this, ProShade::Value *a2)
{
  int v4 = *((_DWORD *)this + 6);
  unsigned int v3 = *((_DWORD *)this + 7);
  int v5 = (const PCString *)((char *)this + 48);
  *(_DWORD *)a2 = v4;
  *((_DWORD *)a2 + 1) = v3;
  uint64_t v6 = (BOOL *)a2 + 16;
  int Size = ProShade::shapeGetSize(v3, (const PCString *)a2);
  __n128 result = ProShade::copyData((void *)3, v5, v4, v6, Size);
  *((void *)a2 + 1) = -1;
  return result;
}

void *ProShade::ConstVector::computeValue(uint64_t a1, const PCString *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v4 = *(_DWORD *)(a1 + 28);
  uint64_t v6 = (const PCString *)(a1 + 48);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v4;
  uint64_t v7 = (BOOL *)(a3 + 16);
  int Size = ProShade::shapeGetSize(v4, a2);
  __n128 result = ProShade::copyData((void *)3, v6, v5, v7, Size);
  *(void *)(a3 + 8) = -1;
  return result;
}

ProShade::ConstMatrix *ProShade::ConstMatrix::ConstMatrix(ProShade::ConstMatrix *this)
{
  *((void *)this + 22) = &unk_1F1199AC8;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1F112D8F0);
  *(void *)this = &unk_1F112D7C0;
  *((void *)this + 21) = 0x3FF0000000000000;
  *((void *)this + 22) = &unk_1F112D8C8;
  *((void *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *((void *)this + 11) = 0x3FF0000000000000;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 5ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 13ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void sub_1B7B690C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v2;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::ConstMatrix::repr(ProShade::ConstMatrix *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0;
  size_t v25 = 0;
  int v5 = (char *)this + 48;
LABEL_2:
  uint64_t v6 = 0;
  while (1)
  {
    LiString::format(*(double *)&v5[v6], (LiString *)&__src);
    if (__src) {
      signed int v7 = *((_DWORD *)__src - 2);
    }
    else {
      signed int v7 = 0;
    }
    LiString::append((LiString *)&v25, __src, v7);
    if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
    {
      char *__src = 0;
      if (__src) {
        uint64_t v8 = __src - 12;
      }
      else {
        uint64_t v8 = 0;
      }
      free(v8);
    }
    if (v4 == 3 && v6 == 96) {
      break;
    }
    LiString::append((LiString *)&v25, ", ", 2);
    v6 += 32;
    if (v6 == 128)
    {
      ++v4;
      v5 += 8;
      if (v4 != 4) {
        goto LABEL_2;
      }
      break;
    }
  }
  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
  uint64_t v9 = __src;
  if (__src) {
    int v10 = *((_DWORD *)__src - 2);
  }
  else {
    int v10 = 0;
  }
  size_t v11 = v10;
  int v12 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v12[1] = v11 + 1;
  v12[2] = v11 + 2;
  atomic_store(1u, v12);
  signed int v13 = v12 + 3;
  atomic_store(0, v12);
  memcpy(v12 + 3, v9, v11);
  v13[v11] = 40;
  v13[v11 + 1] = 0;
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  size_t v14 = (int)v12[1];
  unint64_t v15 = v25;
  if (v25) {
    int v16 = *((_DWORD *)v25 - 2);
  }
  else {
    int v16 = 0;
  }
  size_t v17 = v14 + v16;
  uint64_t v18 = (unsigned int *)malloc_type_malloc(v17 + 13, 0x8903763CuLL);
  v18[1] = v17;
  PCString v18[2] = v17 + 1;
  atomic_store(1u, v18);
  atomic_store(0, v18);
  memcpy(v18 + 3, v13, v14);
  memcpy((char *)v18 + v14 + 12, v15, v16);
  *((unsigned char *)v18 + v17 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v18, 1u);
  size_t v19 = (int)v18[1];
  uint64_t v20 = (unsigned int *)malloc_type_malloc(v19 + 14, 0x8903763CuLL);
  atomic_store(1u, v20);
  uint64_t v21 = v20 + 3;
  atomic_store(0, v20);
  v20[1] = v19 + 1;
  PCSharedCount v20[2] = v19 + 2;
  memcpy(v20 + 3, v18 + 3, v19);
  *((unsigned char *)v21 + v19) = 41;
  *((unsigned char *)v21 + v19 + 1) = 0;
  *a2 = v20 + 3;
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1) {
    free(v18);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1) {
    free(v12);
  }
  if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
  {
    char *__src = 0;
    if (__src) {
      size_t v22 = __src - 12;
    }
    else {
      size_t v22 = 0;
    }
    free(v22);
  }
  if (v25 && atomic_fetch_add((atomic_uint *volatile)v25 - 3, 0xFFFFFFFF) == 1)
  {
    *size_t v25 = 0;
    if (v25) {
      uint64_t v23 = v25 - 12;
    }
    else {
      uint64_t v23 = 0;
    }
    free(v23);
  }
}

void sub_1B7B693B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uint *a9, atomic_uint *a10)
{
  if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1) {
    free(v11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1) {
    free(v10);
  }
  if (a9 && atomic_fetch_add(a9 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a9 = 0;
    free(a9 - 3);
  }
  if (a10)
  {
    if (atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a10 = 0;
      free(a10 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::ConstMatrix::description(ProShade::ConstMatrix *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

int8x8_t *ProShade::ConstMatrix::computeHash(ProShade::ConstMatrix *this, int8x8_t *a2)
{
  return PCHashWriteStream::writeData(a2, (char *)this + 48, 0x80uLL);
}

void ProShade::ConstMatrix::inputs(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a2 + 8);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v2);
}

void ProShade::ConstMatrix::getFloat(ProShade::ConstMatrix *this, const PCString *a2)
{
}

void ProShade::ConstMatrix::getVec2(ProShade::ConstMatrix *this, const PCString *a2)
{
}

void ProShade::ConstMatrix::getVec3(ProShade::ConstMatrix *this, const PCString *a2)
{
}

void ProShade::ConstMatrix::getVec4(ProShade::ConstMatrix *this, const PCString *a2)
{
}

__n128 ProShade::ConstMatrix::getMat3@<Q0>(ProShade::ConstMatrix *this@<X0>, const PCString *a2@<X1>, void *a3@<X8>)
{
  if (*((_DWORD *)this + 7) != 6) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"can't cast to mat3", a2);
  }
  uint64_t v3 = 0;
  uint64_t v4 = (__n128 *)((char *)this + 48);
  *a3 = 0x3FF0000000000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  do
  {
    int v5 = (__n128 *)&a3[v3];
    __n128 result = *v4;
    __n128 *v5 = *v4;
    v5[1].n128_u64[0] = v4[1].n128_u64[0];
    v3 += 3;
    v4 += 2;
  }
  while (v3 != 9);
  return result;
}

__n128 ProShade::ConstMatrix::getMat4@<Q0>(__n128 *this@<X0>, const PCString *a2@<X1>, __n128 *a3@<X8>)
{
  if (this[1].n128_u32[3] != 7) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"can't cast to mat4", a2);
  }
  __n128 v3 = this[8];
  a3[4] = this[7];
  a3[5] = v3;
  __n128 v4 = this[10];
  a3[6] = this[9];
  a3[7] = v4;
  __n128 v5 = this[4];
  *a3 = this[3];
  a3[1] = v5;
  __n128 result = this[5];
  __n128 v7 = this[6];
  a3[2] = result;
  a3[3] = v7;
  return result;
}

void ProShade::ConstMatrix::getData(PCArray_base *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 <= 16) {
    int v5 = 16;
  }
  else {
    int v5 = *(_DWORD *)(a2 + 8);
  }
  if (v4 >= 16) {
    int v6 = v5;
  }
  else {
    int v6 = 33;
  }
  if (v6 != v4) {
    operator new[]();
  }
  uint64_t v7 = *(int *)(a2 + 12);
  if ((int)v7 <= 15) {
    bzero((void *)(*(void *)(a2 + 16) + v7), (15 - v7) + 1);
  }
  uint64_t v8 = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = 16;
  uint64_t v9 = (char *)a1 + 48;
  do
  {
    if (v8 >= *(int *)(a2 + 12)) {
      PCArray_base::badIndex(a1);
    }
    *(unsigned char *)(*(void *)(a2 + 16) + v8) = *(double *)&v9[8 * v8] != 0.0;
    ++v8;
  }
  while (v8 != 16);
}

{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 <= 16) {
    int v5 = 16;
  }
  else {
    int v5 = *(_DWORD *)(a2 + 8);
  }
  if (v4 >= 16) {
    int v6 = v5;
  }
  else {
    int v6 = 33;
  }
  if (v6 != v4) {
    operator new[]();
  }
  uint64_t v7 = *(int *)(a2 + 12);
  if ((int)v7 <= 15) {
    bzero((void *)(*(void *)(a2 + 16) + 4 * v7), 4 * (15 - v7) + 4);
  }
  uint64_t v8 = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = 16;
  uint64_t v9 = (char *)a1 + 48;
  do
  {
    if (v8 >= *(int *)(a2 + 12)) {
      PCArray_base::badIndex(a1);
    }
    *(_DWORD *)(*(void *)(a2 + 16) + 4 * v8) = (int)*(double *)&v9[8 * v8];
    ++v8;
  }
  while (v8 != 16);
}

{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 <= 16) {
    int v5 = 16;
  }
  else {
    int v5 = *(_DWORD *)(a2 + 8);
  }
  if (v4 >= 16) {
    int v6 = v5;
  }
  else {
    int v6 = 33;
  }
  if (v6 != v4) {
    operator new[]();
  }
  uint64_t v7 = *(int *)(a2 + 12);
  if ((int)v7 <= 15) {
    bzero((void *)(*(void *)(a2 + 16) + 8 * v7), 8 * (15 - v7) + 8);
  }
  uint64_t v8 = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = 16;
  uint64_t v9 = (char *)a1 + 48;
  do
  {
    if (v8 >= *(int *)(a2 + 12)) {
      PCArray_base::badIndex(a1);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = *(void *)&v9[8 * v8];
    ++v8;
  }
  while (v8 != 16);
}

PCSharedCount *ProShade::ConstMatrix::apply@<X0>(PCShared_base *a1@<X0>, PCSharedCount *a2@<X8>)
{
  return ProShade::VarT<ProShade::Node>::VarT(a2, a1);
}

uint64_t ProShade::ConstMatrix::atomic(ProShade::ConstMatrix *this)
{
  return 1;
}

void ProShade::ConstMatrix::clone(ProShade::ConstMatrix *this)
{
}

void sub_1B7B69A8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C405FD9FD45);
  _Unwind_Resume(a1);
}

double ProShade::ConstMatrix::copyFrom(ProShade::Node *this, const ProShade::Node *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = 0;
    __n128 v3 = (char *)a2 + 48;
    int v4 = (char *)this + 48;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)&v4[i] = *(void *)&v3[i];
      ++v2;
      v4 += 32;
      v3 += 32;
    }
    while (v2 != 4);
  }
  return ProShade::Node::copyFrom(this, a2);
}

void *ProShade::ConstMatrix::getValue(ProShade::ConstMatrix *this, ProShade::Value *a2)
{
  int v4 = *((_DWORD *)this + 6);
  unsigned int v3 = *((_DWORD *)this + 7);
  int v5 = (const PCString *)((char *)this + 48);
  *(_DWORD *)a2 = v4;
  *((_DWORD *)a2 + 1) = v3;
  int v6 = (BOOL *)a2 + 16;
  int Size = ProShade::shapeGetSize(v3, (const PCString *)a2);
  __n128 result = ProShade::copyData((void *)3, v5, v4, v6, Size);
  *((void *)a2 + 1) = -1;
  return result;
}

void *ProShade::ConstMatrix::computeValue(uint64_t a1, const PCString *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v4 = *(_DWORD *)(a1 + 28);
  int v6 = (const PCString *)(a1 + 48);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v4;
  uint64_t v7 = (BOOL *)(a3 + 16);
  int Size = ProShade::shapeGetSize(v4, a2);
  __n128 result = ProShade::copyData((void *)3, v6, v5, v7, Size);
  *(void *)(a3 + 8) = -1;
  return result;
}

ProShade::Ctor *ProShade::Ctor::Ctor(ProShade::Ctor *this)
{
  *((void *)this + 22) = &unk_1F1199AC8;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1F112DA10);
  uint64_t v2 = 0;
  *(void *)this = &unk_1F112D938;
  *((void *)this + 22) = &unk_1F112D9F0;
  do
  {
    unsigned int v3 = (char *)this + v2;
    *((void *)v3 + ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11193B8;
    *((void *)v3 + 8) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)((char *)this + v2 + 72));
    v2 += 32;
  }
  while (v2 != 128);
  return this;
}

void sub_1B7B69CA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Ctor::makeWidth(int a1@<W0>, const PCString *a2@<X1>, const PCSharedCount *a3@<X2>, PCSharedCount *a4@<X8>)
{
  int v5 = (int)a2;
  int var0 = a3[2].var0;
  if (!var0) {
    throw_PCNullPointerException(1);
  }
  int Width = ProShade::shapeGetWidth(*((_DWORD *)var0 + 7), a2);
  if (v5 != 1 || Width != 1) {
    goto LABEL_11;
  }
  int v10 = a3[2].var0;
  if (!v10) {
    throw_PCNullPointerException(1);
  }
  if (*((_DWORD *)v10 + 6) != a1) {
LABEL_11:
  }
    operator new();
  a4->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a4[2].int var0 = v10;

  PCSharedCount::PCSharedCount(a4 + 3, a3 + 3);
}

void sub_1B7B69EC8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4)
{
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112DA10);
  uint64_t v8 = 0;
  *(void *)a1 = &unk_1F112D938;
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F112D9F0;
  do
  {
    uint64_t v9 = a1 + v8;
    *(void *)(v9 + 48) = &unk_1F11193B8;
    *(void *)(v9 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v8 + 72));
    v8 += 32;
  }
  while (v8 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  int Width = ProShade::shapeGetWidth(a3[7], v10);
  int v14 = ProShade::shapeGetWidth(a4[7], v12) + Width;
  if (v14 <= 1) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at least vec2", v13);
  }
  if (v14 >= 5) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at most vec4", v13);
  }
  *(_DWORD *)(a1 + 28) = v14;
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 64), (PCShared_base *)a3);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 96), (PCShared_base *)a4);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B7B6A060(_Unwind_Exception *a1)
{
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112DA10);
  uint64_t v10 = 0;
  *(void *)a1 = &unk_1F112D938;
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F112D9F0;
  do
  {
    uint64_t v11 = a1 + v10;
    *(void *)(v11 + 48) = &unk_1F11193B8;
    *(void *)(v11 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v10 + 72));
    v10 += 32;
  }
  while (v10 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  int Width = ProShade::shapeGetWidth(a3[7], v12);
  int v15 = ProShade::shapeGetWidth(a4[7], v14);
  int v18 = v15 + Width + ProShade::shapeGetWidth(a5[7], v16);
  if (v18 <= 2) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at least vec3", v17);
  }
  if (v18 >= 5) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at most vec4", v17);
  }
  *(_DWORD *)(a1 + 28) = v18;
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 64), (PCShared_base *)a3);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 96), (PCShared_base *)a4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 128), (PCShared_base *)a5);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B7B6A2B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112DA10);
  uint64_t v12 = 0;
  *(void *)a1 = &unk_1F112D938;
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F112D9F0;
  do
  {
    uint64_t v13 = a1 + v12;
    *(void *)(v13 + 48) = &unk_1F11193B8;
    *(void *)(v13 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v12 + 72));
    v12 += 32;
  }
  while (v12 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  int Width = ProShade::shapeGetWidth(a3[7], v14);
  int v17 = ProShade::shapeGetWidth(a4[7], v16);
  int v19 = ProShade::shapeGetWidth(a5[7], v18);
  int v22 = v17 + Width + v19 + ProShade::shapeGetWidth(a6[7], v20);
  if (v22 <= 3) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at least vec4", v21);
  }
  if (v22 != 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at most vec4", v21);
  }
  *(_DWORD *)(a1 + 28) = 4;
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 64), (PCShared_base *)a3);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 96), (PCShared_base *)a4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 128), (PCShared_base *)a5);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 160), (PCShared_base *)a6);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B7B6A528(_Unwind_Exception *a1)
{
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1199AC8;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112DA10);
  uint64_t v10 = 0;
  *(void *)a1 = &unk_1F112D938;
  *(void *)(a1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F112D9F0;
  do
  {
    uint64_t v11 = a1 + v10;
    *(void *)(v11 + 48) = &unk_1F11193B8;
    *(void *)(v11 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v10 + 72));
    v10 += 32;
  }
  while (v10 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 44) = a4;
  if (*(int *)(a5 + 12) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(a1 + 48 + v12, (const PCSharedCount *)(*(void *)(a5 + 16) + v12));
      ++v13;
      v12 += 32;
    }
    while (v13 < *(int *)(a5 + 12));
  }
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B7B6A738(_Unwind_Exception *a1)
{
  for (uint64_t i = 0; i != -128; i -= 32)
  {
    *(void *)(v1 + i + 144) = &unk_1F11193B8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + i + 168));
  }
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1F112DA10);
  *(void *)(v1 + 17ProCore_Impl::PCNSRefImpl::release(this + 6) = v3;
  *(unsigned char *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Ctor::repr(ProShade::Ctor *this@<X0>, const PCString *a2@<X1>, void *a3@<X8>)
{
  int v26 = 0;
  int Size = ProShade::shapeGetSize(*((_DWORD *)this + 7), a2);
  if (Size >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 32 * Size;
    do
    {
      if (!*(void *)((char *)this + v6 + 64)) {
        break;
      }
      if (v6) {
        LiString::append((LiString *)&v26, ", ", 2);
      }
      ProShade::VarT<ProShade::Node>::repr((uint64_t)this + v6 + 48);
      if (__src) {
        signed int v8 = *((_DWORD *)__src - 2);
      }
      else {
        signed int v8 = 0;
      }
      LiString::append((LiString *)&v26, __src, v8);
      if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
      {
        char *__src = 0;
        if (__src) {
          uint64_t v9 = __src - 12;
        }
        else {
          uint64_t v9 = 0;
        }
        free(v9);
      }
      v6 += 32;
    }
    while (v7 != v6);
  }
  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
  uint64_t v10 = __src;
  if (__src) {
    int v11 = *((_DWORD *)__src - 2);
  }
  else {
    int v11 = 0;
  }
  size_t v12 = v11;
  uint64_t v13 = (unsigned int *)malloc_type_malloc(v11 + 14, 0x8903763CuLL);
  v13[1] = v12 + 1;
  void v13[2] = v12 + 2;
  atomic_store(1u, v13);
  int v14 = v13 + 3;
  atomic_store(0, v13);
  memcpy(v13 + 3, v10, v12);
  v14[v12] = 40;
  v14[v12 + 1] = 0;
  atomic_fetch_add((atomic_uint *volatile)v13, 1u);
  size_t v15 = (int)v13[1];
  int v16 = v26;
  if (v26) {
    int v17 = *((_DWORD *)v26 - 2);
  }
  else {
    int v17 = 0;
  }
  size_t v18 = v15 + v17;
  int v19 = (unsigned int *)malloc_type_malloc(v18 + 13, 0x8903763CuLL);
  v19[1] = v18;
  void v19[2] = v18 + 1;
  atomic_store(1u, v19);
  atomic_store(0, v19);
  memcpy(v19 + 3, v14, v15);
  memcpy((char *)v19 + v15 + 12, v16, v17);
  *((unsigned char *)v19 + v18 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v19, 1u);
  size_t v20 = (int)v19[1];
  uint64_t v21 = (unsigned int *)malloc_type_malloc(v20 + 14, 0x8903763CuLL);
  atomic_store(1u, v21);
  int v22 = v21 + 3;
  atomic_store(0, v21);
  v21[1] = v20 + 1;
  void v21[2] = v20 + 2;
  memcpy(v21 + 3, v19 + 3, v20);
  *((unsigned char *)v22 + v2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 41;
  *((unsigned char *)v22 + v20 + 1) = 0;
  *a3 = v21 + 3;
  atomic_fetch_add((atomic_uint *volatile)v21, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1) {
    free(v19);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1) {
    free(v13);
  }
  if (__src && atomic_fetch_add((atomic_uint *volatile)__src - 3, 0xFFFFFFFF) == 1)
  {
    char *__src = 0;
    if (__src) {
      uint64_t v23 = __src - 12;
    }
    else {
      uint64_t v23 = 0;
    }
    free(v23);
  }
  if (v26 && atomic_fetch_add((atomic_uint *volatile)v26 - 3, 0xFFFFFFFF) == 1)
  {
    *int v26 = 0;
    if (v26) {
      int v24 = v26 - 12;
    }
    else {
      int v24 = 0;
    }
    free(v24);
  }
}

void sub_1B7B6AAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uint *a9, atomic_uint *a10)
{
  if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1) {
    free(v11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1) {
    free(v10);
  }
  if (a9 && atomic_fetch_add(a9 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a9 = 0;
    free(a9 - 3);
  }
  if (a10)
  {
    if (atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a10 = 0;
      free(a10 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Ctor::description(LiString *a1@<X8>)
{
}

void ProShade::Ctor::shortDescription(LiString *a1@<X8>)
{
}

uint64_t ProShade::Ctor::computeHash(ProShade::Ctor *this, int8x8_t *a2)
{
  PCHashWriteStream::writeValue(a2, "Ctor");
  uint64_t result = ProShade::shapeGetSize(*((_DWORD *)this + 7), v4);
  if ((int)result >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = (char *)this + 48;
    do
    {
      if (!*((void *)v7 + 2)) {
        break;
      }
      ProShade::VarT<ProShade::Node>::hash((uint64_t)v7, &v8);
      uint64_t result = (uint64_t)PCHashWriteStream::writeValue(a2, (const PCHash128 *)&v8);
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t ProShade::Ctor::inputs(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) < 0) {
    int v4 = 1;
  }
  else {
    int v4 = *(_DWORD *)(a2 + 8);
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v4);
  uint64_t result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), v5);
  if ((int)result >= 1)
  {
    uint64_t v7 = result;
    __n128 v8 = (const PCSharedCount *)(a1 + 48);
    do
    {
      if (v8[2].var0)
      {
        int v9 = *(_DWORD *)(a2 + 12);
        if (*(_DWORD *)(a2 + 8) <= v9) {
          int v10 = (2 * (v9 + 1)) | 1;
        }
        else {
          int v10 = *(_DWORD *)(a2 + 8);
        }
        PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v9 + 1, v10);
        uint64_t result = ProShade::VarT<ProShade::Node>::operator=(*(void *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, v8);
      }
      v8 += 4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t ProShade::Ctor::apply@<X0>(PCShared_base *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, void, char *)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  size_t v15 = &unk_1F1119AF8;
  do
  {
    (**a2)(v13, a2, (char *)a1 + v5 + 48);
    int var0 = v13[2].var0;
    __n128 v8 = *(PC_Sp_counted_base **)((char *)a1 + v5 + 64);
    if ((int)v16 <= SHIDWORD(v16)) {
      int v9 = (2 * (HIDWORD(v16) + 1)) | 1;
    }
    else {
      int v9 = v16;
    }
    PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v15, HIDWORD(v16) + 1, v9);
    ProShade::VarT<ProShade::Node>::operator=(v17 + 32 * SHIDWORD(v16) - 32, v13);
    v6 |= var0 != v8;
    v13[0].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCSharedCount::~PCSharedCount(&v14);
    v5 += 32;
  }
  while (v5 != 128);
  if (v6) {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::VarT(a3, a1);
  size_t v15 = &unk_1F1119AF8;
  if ((int)v16 < 0) {
    int v10 = 1;
  }
  else {
    int v10 = v16;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v15, 0, v10);
  uint64_t result = v17;
  if (v17) {
    return MEMORY[0x1BA9BFB70](v17, 0x1000C8077774924);
  }
  return result;
}

void sub_1B7B6AE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x1BA9BFBA0](v6, 0x10B1C406391F85BLL);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::atomic(ProShade::Ctor *this)
{
  return 0;
}

void ProShade::Ctor::clone(ProShade::Ctor *this)
{
}

void sub_1B7B6AF5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

double ProShade::Ctor::copyFrom(ProShade::Ctor *this, const ProShade::Ctor *a2)
{
  for (uint64_t i = 48; i != 176; i += 32)
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)this + i, (const PCSharedCount *)((char *)a2 + i));

  return ProShade::Node::copyFrom(this, a2);
}

uint64_t ProShade::Ctor::computeValue(uint64_t a1, uint64_t a2, ProShade::Value *this)
{
  *(void *)this = *(void *)(a1 + 24);
  Allocint Size = ProShade::Value::getAllocSize(this, (const PCString *)a2);
  uint64_t v7 = (BOOL *)this + 16;
  bzero((char *)this + 16, AllocSize);
  *((void *)this + 1) = -1;
  Typeint Size = ProShade::Value::getTypeSize(this, v8);
  uint64_t result = ProShade::shapeGetWidth(*(_DWORD *)(a1 + 28), v10);
  int v13 = result;
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = (const PCString *)(*(void *)(a2 + 16) + v14);
      int Size = ProShade::shapeGetSize(HIDWORD(v16->var0), v12);
      BOOL v19 = __OFSUB__(v13, Size);
      v13 -= Size;
      if (v13 < 0 != v19) {
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"too much data for constructor", v18);
      }
      int v20 = Size;
      uint64_t result = (uint64_t)ProShade::copyData((void *)LODWORD(v16->var0), v16 + 2, *(_DWORD *)this, v7, Size);
      v7 += v20 * TypeSize;
      ++v15;
      v14 += 144;
    }
    while (v15 < *(int *)(a2 + 12));
  }
  *((void *)this + 1) = -1;
  if (v13 > 0) {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"too little data for constructor", v12);
  }
  return result;
}

uint64_t ProShade::Value::getTypeSize(ProShade::Value *this, const PCString *a2)
{
  uint64_t v2 = *(int *)this;
  if (v2 >= 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  }
  return dword_1B837E950[v2];
}

PCSharedCount *ProShade::Varying::Varying(PCSharedCount *this)
{
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  this[11].int var0 = 0;
  LOBYTE(this[12].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  ProShade::Node::Node((ProShade::Node *)this, (uint64_t *)&off_1F112DB28);
  this->int var0 = (PC_Sp_counted_base *)&unk_1F112DA50;
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F112DB08;
  this[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  this[8].int var0 = 0;
  PCSharedCount::PCSharedCount(this + 9);
  return this;
}

void sub_1B7B6B1F8(_Unwind_Exception *a1)
{
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1F112DB28);
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Varying::Varying(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  this[11].int var0 = 0;
  LOBYTE(this[12].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  ProShade::Node::Node((ProShade::Node *)this, (uint64_t *)&off_1F112DB28);
  this->int var0 = (PC_Sp_counted_base *)&unk_1F112DA50;
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F112DB08;
  ProShade::VarT<ProShade::Node>::VarT(this + 6, (PCShared_base *)a2);
  this[3].int var0 = a2[3];
  LODWORD(this[5].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 3;
  return this;
}

void sub_1B7B6B2F8(_Unwind_Exception *a1)
{
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1F112DB28);
  *(void *)(v1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
  *(unsigned char *)(v1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Varying::repr(ProShade::Varying *this@<X0>, void *a2@<X8>)
{
  ProShade::VarT<ProShade::Node>::repr((uint64_t)this + 48);
  if (v9) {
    int v3 = *((_DWORD *)v9 - 2);
  }
  else {
    int v3 = 0;
  }
  int v4 = (char *)malloc_type_malloc(v3 + 21, 0x8903763CuLL);
  uint64_t v5 = v3 + 8;
  *((_DWORD *)v4 + 2) = v3 + 9;
  atomic_store(1u, (unsigned int *)v4);
  atomic_store(0, (unsigned int *)v4);
  *(void *)(v4 + 12) = 0x28676E6979726176;
  *((_DWORD *)v4 + 1) = v5;
  memcpy(v4 + 20, v9, v3);
  v4[v5 + 12] = 0;
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  size_t v6 = *((int *)v4 + 1);
  uint64_t v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  atomic_store(1u, v7);
  __n128 v8 = v7 + 3;
  atomic_store(0, v7);
  v7[1] = v6 + 1;
  v7[2] = v6 + 2;
  memcpy(v7 + 3, v4 + 12, v6);
  *((unsigned char *)v8 + vProCore_Impl::PCNSRefImpl::release(this + 6) = 41;
  *((unsigned char *)v8 + v6 + 1) = 0;
  *a2 = v7 + 3;
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1) {
    free(v4);
  }
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9 - 3, 0xFFFFFFFF) == 1)
    {
      *int v9 = 0;
      free(v9 - 12);
    }
  }
}

void sub_1B7B6B494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1) {
    free(v10);
  }
  if (a10)
  {
    if (atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a10 = 0;
      free(a10 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Varying::description(LiString *a1@<X8>)
{
}

int8x8_t *ProShade::Varying::computeHash(ProShade::Varying *this, int8x8_t *a2)
{
  PCHashWriteStream::writeValue(a2, "Varying");
  ProShade::VarT<ProShade::Node>::hash((uint64_t)this + 48, &v5);
  return PCHashWriteStream::writeValue(a2, (const PCHash128 *)&v5);
}

uint64_t ProShade::Varying::inputs(const PCSharedCount *a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) >= 1) {
    int v4 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v4 = 3;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 1, v4);
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);

  return ProShade::VarT<ProShade::Node>::operator=(v6, a1 + 6);
}

void ProShade::Varying::apply(PCShared_base *a1@<X0>, void (***a2)(void *__return_ptr, void, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  (**a2)(v5, a2, (uint64_t)a1 + 48);
  if (v5[2] != *((void *)a1 + 8)) {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::VarT(a3, a1);
  v5[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B7B6B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x1BA9BFBA0](v4, 0x10B1C40515157B5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Varying::atomic(ProShade::Varying *this)
{
  return 0;
}

void ProShade::Varying::clone(ProShade::Varying *this)
{
}

void sub_1B7B6B744(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40515157B5);
  _Unwind_Resume(a1);
}

void ProShade::Varying::computeValue(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
}

void ProShade::Selector_base::_select(uint64_t a1, const PCString *a2)
{
  unsigned int v2 = a2;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = -8;
  if (a2 >= 0x42) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = a1 + v3;
  if (a2 > 0x41) {
    int v5 = 0;
  }
  else {
    int v5 = dword_1B837EC78[(int)a2];
  }
  if (v5 <= (int)ProShade::VarT<ProShade::Node>::width(v4, a2))
  {
    PCSharedCount v6 = *(const void **)(v4 + 16);
    if (v6) {
    operator new();
    }
  }
  LiString::LiString((LiString *)&v10, "selector ");
  uint64_t v7 = (char *)ProShade::selection_repr(v2);
  operator+(&v10, v7, v9);
  operator+(v9, " out of range", &v11);
  ProShade::Error<PCBadIndexException>::raise<LiString>(&v11, v8);
}

void sub_1B7B6B9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uint *a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a14 = 0;
    free(a14 - 3);
  }
  if (a9 && atomic_fetch_add(a9 - 3, 0xFFFFFFFF) == 1)
  {
    *(unsigned char *)a9 = 0;
    free(a9 - 3);
  }
  if (a13)
  {
    if (atomic_fetch_add(a13 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a13 = 0;
      free(a13 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Error<PCBadIndexException>::raise<LiString>(OZChannelBase *a1, const PCString *a2)
{
  OZChannelBase::setRangeName(a1, a2);
  exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
  if (a1->var0) {
    int var0 = (const char *)a1->var0;
  }
  else {
    int var0 = "";
  }
  PCString::PCString(&v5, var0);
  PCException::PCException(exception, &v5);
  *(void *)exceptiouint64_t n = &unk_1F10C3A88;
}

void sub_1B7B6BB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

const char *ProShade::selection_repr(unsigned int a1)
{
  if (a1 > 0x41) {
    return "";
  }
  else {
    return off_1E616D840[a1];
  }
}

uint64_t ProShade::Selector::Selector(uint64_t a1, PCShared_base *a2, unsigned int a3)
{
  *(void *)(a1 + 88) = &unk_1F1199AC8;
  *(void *)(a1 + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1F112DC58);
  *(void *)a1 = &unk_1F112DB80;
  *(void *)(a1 + 88) = &unk_1F112DC38;
  ProShade::VarT<ProShade::Node>::VarT((PCSharedCount *)(a1 + 48), a2);
  *(_DWORD *)(a1 + 8std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a3;
  uint64_t v6 = *(void *)(a1 + 64);
  if (!v6) {
    throw_PCNullPointerException(1);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v6 + 24);
  int v7 = ProShade::selection_width(a3);
  if (v7 != 1)
  {
    if ((*(_DWORD *)(v6 + 28) - 5) > 2)
    {
      if ((v7 - 1) < 4) {
        goto LABEL_8;
      }
    }
    else if ((v7 - 2) < 3)
    {
      v7 += 3;
      goto LABEL_8;
    }
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v8);
  }
LABEL_8:
  *(_DWORD *)(a1 + 28) = v7;
  *(_DWORD *)(a1 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((_DWORD *)a2 + 10);
  return a1;
}

void sub_1B7B6BD28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 72));
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1F112DC58);
  *(void *)(v1 + 88) = v3;
  *(unsigned char *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::VarT<ProShade::Selector>::~VarT(PCSharedCount *a1)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F112E610;
  PCSharedCount::~PCSharedCount(a1 + 3);
  return a1;
}

PCSharedCount *ProShade::Selector::Selector(PCSharedCount *this)
{
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  this[12].int var0 = 0;
  LOBYTE(this[13].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  ProShade::Node::Node((ProShade::Node *)this, (uint64_t *)&off_1F112DC58);
  this->int var0 = (PC_Sp_counted_base *)&unk_1F112DB80;
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F112DC38;
  this[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  this[8].int var0 = 0;
  PCSharedCount::PCSharedCount(this + 9);
  return this;
}

void sub_1B7B6BEA0(_Unwind_Exception *a1)
{
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1F112DC58);
  *(void *)(v1 + 88) = v3;
  *(unsigned char *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::selection_width(unsigned int a1)
{
  if (a1 > 0x41) {
    return 0;
  }
  else {
    return dword_1B837ED80[a1];
  }
}

void ProShade::Selector::repr(ProShade::Selector *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 8);
  if (!v4) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(unsigned char **__return_ptr))(*(void *)v4 + 16))(&v21);
  PCString v5 = v21;
  if (v21) {
    int v6 = *((_DWORD *)v21 - 2);
  }
  else {
    int v6 = 0;
  }
  int v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  uint64_t v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((unsigned char *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((unsigned char *)v7 + v8 + 12) = 0;
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  size_t v9 = (int)v7[1];
  int v10 = (unsigned int *)malloc_type_malloc(v9 + 15, 0x8903763CuLL);
  atomic_store(1u, v10);
  OZChannelBase v11 = v10 + 3;
  atomic_store(0, v10);
  v10[1] = v9 + 2;
  PCSharedCount v10[2] = v9 + 3;
  memcpy(v10 + 3, v7 + 3, v9);
  *(_WORD *)&v11[v9] = 11817;
  v11[v9 + 2] = 0;
  atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  uint64_t v12 = ProShade::selection_repr(*((_DWORD *)this + 20));
  int v13 = v12;
  size_t v14 = (int)v10[1];
  if (*v12)
  {
    uint64_t v15 = 0;
    while (v12[++v15])
      ;
  }
  else
  {
    LODWORD(v15) = 0;
  }
  int v20 = a2;
  size_t v17 = v14 + (int)v15;
  size_t v18 = (unsigned int *)malloc_type_malloc(v17 + 13, 0x8903763CuLL);
  v18[1] = v17;
  PCString v18[2] = v17 + 1;
  atomic_store(1u, v18);
  atomic_store(0, v18);
  memcpy(v18 + 3, v11, v14);
  memcpy((char *)v18 + v14 + 12, v13, (int)v15);
  *((unsigned char *)v18 + v17 + 12) = 0;
  void *v20 = v18 + 3;
  atomic_fetch_add((atomic_uint *volatile)v18, 1u);
  if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1) {
    free(v10);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1) {
    free(v7);
  }
  if (v21 && atomic_fetch_add((atomic_uint *volatile)v21 - 3, 0xFFFFFFFF) == 1)
  {
    unsigned char *v21 = 0;
    if (v21) {
      BOOL v19 = v21 - 12;
    }
    else {
      BOOL v19 = 0;
    }
    free(v19);
  }
}

void sub_1B7B6C134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1) {
    free(v11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1) {
    free(v10);
  }
  if (a10)
  {
    if (atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a10 = 0;
      free(a10 - 3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Selector::description(ProShade::Selector *this@<X0>, void *a2@<X8>)
{
  LiString::LiString((LiString *)&v13, ".");
  uint64_t v4 = ProShade::selection_repr(*((_DWORD *)this + 20));
  PCString v5 = v4;
  int v6 = v13;
  if (v13) {
    int v7 = *((_DWORD *)v13 - 2);
  }
  else {
    int v7 = 0;
  }
  if (*v4)
  {
    uint64_t v8 = 0;
    while (v4[++v8])
      ;
  }
  else
  {
    LODWORD(v8) = 0;
  }
  uint64_t v10 = (int)v8 + (uint64_t)v7;
  OZChannelBase v11 = (unsigned int *)malloc_type_malloc(v10 + 13, 0x8903763CuLL);
  v11[1] = v10;
  PCSharedCount v11[2] = v10 + 1;
  atomic_store(1u, v11);
  atomic_store(0, v11);
  memcpy(v11 + 3, v6, v7);
  memcpy((char *)v11 + v7 + 12, v5, (int)v8);
  *((unsigned char *)v11 + v10 + 12) = 0;
  *a2 = v11 + 3;
  atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 - 3, 0xFFFFFFFF) == 1)
  {
    unsigned char *v13 = 0;
    if (v13) {
      uint64_t v12 = v13 - 12;
    }
    else {
      uint64_t v12 = 0;
    }
    free(v12);
  }
}

void sub_1B7B6C2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ProShade::VertexProgram::VertexProgram(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::Selector::computeHash(ProShade::Selector *this, int8x8_t *a2)
{
  PCHashWriteStream::writeValue(a2, "Selector");
  uint64_t v4 = *((void *)this + 8);
  if (!v4) {
    throw_PCNullPointerException(1);
  }
  PCString v5 = (const PCHash128 *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 48))(v4, 0);
  PCHashWriteStream::writeValue(a2, v5);
  uint64_t v6 = *((unsigned int *)this + 20);
  int v7 = *(uint64_t (**)(int8x8_t *, uint64_t))(*(void *)a2 + 48);

  return v7(a2, v6);
}

uint64_t ProShade::Selector::inputs(const PCSharedCount *a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) >= 1) {
    int v4 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v4 = 3;
  }
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 1, v4);
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);

  return ProShade::VarT<ProShade::Node>::operator=(v6, a1 + 6);
}

void ProShade::Selector::apply(PCShared_base *a1@<X0>, void (***a2)(void *__return_ptr, void, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  (**a2)(v5, a2, (uint64_t)a1 + 48);
  if (v5[2] != *((void *)a1 + 8)) {
    operator new();
  }
  ProShade::VarT<ProShade::Node>::VarT(a3, a1);
  v5[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B7B6C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x1BA9BFBA0](v4, 0x10B1C403008ACEELL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Selector::atomic(ProShade::Selector *this)
{
  return ProShade::VarT<ProShade::Node>::atomic((uint64_t)this + 48);
}

void ProShade::Selector::clone(ProShade::Selector *this)
{
}

void sub_1B7B6C5C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C403008ACEELL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Selector::computeValue(uint64_t a1, uint64_t a2, ProShade::Value *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(int *)(a1 + 80);
  if (v6 > 0x41) {
    int v7 = "";
  }
  else {
    int v7 = off_1E616DA50[v6];
  }
  *(void *)this = *(void *)(a1 + 24);
  Allocint Size = ProShade::Value::getAllocSize(this, (const PCString *)a2);
  size_t v9 = (BOOL *)this + 16;
  bzero((char *)this + 16, AllocSize);
  *((void *)this + 1) = -1;
  if (*(int *)(a2 + 12) <= 0) {
    PCArray_base::badIndex(v10);
  }
  uint64_t v12 = *(void **)(a2 + 16);
  uint64_t v38 = -1;
  *(void *)float64_t v37 = *v12;
  unsigned int v35 = v37[0];
  int v13 = ProShade::Value::getAllocSize((ProShade::Value *)v37, v11);
  memcpy(v39, v12 + 2, v13);
  uint64_t v38 = v12[1];
  Typeint Size = ProShade::Value::getTypeSize(this, v14);
  if (v35 >= 4) {
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", v16);
  }
  int v17 = TypeSize;
  uint64_t v18 = (int)dword_1B837E950[v35];
  uint64_t v19 = *(void *)(a1 + 64);
  if (!v19) {
    throw_PCNullPointerException(1);
  }
  unsigned int v20 = *(_DWORD *)(a1 + 28);
  if ((*(_DWORD *)(v19 + 28) - 5) >= 3)
  {
    uint64_t result = ProShade::shapeGetSize(v20, v16);
    if ((int)result >= 1)
    {
      uint64_t v31 = v17;
      uint64_t v32 = result;
      do
      {
        int v33 = *v7++;
        uint64_t result = (uint64_t)ProShade::copyData((void *)v35, (const PCString *)&v39[(v33 - 48) * (uint64_t)(int)v18], *(_DWORD *)this, v9, 1);
        v9 += v31;
        --v32;
      }
      while (v32);
    }
  }
  else
  {
    LODWORD(v22) = ProShade::shapeGetWidth(v20, v16);
    uint64_t v23 = *(void *)(a1 + 64);
    if (!v23) {
      throw_PCNullPointerException(1);
    }
    uint64_t result = ProShade::shapeGetWidth(*(_DWORD *)(v23 + 28), v21);
    int v36 = result;
    if ((int)v22 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v22 = v22;
      double v34 = v7;
      do
      {
        uint64_t v26 = (v7[v25] - 48) * (uint64_t)v36 - 48;
        size_t v27 = v7;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v27++;
          uint64_t result = (uint64_t)ProShade::copyData((void *)v37[0], (const PCString *)&v39[(v26 + v29) * v18], *(_DWORD *)this, v9, 1);
          v9 += v17;
          --v22;
        }
        while (v22);
        ++v25;
        uint64_t v22 = v28;
        BOOL v30 = v25 == v28;
        int v7 = v34;
      }
      while (!v30);
    }
  }
  *((void *)this + 1) = -1;
  return result;
}

void ProShade::cast(uint64_t a1@<X0>, const PCString *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v9 = ProShade::VarT<ProShade::Node>::width(a1, a2);
  uint64_t v10 = *(_DWORD **)(a1 + 16);
  if (v9 == a2)
  {
    if (!v10) {
      throw_PCNullPointerException(1);
    }
    if (v10[6] == a3)
    {
      *(void *)a4 = &unk_1F11193B8;
      *(unsigned char *)(a4 + 8) = *(unsigned char *)(a1 + 8);
      *(void *)(a4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = v10;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 24), (const PCSharedCount *)(a1 + 24));
      return;
    }
    goto LABEL_9;
  }
  if (v10)
  {
LABEL_9:
    if (v11)
    {
      unsigned int var3 = v11->var3;
      if (var3 != 3)
      {
        if (var3 != 2)
        {
          if (var3 == 1)
          {
            uint64_t v32 = 0;
            int v33 = 0;
            v31.int var0 = (PC_Sp_counted_base *)&unk_1F111F3B0;
            int v13 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, PCSharedCount *))v11->var0 + 25))(v11, &v31);
            int v15 = HIDWORD(v32);
            if (HIDWORD(v32) == 1 && (int)a2 >= 2)
            {
              int v15 = 1;
              do
              {
                if (v15 <= 0) {
                  PCArray_base::badIndex(v13);
                }
                uint64_t v16 = v33;
                if ((int)v32 <= v15) {
                  int v17 = (2 * (v15 + 1)) | 1;
                }
                else {
                  int v17 = v32;
                }
                PCArray<BOOL,PCArray_Traits<BOOL>>::resize((uint64_t)&v31, v15 + 1, v17);
                int v15 = HIDWORD(v32);
                v33[SHIDWORD(v32) - 1] = *v16;
              }
              while (v15 < (int)a2);
            }
            if (v15 == a2) {
              ProShade::Const::create();
            }
            ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v14);
          }
          ProShade::Error<PCIllegalArgumentException>::raise(v11, v8);
        }
        uint64_t v32 = 0;
        int v33 = 0;
        v31.int var0 = (PC_Sp_counted_base *)&unk_1F10AD630;
        uint64_t v21 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, PCSharedCount *))v11->var0 + 26))(v11, &v31);
        int v23 = HIDWORD(v32);
        if (HIDWORD(v32) == 1 && (int)a2 >= 2)
        {
          int v23 = 1;
          do
          {
            if (v23 <= 0) {
              PCArray_base::badIndex(v21);
            }
            int v24 = v33;
            if ((int)v32 <= v23) {
              int v25 = (2 * (v23 + 1)) | 1;
            }
            else {
              int v25 = v32;
            }
            PCArray<int,PCArray_Traits<int>>::resize((uint64_t)&v31, v23 + 1, v25);
            *(_DWORD *)&v33[4 * SHIDWORD(v32) - 4] = *v24;
            int v23 = HIDWORD(v32);
          }
          while (SHIDWORD(v32) < (int)a2);
        }
        if (v23 == a2) {
          ProShade::Const::create();
        }
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v22);
      }
      uint64_t v32 = 0;
      int v33 = 0;
      v31.int var0 = (PC_Sp_counted_base *)&unk_1F111F378;
      uint64_t v26 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, PCSharedCount *))v11->var0 + 27))(v11, &v31);
      int v28 = HIDWORD(v32);
      if (HIDWORD(v32) == 1 && (int)a2 >= 2)
      {
        int v28 = 1;
        do
        {
          if (v28 <= 0) {
            PCArray_base::badIndex(v26);
          }
          uint64_t v29 = v33;
          if ((int)v32 <= v28) {
            int v30 = (2 * (v28 + 1)) | 1;
          }
          else {
            int v30 = v32;
          }
          PCArray<double,PCArray_Traits<double>>::resize((uint64_t)&v31, v28 + 1, v30);
          int v28 = HIDWORD(v32);
          *(void *)&v33[8 * HIDWORD(v32) - 8] = *v29;
        }
        while (v28 < (int)a2);
      }
      if (v28 == a2) {
        ProShade::Const::create();
      }
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v27);
    }
  }
  if (ProShade::VarT<ProShade::Node>::width(a1, v8) != 1
    && ProShade::VarT<ProShade::Node>::width(a1, v18) != a2)
  {
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v19);
  }
  unsigned int v20 = *(unsigned char **)(a1 + 16);
  v31.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  int v33 = v20;
  PCSharedCount::PCSharedCount(&v34, (const PCSharedCount *)(a1 + 24));
  ProShade::Ctor::makeWidth(a3, a2, &v31, (PCSharedCount *)a4);
  v31.int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v34);
}

void sub_1B7B6CEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  PCSharedCount::~PCSharedCount(v9);
  _Unwind_Resume(a1);
}

void ProShade::Vec2::Vec2(PCSharedCount *a1, uint64_t a2, uint64_t a3)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1125C80;
  ProShade::Vec2::initVec2((uint64_t)a1, a2, a3);
}

void sub_1B7B6CFB0(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Vec2::initVec2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(const void **)(a2 + 16);
  if (v4) {
  else
  }
    PCString v5 = 0;
  uint64_t v6 = *(const void **)(a3 + 16);
  if (v6)
  {
    if (v5)
    {
      uint64_t v8 = v7;
      if (v7)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        PCSharedCount v10[2] = 0;
        OZChannelBase v11 = &unk_1F111F378;
        v10[0] = &unk_1F111F378;
        v10[1] = 0;
        (*(void (**)(void *, void **))(*(void *)v5 + 216))(v5, &v11);
        (*(void (**)(void *, void *))(*(void *)v8 + 216))(v8, v10);
        PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v11, (uint64_t)v10);
        if (SHIDWORD(v12) > 1)
        {
          if (HIDWORD(v12) == 2) {
            ProShade::Const::create();
          }
          ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec2", v9);
        }
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec2", v9);
      }
    }
  }
  operator new();
}

void sub_1B7B6D384(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

double PCArray<double,PCArray_Traits<double>>::append(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a1 + 12);
  int v5 = *(_DWORD *)(a2 + 12) + v4;
  if (*(_DWORD *)(a1 + 8) >= v5) {
    int v6 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v6 = (2 * v5) | 1;
  }
  PCArray<double,PCArray_Traits<double>>::resize(a1, v5, v6);
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if ((int)v8 >= 1)
  {
    int v9 = *(double **)(a2 + 16);
    uint64_t v10 = (double *)(*(void *)(a1 + 16) + 8 * v4);
    do
    {
      double v11 = *v9++;
      double result = v11;
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

void ProShade::Vec2::checkType(ProShade::Vec2 *this)
{
  ProShade::cast((uint64_t)this, (const PCString *)2, 3, (uint64_t)v2);
  *((void *)this + 2) = v2[2];
  PCSharedCount::PCSharedCount(&v4, &v3);
  PCSharedCount::operator=((uint64_t *)this + 3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  v2[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B7B6D4CC(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 24));
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::Vec3(PCSharedCount *a1, const PCString *a2, uint64_t a3)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1123EA0;
  ProShade::Vec3::initVec3((uint64_t)a1, a2, a3);
}

void sub_1B7B6D5A8(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::initVec3(uint64_t a1, const PCString *a2, uint64_t a3)
{
  int var0 = a2[2].var0;
  if (!var0) {
    throw_PCNullPointerException(1);
  }
  int Width = ProShade::shapeGetWidth(HIDWORD(var0->length), a2);
  uint64_t v8 = *(void *)(a3 + 16);
  if (!v8) {
    throw_PCNullPointerException(1);
  }
  if ((int)(ProShade::shapeGetWidth(*(_DWORD *)(v8 + 28), v6) + Width) <= 2)
  {
    uint64_t v16 = &unk_1F11193B8;
    operator new();
  }
  int v9 = a2[2].var0;
  if (v9) {
  else
  }
    uint64_t v10 = 0;
  double v11 = *(const void **)(a3 + 16);
  if (v11)
  {
    if (v10)
    {
      uint64_t v13 = v12;
      if (v12)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        void v15[2] = 0;
        uint64_t v16 = &unk_1F111F378;
        v15[0] = &unk_1F111F378;
        v15[1] = 0;
        (*(void (**)(void *, void **))(*(void *)v10 + 216))(v10, &v16);
        (*(void (**)(void *, void *))(*(void *)v13 + 216))(v13, v15);
        PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v16, (uint64_t)v15);
        if (SHIDWORD(v17) > 2)
        {
          if (HIDWORD(v17) == 3) {
            ProShade::Const::create();
          }
          ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec3", v14);
        }
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec3", v14);
      }
    }
  }
  operator new();
}

void sub_1B7B6DA58(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::Vec3(PCSharedCount *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1123EA0;
  ProShade::Vec3::initVec3((uint64_t)a1, a2, a3, a4);
}

void sub_1B7B6DB60(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::initVec3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(const void **)(a2 + 16);
  if (v6) {
  else
  }
    int v7 = 0;
  uint64_t v8 = *(const void **)(a3 + 16);
  if (v8) {
  else
  }
    int v9 = 0;
  uint64_t v10 = *(const void **)(a4 + 16);
  if (v10)
  {
    if (v7)
    {
      if (v9)
      {
        uint64_t v12 = v11;
        if (v11)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          PCSharedCount v16[2] = 0;
          uint64_t v17 = &unk_1F111F378;
          v16[0] = &unk_1F111F378;
          v16[1] = 0;
          v15[1] = 0;
          void v15[2] = 0;
          v15[0] = &unk_1F111F378;
          (*(void (**)(void *, void **))(*(void *)v7 + 216))(v7, &v17);
          (*(void (**)(void *, void *))(*(void *)v9 + 216))(v9, v16);
          double v13 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v17, (uint64_t)v16);
          (*(void (**)(void *, void *, double))(*(void *)v12 + 216))(v12, v15, v13);
          PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v17, (uint64_t)v15);
          if (SHIDWORD(v18) > 2)
          {
            if (HIDWORD(v18) == 3) {
              ProShade::Const::create();
            }
            ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec3", v14);
          }
          ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec3", v14);
        }
      }
    }
  }
  operator new();
}

void sub_1B7B6E0B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::checkType(ProShade::Vec3 *this)
{
  ProShade::cast((uint64_t)this, (const PCString *)3, 3, (uint64_t)v2);
  *((void *)this + 2) = v2[2];
  PCSharedCount::PCSharedCount(&v4, &v3);
  PCSharedCount::operator=((uint64_t *)this + 3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  v2[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B7B6E190(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 24));
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::Vec4(PCSharedCount *a1, const PCString *a2, uint64_t a3)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1123970;
  ProShade::Vec4::initVec4((uint64_t)a1, a2, a3);
}

void sub_1B7B6E26C(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::initVec4(uint64_t a1, const PCString *a2, uint64_t a3)
{
  int var0 = a2[2].var0;
  if (!var0) {
    throw_PCNullPointerException(1);
  }
  int Width = ProShade::shapeGetWidth(HIDWORD(var0->length), a2);
  uint64_t v8 = *(void *)(a3 + 16);
  if (!v8) {
    throw_PCNullPointerException(1);
  }
  if ((int)(ProShade::shapeGetWidth(*(_DWORD *)(v8 + 28), v6) + Width) <= 3)
  {
    uint64_t v16 = &unk_1F11193B8;
    operator new();
  }
  int v9 = a2[2].var0;
  if (v9) {
  else
  }
    uint64_t v10 = 0;
  double v11 = *(const void **)(a3 + 16);
  if (v11)
  {
    if (v10)
    {
      double v13 = v12;
      if (v12)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        void v15[2] = 0;
        uint64_t v16 = &unk_1F111F378;
        v15[0] = &unk_1F111F378;
        v15[1] = 0;
        (*(void (**)(void *, void **))(*(void *)v10 + 216))(v10, &v16);
        (*(void (**)(void *, void *))(*(void *)v13 + 216))(v13, v15);
        PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v16, (uint64_t)v15);
        if (SHIDWORD(v17) > 3)
        {
          if (HIDWORD(v17) == 4) {
            ProShade::Const::create();
          }
          ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec4", v14);
        }
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec4", v14);
      }
    }
  }
  operator new();
}

void sub_1B7B6E71C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::Vec4(PCSharedCount *a1, const PCString *a2, uint64_t a3, uint64_t a4)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1123970;
  ProShade::Vec4::initVec4((uint64_t)a1, a2, a3, a4);
}

void sub_1B7B6E824(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::initVec4(uint64_t a1, const PCString *a2, uint64_t a3, uint64_t a4)
{
  int var0 = a2[2].var0;
  if (!var0) {
    throw_PCNullPointerException(1);
  }
  int Width = ProShade::shapeGetWidth(HIDWORD(var0->length), a2);
  uint64_t v10 = *(void *)(a3 + 16);
  if (!v10) {
    throw_PCNullPointerException(1);
  }
  int v12 = ProShade::shapeGetWidth(*(_DWORD *)(v10 + 28), v8) + Width;
  uint64_t v13 = *(void *)(a4 + 16);
  if (!v13) {
    throw_PCNullPointerException(1);
  }
  if ((int)(v12 + ProShade::shapeGetWidth(*(_DWORD *)(v13 + 28), v11)) <= 3)
  {
    int v25 = &unk_1F11193B8;
    operator new();
  }
  size_t v14 = a2[2].var0;
  if (v14) {
  else
  }
    int v15 = 0;
  uint64_t v16 = *(const void **)(a3 + 16);
  if (v16) {
  else
  }
    uint64_t v17 = 0;
  uint64_t v18 = *(const void **)(a4 + 16);
  if (v18)
  {
    if (v15)
    {
      if (v17)
      {
        unsigned int v20 = v19;
        if (v19)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          v24[2] = 0;
          int v25 = &unk_1F111F378;
          v24[0] = &unk_1F111F378;
          v24[1] = 0;
          v23[1] = 0;
          v23[2] = 0;
          v23[0] = &unk_1F111F378;
          (*(void (**)(void *, void **))(*(void *)v15 + 216))(v15, &v25);
          (*(void (**)(void *, void *))(*(void *)v17 + 216))(v17, v24);
          double v21 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v25, (uint64_t)v24);
          (*(void (**)(void *, void *, double))(*(void *)v20 + 216))(v20, v23, v21);
          PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v25, (uint64_t)v23);
          if (SHIDWORD(v26) > 3)
          {
            if (HIDWORD(v26) == 4) {
              ProShade::Const::create();
            }
            ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec4", v22);
          }
          ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec4", v22);
        }
      }
    }
  }
  operator new();
}

void sub_1B7B6EE7C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::Vec4(PCSharedCount *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  a1[2].int var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 3);
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F1123970;
  ProShade::Vec4::initVec4((uint64_t)a1, a2, a3, a4, a5);
}

void sub_1B7B6EF9C(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  PCSharedCount::~PCSharedCount(v3);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::initVec4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(const void **)(a2 + 16);
  if (v8) {
  else
  }
    int v9 = 0;
  uint64_t v10 = *(const void **)(a3 + 16);
  if (v10) {
  else
  }
    double v11 = 0;
  int v12 = *(const void **)(a4 + 16);
  if (v12) {
  else
  }
    uint64_t v13 = 0;
  size_t v14 = *(const void **)(a5 + 16);
  if (v14)
  {
    if (!v9) {
      goto LABEL_20;
    }
  }
  else
  {
    int v15 = 0;
    if (!v9) {
      goto LABEL_20;
    }
  }
  if (v11 && v13 && v15)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    void v21[2] = 0;
    uint64_t v22 = &unk_1F111F378;
    v21[0] = &unk_1F111F378;
    v21[1] = 0;
    v20[1] = 0;
    PCSharedCount v20[2] = 0;
    void v19[2] = 0;
    v20[0] = &unk_1F111F378;
    v19[0] = &unk_1F111F378;
    v19[1] = 0;
    (*(void (**)(void *, void **))(*(void *)v9 + 216))(v9, &v22);
    (*(void (**)(void *, void *))(*(void *)v11 + 216))(v11, v21);
    double v16 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v22, (uint64_t)v21);
    (*(void (**)(void *, void *, double))(*(void *)v13 + 216))(v13, v20, v16);
    double v17 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v22, (uint64_t)v20);
    (*(void (**)(void *, void *, double))(*(void *)v15 + 216))(v15, v19, v17);
    PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v22, (uint64_t)v19);
    if (SHIDWORD(v23) > 3)
    {
      if (HIDWORD(v23) == 4) {
        ProShade::Const::create();
      }
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec4", v18);
    }
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec4", v18);
  }
LABEL_20:
  operator new();
}

void sub_1B7B6F680(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::checkType(ProShade::Vec4 *this)
{
  ProShade::cast((uint64_t)this, (const PCString *)4, 3, (uint64_t)v2);
  *((void *)this + 2) = v2[2];
  PCSharedCount::PCSharedCount(&v4, &v3);
  PCSharedCount::operator=((uint64_t *)this + 3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  v2[0] = &unk_1F11193B8;
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B7B6F760(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 24));
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::ConstVector::~ConstVector(ProShade::ConstVector *this)
{
  *(void *)this = off_1F112DDD0;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = off_1F112DE88;
  LiString::dec((ProShade::ConstVector *)((char *)this + 32));
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *((unsigned char *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 11);
}

{
  uint64_t vars8;

  *(void *)this = off_1F112DDD0;
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = off_1F112DE88;
  LiString::dec((ProShade::ConstVector *)((char *)this + 32));
  *((void *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *((unsigned char *)this + 9ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 11);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'ProShade::ConstVector::~ConstVector(ProShade::ConstVector *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F112DDD0;
  *((void *)v1 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = off_1F112DE88;
  LiString::dec((LiString *)(v1 + 32));
  *((void *)v1 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  v1[96] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 11);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F112DDD0;
  *((void *)v1 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = off_1F112DE88;
  LiString::dec((LiString *)(v1 + 32));
  *((void *)v1 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  v1[96] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 11);

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::ConstMatrix::~ConstMatrix(ProShade::ConstMatrix *this)
{
  *(void *)this = off_1F112E098;
  *((void *)this + 22) = off_1F112E150;
  LiString::dec((ProShade::ConstMatrix *)((char *)this + 32));
  *((void *)this + 22) = &unk_1F1199AC8;
  *((unsigned char *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);
}

{
  uint64_t vars8;

  *(void *)this = off_1F112E098;
  *((void *)this + 22) = off_1F112E150;
  LiString::dec((ProShade::ConstMatrix *)((char *)this + 32));
  *((void *)this + 22) = &unk_1F1199AC8;
  *((unsigned char *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'ProShade::ConstMatrix::~ConstMatrix(ProShade::ConstMatrix *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F112E098;
  *((void *)v1 + 22) = off_1F112E150;
  LiString::dec((LiString *)(v1 + 32));
  *((void *)v1 + 22) = &unk_1F1199AC8;
  v1[192] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 23);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F112E098;
  *((void *)v1 + 22) = off_1F112E150;
  LiString::dec((LiString *)(v1 + 32));
  *((void *)v1 + 22) = &unk_1F1199AC8;
  v1[192] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 23);

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Ctor::~Ctor(ProShade::Ctor *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_1F112D938;
  *((void *)this + 22) = &unk_1F112D9F0;
  do
  {
    *(void *)((char *)this + v2 + 144) = &unk_1F11193B8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)((char *)this + v2 + 168));
    v2 -= 32;
  }
  while (v2 != -128);
  *(void *)this = off_1F112E1F8;
  *((void *)this + 22) = off_1F112E2B0;
  LiString::dec((ProShade::Ctor *)((char *)this + 32));
  *((void *)this + 22) = &unk_1F1199AC8;
  *((unsigned char *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = 0;
  *(void *)this = &unk_1F112D938;
  *((void *)this + 22) = &unk_1F112D9F0;
  do
  {
    *(void *)((char *)this + v2 + 144) = &unk_1F11193B8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)((char *)this + v2 + 168));
    v2 -= 32;
  }
  while (v2 != -128);
  *(void *)this = off_1F112E1F8;
  *((void *)this + 22) = off_1F112E2B0;
  LiString::dec((ProShade::Ctor *)((char *)this + 32));
  *((void *)this + 22) = &unk_1F1199AC8;
  *((unsigned char *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'ProShade::Ctor::~Ctor(ProShade::Ctor *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v2 = &unk_1F112D938;
  *((void *)v2 + 22) = &unk_1F112D9F0;
  do
  {
    *(void *)&v2[v1 + 144] = &unk_1F11193B8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v2[v1 + 168]);
    v1 -= 32;
  }
  while (v1 != -128);
  *(void *)uint64_t v2 = off_1F112E1F8;
  *((void *)v2 + 22) = off_1F112E2B0;
  LiString::dec((LiString *)(v2 + 32));
  *((void *)v2 + 22) = &unk_1F1199AC8;
  v2[192] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v2 + 23);
}

{
  uint64_t v1;
  char *v2;
  uint64_t vars8;

  uint64_t v1 = 0;
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v2 = &unk_1F112D938;
  *((void *)v2 + 22) = &unk_1F112D9F0;
  do
  {
    *(void *)&v2[v1 + 144] = &unk_1F11193B8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v2[v1 + 168]);
    v1 -= 32;
  }
  while (v1 != -128);
  *(void *)uint64_t v2 = off_1F112E1F8;
  *((void *)v2 + 22) = off_1F112E2B0;
  LiString::dec((LiString *)(v2 + 32));
  *((void *)v2 + 22) = &unk_1F1199AC8;
  v2[192] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v2 + 23);

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Varying::~Varying(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F112DA50;
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F112DB08;
  this[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->int var0 = (PC_Sp_counted_base *)off_1F112E358;
  this[10].int var0 = (PC_Sp_counted_base *)off_1F112E410;
  LiString::dec((LiString *)&this[4]);
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[12].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[11].var0);
}

{
  uint64_t vars8;

  this->int var0 = (PC_Sp_counted_base *)&unk_1F112DA50;
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F112DB08;
  this[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->int var0 = (PC_Sp_counted_base *)off_1F112E358;
  this[10].int var0 = (PC_Sp_counted_base *)off_1F112E410;
  LiString::dec((LiString *)&this[4]);
  this[10].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[12].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[11].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'ProShade::Varying::~Varying(ProShade::Varying *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F112DA50;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F112DB08;
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F112E358;
  v1[10].int var0 = (PC_Sp_counted_base *)off_1F112E410;
  LiString::dec((LiString *)&v1[4]);
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[12].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[11].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F112DA50;
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F112DB08;
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F112E358;
  v1[10].int var0 = (PC_Sp_counted_base *)off_1F112E410;
  LiString::dec((LiString *)&v1[4]);
  v1[10].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[12].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[11].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::Selector::~Selector(PCSharedCount *this)
{
  this->int var0 = (PC_Sp_counted_base *)&unk_1F112DB80;
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F112DC38;
  this[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->int var0 = (PC_Sp_counted_base *)off_1F112E4B8;
  this[11].int var0 = (PC_Sp_counted_base *)off_1F112E570;
  LiString::dec((LiString *)&this[4]);
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[13].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
}

{
  uint64_t vars8;

  this->int var0 = (PC_Sp_counted_base *)&unk_1F112DB80;
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F112DC38;
  this[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->int var0 = (PC_Sp_counted_base *)off_1F112E4B8;
  this[11].int var0 = (PC_Sp_counted_base *)off_1F112E570;
  LiString::dec((LiString *)&this[4]);
  this[11].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[13].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'ProShade::Selector::~Selector(ProShade::Selector *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F112DB80;
  v1[11].int var0 = (PC_Sp_counted_base *)&unk_1F112DC38;
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F112E4B8;
  v1[11].int var0 = (PC_Sp_counted_base *)off_1F112E570;
  LiString::dec((LiString *)&v1[4]);
  v1[11].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[13].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[12].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->int var0 = (PC_Sp_counted_base *)&unk_1F112DB80;
  v1[11].int var0 = (PC_Sp_counted_base *)&unk_1F112DC38;
  v1[6].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->int var0 = (PC_Sp_counted_base *)off_1F112E4B8;
  v1[11].int var0 = (PC_Sp_counted_base *)off_1F112E570;
  LiString::dec((LiString *)&v1[4]);
  v1[11].int var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[13].varstd::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void ProShade::VarT<ProShade::Selector>::~VarT(PCSharedCount *a1)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F112E610;
  PCSharedCount::~PCSharedCount(a1 + 3);

  JUMPOUT(0x1BA9BFBA0);
}

void *std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__construct_one_at_end[abi:ne180100]<std::pair<ProShade::Node const*,ProShade::Value>>(uint64_t a1, const PCString *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(PCString *)uint64_t v4 = (PCString)a2->var0;
  *(_DWORD *)(v4 + 12) = 0;
  *(_DWORD *)(v4 + 8) = 0;
  *(void *)(v4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = -1;
  *(PCString *)(v4 + 8) = a2[1];
  Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)(v4 + 8), a2);
  double result = memcpy((void *)(v4 + 24), &a2[3], AllocSize);
  *(PCString *)(v4 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = a2[2];
  *(void *)(a1 + 8) = v4 + 152;
  return result;
}

void sub_1B7B70B44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__push_back_slow_path<std::pair<ProShade::Node const*,ProShade::Value>>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  double v11 = &v10[152 * v4];
  std::string __p = v10;
  double v16 = v11;
  double v17 = v11;
  uint64_t v18 = &v10[152 * v9];
  *(void *)double v11 = *a2;
  *((_DWORD *)v11 + 3) = 0;
  *((_DWORD *)v11 + 2) = 0;
  *((void *)v11 + 2) = -1;
  *((void *)v11 + 1) = a2[1];
  Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)(v11 + 8), (const PCString *)v9);
  memcpy(v11 + 24, a2 + 3, AllocSize);
  *((void *)v11 + 2) = a2[2];
  double v17 = v11 + 152;
  std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__swap_out_circular_buffer((uint64_t)a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    double v17 = &v16[(v17 - v16 - 152) % 0x98uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B7B70CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__swap_out_circular_buffer(uint64_t a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<ProShade::Node const*,ProShade::Value>>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>>(a1 + 16, *(const PCString **)(a1 + 8), *(void *)(a1 + 8), *(void *)a1, *(void *)a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = v5;
  a2[1] = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v7;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<ProShade::Node const*,ProShade::Value>>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>>(uint64_t a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a3 + v11 - 152);
      *(_DWORD *)(a7 + v11 - 144) = 0;
      uint64_t v13 = a7 + v11 - 144;
      *(void *)(v13 - 8) = v12;
      *(_DWORD *)(v13 + 4) = 0;
      *(void *)(v13 + 8) = -1;
      *(void *)uint64_t v13 = *(void *)(a3 + v11 - 144);
      Allocint Size = ProShade::Value::getAllocSize((ProShade::Value *)v13, a2);
      memcpy((void *)(a7 + v11 - 128), (const void *)(a3 + v11 - 128), AllocSize);
      *(void *)(a7 + v11 - 13ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(a3 + v11 - 136);
      v11 -= 152;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t *std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__emplace_unique_key_args<ProShade::Node const*,std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, PC_Sp_counted_base ***a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

void std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(uint64_t a1@<X0>, PC_Sp_counted_base ***a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (PCSharedCount *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  v6[4].int var0 = **a2;
  v6[5].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
  v6[7].int var0 = 0;
  PCSharedCount::PCSharedCount(v6 + 8);
  *(unsigned char *)(a3 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
}

void sub_1B7B70FB4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCSharedCount *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    a2[5].int var0 = (PC_Sp_counted_base *)&unk_1F11193B8;
    PCSharedCount::~PCSharedCount(a2 + 8);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

PCSharedCount *ProShade::VarT<ProShade::Selector>::VarT(PCSharedCount *a1, PCShared_base *a2)
{
  a1->int var0 = (PC_Sp_counted_base *)&unk_1F112E610;
  a1[2].int var0 = (PC_Sp_counted_base *)a2;
  if (a2) {
    a2 = (PCShared_base *)((char *)a2 + *(void *)(*(void *)a2 - 24));
  }
  PCSharedCount::PCSharedCount(a1 + 3, a2);
  return a1;
}

unint64_t HSolidRendererBumpMap::GetROI(HSolidRendererBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = a4.var0 - 1;
  }
  if (a3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = a4.var1 - 1;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void HSolidRendererBumpMap::~HSolidRendererBumpMap(HGNode *this)
{
  HgcSolidRendererBumpMap::~HgcSolidRendererBumpMap(this);

  HGObject::operator delete(v1);
}

const char *HgcLean1::GetProgram(HgcLean1 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000264\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r1.xy = r0.xy/r0.zz;\n"
             "    r0.w = r1.x*r1.y;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e3420226:c15e4c44:ebec1dde:00b3eef2\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000256\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r1.xy = r0.xy/r0.zz;\n"
             "    r0.w = r1.x*r1.y;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=57ca4b61:59eafe46:cd037ff1:40d4f80f\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001f7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r1.xy = r0.xy/r0.zz;\n"
           "    r0.w = r1.x*r1.y;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=99695ba1:a411b454:d9266e11:1bc3da9a\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLean1::InitProgramDescriptor(HgcLean1 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLean1_hgc_visible", "//Metal1.0     \n//LEN=0000000128\n[[ visible ]] FragmentOut HgcLean1_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r1.xy = r0.xy/r0.zz;\n"
    "    r0.w = r1.x*r1.y;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcLean1");
}

void sub_1B7B71234(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B71334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B71374()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7136CLL);
}

void *HgcLean1::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLean1 [hgc1]");
}

uint64_t HgcLean1::BindTexture(HgcLean1 *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLean1::Bind(HgcLean1 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcLean1::RenderTile(HgcLean1 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v3ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          float32x4_t v11 = *(float32x4_t *)(v6 + v10 - 32);
          float32x4_t v12 = *(float32x4_t *)(v6 + v10 - 16);
          float32x4_t v13 = *(float32x4_t *)(v6 + v10);
          float32x4_t v14 = *(float32x4_t *)(v6 + v10 + 16);
          float32x4_t v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2);
          float32x4_t v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2);
          float32x4_t v17 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
          float32x4_t v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2);
          uint64_t v19 = *((void *)this + 51);
          float32x4_t v20 = *(float32x4_t *)(v19 + 16);
          float32x4_t v21 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v15), *(float32x4_t *)v19), v20);
          float32x4_t v22 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v16), *(float32x4_t *)v19), v20);
          float32x4_t v23 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v17), *(float32x4_t *)v19), v20);
          float32x4_t v24 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v18), *(float32x4_t *)v19), v20);
          float32x4_t v25 = *(float32x4_t *)(v19 + 32);
          int8x16_t v26 = *(int8x16_t *)(v19 + 48);
          float32x4_t v27 = vminq_f32(v21, v25);
          float32x4_t v28 = vminq_f32(v22, v25);
          float32x4_t v29 = vminq_f32(v23, v25);
          float32x4_t v30 = vminq_f32(v24, v25);
          int8x16_t v31 = (int8x16_t)vmulq_f32(v11, vmulq_f32(v27, vrecpsq_f32(v15, v27)));
          int8x16_t v32 = (int8x16_t)vmulq_f32(v12, vmulq_f32(v28, vrecpsq_f32(v16, v28)));
          int8x16_t v33 = (int8x16_t)vmulq_f32(v13, vmulq_f32(v29, vrecpsq_f32(v17, v29)));
          int8x16_t v34 = (int8x16_t)vmulq_f32(v14, vmulq_f32(v30, vrecpsq_f32(v18, v30)));
          char v35 = (int8x16_t *)(v5 + v10);
          v35[-2] = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v31, v31, 8uLL), *(float *)v31.i32), (int8x16_t)v11);
          v35[-1] = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v32, v32, 8uLL), *(float *)v32.i32), (int8x16_t)v12);
          *char v35 = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v33, v33, 8uLL), *(float *)v33.i32), (int8x16_t)v13);
          v35[1] = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v34, v34, 8uLL), *(float *)v34.i32), (int8x16_t)v14);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v3ProCore_Impl::PCNSRefImpl::release(this + 6) = -v9;
      }
      if ((int)v36 < v4)
      {
        uint64_t v36 = v36;
        do
        {
          float32x4_t v37 = *(float32x4_t *)(v6 + 16 * v36);
          float32x4_t v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2);
          uint64_t v39 = *((void *)this + 51);
          float32x4_t v40 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v38), *(float32x4_t *)v39), *(float32x4_t *)(v39 + 16)), *(float32x4_t *)(v39 + 32));
          int8x16_t v41 = (int8x16_t)vmulq_f32(v37, vmulq_f32(v40, vrecpsq_f32(v38, v40)));
          *(int8x16_t *)(v5 + 16 * v36++) = vbslq_s8(*(int8x16_t *)(v39 + 48), (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v41, v41, 8uLL), *(float *)v41.i32), (int8x16_t)v37);
        }
        while (v36 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLean1::GetDOD(HgcLean1 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcLean1::GetROI(HgcLean1 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcLean1::HgcLean1(HgcLean1 *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F112E8B8;
  operator new();
}

void sub_1B7B71764(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLean1::~HgcLean1(HGNode *this)
{
  *(void *)this = &unk_1F112E8B8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40FA0F61DDLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcLean1::~HgcLean1(this);

  HGObject::operator delete(v1);
}

uint64_t HgcLean1::SetParameter(HgcLean1 *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcLean1::GetParameter(HgcLean1 *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeBackgroundGeneratorShader::GetProgram(LiHeBackgroundGeneratorShader *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00400000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000162\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "void main()\n"
           "{\n"
           "\n"
           "    gl_FragColor = hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=3516c664:47c72e5c:14a395a6:40522bd5\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
}

void LiHeBackgroundGeneratorShader::InitProgramDescriptor(LiHeBackgroundGeneratorShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeBackgroundGeneratorShader_hgc_visible", "//Metal1.0     \n//LEN=00000000d9\n[[ visible ]] FragmentOut LiHeBackgroundGeneratorShader_hgc_visible(const constant float4* hg_Params)\n{\n    FragmentOut output;\n"
    "\n"
    "    output.color0 = hg_Params[0];\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeBackgroundGeneratorShader");
}

void sub_1B7B71938(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  *(_DWORD *)(v31 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v31 - 56), "FragmentOut");
  *(_OWORD *)(v31 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v30, v31 - 64);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  memset(v36, 0, 24);
  LODWORD(v32) = 2;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float4");
  long long v35 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v36, (uint64_t)&v32);
  if (v34 < 0) {
    operator delete(v33);
  }
  HGProgramDescriptor::SetArgumentBindings(v30, v36);
  int8x16_t v32 = (void **)v36;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B7B719F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a10 = &a19;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_1B7B71A2C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B71A24);
}

void *LiHeBackgroundGeneratorShader::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeBackgroundGeneratorShader [hgc1]");
}

uint64_t LiHeBackgroundGeneratorShader::BindTexture(LiHeBackgroundGeneratorShader *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeBackgroundGeneratorShader::Bind(LiHeBackgroundGeneratorShader *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeBackgroundGeneratorShader::RenderTile(LiHeBackgroundGeneratorShader *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = (_OWORD *)(v5 + 32);
    uint64_t v7 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        int v8 = 0;
        int v9 = v6;
        do
        {
          long long v10 = *(_OWORD *)*((void *)this + 51);
          *(v9 - 2) = v10;
          *(v9 - 1) = v10;
          *int v9 = v10;
          v9[1] = v10;
          v9 += 4;
          v8 -= 4;
        }
        while (v4 + v8 > 3);
        LODWORD(v11) = -v8;
      }
      if ((int)v11 < v4)
      {
        uint64_t v11 = v11;
        do
          *(_OWORD *)(v5 + 16 * v11++) = *(_OWORD *)*((void *)this + 51);
        while (v11 < v4);
      }
      ++v3;
      uint64_t v6 = (_OWORD *)((char *)v6 + v7);
      v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeBackgroundGeneratorShader::GetDOD(LiHeBackgroundGeneratorShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4 = &HGRectInfinite;
  if (a3) {
    int v4 = &HGRectNull;
  }
  return *(void *)v4;
}

uint64_t LiHeBackgroundGeneratorShader::GetROI(LiHeBackgroundGeneratorShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeBackgroundGeneratorShader::LiHeBackgroundGeneratorShader(LiHeBackgroundGeneratorShader *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F112EB20;
  operator new();
}

void sub_1B7B71C48(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeBackgroundGeneratorShader::~LiHeBackgroundGeneratorShader(HGNode *this)
{
  *(void *)this = &unk_1F112EB20;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40451B5BE8);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeBackgroundGeneratorShader::~LiHeBackgroundGeneratorShader(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeBackgroundGeneratorShader::SetParameter(LiHeBackgroundGeneratorShader *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  int v8 = (float *)*((void *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  *int v8 = a3;
  v8[1] = a4;
  PCSharedCount v8[2] = a5;
  void v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeBackgroundGeneratorShader::GetParameter(LiHeBackgroundGeneratorShader *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeDepthCompareProgram::GetProgram(LiHeDepthCompareProgram *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000889\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3, s4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[1];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[0] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[2] + s0;\n"
             "    s0 = hg_Params[3] + s0;\n"
             "    s1.x = hg_Params[8].z - s0.z;\n"
             "    s1.y = -s0.z/s1.x;\n"
             "    s1 = mix(s0, hg_Params[8], s1.yyyy);\n"
             "    s2.y = s0.z/-hg_Params[6].z;\n"
             "    s2.x = float(hg_Params[9].x >= float(c0.x));\n"
             "    r0.x = half(hg_Params[4].z);\n"
             "    r0.y = half(hg_Params[5].z);\n"
             "    r0.w = c0.x;\n"
             "    r0.z = half(hg_Params[6].z);\n"
             "    s3 = s2.yyyy*float4(r0) + s0;\n"
             "    s1 = select(s3, s1, -s2.xxxx < 0.00000h);\n"
             "    s3 = s1.yyyy*hg_Params[5];\n"
             "    s3 = s1.xxxx*hg_Params[4] + s3;\n"
             "    s4 = s1.wwww*hg_Params[7];\n"
             "    s3 = s1.zzzz*hg_Params[6] + s3;\n"
             "    s1 = s3 + s4;\n"
             "    s4.x = float(s3.w < -s4.w);\n"
             "    s3 = s0.yyyy*hg_Params[5];\n"
             "    s2.w = float(-s4.x >= float(c0.x));\n"
             "    s3 = s0.xxxx*hg_Params[4] + s3;\n"
             "    s4 = s0.wwww*hg_Params[7];\n"
             "    s0 = s0.zzzz*hg_Params[6] + s3;\n"
             "    s3 = s0 + s4;\n"
             "    s0.x = float(s0.w < -s4.w);\n"
             "    s0.y = fmax(s3.w, float(c0.y));\n"
             "    s0.z = fmin(s3.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s2.y = fmax(s1.w, float(c0.y));\n"
             "    s2.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.y = select(s2.z, s2.y, -s2.w < 0.00000h);\n"
             "    s0.xw = 1.00000f / s0.xy;\n"
             "    s0.xyz = s3.xyz*s0.xxx;\n"
             "    s0.x = dot(s0.xyz, s0.xyz);\n"
             "    s1.xyz = s1.xyz*s0.www;\n"
             "    s0.y = dot(s1.xyz, s1.xyz);\n"
             "    s0.xy = sqrt(s0.xy);\n"
             "    s0.x = s0.y - s0.x;\n"
             "    s0.y = s0.z - s1.z;\n"
             "    s0.w = (float) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    s2.x = select(s0.y, s0.x, -s2.x < 0.00000h);\n"
             "    s0.x = float(s2.x < float(c0.x));\n"
             "    output.color0 = s0.xxxx*s0.wwww;\n"
             "    return output;\n"
             "}\n"
             "//MD5=61436a97:dd5f363d:7650be05:ee56534e\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000a:0006:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000082b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[1];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[0] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[2] + r0;\n"
             "    r0 = hg_Params[3] + r0;\n"
             "    r1.x = hg_Params[8].z - r0.z;\n"
             "    r1.y = -r0.z/r1.x;\n"
             "    r1 = mix(r0, hg_Params[8], r1.yyyy);\n"
             "    r2.y = r0.z/-hg_Params[6].z;\n"
             "    r2.x = float(hg_Params[9].x >= c0.x);\n"
             "    r3.x = hg_Params[4].z;\n"
             "    r3.y = hg_Params[5].z;\n"
             "    r3.w = c0.x;\n"
             "    r3.z = hg_Params[6].z;\n"
             "    r3 = r2.yyyy*r3 + r0;\n"
             "    r1 = select(r3, r1, -r2.xxxx < 0.00000f);\n"
             "    r3 = r1.yyyy*hg_Params[5];\n"
             "    r3 = r1.xxxx*hg_Params[4] + r3;\n"
             "    r4 = r1.wwww*hg_Params[7];\n"
             "    r3 = r1.zzzz*hg_Params[6] + r3;\n"
             "    r1 = r3 + r4;\n"
             "    r4.x = float(r3.w < -r4.w);\n"
             "    r3 = r0.yyyy*hg_Params[5];\n"
             "    r2.w = float(-r4.x >= c0.x);\n"
             "    r3 = r0.xxxx*hg_Params[4] + r3;\n"
             "    r4 = r0.wwww*hg_Params[7];\n"
             "    r0 = r0.zzzz*hg_Params[6] + r3;\n"
             "    r3 = r0 + r4;\n"
             "    r0.x = float(r0.w < -r4.w);\n"
             "    r0.y = fmax(r3.w, c0.y);\n"
             "    r0.z = fmin(r3.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r2.y = fmax(r1.w, c0.y);\n"
             "    r2.z = fmin(r1.w, -c0.y);\n"
             "    r0.y = select(r2.z, r2.y, -r2.w < 0.00000f);\n"
             "    r0.xw = 1.00000f / r0.xy;\n"
             "    r0.xyz = r3.xyz*r0.xxx;\n"
             "    r0.x = dot(r0.xyz, r0.xyz);\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    r0.y = dot(r1.xyz, r1.xyz);\n"
             "    r0.xy = sqrt(r0.xy);\n"
             "    r0.x = r0.y - r0.x;\n"
             "    r0.y = r0.z - r1.z;\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r2.x = select(r0.y, r0.x, -r2.x < 0.00000f);\n"
             "    r0.x = float(r2.x < c0.x);\n"
             "    output.color0 = r0.xxxx*r0.wwww;\n"
             "    return output;\n"
             "}\n"
             "//MD5=5e302bb5:af3fc56a:1861dd64:979ffb4f\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000a:0005:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000009eb\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal1;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal0 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal2 + r0;\n"
           "    r0 = hg_ProgramLocal3 + r0;\n"
           "    r1.x = hg_ProgramLocal8.z - r0.z;\n"
           "    r1.y = -r0.z/r1.x;\n"
           "    r1 = mix(r0, hg_ProgramLocal8, r1.yyyy);\n"
           "    r2.y = r0.z/-hg_ProgramLocal6.z;\n"
           "    r2.x = float(hg_ProgramLocal9.x >= c0.x);\n"
           "    r3.x = hg_ProgramLocal4.z;\n"
           "    r3.y = hg_ProgramLocal5.z;\n"
           "    r3.w = c0.x;\n"
           "    r3.z = hg_ProgramLocal6.z;\n"
           "    r3 = r2.yyyy*r3 + r0;\n"
           "    r1 = vec4(-r2.x < 0.00000 ? r1.x : r3.x, -r2.x < 0.00000 ? r1.y : r3.y, -r2.x < 0.00000 ? r1.z : r3.z, -r"
           "2.x < 0.00000 ? r1.w : r3.w);\n"
           "    r3 = r1.yyyy*hg_ProgramLocal5;\n"
           "    r3 = r1.xxxx*hg_ProgramLocal4 + r3;\n"
           "    r4 = r1.wwww*hg_ProgramLocal7;\n"
           "    r3 = r1.zzzz*hg_ProgramLocal6 + r3;\n"
           "    r1 = r3 + r4;\n"
           "    r4.x = float(r3.w < -r4.w);\n"
           "    r3 = r0.yyyy*hg_ProgramLocal5;\n"
           "    r2.w = float(-r4.x >= c0.x);\n"
           "    r3 = r0.xxxx*hg_ProgramLocal4 + r3;\n"
           "    r4 = r0.wwww*hg_ProgramLocal7;\n"
           "    r0 = r0.zzzz*hg_ProgramLocal6 + r3;\n"
           "    r3 = r0 + r4;\n"
           "    r0.x = float(r0.w < -r4.w);\n"
           "    r0.y = max(r3.w, c0.y);\n"
           "    r0.z = min(r3.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r2.y = max(r1.w, c0.y);\n"
           "    r2.z = min(r1.w, -c0.y);\n"
           "    r0.y = -r2.w < 0.00000 ? r2.y : r2.z;\n"
           "    r0.xw = vec2(1.00000) / r0.xy;\n"
           "    r0.xyz = r3.xyz*r0.xxx;\n"
           "    r0.x = dot(r0.xyz, r0.xyz);\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    r0.y = dot(r1.xyz, r1.xyz);\n"
           "    r0.xy = sqrt(r0.xy);\n"
           "    r0.x = r0.y - r0.x;\n"
           "    r0.y = r0.z - r1.z;\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r2.x = -r2.x < 0.00000 ? r0.x : r0.y;\n"
           "    r0.x = float(r2.x < c0.x);\n"
           "    gl_FragColor = r0.xxxx*r0.wwww;\n"
           "}\n"
           "//MD5=17eb52d4:3d49dffd:b5262582:72830b80\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000a:0005:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeDepthCompareProgram::InitProgramDescriptor(LiHeDepthCompareProgram *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeDepthCompareProgram_hgc_visible", "//Metal1.0     \n//LEN=0000000710\n[[ visible ]] FragmentOut LiHeDepthCompareProgram_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[1];\n"
    "    r0 = texCoord1.xxxx*hg_Params[0] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[2] + r0;\n"
    "    r0 = hg_Params[3] + r0;\n"
    "    r1.x = hg_Params[8].z - r0.z;\n"
    "    r1.y = -r0.z/r1.x;\n"
    "    r1 = mix(r0, hg_Params[8], r1.yyyy);\n"
    "    r2.y = r0.z/-hg_Params[6].z;\n"
    "    r2.x = float(hg_Params[9].x >= c0.x);\n"
    "    r3.x = hg_Params[4].z;\n"
    "    r3.y = hg_Params[5].z;\n"
    "    r3.w = c0.x;\n"
    "    r3.z = hg_Params[6].z;\n"
    "    r3 = r2.yyyy*r3 + r0;\n"
    "    r1 = select(r3, r1, -r2.xxxx < 0.00000f);\n"
    "    r3 = r1.yyyy*hg_Params[5];\n"
    "    r3 = r1.xxxx*hg_Params[4] + r3;\n"
    "    r4 = r1.wwww*hg_Params[7];\n"
    "    r3 = r1.zzzz*hg_Params[6] + r3;\n"
    "    r1 = r3 + r4;\n"
    "    r4.x = float(r3.w < -r4.w);\n"
    "    r3 = r0.yyyy*hg_Params[5];\n"
    "    r2.w = float(-r4.x >= c0.x);\n"
    "    r3 = r0.xxxx*hg_Params[4] + r3;\n"
    "    r4 = r0.wwww*hg_Params[7];\n"
    "    r0 = r0.zzzz*hg_Params[6] + r3;\n"
    "    r3 = r0 + r4;\n"
    "    r0.x = float(r0.w < -r4.w);\n"
    "    r0.y = fmax(r3.w, c0.y);\n"
    "    r0.z = fmin(r3.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r2.y = fmax(r1.w, c0.y);\n"
    "    r2.z = fmin(r1.w, -c0.y);\n"
    "    r0.y = select(r2.z, r2.y, -r2.w < 0.00000f);\n"
    "    r0.xw = 1.00000f / r0.xy;\n"
    "    r0.xyz = r3.xyz*r0.xxx;\n"
    "    r0.x = dot(r0.xyz, r0.xyz);\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    r0.y = dot(r1.xyz, r1.xyz);\n"
    "    r0.xy = sqrt(r0.xy);\n"
    "    r0.x = r0.y - r0.x;\n"
    "    r0.y = r0.z - r1.z;\n"
    "    r0.w = color0.w;\n"
    "    r2.x = select(r0.y, r0.x, -r2.x < 0.00000f);\n"
    "    r0.x = float(r2.x < c0.x);\n"
    "    output.color0 = r0.xxxx*r0.wwww;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeDepthCompareProgram");
}

void sub_1B7B71EB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75D80;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B71FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7203C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B72034);
}

void *LiHeDepthCompareProgram::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeDepthCompareProgram [hgc1]");
}

uint64_t LiHeDepthCompareProgram::BindTexture(LiHeDepthCompareProgram *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeDepthCompareProgram::Bind(LiHeDepthCompareProgram *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeDepthCompareProgram::RenderTile(LiHeDepthCompareProgram *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v6 = a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    int32x2_t v8 = a2[10];
    uint64_t v9 = 16 * a2[3].i32[0];
    uint64_t v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 2)
      {
        unsigned int v115 = 0;
        float32x4_t v13 = v7;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 16;
        float32x4_t v13 = v7;
        do
        {
          float32x4_t v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v15 = *((void *)this + 51);
          float32x4_t v16 = *(float32x4_t *)(v15 + 16);
          float32x4_t v17 = *(float32x4_t *)(v15 + 32);
          float32x4_t v18 = *(float32x4_t *)(v15 + 48);
          float32x4_t v19 = vaddq_f32(v18, vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)v15, v13.f32[0])), vmulq_laneq_f32(v17, v13, 2)));
          float32x4_t v20 = vaddq_f32(v18, vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(*(float32x4_t *)v15, v14.f32[0])), vmulq_laneq_f32(v17, v14, 2)));
          float32x4_t v21 = *(float32x4_t *)(v15 + 128);
          float32x4_t v22 = vsubq_f32(v21, v19);
          float32x4_t v23 = vsubq_f32(v21, v20);
          v21.i64[0] = vdupq_laneq_s64((int64x2_t)v22, 1).u64[0];
          v21.i64[1] = v22.i64[0];
          float32x4_t v24 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
          v16.i64[0] = vdupq_laneq_s64((int64x2_t)v23, 1).u64[0];
          v16.i64[1] = v23.i64[0];
          float32x4_t v25 = (float32x4_t)vrev64q_s32((int32x4_t)v16);
          float32x4_t v27 = *(float32x4_t *)(v15 + 160);
          float32x4_t v26 = *(float32x4_t *)(v15 + 176);
          float32x4_t v28 = vminq_f32(vmaxq_f32(vrecpeq_f32(v24), v27), v26);
          float32x4_t v29 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v27), v26);
          float32x4_t v30 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpsq_f32(v24, v28)), v27), v26);
          float32x4_t v31 = vminq_f32(vmaxq_f32(vmulq_f32(v29, vrecpsq_f32(v25, v29)), v27), v26);
          float32x4_t v32 = *(float32x4_t *)(v15 + 96);
          float32x4_t v33 = *(float32x4_t *)(v15 + 112);
          float32x4_t v34 = vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          float32x4_t v35 = vminq_f32(vmaxq_f32(vrecpeq_f32(v34), v27), v26);
          float32x4_t v36 = vminq_f32(vmaxq_f32(vmulq_f32(v35, vrecpsq_f32(v34, v35)), v27), v26);
          float32x4_t v37 = vmulq_f32(v30, vrecpsq_f32(v24, v30));
          float32x4_t v38 = vmulq_f32(v36, vrecpsq_f32(v34, v36));
          int8x16_t v39 = (int8x16_t)vmulq_laneq_f32(v38, v19, 2);
          int8x16_t v40 = (int8x16_t)vmulq_laneq_f32(v38, v20, 2);
          int8x16_t v41 = (int8x16_t)vcgeq_f32(*(float32x4_t *)(v15 + 144), v27);
          float32x4_t v42 = vmulq_f32(v31, vrecpsq_f32(v25, v31));
          float32x4_t v43 = *(float32x4_t *)(v15 + 192);
          int8x16_t v44 = *(int8x16_t *)(v15 + 208);
          int8x16_t v45 = vandq_s8((int8x16_t)v43, v41);
          v31.i64[0] = vbslq_s8(v44, v45, v39).u64[0];
          float32x4_t v46 = *(float32x4_t *)(v15 + 64);
          float32x4_t v47 = *(float32x4_t *)(v15 + 80);
          int8x16_t v48 = vbslq_s8(v44, vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), vextq_s8((int8x16_t)v47, (int8x16_t)v7, 4uLL));
          v48.i32[3] = 0;
          float32x2_t v49 = (float32x2_t)vbslq_s8(v44, v45, v40).u64[0];
          float32x4_t v50 = *(float32x4_t *)(v15 + 240);
          float32x4_t v51 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 224), (int8x16_t)v32, v48);
          float32x4_t v52 = vaddq_f32(v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0), v50), (int8x16_t)vmulq_lane_f32(v22, (float32x2_t)*(_OWORD *)&vmulq_f32(v37, vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2))), 1), (int8x16_t)vmulq_lane_f32(v51, *(float32x2_t *)v31.f32, 1)));
          float32x4_t v53 = vaddq_f32(v20, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v49, 0), v50), (int8x16_t)vmulq_lane_f32(v23, (float32x2_t)*(_OWORD *)&vmulq_f32(v42, vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2))), 1), (int8x16_t)vmulq_lane_f32(v51, v49, 1)));
          float32x4_t v54 = vmulq_laneq_f32(v33, v52, 3);
          float32x4_t v55 = vmulq_laneq_f32(v33, v53, 3);
          float32x4_t v56 = vaddq_f32(vmulq_laneq_f32(v32, v52, 2), vaddq_f32(vmulq_lane_f32(v47, *(float32x2_t *)v52.f32, 1), vmulq_n_f32(v46, v52.f32[0])));
          float32x4_t v57 = vaddq_f32(vmulq_laneq_f32(v32, v53, 2), vaddq_f32(vmulq_lane_f32(v47, *(float32x2_t *)v53.f32, 1), vmulq_n_f32(v46, v53.f32[0])));
          float32x4_t v58 = vaddq_f32(v54, v56);
          float32x4_t v59 = vaddq_f32(v55, v57);
          int8x16_t v60 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(vnegq_f32(v54), v56));
          int8x16_t v61 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(vnegq_f32(v55), v57));
          float32x4_t v62 = vaddq_f32(vmulq_n_f32(v46, v19.f32[0]), vmulq_lane_f32(v47, *(float32x2_t *)v19.f32, 1));
          int8x16_t v63 = (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v61, v61, 0xCuLL)), v50);
          float32x4_t v64 = vaddq_f32(vmulq_n_f32(v46, v20.f32[0]), vmulq_lane_f32(v47, *(float32x2_t *)v20.f32, 1));
          float32x4_t v65 = vmulq_laneq_f32(v33, v19, 3);
          float32x4_t v66 = vmulq_laneq_f32(v33, v20, 3);
          int8x16_t v67 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v60, v60, 0xCuLL)), v50));
          float32x4_t v68 = vaddq_f32(vmulq_laneq_f32(v32, v19, 2), v62);
          float32x4_t v69 = vaddq_f32(vmulq_laneq_f32(v32, v20, 2), v64);
          float32x4_t v70 = vaddq_f32(v68, v65);
          float32x4_t v71 = vaddq_f32(v69, v66);
          int8x16_t v72 = vandq_s8((int8x16_t)v43, v63);
          int8x16_t v73 = (int8x16_t)vcgtq_f32(vnegq_f32(v66), v69);
          int8x16_t v74 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(vnegq_f32(v65), v68));
          int8x16_t v75 = vextq_s8(v67, v67, 4uLL);
          int8x16_t v76 = vandq_s8((int8x16_t)v43, v73);
          int8x16_t v77 = vextq_s8(v72, v72, 4uLL);
          float32x4_t v78 = (float32x4_t)vbslq_s8(v44, vextq_s8(v74, v74, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), v43));
          float32x4_t v79 = (float32x4_t)vbslq_s8(v44, vextq_s8(v76, v76, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), v43));
          v75.i64[0] = v31.i64[0];
          *(float32x2_t *)v77.i8 = v49;
          int8x16_t v80 = (int8x16_t)vrev64q_s32((int32x4_t)v78);
          v78.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v70), v43).i64[1];
          int8x16_t v81 = (int8x16_t)vrev64q_s32((int32x4_t)v79);
          v79.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v71), v43).i64[1];
          int8x16_t v82 = vbslq_s8((int8x16_t)vcgtq_f32(v78, v50), (int8x16_t)vdupq_laneq_s64((int64x2_t)v78, 1), v80);
          int8x16_t v83 = vbslq_s8((int8x16_t)vcgtq_f32(v79, v50), (int8x16_t)vdupq_laneq_s64((int64x2_t)v79, 1), v81);
          int8x16_t v84 = *(int8x16_t *)(v15 + 256);
          float32x4_t v85 = *(float32x4_t *)(v15 + 272);
          float32x4_t v86 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 224), (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v58), v43), vbslq_s8(v84, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), v43), v75));
          float32x4_t v87 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 224), (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v59), v43), vbslq_s8(v84, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), v43), v77));
          float32x4_t v88 = (float32x4_t)vdupq_lane_s64(vbslq_s8(v44, v82, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), v50), (int8x16_t)v86, vextq_s8((int8x16_t)v86, (int8x16_t)v7, 4uLL))).i64[0], 0);
          float32x4_t v89 = (float32x4_t)vdupq_lane_s64(vbslq_s8(v44, v83, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL), v50), (int8x16_t)v87, vextq_s8((int8x16_t)v87, (int8x16_t)v7, 4uLL))).i64[0], 0);
          float32x4_t v90 = vminq_f32(vmaxq_f32(vrecpeq_f32(v88), v85), v26);
          float32x4_t v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v89), v85), v26);
          float32x4_t v92 = vminq_f32(vmaxq_f32(vmulq_f32(v90, vrecpsq_f32(v88, v90)), v85), v26);
          float32x4_t v93 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v89, v91)), v85), v26);
          int8x16_t v94 = (int8x16_t)vmulq_f32(v92, vrecpsq_f32(v88, v92));
          int8x16_t v95 = (int8x16_t)vmulq_f32(v93, vrecpsq_f32(v89, v93));
          float32x4_t v96 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 288), v94, (int8x16_t)vmulq_n_f32(v70, *(float *)v94.i32));
          float32x4_t v97 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 288), v95, (int8x16_t)vmulq_n_f32(v71, *(float *)v95.i32));
          float32x4_t v98 = vmulq_f32(v96, v96);
          float32x4_t v99 = vmulq_f32(v97, v97);
          v98.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v98, 1), vaddq_f32(v98, (float32x4_t)vrev64q_s32((int32x4_t)v98))).u64[0];
          v99.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v99, 1), vaddq_f32(v99, (float32x4_t)vrev64q_s32((int32x4_t)v99))).u64[0];
          float32x4_t v100 = vmulq_laneq_f32(v58, v96, 3);
          float32x4_t v101 = vmulq_laneq_f32(v59, v97, 3);
          float32x4_t v102 = vmulq_f32(v100, v100);
          float32x4_t v103 = vmulq_f32(v101, v101);
          v98.i64[1] = v96.i64[1];
          v99.i64[1] = v97.i64[1];
          float32x4_t v104 = (float32x4_t)vbslq_s8(v84, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), vaddq_f32(v102, (float32x4_t)vrev64q_s32((int32x4_t)v102))), (int8x16_t)v98);
          float32x4_t v105 = (float32x4_t)vbslq_s8(v84, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 4uLL), vaddq_f32(v103, (float32x4_t)vrev64q_s32((int32x4_t)v103))), (int8x16_t)v99);
          float32x4_t v106 = vminq_f32(vrsqrteq_f32(v104), v26);
          float32x4_t v107 = vminq_f32(vrsqrteq_f32(v105), v26);
          float32x4_t v108 = vminq_f32(vmulq_f32(v106, vrsqrtsq_f32(vmulq_f32(v106, v104), v106)), v26);
          float32x4_t v109 = vminq_f32(vmulq_f32(v107, vrsqrtsq_f32(vmulq_f32(v107, v105), v107)), v26);
          float32x4_t v110 = vmulq_f32(vminq_f32(vmulq_f32(v108, vrsqrtsq_f32(vmulq_f32(v108, v104), v108)), v26), v104);
          float32x4_t v111 = vmulq_f32(vminq_f32(vmulq_f32(v109, vrsqrtsq_f32(vmulq_f32(v109, v105), v109)), v26), v105);
          v110.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v110), v110).u64[0];
          v111.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v111), v111).u64[0];
          v110.i64[1] = v104.i64[1];
          v111.i64[1] = v105.i64[1];
          v100.i64[0] = vbslq_s8(v44, (int8x16_t)v110, vextq_s8((int8x16_t)vsubq_f32(v110, v100), (int8x16_t)v7, 4uLL)).u64[0];
          v111.i64[0] = vbslq_s8(v44, (int8x16_t)v111, vextq_s8((int8x16_t)vsubq_f32(v111, v101), (int8x16_t)v7, 4uLL)).u64[0];
          int32x4_t v112 = *(int32x4_t *)(*(void *)&v8 + v12 - 16);
          int32x4_t v113 = *(int32x4_t *)(*(void *)&v8 + v12);
          v104.i64[0] = v100.i64[0];
          v105.i64[0] = v111.i64[0];
          v100.i64[1] = vdupq_laneq_s64((int64x2_t)v112, 1).u64[0];
          v104.i64[1] = *(void *)(*(void *)&v8 + v12 - 8);
          v111.i64[1] = vdupq_laneq_s64((int64x2_t)v113, 1).u64[0];
          v105.i64[1] = *(void *)(*(void *)&v8 + v12 + 8);
          int v114 = (float32x4_t *)(*(void *)&v6 + v12);
          v114[-1] = vmulq_n_f32((float32x4_t)vdupq_laneq_s32(v112, 3), *(float *)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v50, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v86, v50), (int8x16_t)v104, (int8x16_t)vrev64q_s32((int32x4_t)v100)))).i32);
          float32x4_t *v114 = vmulq_n_f32((float32x4_t)vdupq_laneq_s32(v113, 3), *(float *)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v50, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v87, v50), (int8x16_t)v105, (int8x16_t)vrev64q_s32((int32x4_t)v111)))).i32);
          float32x4_t v13 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736B0);
          v11 -= 2;
          v12 += 32;
        }
        while (v5 + v11 > 1);
        unsigned int v115 = -v11;
      }
      if ((int)v115 < v5)
      {
        uint64_t v116 = *((void *)this + 51);
        float32x4_t v117 = vaddq_f32(*(float32x4_t *)(v116 + 48), vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v116 + 16), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)v116, v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v116 + 32), v13, 2)));
        float32x4_t v118 = vsubq_f32(*(float32x4_t *)(v116 + 128), v117);
        v119.i64[0] = vdupq_laneq_s64((int64x2_t)v118, 1).u64[0];
        v119.i64[1] = v118.i64[0];
        float32x4_t v120 = (float32x4_t)vrev64q_s32(v119);
        float32x4_t v122 = *(float32x4_t *)(v116 + 160);
        float32x4_t v121 = *(float32x4_t *)(v116 + 176);
        float32x4_t v123 = vminq_f32(vmaxq_f32(vrecpeq_f32(v120), v122), v121);
        float32x4_t v124 = vminq_f32(vmaxq_f32(vmulq_f32(v123, vrecpsq_f32(v120, v123)), v122), v121);
        int8x16_t v125 = (int8x16_t)vmulq_lane_f32(v118, (float32x2_t)*(_OWORD *)&vmulq_f32(vmulq_f32(v124, vrecpsq_f32(v120, v124)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 2))), 1);
        float32x4_t v126 = *(float32x4_t *)(v116 + 96);
        float32x4_t v127 = *(float32x4_t *)(v116 + 112);
        float32x4_t v128 = vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL));
        float32x4_t v129 = vminq_f32(vmaxq_f32(vrecpeq_f32(v128), v122), v121);
        float32x4_t v130 = vminq_f32(vmaxq_f32(vmulq_f32(v129, vrecpsq_f32(v128, v129)), v122), v121);
        int8x16_t v131 = (int8x16_t)vmulq_laneq_f32(vmulq_f32(v130, vrecpsq_f32(v128, v130)), v117, 2);
        float32x4_t v132 = *(float32x4_t *)(v116 + 192);
        int8x16_t v133 = *(int8x16_t *)(v116 + 208);
        v122.i64[0] = vbslq_s8(v133, vandq_s8((int8x16_t)v132, (int8x16_t)vcgeq_f32(*(float32x4_t *)(v116 + 144), v122)), v131).u64[0];
        float32x4_t v134 = *(float32x4_t *)(v116 + 64);
        float32x4_t v135 = *(float32x4_t *)(v116 + 80);
        int8x16_t v136 = vbslq_s8(v133, vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL), vextq_s8((int8x16_t)v135, (int8x16_t)v7, 4uLL));
        v136.i32[3] = 0;
        int8x16_t v138 = *(int8x16_t *)(v116 + 224);
        float32x4_t v137 = *(float32x4_t *)(v116 + 240);
        float32x4_t v139 = vaddq_f32(v117, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 0), v137), v125, (int8x16_t)vmulq_lane_f32((float32x4_t)vbslq_s8(v138, (int8x16_t)v126, v136), *(float32x2_t *)v122.f32, 1)));
        float32x4_t v140 = vmulq_laneq_f32(v127, v139, 3);
        float32x4_t v141 = vaddq_f32(vmulq_laneq_f32(v126, v139, 2), vaddq_f32(vmulq_lane_f32(v135, *(float32x2_t *)v139.f32, 1), vmulq_n_f32(v134, v139.f32[0])));
        int8x16_t v142 = vandq_s8((int8x16_t)v132, (int8x16_t)vcgtq_f32(vnegq_f32(v140), v141));
        int8x16_t v143 = vandq_s8((int8x16_t)v132, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v142, v142, 0xCuLL)), v137));
        int8x16_t v144 = vextq_s8(v143, v143, 4uLL);
        v144.i64[0] = v122.i64[0];
        float32x4_t v145 = vmulq_laneq_f32(v127, v117, 3);
        float32x4_t v146 = vaddq_f32(vmulq_laneq_f32(v126, v117, 2), vaddq_f32(vmulq_n_f32(v134, v117.f32[0]), vmulq_lane_f32(v135, *(float32x2_t *)v117.f32, 1)));
        float32x4_t v147 = vaddq_f32(v146, v145);
        int8x16_t v148 = vandq_s8((int8x16_t)v132, (int8x16_t)vcgtq_f32(vnegq_f32(v145), v146));
        float32x4_t v149 = (float32x4_t)vbslq_s8(v133, vextq_s8(v148, v148, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL), v132));
        int8x16_t v150 = (int8x16_t)vrev64q_s32((int32x4_t)v149);
        v149.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v147), v132).i64[1];
        float32x4_t v151 = vaddq_f32(v140, v141);
        int8x16_t v152 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v137), (int8x16_t)vdupq_laneq_s64((int64x2_t)v149, 1), v150);
        int8x16_t v153 = *(int8x16_t *)(v116 + 256);
        float32x4_t v154 = *(float32x4_t *)(v116 + 272);
        float32x4_t v155 = (float32x4_t)vbslq_s8(v138, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v151), v132), vbslq_s8(v153, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL), v132), v144));
        float32x4_t v156 = (float32x4_t)vdupq_lane_s64(vbslq_s8(v133, v152, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL), v137), (int8x16_t)v155, vextq_s8((int8x16_t)v155, (int8x16_t)v7, 4uLL))).i64[0], 0);
        float32x4_t v157 = vminq_f32(vmaxq_f32(vrecpeq_f32(v156), v154), v121);
        float32x4_t v158 = vminq_f32(vmaxq_f32(vmulq_f32(v157, vrecpsq_f32(v156, v157)), v154), v121);
        int8x16_t v159 = (int8x16_t)vmulq_f32(v158, vrecpsq_f32(v156, v158));
        float32x4_t v160 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v116 + 288), v159, (int8x16_t)vmulq_n_f32(v147, *(float *)v159.i32));
        float32x4_t v161 = vmulq_f32(v160, v160);
        v161.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v161, 1), vaddq_f32(v161, (float32x4_t)vrev64q_s32((int32x4_t)v161))).u64[0];
        v161.i64[1] = v160.i64[1];
        float32x4_t v162 = vmulq_laneq_f32(v151, v160, 3);
        float32x4_t v163 = vmulq_f32(v162, v162);
        float32x4_t v164 = (float32x4_t)vbslq_s8(v153, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v163, (int8x16_t)v163, 4uLL), vaddq_f32(v163, (float32x4_t)vrev64q_s32((int32x4_t)v163))), (int8x16_t)v161);
        float32x4_t v165 = vminq_f32(vrsqrteq_f32(v164), v121);
        float32x4_t v166 = vminq_f32(vmulq_f32(v165, vrsqrtsq_f32(vmulq_f32(v165, v164), v165)), v121);
        float32x4_t v167 = vmulq_f32(vminq_f32(vmulq_f32(v166, vrsqrtsq_f32(vmulq_f32(v166, v164), v166)), v121), v164);
        v167.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v167), v167).u64[0];
        v167.i64[1] = v164.i64[1];
        int32x4_t v168 = *(int32x4_t *)(*(void *)&v8 + 16 * v115);
        v167.i64[0] = vbslq_s8(v133, (int8x16_t)v167, vextq_s8((int8x16_t)vsubq_f32(v167, v162), (int8x16_t)v7, 4uLL)).u64[0];
        v133.i64[0] = v167.i64[0];
        v133.i64[1] = *(void *)(*(void *)&v8 + 16 * v115 + 8);
        v167.i64[1] = vdupq_laneq_s64((int64x2_t)v168, 1).u64[0];
        *(float32x4_t *)(*(void *)&v6 + 16 * v115) = vmulq_n_f32((float32x4_t)vdupq_laneq_s32(v168, 3), *(float *)vandq_s8((int8x16_t)v132, (int8x16_t)vcgtq_f32(v137, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v155, v137), v133, (int8x16_t)vrev64q_s32((int32x4_t)v167)))).i32);
      }
      float32x4_t v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B7E736C0);
      *(void *)&v8 += v10;
      *(void *)&v6 += v9;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeDepthCompareProgram::GetDOD(LiHeDepthCompareProgram *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeDepthCompareProgram::GetROI(LiHeDepthCompareProgram *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeDepthCompareProgram::LiHeDepthCompareProgram(LiHeDepthCompareProgram *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F112ED88;
  operator new();
}

void sub_1B7B72D28(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeDepthCompareProgram::~LiHeDepthCompareProgram(HGNode *this)
{
  *(void *)this = &unk_1F112ED88;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40B2834900);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeDepthCompareProgram::~LiHeDepthCompareProgram(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeDepthCompareProgram::SetParameter(LiHeDepthCompareProgram *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      float32x4_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      float *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      PCSharedCount v7[3] = a6;
      goto LABEL_53;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_53;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_53;
    case 3:
      int v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_53;
    case 4:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      double v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      void v12[19] = a6;
      goto LABEL_53;
    case 5:
      float32x4_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_53;
    case 6:
      float32x4_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_53;
    case 7:
      uint64_t v15 = (float *)*((void *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6) {
        return 0;
      }
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_53;
    case 8:
      float32x4_t v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_53;
    case 9:
      float v17 = -fabsf(a3.n128_f32[0]);
      float32x4_t v18 = (__n128 *)*((void *)this + 51);
      if (v18[9].n128_f32[0] == v17
        && v18[9].n128_f32[1] == 0.0
        && v18[9].n128_f32[2] == 0.0
        && v18[9].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v18[9].n128_f32[0] = v17;
      v18[9].n128_u64[1] = 0;
      v18[9].n128_u32[1] = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v18[19] = a3;
LABEL_53:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeDepthCompareProgram::GetParameter(LiHeDepthCompareProgram *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      int v4 = v3 + 3;
      goto LABEL_12;
    case 1:
      int v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_12;
    case 2:
      int32x2_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      int v4 = v6 + 11;
      goto LABEL_12;
    case 3:
      float32x4_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      int v4 = v7 + 15;
      goto LABEL_12;
    case 4:
      int32x2_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      int v4 = v8 + 19;
      goto LABEL_12;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      int v4 = v9 + 23;
      goto LABEL_12;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      int v4 = v10 + 27;
      goto LABEL_12;
    case 7:
      int v11 = (float *)*((void *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      int v4 = v11 + 31;
      goto LABEL_12;
    case 8:
      float32x4_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      int v4 = v13 + 35;
      goto LABEL_12;
    case 9:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[76];
      a3[1] = v12[77];
      a3[2] = v12[78];
      int v4 = v12 + 79;
LABEL_12:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *LiHeEdgeMixShader::GetProgram(LiHeEdgeMixShader *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003c8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r2.x = r2.x*half(hg_Params[0].x);\n"
             "    output.color0 = mix(float4(r1), float4(r0), float4(r2.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=329baea9:37f28717:51b4f96f:2eddef1b\n"
             "//SIG=02400000:00000000:00000000:00000000:0000:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000397\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r2.x = r2.x*hg_Params[0].x;\n"
             "    output.color0 = mix(r1, r0, r2.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=021e87ba:b3c6fb4e:61b74d33:8fb9409f\n"
             "//SIG=02000000:00000000:00000000:00000000:0000:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000031d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    r2.x = r2.x*hg_ProgramLocal0.x;\n"
           "    gl_FragColor = mix(r1, r0, r2.xxxx);\n"
           "}\n"
           "//MD5=289a3fa8:8db04128:043b615d:e96483b9\n"
           "//SIG=02000000:00000000:00000000:00000000:0000:0001:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void LiHeEdgeMixShader::InitProgramDescriptor(LiHeEdgeMixShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeEdgeMixShader_hgc_visible", "//Metal1.0     \n//LEN=00000002b7\n[[ visible ]] FragmentOut LiHeEdgeMixShader_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1, \n    texture2d< float > hg_Texture2, \n    sampler hg_Sampler2,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture1.sample(hg_Sampler1, texCoord1.xy);\n"
    "    r2.x = hg_Texture2.sample(hg_Sampler2, texCoord2.xy).x;\n"
    "    r2.x = r2.x*hg_Params[0].x;\n"
    "    output.color0 = mix(r1, r0, r2.xxxx);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeEdgeMixShader");
}

void sub_1B7B733D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B736D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B73754()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7374CLL);
}

void *LiHeEdgeMixShader::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeEdgeMixShader [hgc1]");
}

uint64_t LiHeEdgeMixShader::BindTexture(LiHeEdgeMixShader *this, HGHandler *a2, int a3)
{
  if (a3 == 2)
  {
    int v4 = a2;
    int v5 = 2;
  }
  else if (a3 == 1)
  {
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeEdgeMixShader::Bind(LiHeEdgeMixShader *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeEdgeMixShader::RenderFragment(uint64_t a1, float32x4_t *a2, int32x2_t *a3)
{
  *(float32x2_t *)v3.f32 = vadd_f32(vcvt_f32_s32(*a3), (float32x2_t)0x3F0000003F000000);
  v3.i64[1] = 0x3F80000000000000;
  uint64_t v4 = a3[11].i32[0];
  float32x4_t v5 = vsubq_f32(a2[1], v3);
  int32x4_t v6 = vaddq_s32(vcvtq_s32_f32(v5), vcltzq_f32(v5));
  v5.i64[0] = vsubq_f32(v5, vcvtq_f32_s32(v6)).u64[0];
  float32x4_t v7 = (float32x4_t *)(*(void *)&a3[10] + 16 * (v6.i32[0] + v6.i32[1] * (int)v4));
  float32x4_t v8 = vaddq_f32(*v7, vmulq_n_f32(vsubq_f32(v7[1], *v7), v5.f32[0]));
  float32x4_t v9 = vaddq_f32(v8, vmulq_lane_f32(vsubq_f32(vaddq_f32(v7[v4], vmulq_n_f32(vsubq_f32(v7[(int)v4 + 1], v7[v4]), v5.f32[0])), v8), *(float32x2_t *)v5.f32, 1));
  uint64_t v10 = a3[13].i32[0];
  float32x4_t v11 = vsubq_f32(a2[2], v3);
  int32x4_t v12 = vaddq_s32(vcvtq_s32_f32(v11), vcltzq_f32(v11));
  v11.i64[0] = vsubq_f32(v11, vcvtq_f32_s32(v12)).u64[0];
  float32x4_t v13 = (float32x4_t *)(*(void *)&a3[12] + 16 * (v12.i32[0] + v12.i32[1] * (int)v10));
  float32x4_t v14 = vaddq_f32(*v13, vmulq_n_f32(vsubq_f32(v13[1], *v13), v11.f32[0]));
  float32x4_t v15 = vaddq_f32(v14, vmulq_lane_f32(vsubq_f32(vaddq_f32(v13[v10], vmulq_n_f32(vsubq_f32(v13[(int)v10 + 1], v13[v10]), v11.f32[0])), v14), *(float32x2_t *)v11.f32, 1));
  uint64_t v16 = a3[15].i32[0];
  float32x4_t v17 = vsubq_f32(a2[3], v3);
  int32x4_t v18 = vaddq_s32(vcvtq_s32_f32(v17), vcltzq_f32(v17));
  v17.i64[0] = vsubq_f32(v17, vcvtq_f32_s32(v18)).u64[0];
  float32x4_t v19 = (float32x4_t *)(*(void *)&a3[14] + 16 * (v18.i32[0] + v18.i32[1] * (int)v16));
  float32x4_t v20 = vaddq_f32(*v19, vmulq_n_f32(vsubq_f32(v19[1], *v19), v17.f32[0]));
  *(float32x4_t *)*(void *)&a3[2] = vaddq_f32(v15, vmulq_n_f32(vsubq_f32(v9, v15), vmulq_f32(*(float32x4_t *)*(void *)(a1 + 408), vaddq_f32(v20, vmulq_lane_f32(vsubq_f32(vaddq_f32(v19[v16], vmulq_n_f32(vsubq_f32(v19[(int)v16 + 1], v19[v16]), v17.f32[0])), v20), *(float32x2_t *)v17.f32, 1))).f32[0]));
  return 0;
}

uint64_t LiHeEdgeMixShader::RenderTile(LiHeEdgeMixShader *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v7 = a2[2];
    uint64_t v8 = 16 * a2[3].i32[0];
    float32x4_t v9 = v5;
    float32x4_t v10 = v5;
    float32x4_t v11 = v5;
    do
    {
      if (v6 >= 1)
      {
        uint64_t v12 = 0;
        float32x4_t v13 = v9;
        float32x4_t v14 = v10;
        float32x4_t v15 = v11;
        do
        {
          uint64_t v16 = a2[11].i32[0];
          float32x4_t v17 = vsubq_f32(v13, v5);
          int32x4_t v18 = vaddq_s32(vcvtq_s32_f32(v17), vcltzq_f32(v17));
          v17.i64[0] = vsubq_f32(v17, vcvtq_f32_s32(v18)).u64[0];
          float32x4_t v19 = (float32x4_t *)(*(void *)&a2[10] + 16 * (v18.i32[0] + v18.i32[1] * (int)v16));
          float32x4_t v20 = v19[v16];
          float32x4_t v21 = vsubq_f32(v19[(int)v16 + 1], v20);
          uint64_t v22 = a2[13].i32[0];
          float32x4_t v23 = vsubq_f32(v14, v5);
          int32x4_t v24 = vaddq_s32(vcvtq_s32_f32(v23), vcltzq_f32(v23));
          v23.i64[0] = vsubq_f32(v23, vcvtq_f32_s32(v24)).u64[0];
          float32x4_t v25 = vaddq_f32(*v19, vmulq_n_f32(vsubq_f32(v19[1], *v19), v17.f32[0]));
          float32x4_t v26 = (float32x4_t *)(*(void *)&a2[12] + 16 * (v24.i32[0] + v24.i32[1] * (int)v22));
          float32x4_t v27 = vaddq_f32(v20, vmulq_n_f32(v21, v17.f32[0]));
          float32x4_t v28 = vaddq_f32(*v26, vmulq_n_f32(vsubq_f32(v26[1], *v26), v23.f32[0]));
          float32x4_t v29 = vsubq_f32(v15, v5);
          int32x4_t v30 = vaddq_s32(vcvtq_s32_f32(v29), vcltzq_f32(v29));
          v29.i64[0] = vsubq_f32(v29, vcvtq_f32_s32(v30)).u64[0];
          float32x4_t v31 = vsubq_f32(vaddq_f32(v26[v22], vmulq_n_f32(vsubq_f32(v26[(int)v22 + 1], v26[v22]), v23.f32[0])), v28);
          uint64_t v32 = a2[15].i32[0];
          float32x4_t v33 = vmulq_lane_f32(vsubq_f32(v27, v25), *(float32x2_t *)v17.f32, 1);
          float32x4_t v34 = (float32x4_t *)(*(void *)&a2[14] + 16 * (v30.i32[0] + v30.i32[1] * (int)v32));
          float32x4_t v35 = vaddq_f32(*v34, vmulq_n_f32(vsubq_f32(v34[1], *v34), v29.f32[0]));
          float32x4_t v36 = vaddq_f32(v28, vmulq_lane_f32(v31, *(float32x2_t *)v23.f32, 1));
          *(float32x4_t *)(*(void *)&v7 + v12) = vaddq_f32(v36, vmulq_n_f32(vsubq_f32(vaddq_f32(v25, v33), v36), vmulq_f32(*(float32x4_t *)*((void *)this + 51), vaddq_f32(v35, vmulq_lane_f32(vsubq_f32(vaddq_f32(v34[v32], vmulq_n_f32(vsubq_f32(v34[(int)v32 + 1], v34[v32]), v29.f32[0])), v35), *(float32x2_t *)v29.f32, 1))).f32[0]));
          float32x4_t v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          float32x4_t v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736B0);
          float32x4_t v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B7E736B0);
          v12 += 16;
        }
        while (16 * v6 != v12);
      }
      float32x4_t v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B7E736C0);
      float32x4_t v10 = vaddq_f32(v10, (float32x4_t)xmmword_1B7E736C0);
      float32x4_t v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B7E736C0);
      ++v4;
      *(void *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeEdgeMixShader::GetDOD(LiHeEdgeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 > 2) {
    return 0;
  }
  uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v5, v4, v6);
}

uint64_t LiHeEdgeMixShader::GetROI(LiHeEdgeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 > 2) {
    return 0;
  }
  uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v5, v4, v6);
}

void LiHeEdgeMixShader::LiHeEdgeMixShader(LiHeEdgeMixShader *this)
{
  HGNode3D::HGNode3D(this);
  *uint64_t v1 = &unk_1F112EFF0;
  operator new();
}

void sub_1B7B73DBC(_Unwind_Exception *a1)
{
  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdgeMixShader::~LiHeEdgeMixShader(LiHeEdgeMixShader *this)
{
  *(void *)this = &unk_1F112EFF0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40451B5BE8);
  }

  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeEdgeMixShader::~LiHeEdgeMixShader(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeEdgeMixShader::SetParameter(LiHeEdgeMixShader *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (float *)*((void *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  *uint64_t v8 = a3;
  v8[1] = a4;
  PCSharedCount v8[2] = a5;
  void v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeEdgeMixShader::GetParameter(LiHeEdgeMixShader *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeEdgeNodeFragment::GetProgram(LiHeEdgeNodeFragment *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002f8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=776258c9:0558b71d:d6edd159:1890a0b9\n"
             "//SIG=02400000:00000000:00000000:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=91caf8fd:f4bf4ef2:0c5f5a68:5aaf2328\n"
             "//SIG=02000000:00000000:00000000:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000028e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r0 = r0*r1.xxxx;\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=7f424e0c:12bea71a:1686b0ce:a712a6c3\n"
           "//SIG=02000000:00000000:00000000:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeEdgeNodeFragment::InitProgramDescriptor(LiHeEdgeNodeFragment *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeEdgeNodeFragment_hgc_visible", "//Metal1.0     \n//LEN=0000000219\n[[ visible ]] FragmentOut LiHeEdgeNodeFragment_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord0,\n    float4 texCoord1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1.x = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).x;\n"
    "    r0 = r0*r1.xxxx;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeEdgeNodeFragment");
}

void sub_1B7B74028(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B74268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B742D0()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B742C8);
}

void *LiHeEdgeNodeFragment::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeEdgeNodeFragment [hgc1]");
}

uint64_t LiHeEdgeNodeFragment::BindTexture(LiHeEdgeNodeFragment *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    uint64_t v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeEdgeNodeFragment::Bind(LiHeEdgeNodeFragment *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeEdgeNodeFragment::RenderFragment(uint64_t a1, float32x4_t *a2, int32x2_t *a3)
{
  *(float32x2_t *)v3.f32 = vadd_f32(vcvt_f32_s32(*a3), (float32x2_t)0x3F0000003F000000);
  v3.i64[1] = 0x3F80000000000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  float32x4_t v5 = vaddq_f32(vsubq_f32(a2[1], v3), v4);
  int32x4_t v6 = vcvtq_s32_f32(v5);
  v5.i64[0] = vaddq_s32(v6, vcgtq_f32(vcvtq_f32_s32(v6), v5)).u64[0];
  uint64_t v7 = a3[13].i32[0];
  float32x4_t v8 = vsubq_f32(a2[2], v3);
  int32x4_t v9 = vaddq_s32(vcvtq_s32_f32(v8), vcltzq_f32(v8));
  v8.i64[0] = vsubq_f32(v8, vcvtq_f32_s32(v9)).u64[0];
  float32x4_t v10 = (float32x4_t *)(*(void *)&a3[12] + 16 * (v9.i32[0] + v9.i32[1] * (int)v7));
  float32x4_t v11 = vaddq_f32(*v10, vmulq_n_f32(vsubq_f32(v10[1], *v10), v8.f32[0]));
  *(float32x4_t *)*(void *)&a3[2] = vmulq_f32(*(float32x4_t *)*(void *)(a1 + 408), vmulq_n_f32(*(float32x4_t *)(*(void *)&a3[10]+ 16 * (v5.i32[0] + v5.i32[1] * a3[11].i32[0])), vaddq_f32(v11, vmulq_lane_f32(vsubq_f32(vaddq_f32(v10[v7], vmulq_n_f32(vsubq_f32(v10[(int)v7 + 1], v10[v7]), v8.f32[0])), v11), *(float32x2_t *)v8.f32, 1)).f32[0]));
  return 0;
}

uint64_t LiHeEdgeNodeFragment::RenderTile(LiHeEdgeNodeFragment *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v7 = a2[2];
    int32x2_t v8 = a2[10];
    uint64_t v9 = 16 * a2[3].i32[0];
    uint64_t v10 = 16 * a2[11].i32[0];
    float32x4_t v11 = v5;
    do
    {
      if (v6 >= 1)
      {
        uint64_t v12 = 0;
        float32x4_t v13 = v11;
        do
        {
          uint64_t v14 = a2[13].i32[0];
          float32x4_t v15 = vsubq_f32(v13, v5);
          int32x4_t v16 = vaddq_s32(vcvtq_s32_f32(v15), vcltzq_f32(v15));
          v15.i64[0] = vsubq_f32(v15, vcvtq_f32_s32(v16)).u64[0];
          float32x4_t v17 = (float32x4_t *)(*(void *)&a2[12] + 16 * (v16.i32[0] + v16.i32[1] * (int)v14));
          float32x4_t v18 = vaddq_f32(*v17, vmulq_n_f32(vsubq_f32(v17[1], *v17), v15.f32[0]));
          *(float32x4_t *)(*(void *)&v7 + v12) = vmulq_f32(*(float32x4_t *)*((void *)this + 51), vmulq_n_f32(*(float32x4_t *)(*(void *)&v8 + v12), vaddq_f32(v18, vmulq_lane_f32(vsubq_f32(vaddq_f32(v17[v14], vmulq_n_f32(vsubq_f32(v17[(int)v14 + 1], v17[v14]), v15.f32[0])), v18), *(float32x2_t *)v15.f32, 1)).f32[0]));
          float32x4_t v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          v12 += 16;
        }
        while (16 * v6 != v12);
      }
      float32x4_t v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B7E736C0);
      ++v4;
      *(void *)&v7 += v9;
      *(void *)&v8 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeEdgeNodeFragment::GetDOD(LiHeEdgeNodeFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 == 1)
  {
    uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v4, v6);
  }
  else if (a3)
  {
    return 0;
  }
  return v5;
}

uint64_t LiHeEdgeNodeFragment::GetROI(LiHeEdgeNodeFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 == 1)
  {
    uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v4, v6);
  }
  else if (a3)
  {
    return 0;
  }
  return v5;
}

void LiHeEdgeNodeFragment::LiHeEdgeNodeFragment(LiHeEdgeNodeFragment *this)
{
  HGNode3D::HGNode3D(this);
  *uint64_t v1 = &unk_1F112F268;
  operator new();
}

void sub_1B7B747F8(_Unwind_Exception *a1)
{
  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdgeNodeFragment::~LiHeEdgeNodeFragment(LiHeEdgeNodeFragment *this)
{
  *(void *)this = &unk_1F112F268;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40E0EAB150);
  }

  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeEdgeNodeFragment::~LiHeEdgeNodeFragment(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeEdgeNodeFragment::SetParameter(LiHeEdgeNodeFragment *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  int32x2_t v8 = (__n128 *)*((void *)this + 51);
  if (v8->n128_f32[0] == a3.n128_f32[0]
    && v8->n128_f32[1] == a3.n128_f32[0]
    && v8->n128_f32[2] == a3.n128_f32[0]
    && v8->n128_f32[3] == a3.n128_f32[0])
  {
    return 0;
  }
  int32x4_t v9 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  *int32x2_t v8 = (__n128)v9;
  v8[1] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeEdgeNodeFragment::GetParameter(LiHeEdgeNodeFragment *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = v3[4];
    a3[1] = v3[5];
    a3[2] = v3[6];
    float result = v3[7];
    a3[3] = result;
  }
  return result;
}

const char *LiHeEdgeNodeWithXFormFragment::GetProgram(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000038a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = half2(frag._texCoord0.xy)/half2(frag._texCoord0.ww);\n"
             "    r0.xy = r0.xy + half2(hg_Params[5].xy);\n"
             "    r0.xy = r0.xy*half2(hg_Params[5].zw);\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, float2(r0.xy));\n"
             "    r1.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=9186d44e:abc67012:5c761aab:4f124505\n"
             "//SIG=02400000:00000000:00000000:00000000:0000:0006:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000352\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy/frag._texCoord0.ww;\n"
             "    r0.xy = r0.xy + hg_Params[5].xy;\n"
             "    r0.xy = r0.xy*hg_Params[5].zw;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    r1.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=dd607e12:c1554aa4:ccd85c6f:4b9ff255\n"
             "//SIG=02000000:00000000:00000000:00000000:0000:0006:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy/hg_TexCoord0.ww;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal5.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal5.zw;\n"
           "    r0 = texture2D(hg_Texture0, r0.xy);\n"
           "    r1.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r0 = r0*r1.xxxx;\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=015bd0f0:5cc8b24a:3ee1c36b:8556a0be\n"
           "//SIG=02000000:00000000:00000000:00000000:0000:0006:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeEdgeNodeWithXFormFragment::InitProgramDescriptor(LiHeEdgeNodeWithXFormFragment *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeEdgeNodeWithXFormFragment_hgc_visible", "//Metal1.0     \n//LEN=000000028a\n[[ visible ]] FragmentOut LiHeEdgeNodeWithXFormFragment_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord0,\n    float4 texCoord1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy/texCoord0.ww;\n"
    "    r0.xy = r0.xy + hg_Params[5].xy;\n"
    "    r0.xy = r0.xy*hg_Params[5].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r1.x = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).x;\n"
    "    r0 = r0*r1.xxxx;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeEdgeNodeWithXFormFragment");
}

void sub_1B7B74A70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E76910;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B74CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B74D18()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B74D10);
}

void *LiHeEdgeNodeWithXFormFragment::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeEdgeNodeWithXFormFragment [hgc1]");
}

uint64_t LiHeEdgeNodeWithXFormFragment::BindTexture(LiHeEdgeNodeWithXFormFragment *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    HGHandler::TexCoord(a2, 1, 0, 0, 0);
    int v8 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
    uint64_t result = 0;
    if (v8) {
      return result;
    }
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))
    {
      v6.n128_u32[0] = 1.0;
      v7.n128_u32[0] = 1.0;
    }
    else
    {
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v4.n128_f32[0] = (float)*((int *)a2 + 60);
    v5.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 5, v4, v5, v6, v7);
  }
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::Bind(LiHeEdgeNodeWithXFormFragment *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::RenderFragment(uint64_t a1, float32x4_t *a2, int32x2_t *a3)
{
  *(float32x2_t *)v3.f32 = vadd_f32(vcvt_f32_s32(*a3), (float32x2_t)0x3F0000003F000000);
  v3.i64[1] = 0x3F80000000000000;
  float32x4_t v4 = a2[1];
  float32x4_t v5 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 3);
  __n128 v6 = *(float32x4_t **)(a1 + 408);
  float32x4_t v7 = v6[9];
  float32x4_t v8 = v6[10];
  float32x4_t v9 = vminq_f32(vmaxq_f32(vrecpeq_f32(v5), v7), v8);
  float32x4_t v10 = vminq_f32(vmaxq_f32(vmulq_f32(v9, vrecpsq_f32(v5, v9)), v7), v8);
  uint64_t v11 = a3[11].i32[0];
  float32x4_t v12 = vsubq_f32(vmulq_f32(v4, vmulq_f32(v10, vrecpsq_f32(v5, v10))), v3);
  int32x4_t v13 = vaddq_s32(vcvtq_s32_f32(v12), vcltzq_f32(v12));
  v12.i64[0] = vsubq_f32(v12, vcvtq_f32_s32(v13)).u64[0];
  uint64_t v14 = (float32x4_t *)(*(void *)&a3[10] + 16 * (v13.i32[0] + v13.i32[1] * (int)v11));
  float32x4_t v15 = vaddq_f32(*v14, vmulq_n_f32(vsubq_f32(v14[1], *v14), v12.f32[0]));
  float32x4_t v16 = vaddq_f32(v15, vmulq_lane_f32(vsubq_f32(vaddq_f32(v14[v11], vmulq_n_f32(vsubq_f32(v14[(int)v11 + 1], v14[v11]), v12.f32[0])), v15), *(float32x2_t *)v12.f32, 1));
  uint64_t v17 = a3[13].i32[0];
  float32x4_t v18 = vsubq_f32(a2[2], v3);
  int32x4_t v19 = vaddq_s32(vcvtq_s32_f32(v18), vcltzq_f32(v18));
  v18.i64[0] = vsubq_f32(v18, vcvtq_f32_s32(v19)).u64[0];
  float32x4_t v20 = (float32x4_t *)(*(void *)&a3[12] + 16 * (v19.i32[0] + v19.i32[1] * (int)v17));
  float32x4_t v21 = vaddq_f32(*v20, vmulq_n_f32(vsubq_f32(v20[1], *v20), v18.f32[0]));
  *(float32x4_t *)*(void *)&a3[2] = vmulq_f32(*v6, vmulq_n_f32(v16, vaddq_f32(v21, vmulq_lane_f32(vsubq_f32(vaddq_f32(v20[v17], vmulq_n_f32(vsubq_f32(v20[(int)v17 + 1], v20[v17]), v18.f32[0])), v21), *(float32x2_t *)v18.f32, 1)).f32[0]));
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::RenderTile(LiHeEdgeNodeWithXFormFragment *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v7 = a2[2];
    uint64_t v8 = 16 * a2[3].i32[0];
    float32x4_t v9 = v5;
    float32x4_t v10 = v5;
    do
    {
      if (v6 >= 1)
      {
        uint64_t v11 = 0;
        float32x4_t v12 = v9;
        float32x4_t v13 = v10;
        do
        {
          float32x4_t v14 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3);
          float32x4_t v15 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v16 = v15[9];
          float32x4_t v17 = v15[10];
          float32x4_t v18 = vminq_f32(vmaxq_f32(vrecpeq_f32(v14), v16), v17);
          float32x4_t v19 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpsq_f32(v14, v18)), v16), v17);
          uint64_t v20 = a2[11].i32[0];
          float32x4_t v21 = vsubq_f32(vmulq_f32(v12, vmulq_f32(v19, vrecpsq_f32(v14, v19))), v5);
          int32x4_t v22 = vaddq_s32(vcvtq_s32_f32(v21), vcltzq_f32(v21));
          v21.i64[0] = vsubq_f32(v21, vcvtq_f32_s32(v22)).u64[0];
          float32x4_t v23 = (float32x4_t *)(*(void *)&a2[10] + 16 * (v22.i32[0] + v22.i32[1] * (int)v20));
          float32x4_t v24 = vaddq_f32(*v23, vmulq_n_f32(vsubq_f32(v23[1], *v23), v21.f32[0]));
          float32x4_t v25 = vaddq_f32(v24, vmulq_lane_f32(vsubq_f32(vaddq_f32(v23[v20], vmulq_n_f32(vsubq_f32(v23[(int)v20 + 1], v23[v20]), v21.f32[0])), v24), *(float32x2_t *)v21.f32, 1));
          uint64_t v26 = a2[13].i32[0];
          float32x4_t v27 = vsubq_f32(v13, v5);
          int32x4_t v28 = vaddq_s32(vcvtq_s32_f32(v27), vcltzq_f32(v27));
          v27.i64[0] = vsubq_f32(v27, vcvtq_f32_s32(v28)).u64[0];
          float32x4_t v29 = (float32x4_t *)(*(void *)&a2[12] + 16 * (v28.i32[0] + v28.i32[1] * (int)v26));
          float32x4_t v30 = vaddq_f32(*v29, vmulq_n_f32(vsubq_f32(v29[1], *v29), v27.f32[0]));
          *(float32x4_t *)(*(void *)&v7 + v11) = vmulq_f32(*v15, vmulq_n_f32(v25, vaddq_f32(v30, vmulq_lane_f32(vsubq_f32(vaddq_f32(v29[v26], vmulq_n_f32(vsubq_f32(v29[(int)v26 + 1], v29[v26]), v27.f32[0])), v30), *(float32x2_t *)v27.f32, 1)).f32[0]));
          float32x4_t v12 = vaddq_f32(v12, (float32x4_t)xmmword_1B7E736B0);
          float32x4_t v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          v11 += 16;
        }
        while (16 * v6 != v11);
      }
      float32x4_t v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B7E736C0);
      float32x4_t v10 = vaddq_f32(v10, (float32x4_t)xmmword_1B7E736C0);
      ++v4;
      *(void *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::GetDOD(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 == 1)
  {
    uint64_t v16 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v4, v16);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    uint64_t v8 = (const HGTransform *)HGRectGrow(v5, v4, v7);
    uint64_t v10 = v9;
    HGTransform::HGTransform((HGTransform *)v18);
    HGTransform::LoadMatrixf(v18, (float32x2_t *)(*((void *)this + 51) + 16));
    HGTransform::Invert2D((HGTransform *)v18);
    float v12 = HGTransformUtils::MinW(v11);
    *(void *)&v19.int var0 = v10;
    uint64_t DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v18, v8, v19, 0.5, v12);
    uint64_t v15 = HGRectUnion(0, 0, DOD, v14);
    HGTransform::~HGTransform((HGTransform *)v18);
  }
  return v15;
}

void sub_1B7B75478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t LiHeEdgeNodeWithXFormFragment::GetROI(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  unint64_t v5 = *(void *)&a4.var0;
  if (a3 == 1)
  {
    uint64_t v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    uint64_t v15 = v5;
    uint64_t v16 = v4;
    return HGRectGrow(v15, v16, v14);
  }
  if (!a3)
  {
    HGTransform::HGTransform((HGTransform *)v18);
    HGTransform::LoadMatrixf(v18, (float32x2_t *)(*((void *)this + 51) + 16));
    float v8 = HGTransformUtils::MinW(v7);
    *(void *)&v19.int var0 = v4;
    uint64_t ROI = HGTransformUtils::GetROI((HGTransformUtils *)v18, v5, v19, 0.5, v8);
    uint64_t v11 = HGRectUnion(0, 0, ROI, v10);
    uint64_t v13 = v12;
    HGTransform::~HGTransform((HGTransform *)v18);
    uint64_t v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    uint64_t v15 = v11;
    uint64_t v16 = v13;
    return HGRectGrow(v15, v16, v14);
  }
  return 0;
}

void sub_1B7B7559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void LiHeEdgeNodeWithXFormFragment::LiHeEdgeNodeWithXFormFragment(LiHeEdgeNodeWithXFormFragment *this)
{
  HGNode3D::HGNode3D(this);
  *(void *)uint64_t v1 = &unk_1F112F4E0;
  *(_DWORD *)(v1 + 41ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  operator new();
}

void sub_1B7B756A4(_Unwind_Exception *a1)
{
  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdgeNodeWithXFormFragment::~LiHeEdgeNodeWithXFormFragment(LiHeEdgeNodeWithXFormFragment *this)
{
  *(void *)this = &unk_1F112F4E0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C408070C27FLL);
  }

  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeEdgeNodeWithXFormFragment::~LiHeEdgeNodeWithXFormFragment(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeEdgeNodeWithXFormFragment::SetParameter(LiHeEdgeNodeWithXFormFragment *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  float v8 = (__n128 *)*((void *)this + 51);
  if (v8->n128_f32[0] == a3.n128_f32[0]
    && v8->n128_f32[1] == a3.n128_f32[0]
    && v8->n128_f32[2] == a3.n128_f32[0]
    && v8->n128_f32[3] == a3.n128_f32[0])
  {
    return 0;
  }
  int32x4_t v9 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  *float v8 = (__n128)v9;
  v8[11] = a3;
  uint64_t v7 = 1;
  *((_DWORD *)this + 104) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v7;
}

float LiHeEdgeNodeWithXFormFragment::GetParameter(LiHeEdgeNodeWithXFormFragment *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = v3[44];
    a3[1] = v3[45];
    a3[2] = v3[46];
    float result = v3[47];
    a3[3] = result;
  }
  return result;
}

double LiHeEdgeNodeWithXFormFragment::GetOutput(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2)
{
  if (*((_DWORD *)this + 104))
  {
    uint64_t v2 = *((void *)this + 51);
    long long v3 = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(v2 + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = *(unint64_t *)(v2 + 80);
    *(_OWORD *)(*((void *)this + 51) + 32) = (unint64_t)v3;
    *(_OWORD *)(*((void *)this + 51) + 48) = xmmword_1B7E736D0;
    double result = 0.0;
    *(_OWORD *)(*((void *)this + 51) + 64) = xmmword_1B7E734D0;
    *((_DWORD *)this + 104) = 0;
  }
  return result;
}

const char *LiHeGridShader::GetProgram(LiHeGridShader *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000bf3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
             "    const half4 c1 = half4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[8]);\n"
             "    s1.x = 1.00000f / s0.x;\n"
             "    r0.x = 1.00000h / half(hg_Params[1].x);\n"
             "    s2.zw = s1.xx*hg_Params[8].xy;\n"
             "    s2.y = dot(frag._texCoord0, hg_Params[7]);\n"
             "    s1.zw = s2.zw*-s2.yy + hg_Params[7].xy;\n"
             "    s1.zw = s1.xx*s1.zw;\n"
             "    s2.x = dot(frag._texCoord0, hg_Params[6]);\n"
             "    s2.zw = -s2.xx*s2.zw + hg_Params[6].xy;\n"
             "    s2.zw = s2.zw*s1.xx;\n"
             "    s1.yz = abs(s1.wz);\n"
             "    r0.z = dot(half2(s1.yz), 1.00000h);\n"
             "    s1.xy = s1.xx*s2.xy;\n"
             "    s2.xy = s1.xy*float2(r0.xx);\n"
             "    s0.y = 1.00000f / hg_Params[0].x;\n"
             "    s2.xy = fract(s2.xy);\n"
             "    s2.xy = s2.xy - float2(c0.xx);\n"
             "    s2 = abs(s2);\n"
             "    s2.xy = -s2.xy + float2(c0.xx);\n"
             "    s1.xy = s0.yy*s1.xy;\n"
             "    s2.z = dot(s2.zw, 1.00000f);\n"
             "    s2.w = float(r0.z);\n"
             "    s1.zw = s2.zw*float2(r0.xx);\n"
             "    s1.zw = s1.zw*float2(c0.yy) + float2(c0.zz);\n"
             "    s1.zw = s2.zw*s1.zw;\n"
             "    s2.xy = s2.xy*-hg_Params[1].xx;\n"
             "    s1.zw = 1.00000f / s1.zw;\n"
             "    s1.zw = clamp(s2.xy*s1.zw + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    s2.xy = s2.zw*float2(r0.xx) + float2(c0.ww);\n"
             "    s2.xy = clamp(s2.xy*float2(c1.xx), 0.00000f, 1.00000f);\n"
             "    r0.xy = mix(half2(s1.zw), c0.zz, half2(s2.xy));\n"
             "    s2.x = 1.00000f / s2.z;\n"
             "    s2.y = 1.00000f / float(r0.z);\n"
             "    s2.zw = s2.zw*s0.yy + float2(c0.ww);\n"
             "    s1.zw = fract(s1.xy);\n"
             "    r0.zw = half2(s2.xy)*half2(hg_Params[1].xx);\n"
             "    r0.zw = clamp(r0.zw*c1.yy, 0.00000h, 1.00000h);\n"
             "    r0.xy = r0.xy*r0.zw;\n"
             "    r0.zw = half2(s2.xy)*half2(hg_Params[0].xx);\n"
             "    s1.zw = s1.zw - float2(c0.xx);\n"
             "    s1.zw = -fabs(s1.zw) + float2(c0.xx);\n"
             "    s1.zw = s1.zw*-hg_Params[0].xx;\n"
             "    s2.xy = clamp(s1.zw*s2.xy + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    s2.zw = clamp(s2.zw*float2(c1.xx), 0.00000f, 1.00000f);\n"
             "    s2.xy = mix(s2.xy, float2(c0.zz), s2.zw);\n"
             "    r0.zw = clamp(r0.zw*c1.yy, 0.00000h, 1.00000h);\n"
             "    s2.xy = s2.xy*float2(r0.zw);\n"
             "    s2.z = fmax(float(r0.x), float(r0.y));\n"
             "    s3.xy = fmax(s2.xy, float2(c1.zz));\n"
             "    s3.zw = fabs(s1.xy) + float2(c0.ww);\n"
             "    s2.x = fmax(s2.z, float(c1.z));\n"
             "    s0.y = fmax(s3.x, s3.y);\n"
             "    s2.z = -s0.y*float(c0.y) + s2.x;\n"
             "    s0.z = fmax(s2.z, float(c1.z));\n"
             "    s3.zw = clamp(s3.zw + s3.zw, 0.00000f, 1.00000f);\n"
             "    s1 = mix(hg_Params[4], hg_Params[2], s3.wwww);\n"
             "    s2 = mix(hg_Params[5], hg_Params[2], s3.zzzz);\n"
             "    s2 = s3.xxxx*s2;\n"
             "    s1 = s3.yyyy*s1;\n"
             "    s2 = fmax(s2, s1);\n"
             "    s3 = s0.zzzz*hg_Params[3];\n"
             "    s1.x = float(c0.z) - s0.y;\n"
             "    s2 = s3*s1.xxxx + s2;\n"
             "    s2.xyz = pow(s2.xyz, hg_Params[10].xyz);\n"
             "    s0.x = float(s0.x >= float(c1.z));\n"
             "    output.color0 = s2*s0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ed8ec89c:8d8bad1c:31b22599:a4072085\n"
             "//SIG=00400000:00000000:00000000:00000000:0002:000b:0005:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000aeb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
             "    const float4 c1 = float4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[8]);\n"
             "    r1.x = 1.00000f / r0.x;\n"
             "    r2.x = 1.00000f / hg_Params[1].x;\n"
             "    r3.zw = r1.xx*hg_Params[8].xy;\n"
             "    r3.y = dot(frag._texCoord0, hg_Params[7]);\n"
             "    r1.zw = r3.zw*-r3.yy + hg_Params[7].xy;\n"
             "    r1.zw = r1.xx*r1.zw;\n"
             "    r3.x = dot(frag._texCoord0, hg_Params[6]);\n"
             "    r3.zw = -r3.xx*r3.zw + hg_Params[6].xy;\n"
             "    r3.zw = r3.zw*r1.xx;\n"
             "    r1.yz = abs(r1.wz);\n"
             "    r2.z = dot(r1.yz, 1.00000f);\n"
             "    r1.xy = r1.xx*r3.xy;\n"
             "    r3.xy = r1.xy*r2.xx;\n"
             "    r0.y = 1.00000f / hg_Params[0].x;\n"
             "    r3.xy = fract(r3.xy);\n"
             "    r3.xy = r3.xy - c0.xx;\n"
             "    r3 = abs(r3);\n"
             "    r3.xy = -r3.xy + c0.xx;\n"
             "    r1.xy = r0.yy*r1.xy;\n"
             "    r3.z = dot(r3.zw, 1.00000f);\n"
             "    r3.w = r2.z;\n"
             "    r1.zw = r3.zw*r2.xx;\n"
             "    r1.zw = r1.zw*c0.yy + c0.zz;\n"
             "    r1.zw = r3.zw*r1.zw;\n"
             "    r3.xy = r3.xy*-hg_Params[1].xx;\n"
             "    r1.zw = 1.00000f / r1.zw;\n"
             "    r1.zw = clamp(r3.xy*r1.zw + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    r3.xy = r3.zw*r2.xx + c0.ww;\n"
             "    r3.xy = clamp(r3.xy*c1.xx, 0.00000f, 1.00000f);\n"
             "    r2.xy = mix(r1.zw, c0.zz, r3.xy);\n"
             "    r3.x = 1.00000f / r3.z;\n"
             "    r3.y = 1.00000f / r2.z;\n"
             "    r3.zw = r3.zw*r0.yy + c0.ww;\n"
             "    r1.zw = fract(r1.xy);\n"
             "    r2.zw = r3.xy*hg_Params[1].xx;\n"
             "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
             "    r2.xy = r2.xy*r2.zw;\n"
             "    r2.zw = r3.xy*hg_Params[0].xx;\n"
             "    r1.zw = r1.zw - c0.xx;\n"
             "    r1.zw = -fabs(r1.zw) + c0.xx;\n"
             "    r1.zw = r1.zw*-hg_Params[0].xx;\n"
             "    r3.xy = clamp(r1.zw*r3.xy + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    r3.zw = clamp(r3.zw*c1.xx, 0.00000f, 1.00000f);\n"
             "    r3.xy = mix(r3.xy, c0.zz, r3.zw);\n"
             "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
             "    r3.xy = r3.xy*r2.zw;\n"
             "    r3.z = fmax(r2.x, r2.y);\n"
             "    r2.xy = fmax(r3.xy, c1.zz);\n"
             "    r2.zw = fabs(r1.xy) + c0.ww;\n"
             "    r3.x = fmax(r3.z, c1.z);\n"
             "    r0.y = fmax(r2.x, r2.y);\n"
             "    r3.z = -r0.y*c0.y + r3.x;\n"
             "    r0.z = fmax(r3.z, c1.z);\n"
             "    r2.zw = clamp(r2.zw + r2.zw, 0.00000f, 1.00000f);\n"
             "    r1 = mix(hg_Params[4], hg_Params[2], r2.wwww);\n"
             "    r3 = mix(hg_Params[5], hg_Params[2], r2.zzzz);\n"
             "    r3 = r2.xxxx*r3;\n"
             "    r1 = r2.yyyy*r1;\n"
             "    r3 = fmax(r3, r1);\n"
             "    r2 = r0.zzzz*hg_Params[3];\n"
             "    r1.x = c0.z - r0.y;\n"
             "    r3 = r2*r1.xxxx + r3;\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[10].xyz);\n"
             "    r0.x = float(r0.x >= c1.z);\n"
             "    output.color0 = r3*r0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=686d35cb:f7c64bbf:a273928a:e418b585\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:000b:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000cfa\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
           "    const highp vec4 c1 = vec4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal8);\n"
           "    r1.x = 1.00000 / r0.x;\n"
           "    r2.x = 1.00000 / hg_ProgramLocal1.x;\n"
           "    r3.zw = r1.xx*hg_ProgramLocal8.xy;\n"
           "    r3.y = dot(hg_TexCoord0, hg_ProgramLocal7);\n"
           "    r1.zw = r3.zw*-r3.yy + hg_ProgramLocal7.xy;\n"
           "    r1.zw = r1.xx*r1.zw;\n"
           "    r3.x = dot(hg_TexCoord0, hg_ProgramLocal6);\n"
           "    r3.zw = -r3.xx*r3.zw + hg_ProgramLocal6.xy;\n"
           "    r3.zw = r3.zw*r1.xx;\n"
           "    r1.yz = abs(r1.wz);\n"
           "    r2.z = dot(r1.yz, vec2(1.00000));\n"
           "    r1.xy = r1.xx*r3.xy;\n"
           "    r3.xy = r1.xy*r2.xx;\n"
           "    r0.y = 1.00000 / hg_ProgramLocal0.x;\n"
           "    r3.xy = fract(r3.xy);\n"
           "    r3.xy = r3.xy - c0.xx;\n"
           "    r3 = abs(r3);\n"
           "    r3.xy = -r3.xy + c0.xx;\n"
           "    r1.xy = r0.yy*r1.xy;\n"
           "    r3.z = dot(r3.zw, vec2(1.00000));\n"
           "    r3.w = r2.z;\n"
           "    r1.zw = r3.zw*r2.xx;\n"
           "    r1.zw = r1.zw*c0.yy + c0.zz;\n"
           "    r1.zw = r3.zw*r1.zw;\n"
           "    r3.xy = r3.xy*-hg_ProgramLocal1.xx;\n"
           "    r1.zw = vec2(1.00000) / r1.zw;\n"
           "    r1.zw = clamp(r3.xy*r1.zw + hg_ProgramLocal9.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xy = r3.zw*r2.xx + c0.ww;\n"
           "    r3.xy = clamp(r3.xy*c1.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r2.xy = mix(r1.zw, c0.zz, r3.xy);\n"
           "    r3.x = 1.00000 / r3.z;\n"
           "    r3.y = 1.00000 / r2.z;\n"
           "    r3.zw = r3.zw*r0.yy + c0.ww;\n"
           "    r1.zw = fract(r1.xy);\n"
           "    r2.zw = r3.xy*hg_ProgramLocal1.xx;\n"
           "    r2.zw = clamp(r2.zw*c1.yy, vec2(0.00000), vec2(1.00000));\n"
           "    r2.xy = r2.xy*r2.zw;\n"
           "    r2.zw = r3.xy*hg_ProgramLocal0.xx;\n"
           "    r1.zw = r1.zw - c0.xx;\n"
           "    r1.zw = -abs(r1.zw) + c0.xx;\n"
           "    r1.zw = r1.zw*-hg_ProgramLocal0.xx;\n"
           "    r3.xy = clamp(r1.zw*r3.xy + hg_ProgramLocal9.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r3.zw = clamp(r3.zw*c1.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xy = mix(r3.xy, c0.zz, r3.zw);\n"
           "    r2.zw = clamp(r2.zw*c1.yy, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xy = r3.xy*r2.zw;\n"
           "    r3.z = max(r2.x, r2.y);\n"
           "    r2.xy = max(r3.xy, c1.zz);\n"
           "    r2.zw = abs(r1.xy) + c0.ww;\n"
           "    r3.x = max(r3.z, c1.z);\n"
           "    r0.y = max(r2.x, r2.y);\n"
           "    r3.z = -r0.y*c0.y + r3.x;\n"
           "    r0.z = max(r3.z, c1.z);\n"
           "    r2.zw = clamp(r2.zw + r2.zw, vec2(0.00000), vec2(1.00000));\n"
           "    r1 = mix(hg_ProgramLocal4, hg_ProgramLocal2, r2.wwww);\n"
           "    r3 = mix(hg_ProgramLocal5, hg_ProgramLocal2, r2.zzzz);\n"
           "    r3 = r2.xxxx*r3;\n"
           "    r1 = r2.yyyy*r1;\n"
           "    r3 = max(r3, r1);\n"
           "    r2 = r0.zzzz*hg_ProgramLocal3;\n"
           "    r1.x = c0.z - r0.y;\n"
           "    r3 = r2*r1.xxxx + r3;\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal10.xyz);\n"
           "    r0.x = float(r0.x >= c1.z);\n"
           "    gl_FragColor = r3*r0.xxxx;\n"
           "}\n"
           "//MD5=545c6776:d003218f:e4cdaa44:c07590d0\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:000b:0004:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void LiHeGridShader::InitProgramDescriptor(LiHeGridShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeGridShader_hgc_visible", "//Metal1.0     \n//LEN=0000000a42\n[[ visible ]] FragmentOut LiHeGridShader_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
    "    const float4 c1 = float4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[8]);\n"
    "    r1.x = 1.00000f / r0.x;\n"
    "    r2.x = 1.00000f / hg_Params[1].x;\n"
    "    r3.zw = r1.xx*hg_Params[8].xy;\n"
    "    r3.y = dot(texCoord0, hg_Params[7]);\n"
    "    r1.zw = r3.zw*-r3.yy + hg_Params[7].xy;\n"
    "    r1.zw = r1.xx*r1.zw;\n"
    "    r3.x = dot(texCoord0, hg_Params[6]);\n"
    "    r3.zw = -r3.xx*r3.zw + hg_Params[6].xy;\n"
    "    r3.zw = r3.zw*r1.xx;\n"
    "    r1.yz = abs(r1.wz);\n"
    "    r2.z = dot(r1.yz, 1.00000f);\n"
    "    r1.xy = r1.xx*r3.xy;\n"
    "    r3.xy = r1.xy*r2.xx;\n"
    "    r0.y = 1.00000f / hg_Params[0].x;\n"
    "    r3.xy = fract(r3.xy);\n"
    "    r3.xy = r3.xy - c0.xx;\n"
    "    r3 = abs(r3);\n"
    "    r3.xy = -r3.xy + c0.xx;\n"
    "    r1.xy = r0.yy*r1.xy;\n"
    "    r3.z = dot(r3.zw, 1.00000f);\n"
    "    r3.w = r2.z;\n"
    "    r1.zw = r3.zw*r2.xx;\n"
    "    r1.zw = r1.zw*c0.yy + c0.zz;\n"
    "    r1.zw = r3.zw*r1.zw;\n"
    "    r3.xy = r3.xy*-hg_Params[1].xx;\n"
    "    r1.zw = 1.00000f / r1.zw;\n"
    "    r1.zw = clamp(r3.xy*r1.zw + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
    "    r3.xy = r3.zw*r2.xx + c0.ww;\n"
    "    r3.xy = clamp(r3.xy*c1.xx, 0.00000f, 1.00000f);\n"
    "    r2.xy = mix(r1.zw, c0.zz, r3.xy);\n"
    "    r3.x = 1.00000f / r3.z;\n"
    "    r3.y = 1.00000f / r2.z;\n"
    "    r3.zw = r3.zw*r0.yy + c0.ww;\n"
    "    r1.zw = fract(r1.xy);\n"
    "    r2.zw = r3.xy*hg_Params[1].xx;\n"
    "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
    "    r2.xy = r2.xy*r2.zw;\n"
    "    r2.zw = r3.xy*hg_Params[0].xx;\n"
    "    r1.zw = r1.zw - c0.xx;\n"
    "    r1.zw = -fabs(r1.zw) + c0.xx;\n"
    "    r1.zw = r1.zw*-hg_Params[0].xx;\n"
    "    r3.xy = clamp(r1.zw*r3.xy + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
    "    r3.zw = clamp(r3.zw*c1.xx, 0.00000f, 1.00000f);\n"
    "    r3.xy = mix(r3.xy, c0.zz, r3.zw);\n"
    "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
    "    r3.xy = r3.xy*r2.zw;\n"
    "    r3.z = fmax(r2.x, r2.y);\n"
    "    r2.xy = fmax(r3.xy, c1.zz);\n"
    "    r2.zw = fabs(r1.xy) + c0.ww;\n"
    "    r3.x = fmax(r3.z, c1.z);\n"
    "    r0.y = fmax(r2.x, r2.y);\n"
    "    r3.z = -r0.y*c0.y + r3.x;\n"
    "    r0.z = fmax(r3.z, c1.z);\n"
    "    r2.zw = clamp(r2.zw + r2.zw, 0.00000f, 1.00000f);\n"
    "    r1 = mix(hg_Params[4], hg_Params[2], r2.wwww);\n"
    "    r3 = mix(hg_Params[5], hg_Params[2], r2.zzzz);\n"
    "    r3 = r2.xxxx*r3;\n"
    "    r1 = r2.yyyy*r1;\n"
    "    r3 = fmax(r3, r1);\n"
    "    r2 = r0.zzzz*hg_Params[3];\n"
    "    r1.x = c0.z - r0.y;\n"
    "    r3 = r2*r1.xxxx + r3;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[10].xyz);\n"
    "    r0.x = float(r0.x >= c1.z);\n"
    "    output.color0 = r3*r0.xxxx;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeGridShader");
}

void sub_1B7B7597C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75800;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B75A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B75ABC()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B75AB4);
}

void *LiHeGridShader::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeGridShader [hgc1]");
}

uint64_t LiHeGridShader::BindTexture(LiHeGridShader *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeGridShader::Bind(LiHeGridShader *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeGridShader::RenderTile(LiHeGridShader *this, int32x2_t *a2)
{
  int v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = a2[1].i32[0] - a2->i32[0];
    int32x2_t v5 = a2[2];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    uint64_t v7 = 16 * a2[3].i32[0];
    do
    {
      if (v4 >= 1)
      {
        uint64_t v8 = 0;
        float32x4_t v9 = v6;
        do
        {
          uint64_t v10 = (_OWORD *)*((void *)this + 51);
          float32x4_t v11 = *((float32x4_t *)v10 + 8);
          long long v12 = v10[9];
          float32x4_t v13 = vmulq_f32(v9, v11);
          float32x4_t v14 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          float32x4_t v15 = vaddq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL));
          float32x4_t v17 = *((float32x4_t *)v10 + 10);
          float32x4_t v16 = *((float32x4_t *)v10 + 11);
          float32x4_t v19 = *((float32x4_t *)v10 + 12);
          float32x4_t v18 = *((float32x4_t *)v10 + 13);
          float32x4_t v20 = vminq_f32(vmaxq_f32(vrecpeq_f32(v15), v16), v19);
          float32x4_t v21 = vminq_f32(vmaxq_f32(vmulq_f32(v20, vrecpsq_f32(v15, v20)), v16), v19);
          float32x4_t v22 = *((float32x4_t *)v10 + 1);
          float32x4_t v23 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v22), v18), v16), v19);
          v21.i64[0] = vmulq_f32(v21, vrecpsq_f32(v15, v21)).u64[0];
          float32x4_t v25 = *((float32x4_t *)v10 + 6);
          float32x4_t v24 = *((float32x4_t *)v10 + 7);
          int8x16_t v26 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 0);
          float32x4_t v27 = vmulq_f32(v9, v24);
          float32x4_t v28 = vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL));
          int8x16_t v29 = (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_lane_s64(v11.i64[0], 0), v21.f32[0]);
          v28.i64[0] = vaddq_f32(v28, (float32x4_t)vdupq_laneq_s64((int64x2_t)v28, 1)).u64[0];
          v28.i64[1] = v29.i64[1];
          *(float32x2_t *)v29.i8 = vsub_f32(*(float32x2_t *)v24.f32, vmul_lane_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)v28.f32, 1));
          float32x4_t v30 = vmulq_f32(v9, v25);
          float32x4_t v31 = vaddq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL));
          float32x4_t v32 = vaddq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL));
          int8x16_t v33 = *((int8x16_t *)v10 + 14);
          int8x16_t v34 = *((int8x16_t *)v10 + 15);
          float32x4_t v35 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v32, (int8x16_t)v28);
          float32x4_t v36 = vmulq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v25.i64[0], 0), vmulq_n_f32(v35, v35.f32[0])), v21.f32[0]);
          *(float32x2_t *)&v21.u32[2] = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)v29.i8);
          v23.i64[0] = vmulq_f32(v23, vrecpsq_f32(v22, v23)).u64[0];
          *(int8x8_t *)v26.i8 = vqtbl1_s8((int8x16_t)v21, *(int8x8_t *)v34.i8);
          v35.i64[1] = v36.i64[1];
          v26.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v21, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
          float32x4_t v37 = *((float32x4_t *)v10 + 17);
          float32x4_t v38 = (float32x4_t)vandq_s8(*((int8x16_t *)v10 + 16), v26);
          float32x4_t v39 = vmulq_n_f32(v35, v38.f32[0]);
          float32x4_t v40 = vmulq_n_f32(v39, v23.f32[0]);
          v32.i64[0] = v40.i64[0];
          v32.i64[1] = v36.i64[1];
          float32x4_t v41 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v10);
          float32x4_t v42 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v41)), v16), v19);
          int64x2_t v43 = (int64x2_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v38, 0xCuLL), v38);
          float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
          float32x4_t v45 = vsubq_f32(v40, vsubq_f32(v44, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v44, v32), (int8x16_t)v37, (int8x16_t)0)));
          float32x4_t v47 = *((float32x4_t *)v10 + 18);
          int8x16_t v46 = *((int8x16_t *)v10 + 19);
          v45.i64[0] = vsubq_f32(v45, v47).u64[0];
          v45.i64[1] = v36.i64[1];
          int8x16_t v48 = (int8x16_t)vmulq_f32(v42, vrecpsq_f32(v41, v42));
          float32x4_t v49 = vabsq_f32(v45);
          v41.i64[0] = vsubq_f32(v47, v49).u64[0];
          v41.i64[1] = vaddq_f32(v49, (float32x4_t)vrev64q_s32(*(int32x4_t *)&v49)).i64[1];
          v42.i64[0] = v23.i64[0];
          v42.i64[1] = vdupq_laneq_s64(v43, 1).u64[0];
          v48.i64[0] = vbslq_s8(v33, (int8x16_t)v15, v48).u64[0];
          float32x4_t v50 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vrev64q_s32((int32x4_t)v42), (int8x16_t)v41);
          float32x4_t v51 = vmulq_lane_f32(v39, *(float32x2_t *)v48.i8, 1);
          v42.i64[0] = v51.i64[0];
          v42.i64[1] = vmulq_f32(vaddq_f32(v37, vmulq_f32(v18, vmulq_n_f32(v50, *(float *)&v23))), v50).i64[1];
          float32x4_t v52 = vminq_f32(vmaxq_f32(vrecpeq_f32(v42), v16), v19);
          float32x4_t v53 = vminq_f32(vmaxq_f32(vmulq_f32(v52, vrecpsq_f32(v42, v52)), v16), v19);
          float32x4_t v54 = vmulq_f32(v53, vrecpsq_f32(v42, v53));
          v53.i64[0] = v51.i64[0];
          v53.i64[1] = v54.i64[1];
          float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v12, 0);
          float32x4_t v56 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)vmulq_f32(vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0)), v50), 8uLL);
          float32x4_t v57 = vmaxq_f32(vaddq_f32(v55, vmulq_f32(v53, v56)), v47);
          float32x4_t v58 = vmulq_n_f32(v56, v23.f32[0]);
          float32x4_t v60 = *((float32x4_t *)v10 + 20);
          float32x4_t v59 = *((float32x4_t *)v10 + 21);
          int64x2_t v61 = (int64x2_t)vminq_f32(v57, v37);
          v58.i64[0] = vaddq_f32(v60, v58).u64[0];
          v58.i64[1] = v50.i64[1];
          float32x4_t v62 = *((float32x4_t *)v10 + 22);
          float32x4_t v63 = (float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v51, 8uLL);
          float32x4_t v64 = vminq_f32(vmaxq_f32(vmulq_f32(v59, v58), v62), v37);
          float32x4_t v65 = vaddq_f32((float32x4_t)vdupq_laneq_s64(v61, 1), vmulq_f32(vsubq_f32(v37, v63), v64));
          float32x4_t v66 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v64, 8uLL);
          float32x4_t v67 = vminq_f32(vmaxq_f32(vrecpeq_f32(v66), v16), v19);
          float32x4_t v68 = vminq_f32(vmaxq_f32(vmulq_f32(v67, vrecpsq_f32(v66, v67)), v16), v19);
          *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), 4uLL);
          v69.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v65, 0xCuLL).u64[0];
          v66.i64[0] = vmulq_f32(v68, vrecpsq_f32(v66, v68)).u64[0];
          float32x4_t v70 = vminq_f32(vmaxq_f32(vrecpeq_f32(v69), v16), v19);
          v66.i64[1] = v50.i64[1];
          float32x4_t v71 = vminq_f32(vmaxq_f32(vmulq_f32(v70, vrecpsq_f32(v69, v70)), v16), v19);
          float32x4_t v72 = (float32x4_t)vbslq_s8(*((int8x16_t *)v10 + 23), (int8x16_t)vmulq_f32(v71, vrecpsq_f32(v69, v71)), (int8x16_t)v66);
          float32x4_t v73 = vmulq_lane_f32(v72, *(float32x2_t *)v48.i8, 1);
          float32x4_t v74 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
          int8x16_t v75 = (int8x16_t)vaddq_f32(v62, v73);
          float32x4_t v76 = vsubq_f32(v63, vsubq_f32(v74, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v74, v63), (int8x16_t)v59, (int8x16_t)0)));
          float32x4_t v77 = (float32x4_t)vextq_s8(v75, (int8x16_t)v72, 8uLL);
          v72.i64[1] = v75.i64[1];
          v50.i64[0] = v65.i64[0];
          v50.i64[1] = vmulq_n_f32(v77, *(float *)&v22).i64[1];
          float32x4_t v78 = *((float32x4_t *)v10 + 24);
          float32x4_t v79 = *((float32x4_t *)v10 + 25);
          float32x4_t v80 = vmulq_n_f32(v77, COERCE_FLOAT(*v10));
          float32x4_t v81 = vsubq_f32(v76, v79);
          float32x4_t v82 = *((float32x4_t *)v10 + 27);
          int8x16_t v83 = (int8x16_t)vmulq_f32(v65, (float32x4_t)vdupq_laneq_s64((int64x2_t)vminq_f32(vmaxq_f32(vmulq_f32(v78, v50), v60), v59), 1));
          *(int32x2_t *)&v55.u32[2] = vdup_lane_s32(*(int32x2_t *)&v12, 1);
          float32x4_t v84 = vmaxq_f32(vaddq_f32(v55, vmulq_f32(v72, (float32x4_t)vextq_s8((int8x16_t)vmulq_f32(vaddq_f32(v79, (float32x4_t)vorrq_s8(*((int8x16_t *)v10 + 26), (int8x16_t)v81)), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10, 0))), (int8x16_t)v51, 8uLL))), v79);
          v72.i64[0] = v83.i64[0];
          float32x4_t v85 = vminq_f32(v84, v78);
          v81.i64[0] = v85.i64[0];
          v81.i64[1] = v75.i64[1];
          v72.i64[1] = v80.i64[1];
          float32x4_t v86 = vminq_f32(vmaxq_f32(vmulq_f32(v78, v72), v60), v59);
          v72.i64[0] = vextq_s8((int8x16_t)v86, v83, 0xCuLL).u64[0];
          *(int8x8_t *)&v72.u32[2] = vext_s8(*(int8x8_t *)v83.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), 4uLL);
          float32x4_t v87 = (float32x4_t)vextq_s8((int8x16_t)v86, v83, 8uLL);
          v86.i64[0] = vmulq_f32(v87, vaddq_f32(v85, vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)vminq_f32(vmaxq_f32(vmulq_f32(v82, v81), v60), v59), 1), vsubq_f32(v82, v85)))).u64[0];
          v86.i64[1] = vmaxq_f32(v87, v72).i64[1];
          float32x4_t v89 = *((float32x4_t *)v10 + 28);
          float32x4_t v88 = *((float32x4_t *)v10 + 29);
          int64x2_t v90 = (int64x2_t)vsubq_f32(vabsq_f32((float32x4_t)vdupq_lane_s64(v51.i64[0], 0)), v89);
          v81.i64[0] = vmaxq_f32(v86, v79).u64[0];
          v51.i64[0] = v81.i64[0];
          v51.i64[1] = v90.i64[1];
          float32x4_t v91 = vminq_f32(vmaxq_f32(vaddq_f32(v51, v51), v60), v59);
          v81.i64[1] = vdupq_laneq_s64(v90, 1).u64[0];
          v15.i64[0] = vbslq_s8(v33, (int8x16_t)v15, (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v81), v51)).u64[0];
          float32x4_t v92 = vmaxq_f32(vsubq_f32(vmaxq_f32(v86, (float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), vmulq_lane_f32(v18, *(float32x2_t *)v15.f32, 1)), v60);
          int8x16_t v93 = (int8x16_t)vaddq_f32(vmaxq_f32(vmulq_n_f32(vaddq_f32(*((float32x4_t *)v10 + 5), vmulq_laneq_f32(vsubq_f32(*((float32x4_t *)v10 + 2), *((float32x4_t *)v10 + 5)), v91, 2)), v81.f32[0]), vmulq_lane_f32(vaddq_f32(*((float32x4_t *)v10 + 4), vmulq_laneq_f32(vsubq_f32(*((float32x4_t *)v10 + 2), *((float32x4_t *)v10 + 4)), v91, 3)), *(float32x2_t *)v81.f32, 1)), vmulq_n_f32(
                               vmulq_laneq_f32(*((float32x4_t *)v10 + 3), v92, 2),
                               vsubq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)).f32[0]));
          float32x4_t v94 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v37, (int8x16_t)vceqq_f32(v17, v88)), v88), (int8x16_t)v37, v93);
          float32x4_t v95 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)v10 + 30), (int8x16_t)v94), (int8x16_t)v37);
          float32x4_t v96 = (float32x4_t)vandq_s8((int8x16_t)v37, (int8x16_t)vcgtq_f32(v95, *((float32x4_t *)v10 + 34)));
          float32x4_t v97 = vsubq_f32(vsubq_f32(v95, v37), vmulq_f32(vmulq_f32(*((float32x4_t *)v10 + 35), v96), v95));
          float32x4_t v98 = vmulq_f32(v97, v97);
          float32x4_t v99 = vmaxq_f32(vmulq_f32(v17, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)v10 + 32), (int8x16_t)vcgtq_f32(*((float32x4_t *)v10 + 31), v94))), *((float32x4_t *)v10 + 33)), v96), vmulq_f32(v97, vaddq_f32(*((float32x4_t *)v10 + 42), vmulq_f32(v97, vaddq_f32(
                              vaddq_f32(*((float32x4_t *)v10 + 40), vmulq_f32(*((float32x4_t *)v10 + 41), v97)),
                              vmulq_f32(v98, vaddq_f32(vaddq_f32(*((float32x4_t *)v10 + 36), vmulq_f32(*((float32x4_t *)v10 + 37), v97)), vmulq_f32(v98, vaddq_f32(*((float32x4_t *)v10 + 38), vmulq_f32(*((float32x4_t *)v10 + 39), v97))))))))))), *((float32x4_t *)v10 + 43));
          v15.i64[1] = v92.i64[1];
          float32x4_t v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
          float32x4_t v101 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v37, (int8x16_t)vcgtq_f32(v100, v99)));
          float32x4_t v102 = vsubq_f32(v99, v101);
          *(float32x4_t *)(*(void *)&v5 + v8) = vmulq_n_f32((float32x4_t)vbslq_s8(v46, v93, (int8x16_t)vmulq_f32(vaddq_f32(v37, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)v10 + 48), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)v10 + 46), vmulq_f32(*((float32x4_t *)v10 + 47), v102)), vmulq_f32(
                                                                                            vmulq_f32(v102, v102),
                                                                                            vaddq_f32(*((float32x4_t *)v10 + 44), vmulq_f32(*((float32x4_t *)v10 + 45), v102)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)v10 + 49), vcvtq_s32_f32(v101)), 0x17uLL))), *(float *)vandq_s8((int8x16_t)v82, (int8x16_t)vcgeq_f32(v15, v88)).i32);
          float32x4_t v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B7E736B0);
          v8 += 16;
        }
        while (16 * v4 != v8);
      }
      float32x4_t v6 = vaddq_f32(v6, (float32x4_t)xmmword_1B7E736C0);
      ++v3;
      *(void *)&v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeGridShader::GetDOD(LiHeGridShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4 = &HGRectInfinite;
  if (a3) {
    int v4 = &HGRectNull;
  }
  return *(void *)v4;
}

uint64_t LiHeGridShader::GetROI(LiHeGridShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeGridShader::LiHeGridShader(LiHeGridShader *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F112F758;
  operator new();
}

void sub_1B7B76434(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeGridShader::~LiHeGridShader(HGNode *this)
{
  *(void *)this = &unk_1F112F758;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40C9D4F132);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeGridShader::~LiHeGridShader(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeGridShader::SetParameter(LiHeGridShader *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      float *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      PCSharedCount v7[3] = a6;
      goto LABEL_58;
    case 1:
      float32x4_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_58;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_58;
    case 3:
      float32x4_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_58;
    case 4:
      long long v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      double v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      void v12[19] = a6;
      goto LABEL_58;
    case 5:
      float32x4_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_58;
    case 6:
      float32x4_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_58;
    case 7:
      float32x4_t v15 = (float *)*((void *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6) {
        return 0;
      }
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_58;
    case 8:
      float32x4_t v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_58;
    case 9:
      float32x4_t v17 = (float *)*((void *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6) {
        return 0;
      }
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_58;
    case 10:
      float32x4_t v18 = (__n128 *)*((void *)this + 51);
      if (v18[10].n128_f32[0] == a3.n128_f32[0]
        && v18[10].n128_f32[1] == a3.n128_f32[0]
        && v18[10].n128_f32[2] == a3.n128_f32[0]
        && v18[10].n128_f32[3] == 0.0)
      {
        return 0;
      }
      int32x4_t v19 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v19.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v18[10] = (__n128)v19;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v18[50] = a3;
LABEL_58:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeGridShader::GetParameter(LiHeGridShader *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      int v4 = v3 + 3;
      goto LABEL_13;
    case 1:
      int32x2_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_13;
    case 2:
      float32x4_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      int v4 = v6 + 11;
      goto LABEL_13;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      int v4 = v7 + 15;
      goto LABEL_13;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      int v4 = v8 + 19;
      goto LABEL_13;
    case 5:
      float32x4_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      int v4 = v9 + 23;
      goto LABEL_13;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      int v4 = v10 + 27;
      goto LABEL_13;
    case 7:
      float32x4_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      int v4 = v11 + 31;
      goto LABEL_13;
    case 8:
      long long v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      int v4 = v12 + 35;
      goto LABEL_13;
    case 9:
      float32x4_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      int v4 = v13 + 39;
      goto LABEL_13;
    case 10:
      float32x4_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[200];
      a3[1] = v14[201];
      a3[2] = v14[202];
      int v4 = v14 + 203;
LABEL_13:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double LiHeGridShader::State::State(LiHeGridShader::State *this)
{
  double result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)&long long v2 = 0x80000000800000;
  *((void *)&v2 + 1) = 0x80000000800000;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 11) = v2;
  *((int32x4_t *)this + 12) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 13) = xmmword_1B837EF60;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = xmmword_1B7E751A0;
  *((_OWORD *)this + 15) = xmmword_1B837EF70;
  __asm { FMOV            V2.4S, #1.0 }
  *((_OWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B837EF80;
  *((_OWORD *)this + 17) = _Q2;
  *((_OWORD *)this + 18) = xmmword_1B7E76310;
  *((_OWORD *)this + 19) = xmmword_1B7E752F0;
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B7E778E0;
  *((_OWORD *)this + 21) = xmmword_1B837EF90;
  *((_OWORD *)this + 22) = xmmword_1B7E77170;
  *((_OWORD *)this + 23) = xmmword_1B7E75360;
  *((_OWORD *)this + 24) = xmmword_1B837EFA0;
  *((_OWORD *)this + 25) = xmmword_1B7E77460;
  *((_OWORD *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B837EFB0;
  *((_OWORD *)this + 27) = xmmword_1B837EFC0;
  *((_OWORD *)this + 28) = xmmword_1B837EFD0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B7E75900;
  *((_OWORD *)this + 31) = xmmword_1B7E75910;
  *((_OWORD *)this + 32) = xmmword_1B7E75920;
  *((_OWORD *)this + 33) = xmmword_1B7E75930;
  *((_OWORD *)this + 34) = xmmword_1B7E75940;
  *((_OWORD *)this + 35) = xmmword_1B7E75840;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B8348C50;
  *((_OWORD *)this + 37) = xmmword_1B8348C60;
  *((_OWORD *)this + 38) = xmmword_1B8348C70;
  *((_OWORD *)this + 39) = xmmword_1B8348C80;
  *((_OWORD *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B8348C90;
  *((_OWORD *)this + 41) = xmmword_1B8348CA0;
  *((_OWORD *)this + 42) = xmmword_1B8348CB0;
  *((_OWORD *)this + 43) = xmmword_1B7E75990;
  *((_OWORD *)this + 44) = xmmword_1B8348CC0;
  *((_OWORD *)this + 45) = xmmword_1B8348CD0;
  *((_OWORD *)this + 4ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B8348CE0;
  *((_OWORD *)this + 47) = xmmword_1B8348CF0;
  *((_OWORD *)this + 48) = xmmword_1B8348D00;
  *((_OWORD *)this + 49) = xmmword_1B7E759D0;
  *((_OWORD *)this + 5std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  return result;
}

const char *LiHeLightProgramAmbient::GetProgram(LiHeLightProgramAmbient *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000267\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = float3(r0.xyz) + hg_Params[0].xyz;\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b89aac8d:61c96031:2b460eab:336a21ef\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000252\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = r0.xyz + hg_Params[0].xyz;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=5fc1f2fa:c2f1042b:e82d9a29:6e503f59\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000021f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.xyz = r0.xyz + hg_ProgramLocal0.xyz;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=ca07385b:b29db72b:73d91743:b9f38991\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void LiHeLightProgramAmbient::InitProgramDescriptor(LiHeLightProgramAmbient *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramAmbient_hgc_visible", "//Metal1.0     \n//LEN=0000000133\n[[ visible ]] FragmentOut LiHeLightProgramAmbient_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    output.color0.xyz = r0.xyz + hg_Params[0].xyz;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLightProgramAmbient");
}

void sub_1B7B76CE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B76DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B76E24()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B76E1CLL);
}

void *LiHeLightProgramAmbient::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramAmbient [hgc1]");
}

uint64_t LiHeLightProgramAmbient::BindTexture(LiHeLightProgramAmbient *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramAmbient::Bind(LiHeLightProgramAmbient *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLightProgramAmbient::RenderTile(LiHeLightProgramAmbient *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *((void *)this + 51);
          int8x16_t v12 = *(int8x16_t *)(v11 + 16);
          int8x16_t v13 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 32), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11));
          int8x16_t v14 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 16), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11));
          int8x16_t v15 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11));
          int8x16_t v16 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 + 16), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11));
          float32x4_t v17 = (int8x16_t *)(v5 + v10);
          v17[-2] = v13;
          v17[-1] = v14;
          int8x16_t *v17 = v15;
          v17[1] = v16;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v18) = -v9;
      }
      if ((int)v18 < v4)
      {
        uint64_t v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8(*(int8x16_t *)(*((void *)this + 51) + 16), *(int8x16_t *)(v6 + 16 * v18), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + 16 * v18), *(float32x4_t *)*((void *)this + 51)));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramAmbient::GetDOD(LiHeLightProgramAmbient *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLightProgramAmbient::GetROI(LiHeLightProgramAmbient *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLightProgramAmbient::LiHeLightProgramAmbient(LiHeLightProgramAmbient *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F112F9C0;
  operator new();
}

void sub_1B7B7718C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramAmbient::~LiHeLightProgramAmbient(HGNode *this)
{
  *(void *)this = &unk_1F112F9C0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40E0EAB150);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLightProgramAmbient::~LiHeLightProgramAmbient(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramAmbient::SetParameter(LiHeLightProgramAmbient *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (float *)*((void *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  *uint64_t v8 = a3;
  v8[1] = a4;
  PCSharedCount v8[2] = a5;
  void v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeLightProgramAmbient::GetParameter(LiHeLightProgramAmbient *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcLean2::GetProgram(HgcLean2 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000263\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy/r0.zz;\n"
             "    r0.zw = r0.xy*r0.xy;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ff028c11:1a11c41a:50106970:e6af15c9\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000255\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy/r0.zz;\n"
             "    r0.zw = r0.xy*r0.xy;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=742e4db8:12d3e023:6bcad12e:be3865f7\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001f6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r0.xy = r0.xy/r0.zz;\n"
           "    r0.zw = r0.xy*r0.xy;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=3bb0ba9c:604d3e53:2a877b16:8562c183\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0000:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLean2::InitProgramDescriptor(HgcLean2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLean2_hgc_visible", "//Metal1.0     \n//LEN=0000000127\n[[ visible ]] FragmentOut HgcLean2_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r0.xy = r0.xy/r0.zz;\n"
    "    r0.zw = r0.xy*r0.xy;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcLean2");
}

void sub_1B7B773F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B774F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B77538()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B77530);
}

void *HgcLean2::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLean2 [hgc1]");
}

uint64_t HgcLean2::BindTexture(HgcLean2 *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLean2::Bind(HgcLean2 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcLean2::RenderTile(HgcLean2 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v27) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          int32x4_t v11 = *(int32x4_t *)(v6 + v10 - 32);
          int32x4_t v12 = *(int32x4_t *)(v6 + v10 - 16);
          int32x4_t v13 = *(int32x4_t *)(v6 + v10);
          int32x4_t v14 = *(int32x4_t *)(v6 + v10 + 16);
          float32x4_t v15 = (float32x4_t)vdupq_laneq_s32(v11, 2);
          float32x4_t v16 = (float32x4_t)vdupq_laneq_s32(v12, 2);
          float32x4_t v17 = (float32x4_t)vdupq_laneq_s32(v13, 2);
          float32x4_t v18 = (float32x4_t)vdupq_laneq_s32(v14, 2);
          int32x4_t v19 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v20 = v19[1];
          float32x4_t v21 = v19[2];
          float32x4_t v22 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v15), *v19), v20), v21);
          float32x4_t v23 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v16), *v19), v20), v21);
          float32x4_t v24 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v17), *v19), v20), v21);
          float32x4_t v25 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v18), *v19), v20), v21);
          *(float32x2_t *)v11.i8 = vmul_f32(*(float32x2_t *)v11.i8, vmul_f32(*(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v15, v22)));
          v11.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8);
          *(float32x2_t *)v12.i8 = vmul_f32(*(float32x2_t *)v12.i8, vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v16, v23)));
          v12.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8);
          *(float32x2_t *)v13.i8 = vmul_f32(*(float32x2_t *)v13.i8, vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v17, v24)));
          *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v18, v25)));
          v13.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8);
          v14.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8);
          int8x16_t v26 = (int32x4_t *)(v5 + v10);
          v26[-2] = v11;
          v26[-1] = v12;
          *int8x16_t v26 = v13;
          v26[1] = v14;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v27) = -v9;
      }
      if ((int)v27 < v4)
      {
        uint64_t v27 = v27;
        do
        {
          int32x4_t v28 = *(int32x4_t *)(v6 + 16 * v27);
          float32x4_t v29 = (float32x4_t)vdupq_laneq_s32(v28, 2);
          float32x4_t v30 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v29), *(float32x4_t *)*((void *)this + 51)), *(float32x4_t *)(*((void *)this + 51) + 16)), *(float32x4_t *)(*((void *)this + 51) + 32));
          *(float32x2_t *)v28.i8 = vmul_f32(*(float32x2_t *)v28.i8, vmul_f32(*(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v29, v30)));
          v28.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
          *(int32x4_t *)(v5 + 16 * v27++) = v28;
        }
        while (v27 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLean2::GetDOD(HgcLean2 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcLean2::GetROI(HgcLean2 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcLean2::HgcLean2(HgcLean2 *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F112FC28;
  operator new();
}

void sub_1B7B7790C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLean2::~HgcLean2(HGNode *this)
{
  *(void *)this = &unk_1F112FC28;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40EED21634);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcLean2::~HgcLean2(this);

  HGObject::operator delete(v1);
}

uint64_t HgcLean2::SetParameter(HgcLean2 *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcLean2::GetParameter(HgcLean2 *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeLightProgramInitPass::GetProgram(LiHeLightProgramInitPass *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00400000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000162\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "void main()\n"
           "{\n"
           "\n"
           "    gl_FragColor = hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=3516c664:47c72e5c:14a395a6:40522bd5\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
}

void LiHeLightProgramInitPass::InitProgramDescriptor(LiHeLightProgramInitPass *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramInitPass_hgc_visible", "//Metal1.0     \n//LEN=00000000d4\n[[ visible ]] FragmentOut LiHeLightProgramInitPass_hgc_visible(const constant float4* hg_Params)\n{\n    FragmentOut output;\n"
    "\n"
    "    output.color0 = hg_Params[0];\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLightProgramInitPass");
}

void sub_1B7B77AE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  *(_DWORD *)(v31 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v31 - 56), "FragmentOut");
  *(_OWORD *)(v31 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v30, v31 - 64);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  memset(v36, 0, 24);
  LODWORD(v32) = 2;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float4");
  long long v35 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v36, (uint64_t)&v32);
  if (v34 < 0) {
    operator delete(v33);
  }
  HGProgramDescriptor::SetArgumentBindings(v30, v36);
  uint64_t v32 = (void **)v36;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B7B77B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a10 = &a19;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_1B7B77BD4()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B77BCCLL);
}

void *LiHeLightProgramInitPass::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramInitPass [hgc1]");
}

uint64_t LiHeLightProgramInitPass::BindTexture(LiHeLightProgramInitPass *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeLightProgramInitPass::Bind(LiHeLightProgramInitPass *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLightProgramInitPass::RenderTile(LiHeLightProgramInitPass *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = (_OWORD *)(v5 + 32);
    uint64_t v7 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        int v8 = 0;
        int v9 = v6;
        do
        {
          long long v10 = *(_OWORD *)*((void *)this + 51);
          *(v9 - 2) = v10;
          *(v9 - 1) = v10;
          *int v9 = v10;
          v9[1] = v10;
          v9 += 4;
          v8 -= 4;
        }
        while (v4 + v8 > 3);
        LODWORD(v11) = -v8;
      }
      if ((int)v11 < v4)
      {
        uint64_t v11 = v11;
        do
          *(_OWORD *)(v5 + 16 * v11++) = *(_OWORD *)*((void *)this + 51);
        while (v11 < v4);
      }
      ++v3;
      uint64_t v6 = (_OWORD *)((char *)v6 + v7);
      v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramInitPass::GetDOD(LiHeLightProgramInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4 = &HGRectInfinite;
  if (a3) {
    int v4 = &HGRectNull;
  }
  return *(void *)v4;
}

uint64_t LiHeLightProgramInitPass::GetROI(LiHeLightProgramInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeLightProgramInitPass::LiHeLightProgramInitPass(LiHeLightProgramInitPass *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F112FE90;
  operator new();
}

void sub_1B7B77DF0(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramInitPass::~LiHeLightProgramInitPass(HGNode *this)
{
  *(void *)this = &unk_1F112FE90;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40451B5BE8);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLightProgramInitPass::~LiHeLightProgramInitPass(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramInitPass::SetParameter(LiHeLightProgramInitPass *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  int v8 = (float *)*((void *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  *int v8 = a3;
  v8[1] = a4;
  PCSharedCount v8[2] = a5;
  void v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeLightProgramInitPass::GetParameter(LiHeLightProgramInitPass *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeLightProgramPointSurface::GetProgram(LiHeLightProgramPointSurface *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000007c3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[8] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[10] + s0;\n"
             "    s1 = s0 + hg_Params[11];\n"
             "    s0.x = float(s0.w < -hg_Params[11].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s1.xyz = s1.xyz/s0.xxx;\n"
             "    s0.xyz = hg_Params[0].xyz - s1.xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.xyz = -s1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    s0.w = rsqrt(s0.w);\n"
             "    s0.xyz = s0.www*s0.xyz;\n"
             "    s1.w = dot(s1.xyz, s1.xyz);\n"
             "    s1.w = rsqrt(s1.w);\n"
             "    s1.xyz = s1.www*s1.xyz + s0.xyz;\n"
             "    s0.y = dot(s0.xyz, hg_Params[4].xyz);\n"
             "    s1.xyz = normalize(s1.xyz).xyz;\n"
             "    s1.x = dot(s1.xyz, hg_Params[4].xyz);\n"
             "    s0.w = 1.00000f / s0.w;\n"
             "    s0.x = s0.w - hg_Params[7].x;\n"
             "    s2.x = fmax(s0.y, float(c0.x));\n"
             "    s0.x = fmax(s0.x, float(c0.x));\n"
             "    s1.x = fmax(s1.x, float(c0.x));\n"
             "    s0.z = s0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    s0.y = s0.x*hg_Params[6].z;\n"
             "    s0.x = s0.y*s0.x + s0.z;\n"
             "    s0.y = float(float(c0.z) < fabs(s2.x));\n"
             "    s0.x = fmax(s0.x, float(c0.y));\n"
             "    s1.x = pow(s1.x, hg_Params[3].x);\n"
             "    s1.x = select(float(c0.x), s1.x, -s0.y < 0.00000h);\n"
             "    s0 = hg_Params[1]/s0.xxxx;\n"
             "    s1 = s0*s1.xxxx;\n"
             "    s1 = s1*hg_Params[2];\n"
             "    s1 = s2.xxxx*s0 + s1;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0) + s1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=3ee468dd:a0c2ffd8:1f4c2c2f:1d63ba1c\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000c:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000770\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[8] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[10] + r0;\n"
             "    r1 = r0 + hg_Params[11];\n"
             "    r0.x = float(r0.w < -hg_Params[11].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r1.xyz = r1.xyz/r0.xxx;\n"
             "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    r0.xyz = r0.www*r0.xyz;\n"
             "    r1.w = dot(r1.xyz, r1.xyz);\n"
             "    r1.w = rsqrt(r1.w);\n"
             "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
             "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
             "    r1.xyz = normalize(r1.xyz).xyz;\n"
             "    r1.x = dot(r1.xyz, hg_Params[4].xyz);\n"
             "    r0.w = 1.00000f / r0.w;\n"
             "    r0.x = r0.w - hg_Params[7].x;\n"
             "    r2.x = fmax(r0.y, c0.x);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r1.x = fmax(r1.x, c0.x);\n"
             "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    r0.y = r0.x*hg_Params[6].z;\n"
             "    r0.x = r0.y*r0.x + r0.z;\n"
             "    r0.y = float(c0.z < fabs(r2.x));\n"
             "    r0.x = fmax(r0.x, c0.y);\n"
             "    r1.x = pow(r1.x, hg_Params[3].x);\n"
             "    r1.x = select(c0.x, r1.x, -r0.y < 0.00000f);\n"
             "    r0 = hg_Params[1]/r0.xxxx;\n"
             "    r1 = r0*r1.xxxx;\n"
             "    r1 = r1*hg_Params[2];\n"
             "    r1 = r2.xxxx*r0 + r1;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r2 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d7b09eb4:8514d7a6:f1be0e16:d4a40832\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000c:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000921\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal9;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal8 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal10 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal11;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal11.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r1.xyz = r1.xyz/r0.xxx;\n"
           "    r0.xyz = hg_ProgramLocal0.xyz - r1.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.xyz = -r1.xyz*hg_ProgramLocal5.www + hg_ProgramLocal5.xyz;\n"
           "    r0.w = inversesqrt(r0.w);\n"
           "    r0.xyz = r0.www*r0.xyz;\n"
           "    r1.w = dot(r1.xyz, r1.xyz);\n"
           "    r1.w = inversesqrt(r1.w);\n"
           "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
           "    r0.y = dot(r0.xyz, hg_ProgramLocal4.xyz);\n"
           "    r1.xyz = normalize(r1.xyz).xyz;\n"
           "    r1.x = dot(r1.xyz, hg_ProgramLocal4.xyz);\n"
           "    r0.w = 1.00000 / r0.w;\n"
           "    r0.x = r0.w - hg_ProgramLocal7.x;\n"
           "    r2.x = max(r0.y, c0.x);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r1.x = max(r1.x, c0.x);\n"
           "    r0.z = r0.x*hg_ProgramLocal6.y + hg_ProgramLocal6.x;\n"
           "    r0.y = r0.x*hg_ProgramLocal6.z;\n"
           "    r0.x = r0.y*r0.x + r0.z;\n"
           "    r0.y = float(c0.z < abs(r2.x));\n"
           "    r0.x = max(r0.x, c0.y);\n"
           "    r1.x = pow(r1.x, hg_ProgramLocal3.x);\n"
           "    r1.x = -r0.y < 0.00000 ? r1.x : c0.x;\n"
           "    r0 = hg_ProgramLocal1/r0.xxxx;\n"
           "    r1 = r0*r1.xxxx;\n"
           "    r1 = r1*hg_ProgramLocal2;\n"
           "    r1 = r2.xxxx*r0 + r1;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r2 + r1;\n"
           "}\n"
           "//MD5=edf16448:360c4a3a:edfe90cd:3504cc2a\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000c:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramPointSurface::InitProgramDescriptor(LiHeLightProgramPointSurface *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramPointSurface_hgc_visible", "//Metal1.0     \n//LEN=000000065a\n[[ visible ]] FragmentOut LiHeLightProgramPointSurface_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[9];\n"
    "    r0 = texCoord1.xxxx*hg_Params[8] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[10] + r0;\n"
    "    r1 = r0 + hg_Params[11];\n"
    "    r0.x = float(r0.w < -hg_Params[11].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r1.xyz = r1.xyz/r0.xxx;\n"
    "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
    "    r0.w = rsqrt(r0.w);\n"
    "    r0.xyz = r0.www*r0.xyz;\n"
    "    r1.w = dot(r1.xyz, r1.xyz);\n"
    "    r1.w = rsqrt(r1.w);\n"
    "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
    "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
    "    r1.xyz = normalize(r1.xyz).xyz;\n"
    "    r1.x = dot(r1.xyz, hg_Params[4].xyz);\n"
    "    r0.w = 1.00000f / r0.w;\n"
    "    r0.x = r0.w - hg_Params[7].x;\n"
    "    r2.x = fmax(r0.y, c0.x);\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r1.x = fmax(r1.x, c0.x);\n"
    "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
    "    r0.y = r0.x*hg_Params[6].z;\n"
    "    r0.x = r0.y*r0.x + r0.z;\n"
    "    r0.y = float(c0.z < fabs(r2.x));\n"
    "    r0.x = fmax(r0.x, c0.y);\n"
    "    r1.x = pow(r1.x, hg_Params[3].x);\n"
    "    r1.x = select(c0.x, r1.x, -r0.y < 0.00000f);\n"
    "    r0 = hg_Params[1]/r0.xxxx;\n"
    "    r1 = r0*r1.xxxx;\n"
    "    r1 = r1*hg_Params[2];\n"
    "    r1 = r2.xxxx*r0 + r1;\n"
    "    r2 = color0;\n"
    "    output.color0 = r2 + r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLightProgramPointSurface");
}

void sub_1B7B7805C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E76080;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7819C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B781E4()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B781DCLL);
}

void *LiHeLightProgramPointSurface::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramPointSurface [hgc1]");
}

uint64_t LiHeLightProgramPointSurface::BindTexture(LiHeLightProgramPointSurface *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramPointSurface::Bind(LiHeLightProgramPointSurface *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLightProgramPointSurface::RenderTile(LiHeLightProgramPointSurface *this, int32x2_t *a2)
{
  int v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = a2[1].i32[0] - a2->i32[0];
    int32x2_t v5 = a2[2];
    int32x2_t v6 = a2[10];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    uint64_t v8 = 16 * a2[3].i32[0];
    uint64_t v9 = 16 * a2[11].i32[0];
    do
    {
      if (v4 >= 1)
      {
        uint64_t v10 = 0;
        float32x4_t v11 = v7;
        do
        {
          uint64_t v12 = *((void *)this + 51);
          float32x4_t v13 = *(float32x4_t *)(v12 + 176);
          float32x4_t v14 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v12 + 144), *(float32x2_t *)v11.f32, 1), vmulq_n_f32(*(float32x4_t *)(v12 + 128), v11.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v12 + 160), v11, 2));
          float32x4_t v15 = vaddq_f32(v13, v14);
          int8x16_t v16 = (int8x16_t)vcgtq_f32(vnegq_f32(v13), v14);
          float32x4_t v17 = *(float32x4_t *)(v12 + 192);
          int8x16_t v18 = *(int8x16_t *)(v12 + 208);
          float32x4_t v19 = (float32x4_t)vandq_s8((int8x16_t)v17, v16);
          v19.i64[0] = vbslq_s8(v18, vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v17)).u64[0];
          int32x4_t v20 = (int32x4_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v15), v17);
          v19.i64[1] = v20.i64[1];
          float32x4_t v21 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v19, v17), (int8x16_t)vdupq_laneq_s32(v20, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)), 0);
          float32x4_t v22 = *(float32x4_t *)(v12 + 224);
          float32x4_t v23 = *(float32x4_t *)(v12 + 240);
          float32x4_t v24 = vminq_f32(vmaxq_f32(vrecpeq_f32(v21), v22), v23);
          float32x4_t v25 = vminq_f32(vmaxq_f32(vmulq_f32(v24, vrecpsq_f32(v21, v24)), v22), v23);
          float32x4_t v26 = vmulq_f32(v15, vmulq_f32(v25, vrecpsq_f32(v21, v25)));
          float32x4_t v27 = vsubq_f32(*(float32x4_t *)v12, v26);
          int32x4_t v28 = (int32x4_t)vmulq_f32(v27, v27);
          float32x4_t v29 = *(float32x4_t *)(v12 + 64);
          float32x4_t v30 = vsubq_f32(*(float32x4_t *)(v12 + 80), vmulq_laneq_f32(v26, *(float32x4_t *)(v12 + 80), 3));
          int8x16_t v31 = *(int8x16_t *)(v12 + 256);
          float32x4_t v32 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v28), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL))), (int8x16_t)v27);
          float32x4_t v33 = vminq_f32(vrsqrteq_f32(v32), v23);
          float32x4_t v34 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v33, v32), v33)), v23);
          int8x16_t v35 = (int8x16_t)vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v34, v32), v34));
          int32x4_t v36 = (int32x4_t)vmulq_f32(v30, v30);
          float32x4_t v37 = (float32x4_t)vbslq_s8(v31, v35, (int8x16_t)v27);
          float32x4_t v38 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v36), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL))), (int8x16_t)v30);
          float32x4_t v39 = vminq_f32(vrsqrteq_f32(v38), v23);
          float32x4_t v40 = (float32x4_t)vbslq_s8(v31, v35, (int8x16_t)vmulq_laneq_f32(v37, v37, 3));
          float32x4_t v41 = vminq_f32(vmulq_f32(v39, vrsqrtsq_f32(vmulq_f32(v39, v38), v39)), v23);
          float32x4_t v42 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v41, vrsqrtsq_f32(vmulq_f32(v41, v38), v41)), (int8x16_t)v30);
          float32x4_t v43 = vaddq_f32(vmulq_laneq_f32(v42, v42, 3), v40);
          float32x4_t v44 = vmulq_f32(v29, v40);
          int8x16_t v45 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v7, 4uLL), vaddq_f32(v44, (float32x4_t)vrev64q_s32((int32x4_t)v44)));
          int32x4_t v46 = (int32x4_t)vmulq_f32(v43, v43);
          v47.i64[0] = v45.i64[0];
          float32x4_t v48 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v46, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 1)));
          v47.i64[1] = v40.i64[1];
          float32x4_t v49 = vminq_f32(vrsqrteq_f32(v48), v23);
          float32x4_t v50 = vminq_f32(vmulq_f32(v49, vrsqrtsq_f32(vmulq_f32(v49, v48), v49)), v23);
          float32x4_t v51 = vmulq_f32(v29, vmulq_f32(vmulq_f32(v50, vrsqrtsq_f32(vmulq_f32(v50, v48), v50)), v43));
          float32x4_t v52 = vminq_f32(vmaxq_f32(vrecpeq_f32(v47), v22), v23);
          float32x4_t v53 = vminq_f32(vmaxq_f32(vmulq_f32(v52, vrecpsq_f32(v47, v52)), v22), v23);
          int8x16_t v54 = (int8x16_t)vmulq_f32(v53, vrecpsq_f32(v47, v53));
          v50.i64[0] = vextq_s8(v54, v45, 0xCuLL).u64[0];
          v45.i64[1] = v54.i64[1];
          *(int8x8_t *)&v50.u32[2] = vext_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), 4uLL);
          int8x16_t v55 = *(int8x16_t *)(v12 + 96);
          float32x4_t v56 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vsubq_f32(v50, *(float32x4_t *)(v12 + 112)), v45);
          v45.i64[0] = vmaxq_f32(v56, v17).u64[0];
          float32x4_t v57 = *(float32x4_t *)(v12 + 304);
          float32x4_t v58 = *(float32x4_t *)(v12 + 48);
          v45.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v55, 0), vmulq_n_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v7, v55, 0xCuLL), *(float *)&v45)).i64[1];
          float32x4_t v59 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vceqq_f32(v58, v17)), v17), (int8x16_t)v57, (int8x16_t)vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), vaddq_f32(v51, (float32x4_t)vrev64q_s32((int32x4_t)v51))), v17));
          float32x4_t v60 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v12 + 336), (int8x16_t)v59), (int8x16_t)v57);
          float32x4_t v61 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v12 + 272), (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v55, v55, 4uLL), *(float *)v45.i32), v45);
          float32x4_t v62 = (float32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vcgtq_f32(v60, *(float32x4_t *)(v12 + 400)));
          float32x4_t v63 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v59, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v12 + 368), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v12 + 352), v59))), *(float32x4_t *)(v12 + 384)), v62);
          float32x4_t v64 = vsubq_f32(vsubq_f32(v60, v57), vmulq_f32(vmulq_f32(*(float32x4_t *)(v12 + 416), v62), v60));
          float32x4_t v65 = vmulq_f32(v64, v64);
          float32x4_t v66 = vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v56), v17);
          int8x16_t v67 = (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)vcagtq_f32(v66, *(float32x4_t *)(v12 + 288)), (int8x16_t)v57));
          int32x4_t v68 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), vmulq_lane_f32(v61, *(float32x2_t *)v61.f32, 1)), v67), *(float32x4_t *)(v12 + 320)), v67);
          float32x4_t v69 = vmaxq_f32(vmulq_f32(v58, vaddq_f32(v63, vmulq_f32(v64, vaddq_f32(*(float32x4_t *)(v12 + 528), vmulq_f32(v64, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 496), vmulq_f32(*(float32x4_t *)(v12 + 512), v64)), vmulq_f32(v65, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 432), vmulq_f32(*(float32x4_t *)(v12 + 448), v64)), vmulq_f32(v65, vaddq_f32(*(float32x4_t *)(v12 + 464), vmulq_f32(*(float32x4_t *)(v12 + 480), v64))))))))))),
                  *(float32x4_t *)(v12 + 544));
          float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
          float32x4_t v71 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vcgtq_f32(v70, v69)));
          float32x4_t v72 = vsubq_f32(v69, v71);
          int8x16_t v73 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v68), v17);
          float32x4_t v74 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.i8, 0);
          float32x4_t v75 = vminq_f32(vmaxq_f32(vrecpeq_f32(v74), v22), v23);
          float32x4_t v76 = vminq_f32(vmaxq_f32(vmulq_f32(v75, vrecpsq_f32(v74, v75)), v22), v23);
          float32x4_t v77 = vmulq_f32(vmulq_f32(v76, vrecpsq_f32(v74, v76)), *(float32x4_t *)(v12 + 16));
          *(float32x4_t *)(*(void *)&v5 + v1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = vaddq_f32(*(float32x4_t *)(*(void *)&v6 + v10), vaddq_f32(vmulq_n_f32(v77, v66.f32[0]), vmulq_f32(*(float32x4_t *)(v12 + 32), vmulq_n_f32(v77, *(float *)vbslq_s8(v73, (int8x16_t)vmulq_f32(vaddq_f32(v57, vmulq_f32(v72, vaddq_f32(*(float32x4_t *)(v12 + 624), vmulq_f32(v72, vaddq_f32(
                                                                                              vaddq_f32(*(float32x4_t *)(v12 + 592), vmulq_f32(*(float32x4_t *)(v12 + 608), v72)), vmulq_f32(vmulq_f32(v72, v72), vaddq_f32(*(float32x4_t *)(v12 + 560), vmulq_f32(*(float32x4_t *)(v12 + 576), v72)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v12 + 640), vcvtq_s32_f32(v71)), 0x17uLL)), (int8x16_t)v17).i32))));
          float32x4_t v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B7E736B0);
          v10 += 16;
        }
        while (16 * v4 != v10);
      }
      float32x4_t v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B7E736C0);
      ++v3;
      *(void *)&v5 += v8;
      *(void *)&v6 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramPointSurface::GetDOD(LiHeLightProgramPointSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLightProgramPointSurface::GetROI(LiHeLightProgramPointSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLightProgramPointSurface::LiHeLightProgramPointSurface(LiHeLightProgramPointSurface *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F11300F8;
  operator new();
}

void sub_1B7B78B28(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(HGNode *this)
{
  *(void *)this = &unk_1F11300F8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C407C97CFA8);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramPointSurface::SetParameter(LiHeLightProgramPointSurface *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 0xB) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  PCSharedCount v10[2] = a5;
  void v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeLightProgramPointSurface::GetParameter(LiHeLightProgramPointSurface *this, unsigned int a2, float *a3)
{
  if (a2 > 0xB) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int32x2_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double LiHeLightProgramPointSurface::State::State(LiHeLightProgramPointSurface::State *this)
{
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 12) = xmmword_1B837F030;
  *((_OWORD *)this + 13) = xmmword_1B7E751A0;
  *(void *)&long long v1 = 0x80000000800000;
  *((void *)&v1 + 1) = 0x80000000800000;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = v1;
  *((int32x4_t *)this + 15) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B7E752F0;
  *((_OWORD *)this + 17) = xmmword_1B7E75360;
  *((_OWORD *)this + 18) = xmmword_1B837F040;
  *((_OWORD *)this + 19) = xmmword_1B7E736B0;
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B837F050;
  *((_OWORD *)this + 21) = xmmword_1B7E75AD0;
  *((_OWORD *)this + 22) = xmmword_1B7E75AE0;
  *((_OWORD *)this + 23) = xmmword_1B7E75AF0;
  *((_OWORD *)this + 24) = xmmword_1B7E75B00;
  *((_OWORD *)this + 25) = xmmword_1B7E75B10;
  *((_OWORD *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B7E75B20;
  *((_OWORD *)this + 27) = xmmword_1B7E77760;
  *((_OWORD *)this + 28) = xmmword_1B7E77770;
  *((_OWORD *)this + 29) = xmmword_1B7E77780;
  *((_OWORD *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B7E77790;
  *((_OWORD *)this + 31) = xmmword_1B7E777A0;
  *((_OWORD *)this + 32) = xmmword_1B837F060;
  *((_OWORD *)this + 33) = xmmword_1B837F070;
  *((_OWORD *)this + 34) = xmmword_1B7E75B70;
  *((_OWORD *)this + 35) = xmmword_1B837F080;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B837F090;
  *((_OWORD *)this + 37) = xmmword_1B837F0A0;
  *((_OWORD *)this + 38) = xmmword_1B837F0B0;
  *((_OWORD *)this + 39) = xmmword_1B837F0C0;
  *(void *)&double result = 127;
  *((_OWORD *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B7E75BB0;
  return result;
}

const char *LiHeLightProgramPointSurfaceDiffuse::GetProgram(LiHeLightProgramPointSurfaceDiffuse *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[5] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[7] + s0;\n"
             "    s1 = s0 + hg_Params[8];\n"
             "    s0.x = float(s0.w < -hg_Params[8].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.x = rsqrt(s0.w);\n"
             "    s0.xyz = s1.xxx*s0.xyz;\n"
             "    s0.w = 1.00000f / s1.x;\n"
             "    s1.x = dot(s0.xyz, hg_Params[2].xyz);\n"
             "    s0.w = s0.w - hg_Params[4].w;\n"
             "    s0.w = fmax(s0.w, float(c0.x));\n"
             "    s2.z = s0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    s2.y = s0.w*hg_Params[3].z;\n"
             "    s0.w = s2.y*s0.w + s2.z;\n"
             "    s0.w = fmax(s0.w, float(c0.y));\n"
             "    s0 = hg_Params[1]/s0.wwww;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s1.x = fmax(s1.x, float(c0.x));\n"
             "    output.color0 = s0*s1.xxxx + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=43196f93:7bc84309:f132a4d1:ec1f6d3f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0009:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005b2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[5] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[7] + r0;\n"
             "    r1 = r0 + hg_Params[8];\n"
             "    r0.x = float(r0.w < -hg_Params[8].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.x = rsqrt(r0.w);\n"
             "    r0.xyz = r1.xxx*r0.xyz;\n"
             "    r0.w = 1.00000f / r1.x;\n"
             "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
             "    r0.w = r0.w - hg_Params[4].w;\n"
             "    r0.w = fmax(r0.w, c0.x);\n"
             "    r2.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    r2.y = r0.w*hg_Params[3].z;\n"
             "    r0.w = r2.y*r0.w + r2.z;\n"
             "    r0.w = fmax(r0.w, c0.y);\n"
             "    r0 = hg_Params[1]/r0.wwww;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r1.x, c0.x);\n"
             "    output.color0 = r0*r1.xxxx + r2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=871590c3:67444514:d3bac780:1dcd075f\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0009:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006e0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal6;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal5 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal7 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal8;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal8.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.x = inversesqrt(r0.w);\n"
           "    r0.xyz = r1.xxx*r0.xyz;\n"
           "    r0.w = 1.00000 / r1.x;\n"
           "    r1.x = dot(r0.xyz, hg_ProgramLocal2.xyz);\n"
           "    r0.w = r0.w - hg_ProgramLocal4.w;\n"
           "    r0.w = max(r0.w, c0.x);\n"
           "    r2.z = r0.w*hg_ProgramLocal3.y + hg_ProgramLocal3.x;\n"
           "    r2.y = r0.w*hg_ProgramLocal3.z;\n"
           "    r0.w = r2.y*r0.w + r2.z;\n"
           "    r0.w = max(r0.w, c0.y);\n"
           "    r0 = hg_ProgramLocal1/r0.wwww;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = max(r1.x, c0.x);\n"
           "    gl_FragColor = r0*r1.xxxx + r2;\n"
           "}\n"
           "//MD5=79d21ec4:ee041d23:34c46e65:0ed66c62\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0009:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramPointSurfaceDiffuse::InitProgramDescriptor(LiHeLightProgramPointSurfaceDiffuse *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramPointSurfaceDiffuse_hgc_visible", "//Metal1.0     \n//LEN=00000004a3\n[[ visible ]] FragmentOut LiHeLightProgramPointSurfaceDiffuse_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[6];\n"
    "    r0 = texCoord1.xxxx*hg_Params[5] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[7] + r0;\n"
    "    r1 = r0 + hg_Params[8];\n"
    "    r0.x = float(r0.w < -hg_Params[8].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.x = rsqrt(r0.w);\n"
    "    r0.xyz = r1.xxx*r0.xyz;\n"
    "    r0.w = 1.00000f / r1.x;\n"
    "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
    "    r0.w = r0.w - hg_Params[4].w;\n"
    "    r0.w = fmax(r0.w, c0.x);\n"
    "    r2.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
    "    r2.y = r0.w*hg_Params[3].z;\n"
    "    r0.w = r2.y*r0.w + r2.z;\n"
    "    r0.w = fmax(r0.w, c0.y);\n"
    "    r0 = hg_Params[1]/r0.wwww;\n"
    "    r2 = color0;\n"
    "    r1.x = fmax(r1.x, c0.x);\n"
    "    output.color0 = r0*r1.xxxx + r2;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLightProgramPointSurfaceDiffuse");
}

void sub_1B7B78EF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E76450;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B79038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B79080()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B79078);
}

void *LiHeLightProgramPointSurfaceDiffuse::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramPointSurfaceDiffuse [hgc1]");
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::BindTexture(LiHeLightProgramPointSurfaceDiffuse *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::Bind(LiHeLightProgramPointSurfaceDiffuse *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::RenderTile(LiHeLightProgramPointSurfaceDiffuse *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v6 = a2[2];
    int32x2_t v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    uint64_t v9 = 16 * a2[3].i32[0];
    uint64_t v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v131) = 0;
        float32x4_t v13 = v8;
      }
      else
      {
        uint64_t v11 = 0;
        int v12 = 0;
        float32x4_t v13 = v8;
        do
        {
          float32x4_t v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          float32x4_t v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v16 = *((void *)this + 51);
          float32x4_t v18 = *(float32x4_t *)(v16 + 96);
          float32x4_t v17 = *(float32x4_t *)(v16 + 112);
          float32x4_t v20 = *(float32x4_t *)(v16 + 64);
          float32x4_t v19 = *(float32x4_t *)(v16 + 80);
          float32x4_t v21 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(v19, v13.f32[0])), vmulq_laneq_f32(v17, v13, 2));
          float32x4_t v22 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(v19, v14.f32[0])), vmulq_laneq_f32(v17, v14, 2));
          float32x4_t v23 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v15.f32, 1), vmulq_n_f32(v19, v15.f32[0])), vmulq_laneq_f32(v17, v15, 2));
          float32x4_t v24 = *(float32x4_t *)(v16 + 128);
          float32x4_t v25 = *(float32x4_t *)(v16 + 144);
          float32x4_t v26 = vaddq_f32(v24, v21);
          float32x4_t v27 = vaddq_f32(v24, v22);
          float32x4_t v28 = vaddq_f32(v24, v23);
          float32x4_t v29 = vnegq_f32(v24);
          int8x16_t v30 = vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v29, v21));
          int8x16_t v31 = vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v29, v22));
          int8x16_t v32 = vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v29, v23));
          int8x16_t v33 = vextq_s8(v30, v30, 0xCuLL);
          float32x4_t v35 = *(float32x4_t *)(v16 + 160);
          float32x4_t v34 = *(float32x4_t *)(v16 + 176);
          int32x4_t v36 = (int32x4_t)vbslq_s8((int8x16_t)v35, v33, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), v25));
          int32x4_t v37 = (int32x4_t)vbslq_s8((int8x16_t)v35, vextq_s8(v31, v31, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), v25));
          int64x2_t v38 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v26), v25);
          int64x2_t v39 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v27), v25);
          int64x2_t v40 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), v25);
          int32x4_t v41 = (int32x4_t)vbslq_s8((int8x16_t)v35, vextq_s8(v32, v32, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), v25));
          v42.i64[0] = v36.i64[0];
          v42.i64[1] = v38.i64[1];
          v35.i64[0] = v37.i64[0];
          v35.i64[1] = v39.i64[1];
          v43.i64[0] = v41.i64[0];
          unint64_t v44 = vdupq_laneq_s64(v38, 1).u64[0];
          int8x16_t v45 = vextq_s8((int8x16_t)v38, (int8x16_t)v36, 8uLL);
          v43.i64[1] = v40.i64[1];
          v36.i64[1] = v44;
          unint64_t v46 = vdupq_laneq_s64(v39, 1).u64[0];
          int8x16_t v47 = vextq_s8((int8x16_t)v39, (int8x16_t)v37, 8uLL);
          v37.i64[1] = v46;
          unint64_t v48 = vdupq_laneq_s64(v40, 1).u64[0];
          int8x16_t v49 = vextq_s8((int8x16_t)v40, (int8x16_t)v41, 8uLL);
          v41.i64[1] = v48;
          float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v42, v25), v45, (int8x16_t)vrev64q_s32(v36));
          float32x4_t v51 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v35, v25), v47, (int8x16_t)vrev64q_s32(v37));
          float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v43, v25), v49, (int8x16_t)vrev64q_s32(v41));
          float32x4_t v53 = *(float32x4_t *)(v16 + 192);
          int8x16_t v54 = *(int8x16_t *)(v16 + 208);
          float32x4_t v55 = vminq_f32(vmaxq_f32(vrecpeq_f32(v50), v34), v53);
          float32x4_t v56 = vminq_f32(vmaxq_f32(vrecpeq_f32(v51), v34), v53);
          float32x4_t v57 = vminq_f32(vmaxq_f32(vrecpeq_f32(v52), v34), v53);
          float32x4_t v58 = vminq_f32(vmaxq_f32(vmulq_f32(v55, vrecpsq_f32(v50, v55)), v34), v53);
          float32x4_t v59 = vminq_f32(vmaxq_f32(vmulq_f32(v56, vrecpsq_f32(v51, v56)), v34), v53);
          float32x4_t v60 = vminq_f32(vmaxq_f32(vmulq_f32(v57, vrecpsq_f32(v52, v57)), v34), v53);
          float32x4_t v61 = vmulq_n_f32(v26, vmulq_f32(v58, vrecpsq_f32(v50, v58)).f32[0]);
          float32x4_t v62 = *(float32x4_t *)(v16 + 16);
          float32x4_t v63 = vsubq_f32(*(float32x4_t *)v16, v61);
          float32x4_t v64 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v27, vmulq_f32(v59, vrecpsq_f32(v51, v59)).f32[0]));
          float32x4_t v65 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v28, vmulq_f32(v60, vrecpsq_f32(v52, v60)).f32[0]));
          int32x4_t v66 = (int32x4_t)vmulq_f32(v63, v63);
          int32x4_t v67 = (int32x4_t)vmulq_f32(v64, v64);
          int32x4_t v68 = (int32x4_t)vmulq_f32(v65, v65);
          float32x4_t v69 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v66), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL))), (int8x16_t)v63);
          float32x4_t v70 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v67), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL))), (int8x16_t)v64);
          float32x4_t v71 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v68), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL))), (int8x16_t)v65);
          float32x4_t v72 = (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 0xCuLL);
          float32x4_t v73 = (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 0xCuLL);
          float32x4_t v74 = (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL);
          float32x4_t v75 = vminq_f32(vrsqrteq_f32(v72), v53);
          float32x4_t v76 = vminq_f32(vrsqrteq_f32(v73), v53);
          float32x4_t v77 = vminq_f32(vrsqrteq_f32(v74), v53);
          float32x4_t v78 = vminq_f32(vmulq_f32(v75, vrsqrtsq_f32(vmulq_f32(v75, v72), v75)), v53);
          float32x4_t v79 = vminq_f32(vmulq_f32(v76, vrsqrtsq_f32(vmulq_f32(v76, v73), v76)), v53);
          float32x4_t v80 = vminq_f32(vmulq_f32(v77, vrsqrtsq_f32(vmulq_f32(v77, v74), v77)), v53);
          int8x16_t v81 = (int8x16_t)vmulq_f32(v78, vrsqrtsq_f32(vmulq_f32(v72, v78), v78));
          int8x16_t v82 = (int8x16_t)vmulq_f32(v79, vrsqrtsq_f32(vmulq_f32(v73, v79), v79));
          int8x16_t v83 = (int8x16_t)vmulq_f32(v80, vrsqrtsq_f32(vmulq_f32(v74, v80), v80));
          int8x16_t v84 = (int8x16_t)vmulq_n_f32(v69, *(float *)v81.i32);
          int8x16_t v85 = (int8x16_t)vmulq_n_f32(v70, *(float *)v82.i32);
          int8x16_t v86 = (int8x16_t)vmulq_n_f32(v71, *(float *)v83.i32);
          float32x4_t v87 = (float32x4_t)vextq_s8(v81, v81, 4uLL);
          float32x4_t v88 = (float32x4_t)vextq_s8(v82, v82, 4uLL);
          float32x4_t v89 = (float32x4_t)vextq_s8(v83, v83, 4uLL);
          float32x4_t v90 = vminq_f32(vmaxq_f32(vrecpeq_f32(v87), v34), v53);
          float32x4_t v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v88), v34), v53);
          float32x4_t v92 = vminq_f32(vmaxq_f32(vrecpeq_f32(v89), v34), v53);
          float32x4_t v93 = vminq_f32(vmaxq_f32(vmulq_f32(v90, vrecpsq_f32(v87, v90)), v34), v53);
          float32x4_t v94 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v88, v91)), v34), v53);
          float32x4_t v95 = vminq_f32(vmaxq_f32(vmulq_f32(v92, vrecpsq_f32(v89, v92)), v34), v53);
          float32x4_t v96 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vmulq_f32(v93, vrecpsq_f32(v87, v93)), v84);
          float32x4_t v97 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vmulq_f32(v94, vrecpsq_f32(v88, v94)), v85);
          float32x4_t v98 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vmulq_f32(v95, vrecpsq_f32(v89, v95)), v86);
          float32x4_t v99 = *(float32x4_t *)(v16 + 32);
          int8x16_t v100 = *(int8x16_t *)(v16 + 48);
          float32x4_t v101 = vmulq_f32(v99, v96);
          float32x4_t v102 = vmulq_f32(v99, v97);
          float32x4_t v103 = vmulq_f32(v99, v98);
          float32x4_t v104 = vsubq_f32(v96, v20);
          float32x4_t v105 = vsubq_f32(v97, v20);
          float32x4_t v106 = vsubq_f32(v98, v20);
          float32x4_t v107 = *(float32x4_t *)(v16 + 224);
          float32x4_t v108 = *(float32x4_t *)(v16 + 240);
          float32x4_t v109 = vmaxq_f32(v104, v107);
          float32x4_t v110 = vmaxq_f32(v105, v107);
          float32x4_t v111 = vmaxq_f32(v106, v107);
          float32x4_t v112 = (float32x4_t)vextq_s8(v100, v100, 0xCuLL);
          float32x4_t v113 = (float32x4_t)vextq_s8(v100, v100, 8uLL);
          int64x2_t v114 = (int64x2_t)vaddq_f32(v113, vmulq_laneq_f32(v112, v109, 3));
          int64x2_t v115 = (int64x2_t)vaddq_f32(v113, vmulq_laneq_f32(v112, v110, 3));
          int64x2_t v116 = (int64x2_t)vaddq_f32(v113, vmulq_laneq_f32(v112, v111, 3));
          float32x4_t v117 = (float32x4_t)vextq_s8(v100, v100, 4uLL);
          v113.i64[0] = vmulq_laneq_f32(v117, v109, 3).u64[0];
          v95.i64[0] = vmulq_laneq_f32(v117, v110, 3).u64[0];
          v113.i64[1] = vdupq_laneq_s64(v114, 1).u64[0];
          v117.i64[0] = vmulq_laneq_f32(v117, v111, 3).u64[0];
          v95.i64[1] = vdupq_laneq_s64(v115, 1).u64[0];
          v117.i64[1] = vdupq_laneq_s64(v116, 1).u64[0];
          float32x4_t v118 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v109, *(float32x2_t *)v113.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v113)), v108), 3);
          float32x4_t v119 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v110, *(float32x2_t *)v95.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v95)), v108), 3);
          float32x4_t v120 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v111, *(float32x2_t *)v117.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v117)), v108), 3);
          float32x4_t v121 = vminq_f32(vmaxq_f32(vrecpeq_f32(v118), v34), v53);
          float32x4_t v122 = vminq_f32(vmaxq_f32(vrecpeq_f32(v119), v34), v53);
          float32x4_t v123 = vminq_f32(vmaxq_f32(vrecpeq_f32(v120), v34), v53);
          float32x4_t v124 = vminq_f32(vmaxq_f32(vmulq_f32(v121, vrecpsq_f32(v118, v121)), v34), v53);
          float32x4_t v125 = vminq_f32(vmaxq_f32(vmulq_f32(v122, vrecpsq_f32(v119, v122)), v34), v53);
          float32x4_t v126 = vminq_f32(vmaxq_f32(vmulq_f32(v123, vrecpsq_f32(v120, v123)), v34), v53);
          float32x4_t v127 = vmulq_f32(v126, vrecpsq_f32(v120, v126));
          float32x4_t v128 = vaddq_f32(*(float32x4_t *)(*(void *)&v7 + v11 + 16), vmulq_n_f32(vmulq_f32(vmulq_f32(v125, vrecpsq_f32(v119, v125)), v62), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), vaddq_f32(v102, (float32x4_t)vrev64q_s32((int32x4_t)v102))), v108).f32[0]));
          float32x4_t v129 = vaddq_f32(*(float32x4_t *)(*(void *)&v7 + v11 + 32), vmulq_n_f32(vmulq_f32(v127, v62), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL), vaddq_f32(v103, (float32x4_t)vrev64q_s32((int32x4_t)v103))), v108).f32[0]));
          float32x4_t v130 = (float32x4_t *)(*(void *)&v6 + v11);
          *float32x4_t v130 = vaddq_f32(*(float32x4_t *)(*(void *)&v7 + v11), vmulq_n_f32(vmulq_f32(vmulq_f32(v124, vrecpsq_f32(v118, v124)), v62), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), vaddq_f32(v101, (float32x4_t)vrev64q_s32((int32x4_t)v101))), v108).f32[0]));
          v130[1] = v128;
          v130[2] = v129;
          float32x4_t v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B7E736B0);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v131) = -v12;
      }
      if ((int)v131 < v5)
      {
        uint64_t v131 = v131;
        do
        {
          uint64_t v132 = *((void *)this + 51);
          float32x4_t v133 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v132 + 96), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)(v132 + 80), v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v132 + 112), v13, 2));
          float32x4_t v134 = *(float32x4_t *)(v132 + 128);
          float32x4_t v135 = *(float32x4_t *)(v132 + 144);
          float32x4_t v136 = vaddq_f32(v134, v133);
          int8x16_t v137 = vandq_s8((int8x16_t)v135, (int8x16_t)vcgtq_f32(vnegq_f32(v134), v133));
          float32x4_t v138 = *(float32x4_t *)(v132 + 176);
          int32x4_t v139 = (int32x4_t)vbslq_s8(*(int8x16_t *)(v132 + 160), vextq_s8(v137, v137, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL), v135));
          int64x2_t v140 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v136), v135);
          v141.i64[0] = v139.i64[0];
          v141.i64[1] = v140.i64[1];
          unint64_t v142 = vdupq_laneq_s64(v140, 1).u64[0];
          int8x16_t v143 = vextq_s8((int8x16_t)v140, (int8x16_t)v139, 8uLL);
          v139.i64[1] = v142;
          float32x4_t v144 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v141, v135), v143, (int8x16_t)vrev64q_s32(v139));
          float32x4_t v145 = *(float32x4_t *)(v132 + 192);
          int8x16_t v146 = *(int8x16_t *)(v132 + 208);
          float32x4_t v147 = vminq_f32(vmaxq_f32(vrecpeq_f32(v144), v138), v145);
          float32x4_t v148 = vminq_f32(vmaxq_f32(vmulq_f32(v147, vrecpsq_f32(v144, v147)), v138), v145);
          float32x4_t v149 = vsubq_f32(*(float32x4_t *)v132, vmulq_n_f32(v136, vmulq_f32(v148, vrecpsq_f32(v144, v148)).f32[0]));
          int32x4_t v150 = (int32x4_t)vmulq_f32(v149, v149);
          float32x4_t v151 = (float32x4_t)vbslq_s8(v146, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v150), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v150, (int8x16_t)v150, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL))), (int8x16_t)v149);
          float32x4_t v152 = (float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 0xCuLL);
          float32x4_t v153 = vminq_f32(vrsqrteq_f32(v152), v145);
          float32x4_t v154 = vminq_f32(vmulq_f32(v153, vrsqrtsq_f32(vmulq_f32(v153, v152), v153)), v145);
          int8x16_t v155 = (int8x16_t)vmulq_f32(v154, vrsqrtsq_f32(vmulq_f32(v154, v152), v154));
          float32x4_t v156 = (float32x4_t)vextq_s8(v155, v155, 4uLL);
          float32x4_t v157 = vminq_f32(vmaxq_f32(vrecpeq_f32(v156), v138), v145);
          int8x16_t v158 = (int8x16_t)vmulq_n_f32(v151, *(float *)v155.i32);
          float32x4_t v159 = vminq_f32(vmaxq_f32(vmulq_f32(v157, vrecpsq_f32(v156, v157)), v138), v145);
          float32x4_t v160 = (float32x4_t)vbslq_s8(v146, (int8x16_t)vmulq_f32(v159, vrecpsq_f32(v156, v159)), v158);
          float32x4_t v161 = *(float32x4_t *)(v132 + 48);
          float32x4_t v162 = *(float32x4_t *)(v132 + 240);
          float32x4_t v163 = vmaxq_f32(vsubq_f32(v160, *(float32x4_t *)(v132 + 64)), *(float32x4_t *)(v132 + 224));
          float32x4_t v164 = vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v161, (int8x16_t)v8, 4uLL), v163, 3);
          v164.i64[1] = vaddq_f32(v161, v164).u64[0];
          float32x4_t v165 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v163, *(float32x2_t *)v164.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v164)), v162), 3);
          float32x4_t v166 = vminq_f32(vmaxq_f32(vrecpeq_f32(v165), v138), v145);
          float32x4_t v167 = vmulq_f32(*(float32x4_t *)(v132 + 32), v160);
          float32x4_t v168 = vminq_f32(vmaxq_f32(vmulq_f32(v166, vrecpsq_f32(v165, v166)), v138), v145);
          *(float32x4_t *)(*(void *)&v6 + 16 * v131) = vaddq_f32(*(float32x4_t *)(*(void *)&v7 + 16 * v131), vmulq_n_f32(vmulq_f32(vmulq_f32(v168, vrecpsq_f32(v165, v168)), *(float32x4_t *)(v132 + 16)), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL), vaddq_f32(v167, (float32x4_t)vrev64q_s32((int32x4_t)v167))), v162).f32[0]));
          float32x4_t v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          ++v131;
        }
        while (v131 < v5);
      }
      float32x4_t v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B7E736C0);
      ++v4;
      *(void *)&v6 += v9;
      *(void *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::GetDOD(LiHeLightProgramPointSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::GetROI(LiHeLightProgramPointSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLightProgramPointSurfaceDiffuse::LiHeLightProgramPointSurfaceDiffuse(LiHeLightProgramPointSurfaceDiffuse *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1130360;
  operator new();
}

void sub_1B7B79C2C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(HGNode *this)
{
  *(void *)this = &unk_1F1130360;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40881B329ALL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::SetParameter(LiHeLightProgramPointSurfaceDiffuse *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      int32x2_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      float *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      PCSharedCount v7[3] = a6;
      goto LABEL_48;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_48;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_48;
    case 3:
      uint64_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_48;
    case 4:
      int v12 = (__n128 *)*((void *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == 0.0
        && v12[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      double v12[16] = a3;
      goto LABEL_48;
    case 5:
      float32x4_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_48;
    case 6:
      float32x4_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_48;
    case 7:
      float32x4_t v15 = (float *)*((void *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6) {
        return 0;
      }
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_48;
    case 8:
      uint64_t v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
LABEL_48:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeLightProgramPointSurfaceDiffuse::GetParameter(LiHeLightProgramPointSurfaceDiffuse *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      int v4 = v3 + 3;
      goto LABEL_11;
    case 1:
      int v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_11;
    case 2:
      int32x2_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      int v4 = v6 + 11;
      goto LABEL_11;
    case 3:
      int32x2_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      int v4 = v7 + 15;
      goto LABEL_11;
    case 4:
      float32x4_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[64];
      a3[1] = v8[65];
      a3[2] = v8[66];
      int v4 = v8 + 67;
      goto LABEL_11;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      int v4 = v9 + 23;
      goto LABEL_11;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      int v4 = v10 + 27;
      goto LABEL_11;
    case 7:
      uint64_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      int v4 = v11 + 31;
      goto LABEL_11;
    case 8:
      int v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      int v4 = v12 + 35;
LABEL_11:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *LiHeLightProgramSpotSurface::GetProgram(LiHeLightProgramSpotSurface *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000ac5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[8] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[10] + s0;\n"
             "    s1 = s0 + hg_Params[11];\n"
             "    s0.x = float(s0.w < -hg_Params[11].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s1.xyz = s1.xyz/s0.xxx;\n"
             "    s0.xyz = hg_Params[0].xyz - s1.xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.xyz = -s1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    s0.w = rsqrt(s0.w);\n"
             "    s0.xyz = s0.www*s0.xyz;\n"
             "    s1.w = dot(s1.xyz, s1.xyz);\n"
             "    s1.w = rsqrt(s1.w);\n"
             "    s1.xyz = s1.www*s1.xyz + s0.xyz;\n"
             "    s1.xyz = normalize(s1.xyz).xyz;\n"
             "    s1.y = dot(s1.xyz, hg_Params[4].xyz);\n"
             "    s1.w = dot(-s0.xyz, hg_Params[15].xyz);\n"
             "    s1.y = fmax(s1.y, float(c0.x));\n"
             "    s2.z = pow(s1.y, hg_Params[3].z);\n"
             "    s2.x = hg_Params[12].x - hg_Params[13].x;\n"
             "    s2.y = 1.00000f / s2.x;\n"
             "    s1.x = float(s1.w < hg_Params[13].x);\n"
             "    s2.x = s1.w - hg_Params[13].x;\n"
             "    s2.x = clamp(s2.x*s2.y, 0.00000f, 1.00000f);\n"
             "    s2.y = s2.x*float(c0.z) + float(c0.w);\n"
             "    s2.x = s2.x*s2.x;\n"
             "    s0.w = 1.00000f / s0.w;\n"
             "    s0.y = dot(s0.xyz, hg_Params[4].xyz);\n"
             "    s0.w = s0.w - hg_Params[7].w;\n"
             "    s0.xw = fmax(s0.wy, float2(c0.xx));\n"
             "    s0.z = s0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    s0.y = s0.x*hg_Params[6].z;\n"
             "    s0.x = s0.y*s0.x + s0.z;\n"
             "    s0.x = fmax(s0.x, float(c0.y));\n"
             "    s0.y = float(float(c1.y) < fabs(s0.w));\n"
             "    s1.x = float(-s1.x >= float(c0.x));\n"
             "    s1.y = float(s1.w < hg_Params[12].x);\n"
             "    s1.z = fmin(s1.x, s1.y);\n"
             "    s1.x = s1.x*s1.y + -s1.x;\n"
             "    s2.x = s2.x*s2.y;\n"
             "    s1.z = select(float(c0.x), s2.x, -s1.z < 0.00000h);\n"
             "    s1.y = pow(s1.w, hg_Params[14].y);\n"
             "    s1.x = select(s1.z, s1.y, s1.x < 0.00000h);\n"
             "    s0.x = s1.x/s0.x;\n"
             "    s2.x = select(float(c0.x), s2.z, -s0.y < 0.00000h);\n"
             "    s0.xyz = s0.xxx*hg_Params[1].xyz;\n"
             "    s2.xyz = s0.xyz*s2.xxx;\n"
             "    s2.xyz = s2.xyz*hg_Params[2].xyz;\n"
             "    s2.xyz = s0.www*s0.xyz + s2.xyz;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = float3(r0.xyz) + s2.xyz;\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=65f84872:8db1f15b:1f12c98c:ea287b12\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0010:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000a57\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[8] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[10] + r0;\n"
             "    r1 = r0 + hg_Params[11];\n"
             "    r0.x = float(r0.w < -hg_Params[11].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r1.xyz = r1.xyz/r0.xxx;\n"
             "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    r0.xyz = r0.www*r0.xyz;\n"
             "    r1.w = dot(r1.xyz, r1.xyz);\n"
             "    r1.w = rsqrt(r1.w);\n"
             "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
             "    r1.xyz = normalize(r1.xyz).xyz;\n"
             "    r1.y = dot(r1.xyz, hg_Params[4].xyz);\n"
             "    r1.w = dot(-r0.xyz, hg_Params[15].xyz);\n"
             "    r1.y = fmax(r1.y, c0.x);\n"
             "    r2.z = pow(r1.y, hg_Params[3].z);\n"
             "    r2.x = hg_Params[12].x - hg_Params[13].x;\n"
             "    r2.y = 1.00000f / r2.x;\n"
             "    r1.x = float(r1.w < hg_Params[13].x);\n"
             "    r2.x = r1.w - hg_Params[13].x;\n"
             "    r2.x = clamp(r2.x*r2.y, 0.00000f, 1.00000f);\n"
             "    r2.y = r2.x*c0.z + c0.w;\n"
             "    r2.x = r2.x*r2.x;\n"
             "    r0.w = 1.00000f / r0.w;\n"
             "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
             "    r0.w = r0.w - hg_Params[7].w;\n"
             "    r0.xw = fmax(r0.wy, c0.xx);\n"
             "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    r0.y = r0.x*hg_Params[6].z;\n"
             "    r0.x = r0.y*r0.x + r0.z;\n"
             "    r0.x = fmax(r0.x, c0.y);\n"
             "    r0.y = float(c1.y < fabs(r0.w));\n"
             "    r1.x = float(-r1.x >= c0.x);\n"
             "    r1.y = float(r1.w < hg_Params[12].x);\n"
             "    r1.z = fmin(r1.x, r1.y);\n"
             "    r1.x = r1.x*r1.y + -r1.x;\n"
             "    r2.x = r2.x*r2.y;\n"
             "    r1.z = select(c0.x, r2.x, -r1.z < 0.00000f);\n"
             "    r1.y = pow(r1.w, hg_Params[14].y);\n"
             "    r1.x = select(r1.z, r1.y, r1.x < 0.00000f);\n"
             "    r0.x = r1.x/r0.x;\n"
             "    r2.x = select(c0.x, r2.z, -r0.y < 0.00000f);\n"
             "    r0.xyz = r0.xxx*hg_Params[1].xyz;\n"
             "    r2.xyz = r0.xyz*r2.xxx;\n"
             "    r2.xyz = r2.xyz*hg_Params[2].xyz;\n"
             "    r2.xyz = r0.www*r0.xyz + r2.xyz;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = r1.xyz + r2.xyz;\n"
             "    output.color0.w = r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=660a03f2:ca8d7de1:4c4e1365:c0a9ca26\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0010:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000cac\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "uniform highp vec4 hg_ProgramLocal13;\n"
           "uniform highp vec4 hg_ProgramLocal14;\n"
           "uniform highp vec4 hg_ProgramLocal15;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal9;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal8 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal10 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal11;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal11.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r1.xyz = r1.xyz/r0.xxx;\n"
           "    r0.xyz = hg_ProgramLocal0.xyz - r1.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.xyz = -r1.xyz*hg_ProgramLocal5.www + hg_ProgramLocal5.xyz;\n"
           "    r0.w = inversesqrt(r0.w);\n"
           "    r0.xyz = r0.www*r0.xyz;\n"
           "    r1.w = dot(r1.xyz, r1.xyz);\n"
           "    r1.w = inversesqrt(r1.w);\n"
           "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
           "    r1.xyz = normalize(r1.xyz).xyz;\n"
           "    r1.y = dot(r1.xyz, hg_ProgramLocal4.xyz);\n"
           "    r1.w = dot(-r0.xyz, hg_ProgramLocal15.xyz);\n"
           "    r1.y = max(r1.y, c0.x);\n"
           "    r2.z = pow(r1.y, hg_ProgramLocal3.z);\n"
           "    r2.x = hg_ProgramLocal12.x - hg_ProgramLocal13.x;\n"
           "    r2.y = 1.00000 / r2.x;\n"
           "    r1.x = float(r1.w < hg_ProgramLocal13.x);\n"
           "    r2.x = r1.w - hg_ProgramLocal13.x;\n"
           "    r2.x = clamp(r2.x*r2.y, 0.00000, 1.00000);\n"
           "    r2.y = r2.x*c0.z + c0.w;\n"
           "    r2.x = r2.x*r2.x;\n"
           "    r0.w = 1.00000 / r0.w;\n"
           "    r0.y = dot(r0.xyz, hg_ProgramLocal4.xyz);\n"
           "    r0.w = r0.w - hg_ProgramLocal7.w;\n"
           "    r0.xw = max(r0.wy, c0.xx);\n"
           "    r0.z = r0.x*hg_ProgramLocal6.y + hg_ProgramLocal6.x;\n"
           "    r0.y = r0.x*hg_ProgramLocal6.z;\n"
           "    r0.x = r0.y*r0.x + r0.z;\n"
           "    r0.x = max(r0.x, c0.y);\n"
           "    r0.y = float(c1.y < abs(r0.w));\n"
           "    r1.x = float(-r1.x >= c0.x);\n"
           "    r1.y = float(r1.w < hg_ProgramLocal12.x);\n"
           "    r1.z = min(r1.x, r1.y);\n"
           "    r1.x = r1.x*r1.y + -r1.x;\n"
           "    r2.x = r2.x*r2.y;\n"
           "    r1.z = -r1.z < 0.00000 ? r2.x : c0.x;\n"
           "    r1.y = pow(r1.w, hg_ProgramLocal14.y);\n"
           "    r1.x = r1.x < 0.00000 ? r1.y : r1.z;\n"
           "    r0.x = r1.x/r0.x;\n"
           "    r2.x = -r0.y < 0.00000 ? r2.z : c0.x;\n"
           "    r0.xyz = r0.xxx*hg_ProgramLocal1.xyz;\n"
           "    r2.xyz = r0.xyz*r2.xxx;\n"
           "    r2.xyz = r2.xyz*hg_ProgramLocal2.xyz;\n"
           "    r2.xyz = r0.www*r0.xyz + r2.xyz;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.xyz = r1.xyz + r2.xyz;\n"
           "    gl_FragColor.w = r1.w;\n"
           "}\n"
           "//MD5=97a6a3d5:75f0ced2:9f9d6cba:b992d90b\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0010:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramSpotSurface::InitProgramDescriptor(LiHeLightProgramSpotSurface *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramSpotSurface_hgc_visible", "//Metal1.0     \n//LEN=0000000940\n[[ visible ]] FragmentOut LiHeLightProgramSpotSurface_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[9];\n"
    "    r0 = texCoord1.xxxx*hg_Params[8] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[10] + r0;\n"
    "    r1 = r0 + hg_Params[11];\n"
    "    r0.x = float(r0.w < -hg_Params[11].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r1.xyz = r1.xyz/r0.xxx;\n"
    "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
    "    r0.w = rsqrt(r0.w);\n"
    "    r0.xyz = r0.www*r0.xyz;\n"
    "    r1.w = dot(r1.xyz, r1.xyz);\n"
    "    r1.w = rsqrt(r1.w);\n"
    "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
    "    r1.xyz = normalize(r1.xyz).xyz;\n"
    "    r1.y = dot(r1.xyz, hg_Params[4].xyz);\n"
    "    r1.w = dot(-r0.xyz, hg_Params[15].xyz);\n"
    "    r1.y = fmax(r1.y, c0.x);\n"
    "    r2.z = pow(r1.y, hg_Params[3].z);\n"
    "    r2.x = hg_Params[12].x - hg_Params[13].x;\n"
    "    r2.y = 1.00000f / r2.x;\n"
    "    r1.x = float(r1.w < hg_Params[13].x);\n"
    "    r2.x = r1.w - hg_Params[13].x;\n"
    "    r2.x = clamp(r2.x*r2.y, 0.00000f, 1.00000f);\n"
    "    r2.y = r2.x*c0.z + c0.w;\n"
    "    r2.x = r2.x*r2.x;\n"
    "    r0.w = 1.00000f / r0.w;\n"
    "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
    "    r0.w = r0.w - hg_Params[7].w;\n"
    "    r0.xw = fmax(r0.wy, c0.xx);\n"
    "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
    "    r0.y = r0.x*hg_Params[6].z;\n"
    "    r0.x = r0.y*r0.x + r0.z;\n"
    "    r0.x = fmax(r0.x, c0.y);\n"
    "    r0.y = float(c1.y < fabs(r0.w));\n"
    "    r1.x = float(-r1.x >= c0.x);\n"
    "    r1.y = float(r1.w < hg_Params[12].x);\n"
    "    r1.z = fmin(r1.x, r1.y);\n"
    "    r1.x = r1.x*r1.y + -r1.x;\n"
    "    r2.x = r2.x*r2.y;\n"
    "    r1.z = select(c0.x, r2.x, -r1.z < 0.00000f);\n"
    "    r1.y = pow(r1.w, hg_Params[14].y);\n"
    "    r1.x = select(r1.z, r1.y, r1.x < 0.00000f);\n"
    "    r0.x = r1.x/r0.x;\n"
    "    r2.x = select(c0.x, r2.z, -r0.y < 0.00000f);\n"
    "    r0.xyz = r0.xxx*hg_Params[1].xyz;\n"
    "    r2.xyz = r0.xyz*r2.xxx;\n"
    "    r2.xyz = r2.xyz*hg_Params[2].xyz;\n"
    "    r2.xyz = r0.www*r0.xyz + r2.xyz;\n"
    "    r1 = color0;\n"
    "    output.color0.xyz = r1.xyz + r2.xyz;\n"
    "    output.color0.w = r1.w;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLightProgramSpotSurface");
}

void sub_1B7B7A264(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E762D0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7A3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7A3EC()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7A3E4);
}

void *LiHeLightProgramSpotSurface::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramSpotSurface [hgc1]");
}

uint64_t LiHeLightProgramSpotSurface::BindTexture(LiHeLightProgramSpotSurface *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramSpotSurface::Bind(LiHeLightProgramSpotSurface *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLightProgramSpotSurface::RenderTile(LiHeLightProgramSpotSurface *this, int32x2_t *a2)
{
  int v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = a2[1].i32[0] - a2->i32[0];
    int32x2_t v5 = a2[2];
    int32x2_t v6 = a2[10];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    float32x4_t v126 = v7;
    uint64_t v8 = 16 * a2[3].i32[0];
    uint64_t v9 = 16 * a2[11].i32[0];
    do
    {
      if (v4 >= 1)
      {
        uint64_t v10 = 0;
        float32x4_t v11 = v126;
        do
        {
          float32x4_t v134 = v11;
          uint64_t v12 = *((void *)this + 51);
          float32x4_t v13 = *(float32x4_t *)(v12 + 176);
          float32x4_t v14 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v12 + 144), *(float32x2_t *)v11.f32, 1), vmulq_n_f32(*(float32x4_t *)(v12 + 128), v11.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v12 + 160), v11, 2));
          float32x4_t v15 = vaddq_f32(v13, v14);
          int8x16_t v16 = (int8x16_t)vcgtq_f32(vnegq_f32(v13), v14);
          float32x4_t v17 = *(float32x4_t *)(v12 + 256);
          int8x16_t v133 = *(int8x16_t *)(v12 + 272);
          float32x4_t v18 = (float32x4_t)vandq_s8((int8x16_t)v17, v16);
          int32x4_t v19 = (int32x4_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v15), v17);
          v18.i64[0] = vbslq_s8(v133, vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v17)).u64[0];
          v18.i64[1] = v19.i64[1];
          float32x4_t v20 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v18, v17), (int8x16_t)vdupq_laneq_s32(v19, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)), 0);
          float32x4_t v22 = *(float32x4_t *)(v12 + 288);
          float32x4_t v21 = *(float32x4_t *)(v12 + 304);
          float32x4_t v23 = vminq_f32(vmaxq_f32(vrecpeq_f32(v20), v22), v21);
          float32x4_t v24 = vminq_f32(vmaxq_f32(vmulq_f32(v23, vrecpsq_f32(v20, v23)), v22), v21);
          float32x4_t v25 = vmulq_f32(v15, vmulq_f32(v24, vrecpsq_f32(v20, v24)));
          float32x4_t v26 = vsubq_f32(*(float32x4_t *)v12, v25);
          int32x4_t v27 = (int32x4_t)vmulq_f32(v26, v26);
          float32x4_t v28 = *(float32x4_t *)(v12 + 64);
          int8x16_t v29 = *(int8x16_t *)(v12 + 320);
          float32x4_t v30 = *(float32x4_t *)(v12 + 336);
          float32x4_t v31 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v27), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL))), (int8x16_t)v26);
          float32x4_t v32 = vsubq_f32(*(float32x4_t *)(v12 + 80), vmulq_laneq_f32(v25, *(float32x4_t *)(v12 + 80), 3));
          float32x4_t v33 = vminq_f32(vrsqrteq_f32(v31), v21);
          float32x4_t v34 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v33, v31), v33)), v21);
          int32x4_t v35 = (int32x4_t)vmulq_f32(v32, v32);
          int8x16_t v36 = (int8x16_t)vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v34, v31), v34));
          float32x4_t v37 = (float32x4_t)vbslq_s8(v29, v36, (int8x16_t)v26);
          float32x4_t v38 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v35), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL))), (int8x16_t)v32);
          float32x4_t v39 = vminq_f32(vrsqrteq_f32(v38), v21);
          int8x16_t v40 = (int8x16_t)vmulq_laneq_f32(v37, v37, 3);
          float32x4_t v41 = vminq_f32(vmulq_f32(v39, vrsqrtsq_f32(vmulq_f32(v39, v38), v39)), v21);
          float32x4_t v42 = (float32x4_t)vbslq_s8(v29, v36, v40);
          float32x4_t v43 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_f32(v41, vrsqrtsq_f32(vmulq_f32(v41, v38), v41)), (int8x16_t)v32);
          float32x4_t v44 = vaddq_f32(vmulq_laneq_f32(v43, v43, 3), v42);
          int32x4_t v45 = (int32x4_t)vmulq_f32(v44, v44);
          float32x4_t v46 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v45, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 1)));
          float32x4_t v47 = vminq_f32(vrsqrteq_f32(v46), v21);
          float32x4_t v48 = vminq_f32(vmulq_f32(v47, vrsqrtsq_f32(vmulq_f32(v47, v46), v47)), v21);
          float32x4_t v49 = vmulq_f32(v28, vmulq_f32(vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v48, v46), v48)), v44));
          int32x4_t v50 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v12 + 240), vnegq_f32(v42));
          v49.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v49, v133, 4uLL), vaddq_f32(v49, (float32x4_t)vrev64q_s32((int32x4_t)v49))).u64[0];
          int8x16_t v51 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v50), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL), (float32x4_t)vdupq_lane_s64(v50.i64[0], 0)));
          v49.i64[1] = v51.i64[1];
          v50.i64[0] = vmaxq_f32(v49, v30).u64[0];
          v50.i64[1] = v51.i64[1];
          float32x4_t v52 = *(float32x4_t *)(v12 + 48);
          float32x4_t v53 = *(float32x4_t *)(v12 + 352);
          float32x4_t v131 = *(float32x4_t *)(v12 + 224);
          int32x4_t v132 = *(int32x4_t *)(v12 + 368);
          float32x4_t v54 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL);
          float32x4_t v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v53, (int8x16_t)vceqq_f32(v52, v30)), v30), (int8x16_t)v53, (int8x16_t)v54);
          float32x4_t v56 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v55, (int8x16_t)v132), (int8x16_t)v53);
          float32x4_t v129 = *(float32x4_t *)(v12 + 400);
          float32x4_t v130 = *(float32x4_t *)(v12 + 384);
          float32x4_t v127 = *(float32x4_t *)(v12 + 416);
          float32x4_t v128 = *(float32x4_t *)(v12 + 432);
          float32x4_t v57 = (float32x4_t)vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v56, v128));
          float32x4_t v59 = *(float32x4_t *)(v12 + 448);
          float32x4_t v58 = *(float32x4_t *)(v12 + 464);
          float32x4_t v60 = vsubq_f32(vsubq_f32(v56, v53), vmulq_f32(vmulq_f32(v59, v57), v56));
          float32x4_t v61 = vmulq_f32(v60, v60);
          float32x4_t v62 = *(float32x4_t *)(v12 + 480);
          float32x4_t v63 = *(float32x4_t *)(v12 + 496);
          float32x4_t v65 = *(float32x4_t *)(v12 + 512);
          float32x4_t v64 = *(float32x4_t *)(v12 + 528);
          float32x4_t v66 = vmulq_f32(v61, vaddq_f32(vaddq_f32(v58, vmulq_f32(v62, v60)), vmulq_f32(v61, vaddq_f32(v63, vmulq_f32(v65, v60)))));
          float32x4_t v67 = *(float32x4_t *)(v12 + 544);
          float32x4_t v68 = *(float32x4_t *)(v12 + 560);
          float32x4_t v69 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v55, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v129, (int8x16_t)vcgtq_f32(v130, v55))), v127), v57), vmulq_f32(v60, vaddq_f32(v68, vmulq_f32(v60, vaddq_f32(vaddq_f32(v64, vmulq_f32(v67, v60)), v66)))));
          float32x4_t v71 = *(float32x4_t *)(v12 + 576);
          float32x4_t v70 = *(float32x4_t *)(v12 + 592);
          float32x4_t v72 = vmaxq_f32(vmulq_f32(v52, v69), v71);
          float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
          float32x4_t v74 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v73, v72)));
          float32x4_t v75 = vsubq_f32(v72, v74);
          float32x4_t v77 = *(float32x4_t *)(v12 + 608);
          float32x4_t v76 = *(float32x4_t *)(v12 + 624);
          float32x4_t v79 = *(float32x4_t *)(v12 + 640);
          float32x4_t v78 = *(float32x4_t *)(v12 + 656);
          int32x4_t v81 = *(int32x4_t *)(v12 + 672);
          int8x16_t v80 = *(int8x16_t *)(v12 + 688);
          int64x2_t v82 = (int64x2_t)vmulq_f32(vaddq_f32(v53, vmulq_f32(v75, vaddq_f32(v78, vmulq_f32(v75, vaddq_f32(vaddq_f32(v76, vmulq_f32(v79, v75)), vmulq_f32(vmulq_f32(v75, v75), vaddq_f32(v70, vmulq_f32(v77, v75)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v74), v81), 0x17uLL));
          float32x4_t v84 = *(float32x4_t *)(v12 + 192);
          float32x4_t v83 = *(float32x4_t *)(v12 + 208);
          v75.i64[0] = vsubq_f32(v84, v83).u64[0];
          v75.i64[1] = vdupq_laneq_s64(v82, 1).u64[0];
          float32x4_t v85 = (float32x4_t)vrev64q_s32((int32x4_t)v75);
          float32x4_t v86 = vminq_f32(vmaxq_f32(vmulq_f32(v78, vrecpeq_f32(v85)), v79), v21);
          v85.i64[0] = vmulq_f32(v86, vrecpsq_f32(v85, v86)).u64[0];
          v85.i64[1] = v82.i64[1];
          float32x4_t v87 = (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v54));
          v86.i64[0] = vextq_s8(v51, (int8x16_t)v87, 0xCuLL).u64[0];
          *(int8x8_t *)&v86.u32[2] = vext_s8(*(int8x8_t *)v87.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), 4uLL);
          float32x4_t v88 = (float32x4_t)vbslq_s8(v133, (int8x16_t)vsubq_f32(v86, v83), (int8x16_t)v85);
          float32x4_t v89 = vminq_f32(vmaxq_f32(vrecpeq_f32(v42), v78), v21);
          float32x4_t v90 = vminq_f32(vmaxq_f32(vmulq_f32(v89, vrecpsq_f32(v42, v89)), v78), v21);
          float32x4_t v91 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_f32(v90, vrecpsq_f32(v42, v90)), v40);
          float32x4_t v92 = vmulq_f32(v28, v91);
          *(float32x2_t *)v92.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v88, 4uLL), vadd_f32(*(float32x2_t *)v92.f32, (float32x2_t)vrev64_s32(*(int32x2_t *)v92.f32)));
          int8x16_t v93 = *(int8x16_t *)(v12 + 96);
          *(float32x2_t *)&v92.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v12 + 112), *(int8x16_t *)(v12 + 112), 8uLL));
          v91.i64[0] = vminq_f32(vmaxq_f32(vmulq_lane_f32(v88, *(float32x2_t *)v88.f32, 1), v79), v78).u64[0];
          v86.i64[0] = v91.i64[0];
          v91.i64[1] = vdupq_laneq_s64((int64x2_t)v88, 1).u64[0];
          *(int8x8_t *)v40.i8 = vqtbl1_s8((int8x16_t)v92, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL));
          *(int8x8_t *)v92.f32 = vqtbl1_s8((int8x16_t)v92, *(int8x8_t *)v81.i8);
          v92.i64[1] = v40.i64[0];
          int8x16_t v94 = (int8x16_t)vmaxq_f32(v92, v79);
          int8x16_t v95 = *(int8x16_t *)(v12 + 704);
          int8x16_t v96 = vbslq_s8(v95, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v93, v93, 8uLL), vmulq_n_f32((float32x4_t)vextq_s8(v93, v93, 0xCuLL), *(float *)v94.i32)), v94);
          v87.i64[1] = v51.i64[1];
          float32x4_t v97 = (float32x4_t)vbslq_s8(v80, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v93, v93, 4uLL), *(float *)v96.i32), v96);
          int8x16_t v98 = vandq_s8((int8x16_t)v78, (int8x16_t)vcgeq_f32(vnegq_f32(v87), v79));
          v86.i64[1] = v88.i64[1];
          float32x4_t v99 = (float32x4_t)vextq_s8(v51, v98, 8uLL);
          v98.i64[1] = v51.i64[1];
          int8x16_t v100 = vbslq_s8(v80, vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v84), v99)), v98);
          float32x4_t v101 = (float32x4_t)vbslq_s8(v80, (int8x16_t)vaddq_f32(v76, vmulq_f32(v77, (float32x4_t)vrev64q_s32((int32x4_t)v91))), (int8x16_t)v86);
          float32x4_t v102 = (float32x4_t)vbslq_s8(v95, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v100, v100, 8uLL), (float32x4_t)vextq_s8(v100, v100, 0xCuLL)), v100);
          float32x4_t v103 = (float32x4_t)vbslq_s8(v133, (int8x16_t)vmulq_f32(v101, v101), (int8x16_t)v101);
          v91.i64[0] = vsubq_f32(vmulq_lane_f32(v102, *(float32x2_t *)v102.f32, 1), v102).u64[0];
          v91.i64[1] = v102.i64[1];
          int8x16_t v104 = vextq_s8((int8x16_t)v103, (int8x16_t)vmulq_lane_f32(v103, *(float32x2_t *)v103.f32, 1), 8uLL);
          int8x16_t v105 = vbslq_s8(v95, vbslq_s8((int8x16_t)vcgtq_f32(v91, v30), v104, (int8x16_t)v30), (int8x16_t)v91);
          v91.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v97, 1), vmulq_lane_f32(v97, *(float32x2_t *)v97.f32, 1)).u64[0];
          v91.i64[1] = v97.i64[1];
          int8x16_t v106 = (int8x16_t)vmaxq_f32(v91, v76);
          float32x4_t v107 = (float32x4_t)vextq_s8((int8x16_t)v97, v106, 8uLL);
          v106.i64[1] = v97.i64[1];
          float32x4_t v108 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vceqq_f32(v131, v68)), v68), (int8x16_t)v71, vextq_s8(v105, v105, 8uLL));
          float32x4_t v109 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v108, (int8x16_t)v81), (int8x16_t)v71);
          float32x4_t v110 = (float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32(v109, v63));
          float32x4_t v111 = vsubq_f32(vsubq_f32(v109, v71), vmulq_f32(vmulq_f32(v62, v110), v109));
          float32x4_t v112 = vmulq_f32(v111, v111);
          float32x4_t v113 = vmaxq_f32(vmulq_f32(v131, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v108, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32(v67, v108))), v65), v110), vmulq_f32(v111, vaddq_f32(v53, vmulq_f32(v111, vaddq_f32(vaddq_f32(v129, vmulq_f32(v130, v111)), vmulq_f32(
                                 v112,
                                 vaddq_f32(vaddq_f32(v58, vmulq_f32(v59, v111)), vmulq_f32(v112, vaddq_f32(v128, vmulq_f32(v127, v111))))))))))), *(float32x4_t *)(v12 + 720));
          float32x4_t v114 = (float32x4_t)vbslq_s8(v80, vandq_s8((int8x16_t)vcagtq_f32(v107, v70), (int8x16_t)v71), v106);
          float32x4_t v115 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
          float32x4_t v116 = vsubq_f32(v115, (float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32(v115, v113)));
          float32x4_t v117 = vsubq_f32(v113, v116);
          float32x4_t v118 = *(float32x4_t *)(v12 + 784);
          float32x4_t v119 = *(float32x4_t *)(v12 + 800);
          float32x4_t v120 = (float32x4_t)vbslq_s8(v80, (int8x16_t)vmulq_f32(vaddq_f32(v71, vmulq_f32(v117, vaddq_f32(v119, vmulq_f32(v117, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 768), vmulq_f32(v118, v117)), vmulq_f32(vmulq_f32(v117, v117), vaddq_f32(*(float32x4_t *)(v12 + 736), vmulq_f32(*(float32x4_t *)(v12 + 752), v117)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v116), v132), 0x17uLL)), v105);
          float32x4_t v121 = vminq_f32(vmaxq_f32(vrecpeq_f32(v114), v118), v21);
          float32x4_t v122 = vminq_f32(vmaxq_f32(vmulq_f32(v121, vrecpsq_f32(v114, v121)), v118), v21);
          int32x4_t v123 = (int32x4_t)vbslq_s8(v133, (int8x16_t)vmulq_f32(vmulq_f32(v122, vrecpsq_f32(v114, v122)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v119, v120), (int8x16_t)vrev64q_s32((int32x4_t)v120), vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL))), (int8x16_t)v114);
          v104.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v123), v119), v104, (int8x16_t)v119).u32[0];
          float32x4_t v124 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v123, (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v12 + 16), *(float *)v123.i32));
          *(int8x16_t *)(*(void *)&v5 + v1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = vbslq_s8(v29, *(int8x16_t *)(*(void *)&v6 + v10), (int8x16_t)vaddq_f32(*(float32x4_t *)(*(void *)&v6 + v10), vaddq_f32(vmulq_f32(*(float32x4_t *)(v12 + 32), vmulq_n_f32(v124, *(float *)v104.i32)), vmulq_laneq_f32(v124, v124, 3))));
          float32x4_t v11 = vaddq_f32(v134, (float32x4_t)xmmword_1B7E736B0);
          v10 += 16;
        }
        while (16 * v4 != v10);
      }
      float32x4_t v126 = vaddq_f32(v126, (float32x4_t)xmmword_1B7E736C0);
      ++v3;
      *(void *)&v5 += v8;
      *(void *)&v6 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramSpotSurface::GetDOD(LiHeLightProgramSpotSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLightProgramSpotSurface::GetROI(LiHeLightProgramSpotSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLightProgramSpotSurface::LiHeLightProgramSpotSurface(LiHeLightProgramSpotSurface *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F11305C8;
  operator new();
}

void sub_1B7B7B0B8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(HGNode *this)
{
  *(void *)this = &unk_1F11305C8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40A461079ELL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramSpotSurface::SetParameter(LiHeLightProgramSpotSurface *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      float32x4_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      float *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      PCSharedCount v7[3] = a6;
      goto LABEL_83;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_83;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_83;
    case 3:
      float32x4_t v11 = (__n128 *)*((void *)this + 51);
      if (v11[3].n128_f32[0] == 0.0
        && v11[3].n128_f32[1] == 0.0
        && v11[3].n128_f32[2] == a3.n128_f32[0]
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u64[0] = 0;
      v11[3].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[51] = a3;
      goto LABEL_83;
    case 4:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      double v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      void v12[19] = a6;
      goto LABEL_83;
    case 5:
      float32x4_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_83;
    case 6:
      float32x4_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_83;
    case 7:
      float32x4_t v15 = (__n128 *)*((void *)this + 51);
      if (v15[7].n128_f32[0] == 0.0
        && v15[7].n128_f32[1] == 0.0
        && v15[7].n128_f32[2] == 0.0
        && v15[7].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v15[7].n128_u64[0] = 0;
      v15[7].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[52] = a3;
      goto LABEL_83;
    case 8:
      int8x16_t v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_83;
    case 9:
      float32x4_t v17 = (float *)*((void *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6) {
        return 0;
      }
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_83;
    case 10:
      float32x4_t v18 = (float *)*((void *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6) {
        return 0;
      }
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_83;
    case 11:
      int32x4_t v19 = (float *)*((void *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6) {
        return 0;
      }
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
      goto LABEL_83;
    case 12:
      float32x4_t v20 = (float *)*((void *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6) {
        return 0;
      }
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
      goto LABEL_83;
    case 13:
      float32x4_t v21 = (float *)*((void *)this + 51);
      if (v21[52] == a3.n128_f32[0] && v21[53] == a4 && v21[54] == a5 && v21[55] == a6) {
        return 0;
      }
      v21[52] = a3.n128_f32[0];
      v21[53] = a4;
      v21[54] = a5;
      v21[55] = a6;
      goto LABEL_83;
    case 14:
      float32x4_t v22 = (__n128 *)*((void *)this + 51);
      if (v22[14].n128_f32[0] == 0.0
        && v22[14].n128_f32[1] == a3.n128_f32[0]
        && v22[14].n128_f32[2] == 0.0
        && v22[14].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v22[14].n128_u32[0] = 0;
      v22[14].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v22[14].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v22[53] = a3;
      goto LABEL_83;
    case 15:
      float32x4_t v23 = (float *)*((void *)this + 51);
      if (v23[60] == a3.n128_f32[0] && v23[61] == a4 && v23[62] == a5 && v23[63] == a6) {
        return 0;
      }
      v23[60] = a3.n128_f32[0];
      v23[61] = a4;
      v23[62] = a5;
      v23[63] = a6;
LABEL_83:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeLightProgramSpotSurface::GetParameter(LiHeLightProgramSpotSurface *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      int v4 = v3 + 3;
      goto LABEL_18;
    case 1:
      int32x2_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_18;
    case 2:
      int32x2_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      int v4 = v6 + 11;
      goto LABEL_18;
    case 3:
      float32x4_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[204];
      a3[1] = v7[205];
      a3[2] = v7[206];
      int v4 = v7 + 207;
      goto LABEL_18;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      int v4 = v8 + 19;
      goto LABEL_18;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      int v4 = v9 + 23;
      goto LABEL_18;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      int v4 = v10 + 27;
      goto LABEL_18;
    case 7:
      float32x4_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[208];
      a3[1] = v11[209];
      a3[2] = v11[210];
      int v4 = v11 + 211;
      goto LABEL_18;
    case 8:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      int v4 = v12 + 35;
      goto LABEL_18;
    case 9:
      float32x4_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      int v4 = v13 + 39;
      goto LABEL_18;
    case 10:
      float32x4_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      int v4 = v14 + 43;
      goto LABEL_18;
    case 11:
      float32x4_t v15 = (float *)*((void *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      int v4 = v15 + 47;
      goto LABEL_18;
    case 12:
      int8x16_t v16 = (float *)*((void *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      int v4 = v16 + 51;
      goto LABEL_18;
    case 13:
      float32x4_t v17 = (float *)*((void *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      int v4 = v17 + 55;
      goto LABEL_18;
    case 14:
      float32x4_t v18 = (float *)*((void *)this + 51);
      *a3 = v18[212];
      a3[1] = v18[213];
      a3[2] = v18[214];
      int v4 = v18 + 215;
      goto LABEL_18;
    case 15:
      int32x4_t v19 = (float *)*((void *)this + 51);
      *a3 = v19[60];
      a3[1] = v19[61];
      a3[2] = v19[62];
      int v4 = v19 + 63;
LABEL_18:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double LiHeLightProgramSpotSurface::State::State(LiHeLightProgramSpotSurface::State *this)
{
  double result = 0.0;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B837F030;
  *((_OWORD *)this + 17) = xmmword_1B7E751A0;
  *((_OWORD *)this + 18) = xmmword_1B7E76500;
  *((int32x4_t *)this + 19) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B7E752F0;
  *((_OWORD *)this + 21) = xmmword_1B7E77730;
  *((_OWORD *)this + 22) = xmmword_1B837F130;
  *((_OWORD *)this + 23) = xmmword_1B837F140;
  *((_OWORD *)this + 24) = xmmword_1B837F150;
  *((_OWORD *)this + 25) = xmmword_1B837F160;
  *((_OWORD *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B837F170;
  *((_OWORD *)this + 27) = xmmword_1B837F180;
  *((_OWORD *)this + 28) = xmmword_1B837F190;
  *((_OWORD *)this + 29) = xmmword_1B837F1A0;
  *((_OWORD *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B837F1B0;
  *((_OWORD *)this + 31) = xmmword_1B837F1C0;
  *((_OWORD *)this + 32) = xmmword_1B837F1D0;
  *((_OWORD *)this + 33) = xmmword_1B837F1E0;
  *((_OWORD *)this + 34) = xmmword_1B837F1F0;
  *((_OWORD *)this + 35) = xmmword_1B837F200;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B837F210;
  *((_OWORD *)this + 37) = xmmword_1B837F220;
  *((_OWORD *)this + 38) = xmmword_1B837F230;
  *((_OWORD *)this + 39) = xmmword_1B837F240;
  *((_OWORD *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B837F250;
  *((_OWORD *)this + 41) = xmmword_1B837F260;
  *((_OWORD *)this + 42) = xmmword_1B837F270;
  *((_OWORD *)this + 43) = xmmword_1B7E75360;
  *((_OWORD *)this + 44) = xmmword_1B7E75350;
  *((_OWORD *)this + 45) = xmmword_1B8377870;
  *((_OWORD *)this + 4ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B8377880;
  *((_OWORD *)this + 47) = xmmword_1B8377890;
  *((_OWORD *)this + 48) = xmmword_1B83778A0;
  *((_OWORD *)this + 49) = xmmword_1B837F280;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 5std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B837F290;
  *((_OWORD *)this + 51) = 0u;
  return result;
}

const char *LiHeLightProgramSpotSurfaceDiffuse::GetProgram(LiHeLightProgramSpotSurfaceDiffuse *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000088d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[5] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[7] + s0;\n"
             "    s1 = s0 + hg_Params[8];\n"
             "    s0.x = float(s0.w < -hg_Params[8].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.x = rsqrt(s0.w);\n"
             "    s0.w = 1.00000f / s1.x;\n"
             "    s0.w = s0.w - hg_Params[4].w;\n"
             "    s0.w = fmax(s0.w, float(c0.x));\n"
             "    s0.xyz = s1.xxx*s0.xyz;\n"
             "    s1.z = s0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    s1.y = s0.w*hg_Params[3].z;\n"
             "    s0.w = s1.y*s0.w + s1.z;\n"
             "    s0.w = fmax(s0.w, float(c0.y));\n"
             "    s1.x = 1.00000f / s0.w;\n"
             "    s0.w = dot(-s0.xyz, hg_Params[12].xyz);\n"
             "    s2.x = float(s0.w < hg_Params[9].x);\n"
             "    s2.y = hg_Params[9].x - hg_Params[10].x;\n"
             "    s2.w = s0.w - hg_Params[10].x;\n"
             "    s2.z = clamp(s2.w/s2.y, 0.00000f, 1.00000f);\n"
             "    s2.y = float(-s2.x >= float(c0.x));\n"
             "    s2.x = float(s0.w >= hg_Params[10].x);\n"
             "    s2.x = fmin(s2.x, s2.y);\n"
             "    s2.y = s2.z*float(c0.z) + float(c0.w);\n"
             "    s2.z = s2.z*s2.z;\n"
             "    s2.y = s2.z*s2.y;\n"
             "    s0.w = pow(s0.w, hg_Params[11].w);\n"
             "    s0.w = select(s2.y, s0.w, -s2.x < 0.00000h);\n"
             "    s0.w = s0.w*s1.x;\n"
             "    s1.x = dot(s0.xyz, hg_Params[2].xyz);\n"
             "    s2.xyz = s0.www*hg_Params[1].xyz;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s1.x = fmax(s1.x, float(c0.x));\n"
             "    s2.xyz = s2.xyz*s1.xxx + float3(r0.xyz);\n"
             "    output.color0.xyz = select(s2.xyz, float3(r0.xyz), s2.www < 0.00000h);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2fa4b393:d492b225:c388fdbe:c1b83462\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000d:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000082b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[5] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[7] + r0;\n"
             "    r1 = r0 + hg_Params[8];\n"
             "    r0.x = float(r0.w < -hg_Params[8].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.x = rsqrt(r0.w);\n"
             "    r0.w = 1.00000f / r1.x;\n"
             "    r0.w = r0.w - hg_Params[4].w;\n"
             "    r0.w = fmax(r0.w, c0.x);\n"
             "    r0.xyz = r1.xxx*r0.xyz;\n"
             "    r1.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    r1.y = r0.w*hg_Params[3].z;\n"
             "    r0.w = r1.y*r0.w + r1.z;\n"
             "    r0.w = fmax(r0.w, c0.y);\n"
             "    r1.x = 1.00000f / r0.w;\n"
             "    r0.w = dot(-r0.xyz, hg_Params[12].xyz);\n"
             "    r2.x = float(r0.w < hg_Params[9].x);\n"
             "    r2.y = hg_Params[9].x - hg_Params[10].x;\n"
             "    r2.w = r0.w - hg_Params[10].x;\n"
             "    r2.z = clamp(r2.w/r2.y, 0.00000f, 1.00000f);\n"
             "    r2.y = float(-r2.x >= c0.x);\n"
             "    r2.x = float(r0.w >= hg_Params[10].x);\n"
             "    r2.x = fmin(r2.x, r2.y);\n"
             "    r2.y = r2.z*c0.z + c0.w;\n"
             "    r2.z = r2.z*r2.z;\n"
             "    r2.y = r2.z*r2.y;\n"
             "    r0.w = pow(r0.w, hg_Params[11].w);\n"
             "    r0.w = select(r2.y, r0.w, -r2.x < 0.00000f);\n"
             "    r0.w = r0.w*r1.x;\n"
             "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
             "    r2.xyz = r0.www*hg_Params[1].xyz;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r1.x, c0.x);\n"
             "    r2.xyz = r2.xyz*r1.xxx + r0.xyz;\n"
             "    output.color0.xyz = select(r2.xyz, r0.xyz, r2.www < 0.00000f);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=01cfa6d7:ff8dcdd9:7e97e4e7:b2fef60e\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000d:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a35\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal6;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal5 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal7 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal8;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal8.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.x = inversesqrt(r0.w);\n"
           "    r0.w = 1.00000 / r1.x;\n"
           "    r0.w = r0.w - hg_ProgramLocal4.w;\n"
           "    r0.w = max(r0.w, c0.x);\n"
           "    r0.xyz = r1.xxx*r0.xyz;\n"
           "    r1.z = r0.w*hg_ProgramLocal3.y + hg_ProgramLocal3.x;\n"
           "    r1.y = r0.w*hg_ProgramLocal3.z;\n"
           "    r0.w = r1.y*r0.w + r1.z;\n"
           "    r0.w = max(r0.w, c0.y);\n"
           "    r1.x = 1.00000 / r0.w;\n"
           "    r0.w = dot(-r0.xyz, hg_ProgramLocal12.xyz);\n"
           "    r2.x = float(r0.w < hg_ProgramLocal9.x);\n"
           "    r2.y = hg_ProgramLocal9.x - hg_ProgramLocal10.x;\n"
           "    r2.w = r0.w - hg_ProgramLocal10.x;\n"
           "    r2.z = clamp(r2.w/r2.y, 0.00000, 1.00000);\n"
           "    r2.y = float(-r2.x >= c0.x);\n"
           "    r2.x = float(r0.w >= hg_ProgramLocal10.x);\n"
           "    r2.x = min(r2.x, r2.y);\n"
           "    r2.y = r2.z*c0.z + c0.w;\n"
           "    r2.z = r2.z*r2.z;\n"
           "    r2.y = r2.z*r2.y;\n"
           "    r0.w = pow(r0.w, hg_ProgramLocal11.w);\n"
           "    r0.w = -r2.x < 0.00000 ? r0.w : r2.y;\n"
           "    r0.w = r0.w*r1.x;\n"
           "    r1.x = dot(r0.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.xyz = r0.www*hg_ProgramLocal1.xyz;\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = max(r1.x, c0.x);\n"
           "    r2.xyz = r2.xyz*r1.xxx + r0.xyz;\n"
           "    gl_FragColor.xyz = vec3(r2.w < 0.00000 ? r0.x : r2.x, r2.w < 0.00000 ? r0.y : r2.y, r2.w < 0.00000 ? r0.z"
           " : r2.z);\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=baa72013:ee5c5bed:d4bcfe69:f7494a54\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000d:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramSpotSurfaceDiffuse::InitProgramDescriptor(LiHeLightProgramSpotSurfaceDiffuse *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramSpotSurfaceDiffuse_hgc_visible", "//Metal1.0     \n//LEN=000000071b\n[[ visible ]] FragmentOut LiHeLightProgramSpotSurfaceDiffuse_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[6];\n"
    "    r0 = texCoord1.xxxx*hg_Params[5] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[7] + r0;\n"
    "    r1 = r0 + hg_Params[8];\n"
    "    r0.x = float(r0.w < -hg_Params[8].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.x = rsqrt(r0.w);\n"
    "    r0.w = 1.00000f / r1.x;\n"
    "    r0.w = r0.w - hg_Params[4].w;\n"
    "    r0.w = fmax(r0.w, c0.x);\n"
    "    r0.xyz = r1.xxx*r0.xyz;\n"
    "    r1.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
    "    r1.y = r0.w*hg_Params[3].z;\n"
    "    r0.w = r1.y*r0.w + r1.z;\n"
    "    r0.w = fmax(r0.w, c0.y);\n"
    "    r1.x = 1.00000f / r0.w;\n"
    "    r0.w = dot(-r0.xyz, hg_Params[12].xyz);\n"
    "    r2.x = float(r0.w < hg_Params[9].x);\n"
    "    r2.y = hg_Params[9].x - hg_Params[10].x;\n"
    "    r2.w = r0.w - hg_Params[10].x;\n"
    "    r2.z = clamp(r2.w/r2.y, 0.00000f, 1.00000f);\n"
    "    r2.y = float(-r2.x >= c0.x);\n"
    "    r2.x = float(r0.w >= hg_Params[10].x);\n"
    "    r2.x = fmin(r2.x, r2.y);\n"
    "    r2.y = r2.z*c0.z + c0.w;\n"
    "    r2.z = r2.z*r2.z;\n"
    "    r2.y = r2.z*r2.y;\n"
    "    r0.w = pow(r0.w, hg_Params[11].w);\n"
    "    r0.w = select(r2.y, r0.w, -r2.x < 0.00000f);\n"
    "    r0.w = r0.w*r1.x;\n"
    "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
    "    r2.xyz = r0.www*hg_Params[1].xyz;\n"
    "    r0 = color0;\n"
    "    r1.x = fmax(r1.x, c0.x);\n"
    "    r2.xyz = r2.xyz*r1.xxx + r0.xyz;\n"
    "    output.color0.xyz = select(r2.xyz, r0.xyz, r2.www < 0.00000f);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLightProgramSpotSurfaceDiffuse");
}

void sub_1B7B7BB98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75540;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7BCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7BD20()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7BD18);
}

void *LiHeLightProgramSpotSurfaceDiffuse::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramSpotSurfaceDiffuse [hgc1]");
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::BindTexture(LiHeLightProgramSpotSurfaceDiffuse *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::Bind(LiHeLightProgramSpotSurfaceDiffuse *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::RenderTile(LiHeLightProgramSpotSurfaceDiffuse *this, int32x2_t *a2)
{
  int v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = a2[1].i32[0] - a2->i32[0];
    int32x2_t v5 = a2[2];
    int32x2_t v6 = a2[10];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    uint64_t v8 = 16 * a2[3].i32[0];
    uint64_t v9 = 16 * a2[11].i32[0];
    do
    {
      if (v4 >= 1)
      {
        uint64_t v10 = 0;
        float32x4_t v11 = v7;
        do
        {
          uint64_t v12 = *((void *)this + 51);
          float32x4_t v13 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v12 + 96), *(float32x2_t *)v11.f32, 1), vmulq_n_f32(*(float32x4_t *)(v12 + 80), v11.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v12 + 112), v11, 2));
          float32x4_t v14 = *(float32x4_t *)(v12 + 128);
          float32x4_t v15 = vaddq_f32(v14, v13);
          float32x4_t v16 = *(float32x4_t *)(v12 + 208);
          int8x16_t v17 = vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(vnegq_f32(v14), v13));
          int8x16_t v18 = *(int8x16_t *)(v12 + 224);
          float32x4_t v19 = *(float32x4_t *)(v12 + 240);
          int32x4_t v20 = (int32x4_t)vbslq_s8(v18, vextq_s8(v17, v17, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v16));
          int64x2_t v21 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v15), v16);
          v22.i64[0] = v20.i64[0];
          unint64_t v23 = vdupq_laneq_s64(v21, 1).u64[0];
          v22.i64[1] = v21.i64[1];
          int8x16_t v24 = vextq_s8((int8x16_t)v21, (int8x16_t)v20, 8uLL);
          v20.i64[1] = v23;
          float32x4_t v25 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v22, v16), v24, (int8x16_t)vrev64q_s32(v20));
          float32x4_t v27 = *(float32x4_t *)(v12 + 256);
          int8x16_t v26 = *(int8x16_t *)(v12 + 272);
          float32x4_t v28 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v19), v27);
          float32x4_t v29 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpsq_f32(v25, v28)), v19), v27);
          float32x4_t v30 = vsubq_f32(*(float32x4_t *)v12, vmulq_n_f32(v15, vmulq_f32(v29, vrecpsq_f32(v25, v29)).f32[0]));
          int32x4_t v31 = (int32x4_t)vmulq_f32(v30, v30);
          int8x16_t v32 = vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v31), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL))), (int8x16_t)v30);
          float32x4_t v33 = (float32x4_t)vextq_s8(v32, v32, 0xCuLL);
          float32x4_t v34 = vminq_f32(vrsqrteq_f32(v33), v27);
          float32x4_t v35 = vminq_f32(vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v34, v33), v34)), v27);
          int8x16_t v36 = (int8x16_t)vmulq_f32(v35, vrsqrtsq_f32(vmulq_f32(v35, v33), v35));
          float32x4_t v37 = (float32x4_t)vextq_s8(v36, v36, 4uLL);
          float32x4_t v38 = vminq_f32(vmaxq_f32(vrecpeq_f32(v37), v19), v27);
          float32x4_t v39 = vminq_f32(vmaxq_f32(vmulq_f32(v38, vrecpsq_f32(v37, v38)), v19), v27);
          int8x16_t v40 = (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_f32(v39, vrecpsq_f32(v37, v39)), (int8x16_t)v30), *(float32x4_t *)(v12 + 64)), (int8x16_t)v30), *(float32x4_t *)(v12 + 288));
          int8x16_t v41 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v26, v40, (int8x16_t)v30), *(float *)v36.i32);
          float32x4_t v42 = *(float32x4_t *)(v12 + 48);
          float32x4_t v43 = (float32x4_t)vbslq_s8(v26, v40, v41);
          float32x4_t v44 = vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v7, 4uLL), v43, 3);
          v44.i64[1] = vaddq_f32(v42, v44).u64[0];
          float32x4_t v45 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32(vmulq_lane_f32(v43, *(float32x2_t *)v44.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v44)), v41), *(float32x4_t *)(v12 + 304)), v41);
          float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL);
          float32x4_t v47 = vminq_f32(vmaxq_f32(vrecpeq_f32(v46), v19), v27);
          int32x4_t v48 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v12 + 192), vnegq_f32(v45));
          float32x4_t v49 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v48), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL))), v41);
          float32x4_t v50 = (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 0xCuLL);
          float32x4_t v52 = *(float32x4_t *)(v12 + 320);
          float32x4_t v51 = *(float32x4_t *)(v12 + 336);
          float32x4_t v53 = *(float32x4_t *)(v12 + 160);
          float32x4_t v54 = *(float32x4_t *)(v12 + 176);
          float32x4_t v55 = (float32x4_t)vbslq_s8(v18, vandq_s8((int8x16_t)v52, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v12 + 144), v50)), (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(*(float32x4_t *)(v12 + 144), v53)));
          float32x4_t v56 = vminq_f32(vmaxq_f32(vmulq_f32(v47, vrecpsq_f32(v46, v47)), v19), v27);
          float32x4_t v57 = vsubq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL));
          v58.i64[0] = vextq_s8((int8x16_t)v57, (int8x16_t)v55, 0xCuLL).u64[0];
          v55.i64[1] = v57.i64[1];
          *(int8x8_t *)&v58.u32[2] = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
          v46.i32[0] = vmulq_f32(v56, vrecpsq_f32(v46, v56)).u32[0];
          float32x4_t v59 = vminq_f32(vmaxq_f32(vrecpeq_f32(v58), v52), v27);
          float32x4_t v60 = vminq_f32(vmaxq_f32(vmulq_f32(v59, vrecpsq_f32(v58, v59)), v52), v27);
          int8x16_t v61 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_laneq_f32(vmulq_f32(v60, vrecpsq_f32(v58, v60)), v57, 3), v19), v51);
          int8x16_t v62 = *(int8x16_t *)(v12 + 352);
          int8x16_t v63 = *(int8x16_t *)(v12 + 368);
          float32x4_t v64 = (float32x4_t)vbslq_s8(v62, v61, (int8x16_t)v55);
          *(int32x2_t *)v55.f32 = vrev64_s32((int32x2_t)vand_s8(*(int8x8_t *)v52.f32, (int8x8_t)*(_OWORD *)&vcgeq_f32(vnegq_f32(v64), v51)));
          v55.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
          float32x4_t v65 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v52, (int8x16_t)vceqq_f32(v54, v51)), v51), (int8x16_t)v52, (int8x16_t)v49);
          float32x4_t v66 = (float32x4_t)vbslq_s8(v18, vandq_s8((int8x16_t)v52, (int8x16_t)vcgeq_f32(v50, v53)), (int8x16_t)v55);
          float32x4_t v67 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v65, *(int8x16_t *)(v12 + 384)), (int8x16_t)v52);
          v55.i64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
          float32x4_t v68 = (float32x4_t)vandq_s8((int8x16_t)v52, (int8x16_t)vcgtq_f32(v67, *(float32x4_t *)(v12 + 448)));
          v57.i64[0] = vminq_f32(v66, (float32x4_t)vrev64q_s32((int32x4_t)v66)).u64[0];
          float32x4_t v69 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v65, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v12 + 416), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v12 + 400), v65))), *(float32x4_t *)(v12 + 432)), v68);
          float32x4_t v70 = vsubq_f32(vsubq_f32(v67, v52), vmulq_f32(vmulq_f32(*(float32x4_t *)(v12 + 464), v68), v67));
          *(int8x8_t *)v68.f32 = vext_s8(*(int8x8_t *)v55.f32, *(int8x8_t *)v57.f32, 4uLL);
          *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v55.f32, 4uLL);
          float32x4_t v71 = vmulq_f32(v70, v70);
          v57.i64[1] = v66.i64[1];
          v55.i64[1] = v68.i64[0];
          float32x4_t v72 = vmaxq_f32(vmulq_f32(v54, vaddq_f32(v69, vmulq_f32(v70, vaddq_f32(*(float32x4_t *)(v12 + 576), vmulq_f32(v70, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 544), vmulq_f32(v70, *(float32x4_t *)(v12 + 560))), vmulq_f32(v71, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 480), vmulq_f32(*(float32x4_t *)(v12 + 496), v70)), vmulq_f32(v71, vaddq_f32(*(float32x4_t *)(v12 + 512), vmulq_f32(*(float32x4_t *)(v12 + 528), v70))))))))))),
                  *(float32x4_t *)(v12 + 592));
          float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
          float32x4_t v74 = (float32x4_t)vbslq_s8(v63, (int8x16_t)vaddq_f32(v51, vmulq_f32(v52, v55)), (int8x16_t)v57);
          float32x4_t v75 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v52, (int8x16_t)vcgtq_f32(v73, v72)));
          float32x4_t v76 = vsubq_f32(v72, v75);
          float32x4_t v77 = (float32x4_t)vbslq_s8(v62, (int8x16_t)vmulq_f32(v74, v74), (int8x16_t)v74);
          float32x4_t v78 = *(float32x4_t *)(v12 + 672);
          int8x16_t v79 = vbslq_s8(v63, (int8x16_t)vmulq_laneq_f32(v77, v77, 2), (int8x16_t)v77);
          float32x4_t v80 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v26, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v79, v79, 4uLL), v51), vbslq_s8(v26, (int8x16_t)vmulq_f32(vaddq_f32(v52, vmulq_f32(v76, vaddq_f32(v78, vmulq_f32(v76,
                                                                                    vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 640), vmulq_f32(*(float32x4_t *)(v12 + 656), v76)), vmulq_f32(vmulq_f32(v76, v76), vaddq_f32(*(float32x4_t *)(v12 + 608), vmulq_f32(*(float32x4_t *)(v12 + 624), v76)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v12 + 688), vcvtq_s32_f32(v75)), 0x17uLL)), v41), vextq_s8(v79, v79, 8uLL)),
                                                           v41),
                                            v46.f32[0]),
                               v41);
          float32x4_t v81 = vmulq_f32(*(float32x4_t *)(v12 + 32), v80);
          float32x4_t v82 = *(float32x4_t *)(*(void *)&v6 + v10);
          int32x4_t v83 = (int32x4_t)vbslq_s8(v26, v79, (int8x16_t)vaddq_f32(v82, vmulq_n_f32((float32x4_t)vbslq_s8(v26, v79, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v12 + 16), v80, 3)), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), vaddq_f32(v81, (float32x4_t)vrev64q_s32((int32x4_t)v81))), v78).f32[0])));
          *(int8x16_t *)(*(void *)&v5 + v1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = vbslq_s8(v26, (int8x16_t)v82, vbslq_s8((int8x16_t)vcgtq_f32(v78, (float32x4_t)vdupq_laneq_s32(v83, 3)), (int8x16_t)v82, (int8x16_t)v83));
          float32x4_t v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B7E736B0);
          v10 += 16;
        }
        while (16 * v4 != v10);
      }
      float32x4_t v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B7E736C0);
      ++v3;
      *(void *)&v5 += v8;
      *(void *)&v6 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::GetDOD(LiHeLightProgramSpotSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::GetROI(LiHeLightProgramSpotSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLightProgramSpotSurfaceDiffuse::LiHeLightProgramSpotSurfaceDiffuse(LiHeLightProgramSpotSurfaceDiffuse *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1130830;
  operator new();
}

void sub_1B7B7C6D8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(HGNode *this)
{
  *(void *)this = &unk_1F1130830;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40843277B5);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::SetParameter(LiHeLightProgramSpotSurfaceDiffuse *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      float32x4_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      float *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      PCSharedCount v7[3] = a6;
      goto LABEL_69;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_69;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_69;
    case 3:
      uint64_t v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((void *)this + 51) + 704) = a3;
      return v8;
    case 4:
      float32x4_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_69;
    case 5:
      uint64_t v12 = (__n128 *)*((void *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == 0.0
        && v12[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[45] = a3;
      goto LABEL_69;
    case 6:
      float32x4_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_69;
    case 7:
      float32x4_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_69;
    case 8:
      float32x4_t v15 = (float *)*((void *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6) {
        return 0;
      }
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_69;
    case 9:
      float32x4_t v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_69;
    case 10:
      int8x16_t v17 = (float *)*((void *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6) {
        return 0;
      }
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_69;
    case 11:
      int8x16_t v18 = (float *)*((void *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6) {
        return 0;
      }
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_69;
    case 12:
      float32x4_t v19 = (__n128 *)*((void *)this + 51);
      if (v19[11].n128_f32[0] == 0.0
        && v19[11].n128_f32[1] == 0.0
        && v19[11].n128_f32[2] == 0.0
        && v19[11].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v19[11].n128_u64[0] = 0;
      v19[11].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v19[11].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v19[46] = a3;
      goto LABEL_69;
    case 13:
      int32x4_t v20 = (float *)*((void *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6) {
        return 0;
      }
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
LABEL_69:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeLightProgramSpotSurfaceDiffuse::GetParameter(LiHeLightProgramSpotSurfaceDiffuse *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      int v4 = v3 + 3;
      goto LABEL_16;
    case 1:
      int32x2_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_16;
    case 2:
      int32x2_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      int v4 = v6 + 11;
      goto LABEL_16;
    case 3:
      float32x4_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[176];
      a3[1] = v7[177];
      a3[2] = v7[178];
      int v4 = v7 + 179;
      goto LABEL_16;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[12];
      a3[1] = v8[13];
      a3[2] = v8[14];
      int v4 = v8 + 15;
      goto LABEL_16;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[180];
      a3[1] = v9[181];
      a3[2] = v9[182];
      int v4 = v9 + 183;
      goto LABEL_16;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[20];
      a3[1] = v10[21];
      a3[2] = v10[22];
      int v4 = v10 + 23;
      goto LABEL_16;
    case 7:
      float32x4_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[24];
      a3[1] = v11[25];
      a3[2] = v11[26];
      int v4 = v11 + 27;
      goto LABEL_16;
    case 8:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[28];
      a3[1] = v12[29];
      a3[2] = v12[30];
      int v4 = v12 + 31;
      goto LABEL_16;
    case 9:
      float32x4_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      int v4 = v13 + 35;
      goto LABEL_16;
    case 10:
      float32x4_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[36];
      a3[1] = v14[37];
      a3[2] = v14[38];
      int v4 = v14 + 39;
      goto LABEL_16;
    case 11:
      float32x4_t v15 = (float *)*((void *)this + 51);
      *a3 = v15[40];
      a3[1] = v15[41];
      a3[2] = v15[42];
      int v4 = v15 + 43;
      goto LABEL_16;
    case 12:
      float32x4_t v16 = (float *)*((void *)this + 51);
      *a3 = v16[184];
      a3[1] = v16[185];
      a3[2] = v16[186];
      int v4 = v16 + 187;
      goto LABEL_16;
    case 13:
      int8x16_t v17 = (float *)*((void *)this + 51);
      *a3 = v17[48];
      a3[1] = v17[49];
      a3[2] = v17[50];
      int v4 = v17 + 51;
LABEL_16:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double LiHeLightProgramSpotSurfaceDiffuse::State::State(LiHeLightProgramSpotSurfaceDiffuse::State *this)
{
  double result = 0.0;
  *((_OWORD *)this + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = xmmword_1B837F030;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = xmmword_1B7E751A0;
  *((_OWORD *)this + 15) = xmmword_1B7E776B0;
  *((int32x4_t *)this + 1ProCore_Impl::PCNSRefImpl::release(this + 6) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 17) = xmmword_1B7E752F0;
  *((_OWORD *)this + 18) = xmmword_1B7E76F70;
  *((_OWORD *)this + 19) = xmmword_1B837F2C0;
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B837F2D0;
  *((_OWORD *)this + 21) = xmmword_1B837F2E0;
  *((_OWORD *)this + 22) = xmmword_1B7E75350;
  *((_OWORD *)this + 23) = xmmword_1B7E75360;
  *((_OWORD *)this + 24) = xmmword_1B837F2F0;
  *((_OWORD *)this + 25) = xmmword_1B7E751C0;
  *((_OWORD *)this + 2ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B7E751D0;
  *((_OWORD *)this + 27) = xmmword_1B7E751E0;
  *((_OWORD *)this + 28) = xmmword_1B7E751F0;
  *((_OWORD *)this + 29) = xmmword_1B7E75200;
  *((_OWORD *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B7E75210;
  *((_OWORD *)this + 31) = xmmword_1B7E75220;
  *((_OWORD *)this + 32) = xmmword_1B7E75230;
  *((_OWORD *)this + 33) = xmmword_1B7E75240;
  *((_OWORD *)this + 34) = xmmword_1B7E75250;
  *((_OWORD *)this + 35) = xmmword_1B7E75260;
  *((_OWORD *)this + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = xmmword_1B7E75270;
  *((_OWORD *)this + 37) = xmmword_1B7E75280;
  *((_OWORD *)this + 38) = xmmword_1B7E75290;
  *((_OWORD *)this + 39) = xmmword_1B7E752A0;
  *((_OWORD *)this + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = xmmword_1B7E752B0;
  *((_OWORD *)this + 41) = xmmword_1B7E752C0;
  *((_OWORD *)this + 42) = xmmword_1B7E752D0;
  *((_OWORD *)this + 43) = xmmword_1B7E752E0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 4ProCore_Impl::PCNSRefImpl::release(this + 6) = 0u;
  *((_OWORD *)this + 44) = 0u;
  return result;
}

const char *LiHeLightProgramSurfaceFinalPass::GetProgram(LiHeLightProgramSurfaceFinalPass *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r1.x = dot(r0.xyz, 1.00000h);\n"
             "    r0.w = r1.x*c0.w;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.x = r1.w*r0.w;\n"
             "    r2.y = r0.w - c0.x;\n"
             "    r2.w = half(c0.x < r0.w);\n"
             "    r0.w = half(c0.y < r1.w);\n"
             "    r2.y = r2.y*c0.z;\n"
             "    r2.z = mix(r1.z, r2.x, r2.y);\n"
             "    r0.w = fmin(r0.w, r2.w);\n"
             "    r1.z = select(r1.z, r2.z, -r0.w < 0.00000h);\n"
             "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
             "    r1.xy = select(r1.xy, r2.zx, -r0.ww < 0.00000h);\n"
             "    output.color0.xyz = float3(r1.xyz)*float3(r0.xyz);\n"
             "    output.color0.w = float(r1.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=db490365:15785875:ea9c1f38:9383f519\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004d0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r1.x = dot(r0.xyz, 1.00000f);\n"
             "    r0.w = r1.x*c0.w;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.x = r1.w*r0.w;\n"
             "    r2.y = r0.w - c0.x;\n"
             "    r2.w = float(c0.x < r0.w);\n"
             "    r0.w = float(c0.y < r1.w);\n"
             "    r2.y = r2.y*c0.z;\n"
             "    r2.z = mix(r1.z, r2.x, r2.y);\n"
             "    r0.w = fmin(r0.w, r2.w);\n"
             "    r1.z = select(r1.z, r2.z, -r0.w < 0.00000f);\n"
             "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
             "    r1.xy = select(r1.xy, r2.zx, -r0.ww < 0.00000f);\n"
             "    output.color0.xyz = r1.xyz*r0.xyz;\n"
             "    output.color0.w = r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e2d728d3:a7abefb8:62cf9a5b:5aa76cd7\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000046a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture1, hg_TexCoord1.xy).xyz;\n"
           "    r1.x = dot(r0.xyz, vec3(1.00000));\n"
           "    r0.w = r1.x*c0.w;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r2.x = r1.w*r0.w;\n"
           "    r2.y = r0.w - c0.x;\n"
           "    r2.w = float(c0.x < r0.w);\n"
           "    r0.w = float(c0.y < r1.w);\n"
           "    r2.y = r2.y*c0.z;\n"
           "    r2.z = mix(r1.z, r2.x, r2.y);\n"
           "    r0.w = min(r0.w, r2.w);\n"
           "    r1.z = -r0.w < 0.00000 ? r2.z : r1.z;\n"
           "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
           "    r1.xy = vec2(-r0.w < 0.00000 ? r2.z : r1.x, -r0.w < 0.00000 ? r2.x : r1.y);\n"
           "    gl_FragColor.xyz = r1.xyz*r0.xyz;\n"
           "    gl_FragColor.w = r1.w;\n"
           "}\n"
           "//MD5=19b7bad1:1d4392e7:4a1d8c1b:ba44b2ed\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeLightProgramSurfaceFinalPass::InitProgramDescriptor(LiHeLightProgramSurfaceFinalPass *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramSurfaceFinalPass_hgc_visible", "//Metal1.0     \n//LEN=000000033f\n[[ visible ]] FragmentOut LiHeLightProgramSurfaceFinalPass_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color1.xyz;\n"
    "    r1.x = dot(r0.xyz, 1.00000f);\n"
    "    r0.w = r1.x*c0.w;\n"
    "    r1 = color0;\n"
    "    r2.x = r1.w*r0.w;\n"
    "    r2.y = r0.w - c0.x;\n"
    "    r2.w = float(c0.x < r0.w);\n"
    "    r0.w = float(c0.y < r1.w);\n"
    "    r2.y = r2.y*c0.z;\n"
    "    r2.z = mix(r1.z, r2.x, r2.y);\n"
    "    r0.w = fmin(r0.w, r2.w);\n"
    "    r1.z = select(r1.z, r2.z, -r0.w < 0.00000f);\n"
    "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
    "    r1.xy = select(r1.xy, r2.zx, -r0.ww < 0.00000f);\n"
    "    output.color0.xyz = r1.xyz*r0.xyz;\n"
    "    output.color0.w = r1.w;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLightProgramSurfaceFinalPass");
}

void sub_1B7B7D080(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7D1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7D208()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7D200);
}

void *LiHeLightProgramSurfaceFinalPass::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramSurfaceFinalPass [hgc1]");
}

uint64_t LiHeLightProgramSurfaceFinalPass::BindTexture(LiHeLightProgramSurfaceFinalPass *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramSurfaceFinalPass::Bind(LiHeLightProgramSurfaceFinalPass *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLightProgramSurfaceFinalPass::RenderTile(LiHeLightProgramSurfaceFinalPass *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 26);
    uint64_t v8 = *((void *)a2 + 12);
    uint64_t v9 = 16 * *((int *)a2 + 6);
    uint64_t v10 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v55) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          float32x4_t v13 = *(float32x4_t *)(v8 + v12 - 32);
          float32x4_t v14 = *(float32x4_t *)(v8 + v12 - 16);
          float32x4_t v15 = *(float32x4_t *)(v8 + v12);
          int8x16_t v16 = (int8x16_t)vaddq_f32(v13, (float32x4_t)vrev64q_s32((int32x4_t)v13));
          int8x16_t v17 = (int8x16_t)vaddq_f32(v14, (float32x4_t)vrev64q_s32((int32x4_t)v14));
          int8x16_t v18 = (int8x16_t)vaddq_f32(v15, (float32x4_t)vrev64q_s32((int32x4_t)v15));
          float32x4_t v19 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), (float32x4_t)vextq_s8(v16, v16, 4uLL));
          uint64_t v20 = *((void *)this + 51);
          int8x16_t v21 = *(int8x16_t *)(v20 + 16);
          float32x4_t v22 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v19, *(float32x4_t *)v20), (int8x16_t)v13);
          float32x4_t v23 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(*(float32x4_t *)v20, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (float32x4_t)vextq_s8(v17, v17, 4uLL))), (int8x16_t)v14);
          float32x4_t v24 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(*(float32x4_t *)v20, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (float32x4_t)vextq_s8(v18, v18, 4uLL))), (int8x16_t)v15);
          float32x4_t v25 = *(float32x4_t *)(v6 + v12 - 32);
          float32x4_t v26 = *(float32x4_t *)(v6 + v12 - 16);
          float32x4_t v27 = *(float32x4_t *)(v6 + v12);
          int8x16_t v29 = *(int8x16_t *)(v20 + 32);
          float32x4_t v28 = *(float32x4_t *)(v20 + 48);
          v30.i64[0] = vbslq_s8(v29, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 0xCuLL), v25, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v22, 1), *(float32x4_t *)v20)).u64[0];
          v31.i64[0] = vbslq_s8(v29, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), v26, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v23, 1), *(float32x4_t *)v20)).u64[0];
          v32.i64[0] = vbslq_s8(v29, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 0xCuLL), v27, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v24, 1), *(float32x4_t *)v20)).u64[0];
          v30.i64[1] = vandq_s8(*(int8x16_t *)&v28, (int8x16_t)vcgtq_f32(v22, v28)).i64[1];
          v31.i64[1] = vandq_s8(*(int8x16_t *)&v28, (int8x16_t)vcgtq_f32(v23, v28)).i64[1];
          v32.i64[1] = vandq_s8(*(int8x16_t *)&v28, (int8x16_t)vcgtq_f32(v24, v28)).i64[1];
          float32x4_t v33 = *(float32x4_t *)(v20 + 64);
          int8x16_t v34 = *(int8x16_t *)(v20 + 80);
          int8x16_t v35 = vbslq_s8(v34, (int8x16_t)vmulq_f32(v28, v30), (int8x16_t)v30);
          int8x16_t v36 = vbslq_s8(v34, (int8x16_t)vmulq_f32(v28, v31), (int8x16_t)v31);
          int8x16_t v37 = vbslq_s8(v34, (int8x16_t)vmulq_f32(v28, v32), (int8x16_t)v32);
          int8x16_t v38 = *(int8x16_t *)(v20 + 96);
          float32x4_t v39 = *(float32x4_t *)(v20 + 112);
          float32x4_t v40 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v25, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v35, v35, 8uLL), v25), *(float32x2_t *)v35.i8, 1)), v35);
          float32x4_t v41 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v26, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v36, v36, 8uLL), v26), *(float32x2_t *)v36.i8, 1)), v36);
          float32x4_t v42 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v27, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v37, v37, 8uLL), v27), *(float32x2_t *)v37.i8, 1)), v37);
          float32x4_t v43 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v21, vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v25, v33)), (int8x16_t)v13), v40), (int8x16_t)v13);
          float32x4_t v44 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v21, vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v26, v33)), (int8x16_t)v14), v41), (int8x16_t)v14);
          float32x4_t v45 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v21, vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v27, v33)), (int8x16_t)v15), v42), (int8x16_t)v15);
          int8x16_t v46 = vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v43), v33), (int8x16_t)v40, (int8x16_t)v25), (int8x16_t)v25);
          int8x16_t v47 = vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v44), v33), (int8x16_t)v41, (int8x16_t)v26), (int8x16_t)v26);
          *(int8x8_t *)v23.f32 = vqtbl1_s8(v46, *(int8x8_t *)v39.f32);
          v36.i64[0] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
          *(int8x8_t *)&v23.u32[2] = vqtbl1_s8(v46, *(int8x8_t *)v36.i8);
          int8x16_t v48 = vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v45), v33), (int8x16_t)v42, (int8x16_t)v27), (int8x16_t)v27);
          *(int8x8_t *)v49.f32 = vqtbl1_s8(v47, *(int8x8_t *)v39.f32);
          *(int8x8_t *)v39.f32 = vqtbl1_s8(v48, *(int8x8_t *)v39.f32);
          *(int8x8_t *)&v49.u32[2] = vqtbl1_s8(v47, *(int8x8_t *)v36.i8);
          *(int8x8_t *)&v39.u32[2] = vqtbl1_s8(v48, *(int8x8_t *)v36.i8);
          float32x4_t v50 = vaddq_f32(v23, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v40.i64[0], 0), v23), *(float32x2_t *)v40.f32, 1));
          float32x4_t v51 = vaddq_f32(v49, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v41.i64[0], 0), v49), *(float32x2_t *)v41.f32, 1));
          int8x16_t v52 = (int8x16_t)vaddq_f32(v39, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v42.i64[0], 0), v39), *(float32x2_t *)v42.f32, 1));
          long long v53 = *(_OWORD *)(v20 + 128);
          *(int8x8_t *)v50.f32 = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)&v53);
          *(int8x8_t *)v51.f32 = vqtbl1_s8((int8x16_t)v51, *(int8x8_t *)&v53);
          *(int8x8_t *)v52.i8 = vqtbl1_s8(v52, *(int8x8_t *)&v53);
          v50.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 3), v33), (int8x16_t)v50, v46).u64[0];
          v51.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 3), v33), (int8x16_t)v51, v47).u64[0];
          v33.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 3), v33), v52, v48).u64[0];
          v50.i64[1] = v46.i64[1];
          v51.i64[1] = v47.i64[1];
          v33.i64[1] = v48.i64[1];
          float32x4_t v54 = (int8x16_t *)(v5 + v12);
          v54[-2] = vbslq_s8(v21, (int8x16_t)v50, (int8x16_t)vmulq_f32(v50, v43));
          v54[-1] = vbslq_s8(v21, (int8x16_t)v51, (int8x16_t)vmulq_f32(v51, v44));
          int8x16_t *v54 = vbslq_s8(v21, (int8x16_t)v33, (int8x16_t)vmulq_f32(v33, v45));
          v11 -= 3;
          v12 += 48;
        }
        while (v4 + v11 > 2);
        LODWORD(v55) = -v11;
      }
      if ((int)v55 < v4)
      {
        uint64_t v55 = v55;
        do
        {
          float32x4_t v56 = *(float32x4_t *)(v8 + 16 * v55);
          int8x16_t v57 = (int8x16_t)vaddq_f32(v56, (float32x4_t)vrev64q_s32((int32x4_t)v56));
          uint64_t v58 = *((void *)this + 51);
          int8x16_t v59 = *(int8x16_t *)(v58 + 16);
          float32x4_t v60 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmulq_f32(*(float32x4_t *)v58, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (float32x4_t)vextq_s8(v57, v57, 4uLL))), (int8x16_t)v56);
          float32x4_t v61 = *(float32x4_t *)(v6 + 16 * v55);
          float32x4_t v62 = *(float32x4_t *)(v58 + 48);
          v63.i64[0] = vbslq_s8(*(int8x16_t *)(v58 + 32), (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 0xCuLL), v61, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v60, 1), *(float32x4_t *)v58)).u64[0];
          v63.i64[1] = vandq_s8(*(int8x16_t *)&v62, (int8x16_t)vcgtq_f32(v60, v62)).i64[1];
          float32x4_t v64 = *(float32x4_t *)(v58 + 64);
          float32x4_t v65 = (float32x4_t)vbslq_s8(v59, vandq_s8((int8x16_t)v62, (int8x16_t)vcgtq_f32(v61, v64)), (int8x16_t)v56);
          int8x16_t v66 = vbslq_s8(*(int8x16_t *)(v58 + 80), (int8x16_t)vmulq_f32(v62, v63), (int8x16_t)v63);
          int8x16_t v67 = *(int8x16_t *)(v58 + 96);
          int8x16_t v68 = *(int8x16_t *)(v58 + 112);
          float32x4_t v69 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vaddq_f32(v61, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v66, v66, 8uLL), v61), *(float32x2_t *)v66.i8, 1)), v66);
          float32x4_t v70 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vminq_f32(v65, v69), (int8x16_t)v56);
          int8x16_t v71 = vbslq_s8(v67, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v70), v64), (int8x16_t)v69, (int8x16_t)v61), (int8x16_t)v61);
          *(int8x8_t *)v72.f32 = vqtbl1_s8(v71, *(int8x8_t *)v68.i8);
          *(int8x8_t *)&v72.u32[2] = vqtbl1_s8(v71, (int8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL));
          int8x16_t v73 = (int8x16_t)vaddq_f32(v72, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v69.i64[0], 0), v72), *(float32x2_t *)v69.f32, 1));
          *(int8x8_t *)v73.i8 = vqtbl1_s8(v73, *(int8x8_t *)(v58 + 128));
          v64.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 3), v64), v73, v71).u64[0];
          v64.i64[1] = v71.i64[1];
          *(int8x16_t *)(v5 + 16 * v55++) = vbslq_s8(v59, (int8x16_t)v64, (int8x16_t)vmulq_f32(v64, v70));
        }
        while (v55 < v4);
      }
      ++v3;
      v8 += v7;
      v5 += v9;
      v6 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramSurfaceFinalPass::GetDOD(LiHeLightProgramSurfaceFinalPass *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLightProgramSurfaceFinalPass::GetROI(LiHeLightProgramSurfaceFinalPass *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLightProgramSurfaceFinalPass::LiHeLightProgramSurfaceFinalPass(LiHeLightProgramSurfaceFinalPass *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1130A98;
  operator new();
}

void sub_1B7B7D8D4(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(HGNode *this)
{
  *(void *)this = &unk_1F1130A98;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramSurfaceFinalPass::SetParameter(LiHeLightProgramSurfaceFinalPass *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeLightProgramSurfaceFinalPass::GetParameter(LiHeLightProgramSurfaceFinalPass *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeLimit::GetProgram(LiHeLimit *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000381\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r1.wwww + c0.xxxx;\n"
             "    r0 = r0.wwww + c0.xxxx;\n"
             "    r2 = r0/r2;\n"
             "    output.color0 = float4(r1)*float4(r2);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b7076390:9181d49e:56f4b253:3d458ea1\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000367\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r1.wwww + c0.xxxx;\n"
             "    r0 = r0.wwww + c0.xxxx;\n"
             "    r2 = r0/r2;\n"
             "    output.color0 = r1*r2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=05bd07f9:67c60093:0ce557d1:a4a34b2d\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002e8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r1.wwww + c0.xxxx;\n"
           "    r0 = r0.wwww + c0.xxxx;\n"
           "    r2 = r0/r2;\n"
           "    gl_FragColor = r1*r2;\n"
           "}\n"
           "//MD5=0e095ec1:dc210556:f533a650:c09eeb46\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeLimit::InitProgramDescriptor(LiHeLimit *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLimit_hgc_visible", "//Metal1.0     \n//LEN=00000001bf\n[[ visible ]] FragmentOut LiHeLimit_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r1 = color1;\n"
    "    r2 = r1.wwww + c0.xxxx;\n"
    "    r0 = r0.wwww + c0.xxxx;\n"
    "    r2 = r0/r2;\n"
    "    output.color0 = r1*r2;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeLimit");
}

void sub_1B7B7DAA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7DBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7DC2C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7DC24);
}

void *LiHeLimit::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLimit [hgc1]");
}

uint64_t LiHeLimit::BindTexture(LiHeLimit *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLimit::Bind(LiHeLimit *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeLimit::RenderTile(LiHeLimit *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 12);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = 16 * *((int *)a2 + 26);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v34) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          float32x4_t v13 = *(float32x4_t *)(v6 + v12 - 32);
          float32x4_t v14 = *(float32x4_t *)(v6 + v12 - 16);
          float32x4_t v15 = *(float32x4_t *)(v6 + v12);
          float32x4_t v16 = *(float32x4_t *)(v6 + v12 + 16);
          int8x16_t v17 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v18 = v17[1];
          float32x4_t v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), *v17);
          float32x4_t v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), *v17);
          float32x4_t v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), *v17);
          float32x4_t v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), *v17);
          float32x4_t v23 = v17[2];
          float32x4_t v24 = v17[3];
          float32x4_t v25 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v19), v18), v23), v24);
          float32x4_t v26 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v20), v18), v23), v24);
          float32x4_t v27 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v21), v18), v23), v24);
          float32x4_t v28 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v22), v18), v23), v24);
          float32x4_t v29 = vmulq_f32(v13, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12 - 32), 3), *v17), vmulq_f32(v25, vrecpsq_f32(v19, v25))));
          float32x4_t v30 = vmulq_f32(v14, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12 - 16), 3), *v17), vmulq_f32(v26, vrecpsq_f32(v20, v26))));
          float32x4_t v31 = vmulq_f32(v15, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12), 3), *v17), vmulq_f32(v27, vrecpsq_f32(v21, v27))));
          float32x4_t v32 = vmulq_f32(v16, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12 + 16), 3), *v17), vmulq_f32(v28, vrecpsq_f32(v22, v28))));
          float32x4_t v33 = (float32x4_t *)(v5 + v12);
          v33[-2] = v29;
          v33[-1] = v30;
          *float32x4_t v33 = v31;
          v33[1] = v32;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v34) = -v11;
      }
      if ((int)v34 < v4)
      {
        uint64_t v34 = v34;
        do
        {
          float32x4_t v35 = *(float32x4_t *)(v6 + 16 * v34);
          long long v36 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 3), *v36);
          float32x4_t v38 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v37), v36[1]), v36[2]), v36[3]);
          *(float32x4_t *)(v5 + 16 * v34) = vmulq_f32(v35, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + 16 * v34), 3), *v36), vmulq_f32(v38, vrecpsq_f32(v37, v38))));
          ++v34;
        }
        while (v34 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLimit::GetDOD(LiHeLimit *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeLimit::GetROI(LiHeLimit *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeLimit::LiHeLimit(LiHeLimit *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1130D00;
  operator new();
}

void sub_1B7B7E0C4(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLimit::~LiHeLimit(HGNode *this)
{
  *(void *)this = &unk_1F1130D00;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40FA0F61DDLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeLimit::~LiHeLimit(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeLimit::SetParameter(LiHeLimit *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeLimit::GetParameter(LiHeLimit *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcNormalMapToBumpMap::GetProgram(HgcNormalMapToBumpMap *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000035c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
             "    r0.xy = select(r0.xy, -r0.xy, half2(hg_Params[0].xy) < 0.00000h);\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r0.www);\n"
             "    output.color0.w = -float(c0.y);\n"
             "    return output;\n"
             "}\n"
             "//MD5=10198cd1:ea4abf9a:d884c6f7:78cfbf92\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000033a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
             "    r0.xy = select(r0.xy, -r0.xy, hg_Params[0].xy < 0.00000f);\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    output.color0.xyz = r0.xyz*r0.www;\n"
             "    output.color0.w = -c0.y;\n"
             "    return output;\n"
             "}\n"
             "//MD5=23b14d5c:a8d7ef2a:5b8e81ac:4eb15f99\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000338\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
           "    r0.xy = vec2(hg_ProgramLocal0.x < 0.00000 ? -r0.x : r0.x, hg_ProgramLocal0.y < 0.00000 ? -r0.y : r0.y);\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r0.w = inversesqrt(r0.w);\n"
           "    gl_FragColor.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor.w = -c0.y;\n"
           "}\n"
           "//MD5=496e9195:f0226dec:8bdbfc4f:49645a41\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcNormalMapToBumpMap::InitProgramDescriptor(HgcNormalMapToBumpMap *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcNormalMapToBumpMap_hgc_visible", "//Metal1.0     \n//LEN=0000000219\n[[ visible ]] FragmentOut HgcNormalMapToBumpMap_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
    "    r0.xy = select(r0.xy, -r0.xy, hg_Params[0].xy < 0.00000f);\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r0.w = rsqrt(r0.w);\n"
    "    output.color0.xyz = r0.xyz*r0.www;\n"
    "    output.color0.w = -c0.y;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcNormalMapToBumpMap");
}

void sub_1B7B7E298(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7E398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7E3D8()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7E3D0);
}

void *HgcNormalMapToBumpMap::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcNormalMapToBumpMap [hgc1]");
}

uint64_t HgcNormalMapToBumpMap::BindTexture(HgcNormalMapToBumpMap *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcNormalMapToBumpMap::Bind(HgcNormalMapToBumpMap *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcNormalMapToBumpMap::RenderTile(HgcNormalMapToBumpMap *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *((void *)this + 51);
          float32x4_t v12 = *(float32x4_t *)(v11 + 32);
          float32x4_t v13 = *(float32x4_t *)(v11 + 16);
          float32x4_t v14 = (float32x4_t)vandq_s8(*(int8x16_t *)v11, *(int8x16_t *)(v11 + 48));
          v15.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), v12))).u64[0];
          v16.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), v12))).u64[0];
          v17.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10), v12))).u64[0];
          v14.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), v12))).u64[0];
          v15.i64[1] = *(void *)(v6 + v10 - 24);
          v16.i64[1] = *(void *)(v6 + v10 - 8);
          v17.i64[1] = *(void *)(v6 + v10 + 8);
          v14.i64[1] = *(void *)(v6 + v10 + 24);
          int32x4_t v18 = (int32x4_t)vmulq_f32(v15, v15);
          int32x4_t v19 = (int32x4_t)vmulq_f32(v16, v16);
          int32x4_t v20 = (int32x4_t)vmulq_f32(v17, v17);
          int32x4_t v21 = (int32x4_t)vmulq_f32(v14, v14);
          int8x16_t v22 = *(int8x16_t *)(v11 + 64);
          float32x4_t v23 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v18), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL))), (int8x16_t)v15);
          float32x4_t v24 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v19), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL))), (int8x16_t)v16);
          float32x4_t v25 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v20), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL))), (int8x16_t)v17);
          float32x4_t v26 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v21), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL))), (int8x16_t)v14);
          float32x4_t v27 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v23)), v13);
          float32x4_t v28 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v24)), v13);
          float32x4_t v29 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v25)), v13);
          float32x4_t v30 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v26)), v13);
          float32x4_t v31 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v27, vrsqrtsq_f32(vmulq_f32(v27, v23), v27)), (int8x16_t)v15);
          float32x4_t v32 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v28, v24), v28)), (int8x16_t)v16);
          float32x4_t v33 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v29, v25), v29)), (int8x16_t)v17);
          float32x4_t v34 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v30, vrsqrtsq_f32(vmulq_f32(v30, v26), v30)), (int8x16_t)v14);
          float32x4_t v35 = vmulq_laneq_f32(v31, v31, 3);
          float32x4_t v36 = vmulq_laneq_f32(v32, v32, 3);
          float32x4_t v37 = vmulq_laneq_f32(v33, v33, 3);
          v35.i32[3] = 1.0;
          v36.i32[3] = 1.0;
          v37.i32[3] = 1.0;
          float32x4_t v38 = vmulq_laneq_f32(v34, v34, 3);
          v38.i32[3] = 1.0;
          float32x4_t v39 = (float32x4_t *)(v5 + v10);
          v39[-2] = v35;
          v39[-1] = v36;
          float32x4_t *v39 = v37;
          v39[1] = v38;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = -v9;
      }
      if ((int)v40 < v4)
      {
        uint64_t v40 = v40;
        do
        {
          uint64_t v41 = *((void *)this + 51);
          float32x4_t v42 = *(float32x4_t *)(v41 + 32);
          float32x4_t v43 = *(float32x4_t *)(v41 + 16);
          v44.i64[0] = veorq_s8(vandq_s8(*(int8x16_t *)v41, *(int8x16_t *)(v41 + 48)), (int8x16_t)vaddq_f32(v43, vmulq_f32(*(float32x4_t *)(v6 + 16 * v40), v42))).u64[0];
          v44.i64[1] = *(void *)(v6 + 16 * v40 + 8);
          int32x4_t v45 = (int32x4_t)vmulq_f32(v44, v44);
          int8x16_t v46 = *(int8x16_t *)(v41 + 64);
          float32x4_t v47 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v45), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL))), (int8x16_t)v44);
          float32x4_t v48 = vminq_f32(vmulq_f32(v42, vrsqrteq_f32(v47)), v43);
          float32x4_t v49 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v48, v47), v48)), (int8x16_t)v44);
          float32x4_t v50 = vmulq_laneq_f32(v49, v49, 3);
          v50.i32[3] = 1.0;
          *(float32x4_t *)(v5 + 16 * v40++) = v50;
        }
        while (v40 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcNormalMapToBumpMap::GetDOD(HgcNormalMapToBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcNormalMapToBumpMap::GetROI(HgcNormalMapToBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcNormalMapToBumpMap::HgcNormalMapToBumpMap(HgcNormalMapToBumpMap *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1130F68;
  operator new();
}

void sub_1B7B7E8E8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcNormalMapToBumpMap::~HgcNormalMapToBumpMap(HGNode *this)
{
  *(void *)this = &unk_1F1130F68;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcNormalMapToBumpMap::~HgcNormalMapToBumpMap(this);

  HGObject::operator delete(v1);
}

uint64_t HgcNormalMapToBumpMap::SetParameter(HgcNormalMapToBumpMap *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  float v8 = -a3.n128_f32[0];
  int v9 = (__n128 *)*((void *)this + 51);
  if (v9->n128_f32[0] == (float)-a3.n128_f32[0]
    && v9->n128_f32[1] == v8
    && v9->n128_f32[2] == 0.0
    && v9->n128_f32[3] == 0.0)
  {
    return 0;
  }
  v9->n128_f32[0] = v8;
  v9->n128_f32[1] = v8;
  a3.n128_f32[1] = a4;
  v9->n128_u64[1] = 0;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  v9[5] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcNormalMapToBumpMap::GetParameter(HgcNormalMapToBumpMap *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = v3[20];
    a3[1] = v3[21];
    a3[2] = v3[22];
    float result = v3[23];
    a3[3] = result;
  }
  return result;
}

const char *LiHeMixShader::GetProgram(LiHeMixShader *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003a2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).w;\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=22108b0f:e3e984e4:8c3278e3:cb8e1271\n"
             "//SIG=00400000:00000007:00000007:00000007:0000:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000377\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).w;\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6a883b3e:ee5a8f1f:266bcc18:932206aa\n"
             "//SIG=00000000:00000007:00000007:00000000:0000:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.w = texture2D(hg_Texture2, hg_TexCoord2.xy).w;\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=6540cc42:c8bb85fa:ae1830a8:6bdd8d2b\n"
           "//SIG=00000000:00000007:00000007:00000000:0000:0000:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void LiHeMixShader::InitProgramDescriptor(LiHeMixShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeMixShader_hgc_visible", "//Metal1.0     \n//LEN=0000000158\n[[ visible ]] FragmentOut LiHeMixShader_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r2.w = color2.w;\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeMixShader");
}

void sub_1B7B7EB6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7ECEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7ED3C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7ED34);
}

void *LiHeMixShader::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeMixShader [hgc1]");
}

uint64_t LiHeMixShader::BindTexture(LiHeMixShader *this, HGHandler *a2, int a3)
{
  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeMixShader::Bind(LiHeMixShader *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeMixShader::RenderTile(LiHeMixShader *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 14);
    uint64_t v7 = *((void *)a2 + 12);
    uint64_t v8 = 16 * *((int *)a2 + 26);
    uint64_t v9 = 16 * *((int *)a2 + 22);
    uint64_t v10 = *((void *)a2 + 10);
    uint64_t v11 = 16 * *((int *)a2 + 30);
    uint64_t v12 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v19) = 0;
      }
      else
      {
        uint64_t v13 = 0;
        int v14 = 0;
        do
        {
          float32x4_t v15 = vaddq_f32(*(float32x4_t *)(v10 + v13 + 16), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13 + 16), *(float32x4_t *)(v10 + v13 + 16)), *(float32x4_t *)(v6 + v13 + 16), 3));
          float32x4_t v16 = vaddq_f32(*(float32x4_t *)(v10 + v13 + 32), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13 + 32), *(float32x4_t *)(v10 + v13 + 32)), *(float32x4_t *)(v6 + v13 + 32), 3));
          float32x4_t v17 = vaddq_f32(*(float32x4_t *)(v10 + v13 + 48), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13 + 48), *(float32x4_t *)(v10 + v13 + 48)), *(float32x4_t *)(v6 + v13 + 48), 3));
          int32x4_t v18 = (float32x4_t *)(v5 + v13);
          *int32x4_t v18 = vaddq_f32(*(float32x4_t *)(v10 + v13), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13), *(float32x4_t *)(v10 + v13)), *(float32x4_t *)(v6 + v13), 3));
          v18[1] = v15;
          PCString v18[2] = v16;
          _OWORD v18[3] = v17;
          v14 -= 4;
          v13 += 64;
        }
        while (v4 + v14 > 3);
        LODWORD(v19) = -v14;
      }
      if ((int)v19 < v4)
      {
        uint64_t v19 = v19;
        do
        {
          *(float32x4_t *)(v5 + 16 * v19) = vaddq_f32(*(float32x4_t *)(v10 + 16 * v19), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + 16 * v19), *(float32x4_t *)(v10 + 16 * v19)), *(float32x4_t *)(v6 + 16 * v19), 3));
          ++v19;
        }
        while (v19 < v4);
      }
      ++v3;
      v7 += v8;
      v10 += v9;
      v6 += v11;
      v5 += v12;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeMixShader::GetDOD(LiHeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeMixShader::GetROI(LiHeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeMixShader::LiHeMixShader(LiHeMixShader *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F11311D0;
  operator new();
}

void sub_1B7B7F16C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeMixShader::~LiHeMixShader(HGNode *this)
{
  *(void *)this = &unk_1F11311D0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0xC400A2AC0F1);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeMixShader::~LiHeMixShader(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeMixShader::SetParameter(LiHeMixShader *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeMixShader::GetParameter(LiHeMixShader *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeProgramMaxBlend::GetProgram(LiHeProgramMaxBlend *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmax(float4(r1), float4(r0));\n"
             "    return output;\n"
             "}\n"
             "//MD5=03194d2d:d20b76be:1b007e7e:6478a81a\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002c8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmax(r1, r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=171e71e1:20e2dcdc:551a9dc4:7e3e5749\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000245\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = max(r1, r0);\n"
           "}\n"
           "//MD5=e85b8e93:7e9743a9:dad95728:be4f740e\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeProgramMaxBlend::InitProgramDescriptor(LiHeProgramMaxBlend *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramMaxBlend_hgc_visible", "//Metal1.0     \n//LEN=000000012a\n[[ visible ]] FragmentOut LiHeProgramMaxBlend_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0 = fmax(r1, r0);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeProgramMaxBlend");
}

void sub_1B7B7F338(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7F478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7F4C0()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7F4B8);
}

void *LiHeProgramMaxBlend::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramMaxBlend [hgc1]");
}

uint64_t LiHeProgramMaxBlend::BindTexture(LiHeProgramMaxBlend *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramMaxBlend::Bind(LiHeProgramMaxBlend *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeProgramMaxBlend::RenderTile(LiHeProgramMaxBlend *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 26);
    uint64_t v8 = *((void *)a2 + 12);
    uint64_t v9 = 16 * *((int *)a2 + 22);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          float32x4_t v13 = vmaxq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)(v8 + v12 - 16));
          float32x4_t v14 = vmaxq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)(v8 + v12));
          float32x4_t v15 = vmaxq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)(v8 + v12 + 16));
          float32x4_t v16 = (float32x4_t *)(v5 + v12);
          v16[-2] = vmaxq_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x4_t *)(v8 + v12 - 32));
          v16[-1] = v13;
          *float32x4_t v16 = v14;
          v16[1] = v15;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v17) = -v11;
      }
      if ((int)v17 < v4)
      {
        uint64_t v17 = v17;
        do
        {
          *(float32x4_t *)(v5 + 16 * v17) = vmaxq_f32(*(float32x4_t *)(v6 + 16 * v17), *(float32x4_t *)(v8 + 16 * v17));
          ++v17;
        }
        while (v17 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeProgramMaxBlend::GetDOD(LiHeProgramMaxBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeProgramMaxBlend::GetROI(LiHeProgramMaxBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeProgramMaxBlend::LiHeProgramMaxBlend(LiHeProgramMaxBlend *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1131438;
  operator new();
}

void sub_1B7B7F834(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramMaxBlend::~LiHeProgramMaxBlend(HGNode *this)
{
  *(void *)this = &unk_1F1131438;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0xC400A2AC0F1);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeProgramMaxBlend::~LiHeProgramMaxBlend(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeProgramMaxBlend::SetParameter(LiHeProgramMaxBlend *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeProgramMaxBlend::GetParameter(LiHeProgramMaxBlend *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeProgramPointLightStencil::GetProgram(LiHeProgramPointLightStencil *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004a7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[3];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[2] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[4] + s0;\n"
             "    s1 = s0 + hg_Params[5];\n"
             "    s0.x = float(s0.w < -hg_Params[5].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.xyz = normalize(s0.xyz).xyz;\n"
             "    s0.x = dot(s0.xyz, hg_Params[1].xyz);\n"
             "    s0.x = float(s0.x >= float(c0.x));\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0)*s0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=f3248f7c:e2089f42:fd62fa93:ddb2264e\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0006:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000477\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[3];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[2] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[4] + r0;\n"
             "    r1 = r0 + hg_Params[5];\n"
             "    r0.x = float(r0.w < -hg_Params[5].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.xyz = normalize(r0.xyz).xyz;\n"
             "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
             "    r0.x = float(r0.x >= c0.x);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1*r0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=186997ae:552a6b82:5d8d19fb:5c377193\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0006:0002:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000520\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal3;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal2 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal4 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal5;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal5.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.xyz = normalize(r0.xyz).xyz;\n"
           "    r0.x = dot(r0.xyz, hg_ProgramLocal1.xyz);\n"
           "    r0.x = float(r0.x >= c0.x);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1*r0.xxxx;\n"
           "}\n"
           "//MD5=be7527a7:0daf95f9:c43730d9:cece744b\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0006:0002:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeProgramPointLightStencil::InitProgramDescriptor(LiHeProgramPointLightStencil *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramPointLightStencil_hgc_visible", "//Metal1.0     \n//LEN=0000000361\n[[ visible ]] FragmentOut LiHeProgramPointLightStencil_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[3];\n"
    "    r0 = texCoord1.xxxx*hg_Params[2] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[4] + r0;\n"
    "    r1 = r0 + hg_Params[5];\n"
    "    r0.x = float(r0.w < -hg_Params[5].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.xyz = normalize(r0.xyz).xyz;\n"
    "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
    "    r0.x = float(r0.x >= c0.x);\n"
    "    r1 = color0;\n"
    "    output.color0 = r1*r0.xxxx;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeProgramPointLightStencil");
}

void sub_1B7B7FA00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E76910;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B7FB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B7FB88()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B7FB80);
}

void *LiHeProgramPointLightStencil::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramPointLightStencil [hgc1]");
}

uint64_t LiHeProgramPointLightStencil::BindTexture(LiHeProgramPointLightStencil *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramPointLightStencil::Bind(LiHeProgramPointLightStencil *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeProgramPointLightStencil::RenderTile(LiHeProgramPointLightStencil *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v6 = a2[2];
    int32x2_t v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    uint64_t v9 = 16 * a2[3].i32[0];
    uint64_t v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v93) = 0;
        float32x4_t v13 = v8;
      }
      else
      {
        uint64_t v11 = 0;
        int v12 = 0;
        float32x4_t v13 = v8;
        do
        {
          float32x4_t v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          float32x4_t v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v16 = *((void *)this + 51);
          float32x4_t v18 = *(float32x4_t *)(v16 + 32);
          float32x4_t v17 = *(float32x4_t *)(v16 + 48);
          float32x4_t v19 = vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(v18, v13.f32[0]));
          float32x4_t v20 = vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(v18, v14.f32[0]));
          float32x4_t v21 = vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)v15.f32, 1), vmulq_n_f32(v18, v15.f32[0]));
          float32x4_t v22 = *(float32x4_t *)(v16 + 64);
          float32x4_t v23 = *(float32x4_t *)(v16 + 80);
          float32x4_t v24 = vaddq_f32(v19, vmulq_laneq_f32(v22, v13, 2));
          float32x4_t v25 = vaddq_f32(v20, vmulq_laneq_f32(v22, v14, 2));
          float32x4_t v26 = vaddq_f32(v21, vmulq_laneq_f32(v22, v15, 2));
          float32x4_t v27 = vaddq_f32(v23, v24);
          float32x4_t v28 = vaddq_f32(v23, v25);
          float32x4_t v29 = vaddq_f32(v23, v26);
          float32x4_t v30 = vnegq_f32(v23);
          int8x16_t v31 = (int8x16_t)vcgtq_f32(v30, v24);
          int8x16_t v32 = (int8x16_t)vcgtq_f32(v30, v25);
          float32x4_t v33 = *(float32x4_t *)(v16 + 96);
          int8x16_t v34 = *(int8x16_t *)(v16 + 112);
          int8x16_t v35 = (int8x16_t)vcgtq_f32(v30, v26);
          int8x16_t v36 = vandq_s8((int8x16_t)v33, v31);
          int8x16_t v37 = vandq_s8((int8x16_t)v33, v32);
          int8x16_t v38 = vandq_s8((int8x16_t)v33, v35);
          int32x4_t v39 = (int32x4_t)vbslq_s8(v34, vextq_s8(v36, v36, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), v33));
          int32x4_t v40 = (int32x4_t)vbslq_s8(v34, vextq_s8(v37, v37, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), v33));
          int32x4_t v41 = (int32x4_t)vbslq_s8(v34, vextq_s8(v38, v38, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), v33));
          int64x2_t v42 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v27), v33);
          int64x2_t v43 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), v33);
          int64x2_t v44 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), v33);
          v45.i64[0] = v39.i64[0];
          v45.i64[1] = v42.i64[1];
          v46.i64[0] = v40.i64[0];
          v46.i64[1] = v43.i64[1];
          v47.i64[0] = v41.i64[0];
          v47.i64[1] = v44.i64[1];
          unint64_t v48 = vdupq_laneq_s64(v42, 1).u64[0];
          int8x16_t v49 = vextq_s8((int8x16_t)v42, (int8x16_t)v39, 8uLL);
          v39.i64[1] = v48;
          unint64_t v50 = vdupq_laneq_s64(v43, 1).u64[0];
          int8x16_t v51 = vextq_s8((int8x16_t)v43, (int8x16_t)v40, 8uLL);
          v40.i64[1] = v50;
          unint64_t v52 = vdupq_laneq_s64(v44, 1).u64[0];
          int8x16_t v53 = vextq_s8((int8x16_t)v44, (int8x16_t)v41, 8uLL);
          v41.i64[1] = v52;
          float32x4_t v54 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v45, v33), v49, (int8x16_t)vrev64q_s32(v39));
          float32x4_t v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46, v33), v51, (int8x16_t)vrev64q_s32(v40));
          float32x4_t v56 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v47, v33), v53, (int8x16_t)vrev64q_s32(v41));
          float32x4_t v58 = *(float32x4_t *)(v16 + 128);
          float32x4_t v57 = *(float32x4_t *)(v16 + 144);
          float32x4_t v59 = vminq_f32(vmaxq_f32(vrecpeq_f32(v54), v58), v57);
          float32x4_t v60 = vminq_f32(vmaxq_f32(vrecpeq_f32(v55), v58), v57);
          float32x4_t v61 = vminq_f32(vmaxq_f32(vrecpeq_f32(v56), v58), v57);
          float32x4_t v62 = vminq_f32(vmaxq_f32(vmulq_f32(v59, vrecpsq_f32(v54, v59)), v58), v57);
          float32x4_t v63 = vminq_f32(vmaxq_f32(vmulq_f32(v60, vrecpsq_f32(v55, v60)), v58), v57);
          float32x4_t v64 = vminq_f32(vmaxq_f32(vmulq_f32(v61, vrecpsq_f32(v56, v61)), v58), v57);
          float32x4_t v65 = vmulq_n_f32(v27, vmulq_f32(v62, vrecpsq_f32(v54, v62)).f32[0]);
          float32x4_t v66 = *(float32x4_t *)(v16 + 16);
          float32x4_t v67 = vsubq_f32(*(float32x4_t *)v16, v65);
          float32x4_t v68 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v28, vmulq_f32(v63, vrecpsq_f32(v55, v63)).f32[0]));
          float32x4_t v69 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v29, vmulq_f32(v64, vrecpsq_f32(v56, v64)).f32[0]));
          int32x4_t v70 = (int32x4_t)vmulq_f32(v67, v67);
          int32x4_t v71 = (int32x4_t)vmulq_f32(v68, v68);
          int32x4_t v72 = (int32x4_t)vmulq_f32(v69, v69);
          float32x4_t v73 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v70, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.i8, 1)));
          float32x4_t v74 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v71, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.i8, 1)));
          float32x4_t v75 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v72, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 1)));
          float32x4_t v76 = vminq_f32(vrsqrteq_f32(v73), v57);
          float32x4_t v77 = vminq_f32(vrsqrteq_f32(v74), v57);
          float32x4_t v78 = vminq_f32(vrsqrteq_f32(v75), v57);
          float32x4_t v79 = vminq_f32(vmulq_f32(v76, vrsqrtsq_f32(vmulq_f32(v76, v73), v76)), v57);
          float32x4_t v80 = vminq_f32(vmulq_f32(v77, vrsqrtsq_f32(vmulq_f32(v77, v74), v77)), v57);
          float32x4_t v81 = vminq_f32(vmulq_f32(v78, vrsqrtsq_f32(vmulq_f32(v78, v75), v78)), v57);
          float32x4_t v82 = vmulq_f32(v69, vmulq_f32(v81, vrsqrtsq_f32(vmulq_f32(v75, v81), v81)));
          float32x4_t v83 = vmulq_f32(vmulq_f32(v67, vmulq_f32(v79, vrsqrtsq_f32(vmulq_f32(v73, v79), v79))), v66);
          float32x4_t v84 = vmulq_f32(vmulq_f32(v68, vmulq_f32(v80, vrsqrtsq_f32(vmulq_f32(v74, v80), v80))), v66);
          float32x4_t v85 = vmulq_f32(v66, v82);
          int8x16_t v86 = (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL), vaddq_f32(v83, (float32x4_t)vrev64q_s32((int32x4_t)v83))), v33);
          int8x16_t v87 = (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL), vaddq_f32(v84, (float32x4_t)vrev64q_s32((int32x4_t)v84))), v33);
          int8x16_t v88 = (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL), vaddq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v85))), v33);
          int8x16_t v89 = *(int8x16_t *)(v16 + 160);
          float32x4_t v90 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v7 + v11 + 16), *(float *)vandq_s8(v89, v87).i32);
          float32x4_t v91 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v7 + v11 + 32), *(float *)vandq_s8(v89, v88).i32);
          float32x4_t v92 = (float32x4_t *)(*(void *)&v6 + v11);
          *float32x4_t v92 = vmulq_n_f32(*(float32x4_t *)(*(void *)&v7 + v11), *(float *)vandq_s8(v89, v86).i32);
          v92[1] = v90;
          v92[2] = v91;
          float32x4_t v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B7E736B0);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v93) = -v12;
      }
      if ((int)v93 < v5)
      {
        uint64_t v93 = v93;
        do
        {
          uint64_t v94 = *((void *)this + 51);
          float32x4_t v95 = *(float32x4_t *)(v94 + 80);
          float32x4_t v96 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v94 + 48), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)(v94 + 32), v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v94 + 64), v13, 2));
          float32x4_t v97 = vaddq_f32(v95, v96);
          int8x16_t v98 = (int8x16_t)vcgtq_f32(vnegq_f32(v95), v96);
          float32x4_t v99 = *(float32x4_t *)(v94 + 96);
          int8x16_t v100 = vandq_s8((int8x16_t)v99, v98);
          int32x4_t v101 = (int32x4_t)vbslq_s8(*(int8x16_t *)(v94 + 112), vextq_s8(v100, v100, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL), v99));
          int64x2_t v102 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v97), v99);
          v103.i64[0] = v101.i64[0];
          v103.i64[1] = v102.i64[1];
          unint64_t v104 = vdupq_laneq_s64(v102, 1).u64[0];
          int8x16_t v105 = vextq_s8((int8x16_t)v102, (int8x16_t)v101, 8uLL);
          v101.i64[1] = v104;
          float32x4_t v106 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v103, v99), v105, (int8x16_t)vrev64q_s32(v101));
          float32x4_t v107 = *(float32x4_t *)(v94 + 128);
          float32x4_t v108 = *(float32x4_t *)(v94 + 144);
          float32x4_t v109 = vminq_f32(vmaxq_f32(vrecpeq_f32(v106), v107), v108);
          float32x4_t v110 = vminq_f32(vmaxq_f32(vmulq_f32(v109, vrecpsq_f32(v106, v109)), v107), v108);
          float32x4_t v111 = vsubq_f32(*(float32x4_t *)v94, vmulq_n_f32(v97, vmulq_f32(v110, vrecpsq_f32(v106, v110)).f32[0]));
          int32x4_t v112 = (int32x4_t)vmulq_f32(v111, v111);
          float32x4_t v113 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v112, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.i8, 1)));
          float32x4_t v114 = vminq_f32(vrsqrteq_f32(v113), v108);
          float32x4_t v115 = vminq_f32(vmulq_f32(v114, vrsqrtsq_f32(vmulq_f32(v114, v113), v114)), v108);
          float32x4_t v116 = vmulq_f32(*(float32x4_t *)(v94 + 16), vmulq_f32(v111, vmulq_f32(v115, vrsqrtsq_f32(vmulq_f32(v115, v113), v115))));
          *(float32x4_t *)(*(void *)&v6 + 16 * v93) = vmulq_n_f32(*(float32x4_t *)(*(void *)&v7 + 16 * v93), *(float *)vandq_s8(*(int8x16_t *)(v94 + 160), (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL), vaddq_f32(v116, (float32x4_t)vrev64q_s32((int32x4_t)v116))), v99)).i32);
          float32x4_t v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          ++v93;
        }
        while (v93 < v5);
      }
      float32x4_t v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B7E736C0);
      ++v4;
      *(void *)&v6 += v9;
      *(void *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeProgramPointLightStencil::GetDOD(LiHeProgramPointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeProgramPointLightStencil::GetROI(LiHeProgramPointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeProgramPointLightStencil::LiHeProgramPointLightStencil(LiHeProgramPointLightStencil *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F11316A0;
  operator new();
}

void sub_1B7B80438(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(HGNode *this)
{
  *(void *)this = &unk_1F11316A0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40C3A7E6FCLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeProgramPointLightStencil::SetParameter(LiHeProgramPointLightStencil *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  float32x4_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *float32x4_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  PCSharedCount v10[2] = a5;
  void v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeProgramPointLightStencil::GetParameter(LiHeProgramPointLightStencil *this, unsigned int a2, float *a3)
{
  if (a2 > 5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *LiHeProgramRGBAdditionNode::GetProgram(LiHeProgramRGBAdditionNode *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000322\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = float3(r1.xyz) + float3(r0.xyz);\n"
             "    output.color0.w = fmax(float(r1.w), float(r0.w));\n"
             "    return output;\n"
             "}\n"
             "//MD5=b4e4d934:d319af5c:a0e8018d:4fdadd31\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002f7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = r1.xyz + r0.xyz;\n"
             "    output.color0.w = fmax(r1.w, r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=99a00e71:87dec5e5:0a7a34fb:fe9db88a\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000273\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.xyz = r1.xyz + r0.xyz;\n"
           "    gl_FragColor.w = max(r1.w, r0.w);\n"
           "}\n"
           "//MD5=492545fd:3a9a64b4:fbc44298:ccb0ccd5\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeProgramRGBAdditionNode::InitProgramDescriptor(LiHeProgramRGBAdditionNode *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramRGBAdditionNode_hgc_visible", "//Metal1.0     \n//LEN=0000000160\n[[ visible ]] FragmentOut LiHeProgramRGBAdditionNode_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0.xyz = r1.xyz + r0.xyz;\n"
    "    output.color0.w = fmax(r1.w, r0.w);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeProgramRGBAdditionNode");
}

void sub_1B7B806C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B80808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B80850()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B80848);
}

void *LiHeProgramRGBAdditionNode::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramRGBAdditionNode [hgc1]");
}

uint64_t LiHeProgramRGBAdditionNode::BindTexture(LiHeProgramRGBAdditionNode *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramRGBAdditionNode::Bind(LiHeProgramRGBAdditionNode *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeProgramRGBAdditionNode::RenderTile(LiHeProgramRGBAdditionNode *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 26);
    uint64_t v8 = *((void *)a2 + 12);
    uint64_t v9 = 16 * *((int *)a2 + 22);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          float32x4_t v13 = *(float32x4_t *)(v8 + v12 - 32);
          float32x4_t v14 = *(float32x4_t *)(v6 + v12 - 32);
          int8x16_t v15 = (int8x16_t)vaddq_f32(v13, v14);
          int8x16_t v16 = (int8x16_t)vmaxq_f32(v14, v13);
          int8x16_t v17 = *(int8x16_t *)*((void *)this + 51);
          int8x16_t v18 = vbslq_s8(v17, (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)(v8 + v12 - 16)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16)));
          int8x16_t v19 = vbslq_s8(v17, (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)(v8 + v12)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12)));
          int8x16_t v20 = vbslq_s8(v17, (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)(v8 + v12 + 16)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16)));
          float32x4_t v21 = (int8x16_t *)(v5 + v12);
          v21[-2] = vbslq_s8(v17, v16, v15);
          v21[-1] = v18;
          int8x16_t *v21 = v19;
          v21[1] = v20;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v22) = -v11;
      }
      if ((int)v22 < v4)
      {
        uint64_t v22 = v22;
        do
        {
          *(int8x16_t *)(v5 + 16 * v22) = vbslq_s8(*(int8x16_t *)*((void *)this + 51), (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + 16 * v22), *(float32x4_t *)(v8 + 16 * v22)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + 16 * v22), *(float32x4_t *)(v6 + 16 * v22)));
          ++v22;
        }
        while (v22 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeProgramRGBAdditionNode::GetDOD(LiHeProgramRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeProgramRGBAdditionNode::GetROI(LiHeProgramRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeProgramRGBAdditionNode::LiHeProgramRGBAdditionNode(LiHeProgramRGBAdditionNode *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1131908;
  operator new();
}

void sub_1B7B80C0C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(HGNode *this)
{
  *(void *)this = &unk_1F1131908;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40451B5BE8);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeProgramRGBAdditionNode::SetParameter(LiHeProgramRGBAdditionNode *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeProgramRGBAdditionNode::GetParameter(LiHeProgramRGBAdditionNode *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeProgramSpotLightStencil::GetProgram(LiHeProgramSpotLightStencil *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000078a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const half4 c1 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[5] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[7] + s0;\n"
             "    s1 = s0 + hg_Params[8];\n"
             "    r0.w = half(hg_Params[3].x) - half(hg_Params[4].x);\n"
             "    s0.x = float(s0.w < -hg_Params[8].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.xyz = normalize(s0.xyz).xyz;\n"
             "    s0.w = dot(-s0.xyz, hg_Params[2].xyz);\n"
             "    r0.x = half(half(s0.w) < half(hg_Params[4].x));\n"
             "    r0.y = half(half(s0.w) < half(hg_Params[3].x));\n"
             "    r0.x = half(-r0.x >= c0.x);\n"
             "    r0.z = fmin(r0.x, r0.y);\n"
             "    r0.y = half(-r0.y >= c0.x);\n"
             "    r0.x = fmin(r0.x, r0.y);\n"
             "    s0.x = dot(s0.xyz, hg_Params[1].xyz);\n"
             "    s0.w = s0.w - hg_Params[4].x;\n"
             "    s0.w = clamp(s0.w/float(r0.w), 0.00000f, 1.00000f);\n"
             "    r0.w = half(s0.w)*c0.z + c0.w;\n"
             "    s0.w = s0.w*s0.w;\n"
             "    s0.w = s0.w*float(r0.w);\n"
             "    s0.w = select(float(c0.x), s0.w, -float(r0.z) < 0.00000h);\n"
             "    r0.x = select(half(s0.w), c1.x, -r0.x < 0.00000h);\n"
             "    r0.y = half(half(s0.x) >= c0.x);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s1 = float4(r1)*float4(r0.xxxx);\n"
             "    output.color0 = s1*float4(r0.yyyy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=0c6af7d6:4256c98c:dfc94b14:08c886b1\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0009:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000706\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const float4 c1 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[5] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[7] + r0;\n"
             "    r1 = r0 + hg_Params[8];\n"
             "    r2.w = hg_Params[3].x - hg_Params[4].x;\n"
             "    r0.x = float(r0.w < -hg_Params[8].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.xyz = normalize(r0.xyz).xyz;\n"
             "    r0.w = dot(-r0.xyz, hg_Params[2].xyz);\n"
             "    r2.x = float(r0.w < hg_Params[4].x);\n"
             "    r2.y = float(r0.w < hg_Params[3].x);\n"
             "    r2.x = float(-r2.x >= c0.x);\n"
             "    r2.z = fmin(r2.x, r2.y);\n"
             "    r2.y = float(-r2.y >= c0.x);\n"
             "    r2.x = fmin(r2.x, r2.y);\n"
             "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
             "    r0.w = r0.w - hg_Params[4].x;\n"
             "    r0.w = clamp(r0.w/r2.w, 0.00000f, 1.00000f);\n"
             "    r2.w = r0.w*c0.z + c0.w;\n"
             "    r0.w = r0.w*r0.w;\n"
             "    r0.w = r0.w*r2.w;\n"
             "    r0.w = select(c0.x, r0.w, -r2.z < 0.00000f);\n"
             "    r2.x = select(r0.w, c1.x, -r2.x < 0.00000f);\n"
             "    r2.y = float(r0.x >= c0.x);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r1*r2.xxxx;\n"
             "    output.color0 = r1*r2.yyyy;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9f87ae4d:9343216d:64112ba7:a3753792\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0009:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000826\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
           "    const highp vec4 c1 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal6;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal5 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal7 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal8;\n"
           "    r2.w = hg_ProgramLocal3.x - hg_ProgramLocal4.x;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal8.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.xyz = normalize(r0.xyz).xyz;\n"
           "    r0.w = dot(-r0.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.x = float(r0.w < hg_ProgramLocal4.x);\n"
           "    r2.y = float(r0.w < hg_ProgramLocal3.x);\n"
           "    r2.x = float(-r2.x >= c0.x);\n"
           "    r2.z = min(r2.x, r2.y);\n"
           "    r2.y = float(-r2.y >= c0.x);\n"
           "    r2.x = min(r2.x, r2.y);\n"
           "    r0.x = dot(r0.xyz, hg_ProgramLocal1.xyz);\n"
           "    r0.w = r0.w - hg_ProgramLocal4.x;\n"
           "    r0.w = clamp(r0.w/r2.w, 0.00000, 1.00000);\n"
           "    r2.w = r0.w*c0.z + c0.w;\n"
           "    r0.w = r0.w*r0.w;\n"
           "    r0.w = r0.w*r2.w;\n"
           "    r0.w = -r2.z < 0.00000 ? r0.w : c0.x;\n"
           "    r2.x = -r2.x < 0.00000 ? c1.x : r0.w;\n"
           "    r2.y = float(r0.x >= c0.x);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r1*r2.xxxx;\n"
           "    gl_FragColor = r1*r2.yyyy;\n"
           "}\n"
           "//MD5=9366bdf4:502f0aa6:50468ebd:79856a20\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0009:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeProgramSpotLightStencil::InitProgramDescriptor(LiHeProgramSpotLightStencil *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramSpotLightStencil_hgc_visible", "//Metal1.0     \n//LEN=00000005ef\n[[ visible ]] FragmentOut LiHeProgramSpotLightStencil_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
    "    const float4 c1 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[6];\n"
    "    r0 = texCoord1.xxxx*hg_Params[5] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[7] + r0;\n"
    "    r1 = r0 + hg_Params[8];\n"
    "    r2.w = hg_Params[3].x - hg_Params[4].x;\n"
    "    r0.x = float(r0.w < -hg_Params[8].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.xyz = normalize(r0.xyz).xyz;\n"
    "    r0.w = dot(-r0.xyz, hg_Params[2].xyz);\n"
    "    r2.x = float(r0.w < hg_Params[4].x);\n"
    "    r2.y = float(r0.w < hg_Params[3].x);\n"
    "    r2.x = float(-r2.x >= c0.x);\n"
    "    r2.z = fmin(r2.x, r2.y);\n"
    "    r2.y = float(-r2.y >= c0.x);\n"
    "    r2.x = fmin(r2.x, r2.y);\n"
    "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
    "    r0.w = r0.w - hg_Params[4].x;\n"
    "    r0.w = clamp(r0.w/r2.w, 0.00000f, 1.00000f);\n"
    "    r2.w = r0.w*c0.z + c0.w;\n"
    "    r0.w = r0.w*r0.w;\n"
    "    r0.w = r0.w*r2.w;\n"
    "    r0.w = select(c0.x, r0.w, -r2.z < 0.00000f);\n"
    "    r2.x = select(r0.w, c1.x, -r2.x < 0.00000f);\n"
    "    r2.y = float(r0.x >= c0.x);\n"
    "    r1 = color0;\n"
    "    r1 = r1*r2.xxxx;\n"
    "    output.color0 = r1*r2.yyyy;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeProgramSpotLightStencil");
}

void sub_1B7B80DDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E76450;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B80F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B80F64()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B80F5CLL);
}

void *LiHeProgramSpotLightStencil::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramSpotLightStencil [hgc1]");
}

uint64_t LiHeProgramSpotLightStencil::BindTexture(LiHeProgramSpotLightStencil *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramSpotLightStencil::Bind(LiHeProgramSpotLightStencil *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeProgramSpotLightStencil::RenderTile(LiHeProgramSpotLightStencil *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v6 = a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    int32x2_t v8 = a2[10];
    uint64_t v9 = 16 * a2[3].i32[0];
    uint64_t v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 2)
      {
        unsigned int v103 = 0;
        float32x4_t v13 = v7;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 16;
        float32x4_t v13 = v7;
        do
        {
          float32x4_t v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v15 = *((void *)this + 51);
          float32x4_t v16 = *(float32x4_t *)(v15 + 96);
          float32x4_t v17 = *(float32x4_t *)(v15 + 112);
          float32x4_t v18 = *(float32x4_t *)(v15 + 64);
          float32x4_t v19 = *(float32x4_t *)(v15 + 80);
          float32x4_t v20 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(v19, v13.f32[0])), vmulq_laneq_f32(v17, v13, 2));
          float32x4_t v21 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(v19, v14.f32[0])), vmulq_laneq_f32(v17, v14, 2));
          float32x4_t v23 = *(float32x4_t *)(v15 + 128);
          float32x4_t v22 = *(float32x4_t *)(v15 + 144);
          float32x4_t v24 = vaddq_f32(v23, v20);
          float32x4_t v25 = vaddq_f32(v23, v21);
          float32x4_t v26 = vnegq_f32(v23);
          int8x16_t v27 = vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v26, v20));
          int8x16_t v28 = vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v26, v21));
          int8x16_t v29 = vextq_s8(v27, v27, 0xCuLL);
          int8x16_t v30 = vextq_s8(v28, v28, 0xCuLL);
          int8x16_t v31 = *(int8x16_t *)(v15 + 160);
          float32x4_t v32 = *(float32x4_t *)(v15 + 176);
          int32x4_t v33 = (int32x4_t)vbslq_s8(v31, v29, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), v22));
          int64x2_t v34 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v24), v22);
          int64x2_t v35 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v25), v22);
          int32x4_t v36 = (int32x4_t)vbslq_s8(v31, v30, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), v22));
          v37.i64[0] = v33.i64[0];
          v37.i64[1] = v34.i64[1];
          v38.i64[0] = v36.i64[0];
          v38.i64[1] = v35.i64[1];
          unint64_t v39 = vdupq_laneq_s64(v34, 1).u64[0];
          int8x16_t v40 = vextq_s8((int8x16_t)v34, (int8x16_t)v33, 8uLL);
          v33.i64[1] = v39;
          unint64_t v41 = vdupq_laneq_s64(v35, 1).u64[0];
          int8x16_t v42 = vextq_s8((int8x16_t)v35, (int8x16_t)v36, 8uLL);
          v36.i64[1] = v41;
          float32x4_t v43 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v37, v22), v40, (int8x16_t)vrev64q_s32(v33));
          float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38, v22), v42, (int8x16_t)vrev64q_s32(v36));
          float32x4_t v45 = *(float32x4_t *)(v15 + 192);
          int8x16_t v46 = *(int8x16_t *)(v15 + 208);
          float32x4_t v47 = vminq_f32(vmaxq_f32(vrecpeq_f32(v43), v32), v45);
          float32x4_t v48 = vminq_f32(vmaxq_f32(vrecpeq_f32(v44), v32), v45);
          float32x4_t v49 = vminq_f32(vmaxq_f32(vmulq_f32(v47, vrecpsq_f32(v43, v47)), v32), v45);
          float32x4_t v50 = vminq_f32(vmaxq_f32(vmulq_f32(v48, vrecpsq_f32(v44, v48)), v32), v45);
          float32x4_t v51 = vmulq_n_f32(v24, vmulq_f32(v49, vrecpsq_f32(v43, v49)).f32[0]);
          float32x4_t v52 = *(float32x4_t *)(v15 + 16);
          float32x4_t v53 = vsubq_f32(*(float32x4_t *)v15, v51);
          float32x4_t v54 = vsubq_f32(*(float32x4_t *)v15, vmulq_n_f32(v25, vmulq_f32(v50, vrecpsq_f32(v44, v50)).f32[0]));
          int32x4_t v55 = (int32x4_t)vmulq_f32(v53, v53);
          int32x4_t v56 = (int32x4_t)vmulq_f32(v54, v54);
          float32x4_t v58 = *(float32x4_t *)(v15 + 32);
          float32x4_t v57 = *(float32x4_t *)(v15 + 48);
          int8x16_t v59 = (int8x16_t)vsubq_f32(v57, v18);
          float32x4_t v60 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v55, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1)));
          float32x4_t v61 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v56, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.i8, 1)));
          float32x4_t v62 = vminq_f32(vrsqrteq_f32(v60), v45);
          float32x4_t v63 = vminq_f32(vrsqrteq_f32(v61), v45);
          float32x4_t v64 = vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v62, v60), v62)), v45);
          float32x4_t v65 = vminq_f32(vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, v61), v63)), v45);
          float32x4_t v66 = vmulq_f32(v53, vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v60, v64), v64)));
          float32x4_t v67 = vmulq_f32(v54, vmulq_f32(v65, vrsqrtsq_f32(vmulq_f32(v61, v65), v65)));
          int32x4_t v68 = (int32x4_t)vmulq_f32(v58, vnegq_f32(v66));
          int32x4_t v69 = (int32x4_t)vmulq_f32(v58, vnegq_f32(v67));
          float32x4_t v70 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v68), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL))), (int8x16_t)v66);
          float32x4_t v71 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v69), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL))), (int8x16_t)v67);
          float32x4_t v72 = (float32x4_t)vextq_s8(v59, v59, 4uLL);
          float32x4_t v73 = *(float32x4_t *)(v15 + 224);
          float32x4_t v74 = *(float32x4_t *)(v15 + 240);
          v75.i64[1] = v72.i64[1];
          v75.i64[0] = vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 0xCuLL))).u64[0];
          float32x4_t v76 = (float32x4_t)vrev64q_s32((int32x4_t)v57);
          v72.i64[0] = vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL))).u64[0];
          float32x4_t v77 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v76, (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL))), v75);
          float32x4_t v78 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v76, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL))), (int8x16_t)v72);
          int8x16_t v79 = vbslq_s8(v31, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v77), v22)), (int8x16_t)v77);
          int8x16_t v80 = vbslq_s8(v31, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v78), v22)), (int8x16_t)v78);
          int8x16_t v81 = *(int8x16_t *)(v15 + 256);
          float32x4_t v82 = *(float32x4_t *)(v15 + 272);
          float32x4_t v83 = (float32x4_t)vbslq_s8(v81, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v79, v79, 8uLL), (float32x4_t)vextq_s8(v79, v79, 0xCuLL)), v79);
          float32x4_t v84 = (float32x4_t)vbslq_s8(v81, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v80, v80, 8uLL), (float32x4_t)vextq_s8(v80, v80, 0xCuLL)), v80);
          float32x4_t v85 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v83), v32)), (int8x16_t)v83);
          float32x4_t v86 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v84), v32)), (int8x16_t)v84);
          v72.i64[0] = vminq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v85)).u64[0];
          v74.i64[0] = vminq_f32(v86, (float32x4_t)vrev64q_s32((int32x4_t)v86)).u64[0];
          v72.i64[1] = v85.i64[1];
          v74.i64[1] = v86.i64[1];
          float32x4_t v87 = vmulq_f32(v52, v70);
          float32x4_t v88 = vmulq_f32(v52, v71);
          v87.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v87, 1), vaddq_f32(v87, (float32x4_t)vrev64q_s32((int32x4_t)v87))).u64[0];
          v88.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v88, 1), vaddq_f32(v88, (float32x4_t)vrev64q_s32((int32x4_t)v88))).u64[0];
          float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL);
          float32x4_t v90 = vsubq_f32(v70, v89);
          float32x4_t v91 = vsubq_f32(v71, v89);
          v71.i64[0] = v87.i64[0];
          v71.i64[1] = v90.i64[1];
          v90.i64[0] = v88.i64[0];
          v90.i64[1] = v91.i64[1];
          float32x4_t v92 = vminq_f32(vmaxq_f32(vrecpeq_f32(v72), v73), v45);
          float32x4_t v93 = vminq_f32(vmaxq_f32(vrecpeq_f32(v74), v73), v45);
          float32x4_t v94 = vminq_f32(vmaxq_f32(vmulq_f32(v92, vrecpsq_f32(v72, v92)), v73), v45);
          float32x4_t v95 = vminq_f32(vmaxq_f32(vmulq_f32(v93, vrecpsq_f32(v74, v93)), v73), v45);
          float32x4_t v96 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vmulq_f32(v94, vrecpsq_f32(v72, v94))), v32), v22);
          float32x4_t v97 = vminq_f32(vmaxq_f32(vmulq_f32(v90, vmulq_f32(v95, vrecpsq_f32(v74, v95))), v32), v22);
          v95.i64[0] = v87.i64[0];
          v95.i64[1] = v96.i64[1];
          v71.i64[0] = v88.i64[0];
          v71.i64[1] = v97.i64[1];
          float32x4_t v98 = *(float32x4_t *)(v15 + 288);
          float32x4_t v99 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32(v82, vmulq_f32(v95, v98)), (int8x16_t)v72);
          float32x4_t v100 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32(v82, vmulq_f32(v71, v98)), (int8x16_t)v74);
          v87.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v99), v32), (int8x16_t)vmulq_f32(vmulq_f32(v96, v96), v99), *(int8x16_t *)&v32).i64[1];
          v88.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v100), v32), (int8x16_t)vmulq_f32(vmulq_f32(v97, v97), v100), *(int8x16_t *)&v32).i64[1];
          v97.i64[0] = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32(v99, v82), (int8x16_t)v98, vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL)), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgeq_f32(v87, v82)))).u64[0];
          v31.i64[0] = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32(v100, v82), (int8x16_t)v98, vextq_s8((int8x16_t)v88, (int8x16_t)v88, 0xCuLL)), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgeq_f32(v88, v82)))).u64[0];
          float32x4_t v101 = vmulq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v8 + v12), *(float *)v31.i32), *(float32x2_t *)v31.i8, 1);
          int64x2_t v102 = (float32x4_t *)(*(void *)&v6 + v12);
          v102[-1] = vmulq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v8 + v12 - 16), v97.f32[0]), *(float32x2_t *)v97.f32, 1);
          *int64x2_t v102 = v101;
          float32x4_t v13 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736B0);
          v11 -= 2;
          v12 += 32;
        }
        while (v5 + v11 > 1);
        unsigned int v103 = -v11;
      }
      if ((int)v103 < v5)
      {
        uint64_t v104 = *((void *)this + 51);
        float32x4_t v105 = *(float32x4_t *)(v104 + 64);
        float32x4_t v106 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v104 + 96), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)(v104 + 80), v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v104 + 112), v13, 2));
        float32x4_t v108 = *(float32x4_t *)(v104 + 128);
        float32x4_t v107 = *(float32x4_t *)(v104 + 144);
        float32x4_t v109 = vaddq_f32(v108, v106);
        int8x16_t v110 = vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(vnegq_f32(v108), v106));
        int8x16_t v111 = vextq_s8(v110, v110, 0xCuLL);
        int8x16_t v112 = *(int8x16_t *)(v104 + 160);
        float32x4_t v113 = *(float32x4_t *)(v104 + 176);
        int32x4_t v114 = (int32x4_t)vbslq_s8(v112, v111, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL), v107));
        int64x2_t v115 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v109), v107);
        v116.i64[0] = v114.i64[0];
        v116.i64[1] = v115.i64[1];
        float32x4_t v117 = *(float32x4_t *)(v104 + 48);
        int8x16_t v118 = (int8x16_t)vsubq_f32(v117, v105);
        unint64_t v119 = vdupq_laneq_s64(v115, 1).u64[0];
        int8x16_t v120 = vextq_s8((int8x16_t)v115, (int8x16_t)v114, 8uLL);
        v114.i64[1] = v119;
        int8x16_t v121 = vextq_s8(v118, v118, 4uLL);
        float32x4_t v122 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v116, v107), v120, (int8x16_t)vrev64q_s32(v114));
        float32x4_t v124 = *(float32x4_t *)(v104 + 192);
        int8x16_t v123 = *(int8x16_t *)(v104 + 208);
        float32x4_t v125 = vminq_f32(vmaxq_f32(vrecpeq_f32(v122), v113), v124);
        float32x4_t v126 = vminq_f32(vmaxq_f32(vmulq_f32(v125, vrecpsq_f32(v122, v125)), v113), v124);
        float32x4_t v127 = vsubq_f32(*(float32x4_t *)v104, vmulq_n_f32(v109, vmulq_f32(v126, vrecpsq_f32(v122, v126)).f32[0]));
        int32x4_t v128 = (int32x4_t)vmulq_f32(v127, v127);
        float32x4_t v129 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v128, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.i8, 1)));
        float32x4_t v130 = vminq_f32(vrsqrteq_f32(v129), v124);
        float32x4_t v131 = vminq_f32(vmulq_f32(v130, vrsqrtsq_f32(vmulq_f32(v130, v129), v130)), v124);
        float32x4_t v132 = vmulq_f32(v127, vmulq_f32(v131, vrsqrtsq_f32(vmulq_f32(v131, v129), v131)));
        float32x4_t v133 = vmulq_f32(*(float32x4_t *)(v104 + 32), vnegq_f32(v132));
        float32x4_t v134 = (float32x4_t)vbslq_s8(v123, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v133), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL))), (int8x16_t)v132);
        float32x4_t v135 = *(float32x4_t *)(v104 + 224);
        int8x16_t v136 = *(int8x16_t *)(v104 + 240);
        v121.i64[0] = vandq_s8((int8x16_t)v135, (int8x16_t)vcgtq_f32(v105, (float32x4_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 0xCuLL))).u64[0];
        float32x4_t v137 = (float32x4_t)vbslq_s8(v136, vandq_s8((int8x16_t)v135, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v117), (float32x4_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL))), v121);
        int8x16_t v138 = vbslq_s8(v112, vandq_s8((int8x16_t)v135, (int8x16_t)vcgeq_f32(vnegq_f32(v137), v107)), (int8x16_t)v137);
        float32x4_t v139 = *(float32x4_t *)(v104 + 272);
        float32x4_t v140 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v104 + 256), (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v138, v138, 8uLL), (float32x4_t)vextq_s8(v138, v138, 0xCuLL)), v138);
        float32x4_t v141 = (float32x4_t)vbslq_s8(v136, vandq_s8((int8x16_t)v135, (int8x16_t)vcgeq_f32(vnegq_f32(v140), v113)), (int8x16_t)v140);
        v133.i64[0] = vminq_f32(v141, (float32x4_t)vrev64q_s32((int32x4_t)v141)).u64[0];
        v133.i64[1] = v141.i64[1];
        float32x4_t v142 = vmulq_f32(*(float32x4_t *)(v104 + 16), v134);
        v142.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v142, 1), vaddq_f32(v142, (float32x4_t)vrev64q_s32((int32x4_t)v142))).u64[0];
        float32x4_t v143 = vsubq_f32(v134, (float32x4_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 4uLL));
        v134.i64[0] = v142.i64[0];
        v134.i64[1] = v143.i64[1];
        float32x4_t v144 = vminq_f32(vmaxq_f32(vrecpeq_f32(v133), v135), v124);
        float32x4_t v145 = vminq_f32(vmaxq_f32(vmulq_f32(v144, vrecpsq_f32(v133, v144)), v135), v124);
        float32x4_t v146 = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v145, vrecpsq_f32(v133, v145)), v134), v113), v107);
        v145.i64[0] = v142.i64[0];
        v145.i64[1] = v146.i64[1];
        float32x4_t v147 = *(float32x4_t *)(v104 + 288);
        float32x4_t v148 = (float32x4_t)vbslq_s8(v123, (int8x16_t)vaddq_f32(v139, vmulq_f32(v145, v147)), (int8x16_t)v133);
        v142.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v148), v113), (int8x16_t)vmulq_f32(vmulq_f32(v146, v146), v148), *(int8x16_t *)&v113).i64[1];
        v112.i64[0] = vbslq_s8(v112, vbslq_s8((int8x16_t)vcgtq_f32(v148, v139), (int8x16_t)v147, vextq_s8((int8x16_t)v142, (int8x16_t)v142, 0xCuLL)), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v147, (int8x16_t)vcgeq_f32(v142, v139)))).u64[0];
        *(float32x4_t *)(*(void *)&v6 + 16 * v103) = vmulq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)&v8 + 16 * v103), *(float *)v112.i32), *(float32x2_t *)v112.i8, 1);
      }
      float32x4_t v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B7E736C0);
      *(void *)&v8 += v10;
      *(void *)&v6 += v9;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeProgramSpotLightStencil::GetDOD(LiHeProgramSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeProgramSpotLightStencil::GetROI(LiHeProgramSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeProgramSpotLightStencil::LiHeProgramSpotLightStencil(LiHeProgramSpotLightStencil *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1131B70;
  operator new();
}

void sub_1B7B81B24(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(HGNode *this)
{
  *(void *)this = &unk_1F1131B70;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40FDACBBE0);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeProgramSpotLightStencil::SetParameter(LiHeProgramSpotLightStencil *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  int32x2_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *int32x2_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  PCSharedCount v10[2] = a5;
  void v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeProgramSpotLightStencil::GetParameter(LiHeProgramSpotLightStencil *this, unsigned int a2, float *a3)
{
  if (a2 > 8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *LiHeReflectionShader::GetProgram(LiHeReflectionShader *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003bc\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0].xxxx);\n"
             "    r1 = r1*half4(hg_Params[0].yyyy);\n"
             "    r2 = c0.xxxx - r1.wwww;\n"
             "    r1 = r1*r0.wwww;\n"
             "    output.color0 = float4(r0)*float4(r2) + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a3de96a9:0da5fe21:d01c01a5:5596c784\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000038b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0].xxxx;\n"
             "    r1 = r1*hg_Params[0].yyyy;\n"
             "    r2 = c0.xxxx - r1.wwww;\n"
             "    r1 = r1*r0.wwww;\n"
             "    output.color0 = r0*r2 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=decc026a:4c0f49d4:4af9b62c:3edbd803\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000033e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0.xxxx;\n"
           "    r1 = r1*hg_ProgramLocal0.yyyy;\n"
           "    r2 = c0.xxxx - r1.wwww;\n"
           "    r1 = r1*r0.wwww;\n"
           "    gl_FragColor = r0*r2 + r1;\n"
           "}\n"
           "//MD5=a1320015:d5a104c3:60e25e8f:8b0a3e1c\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeReflectionShader::InitProgramDescriptor(LiHeReflectionShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeReflectionShader_hgc_visible", "//Metal1.0     \n//LEN=00000001ee\n[[ visible ]] FragmentOut LiHeReflectionShader_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r0 = r0*hg_Params[0].xxxx;\n"
    "    r1 = r1*hg_Params[0].yyyy;\n"
    "    r2 = c0.xxxx - r1.wwww;\n"
    "    r1 = r1*r0.wwww;\n"
    "    output.color0 = r0*r2 + r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeReflectionShader");
}

void sub_1B7B81DB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B81EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B81F3C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B81F34);
}

void *LiHeReflectionShader::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeReflectionShader [hgc1]");
}

uint64_t LiHeReflectionShader::BindTexture(LiHeReflectionShader *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeReflectionShader::Bind(LiHeReflectionShader *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeReflectionShader::RenderTile(LiHeReflectionShader *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 12);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = 16 * *((int *)a2 + 26);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v24) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          float32x4_t v13 = (float32x2_t *)*((void *)this + 51);
          float32x4_t v14 = *(float32x4_t *)v13[2].f32;
          float32x4_t v15 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 - 32), COERCE_FLOAT(*(_OWORD *)v13->f32));
          float32x4_t v16 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 - 16), COERCE_FLOAT(*(_OWORD *)v13->f32));
          float32x4_t v17 = vmulq_n_f32(*(float32x4_t *)(v8 + v12), COERCE_FLOAT(*(_OWORD *)v13->f32));
          float32x4_t v18 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 + 16), COERCE_FLOAT(*(_OWORD *)v13->f32));
          float32x4_t v19 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 32), *v13, 1);
          float32x4_t v20 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 16), *v13, 1);
          float32x4_t v21 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12), *v13, 1);
          float32x4_t v22 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12 + 16), *v13, 1);
          float32x4_t v23 = (float32x4_t *)(v5 + v12);
          v23[-2] = vaddq_f32(vmulq_laneq_f32(v19, v15, 3), vmulq_f32(v15, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3))));
          v23[-1] = vaddq_f32(vmulq_laneq_f32(v20, v16, 3), vmulq_f32(v16, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3))));
          *float32x4_t v23 = vaddq_f32(vmulq_laneq_f32(v21, v17, 3), vmulq_f32(v17, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3))));
          v23[1] = vaddq_f32(vmulq_laneq_f32(v22, v18, 3), vmulq_f32(v18, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3))));
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v24) = -v11;
      }
      if ((int)v24 < v4)
      {
        uint64_t v24 = v24;
        do
        {
          float32x4_t v25 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v26 = vmulq_n_f32(*(float32x4_t *)(v8 + 16 * v24), COERCE_FLOAT(*v25));
          float32x4_t v27 = vmulq_lane_f32(*(float32x4_t *)(v6 + 16 * v24), *(float32x2_t *)v25->f32, 1);
          *(float32x4_t *)(v5 + 16 * v24++) = vaddq_f32(vmulq_laneq_f32(v27, v26, 3), vmulq_f32(v26, vsubq_f32(v25[1], (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3))));
        }
        while (v24 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeReflectionShader::GetDOD(LiHeReflectionShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeReflectionShader::GetROI(LiHeReflectionShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeReflectionShader::LiHeReflectionShader(LiHeReflectionShader *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1131DD8;
  operator new();
}

void sub_1B7B82394(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeReflectionShader::~LiHeReflectionShader(HGNode *this)
{
  *(void *)this = &unk_1F1131DD8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40E0EAB150);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeReflectionShader::~LiHeReflectionShader(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeReflectionShader::SetParameter(LiHeReflectionShader *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (float *)*((void *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  *uint64_t v8 = a3;
  v8[1] = a4;
  PCSharedCount v8[2] = a5;
  void v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeReflectionShader::GetParameter(LiHeReflectionShader *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeShadowProgramPCSS::GetProgram(LiHeShadowProgramPCSS *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000008b2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord0.yyyy*hg_Params[1];\n"
             "    s0 = frag._texCoord0.xxxx*hg_Params[0] + s0;\n"
             "    s0 = frag._texCoord0.zzzz*hg_Params[2] + s0;\n"
             "    s0 = hg_Params[3] + s0;\n"
             "    s1.x = hg_Params[9].z - s0.z;\n"
             "    s1.x = 1.00000f / s1.x;\n"
             "    s1.x = -s0.z*s1.x;\n"
             "    s1 = mix(s0, hg_Params[9], s1.xxxx);\n"
             "    s2 = s1.yyyy*hg_Params[5];\n"
             "    s2 = s1.xxxx*hg_Params[4] + s2;\n"
             "    s3 = s1.wwww*hg_Params[7];\n"
             "    s2 = s1.zzzz*hg_Params[6] + s2;\n"
             "    s1 = s2 + s3;\n"
             "    s2.x = float(s2.w < -s3.w);\n"
             "    s3.x = fmax(s1.w, float(c0.x));\n"
             "    s3.z = fmin(s1.w, -float(c0.x));\n"
             "    s1.w = float(-fabs(hg_Params[10].x) >= float(c0.y));\n"
             "    s2.x = float(-s2.x >= float(c0.y));\n"
             "    s3.y = fmin(s1.w, s2.x);\n"
             "    s2 = s0.yyyy*hg_Params[5];\n"
             "    s0.y = select(s3.z, s3.x, -s3.y < 0.00000h);\n"
             "    s2 = s0.xxxx*hg_Params[4] + s2;\n"
             "    s3 = s0.wwww*hg_Params[7];\n"
             "    s2 = s0.zzzz*hg_Params[6] + s2;\n"
             "    s0.x = float(s2.w < -s3.w);\n"
             "    s2 = s2 + s3;\n"
             "    s0.w = fmax(s2.w, float(c0.x));\n"
             "    s3.xyz = s1.xyz/s0.yyy;\n"
             "    s2.w = fmin(s2.w, -float(c0.x));\n"
             "    s0.x = s1.w*s0.x + -s1.w;\n"
             "    s0.x = select(s2.w, s0.w, s0.x < 0.00000h);\n"
             "    s2.xyz = s2.xyz/s0.xxx;\n"
             "    s0.y = dot(s2.xyz, s2.xyz);\n"
             "    s0.w = rsqrt(s0.y);\n"
             "    s0.z = -s0.z/hg_Params[6].z;\n"
             "    s0.x = dot(s3.xyz, s3.xyz);\n"
             "    s0.x = rsqrt(s0.x);\n"
             "    s0.yw = 1.00000f / s0.xw;\n"
             "    s2.x = s0.w - s0.y;\n"
             "    s0.y = float(s0.y < s0.w);\n"
             "    s0.x = s0.x*hg_Params[8].x;\n"
             "    s2.y = s0.z*float(c0.z);\n"
             "    s0.x = s2.x*s0.x;\n"
             "    s2.x = s0.z*s2.y;\n"
             "    s0.w = s2.x*hg_Params[8].x;\n"
             "    s0.z = float(float(c0.y) < s0.z);\n"
             "    s0.w = s0.w*float(c0.z);\n"
             "    s0.z = s0.z*-hg_Params[10].x;\n"
             "    s0.z = select(float(c0.y), s0.w, s0.z < 0.00000h);\n"
             "    s0.y = fmin(s0.y, s1.w);\n"
             "    output.color0.x = select(s0.z, s0.x, -s0.y < 0.00000h);\n"
             "    output.color0.yzw = float3(c0.yyw);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e8f99b28:46547f5f:3f85fdff:3e4ee8e1\n"
             "//SIG=00400000:00000000:00000000:00000000:0001:000b:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000866\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord0.yyyy*hg_Params[1];\n"
             "    r0 = frag._texCoord0.xxxx*hg_Params[0] + r0;\n"
             "    r0 = frag._texCoord0.zzzz*hg_Params[2] + r0;\n"
             "    r0 = hg_Params[3] + r0;\n"
             "    r1.x = hg_Params[9].z - r0.z;\n"
             "    r1.x = 1.00000f / r1.x;\n"
             "    r1.x = -r0.z*r1.x;\n"
             "    r1 = mix(r0, hg_Params[9], r1.xxxx);\n"
             "    r2 = r1.yyyy*hg_Params[5];\n"
             "    r2 = r1.xxxx*hg_Params[4] + r2;\n"
             "    r3 = r1.wwww*hg_Params[7];\n"
             "    r2 = r1.zzzz*hg_Params[6] + r2;\n"
             "    r1 = r2 + r3;\n"
             "    r2.x = float(r2.w < -r3.w);\n"
             "    r3.x = fmax(r1.w, c0.x);\n"
             "    r3.z = fmin(r1.w, -c0.x);\n"
             "    r1.w = float(-fabs(hg_Params[10].x) >= c0.y);\n"
             "    r2.x = float(-r2.x >= c0.y);\n"
             "    r3.y = fmin(r1.w, r2.x);\n"
             "    r2 = r0.yyyy*hg_Params[5];\n"
             "    r0.y = select(r3.z, r3.x, -r3.y < 0.00000f);\n"
             "    r2 = r0.xxxx*hg_Params[4] + r2;\n"
             "    r3 = r0.wwww*hg_Params[7];\n"
             "    r2 = r0.zzzz*hg_Params[6] + r2;\n"
             "    r0.x = float(r2.w < -r3.w);\n"
             "    r2 = r2 + r3;\n"
             "    r0.w = fmax(r2.w, c0.x);\n"
             "    r3.xyz = r1.xyz/r0.yyy;\n"
             "    r2.w = fmin(r2.w, -c0.x);\n"
             "    r0.x = r1.w*r0.x + -r1.w;\n"
             "    r0.x = select(r2.w, r0.w, r0.x < 0.00000f);\n"
             "    r2.xyz = r2.xyz/r0.xxx;\n"
             "    r0.y = dot(r2.xyz, r2.xyz);\n"
             "    r0.w = rsqrt(r0.y);\n"
             "    r0.z = -r0.z/hg_Params[6].z;\n"
             "    r0.x = dot(r3.xyz, r3.xyz);\n"
             "    r0.x = rsqrt(r0.x);\n"
             "    r0.yw = 1.00000f / r0.xw;\n"
             "    r2.x = r0.w - r0.y;\n"
             "    r0.y = float(r0.y < r0.w);\n"
             "    r0.x = r0.x*hg_Params[8].x;\n"
             "    r2.y = r0.z*c0.z;\n"
             "    r0.x = r2.x*r0.x;\n"
             "    r2.x = r0.z*r2.y;\n"
             "    r0.w = r2.x*hg_Params[8].x;\n"
             "    r0.z = float(c0.y < r0.z);\n"
             "    r0.w = r0.w*c0.z;\n"
             "    r0.z = r0.z*-hg_Params[10].x;\n"
             "    r0.z = select(c0.y, r0.w, r0.z < 0.00000f);\n"
             "    r0.y = fmin(r0.y, r1.w);\n"
             "    output.color0.x = select(r0.z, r0.x, -r0.y < 0.00000f);\n"
             "    output.color0.yzw = c0.yyw;\n"
             "    return output;\n"
             "}\n"
             "//MD5=8057bd78:20502bc7:2259d772:e60813d5\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:000b:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a13\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = hg_TexCoord0.yyyy*hg_ProgramLocal1;\n"
           "    r0 = hg_TexCoord0.xxxx*hg_ProgramLocal0 + r0;\n"
           "    r0 = hg_TexCoord0.zzzz*hg_ProgramLocal2 + r0;\n"
           "    r0 = hg_ProgramLocal3 + r0;\n"
           "    r1.x = hg_ProgramLocal9.z - r0.z;\n"
           "    r1.x = 1.00000 / r1.x;\n"
           "    r1.x = -r0.z*r1.x;\n"
           "    r1 = mix(r0, hg_ProgramLocal9, r1.xxxx);\n"
           "    r2 = r1.yyyy*hg_ProgramLocal5;\n"
           "    r2 = r1.xxxx*hg_ProgramLocal4 + r2;\n"
           "    r3 = r1.wwww*hg_ProgramLocal7;\n"
           "    r2 = r1.zzzz*hg_ProgramLocal6 + r2;\n"
           "    r1 = r2 + r3;\n"
           "    r2.x = float(r2.w < -r3.w);\n"
           "    r3.x = max(r1.w, c0.x);\n"
           "    r3.z = min(r1.w, -c0.x);\n"
           "    r1.w = float(-abs(hg_ProgramLocal10.x) >= c0.y);\n"
           "    r2.x = float(-r2.x >= c0.y);\n"
           "    r3.y = min(r1.w, r2.x);\n"
           "    r2 = r0.yyyy*hg_ProgramLocal5;\n"
           "    r0.y = -r3.y < 0.00000 ? r3.x : r3.z;\n"
           "    r2 = r0.xxxx*hg_ProgramLocal4 + r2;\n"
           "    r3 = r0.wwww*hg_ProgramLocal7;\n"
           "    r2 = r0.zzzz*hg_ProgramLocal6 + r2;\n"
           "    r0.x = float(r2.w < -r3.w);\n"
           "    r2 = r2 + r3;\n"
           "    r0.w = max(r2.w, c0.x);\n"
           "    r3.xyz = r1.xyz/r0.yyy;\n"
           "    r2.w = min(r2.w, -c0.x);\n"
           "    r0.x = r1.w*r0.x + -r1.w;\n"
           "    r0.x = r0.x < 0.00000 ? r0.w : r2.w;\n"
           "    r2.xyz = r2.xyz/r0.xxx;\n"
           "    r0.y = dot(r2.xyz, r2.xyz);\n"
           "    r0.w = inversesqrt(r0.y);\n"
           "    r0.z = -r0.z/hg_ProgramLocal6.z;\n"
           "    r0.x = dot(r3.xyz, r3.xyz);\n"
           "    r0.x = inversesqrt(r0.x);\n"
           "    r0.yw = vec2(1.00000) / r0.xw;\n"
           "    r2.x = r0.w - r0.y;\n"
           "    r0.y = float(r0.y < r0.w);\n"
           "    r0.x = r0.x*hg_ProgramLocal8.x;\n"
           "    r2.y = r0.z*c0.z;\n"
           "    r0.x = r2.x*r0.x;\n"
           "    r2.x = r0.z*r2.y;\n"
           "    r0.w = r2.x*hg_ProgramLocal8.x;\n"
           "    r0.z = float(c0.y < r0.z);\n"
           "    r0.w = r0.w*c0.z;\n"
           "    r0.z = r0.z*-hg_ProgramLocal10.x;\n"
           "    r0.z = r0.z < 0.00000 ? r0.w : c0.y;\n"
           "    r0.y = min(r0.y, r1.w);\n"
           "    gl_FragColor.x = -r0.y < 0.00000 ? r0.x : r0.z;\n"
           "    gl_FragColor.yzw = c0.yyw;\n"
           "}\n"
           "//MD5=591eb457:f8969871:cb49d240:64bc7bae\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:000b:0004:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void LiHeShadowProgramPCSS::InitProgramDescriptor(LiHeShadowProgramPCSS *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeShadowProgramPCSS_hgc_visible", "//Metal1.0     \n//LEN=00000007c4\n[[ visible ]] FragmentOut LiHeShadowProgramPCSS_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0.yyyy*hg_Params[1];\n"
    "    r0 = texCoord0.xxxx*hg_Params[0] + r0;\n"
    "    r0 = texCoord0.zzzz*hg_Params[2] + r0;\n"
    "    r0 = hg_Params[3] + r0;\n"
    "    r1.x = hg_Params[9].z - r0.z;\n"
    "    r1.x = 1.00000f / r1.x;\n"
    "    r1.x = -r0.z*r1.x;\n"
    "    r1 = mix(r0, hg_Params[9], r1.xxxx);\n"
    "    r2 = r1.yyyy*hg_Params[5];\n"
    "    r2 = r1.xxxx*hg_Params[4] + r2;\n"
    "    r3 = r1.wwww*hg_Params[7];\n"
    "    r2 = r1.zzzz*hg_Params[6] + r2;\n"
    "    r1 = r2 + r3;\n"
    "    r2.x = float(r2.w < -r3.w);\n"
    "    r3.x = fmax(r1.w, c0.x);\n"
    "    r3.z = fmin(r1.w, -c0.x);\n"
    "    r1.w = float(-fabs(hg_Params[10].x) >= c0.y);\n"
    "    r2.x = float(-r2.x >= c0.y);\n"
    "    r3.y = fmin(r1.w, r2.x);\n"
    "    r2 = r0.yyyy*hg_Params[5];\n"
    "    r0.y = select(r3.z, r3.x, -r3.y < 0.00000f);\n"
    "    r2 = r0.xxxx*hg_Params[4] + r2;\n"
    "    r3 = r0.wwww*hg_Params[7];\n"
    "    r2 = r0.zzzz*hg_Params[6] + r2;\n"
    "    r0.x = float(r2.w < -r3.w);\n"
    "    r2 = r2 + r3;\n"
    "    r0.w = fmax(r2.w, c0.x);\n"
    "    r3.xyz = r1.xyz/r0.yyy;\n"
    "    r2.w = fmin(r2.w, -c0.x);\n"
    "    r0.x = r1.w*r0.x + -r1.w;\n"
    "    r0.x = select(r2.w, r0.w, r0.x < 0.00000f);\n"
    "    r2.xyz = r2.xyz/r0.xxx;\n"
    "    r0.y = dot(r2.xyz, r2.xyz);\n"
    "    r0.w = rsqrt(r0.y);\n"
    "    r0.z = -r0.z/hg_Params[6].z;\n"
    "    r0.x = dot(r3.xyz, r3.xyz);\n"
    "    r0.x = rsqrt(r0.x);\n"
    "    r0.yw = 1.00000f / r0.xw;\n"
    "    r2.x = r0.w - r0.y;\n"
    "    r0.y = float(r0.y < r0.w);\n"
    "    r0.x = r0.x*hg_Params[8].x;\n"
    "    r2.y = r0.z*c0.z;\n"
    "    r0.x = r2.x*r0.x;\n"
    "    r2.x = r0.z*r2.y;\n"
    "    r0.w = r2.x*hg_Params[8].x;\n"
    "    r0.z = float(c0.y < r0.z);\n"
    "    r0.w = r0.w*c0.z;\n"
    "    r0.z = r0.z*-hg_Params[10].x;\n"
    "    r0.z = select(c0.y, r0.w, r0.z < 0.00000f);\n"
    "    r0.y = fmin(r0.y, r1.w);\n"
    "    output.color0.x = select(r0.z, r0.x, -r0.y < 0.00000f);\n"
    "    output.color0.yzw = c0.yyw;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeShadowProgramPCSS");
}

void sub_1B7B82600(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75800;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B82700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B82740()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B82738);
}

void *LiHeShadowProgramPCSS::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeShadowProgramPCSS [hgc1]");
}

uint64_t LiHeShadowProgramPCSS::BindTexture(LiHeShadowProgramPCSS *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeShadowProgramPCSS::Bind(LiHeShadowProgramPCSS *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeShadowProgramPCSS::RenderTile(LiHeShadowProgramPCSS *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = a2[1].i32[0] - v2.i32[0];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    float32x4_t v7 = (float32x4_t)xmmword_1B7E736C0;
    int32x2_t v8 = a2[2];
    uint64_t v9 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 2)
      {
        uint64_t v10 = 0;
        float32x4_t v12 = v6;
      }
      else
      {
        uint64_t v10 = 0;
        int v11 = v5;
        float32x4_t v12 = v6;
        do
        {
          float32x4_t v13 = vaddq_f32(v12, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v14 = *((void *)this + 51);
          float32x4_t v15 = *(float32x4_t *)(v14 + 16);
          float32x4_t v16 = *(float32x4_t *)(v14 + 32);
          float32x4_t v17 = *(float32x4_t *)(v14 + 48);
          float32x4_t v18 = vaddq_f32(v17, vaddq_f32(vaddq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v12.f32, 1), vmulq_n_f32(*(float32x4_t *)v14, v12.f32[0])), vmulq_laneq_f32(v16, v12, 2)));
          float32x4_t v19 = vaddq_f32(v17, vaddq_f32(vaddq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)v14, v13.f32[0])), vmulq_laneq_f32(v16, v13, 2)));
          float32x4_t v21 = *(float32x4_t *)(v14 + 128);
          float32x4_t v20 = *(float32x4_t *)(v14 + 144);
          float32x4_t v22 = vsubq_f32(v20, v18);
          float32x4_t v23 = vsubq_f32(v20, v19);
          float32x4_t v24 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
          float32x4_t v25 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
          int8x16_t v26 = *(int8x16_t *)(v14 + 160);
          float32x4_t v27 = *(float32x4_t *)(v14 + 176);
          float32x4_t v29 = *(float32x4_t *)(v14 + 192);
          float32x4_t v28 = *(float32x4_t *)(v14 + 208);
          float32x4_t v30 = vminq_f32(vmaxq_f32(vrecpeq_f32(v24), v27), v29);
          float32x4_t v31 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v27), v29);
          float32x4_t v32 = vminq_f32(vmaxq_f32(vmulq_f32(v30, vrecpsq_f32(v24, v30)), v27), v29);
          float32x4_t v33 = vminq_f32(vmaxq_f32(vmulq_f32(v31, vrecpsq_f32(v25, v31)), v27), v29);
          float32x4_t v34 = vaddq_f32(v18, vmulq_n_f32(v22, vmulq_f32(vmulq_f32(v32, vrecpsq_f32(v24, v32)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2))).f32[0]));
          float32x4_t v36 = *(float32x4_t *)(v14 + 64);
          float32x4_t v35 = *(float32x4_t *)(v14 + 80);
          float32x4_t v37 = vaddq_f32(v19, vmulq_n_f32(v23, vmulq_f32(vmulq_f32(v33, vrecpsq_f32(v25, v33)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2))).f32[0]));
          float32x4_t v38 = *(float32x4_t *)(v14 + 96);
          float32x4_t v39 = *(float32x4_t *)(v14 + 112);
          float32x4_t v40 = vmulq_laneq_f32(v39, v34, 3);
          float32x4_t v41 = vmulq_laneq_f32(v39, v37, 3);
          float32x4_t v42 = vaddq_f32(vmulq_laneq_f32(v38, v34, 2), vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v34.f32, 1), vmulq_n_f32(v36, v34.f32[0])));
          float32x4_t v43 = vaddq_f32(vmulq_laneq_f32(v38, v37, 2), vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v37.f32, 1), vmulq_n_f32(v36, v37.f32[0])));
          int32x4_t v44 = (int32x4_t)vaddq_f32(v40, v42);
          int32x4_t v45 = (int32x4_t)vaddq_f32(v41, v43);
          int8x16_t v46 = vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(vnegq_f32(v40), v42));
          int8x16_t v47 = vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(vnegq_f32(v41), v43));
          v48.i64[0] = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 0xCuLL), v28).u64[0];
          v49.i64[0] = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), v28).u64[0];
          float32x4_t v50 = *(float32x4_t *)(v14 + 224);
          int8x16_t v51 = *(int8x16_t *)(v14 + 240);
          float32x4_t v52 = vminq_f32((float32x4_t)vrev64q_s32(v45), v28);
          float32x4_t v54 = *(float32x4_t *)(v14 + 256);
          int8x16_t v53 = *(int8x16_t *)(v14 + 272);
          int8x16_t v55 = vandq_s8((int8x16_t)v54, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v51, v26), v50));
          int8x16_t v56 = vextq_s8(v55, v55, 4uLL);
          v48.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(v44), v28).i64[1];
          float32x4_t v57 = (float32x4_t)vbslq_s8(v53, v56, (int8x16_t)v44);
          float32x4_t v58 = (float32x4_t)vbslq_s8(v53, v56, (int8x16_t)v45);
          v49.i64[1] = v52.i64[1];
          int32x4_t v59 = (int32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v47, v47, 0xCuLL)), v50));
          float32x4_t v60 = (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
          float32x4_t v61 = (float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL);
          int8x16_t v62 = (int8x16_t)vminq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v46, v46, 0xCuLL)), v50))));
          int8x16_t v63 = (int8x16_t)vminq_f32(v61, (float32x4_t)vrev64q_s32(v59));
          int8x16_t v65 = *(int8x16_t *)(v14 + 288);
          int8x16_t v64 = *(int8x16_t *)(v14 + 304);
          float32x4_t v66 = (float32x4_t)vbslq_s8(v65, v62, v48);
          float32x4_t v67 = (float32x4_t)vbslq_s8(v65, v63, v49);
          float32x4_t v68 = vmulq_lane_f32(v35, *(float32x2_t *)v18.f32, 1);
          float32x4_t v69 = vmulq_lane_f32(v35, *(float32x2_t *)v19.f32, 1);
          float32x4_t v70 = (float32x4_t)vbslq_s8(v65, vbslq_s8((int8x16_t)vcgtq_f32(v66, v54), (int8x16_t)vrev64q_s32((int32x4_t)v66), vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL)), (int8x16_t)v18);
          float32x4_t v71 = (float32x4_t)vbslq_s8(v65, vbslq_s8((int8x16_t)vcgtq_f32(v67, v54), (int8x16_t)vrev64q_s32((int32x4_t)v67), vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL)), (int8x16_t)v19);
          float32x4_t v72 = vaddq_f32(v68, vmulq_n_f32(v36, v70.f32[0]));
          float32x4_t v73 = vaddq_f32(v69, vmulq_n_f32(v36, v71.f32[0]));
          float32x4_t v74 = vmulq_laneq_f32(v39, v70, 3);
          float32x4_t v75 = vmulq_laneq_f32(v39, v71, 3);
          float32x4_t v76 = vaddq_f32(vmulq_laneq_f32(v38, v70, 2), v72);
          float32x4_t v77 = vaddq_f32(vmulq_laneq_f32(v38, v71, 2), v73);
          int8x16_t v78 = vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(vnegq_f32(v74), v76));
          int8x16_t v79 = vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(vnegq_f32(v75), v77));
          float32x4_t v80 = vaddq_f32(v74, v76);
          float32x4_t v81 = vaddq_f32(v75, v77);
          float32x4_t v82 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmaxq_f32(v80, v50), vbslq_s8(v64, vextq_s8(v78, v78, 0xCuLL), (int8x16_t)v70));
          float32x4_t v83 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmaxq_f32(v81, v50), vbslq_s8(v64, vextq_s8(v79, v79, 0xCuLL), (int8x16_t)v71));
          float32x4_t v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1);
          float32x4_t v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1);
          float32x4_t v86 = vminq_f32(vmaxq_f32(vrecpeq_f32(v84), v27), v29);
          float32x4_t v87 = vminq_f32(vmaxq_f32(vrecpeq_f32(v85), v27), v29);
          float32x4_t v88 = vmulq_f32(v86, vrecpsq_f32(v84, v86));
          float32x4_t v90 = *(float32x4_t *)(v14 + 320);
          int8x16_t v89 = *(int8x16_t *)(v14 + 336);
          float32x4_t v91 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vminq_f32(v80, v90), (int8x16_t)v80);
          v92.i64[0] = vsubq_f32(vmulq_laneq_f32(v82, v57, 3), (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 0xCuLL)).u64[0];
          v93.i64[0] = vsubq_f32(vmulq_laneq_f32(v83, v58, 3), (float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 0xCuLL)).u64[0];
          v92.i64[1] = v82.i64[1];
          v93.i64[1] = v83.i64[1];
          float32x4_t v94 = vminq_f32(vmaxq_f32(v88, v27), v29);
          float32x4_t v95 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vminq_f32(v81, v90), (int8x16_t)v81);
          float32x4_t v96 = vminq_f32(vmaxq_f32(vmulq_f32(v87, vrecpsq_f32(v85, v87)), v27), v29);
          float32x4_t v97 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v50, v92), (int8x16_t)vdupq_laneq_s32((int32x4_t)v92, 3), (int8x16_t)vdupq_laneq_s32((int32x4_t)v91, 3)), 0);
          float32x4_t v98 = vmulq_f32(v94, vrecpsq_f32(v84, v94));
          float32x4_t v99 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v50, v93), (int8x16_t)vdupq_laneq_s32((int32x4_t)v93, 3), (int8x16_t)vdupq_laneq_s32((int32x4_t)v95, 3)), 0);
          float32x4_t v100 = vmulq_f32(v96, vrecpsq_f32(v85, v96));
          float32x4_t v101 = vminq_f32(vmaxq_f32(vrecpeq_f32(v97), v27), v29);
          float32x4_t v102 = vminq_f32(vmaxq_f32(vrecpeq_f32(v99), v27), v29);
          float32x4_t v103 = vmulq_f32(v98, v57);
          float32x4_t v104 = vminq_f32(vmaxq_f32(vmulq_f32(v101, vrecpsq_f32(v97, v101)), v27), v29);
          float32x4_t v105 = vminq_f32(vmaxq_f32(vmulq_f32(v102, vrecpsq_f32(v99, v102)), v27), v29);
          float32x4_t v106 = vmulq_f32(vmulq_f32(v104, vrecpsq_f32(v97, v104)), v91);
          float32x4_t v107 = vmulq_f32(vmulq_f32(v105, vrecpsq_f32(v99, v105)), v95);
          float32x4_t v108 = vmulq_f32(v106, v106);
          float32x4_t v109 = vmulq_f32(v107, v107);
          int8x16_t v110 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v108, (int8x16_t)v6, 4uLL), vaddq_f32(v108, (float32x4_t)vrev64q_s32((int32x4_t)v108)));
          int8x16_t v111 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v109, (int8x16_t)v6, 4uLL), vaddq_f32(v109, (float32x4_t)vrev64q_s32((int32x4_t)v109)));
          float32x4_t v112 = vmulq_f32(v100, v58);
          float32x4_t v113 = (float32x4_t)vextq_s8((int8x16_t)v82, v110, 8uLL);
          float32x4_t v114 = (float32x4_t)vextq_s8((int8x16_t)v83, v111, 8uLL);
          v110.i64[1] = v82.i64[1];
          float32x4_t v115 = vminq_f32(vrsqrteq_f32(v113), v28);
          float32x4_t v116 = vminq_f32(vrsqrteq_f32(v114), v28);
          v111.i64[1] = v83.i64[1];
          float32x4_t v117 = vminq_f32(vmulq_f32(v115, vrsqrtsq_f32(vmulq_f32(v115, v113), v115)), v28);
          float32x4_t v118 = vminq_f32(vmulq_f32(v116, vrsqrtsq_f32(vmulq_f32(v116, v114), v116)), v28);
          float32x4_t v119 = vmulq_f32(v117, vrsqrtsq_f32(vmulq_f32(v117, v113), v117));
          int8x16_t v120 = (int8x16_t)vmulq_f32(v118, vrsqrtsq_f32(vmulq_f32(v118, v114), v118));
          float32x4_t v121 = vminq_f32(vmaxq_f32(vrecpeq_f32(v38), v54), v29);
          float32x4_t v122 = vminq_f32(vmaxq_f32(vmulq_f32(v121, vrecpsq_f32(v38, v121)), v54), v29);
          float32x4_t v123 = vmulq_f32(v122, vrecpsq_f32(v38, v122));
          int8x16_t v124 = (int8x16_t)vmulq_f32(v123, vnegq_f32((float32x4_t)vbslq_s8(v89, v110, (int8x16_t)v119)));
          float32x4_t v125 = vmulq_f32(v103, v103);
          int8x16_t v126 = (int8x16_t)vmulq_f32(v123, vnegq_f32((float32x4_t)vbslq_s8(v89, v111, v120)));
          float32x4_t v127 = vmulq_f32(v112, v112);
          int8x16_t v128 = vbslq_s8(v89, v124, (int8x16_t)v119);
          v119.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v125, 1), vaddq_f32(v125, (float32x4_t)vrev64q_s32((int32x4_t)v125))).u64[0];
          int8x16_t v129 = vbslq_s8(v89, v126, v120);
          v127.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v127, 1), vaddq_f32(v127, (float32x4_t)vrev64q_s32((int32x4_t)v127))).u64[0];
          v119.i64[1] = v128.i64[1];
          v127.i64[1] = v129.i64[1];
          float32x4_t v130 = vminq_f32(vrsqrteq_f32(v119), v29);
          float32x4_t v131 = vminq_f32(vrsqrteq_f32(v127), v29);
          float32x4_t v132 = vminq_f32(vmulq_f32(v130, vrsqrtsq_f32(vmulq_f32(v130, v119), v130)), v29);
          float32x4_t v133 = vminq_f32(vmulq_f32(v131, vrsqrtsq_f32(vmulq_f32(v131, v127), v131)), v29);
          v119.i64[0] = vmulq_f32(v132, vrsqrtsq_f32(vmulq_f32(v132, v119), v132)).u64[0];
          v127.i64[0] = vmulq_f32(v133, vrsqrtsq_f32(vmulq_f32(v133, v127), v133)).u64[0];
          v132.i64[0] = v119.i64[0];
          v133.i64[0] = v127.i64[0];
          v119.i64[1] = vextq_s8(v128, v128, 8uLL).u64[0];
          *(int8x8_t *)v125.f32 = vqtbl1_s8((int8x16_t)v119, *(int8x8_t *)v51.i8);
          v118.i64[0] = vextq_s8(v51, v51, 8uLL).u64[0];
          v127.i64[1] = vextq_s8(v129, v129, 8uLL).u64[0];
          *(int8x8_t *)&v125.u32[2] = vqtbl1_s8((int8x16_t)v119, *(int8x8_t *)v118.f32);
          *(int8x8_t *)v119.f32 = vqtbl1_s8((int8x16_t)v127, *(int8x8_t *)v51.i8);
          *(int8x8_t *)&v119.u32[2] = vqtbl1_s8((int8x16_t)v127, *(int8x8_t *)v118.f32);
          v132.i64[1] = v128.i64[1];
          v133.i64[1] = v129.i64[1];
          float32x4_t v135 = *(float32x4_t *)(v14 + 352);
          int8x16_t v134 = *(int8x16_t *)(v14 + 368);
          float32x4_t v136 = vminq_f32(vmaxq_f32(vrecpeq_f32(v125), v135), v29);
          float32x4_t v137 = vminq_f32(vmaxq_f32(vrecpeq_f32(v119), v135), v29);
          float32x4_t v138 = vminq_f32(vmaxq_f32(vmulq_f32(v136, vrecpsq_f32(v125, v136)), v135), v29);
          float32x4_t v139 = vminq_f32(vmaxq_f32(vmulq_f32(v137, vrecpsq_f32(v119, v137)), v135), v29);
          float32x4_t v140 = (float32x4_t)vbslq_s8(v134, (int8x16_t)v132, (int8x16_t)vmulq_f32(v138, vrecpsq_f32(v125, v138)));
          float32x4_t v141 = (float32x4_t)vbslq_s8(v134, (int8x16_t)v133, (int8x16_t)vmulq_f32(v139, vrecpsq_f32(v119, v139)));
          int8x16_t v142 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 0xCuLL), (float32x4_t)vrev64q_s32((int32x4_t)v140));
          int8x16_t v143 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v141, (int8x16_t)v141, 0xCuLL), (float32x4_t)vrev64q_s32((int32x4_t)v141));
          float32x4_t v144 = (float32x4_t)vbslq_s8(v65, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), v140)), (int8x16_t)v140);
          float32x4_t v145 = (float32x4_t)vbslq_s8(v65, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL), v141)), (int8x16_t)v141);
          float32x4_t v146 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v21, v144), (int8x16_t)v144);
          float32x4_t v147 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v21, v145), (int8x16_t)v145);
          float32x4_t v148 = (float32x4_t)vbslq_s8(v64, v142, (int8x16_t)vmulq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v146, (int8x16_t)v146, 4uLL)));
          float32x4_t v149 = (float32x4_t)vbslq_s8(v64, v143, (int8x16_t)vmulq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 4uLL)));
          float32x4_t v150 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v146, v148), (int8x16_t)v144);
          float32x4_t v151 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v147, v149), (int8x16_t)v145);
          float32x4_t v152 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL);
          float32x4_t v153 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_n_f32(v152, vmulq_laneq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 1), v150, 2).f32[0]), (int8x16_t)v150);
          float32x4_t v154 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_n_f32(v152, vmulq_laneq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1), v151, 2).f32[0]), (int8x16_t)v151);
          float32x4_t v155 = (float32x4_t)vbslq_s8(v89, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32(v153, v135)), (int8x16_t)v153);
          float32x4_t v156 = *(float32x4_t *)(v14 + 384);
          int8x16_t v157 = *(int8x16_t *)(v14 + 400);
          float32x4_t v158 = (float32x4_t)vbslq_s8(v89, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32(v154, v135)), (int8x16_t)v154);
          float32x4_t v159 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_f32(v156, v155), (int8x16_t)v155);
          float32x4_t v160 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_f32(v156, v158), (int8x16_t)v158);
          float32x4_t v161 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0));
          float32x4_t v162 = (float32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_f32(v161, v159), (int8x16_t)v159);
          float32x4_t v163 = (float32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_f32(v161, v160), (int8x16_t)v160);
          v162.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v135, v162), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v162), *(int8x16_t *)&v135).i64[1];
          v163.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v135, v163), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v163), *(int8x16_t *)&v135).i64[1];
          int32x4_t v164 = (int32x4_t)vbslq_s8(v65, (int8x16_t)vminq_f32(v162, v60), (int8x16_t)v162);
          int32x4_t v165 = (int32x4_t)vbslq_s8(v65, (int8x16_t)vminq_f32(v163, v61), (int8x16_t)v163);
          float32x4_t v166 = (int8x16_t *)(*(void *)&v8 + 16 * v10);
          *float32x4_t v166 = vbslq_s8(v64, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v164), v135), (int8x16_t)v164, vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL)), v157);
          v166[1] = vbslq_s8(v64, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v165), v135), (int8x16_t)v165, vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL)), v157);
          float32x4_t v12 = vaddq_f32(v13, (float32x4_t)xmmword_1B7E736B0);
          v10 += 2;
          v11 -= 2;
        }
        while (v11 > 1);
        uint64_t v10 = v10;
        float32x4_t v7 = (float32x4_t)xmmword_1B7E736C0;
      }
      if ((int)v10 < v5)
      {
        uint64_t v167 = *((void *)this + 51);
        float32x4_t v168 = vaddq_f32(*(float32x4_t *)(v167 + 48), vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v167 + 16), *(float32x2_t *)v12.f32, 1), vmulq_n_f32(*(float32x4_t *)v167, v12.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v167 + 32), v12, 2)));
        float32x4_t v169 = *(float32x4_t *)(v167 + 128);
        float32x4_t v170 = vsubq_f32(*(float32x4_t *)(v167 + 144), v168);
        float32x4_t v171 = (float32x4_t)vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL);
        int8x16_t v172 = *(int8x16_t *)(v167 + 160);
        float32x4_t v173 = *(float32x4_t *)(v167 + 176);
        float32x4_t v175 = *(float32x4_t *)(v167 + 192);
        float32x4_t v174 = *(float32x4_t *)(v167 + 208);
        float32x4_t v176 = vminq_f32(vmaxq_f32(vrecpeq_f32(v171), v173), v175);
        float32x4_t v177 = vminq_f32(vmaxq_f32(vmulq_f32(v176, vrecpsq_f32(v171, v176)), v173), v175);
        float32x4_t v178 = vaddq_f32(v168, vmulq_n_f32(v170, vmulq_f32(vmulq_f32(v177, vrecpsq_f32(v171, v177)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v168, 2))).f32[0]));
        float32x4_t v180 = *(float32x4_t *)(v167 + 64);
        float32x4_t v179 = *(float32x4_t *)(v167 + 80);
        float32x4_t v182 = *(float32x4_t *)(v167 + 96);
        float32x4_t v181 = *(float32x4_t *)(v167 + 112);
        float32x4_t v183 = vmulq_laneq_f32(v181, v178, 3);
        float32x4_t v184 = vaddq_f32(vmulq_laneq_f32(v182, v178, 2), vaddq_f32(vmulq_lane_f32(v179, *(float32x2_t *)v178.f32, 1), vmulq_n_f32(v180, v178.f32[0])));
        int32x4_t v185 = (int32x4_t)vaddq_f32(v183, v184);
        int8x16_t v186 = vandq_s8((int8x16_t)v173, (int8x16_t)vcgtq_f32(vnegq_f32(v183), v184));
        v187.i64[0] = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 0xCuLL), v174).u64[0];
        v187.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(v185), v174).i64[1];
        float32x4_t v188 = *(float32x4_t *)(v167 + 224);
        int8x16_t v189 = *(int8x16_t *)(v167 + 240);
        float32x4_t v191 = *(float32x4_t *)(v167 + 256);
        int8x16_t v190 = *(int8x16_t *)(v167 + 272);
        int8x16_t v192 = vandq_s8((int8x16_t)v191, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v189, v172), v188));
        float32x4_t v193 = (float32x4_t)vbslq_s8(v190, vextq_s8(v192, v192, 4uLL), (int8x16_t)v185);
        float32x4_t v194 = (float32x4_t)vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL);
        int8x16_t v196 = *(int8x16_t *)(v167 + 288);
        int8x16_t v195 = *(int8x16_t *)(v167 + 304);
        float32x4_t v197 = (float32x4_t)vbslq_s8(v196, (int8x16_t)vminq_f32(v194, (float32x4_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v191, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v186, v186, 0xCuLL)), v188)))), v187);
        float32x4_t v198 = (float32x4_t)vbslq_s8(v196, vbslq_s8((int8x16_t)vcgtq_f32(v197, v191), (int8x16_t)vrev64q_s32((int32x4_t)v197), vextq_s8((int8x16_t)v197, (int8x16_t)v197, 4uLL)), (int8x16_t)v168);
        float32x4_t v199 = vaddq_f32(vmulq_lane_f32(v179, *(float32x2_t *)v168.f32, 1), vmulq_n_f32(v180, v198.f32[0]));
        float32x4_t v200 = vmulq_laneq_f32(v181, v198, 3);
        float32x4_t v201 = vaddq_f32(vmulq_laneq_f32(v182, v198, 2), v199);
        int8x16_t v202 = vandq_s8((int8x16_t)v191, (int8x16_t)vcgtq_f32(vnegq_f32(v200), v201));
        float32x4_t v203 = vaddq_f32(v200, v201);
        float32x4_t v204 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vmaxq_f32(v203, v188), vbslq_s8(v195, vextq_s8(v202, v202, 0xCuLL), (int8x16_t)v198));
        float32x4_t v205 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v204.f32, 1);
        float32x4_t v206 = vminq_f32(vmaxq_f32(vrecpeq_f32(v205), v173), v175);
        float32x4_t v207 = vminq_f32(vmaxq_f32(vmulq_f32(v206, vrecpsq_f32(v205, v206)), v173), v175);
        float32x4_t v208 = vmulq_f32(v207, vrecpsq_f32(v205, v207));
        int8x16_t v209 = *(int8x16_t *)(v167 + 336);
        float32x4_t v210 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vminq_f32(v203, *(float32x4_t *)(v167 + 320)), (int8x16_t)v203);
        v181.i64[0] = vsubq_f32(vmulq_laneq_f32(v204, v193, 3), (float32x4_t)vextq_s8((int8x16_t)v193, (int8x16_t)v193, 0xCuLL)).u64[0];
        v181.i64[1] = v204.i64[1];
        float32x4_t v211 = vmulq_f32(v208, v193);
        float32x4_t v212 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v188, v181), (int8x16_t)vdupq_laneq_s32((int32x4_t)v181, 3), (int8x16_t)vdupq_laneq_s32((int32x4_t)v210, 3)), 0);
        float32x4_t v213 = vminq_f32(vmaxq_f32(vrecpeq_f32(v212), v173), v175);
        float32x4_t v214 = vminq_f32(vmaxq_f32(vmulq_f32(v213, vrecpsq_f32(v212, v213)), v173), v175);
        float32x4_t v215 = vmulq_f32(vmulq_f32(v214, vrecpsq_f32(v212, v214)), v210);
        float32x4_t v216 = vmulq_f32(v215, v215);
        int8x16_t v217 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v216, (int8x16_t)v6, 4uLL), vaddq_f32(v216, (float32x4_t)vrev64q_s32((int32x4_t)v216)));
        float32x4_t v218 = (float32x4_t)vextq_s8((int8x16_t)v204, v217, 8uLL);
        v217.i64[1] = v204.i64[1];
        float32x4_t v219 = vminq_f32(vrsqrteq_f32(v218), v174);
        float32x4_t v220 = vminq_f32(vmulq_f32(v219, vrsqrtsq_f32(vmulq_f32(v219, v218), v219)), v174);
        int8x16_t v221 = (int8x16_t)vmulq_f32(v220, vrsqrtsq_f32(vmulq_f32(v220, v218), v220));
        float32x4_t v222 = vminq_f32(vmaxq_f32(vrecpeq_f32(v182), v191), v175);
        float32x4_t v223 = vminq_f32(vmaxq_f32(vmulq_f32(v222, vrecpsq_f32(v182, v222)), v191), v175);
        float32x4_t v224 = (float32x4_t)vbslq_s8(v209, (int8x16_t)vmulq_f32(vmulq_f32(v223, vrecpsq_f32(v182, v223)), vnegq_f32((float32x4_t)vbslq_s8(v209, v217, v221))), v221);
        float32x4_t v225 = vmulq_f32(v211, v211);
        v225.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v225, 1), vaddq_f32(v225, (float32x4_t)vrev64q_s32((int32x4_t)v225))).u64[0];
        v225.i64[1] = v224.i64[1];
        float32x4_t v226 = vminq_f32(vrsqrteq_f32(v225), v175);
        float32x4_t v227 = vminq_f32(vmulq_f32(v226, vrsqrtsq_f32(vmulq_f32(v226, v225), v226)), v175);
        v225.i64[0] = vmulq_f32(v227, vrsqrtsq_f32(vmulq_f32(v227, v225), v227)).u64[0];
        v227.i64[0] = v225.i64[0];
        v227.i64[1] = v224.i64[1];
        v225.i64[1] = vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
        *(int8x8_t *)v224.f32 = vqtbl1_s8((int8x16_t)v225, *(int8x8_t *)v189.i8);
        *(int8x8_t *)&v224.u32[2] = vqtbl1_s8((int8x16_t)v225, (int8x8_t)*(_OWORD *)&vextq_s8(v189, v189, 8uLL));
        float32x4_t v228 = *(float32x4_t *)(v167 + 352);
        float32x4_t v229 = vminq_f32(vmaxq_f32(vrecpeq_f32(v224), v228), v175);
        float32x4_t v230 = vminq_f32(vmaxq_f32(vmulq_f32(v229, vrecpsq_f32(v224, v229)), v228), v175);
        float32x4_t v231 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v167 + 368), (int8x16_t)v227, (int8x16_t)vmulq_f32(v230, vrecpsq_f32(v224, v230)));
        int8x16_t v232 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 0xCuLL), (float32x4_t)vrev64q_s32((int32x4_t)v231));
        float32x4_t v233 = (float32x4_t)vbslq_s8(v196, vandq_s8((int8x16_t)v188, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL), v231)), (int8x16_t)v231);
        float32x4_t v234 = (float32x4_t)vbslq_s8(v195, (int8x16_t)vmulq_f32(v169, v233), (int8x16_t)v233);
        float32x4_t v235 = (float32x4_t)vbslq_s8(v195, v232, (int8x16_t)vmulq_f32(v174, (float32x4_t)vextq_s8((int8x16_t)v234, (int8x16_t)v234, 4uLL)));
        float32x4_t v236 = (float32x4_t)vbslq_s8(v195, (int8x16_t)vmulq_f32(v234, v235), (int8x16_t)v233);
        float32x4_t v237 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL), vmulq_laneq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.f32, 1), v236, 2).f32[0]), (int8x16_t)v236);
        float32x4_t v238 = (float32x4_t)vbslq_s8(v209, vandq_s8((int8x16_t)v188, (int8x16_t)vcgtq_f32(v237, v228)), (int8x16_t)v237);
        float32x4_t v239 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vmulq_f32(*(float32x4_t *)(v167 + 384), v238), (int8x16_t)v238);
        float32x4_t v240 = (float32x4_t)vbslq_s8(v209, (int8x16_t)vmulq_f32(vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v172.i8, 0)), v239), (int8x16_t)v239);
        v240.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v228, v240), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v240), *(int8x16_t *)&v228).i64[1];
        int32x4_t v241 = (int32x4_t)vbslq_s8(v196, (int8x16_t)vminq_f32(v240, v194), (int8x16_t)v240);
        *(int8x16_t *)(*(void *)&v8 + 16 * v1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = vbslq_s8(v195, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v241), v228), (int8x16_t)v241, vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL)), *(int8x16_t *)(v167 + 400));
      }
      float32x4_t v6 = vaddq_f32(v6, v7);
      *(void *)&v8 += v9;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeShadowProgramPCSS::GetDOD(LiHeShadowProgramPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4 = &HGRectInfinite;
  if (a3) {
    int v4 = &HGRectNull;
  }
  return *(void *)v4;
}

uint64_t LiHeShadowProgramPCSS::GetROI(LiHeShadowProgramPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeShadowProgramPCSS::LiHeShadowProgramPCSS(LiHeShadowProgramPCSS *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1132040;
  operator new();
}

void sub_1B7B83644(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(HGNode *this)
{
  *(void *)this = &unk_1F1132040;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C407DC911DDLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeShadowProgramPCSS::SetParameter(LiHeShadowProgramPCSS *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  int32x2_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *int32x2_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  PCSharedCount v10[2] = a5;
  void v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeShadowProgramPCSS::GetParameter(LiHeShadowProgramPCSS *this, unsigned int a2, float *a3)
{
  if (a2 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *LiHeShadowProgramSoft::GetProgram(LiHeShadowProgramSoft *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.y = dot(r0.xyz, 1.00000h);\n"
             "    r1.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r2.x = r1.x*half(hg_Params[0].w);\n"
             "    r1.w = r1.y*c0.w;\n"
             "    r1.x = fmin(r1.w, c0.x);\n"
             "    r2.y = r2.x*half(hg_Params[0].w);\n"
             "    r1.xyz = r1.xxx*half3(hg_Params[0].xyz);\n"
             "    r1 = r2.xxxy*r1;\n"
             "    r0 = select(r0, r1, -half4(hg_Params[1].xxxx) < 0.00000h);\n"
             "    r2.x = c0.x - r2.x;\n"
             "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
             "    output.color0.xyz = select(float3(r1.xyz), float3(r0.xyz), -fabs(hg_Params[1].xxx) < 0.00000h);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ec1e19ab:fed14f6b:8580d8b4:f7462dfb\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.y = dot(r0.xyz, 1.00000f);\n"
             "    r1.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r2.x = r1.x*hg_Params[0].w;\n"
             "    r1.w = r1.y*c0.w;\n"
             "    r1.x = fmin(r1.w, c0.x);\n"
             "    r2.y = r2.x*hg_Params[0].w;\n"
             "    r1.xyz = r1.xxx*hg_Params[0].xyz;\n"
             "    r1 = r2.xxxy*r1;\n"
             "    r0 = select(r0, r1, -hg_Params[1].xxxx < 0.00000f);\n"
             "    r2.x = c0.x - r2.x;\n"
             "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
             "    output.color0.xyz = select(r1.xyz, r0.xyz, -fabs(hg_Params[1].xxx) < 0.00000f);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=04a4f7a2:b09ba2de:3c1fdedc:8ce5d38c\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000583\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.y = dot(r0.xyz, vec3(1.00000));\n"
           "    r1.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r2.x = r1.x*hg_ProgramLocal0.w;\n"
           "    r1.w = r1.y*c0.w;\n"
           "    r1.x = min(r1.w, c0.x);\n"
           "    r2.y = r2.x*hg_ProgramLocal0.w;\n"
           "    r1.xyz = r1.xxx*hg_ProgramLocal0.xyz;\n"
           "    r1 = r2.xxxy*r1;\n"
           "    r0 = vec4(-hg_ProgramLocal1.x < 0.00000 ? r1.x : r0.x, -hg_ProgramLocal1.x < 0.00000 ? r1.y : r0.y, -hg_P"
           "rogramLocal1.x < 0.00000 ? r1.z : r0.z, -hg_ProgramLocal1.x < 0.00000 ? r1.w : r0.w);\n"
           "    r2.x = c0.x - r2.x;\n"
           "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
           "    gl_FragColor.xyz = vec3(-abs(hg_ProgramLocal1.x) < 0.00000 ? r0.x : r1.x, -abs(hg_ProgramLocal1.x) < 0.00"
           "000 ? r0.y : r1.y, -abs(hg_ProgramLocal1.x) < 0.00000 ? r0.z : r1.z);\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=2737da65:6525a9f8:07553ebd:c29f6e0e\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeShadowProgramSoft::InitProgramDescriptor(LiHeShadowProgramSoft *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeShadowProgramSoft_hgc_visible", "//Metal1.0     \n//LEN=000000031a\n[[ visible ]] FragmentOut LiHeShadowProgramSoft_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.y = dot(r0.xyz, 1.00000f);\n"
    "    r1.x = color1.x;\n"
    "    r2.x = r1.x*hg_Params[0].w;\n"
    "    r1.w = r1.y*c0.w;\n"
    "    r1.x = fmin(r1.w, c0.x);\n"
    "    r2.y = r2.x*hg_Params[0].w;\n"
    "    r1.xyz = r1.xxx*hg_Params[0].xyz;\n"
    "    r1 = r2.xxxy*r1;\n"
    "    r0 = select(r0, r1, -hg_Params[1].xxxx < 0.00000f);\n"
    "    r2.x = c0.x - r2.x;\n"
    "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
    "    output.color0.xyz = select(r1.xyz, r0.xyz, -fabs(hg_Params[1].xxx) < 0.00000f);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeShadowProgramSoft");
}

void sub_1B7B838D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B83A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B83A5C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B83A54);
}

void *LiHeShadowProgramSoft::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeShadowProgramSoft [hgc1]");
}

uint64_t LiHeShadowProgramSoft::BindTexture(LiHeShadowProgramSoft *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeShadowProgramSoft::Bind(LiHeShadowProgramSoft *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeShadowProgramSoft::RenderTile(LiHeShadowProgramSoft *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 12);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = 16 * *((int *)a2 + 26);
    uint64_t v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v62) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          float32x4_t v13 = *(float32x4_t *)(v8 + v12 - 32);
          float32x4_t v14 = *(float32x4_t *)(v8 + v12 - 16);
          float32x4_t v15 = *(float32x4_t *)(v8 + v12);
          float32x4_t v16 = *(float32x4_t *)(v8 + v12 + 16);
          uint64_t v17 = *((void *)this + 51);
          int8x16_t v19 = *(int8x16_t *)(v17 + 32);
          float32x4_t v18 = *(float32x4_t *)(v17 + 48);
          float32x4_t v20 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12 - 32), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), vaddq_f32(v13, (float32x4_t)vrev64q_s32((int32x4_t)v13))));
          float32x4_t v21 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12 - 16), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL), vaddq_f32(v14, (float32x4_t)vrev64q_s32((int32x4_t)v14))));
          float32x4_t v22 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), vaddq_f32(v15, (float32x4_t)vrev64q_s32((int32x4_t)v15))));
          float32x4_t v23 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12 + 16), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL), vaddq_f32(v16, (float32x4_t)vrev64q_s32((int32x4_t)v16))));
          int8x16_t v24 = (int8x16_t)vmulq_laneq_f32(v20, *(float32x4_t *)v17, 3);
          int8x16_t v25 = (int8x16_t)vmulq_laneq_f32(v21, *(float32x4_t *)v17, 3);
          int8x16_t v26 = (int8x16_t)vmulq_laneq_f32(v22, *(float32x4_t *)v17, 3);
          float32x4_t v27 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
          int8x16_t v28 = (int8x16_t)vmulq_laneq_f32(v23, *(float32x4_t *)v17, 3);
          float32x4_t v29 = vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          int8x16_t v30 = (int8x16_t)vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
          int8x16_t v31 = (int8x16_t)vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          int8x16_t v32 = (int8x16_t)vmulq_f32(v18, v27);
          v33.i64[0] = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL), v18).u64[0];
          v34.i64[0] = vminq_f32((float32x4_t)vextq_s8(v30, v30, 0xCuLL), v18).u64[0];
          float32x4_t v35 = (float32x4_t)vextq_s8(*(int8x16_t *)v17, *(int8x16_t *)v17, 8uLL);
          v36.i64[0] = vminq_f32((float32x4_t)vextq_s8(v31, v31, 0xCuLL), v18).u64[0];
          float32x4_t v37 = (float32x4_t)vbslq_s8(v19, v24, (int8x16_t)vmulq_n_f32(v35, *(float *)v24.i32));
          float32x4_t v38 = (float32x4_t)vbslq_s8(v19, v25, (int8x16_t)vmulq_n_f32(v35, *(float *)v25.i32));
          float32x4_t v39 = (float32x4_t)vbslq_s8(v19, v26, (int8x16_t)vmulq_n_f32(v35, *(float *)v26.i32));
          float32x4_t v40 = (float32x4_t)vbslq_s8(v19, v28, (int8x16_t)vmulq_n_f32(v35, *(float *)v28.i32));
          int8x16_t v41 = *(int8x16_t *)(v17 + 64);
          int8x16_t v42 = *(int8x16_t *)(v17 + 80);
          *(int8x8_t *)v43.f32 = vqtbl1_s8((int8x16_t)v37, *(int8x8_t *)v42.i8);
          int8x8_t v44 = (int8x8_t)vextq_s8(v42, v42, 8uLL).u64[0];
          v33.i64[1] = v29.i64[1];
          *(int8x8_t *)&v43.u32[2] = vqtbl1_s8((int8x16_t)v37, v44);
          *(int8x8_t *)v29.f32 = vqtbl1_s8((int8x16_t)v38, *(int8x8_t *)v42.i8);
          v34.i64[1] = v30.i64[1];
          *(int8x8_t *)&v29.u32[2] = vqtbl1_s8((int8x16_t)v38, v44);
          v36.i64[1] = v31.i64[1];
          v31.i64[0] = vminq_f32((float32x4_t)vextq_s8(v32, v32, 0xCuLL), v18).u64[0];
          v31.i64[1] = v32.i64[1];
          float32x4_t v45 = (float32x4_t)vbslq_s8(v41, v33, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v33.i32));
          *(int8x8_t *)v33.i8 = vqtbl1_s8((int8x16_t)v39, *(int8x8_t *)v42.i8);
          v33.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v39, v44);
          float32x4_t v46 = (float32x4_t)vbslq_s8(v41, v34, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v34.i32));
          *(int8x8_t *)v34.i8 = vqtbl1_s8((int8x16_t)v40, *(int8x8_t *)v42.i8);
          v34.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v40, v44);
          float32x4_t v47 = (float32x4_t)vbslq_s8(v41, v31, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v31.i32));
          float32x4_t v48 = vmulq_f32(v43, v45);
          float32x4_t v49 = vmulq_f32(v29, v46);
          float32x4_t v50 = vmulq_f32((float32x4_t)v33, (float32x4_t)vbslq_s8(v41, v36, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v36.i32)));
          float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v17 + 16), 0);
          float32x4_t v52 = vmulq_f32((float32x4_t)v34, v47);
          float32x4_t v53 = *(float32x4_t *)(v17 + 96);
          int8x16_t v54 = (int8x16_t)vcgtq_f32(v51, v53);
          float32x4_t v55 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v48, (int8x16_t)v13);
          float32x4_t v56 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v49, (int8x16_t)v14);
          float32x4_t v57 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v50, (int8x16_t)v15);
          float32x4_t v58 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v52, (int8x16_t)v16);
          v37.i32[0] = vsubq_f32(v18, v37).u32[0];
          v38.i32[0] = vsubq_f32(v18, v38).u32[0];
          v39.i32[0] = vsubq_f32(v18, v39).u32[0];
          int8x16_t v59 = (int8x16_t)vaddq_f32(v52, vmulq_n_f32(v58, vsubq_f32(v18, v40).f32[0]));
          int8x16_t v60 = (int8x16_t)vceqq_f32(v51, v53);
          float32x4_t v61 = (int8x16_t *)(v5 + v12);
          v61[-2] = vbslq_s8(v41, (int8x16_t)v55, vbslq_s8(v60, (int8x16_t)v55, (int8x16_t)vaddq_f32(v48, vmulq_n_f32(v55, v37.f32[0]))));
          v61[-1] = vbslq_s8(v41, (int8x16_t)v56, vbslq_s8(v60, (int8x16_t)v56, (int8x16_t)vaddq_f32(v49, vmulq_n_f32(v56, v38.f32[0]))));
          int8x16_t *v61 = vbslq_s8(v41, (int8x16_t)v57, vbslq_s8(v60, (int8x16_t)v57, (int8x16_t)vaddq_f32(v50, vmulq_n_f32(v57, v39.f32[0]))));
          v61[1] = vbslq_s8(v41, (int8x16_t)v58, vbslq_s8(v60, (int8x16_t)v58, v59));
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v62) = -v11;
      }
      if ((int)v62 < v4)
      {
        uint64_t v62 = v62;
        do
        {
          float32x4_t v63 = *(float32x4_t *)(v8 + 16 * v62);
          uint64_t v64 = *((void *)this + 51);
          int8x16_t v65 = *(int8x16_t *)(v64 + 32);
          float32x4_t v66 = *(float32x4_t *)(v64 + 48);
          float32x4_t v67 = (float32x4_t)vbslq_s8(v65, *(int8x16_t *)(v6 + 16 * v62), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 4uLL), vaddq_f32(v63, (float32x4_t)vrev64q_s32((int32x4_t)v63))));
          float32x4_t v68 = vmulq_laneq_f32(v67, *(float32x4_t *)v64, 3);
          int8x16_t v69 = (int8x16_t)vmulq_f32(v66, (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL));
          float32x4_t v70 = (float32x4_t)vbslq_s8(v65, (int8x16_t)v68, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(*(int8x16_t *)v64, *(int8x16_t *)v64, 8uLL), v68.f32[0]));
          v68.i64[0] = vminq_f32((float32x4_t)vextq_s8(v69, v69, 0xCuLL), v66).u64[0];
          v68.i64[1] = v69.i64[1];
          int8x16_t v71 = *(int8x16_t *)(v64 + 64);
          int8x16_t v72 = *(int8x16_t *)(v64 + 80);
          float32x4_t v73 = (float32x4_t)vbslq_s8(v71, (int8x16_t)v68, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v64, v68.f32[0]));
          *(int8x8_t *)v68.f32 = vqtbl1_s8((int8x16_t)v70, *(int8x8_t *)v72.i8);
          *(int8x8_t *)&v68.u32[2] = vqtbl1_s8((int8x16_t)v70, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
          float32x4_t v74 = vmulq_f32(v68, v73);
          float32x4_t v75 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v64 + 16), 0);
          float32x4_t v76 = *(float32x4_t *)(v64 + 96);
          float32x4_t v77 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v75, v76), (int8x16_t)v74, (int8x16_t)v63);
          *(int8x16_t *)(v5 + 16 * v62++) = vbslq_s8(v71, (int8x16_t)v77, vbslq_s8((int8x16_t)vceqq_f32(v75, v76), (int8x16_t)v77, (int8x16_t)vaddq_f32(v74, vmulq_n_f32(v77, vsubq_f32(v66, v70).f32[0]))));
        }
        while (v62 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeShadowProgramSoft::GetDOD(LiHeShadowProgramSoft *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeShadowProgramSoft::GetROI(LiHeShadowProgramSoft *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeShadowProgramSoft::LiHeShadowProgramSoft(LiHeShadowProgramSoft *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F11322A8;
  operator new();
}

void sub_1B7B840CC(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeShadowProgramSoft::~LiHeShadowProgramSoft(HGNode *this)
{
  *(void *)this = &unk_1F11322A8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40AC4F46D1);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeShadowProgramSoft::~LiHeShadowProgramSoft(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeShadowProgramSoft::SetParameter(LiHeShadowProgramSoft *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  PCSharedCount v10[2] = a5;
  void v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeShadowProgramSoft::GetParameter(LiHeShadowProgramSoft *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcSolidRendererBumpMap::GetProgram(HgcSolidRendererBumpMap *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000827\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r2.x = dot(r1, half4(hg_Params[2]));\n"
             "    r0.x = dot(r0, half4(hg_Params[2]));\n"
             "    r0.z = r0.x*c0.z + r2.x;\n"
             "    r3 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r2.y = dot(r3, half4(hg_Params[2]));\n"
             "    r3 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r2.z = dot(r3, half4(hg_Params[2]));\n"
             "    r2.w = r0.z + r2.y;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r0.y = dot(r0, half4(hg_Params[2]));\n"
             "    r4 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r4.x = dot(r4, half4(hg_Params[2]));\n"
             "    r4.x = r4.x*c0.z + r0.y;\n"
             "    r4.z = r4.x + r2.z;\n"
             "    r0.x = r2.w - r4.z;\n"
             "    r5 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    s0.xy = float2(r0.xy);\n"
             "    r2.w = dot(r5, half4(hg_Params[2]));\n"
             "    r5 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r5.x = dot(r5, half4(hg_Params[2]));\n"
             "    s0.z = float(r2.w)*float(c0.z) + float(r2.x);\n"
             "    r5.x = r5.x*c0.z + r2.y;\n"
             "    r5.y = half(s0.y) + half(s0.z);\n"
             "    r5.x = r2.z + r5.x;\n"
             "    s0.y = float(r5.y) - float(r5.x);\n"
             "    r5.z = half(hg_Params[0].z)*c0.x;\n"
             "    r5.x = select(r5.z, -r5.z, half(hg_Params[1].x) < 0.00000h);\n"
             "    r5.z = c0.y;\n"
             "    r5.xy = half2(s0.xy)*r5.xx;\n"
             "    r5.w = dot(r5.xyz, r5.xyz);\n"
             "    r5.w = rsqrt(r5.w);\n"
             "    output.color0.xyz = float3(r5.xyz)*float3(r5.www);\n"
             "    output.color0.w = float(c0.y);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b02ff63d:5075d64b:abb44289:27f3515b\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0003:0007:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000724\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r1.x = dot(r1, hg_Params[2]);\n"
             "    r0.x = dot(r0, hg_Params[2]);\n"
             "    r0.z = r0.x*c0.z + r1.x;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r1.y = dot(r2, hg_Params[2]);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r1.z = dot(r2, hg_Params[2]);\n"
             "    r1.w = r0.z + r1.y;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r2.y = dot(r2, hg_Params[2]);\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r0.x = dot(r0, hg_Params[2]);\n"
             "    r0.x = r0.x*c0.z + r2.y;\n"
             "    r0.z = r0.x + r1.z;\n"
             "    r2.x = r1.w - r0.z;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r1.w = dot(r0, hg_Params[2]);\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r0.x = dot(r0, hg_Params[2]);\n"
             "    r2.z = r1.w*c0.z + r1.x;\n"
             "    r0.x = r0.x*c0.z + r1.y;\n"
             "    r0.y = r2.y + r2.z;\n"
             "    r0.x = r1.z + r0.x;\n"
             "    r2.y = r0.y - r0.x;\n"
             "    r1.z = hg_Params[0].z*c0.x;\n"
             "    r1.x = select(r1.z, -r1.z, hg_Params[1].x < 0.00000f);\n"
             "    r1.z = c0.y;\n"
             "    r1.xy = r2.xy*r1.xx;\n"
             "    r1.w = dot(r1.xyz, r1.xyz);\n"
             "    r1.w = rsqrt(r1.w);\n"
             "    output.color0.xyz = r1.xyz*r1.www;\n"
             "    output.color0.w = c0.y;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d5163f50:b9b29186:c5c889b3:ddee76a0\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0003:0003:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007f7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "varying highp vec4 hg_TexCoord6;\n"
           "varying highp vec4 hg_TexCoord7;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord4.xy);\n"
           "    r1.x = dot(r1, hg_ProgramLocal2);\n"
           "    r0.x = dot(r0, hg_ProgramLocal2);\n"
           "    r0.z = r0.x*c0.z + r1.x;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord5.xy);\n"
           "    r1.y = dot(r2, hg_ProgramLocal2);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord6.xy);\n"
           "    r1.z = dot(r2, hg_ProgramLocal2);\n"
           "    r1.w = r0.z + r1.y;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord7.xy);\n"
           "    r2.y = dot(r2, hg_ProgramLocal2);\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord1.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal2);\n"
           "    r0.x = r0.x*c0.z + r2.y;\n"
           "    r0.z = r0.x + r1.z;\n"
           "    r2.x = r1.w - r0.z;\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r1.w = dot(r0, hg_ProgramLocal2);\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal2);\n"
           "    r2.z = r1.w*c0.z + r1.x;\n"
           "    r0.x = r0.x*c0.z + r1.y;\n"
           "    r0.y = r2.y + r2.z;\n"
           "    r0.x = r1.z + r0.x;\n"
           "    r2.y = r0.y - r0.x;\n"
           "    r1.z = hg_ProgramLocal0.z*c0.x;\n"
           "    r1.x = hg_ProgramLocal1.x < 0.00000 ? -r1.z : r1.z;\n"
           "    r1.z = c0.y;\n"
           "    r1.xy = r2.xy*r1.xx;\n"
           "    r1.w = dot(r1.xyz, r1.xyz);\n"
           "    r1.w = inversesqrt(r1.w);\n"
           "    gl_FragColor.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor.w = c0.y;\n"
           "}\n"
           "//MD5=1f61d63d:88e928e0:dd637bf7:5069746a\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0003:0003:0000:0000:0000:0000:0000:0008:01:0:1:0\n";
  }
}

void HgcSolidRendererBumpMap::InitProgramDescriptor(HgcSolidRendererBumpMap *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSolidRendererBumpMap_hgc_visible", "//Metal1.0     \n//LEN=00000006de\n[[ visible ]] FragmentOut HgcSolidRendererBumpMap_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3,\n    float4 texCoord4,\n    float4 texCoord5,\n    float4 texCoord6,\n    float4 texCoord7)\n{\n    const float4 c0 = float4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord4.xy);\n"
    "    r1.x = dot(r1, hg_Params[2]);\n"
    "    r0.x = dot(r0, hg_Params[2]);\n"
    "    r0.z = r0.x*c0.z + r1.x;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord5.xy);\n"
    "    r1.y = dot(r2, hg_Params[2]);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord6.xy);\n"
    "    r1.z = dot(r2, hg_Params[2]);\n"
    "    r1.w = r0.z + r1.y;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord7.xy);\n"
    "    r2.y = dot(r2, hg_Params[2]);\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord1.xy);\n"
    "    r0.x = dot(r0, hg_Params[2]);\n"
    "    r0.x = r0.x*c0.z + r2.y;\n"
    "    r0.z = r0.x + r1.z;\n"
    "    r2.x = r1.w - r0.z;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r1.w = dot(r0, hg_Params[2]);\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r0.x = dot(r0, hg_Params[2]);\n"
    "    r2.z = r1.w*c0.z + r1.x;\n"
    "    r0.x = r0.x*c0.z + r1.y;\n"
    "    r0.y = r2.y + r2.z;\n"
    "    r0.x = r1.z + r0.x;\n"
    "    r2.y = r0.y - r0.x;\n"
    "    r1.z = hg_Params[0].z*c0.x;\n"
    "    r1.x = select(r1.z, -r1.z, hg_Params[1].x < 0.00000f);\n"
    "    r1.z = c0.y;\n"
    "    r1.xy = r2.xy*r1.xx;\n"
    "    r1.w = dot(r1.xyz, r1.xyz);\n"
    "    r1.w = rsqrt(r1.w);\n"
    "    output.color0.xyz = r1.xyz*r1.www;\n"
    "    output.color0.w = c0.y;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcSolidRendererBumpMap");
}

void sub_1B7B8435C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75720;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B8469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B84724()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B8471CLL);
}

void *HgcSolidRendererBumpMap::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSolidRendererBumpMap [hgc1]");
}

uint64_t HgcSolidRendererBumpMap::BindTexture(HgcSolidRendererBumpMap *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -1.0, 0.0, 0.0);
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -1.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 5, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -1.0, 1.0, 0.0);
  HGHandler::TexCoord(a2, 6, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 1.0, 1.0, 0.0);
  HGHandler::TexCoord(a2, 7, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 1.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 1.0, 0.0, 0.0);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, 1.0, 0.0);
  return 0;
}

uint64_t HgcSolidRendererBumpMap::Bind(HgcSolidRendererBumpMap *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcSolidRendererBumpMap::RenderTile(HgcSolidRendererBumpMap *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((int *)a2 + 22);
    uint64_t v6 = *((int *)a2 + 6);
    uint64_t v7 = *((void *)a2 + 2);
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = 16 * v5;
    uint64_t v10 = v8 + 16 * v5;
    int v11 = ~v5;
    uint64_t v12 = 16 * v6;
    uint64_t v13 = v8 + 16;
    do
    {
      if (v4 < 4)
      {
        unsigned int v15 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        for (int i = v4; i > 3; i -= 4)
        {
          uint64_t v17 = *((void *)this + 51);
          float32x4_t v19 = *(float32x4_t *)(v17 + 32);
          float32x4_t v18 = *(float32x4_t *)(v17 + 48);
          float32x4_t v20 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v11 + v15)), v19);
          float32x4_t v21 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v15 - v5)), v19);
          float32x4_t v22 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 1)), v19);
          float32x4_t v23 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 2)), v19);
          float32x4_t v24 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          float32x4_t v25 = vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL));
          float32x4_t v26 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL));
          float32x4_t v27 = vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL));
          float32x4_t v28 = vmulq_f32(*(float32x4_t *)(v8 + v14 - 16), v19);
          float32x4_t v29 = vmulq_f32(*(float32x4_t *)(v8 + v14), v19);
          float32x4_t v30 = vmulq_f32(*(float32x4_t *)(v8 + v14 + 16), v19);
          int8x16_t v31 = (int8x16_t)vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL));
          float32x4_t v32 = vmulq_f32(*(float32x4_t *)(v8 + v14 + 32), v19);
          int8x16_t v33 = (int8x16_t)vaddq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL));
          float32x4_t v34 = vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL));
          float32x4_t v35 = vaddq_f32(v29, (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL));
          float32x4_t v36 = vaddq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL));
          int32x4_t v37 = (int32x4_t)vaddq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL));
          float32x4_t v38 = vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          int32x4_t v39 = (int32x4_t)vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL));
          float32x4_t v40 = vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL));
          float32x4_t v41 = vaddq_f32(v38, (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL));
          float32x4_t v42 = (float32x4_t)vextq_s8(v31, v31, 8uLL);
          float32x4_t v43 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 - 16));
          float32x4_t v44 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14));
          float32x4_t v45 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 16));
          v30.i32[0] = vaddq_f32(v34, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2)).u32[0];
          float32x4_t v46 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 32));
          float32x4_t v47 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          float32x4_t v48 = vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL));
          float32x4_t v49 = vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL));
          float32x4_t v50 = vaddq_f32(v46, (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL));
          int8x16_t v51 = (int8x16_t)vaddq_f32(v47, (float32x4_t)vdupq_laneq_s64((int64x2_t)v47, 1));
          float32x4_t v52 = vaddq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL));
          float32x4_t v53 = vaddq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL));
          float32x4_t v54 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL));
          int8x16_t v56 = *(int8x16_t *)(v17 + 64);
          int8x16_t v55 = *(int8x16_t *)(v17 + 80);
          int8x16_t v57 = vbslq_s8(v56, v33, (int8x16_t)v52);
          int8x16_t v58 = vbslq_s8(v56, (int8x16_t)v37, (int8x16_t)v53);
          int8x16_t v59 = vbslq_s8(v56, (int8x16_t)v39, (int8x16_t)v54);
          float32x4_t v60 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 48));
          float32x4_t v61 = vmulq_n_f32(v18, vaddq_f32(v35, (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2)).f32[0]);
          float32x4_t v62 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 64));
          float32x4_t v63 = vaddq_f32(v60, (float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL));
          float32x4_t v64 = vaddq_f32(v62, (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL));
          int8x16_t v65 = vbslq_s8(v56, v31, v51);
          float32x4_t v66 = vaddq_f32(v63, (float32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL));
          int8x16_t v67 = (int8x16_t)vaddq_f32(v64, (float32x4_t)vdupq_lane_s64(v64.i64[0], 0));
          int32x4_t v68 = (int32x4_t)vaddq_f32(v42, vmulq_n_f32(v18, v30.f32[0]));
          float32x4_t v69 = (float32x4_t)vextq_s8(v67, v59, 8uLL);
          v59.i64[1] = v67.i64[1];
          float32x4_t v70 = (float32x4_t)vextq_s8((int8x16_t)v53, v65, 8uLL);
          v65.i64[1] = v53.i64[1];
          float32x4_t v71 = (float32x4_t)vextq_s8((int8x16_t)v54, v57, 8uLL);
          v57.i64[1] = v54.i64[1];
          float32x4_t v72 = (float32x4_t)vextq_s8((int8x16_t)v66, v58, 8uLL);
          v58.i64[1] = v66.i64[1];
          float32x4_t v73 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), vmulq_n_f32(v18, v40.f32[0]))), v72), v58);
          float32x4_t v74 = vmulq_f32(v19, *(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 3)));
          float32x4_t v75 = vmulq_f32(v19, *(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 4)));
          int8x16_t v76 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v68), v70);
          float32x4_t v77 = vaddq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL));
          float32x4_t v78 = vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL));
          float32x4_t v79 = vaddq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL));
          int32x4_t v80 = (int32x4_t)vaddq_f32(v78, (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
          float32x4_t v81 = vmulq_f32(v19, *(float32x4_t *)(v8 + v14 + 48));
          int64x2_t v82 = (int64x2_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), vmulq_n_f32(v18, v41.f32[0]))), v69), v59);
          float32x4_t v83 = vmulq_f32(v19, *(float32x4_t *)(v8 + v14 + 64));
          float32x4_t v84 = vaddq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL));
          float32x4_t v85 = vaddq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL));
          int64x2_t v86 = (int64x2_t)vbslq_s8(v55, v76, v65);
          int64x2_t v87 = (int64x2_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v33, v33, 8uLL), v61)), v71), v57);
          float32x4_t v88 = (float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 0xCuLL);
          float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL);
          float32x4_t v90 = vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v37), vmulq_laneq_f32(v40, v18, 3)), (float32x4_t)vdupq_laneq_s64(v86, 1));
          float32x4_t v91 = vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v39), vmulq_laneq_f32(v41, v18, 3)), (float32x4_t)vdupq_laneq_s64(v87, 1));
          int8x16_t v92 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 0xCuLL), vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v80), vmulq_laneq_f32(vaddq_f32(v85, (float32x4_t)vdupq_laneq_s64((int64x2_t)v85, 1)), v18, 3)), (float32x4_t)vdupq_laneq_s64(v82, 1)));
          float32x4_t v93 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 0xCuLL), vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v79), vmulq_laneq_f32(vaddq_f32(v84, (float32x4_t)vdupq_laneq_s64((int64x2_t)v84, 1)), v18, 3)), (float32x4_t)vdupq_laneq_s64((int64x2_t)v73, 1))), (int8x16_t)v79);
          float32x4_t v94 = (float32x4_t)vbslq_s8(v55, v33, v65);
          float32x4_t v95 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v37, v57);
          float32x4_t v96 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v39, v58);
          float32x4_t v97 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v79, v59);
          float32x4_t v98 = (float32x4_t)vbslq_s8(v56, v92, (int8x16_t)v80);
          int8x16_t v99 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v94.i64[0], 0), vmulq_laneq_f32(v18, v94, 3));
          int8x16_t v100 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v95.i64[0], 0), vmulq_laneq_f32(v18, v95, 3));
          float32x4_t v101 = vaddq_f32((float32x4_t)vdupq_lane_s64(v96.i64[0], 0), vmulq_laneq_f32(v18, v96, 3));
          float32x4_t v102 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32(v88, v90), (int8x16_t)v37);
          int8x16_t v103 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v97.i64[0], 0), vmulq_laneq_f32(v18, v97, 3));
          float32x4_t v104 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32(v89, v91), (int8x16_t)v39);
          *(int8x8_t *)v91.f32 = vext_s8(*(int8x8_t *)v93.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), 4uLL);
          v80.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v93, 0xCuLL).u64[0];
          *(int8x8_t *)v73.f32 = vext_s8(*(int8x8_t *)v102.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), 4uLL);
          v88.i64[0] = vextq_s8(v99, (int8x16_t)v102, 0xCuLL).u64[0];
          v93.i64[1] = v101.i64[1];
          *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v104.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL), 4uLL);
          v59.i64[0] = vextq_s8(v100, (int8x16_t)v104, 0xCuLL).u64[0];
          *(int8x8_t *)v101.f32 = vext_s8(*(int8x8_t *)v98.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL), 4uLL);
          v89.i64[0] = vextq_s8(v103, (int8x16_t)v98, 0xCuLL).u64[0];
          v98.i64[1] = v103.i64[1];
          v102.i64[1] = v99.i64[1];
          int8x16_t v105 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v52, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v94));
          int8x16_t v106 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v53, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v95));
          v104.i64[1] = v100.i64[1];
          int8x16_t v107 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v54, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v96));
          v73.i64[1] = v88.i64[0];
          v79.i64[1] = v59.i64[0];
          int8x16_t v108 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v66, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v97));
          v91.i64[1] = v80.i64[0];
          v101.i64[1] = v89.i64[0];
          int8x16_t v109 = (int8x16_t)vaddq_f32(v102, v73);
          int8x16_t v110 = (int8x16_t)vaddq_f32(v104, v79);
          int8x16_t v111 = (int8x16_t)vaddq_f32(v93, v91);
          int8x16_t v112 = (int8x16_t)vaddq_f32(v98, v101);
          float32x4_t v113 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), (float32x4_t)vbslq_s8(v56, v105, v109)), v109);
          float32x4_t v114 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL), (float32x4_t)vbslq_s8(v56, v107, v111)), v111);
          float32x4_t v115 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL), (float32x4_t)vbslq_s8(v56, v106, v110)), v110);
          float32x4_t v116 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL), (float32x4_t)vbslq_s8(v56, v108, v112)), v112);
          float32x4_t v117 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v93, (int8x16_t)vsubq_f32(v114, (float32x4_t)vrev64q_s32((int32x4_t)v114)));
          float32x4_t v118 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v98, (int8x16_t)vsubq_f32(v116, (float32x4_t)vrev64q_s32((int32x4_t)v116)));
          float32x4_t v119 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v102, (int8x16_t)vsubq_f32(v113, (float32x4_t)vrev64q_s32((int32x4_t)v113)));
          float32x4_t v120 = *(float32x4_t *)(v17 + 96);
          int8x16_t v121 = (int8x16_t)vmulq_f32(*(float32x4_t *)v17, v120);
          float32x4_t v122 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v104, (int8x16_t)vsubq_f32(v115, (float32x4_t)vrev64q_s32((int32x4_t)v115)));
          int8x16_t v123 = veorq_s8(vandq_s8(*(int8x16_t *)(v17 + 16), *(int8x16_t *)(v17 + 112)), vextq_s8(v121, v121, 8uLL));
          v119.i64[0] = vmulq_n_f32(v119, *(float *)v123.i32).u64[0];
          v98.i64[0] = vmulq_n_f32(v117, *(float *)v123.i32).u64[0];
          v117.i64[0] = vmulq_n_f32(v122, *(float *)v123.i32).u64[0];
          v122.i64[0] = vmulq_n_f32(v118, *(float *)v123.i32).u64[0];
          v123.i32[2] = 1.0;
          v119.i64[1] = v123.i64[1];
          v117.i64[1] = v123.i64[1];
          v98.i64[1] = v123.i64[1];
          v122.i64[1] = v123.i64[1];
          int32x4_t v124 = (int32x4_t)vmulq_f32(v119, v119);
          int32x4_t v125 = (int32x4_t)vmulq_f32(v117, v117);
          int32x4_t v126 = (int32x4_t)vmulq_f32(v98, v98);
          int32x4_t v127 = (int32x4_t)vmulq_f32(v122, v122);
          float32x4_t v128 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v124), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL))), (int8x16_t)v119);
          float32x4_t v129 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v125), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL))), (int8x16_t)v117);
          float32x4_t v130 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v126), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL))), (int8x16_t)v98);
          float32x4_t v131 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v127), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL))), (int8x16_t)v122);
          float32x4_t v132 = *(float32x4_t *)(v17 + 128);
          float32x4_t v133 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v128)), v132);
          float32x4_t v134 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v129)), v132);
          float32x4_t v135 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v130)), v132);
          float32x4_t v136 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v131)), v132);
          float32x4_t v137 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v133, vrsqrtsq_f32(vmulq_f32(v133, v128), v133)), (int8x16_t)v119);
          float32x4_t v138 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v134, vrsqrtsq_f32(vmulq_f32(v134, v129), v134)), (int8x16_t)v117);
          float32x4_t v139 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v135, vrsqrtsq_f32(vmulq_f32(v135, v130), v135)), (int8x16_t)v98);
          float32x4_t v140 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v136, vrsqrtsq_f32(vmulq_f32(v136, v131), v136)), (int8x16_t)v122);
          float32x4_t v141 = vmulq_laneq_f32(v137, v137, 3);
          float32x4_t v142 = vmulq_laneq_f32(v138, v138, 3);
          float32x4_t v143 = vmulq_laneq_f32(v139, v139, 3);
          v141.i32[3] = 1.0;
          v142.i32[3] = 1.0;
          v143.i32[3] = 1.0;
          float32x4_t v144 = vmulq_laneq_f32(v140, v140, 3);
          v144.i32[3] = 1.0;
          float32x4_t v145 = (float32x4_t *)(v7 + v14);
          *float32x4_t v145 = v141;
          v145[1] = v142;
          v145[2] = v143;
          v145[3] = v144;
          v15 += 4;
          v14 += 64;
        }
      }
      if ((int)v15 < v4)
      {
        uint64_t v146 = v15;
        float32x4_t v147 = (float32x4_t *)(v13 + 16 * v15);
        float32x4_t v148 = (float32x4_t *)(v13 + 16 * (v5 + v15));
        do
        {
          uint64_t v149 = *((void *)this + 51);
          float32x4_t v150 = *(float32x4_t *)(v149 + 32);
          float32x4_t v151 = *(float32x4_t *)(v149 + 48);
          float32x4_t v152 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (v11 + (int)v146)), v150);
          float32x4_t v153 = vaddq_f32(v152, (float32x4_t)vextq_s8((int8x16_t)v152, (int8x16_t)v152, 4uLL));
          int8x16_t v154 = (int8x16_t)vaddq_f32(v153, (float32x4_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL));
          float32x4_t v155 = vmulq_f32(v147[-2], v150);
          float32x4_t v156 = vaddq_f32(v155, (float32x4_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 4uLL));
          int32x4_t v157 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v154, v154, 8uLL), vmulq_n_f32(v151, vaddq_f32(v156, (float32x4_t)vdupq_laneq_s32((int32x4_t)v156, 2)).f32[0]));
          float32x4_t v158 = v148[-1];
          float32x4_t v159 = vmulq_f32(v150, v148[-2]);
          float32x4_t v160 = vaddq_f32(v159, (float32x4_t)vextq_s8((int8x16_t)v159, (int8x16_t)v159, 4uLL));
          float32x4_t v161 = *v148++;
          float32x4_t v162 = vmulq_f32(v150, v161);
          float32x4_t v163 = vaddq_f32(v162, (float32x4_t)vextq_s8((int8x16_t)v162, (int8x16_t)v162, 4uLL));
          int8x16_t v164 = *(int8x16_t *)(v149 + 64);
          int8x16_t v165 = *(int8x16_t *)(v149 + 80);
          int8x16_t v166 = vbslq_s8(v164, v154, (int8x16_t)vaddq_f32(v160, (float32x4_t)vdupq_laneq_s64((int64x2_t)v160, 1)));
          int8x16_t v167 = (int8x16_t)vaddq_f32(v163, (float32x4_t)vdupq_lane_s64(v163.i64[0], 0));
          float32x4_t v168 = (float32x4_t)vextq_s8(v167, v166, 8uLL);
          v166.i64[1] = v167.i64[1];
          int64x2_t v169 = (int64x2_t)vbslq_s8(v165, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v157), v168), v166);
          float32x4_t v170 = vmulq_f32(v150, *(float32x4_t *)(v8 + 16 * ((int)v146 - (int)v5 + 1)));
          float32x4_t v171 = vaddq_f32(v170, (float32x4_t)vextq_s8((int8x16_t)v170, (int8x16_t)v170, 4uLL));
          int32x4_t v172 = (int32x4_t)vaddq_f32(v171, (float32x4_t)vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL));
          float32x4_t v173 = *v147++;
          float32x4_t v174 = vmulq_f32(v150, v173);
          float32x4_t v175 = vaddq_f32(v174, (float32x4_t)vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL));
          float32x4_t v176 = (float32x4_t)vbslq_s8(v164, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 0xCuLL), vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v172), vmulq_laneq_f32(vaddq_f32(v175, (float32x4_t)vdupq_laneq_s64((int64x2_t)v175, 1)), v151, 3)), (float32x4_t)vdupq_laneq_s64(v169, 1))), (int8x16_t)v172);
          float32x4_t v177 = vmulq_f32(v150, *(float32x4_t *)(v8 + 16 * ((int)v146 - (int)v5)));
          float32x4_t v178 = vaddq_f32(v177, (float32x4_t)vextq_s8((int8x16_t)v177, (int8x16_t)v177, 4uLL));
          float32x4_t v179 = (float32x4_t)vbslq_s8(v165, (int8x16_t)vaddq_f32(v178, (float32x4_t)vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL)), v166);
          float32x4_t v180 = vmulq_f32(v150, v158);
          float32x4_t v181 = vaddq_f32(v180, (float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL));
          int8x16_t v182 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v179.i64[0], 0), vmulq_laneq_f32(v151, v179, 3));
          *(int8x8_t *)v158.f32 = vext_s8(*(int8x8_t *)v176.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v182, v182, 8uLL), 4uLL);
          v175.i64[0] = vextq_s8(v182, (int8x16_t)v176, 0xCuLL).u64[0];
          v176.i64[1] = v182.i64[1];
          v158.i64[1] = v175.i64[0];
          int8x16_t v183 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vaddq_f32(v181, (float32x4_t)vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL)), v151, 3), (float32x4_t)vrev64q_s32((int32x4_t)v179));
          int8x16_t v184 = (int8x16_t)vaddq_f32(v176, v158);
          float32x4_t v185 = (float32x4_t)vbslq_s8(v164, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL), (float32x4_t)vbslq_s8(v164, v183, v184)), v184);
          float32x4_t v186 = (float32x4_t)vbslq_s8(v164, (int8x16_t)v176, (int8x16_t)vsubq_f32(v185, (float32x4_t)vrev64q_s32((int32x4_t)v185)));
          float32x4_t v187 = *(float32x4_t *)(v149 + 96);
          int8x16_t v188 = (int8x16_t)vmulq_f32(*(float32x4_t *)v149, v187);
          int8x16_t v189 = veorq_s8(vandq_s8(*(int8x16_t *)(v149 + 16), *(int8x16_t *)(v149 + 112)), vextq_s8(v188, v188, 8uLL));
          v186.i64[0] = vmulq_n_f32(v186, *(float *)v189.i32).u64[0];
          v189.i32[2] = 1.0;
          v186.i64[1] = v189.i64[1];
          int32x4_t v190 = (int32x4_t)vmulq_f32(v186, v186);
          float32x4_t v191 = (float32x4_t)vbslq_s8(v165, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v190), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL))), (int8x16_t)v186);
          float32x4_t v192 = vminq_f32(vmulq_f32(v187, vrsqrteq_f32(v191)), *(float32x4_t *)(v149 + 128));
          float32x4_t v193 = (float32x4_t)vbslq_s8(v165, (int8x16_t)vmulq_f32(v192, vrsqrtsq_f32(vmulq_f32(v192, v191), v192)), (int8x16_t)v186);
          float32x4_t v194 = vmulq_laneq_f32(v193, v193, 3);
          v194.i32[3] = 1.0;
          *(float32x4_t *)(v7 + 16 * v146++) = v194;
        }
        while (v146 < v4);
      }
      v8 += v9;
      ++v3;
      v10 += v9;
      v7 += v12;
      v13 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSolidRendererBumpMap::GetDOD(HgcSolidRendererBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcSolidRendererBumpMap::GetROI(HgcSolidRendererBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcSolidRendererBumpMap::HgcSolidRendererBumpMap(HgcSolidRendererBumpMap *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1132510;
  operator new();
}

void sub_1B7B857F8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSolidRendererBumpMap::~HgcSolidRendererBumpMap(HGNode *this)
{
  *(void *)this = &unk_1F1132510;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40C3A7E6FCLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcSolidRendererBumpMap::~HgcSolidRendererBumpMap(this);

  HGObject::operator delete(v1);
}

uint64_t HgcSolidRendererBumpMap::SetParameter(HgcSolidRendererBumpMap *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch(a2)
  {
    case 2:
      uint64_t v8 = *((void *)this + 51);
      if (*(float *)(v8 + 32) != a3.n128_f32[0]
        || *(float *)(v8 + 36) != a4
        || *(float *)(v8 + 40) != a5
        || *(float *)(v8 + 44) != a6)
      {
        *(_DWORD *)(v8 + 32) = a3.n128_u32[0];
        *(float *)(v8 + 3ProCore_Impl::PCNSRefImpl::release(this + 6) = a4;
        *(float *)(v8 + 4std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a5;
        *(float *)(v8 + 44) = a6;
        goto LABEL_19;
      }
      return 0;
    case 1:
      uint64_t v9 = (__n128 *)*((void *)this + 51);
      if (v9[1].n128_f32[0] != (float)-a3.n128_f32[0]
        || v9[1].n128_f32[1] != 0.0
        || v9[1].n128_f32[2] != 0.0
        || v9[1].n128_f32[3] != 0.0)
      {
        v9[1].n128_f32[0] = -a3.n128_f32[0];
        v9[1].n128_u64[1] = 0;
        v9[1].n128_u32[1] = 0;
        a3.n128_f32[1] = a4;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        v9[10] = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      uint64_t v7 = (__n128 *)*((void *)this + 51);
      if (v7->n128_f32[0] != 0.0
        || v7->n128_f32[1] != 0.0
        || v7->n128_f32[2] != a3.n128_f32[0]
        || v7->n128_f32[3] != 0.0)
      {
        v7->n128_u64[0] = 0;
        v7->n128_u32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        v7->n128_u32[3] = 0;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        v7[9] = a3;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcSolidRendererBumpMap::GetParameter(HgcSolidRendererBumpMap *this, int a2, float *a3)
{
  switch(a2)
  {
    case 2:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[8];
      a3[1] = v5[9];
      a3[2] = v5[10];
      int v4 = v5 + 11;
      goto LABEL_7;
    case 1:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[40];
      a3[1] = v6[41];
      a3[2] = v6[42];
      int v4 = v6 + 43;
      goto LABEL_7;
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = v3[36];
      a3[1] = v3[37];
      a3[2] = v3[38];
      int v4 = v3 + 39;
LABEL_7:
      uint64_t result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *LiHeAlphaFill::GetProgram(LiHeAlphaFill *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000027f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.x = clamp(r0.w*half(hg_Params[1].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = float4(r0.xxxx)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=1313a19a:2f5a4de3:21a49b0a:6b2012eb\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000026c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.x = clamp(r0.w*hg_Params[1].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = r0.xxxx*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=d10bdb12:54ddf532:0e36d11f:59b899ba\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000264\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0.x = clamp(r0.w*hg_ProgramLocal1.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = r0.xxxx*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=9a761c45:a1fc489c:940dabd1:9b30d9e5\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void LiHeAlphaFill::InitProgramDescriptor(LiHeAlphaFill *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeAlphaFill_hgc_visible", "//Metal1.0     \n//LEN=0000000143\n[[ visible ]] FragmentOut LiHeAlphaFill_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0.x = clamp(r0.w*hg_Params[1].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0.xxxx*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LiHeAlphaFill");
}

void sub_1B7B85B74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7B85C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7B85CB4()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7B85CACLL);
}

void *LiHeAlphaFill::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeAlphaFill [hgc1]");
}

uint64_t LiHeAlphaFill::BindTexture(LiHeAlphaFill *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeAlphaFill::Bind(LiHeAlphaFill *this, HGHandler *a2)
{
  return 0;
}

uint64_t LiHeAlphaFill::RenderTile(LiHeAlphaFill *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = 16 * *((int *)a2 + 22);
    uint64_t v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v24) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          int v11 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v12 = v11[1];
          float32x4_t v13 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 - 32), 3);
          float32x4_t v14 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 - 16), 3);
          float32x4_t v15 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10), 3);
          float32x4_t v16 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 + 16), 3);
          float32x4_t v17 = v11[2];
          float32x4_t v18 = v11[3];
          float32x4_t v19 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v13, v17), v18).f32[0]);
          float32x4_t v20 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v14, v17), v18).f32[0]);
          float32x4_t v21 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v15, v17), v18).f32[0]);
          float32x4_t v22 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v16, v17), v18).f32[0]);
          float32x4_t v23 = (float32x4_t *)(v5 + v10);
          v23[-2] = v19;
          v23[-1] = v20;
          *float32x4_t v23 = v21;
          v23[1] = v22;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v24) = -v9;
      }
      if ((int)v24 < v4)
      {
        uint64_t v24 = v24;
        do
        {
          *(float32x4_t *)(v5 + 16 * v24) = vmulq_n_f32(*(float32x4_t *)*((void *)this + 51), vminq_f32(vmaxq_f32(vmulq_laneq_f32(*(float32x4_t *)(*((void *)this + 51) + 16), *(float32x4_t *)(v6 + 16 * v24), 3), *(float32x4_t *)(*((void *)this + 51) + 32)), *(float32x4_t *)(*((void *)this + 51) + 48)).f32[0]);
          ++v24;
        }
        while (v24 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeAlphaFill::GetDOD(LiHeAlphaFill *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t LiHeAlphaFill::GetROI(LiHeAlphaFill *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void LiHeAlphaFill::LiHeAlphaFill(LiHeAlphaFill *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1132778;
  operator new();
}

void sub_1B7B86088(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeAlphaFill::~LiHeAlphaFill(HGNode *this)
{
  *(void *)this = &unk_1F1132778;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40FA0F61DDLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  LiHeAlphaFill::~LiHeAlphaFill(this);

  HGObject::operator delete(v1);
}

uint64_t LiHeAlphaFill::SetParameter(LiHeAlphaFill *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  PCSharedCount v10[2] = a5;
  void v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeAlphaFill::GetParameter(LiHeAlphaFill *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

uint64_t MalformedKeyError(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4)
{
  id v7 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v8 = NSString;
  uint64_t v9 = [(id)objc_msgSend(MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()), "localizedStringForKey:value:table:", @"Plug-In dictionary has a malformed key. Key \"%@\" is required to be of class \"%@\".", &stru_1F119C770, @"PROPlug"];
  uint64_t v10 = (void *)[v7 initWithObjectsAndKeys:objc_msgSend(v8, "stringWithFormat:", v9, a2, NSStringFromClass(a3)), *MEMORY[0x1E4F28568], a2, @"MalformedKey", a4, @"NSDictionary", 0];
  uint64_t v11 = [MEMORY[0x1E4F28C58] errorWithDomain:@"PROPlug" code:-501 userInfo:v10];

  return v11;
}

uint64_t RequiredKeyIsPresent(uint64_t a1, uint64_t a2, objc_class *a3, void *a4, uint64_t *a5)
{
  if ([a4 objectForKey:a2])
  {
    if (objc_opt_isKindOfClass()) {
      return 1;
    }
    if (a5)
    {
      uint64_t v13 = MalformedKeyError(a1, a2, a3, (uint64_t)a4);
      goto LABEL_8;
    }
  }
  else if (a5)
  {
    id v11 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    float32x4_t v12 = (void *)[v11 initWithObjectsAndKeys:objc_msgSend(NSString, "stringWithFormat:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleForClass:", objc_opt_class()), "localizedStringForKey:value:table:", @"Plug-In dictionary is missing required key \"%@\".", &stru_1F119C770, @"PROPlug", a2), *MEMORY[0x1E4F28568], a2, @"MissingKey", a4, @"NSDictionary", 0];
    uint64_t v13 = [MEMORY[0x1E4F28C58] errorWithDomain:@"PROPlug" code:-500 userInfo:v12];

LABEL_8:
    uint64_t result = 0;
    *a5 = v13;
    return result;
  }
  return 0;
}

uint64_t OptionalKeyIsWellFormed(uint64_t a1, uint64_t a2, objc_class *a3, void *a4, uint64_t *a5)
{
  if (![a4 objectForKey:a2] || (objc_opt_isKindOfClass() & 1) != 0) {
    return 1;
  }
  if (!a5) {
    return 0;
  }
  uint64_t v11 = MalformedKeyError(a1, a2, a3, (uint64_t)a4);
  uint64_t result = 0;
  *a5 = v11;
  return result;
}

void sub_1B7B8CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

uint64_t FloatSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t IntSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t StringTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t AngleSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PercentSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t ToggleButtonTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PopupMenuTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t RGBColorTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t RGBAColorTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PointTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t FontTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t GroupTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PushButtonTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t HistogramTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t GradientTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t ImageTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t CustomParameterTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

void *OZMEChannelTimeConverter::GetCurrentConversion(OZMEChannelTimeConverter *this)
{
  perThreadTimeStack();
  uint64_t result = pthread_getspecific(perThreadTimeStack(void)::result);
  if (result)
  {
    uint64_t v2 = result[5];
    if (v2) {
      return (void *)(*(void *)(result[1] + 8 * ((v2 + result[4] - 1) / 0x28uLL))
    }
                      + 100 * ((v2 + result[4] - 1) % 0x28uLL));
    else {
      return 0;
    }
  }
  return result;
}

void perThreadTimeStack(void)
{
  {
    pthread_key_create((pthread_key_t *)&perThreadTimeStack(void)::result, (void (__cdecl *)(void *))PCThreadSpecific<std::stack<OZMETimeConverterData>>::destroy);
  }
}

void sub_1B7B8F838(_Unwind_Exception *a1)
{
}

void *PCThreadSpecific<std::stack<OZMETimeConverterData>>::destroy(void *result)
{
  if (result)
  {
    std::deque<OZMETimeConverterData>::~deque[abi:ne180100](result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t std::deque<OZMETimeConverterData>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 20;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 40;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    id v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t OZRotoshape::setDirty(OZRotoshape *this, char a2, int a3)
{
  return OZMoShape::setDirty((OZRotoshape *)((char *)this + 18976), a2, a3);
}

double OZRotoshape::getReparametrizedContourLength(uint64_t a1, long long *a2, int a3, double *a4)
{
  uint64_t v7 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v10);
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  char v12 = *((unsigned char *)a2 + 202);
  char v13 = *((unsigned char *)a2 + 220);
  long long v14 = *(long long *)((char *)a2 + 24);
  int v15 = 1;
  double ReparametrizedContourLength = OZShape::getReparametrizedContourLength(v7, (uint64_t)&v10, a3, a4);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
  return ReparametrizedContourLength;
}

void sub_1B7B8F9F4(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

CGColorSpace **OZRotoshape::getReparametrizedPointOnContour(uint64_t a1, long long *a2, double *a3, double *a4, double *a5, double *a6, int a7, double *a8, long double a9, char a10)
{
  uint64_t v18 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v20);
  long long v20 = *a2;
  uint64_t v21 = *((void *)a2 + 2);
  char v22 = *((unsigned char *)a2 + 202);
  char v23 = *((unsigned char *)a2 + 220);
  long long v24 = *(long long *)((char *)a2 + 24);
  int v25 = 1;
  OZShape::getReparametrizedPointOnContour(v18, (uint64_t)&v20, a3, a4, a5, a6, a7, a8, a9, a10);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v26);
}

void sub_1B7B8FAF0(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

void OZGLGradientRadial::OZGLGradientRadial(OZGLGradientRadial *this, OZChannelGradient *a2, CGColorSpace *a3, CGColorSpace *a4, char a5)
{
  *((void *)this + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *((void *)this + 61) = 0;
  *((unsigned char *)this + 49ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  *(void *)this = &unk_1F1132C58;
  uint64_t v7 = (HGRenderJob *)((char *)this + 8);
  OZGradient::OZGradient((OZGLGradientRadial *)((char *)this + 8), (OZChannelGradient *)off_1F1132AD8, (uint64_t)a2, a3, (uint64_t)a4);
  *(void *)this = &unk_1F1132A08;
  *((void *)this + 1) = &unk_1F1132A68;
  *((void *)this + 6std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1132AB8;
  *((void *)this + 37) = 0x3FF0000000000000;
  *((void *)this + 27) = 0x3FF0000000000000;
  *((void *)this + 32) = 0x3FF0000000000000;
  *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = 0x3FF0000000000000;
  *(_DWORD *)((char *)this + 359) = 0;
  *((unsigned char *)this + 363) = 1;
  *((_WORD *)this + 208) = 1;
  *((unsigned char *)this + 419) = 0;
  *((unsigned char *)this + 42std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = a5;
  PCColor::PCColor((PCColor *)((char *)this + 424));
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)v16);
  unsigned int v8 = ((double)*(int *)(*((void *)this + 2) + 12) * 0.25);
  v16[0] = 2;
  v16[1] = v8;
  long long v17 = xmmword_1B837F640;
  UserTag = (CGColorSpace *)HGRenderJob::GetUserTag(v7);
  PCColorSpaceHandle::setColorSpace(v18, UserTag);
  v18[1] = (CGColorSpace *)3553;
  char v19 = 0;
  PGCreatePooledImage((const PCImageAttributes *)v16, &v13);
  PCDynamicCast<PGTexture,PCImage>((uint64_t)&v13, &v15);
  long long v10 = v15;
  long long v15 = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 44);
  *(_OWORD *)((char *)this + 344) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v12 = HGRenderJob::GetUserTag(v7);
  (*(void (**)(OZGLGradientRadial *, uint64_t))(*(void *)this + 48))(this, v12);
  PCCFRef<CGColorSpace *>::~PCCFRef(v18);
}

void sub_1B7B8FD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v9 + 472));
  uint64_t v13 = *(std::__shared_weak_count **)(v9 + 352);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  OZGradient::~OZGradient(v11, (uint64_t *)off_1F1132AD8);
  *(void *)(v9 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v10;
  *(unsigned char *)(v9 + 49ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v9 + 488));
  _Unwind_Resume(a1);
}

void OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  unint64_t v5 = (OZGLGradientRadial *)((char *)this + 8);
  *((void *)this + 1) = a2[5];
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[6];
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 59);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  OZGradient::~OZGradient(v5, a2 + 1);
}

void OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this)
{
  *(void *)(v1 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 49ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 488));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 49ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 488));

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this)
{
  *((void *)this + 59) = &unk_1F1199AC8;
  *((unsigned char *)this + 488) = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 60);
}

{
  OZGLGradientRadial::~OZGLGradientRadial((OZGLGradientRadial *)((char *)this - 8));
}

void virtual thunk to'OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this)
{
  *(void *)(v1 + 48std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 49ProCore_Impl::PCNSRefImpl::release(this + 6) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 488);

  PCWeakCount::~PCWeakCount(v2);
}

{
  OZGLGradientRadial::~OZGLGradientRadial((OZGLGradientRadial *)((char *)this + *(void *)(*(void *)this - 24)));
}

double OZGLGradientRadial::init(OZGLGradientRadial *this, CGColorSpace *a2)
{
  int v3 = this;
  {
    if (this)
    {
      initPrograms(void)::locuint64_t k = 0;
      __cxa_atexit((void (*)(void *))PCSpinLock::~PCSpinLock, &initPrograms(void)::lock, &dword_1B73F3000);
    }
  }
  Instance = (os_unfair_lock_s *)OZShaderManager::getInstance(this);
  PCSpinLock::lock((os_unfair_lock_t)&initPrograms(void)::lock);
  if (!OZShaderManager::getShader(Instance, "radialGradient"))
  {
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&v16);
    operator new();
  }
  PCSpinLock::unlock((os_unfair_lock_t)&initPrograms(void)::lock);
  uint64_t v6 = (os_unfair_lock_s *)OZShaderManager::getInstance(v5);
  Shader = (const void *)OZShaderManager::getShader(v6, "radialGradient");
  if (Shader) {
  *((void *)v3 + 4ProCore_Impl::PCNSRefImpl::release(this + 6) = Shader;
  }
  unsigned int v8 = (const void *)OZShaderManager::getShader(v6, "radialGradientFloat");
  if (v8) {
  *((void *)v3 + 47) = v8;
  }
  if (*((unsigned char *)v3 + 420)) {
    uint64_t v9 = "radialGradientMultiText";
  }
  else {
    uint64_t v9 = "radialGradientMulti";
  }
  uint64_t v10 = (const void *)OZShaderManager::getShader(v6, v9);
  if (v10) {
  *((void *)v3 + 48) = v10;
  }
  uint64_t v11 = (const void *)OZShaderManager::getShader(v6, "radialGradientMultiFloat");
  if (v11) {
  *((void *)v3 + 49) = v11;
  }
  uint64_t v12 = (const void *)OZShaderManager::getShader(v6, "radialGradientMultiColor");
  if (v12) {
  *((void *)v3 + 5std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v12;
  }
  uint64_t v13 = (const void *)OZShaderManager::getShader(v6, "radialGradientMultiColorFloat");
  if (v13) {
  *((void *)v3 + 51) = v13;
  }
  OZGradient::init((OZGLGradientRadial *)((char *)v3 + 8), a2);
  PGTexture::bind(*((ProGL::Private::TextureImpl ***)v3 + 43));
  PGTexture::setParameteri(*((OZChannelBase ***)v3 + 43), 0x2800u, 9729);
  PGTexture::setParameteri(*((OZChannelBase ***)v3 + 43), 0x2801u, 9729);
  PGTexture::setParameteri(*((OZChannelBase ***)v3 + 43), 0x2802u, 33071);
  long long v14 = (void *)*((void *)v3 + 43);
  if (v14) {
  PGTexture2D::setDataPtr((ProGL::Private::TextureImpl **)v14, *(const void **)(*((void *)v3 + 2) + 24), 0x1908u, 0x1406u);
  }
  return OZGLGradientRadial::computeTexgenCoefficients(v3);
}

void sub_1B7B9069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1BA9BFBA0](v9, 0x10A1C40878AE62CLL);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&a9);
  PCSpinLock::unlock((os_unfair_lock_t)&initPrograms(void)::lock);
  _Unwind_Resume(a1);
}

double OZGLGradientRadial::computeTexgenCoefficients(OZGLGradientRadial *this)
{
  float v1 = *((float *)this + 6);
  float v2 = *((float *)this + 7);
  float v3 = *((float *)this + 8) - v1;
  float v4 = *((float *)this + 9) - v2;
  float v5 = fmaxf((float)(v3 * v3) + (float)(v4 * v4), 0.0000001);
  double v6 = (float)(v3 / v5);
  *((double *)this + 27) = v6;
  uint64_t v7 = (char *)this + 216;
  *((void *)v7 + 15) = 0x3FF0000000000000;
  *((void *)v7 + 1std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0x3FF0000000000000;
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 4) = 0;
  *((void *)v7 + 5) = 0x3FF0000000000000;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  double v8 = (float)(v4 / v5);
  *((double *)v7 + 1) = v8;
  *((double *)v7 + 3) = -(v1 * v6 + v2 * v8 + 0.0);
  return PCMatrix44Tmpl<double>::rightMult((uint64_t)v7, (double *)v7 - 20);
}

double non-virtual thunk to'OZGLGradientRadial::init(OZGLGradientRadial *this, CGColorSpace *a2)
{
  return OZGLGradientRadial::init((OZGLGradientRadial *)((char *)this - 8), a2);
}

void OZGLGradientRadial::getHash(OZGLGradientRadial *this, CMTime *a2)
{
  float v2 = (char *)MEMORY[0x1F4188790](this);
  float v4 = v3;
  v7[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  OZGradient::getHash((OZGradient *)(v2 + 8), v5);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v7);
  PCHashWriteStream::writeValue(v7, v2[417]);
  PCHashWriteStream::writeValue(v7, v2[419]);
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=(v4, (int *)Hash);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v7);
}

void sub_1B7B90864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void non-virtual thunk to'OZGLGradientRadial::getHash(OZGLGradientRadial *this, CMTime *a2)
{
}

uint64_t OZGLGradientRadial::update(OZGLGradientRadial *this, CMTime *a2)
{
  float v3 = (HGRenderJob *)((char *)this + 8);
  CMTime v17 = *a2;
  uint64_t v4 = OZGradient::update((OZGLGradientRadial *)((char *)this + 8), &v17);
  if (v4)
  {
    if (*((unsigned char *)this + 417))
    {
      uint64_t v5 = *((void *)this + 2);
      unsigned int v6 = ((double)*(int *)(v5 + 12) * 0.25);
      if (v6)
      {
        uint64_t v7 = *(void *)(v5 + 24);
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *(void *)uint64_t v7 = _D0;
          *(_DWORD *)(v7 + 8) = 1065353216;
          v7 += 16;
          --v6;
        }
        while (v6);
      }
    }
    if (*((unsigned char *)this + 419))
    {
      uint64_t v13 = (float *)(*(void *)(*((void *)this + 2) + 24)
                    + 4 * (4 * ((double)*(int *)(*((void *)this + 2) + 12) * 0.25) - 4));
      UserTag = (CGColorSpace *)HGRenderJob::GetUserTag(v3);
      PCColor::getRGBA((PCColor *)((char *)this + 424), v13, v13 + 1, v13 + 2, v13 + 3, UserTag);
    }
    long long v15 = (void *)*((void *)this + 43);
    if (v15) {
    PGTexture2D::setDataPtr((ProGL::Private::TextureImpl **)v15, *(const void **)(*((void *)this + 2) + 24), 0x1908u, 0x1406u);
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'OZGLGradientRadial::update(OZGLGradientRadial *this, CMTime *a2)
{
  return OZGLGradientRadial::update((OZGLGradientRadial *)((char *)this - 8), a2);
}

void OZGLGradientRadial::enable(OZGLGradientRadial *this)
{
  ProGL::GL::GL((ProGL::GL *)v18);
  PGTexture::bind(*((ProGL::Private::TextureImpl ***)this + 43));
  PGTexture::enable(*((ProGL::Private::TextureImpl ***)this + 43));
  if (*((unsigned char *)this + 416))
  {
    float v3 = *((float *)this + 6);
    float v4 = *((float *)this + 7);
    float v5 = sqrtf((float)((float)(*((float *)this + 8) - v3) * (float)(*((float *)this + 8) - v3))+ (float)((float)(*((float *)this + 9) - v4) * (float)(*((float *)this + 9) - v4)));
    float v6 = 1.0 / v5;
    BOOL v7 = v5 == 0.0;
    float v8 = 1000.0;
    if (!v7) {
      float v8 = v6;
    }
    double v9 = v8;
    double v10 = *((double *)this + 23) * v9;
    *((double *)this + 27) = v10;
    *((void *)this + 42) = 0x3FF0000000000000;
    *((void *)this + 37) = 0x3FF0000000000000;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + LiPolygonInstance::~LiPolygonInstance(this - 14) = 0u;
    *(_OWORD *)((char *)this + 264) = 0u;
    *(_OWORD *)((char *)this + 28std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 2std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0u;
    double v11 = v3;
    double v12 = v4;
    *((double *)this + 3std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = -(v10 * v11 + v12 * 0.0 + 0.0);
    *((double *)this + 32) = v9;
    *((double *)this + 34) = -(v12 * v9 + v11 * 0.0 + 0.0);
    v2.n128_f64[0] = PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 216, (double *)this + 7);
  }
  if (!*((unsigned char *)this + 360))
  {
    long long v15 = (char *)this + 368;
    if (*((unsigned char *)this + 361))
    {
      long long v15 = (char *)this + 376;
      uint64_t v16 = (char *)this + 408;
    }
    else
    {
      uint64_t v16 = (char *)this + 400;
    }
    if (*((unsigned char *)this + 418)) {
      CMTime v17 = v16;
    }
    else {
      CMTime v17 = v15;
    }
    goto LABEL_20;
  }
  if (!*((unsigned char *)this + 361))
  {
    CMTime v17 = (char *)this + 384;
LABEL_20:
    (*(void (**)(__n128))(**(void **)v17 + 16))(v2);
    goto LABEL_21;
  }
  (*(void (**)(void, __n128))(**((void **)this + 49) + 16))(*((void *)this + 49), v2);
  float v13 = 0.0;
  if (*((unsigned char *)this + 362)) {
    float v14 = 1.0;
  }
  else {
    float v14 = 0.0;
  }
  if (*((unsigned char *)this + 363)) {
    float v13 = 1.0;
  }
  PGProgram::setLocalParameter(*((PGProgram **)this + 49), v14, v13, 0.0, 0.0);
LABEL_21:
  ProGL::GL::~GL((ProGL::GL *)v18);
}

void sub_1B7B90BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

uint64_t OZGLGradientRadial::disable(OZGLGradientRadial *this)
{
  if (*((unsigned char *)this + 360))
  {
    if (*((unsigned char *)this + 361)) {
      __n128 v2 = (char *)this + 392;
    }
    else {
      __n128 v2 = (char *)this + 384;
    }
  }
  else
  {
    float v3 = (char *)this + 368;
    if (*((unsigned char *)this + 361))
    {
      float v3 = (char *)this + 376;
      float v4 = (char *)this + 408;
    }
    else
    {
      float v4 = (char *)this + 400;
    }
    if (*((unsigned char *)this + 418)) {
      __n128 v2 = v4;
    }
    else {
      __n128 v2 = v3;
    }
  }
  (*(void (**)(void))(**(void **)v2 + 24))();
  float v5 = (ProGL::Private::TextureImpl **)*((void *)this + 43);

  return PGTexture::disable(v5);
}

void OZGLGradientRadial::setTransparentBeyondEdge(OZChannelBase ***this)
{
}

void PGARBFragmentProgram::~PGARBFragmentProgram(PGARBFragmentProgram *this)
{
  PGProgram::~PGProgram(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZWriteOnBehavior::OZWriteOnBehavior(OZWriteOnBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  void *v5 = &unk_1F1132CE0;
  void v5[2] = &unk_1F1132F90;
  v5[6] = &unk_1F11331E8;
  v5[42] = &unk_1F1133240;
  PCURL::PCURL((PCURL *)v8, @"Write On  Parameter Outline");
  PCURL::PCURL((PCURL *)&v7, @"Write On Behavior Outline");
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 536), 0, (const PCString *)v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, @"Write On Behavior Length");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 792), 1.0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, @"Write On Behavior Offset");
  OZChannelDouble::OZChannelDouble((OZWriteOnBehavior *)((char *)this + 944), 0.0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, @"Write On Parameter Direction");
  PCURL::PCURL((PCURL *)&v7, @"Write On Behavior Direction");
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1096), 0, (const PCString *)v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, @"Write On Parameter Speed");
  PCURL::PCURL((PCURL *)&v7, @"Write On Behavior Speed");
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1352), 0, (const PCString *)v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, @"Write On Behavior Custom Speed");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1608), 0.0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, @"Write On Behavior End Frame Offset");
  OZChannelDouble::OZChannelDouble((OZWriteOnBehavior *)((char *)this + 1760), (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCSharedCount::PCSharedCount(v8);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1912), 0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCFu, 2u, 0, 0);
  PCString::~PCString((PCString *)v8);
  *((unsigned char *)this + 2064) = 0;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)&v8[0].int var0 = xmmword_1B837F6C0;
  long long v9 = unk_1B837F6D0;
  OZChannelEnum::setTags((OZWriteOnBehavior *)((char *)this + 1352), (char *)v8, 8);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1760), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1760), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1760));
  OZChannel::setScale((OZChannel *)((char *)this + 944), 100.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 944), "%");
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 944), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 944), 0.0001);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 944), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 944), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 944), 0.0);
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)((char *)this + 212std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 267) = *(void *)(v6 + 16);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 1608), 0, 0);
}

void sub_1B7B9119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, PCString a12, PCString a13)
{
  PCString::~PCString(&a13);
  OZChannel::~OZChannel(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelBehavior::~OZChannelBehavior(v13);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior::OZWriteOnBehavior(OZWriteOnBehavior *this, const OZWriteOnBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  void *v5 = &unk_1F1132CE0;
  void v5[2] = &unk_1F1132F90;
  v5[6] = &unk_1F11331E8;
  v5[42] = &unk_1F1133240;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 67), (const OZWriteOnBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 944), (const OZChannelBase *)((char *)a2 + 944), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 118) = &unk_1F1100CF0;
  *((void *)this + 12std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1096), (const OZWriteOnBehavior *)((char *)a2 + 1096), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1352), (const OZWriteOnBehavior *)((char *)a2 + 1352), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1608), (const OZChannelBase *)((char *)a2 + 1608), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1760), (const OZChannelBase *)((char *)a2 + 1760), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 22std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = &unk_1F1100CF0;
  *((void *)this + 222) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1912), (const OZChannelBase *)((char *)a2 + 1912), (OZChannelFolder *)((char *)this + 56));
  *((unsigned char *)this + 2064) = *((unsigned char *)a2 + 2064);
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  OZChannel::setScale((OZChannel *)((char *)this + 944), 100.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 944), "%");
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 944), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 944), 0.0001);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 944), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 944), 0.0);
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)((char *)this + 212std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 267) = *(void *)(v6 + 16);
}

void sub_1B7B9157C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10)
{
  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannel::~OZChannel(v12);
  OZChannelPercent::~OZChannelPercent(v11);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior::~OZWriteOnBehavior(OZWriteOnBehavior *this)
{
  *(void *)this = &unk_1F1132CE0;
  *((void *)this + 2) = &unk_1F1132F90;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F11331E8;
  *((void *)this + 42) = &unk_1F1133240;
  __n128 v2 = (void *)*((void *)this + 262);
  if (v2)
  {
    *((void *)this + 263) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 259);
  if (v3)
  {
    *((void *)this + 26std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = v3;
    operator delete(v3);
  }
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1912));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1760));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1608));
  OZChannelEnum::~OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1352));
  OZChannelEnum::~OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1096));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZWriteOnBehavior *)((char *)this + 536));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZWriteOnBehavior::~OZWriteOnBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZWriteOnBehavior::~OZWriteOnBehavior(OZWriteOnBehavior *this)
{
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 48));
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

__n128 OZWriteOnBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  float v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)v4 + 536);
  OZChannelBase::operator=(a1 + 792, (uint64_t)v5 + 792);
  OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
  OZChannelBase::operator=(a1 + 1096, (uint64_t)v5 + 1096);
  OZChannelBase::operator=(a1 + 1352, (uint64_t)v5 + 1352);
  OZChannelBase::operator=(a1 + 1608, (uint64_t)v5 + 1608);
  OZChannelBase::operator=(a1 + 1912, (uint64_t)v5 + 1912);
  OZChannelBase::operator=(a1 + 1760, (uint64_t)v5 + 1760);
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)(a1 + 212std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 213ProCore_Impl::PCNSRefImpl::release(this + 6) = *(void *)(v6 + 16);
  return result;
}

uint64_t OZWriteOnBehavior::parseEnd(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 2064) = 1;
  return OZBehavior::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZWriteOnBehavior::parseEnd(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 201ProCore_Impl::PCNSRefImpl::release(this + 6) = 1;
  return OZBehavior::parseEnd((OZWriteOnBehavior *)((char *)this - 48), a2);
}

void OZWriteOnBehavior::createCurveNode(OZWriteOnBehavior *this, OZChannel *a2)
{
}

void sub_1B7B919AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior::didAddToNode(OZWriteOnBehavior *this, OZSceneNode *a2)
{
  if (a2) {
  operator new();
  }
}

void sub_1B7B91FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
}

double OZWriteOnBehavior::solveWriteOnNode(OZWriteOnBehavior *this, OZChannelBase *a2, const CMTime *a3, double a4, double a5)
{
  CMTime v54 = *a3;
  CMTime v53 = *a3;
  memset(&v52, 0, sizeof(v52));
  FrameDuratiouint64_t n = OZBehavior::getFrameDuration(this, (__n128 *)&v52);
  (*(void (**)(CMTime *__return_ptr, OZWriteOnBehavior *, __n128))(*(void *)this + 608))(&v49, this, FrameDuration);
  long long v9 = (const void *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 320))(this);
  if (v9)
  {
    if (!a2) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (!a2)
    {
LABEL_9:
      double v11 = (OZChannelBase *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 312))(this);
      if (!OZChannelBase::isEnabled(v11, 0, 1)
        || (*(unsigned char *)((*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 320))(this) + 1024) & 2) != 0)
      {
        return a5;
      }
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v56);
      CMTime time2 = v49;
      *(__n128 *)&time1.value = v56;
      time1.epoch = v57;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      CMTime time1 = v58;
      CMTime time2 = v53;
      v12.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v53);
      (*(void (**)(__n128 *__return_ptr, __n128))(**(void **)(*((void *)this + 47) + 32) + 320))(&v56, v12);
      CMTime time1 = v53;
      *(__n128 *)&time2.value = v56;
      time2.epoch = v57;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v58);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v55);
      CMTime time1 = v58;
      CMTime time2 = v55;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v48);
      CMTime v53 = v48;
      __n128 v56 = v50;
      CMTimeEpoch v57 = v51;
      float v13 = (CMTime *)MEMORY[0x1E4F1FA48];
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1760), MEMORY[0x1E4F1FA48], 0.0);
      operator*(&v52, &v55, (double)ValueAsInt + -1.0);
      *(__n128 *)&time1.value = v56;
      time1.epoch = v57;
      CMTime time2 = v55;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      CMTime time1 = v53;
      CMTime time2 = v58;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        __n128 v56 = v50;
        CMTimeEpoch v57 = v51;
        int v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1760), MEMORY[0x1E4F1FA48], 0.0);
        operator*(&v52, &v55, (double)v15 + -1.0);
        *(__n128 *)&time1.value = v56;
        time1.epoch = v57;
        CMTime time2 = v55;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        CMTime v53 = v58;
      }
      CMTime time1 = v53;
      CMTime time2 = *v13;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTime v53 = *v13;
        if (!a2) {
          goto LABEL_21;
        }
      }
      else if (!a2)
      {
        goto LABEL_21;
      }
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 944), &v53, 0.0);
        return v26;
      }
LABEL_21:
      (*(void (**)(__n128 *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 320))(&v56);
      CMTime time1 = v53;
      *(__n128 *)&time2.value = v56;
      time2.epoch = v57;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v55);
      CMTime time1 = v58;
      CMTime time2 = v55;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v48);
      CMTime v54 = v48;
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v55);
      CMTime time2 = v49;
      CMTime time1 = v55;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v56);
      CMTime time1 = v54;
      *(__n128 *)&time2.value = v56;
      time2.epoch = v57;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      CMTime v54 = v58;
      (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&time1);
      CMTime v54 = time1;
      Positiouint64_t n = OZWriteOnBehavior::getPosition(this, &v54, &v53);
      if (*((unsigned char *)this + 320))
      {
        CMTime time1 = v54;
        CMTime time2 = *(CMTime *)((char *)this + 2120);
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        operator/((long long *)&v58.value, (uint64_t)&v52, (uint64_t)&time);
        double CurveValueForNode = *(double *)(*((void *)this + 259) + 8 * (int)CMTimeGetSeconds(&time));
        CMTime time1 = v54;
        CMTime time2 = *(CMTime *)((char *)this + 2120);
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        operator/((long long *)&v58.value, (uint64_t)&v52, (uint64_t)&v46);
        char v19 = 0;
        value = 0;
        double v21 = *(double *)(*((void *)this + 262) + 8 * (int)CMTimeGetSeconds(&v46));
      }
      else
      {
        OZChannel::enumerateCurveProcessingNodes((OZChannel *)(v10 + 28952), &time1);
        value = (char *)time1.value;
        char v22 = *(char **)&time1.timescale;
        double CurveValueForNode = 0.0;
        if (*(void *)&time1.timescale != time1.value)
        {
          while (1)
          {
            long long v24 = (const void *)*((void *)v22 - 1);
            v22 -= 8;
            char v23 = v24;
            if (v24)
            {
              if (v25)
              {
                if (v25[1] == this) {
                  break;
                }
              }
            }
            if (v22 == value) {
              goto LABEL_31;
            }
          }
          PreviousProcessingNode = (void *)OZChannel::getPreviousProcessingNode((OZChannel *)(v10 + 28952), v25);
          (*(void (**)(__n128 *__return_ptr, char *))(*((void *)v10 + 3619) + 320))(&v56, v10 + 28952);
          CMTime time1 = v54;
          *(__n128 *)&time2.value = v56;
          time2.epoch = v57;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
          double CurveValueForNode = OZChannel::getCurveValueForNode((OZChannel *)(v10 + 28952), &v58, PreviousProcessingNode, 0.0);
        }
LABEL_31:
        float32x4_t v28 = (OZChannel *)(v10 + 29104);
        OZChannel::enumerateCurveProcessingNodes((OZChannel *)(v10 + 29104), &time1);
        char v19 = (char *)time1.value;
        float32x4_t v29 = *(char **)&time1.timescale;
        double v21 = 1.0;
        if (*(void *)&time1.timescale != time1.value)
        {
          while (1)
          {
            uint64_t v31 = (const void *)*((void *)v29 - 1);
            v29 -= 8;
            float32x4_t v30 = v31;
            if (v31)
            {
              if (v32)
              {
                if (v32[1] == this) {
                  break;
                }
              }
            }
            if (v29 == v19) {
              goto LABEL_38;
            }
          }
          int8x16_t v33 = (void *)OZChannel::getPreviousProcessingNode(v28, v32);
          (*((void (**)(__n128 *__return_ptr, OZChannel *))v28->var0 + 40))(&v56, v28);
          CMTime time1 = v54;
          *(__n128 *)&time2.value = v56;
          time2.epoch = v57;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
          double v21 = OZChannel::getCurveValueForNode(v28, &v58, v33, 0.0);
        }
      }
LABEL_38:
      double v34 = v21 - CurveValueForNode;
      if (v34 < 0.0)
      {
LABEL_52:
        if (v19) {
          operator delete(v19);
        }
        if (value) {
          operator delete(value);
        }
        if (v34 < 0.0) {
          return a5;
        }
        return Position;
      }
      unsigned int var3 = a2->var3;
      if (var3 == 127)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1096), MEMORY[0x1E4F1FA48], 0.0) != 1)
        {
          double v36 = 1.0;
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) != 1)
          {
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 2)
            {
              if (Position <= 0.5) {
                double v36 = Position + Position;
              }
              else {
                double v36 = 1.0;
              }
              goto LABEL_51;
            }
            double v36 = Position;
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 3)
            {
              double v42 = 1.0;
              BOOL v43 = Position < 0.5;
              double v45 = Position + Position + -1.0;
              goto LABEL_79;
            }
          }
          goto LABEL_51;
        }
        if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0))
        {
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), &v54, 0.0);
          double v36 = 1.0 - Position + v40;
          goto LABEL_51;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 1) {
          goto LABEL_49;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 2)
        {
          double v42 = 1.0;
          BOOL v43 = Position < 0.5;
          double v44 = 1.0 - Position;
LABEL_78:
          double v45 = v44 + v44;
LABEL_79:
          if (v43) {
            double v36 = v42;
          }
          else {
            double v36 = v45;
          }
          goto LABEL_51;
        }
        double v36 = Position;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 3)
        {
          double v37 = 1.0;
          BOOL v38 = Position < 0.5;
          double v39 = 1.0 - (Position + Position);
LABEL_84:
          if (v38) {
            double v36 = v39;
          }
          else {
            double v36 = v37;
          }
        }
      }
      else
      {
        if (var3 != 126)
        {
          double v36 = Position;
          goto LABEL_51;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1096), MEMORY[0x1E4F1FA48], 0.0) == 1)
        {
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0))
          {
            double v36 = 0.0;
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) != 1)
            {
              if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 2)
              {
                double v37 = 0.0;
                BOOL v38 = Position < 0.5;
                double v39 = 1.0 - (Position + Position);
                goto LABEL_84;
              }
              double v36 = Position;
              if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 3)
              {
                double v42 = 0.0;
                BOOL v43 = Position < 0.5;
                double v44 = 1.0 - Position;
                goto LABEL_78;
              }
            }
            goto LABEL_51;
          }
LABEL_49:
          double v36 = 1.0 - Position;
          goto LABEL_51;
        }
        if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0))
        {
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), &v54, 0.0);
          double v36 = Position - v41;
          goto LABEL_51;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 2)
        {
          if (Position > 0.5) {
            double v36 = Position + Position + -1.0;
          }
          else {
            double v36 = 0.0;
          }
          goto LABEL_51;
        }
        double v36 = Position;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 3)
        {
          double v37 = 0.0;
          BOOL v38 = Position < 0.5;
          double v39 = Position + Position;
          goto LABEL_84;
        }
      }
LABEL_51:
      Positiouint64_t n = CurveValueForNode + v34 * v36;
      goto LABEL_52;
    }
  }
  a5 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1352), MEMORY[0x1E4F1FA48], 0.0) == 8) {
    return 1.0;
  }
  return a5;
}

void sub_1B7B92D6C(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double OZWriteOnBehavior::getPosition(OZWriteOnBehavior *this, const CMTime *a2, const CMTime *a3)
{
  uint64_t v6 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime v54 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v53 = 0.0;
  double v7 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1352), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(void *__return_ptr, OZWriteOnBehavior *))(*(void *)this + 608))(v51, this);
  if (ValueAsInt == 7)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1608), a2, 0.0);
    return v9;
  }
  else if ((*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 336))(this))
  {
    CMTime v50 = *v6;
    CMTime v49 = v52;
    uint64_t v10 = (*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v47);
    CMTime time1 = v49;
    *(__n128 *)&time2.value = v47;
    time2.epoch = v48;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v50);
    CMTime v49 = *a3;
    CMTime time1 = v50;
    CMTime time2 = *v6;
    if (CMTimeCompare(&time1, &time2) < 1)
    {
      double v53 = 1.0;
    }
    else
    {
      switch(ValueAsInt)
      {
        case 0:
          operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)v46);
          double v11 = (CMTime *)v46;
          goto LABEL_20;
        case 1:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1912), MEMORY[0x1E4F1FA48], 0.0))
          {
            operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&time);
            Float64 Seconds = CMTimeGetSeconds(&time);
            double v13 = cos((Seconds + 2.0) * 1.57079633);
            double v14 = 1.0;
            goto LABEL_16;
          }
          operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&v43);
          double v27 = CMTimeGetSeconds(&v43);
          double v53 = v27;
          double v28 = 0.0;
          double v29 = 1.0;
          goto LABEL_26;
        case 2:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1912), MEMORY[0x1E4F1FA48], 0.0))
          {
            operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&v42);
            Float64 v15 = CMTimeGetSeconds(&v42);
            double v16 = sin(v15 * 1.57079633);
            goto LABEL_30;
          }
          operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&v41);
          double v27 = CMTimeGetSeconds(&v41);
          double v53 = v27;
          double v28 = 1.0;
          double v29 = 0.0;
          goto LABEL_26;
        case 3:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1912), MEMORY[0x1E4F1FA48], 0.0))
          {
            operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&v40);
            Float64 v17 = CMTimeGetSeconds(&v40);
            double v16 = (cos((v17 + 1.0) * 3.14159265) + 1.0) * 0.5;
LABEL_30:
            double v53 = v16;
          }
          else
          {
            operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&v39);
            double v27 = CMTimeGetSeconds(&v39);
            double v53 = v27;
            double v28 = 0.5;
            double v29 = 0.5;
LABEL_26:
            PCMath::easeInOut(&v53, v27, v28, v29, 0.0, 1.0, 0, v26);
          }
          break;
        case 4:
          operator*(&v50, &v54, 0.5);
          CMTime time1 = v49;
          CMTime time2 = v54;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
            operator*((long long *)&v54.value, (uint64_t)&v49, (uint64_t)&v38);
            double v16 = 1.0 / CMTimeGetSeconds(&v38);
          }
          else
          {
            operator*((long long *)&v54.value, (uint64_t)&v49, (uint64_t)&v37);
            double v13 = -1.0 / CMTimeGetSeconds(&v37);
            double v14 = 2.0;
LABEL_16:
            double v16 = v13 + v14;
          }
          goto LABEL_30;
        case 5:
          CMTime v36 = v50;
          Float64 v18 = CMTimeGetSeconds(&v36);
          CMTime v35 = v49;
          double v19 = 1.0 / (v18 * v18);
          Float64 v20 = CMTimeGetSeconds(&v35);
          double v16 = v19 * (v20 * v20);
          goto LABEL_30;
        case 6:
          CMTime v34 = v50;
          Float64 v21 = CMTimeGetSeconds(&v34);
          CMTime time1 = v50;
          CMTime time2 = v49;
          double v22 = 1.0 / (v21 * v21);
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v33);
          Float64 v23 = CMTimeGetSeconds(&v33);
          double v16 = 1.0 - v22 * (v23 * v23);
          goto LABEL_30;
        case 8:
          operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&v45);
          double v11 = &v45;
LABEL_20:
          double v16 = CMTimeGetSeconds(v11);
          goto LABEL_30;
        case 9:
          long long v24 = (const void *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 320))(this);
          if (v24) {
          else
          }
            int v25 = 0;
          operator/((long long *)&v49.value, (uint64_t)&v50, (uint64_t)&v32);
          double v53 = CMTimeGetSeconds(&v32);
          OZFigTimeForChannelSeconds(&time1, v53, 0x40000);
          OZChannel::getValueAsDouble((OZChannel *)(v25 + 29256), &time1, 0.0);
          goto LABEL_30;
        default:
          break;
      }
    }
    double v30 = 1.0;
    if (v53 <= 1.0) {
      double v30 = v53;
    }
    if (v53 >= 0.0) {
      return v30;
    }
    else {
      return 0.0;
    }
  }
  return v7;
}

void OZWriteOnBehavior::solveWriteOnNode(OZWriteOnBehavior *this, OZChannelBase *a2, OZCurveNodeParam *a3)
{
  uint64_t v3 = *((void *)a3 + 19);
  uint64_t v4 = *((void *)a3 + 10);
  CMTime v11 = *(CMTime *)((unsigned char *)a3 + 5);
  long long v5 = *((_OWORD *)a3 + 6);
  *(_OWORD *)&v10.value = v5;
  v10.epoch = *((void *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    unint64_t v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = OZWriteOnBehavior::solveWriteOnNode(this, a2, &v10, *(double *)&v5, *(double *)(v4 + 8 * v9));
      CMTime v13 = v10;
      CMTime v12 = v11;
      *(double *)&long long v5 = PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v10);
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
}

OZChannelBase *OZWriteOnBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  __n128 result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 1352), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    int v5 = (int)result;
    uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      double v7 = *(char **)(v4 + 16);
      if (v7) {
      __n128 result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 1352), v6, 0.0);
      }
      if (v5 != result) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2)
      {
        for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
        {
          unint64_t v9 = *(char **)(i + 16);
          if (v9) {
          __n128 result = OZChannelBase::enable((OZChannelBase *)(v9 + 1608), v5 == 7, 1);
          }
        }
        return result;
      }
    }
    for (uint64_t j = *(void *)(a2 + 8); j != a2; uint64_t j = *(void *)(j + 8))
    {
      CMTime v11 = *(char **)(j + 16);
      if (v11) {
      __n128 result = OZChannelBase::enable((OZChannelBase *)(v11 + 1608), 1, 1);
      }
    }
  }
  return result;
}

BOOL OZWriteOnBehavior::isRebuildUIChannel(OZWriteOnBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 1352) == a2;
}

void OZWriteOnBehavior::setDefaultSpeedType(OZWriteOnBehavior *this, unsigned int a2)
{
  __n128 v2 = (OZChannelBase *)((char *)this + 1352);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), (double)a2);

  OZChannelBase::reset(v2, 0);
}

uint64_t OZWriteOnBehavior::reset(OZWriteOnBehavior *this)
{
  (*(void (**)(void *__return_ptr))(*(void *)this + 608))(v7);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1608), 0);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 1608), 4);
  OZChannel::setKeyframe((OZChannel *)((char *)this + 1608), MEMORY[0x1E4F1FA48], 0.0, 1);
  CMTime v5 = v8;
  OZBehavior::getFrameDuration(this, &v3);
  CMTime v10 = v5;
  *(__n128 *)&v9.value = v3;
  v9.epoch = v4;
  PC_CMTimeSaferSubtract(&v10, &v9, (uint64_t)&v6);
  return OZChannel::setKeyframe((OZChannel *)((char *)this + 1608), &v6, 100.0, 1);
}

uint64_t OZWriteOnBehavior::parseBegin(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1608), 0);
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::setValue((OZChannel *)((char *)this + 1912), MEMORY[0x1E4F1FA48], 1.0, 0);
  }

  return OZBehavior::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'OZWriteOnBehavior::parseBegin(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  return OZWriteOnBehavior::parseBegin((OZWriteOnBehavior *)((char *)this - 48), a2);
}

uint64_t OZWriteOnBehavior::getCurveNodeForChannel(OZWriteOnBehavior *this, OZChannel *a2)
{
  OZChannel::enumerateCurveProcessingNodes(a2, &v10);
  __n128 v3 = v10;
  CMTimeEpoch v4 = v11;
  if (v10 != v11)
  {
    uint64_t v5 = 0;
    while (1)
    {
      CMTime v6 = *(const void **)&v3[v5];
      if (v6)
      {
        if (v7)
        {
          if (v7[1] == this) {
            break;
          }
        }
      }
      v5 += 8;
      if (&v3[v5] == v4) {
        goto LABEL_7;
      }
    }
    if (v5)
    {
      uint64_t v8 = *(void *)&v3[v5 - 8];
      if (!v3) {
        return v8;
      }
      goto LABEL_8;
    }
  }
LABEL_7:
  uint64_t v8 = 0;
  if (v3) {
LABEL_8:
  }
    operator delete(v3);
  return v8;
}

char *OZWriteOnBehavior::willBake(OZWriteOnBehavior *this, PCTimeRange *a2)
{
  __n128 result = (char *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      uint64_t v5 = result;
      long long v11 = *(_OWORD *)((char *)a2 + 24);
      uint64_t v12 = *((void *)a2 + 5);
      uint64_t v6 = (*(uint64_t (**)(OZWriteOnBehavior *))(*(void *)this + 336))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v9);
      operator/(&v11, (uint64_t)&v9, (uint64_t)&time);
      unsigned int Seconds = CMTimeGetSeconds(&time);
      *((void *)this + 26std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((void *)this + 259);
      *((void *)this + 263) = *((void *)this + 262);
      uint64_t v7 = *((void *)a2 + 2);
      *(_OWORD *)((char *)this + 212std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *(_OWORD *)a2;
      *((void *)this + 267) = v7;
      OZWriteOnBehavior::getCurveNodeForChannel(this, (OZChannel *)(v5 + 28952));
      __n128 v9 = *(__n128 *)a2;
      uint64_t v10 = *((void *)a2 + 2);
      (*(void (**)(long long *__return_ptr, char *, __n128 *))(*((void *)v5 + 3619) + 328))(&v11, v5 + 28952, &v9);
      CMTimeMake(&v8, 1, 1);
      OZChannel::getSamples((uint64_t)(v5 + 28952));
      OZWriteOnBehavior::getCurveNodeForChannel(this, (OZChannel *)(v5 + 29104));
      __n128 v9 = *(__n128 *)a2;
      uint64_t v10 = *((void *)a2 + 2);
      (*(void (**)(long long *__return_ptr, char *, __n128 *))(*((void *)v5 + 3638) + 328))(&v11, v5 + 29104, &v9);
      CMTimeMake(&v8, 1, 1);
      __n128 result = (char *)OZChannel::getSamples((uint64_t)(v5 + 29104));
    }
  }
  *((unsigned char *)this + 32std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 1;
  return result;
}

__n128 OZWriteOnBehavior::didBake(OZWriteOnBehavior *this)
{
  *((void *)this + 26std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *((void *)this + 259);
  *((void *)this + 263) = *((void *)this + 262);
  uint64_t v1 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)((char *)this + 212std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 267) = *(void *)(v1 + 16);
  *((unsigned char *)this + 32std::vector<LiPolygon::PosEdge>::resize(this[11], 0) = 0;
  return result;
}

void OZ3DEngineApplyForceBehavior::OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZBehavior::OZBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(void *)this = &unk_1F1133280;
  *((void *)this + 2) = &unk_1F1133518;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1133770;
  *((void *)this + 42) = &unk_1F11337C8;
  PCString::PCString(&v7, "Fixed;Towards Object");
  PCString::PCString(&v6, "Direction Mode");
  OZChannelEnum::OZChannelEnum((OZ3DEngineApplyForceBehavior *)((char *)this + 536), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Direction");
  OZChannel3D::OZChannel3D((OZ3DEngineApplyForceBehavior *)((char *)this + 792), 0.0, 1.0, 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Target Object");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineApplyForceBehavior *)((char *)this + 1384), &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Strength");
  OZChannelDouble::OZChannelDouble((OZ3DEngineApplyForceBehavior *)((char *)this + 1544), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Instantaneous");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), 1, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  *((void *)this + 231) = 0;
}

void sub_1B7B93E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v17);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v16);
  OZChannel3D::~OZChannel3D(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZLocking::~OZLocking(v13);
  OZBehavior::~OZBehavior(v12);
  _Unwind_Resume(a1);
}

void sub_1B7B93EC8()
{
}

void OZ3DEngineApplyForceBehavior::OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this, const OZ3DEngineApplyForceBehavior *a2, char a3)
{
  OZBehavior::OZBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(void *)this = &unk_1F1133280;
  *((void *)this + 2) = &unk_1F1133518;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1133770;
  *((void *)this + 42) = &unk_1F11337C8;
  OZChannelEnum::OZChannelEnum((OZ3DEngineApplyForceBehavior *)((char *)this + 536), (const OZ3DEngineApplyForceBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannel3D::OZChannel3D((OZ3DEngineApplyForceBehavior *)((char *)this + 792), (const OZ3DEngineApplyForceBehavior *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 56));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineApplyForceBehavior *)((char *)this + 1384), (const OZ3DEngineApplyForceBehavior *)((char *)a2 + 1384), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1544), (const OZChannelBase *)((char *)a2 + 1544), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 193) = &unk_1F1100CF0;
  *((void *)this + 195) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), (const OZChannelBase *)((char *)a2 + 1696), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 231) = 0;
}

void sub_1B7B94040(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v6);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v5);
  OZChannel3D::~OZChannel3D(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZLocking::~OZLocking(v2);
  OZBehavior::~OZBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7B9409C()
{
}

void OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this)
{
  *(void *)this = &unk_1F1133280;
  *((void *)this + 2) = &unk_1F1133518;
  *((void *)this + ProCore_Impl::PCNSRefImpl::release(this + 6) = &unk_1F1133770;
  *((void *)this + 42) = &unk_1F11337C8;

  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1544));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZ3DEngineApplyForceBehavior *)((char *)this + 1384));
  *((void *)this + 99) = &unk_1F1106258;
  *((void *)this + 101) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1232));
  OZChannel2D::~OZChannel2D((OZ3DEngineApplyForceBehavior *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineApplyForceBehavior *)((char *)this + 536));
  *((void *)this + 42) = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 344));

  OZBehavior::~OZBehavior(this);
}

{
  uint64_t vars8;

  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this)
{
}

{
  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior((OZ3DEngineApplyForceBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior((OZ3DEngineApplyForceBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior((OZ3DEngineApplyForceBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEngineApplyForceBehavior::operator=(uint64_t a1, const void *a2)
{
  OZBehavior::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelFolder::operator=(a1 + 792);
  OZChannelBase::operator=(a1 + 928, (uint64_t)v5 + 928);
  OZChannelBase::operator=(a1 + 1080, (uint64_t)v5 + 1080);
  OZChannelBase::operator=(a1 + 1232, (uint64_t)v5 + 1232);
  OZChannelBase::operator=(a1 + 1544, (uint64_t)v5 + 1544);
  OZChannelBase::operator=(a1 + 1696, (uint64_t)v5 + 1696);

  return OZChanSceneNodeRef::operator=(a1 + 1384, (uint64_t)v5 + 1384);
}

void *OZ3DEngineApplyForceBehavior::didAddToNode(void *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
    if (this) {
      *(void *)(v3 + 328) = lpsrc;
    }
  }
  return this;
}

double OZ3DEngineApplyForceBehavior::fixedDirection@<D0>(OZ3DEngineApplyForceBehavior *this@<X0>, const CMTime *a2@<X1>, double *a3@<X8>)
{
  double v8 = 0.0;
  double v9 = 0.0;
  double v7 = 0.0;
  OZChannelScale3D::getValue((OZ3DEngineApplyForceBehavior *)((char *)this + 792), a2, &v9, &v8, &v7, 0.0);
  double v5 = v8;
  double result = v9;
  double v6 = v7;
  *a3 = v9;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

void OZ3DEngineApplyForceBehavior::magnitude(OZ3DEngineApplyForceBehavior *this, const CMTime *a2)
{
}

BOOL OZ3DEngineApplyForceBehavior::isImpulse(OZ3DEngineApplyForceBehavior *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1696), a2, 0.0) != 0;
}

uint64_t OZ3DEngineApplyForceBehavior::directionMode(OZ3DEngineApplyForceBehavior *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), a2, 0.0);
}

const void *OZ3DEngineApplyForceBehavior::targetObject(OZ3DEngineApplyForceBehavior *this)
{
  return OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 1384));
}

id OZ3DEngineApplyForceBehavior::UUID(OZ3DEngineApplyForceBehavior *this)
{
  id result = (id)*((void *)this + 231);
  if (!result)
  {
    id result = (id)[MEMORY[0x1E4F29128] UUID];
    *((void *)this + 231) = result;
  }
  return result;
}

BOOL OZ3DEngineApplyForceBehavior::isRebuildUIChannel(OZ3DEngineApplyForceBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2;
}

char *OZ3DEngineApplyForceBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  id result = (char *)OZChannel::getValueAsInt((OZChannel *)(a1 + 536), &v13, 0.0);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    int v5 = (int)result;
    while (1)
    {
      id result = *(char **)(v4 + 16);
      if (result)
      {
        if (result)
        {
          id result = (char *)OZChannel::getValueAsInt((OZChannel *)(result + 536), &v13, 0.0);
          if (result != v5) {
            break;
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2)
      {
        int v6 = 1;
        goto LABEL_9;
      }
    }
    int v6 = 0;
LABEL_9:
    for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    {
      double v8 = *(const void **)(i + 16);
      if (v8) {
      else
      }
        double v9 = 0;
      uint64_t v10 = (OZChannelBase *)(v9 + 1384);
      if (v6)
      {
        long long v11 = (OZChannelBase *)(v9 + 792);
        if (!v5)
        {
          OZChannelBase::setFlag(v10, 0x400000, 1);
          id result = (char *)OZChannelBase::resetFlag(v11, 0x400000, 1);
          continue;
        }
        OZChannelBase::resetFlag(v10, 0x400000, 1);
        uint64_t v12 = v11;
      }
      else
      {
        OZChannelBase::setFlag(v10, 0x400000, 1);
        uint64_t v12 = (OZChannelBase *)(v9 + 792);
      }
      id result = (char *)OZChannelBase::setFlag(v12, 0x400000, 1);
    }
  }
  return result;
}

uint64_t OZ3DEngineApplyForceBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  double v7 = (char *)(result + 336);
  for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
  {
    unint64_t v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7) {
        return result;
      }
      ++i;
    }
  }
  long long v11 = (char *)(result + 336);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  uint64_t v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  long long v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t non-virtual thunk to'OZ3DEngineApplyForceBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEngineApplyForceBehavior::getLockDependencies(a1 - 336, a2, a3, a4);
}

uint64_t OZ3DEngineApplyForceBehavior::getLockingGroups(OZ3DEngineApplyForceBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(OZ3DEngineApplyForceBehavior *))(*(void *)this + 336))(this);
  if (result) {
    return (*(uint64_t (**)(OZ3DEngineApplyForceBehavior *))(*(void *)this + 336))(this) + 1784;
  }
  return result;
}

uint64_t non-virtual thunk to'OZ3DEngineApplyForceBehavior::getLockingGroups(OZ3DEngineApplyForceBehavior *this)
{
  uint64_t v1 = (char *)this - 336;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 42) + 336))((char *)this - 336);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 336))(v1) + 1784;
  }
  return result;
}

uint64_t OZBehavior::didInsert(uint64_t this, OZSceneNode *a2, OZBehavior *a3)
{
  *(void *)(this + 328) = a2;
  return this;
}

uint64_t OZBehavior::willRemove(uint64_t this)
{
  *(void *)(this + 328) = 0;
  return this;
}

uint64_t non-virtual thunk to'OZ3DEngineApplyForceBehavior::getLockingID(OZ3DEngineApplyForceBehavior *this)
{
  return *((unsigned int *)this - 64);
}

void OZWriteOnCurveNode::OZWriteOnCurveNode(OZWriteOnCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *uint64_t v3 = &unk_1F1133848;
}

void OZWriteOnCurveNode::~OZWriteOnCurveNode(OZWriteOnCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZWriteOnCurveNode::solveNode(OZWriteOnCurveNode *this, const CMTime *a2, double a3, double a4)
{
  double v8 = (void *)*((void *)this + 1);
  if (v8) {
  unint64_t v9 = (OZChannelBase *)*((void *)this + 2);
  }

  return OZWriteOnBehavior::solveWriteOnNode((OZWriteOnBehavior *)v8, v9, a2, a3, a4);
}

void OZWriteOnCurveNode::solveNode(OZWriteOnCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4) {
  int v5 = (OZChannelBase *)*((void *)this + 2);
  }

  OZWriteOnBehavior::solveWriteOnNode((OZWriteOnBehavior *)v4, v5, a2);
}