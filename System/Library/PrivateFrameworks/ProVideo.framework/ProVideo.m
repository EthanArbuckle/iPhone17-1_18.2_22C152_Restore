uint64_t _GLOBAL__sub_I_OZRenderEngine_mm()
{
  uint64_t vars8;
}

void PCMutex::PCMutex(PCMutex *this)
{
  this->_vptr$PCMutex = (void **)&unk_1F10C4518;
  uint64_t v1 = pthread_mutex_init(&this->_Mutex, 0);
  if (v1)
  {
    uint64_t v2 = v1;
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"error: %s returned %d", &v5, "pthread_mutex_init(&_Mutex, NULL)", v2);
    PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCMutex.cpp");
    PCException::PCException(exception, &v5, &v4, 26);
    *(void *)exception = &unk_1F10C4560;
  }
}

void sub_1B73F4FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  if (v13) {
    __cxa_free_exception(v12);
  }
  _Unwind_Resume(a1);
}

void PCConditionVariable::PCConditionVariable(PCConditionVariable *this)
{
}

void _GLOBAL__sub_I_PAEHSCurvesEffect_mm()
{
  v0 = (_anonymous_namespace_::_RgbToSatCbCrEvaluator *)HGObject::operator new(0x30uLL);
}

void sub_1B73F50F4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::_RgbToSatCbCrEvaluator::_RgbToSatCbCrEvaluator(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this, int a2, float a3, float a4)
{
  *(void *)this = &unk_1F1093E68;
  HGObject::HGObject((_anonymous_namespace_::_RgbToSatCbCrEvaluator *)((char *)this + 8));
  *(void *)this = &unk_1F1093EA8;
  *((void *)this + 1) = &unk_1F1093EE8;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = a2;
  *((float *)this + 9) = a3;
  *((float *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = a4;
  HGFormatUtils::rowBytesHint(25, (const char *)0x121, v8);
  v9 = (HGObject *)HGObject::operator new(0x18uLL);
  HGObject::HGObject(v9);
  *(void *)v9 = &unk_1F1093F58;
  operator new[]();
}

void sub_1B73F53B0(_Unwind_Exception *a1)
{
  HGObject::~HGObject(v2);
  HGObject::operator delete(v2);
  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

int8x16_t anonymous namespace'::_RgbToSatCbCrEvaluator::evaluate(uint64_t a1, float *a2, int8x16_t *a3)
{
  float v4 = *a2;
  float v3 = a2[1];
  float v5 = a2[2];
  if (v3 >= v5) {
    float v6 = a2[2];
  }
  else {
    float v6 = a2[1];
  }
  if (v3 <= v5) {
    float v7 = a2[2];
  }
  else {
    float v7 = a2[1];
  }
  if (v4 >= v6) {
    float v8 = v6;
  }
  else {
    float v8 = *a2;
  }
  if (v4 > v7) {
    float v7 = *a2;
  }
  float v9 = 0.0;
  float v10 = v7 - v8;
  double v11 = (float)(v7 - v8);
  if ((float)(v7 - v8) < 0.0) {
    double v11 = -v11;
  }
  if (v11 >= 0.00000011920929)
  {
    float v12 = v4 - v7;
    if ((float)(v4 - v7) < 0.0) {
      float v12 = -(float)(v4 - v7);
    }
    if (v12 >= 0.00000011921)
    {
      float v17 = v3 - v7;
      if ((float)(v3 - v7) < 0.0) {
        float v17 = -(float)(v3 - v7);
      }
      float v18 = v4 - v8;
      if ((float)(v4 - v8) < 0.0) {
        float v18 = -(float)(v4 - v8);
      }
      double v19 = (float)((float)(v7 - v4) / v10);
      double v15 = (float)((float)(v7 - v3) / v10) + 3.0;
      if (v18 >= 0.00000011921) {
        double v15 = 5.0 - v19;
      }
      float v20 = v5 - v8;
      if (v20 < 0.0) {
        float v20 = -v20;
      }
      double v16 = 3.0 - (float)((float)(v7 - v5) / v10);
      if (v20 < 0.00000011921) {
        double v16 = v19 + 1.0;
      }
      BOOL v14 = v17 < 0.00000011921;
    }
    else
    {
      float v13 = v3 - v8;
      if (v13 < 0.0) {
        float v13 = -v13;
      }
      BOOL v14 = v13 < 0.00000011921;
      double v15 = 1.0 - (float)((float)(v7 - v3) / v10);
      double v16 = (float)((float)(v7 - v5) / v10) + 5.0;
    }
    if (!v14) {
      double v16 = v15;
    }
    float v21 = v16;
    float v22 = v21 / 6.0;
    float v9 = v22;
    if (v22 <= 1.0)
    {
      if (v22 >= 0.0) {
        goto LABEL_39;
      }
      float v23 = (float)(v22 + (float)(int)(float)-v22) + 1.0;
    }
    else
    {
      float v23 = v22 - (float)(int)v22;
    }
    float v9 = v23;
  }
LABEL_39:
  int v24 = *(_DWORD *)(a1 + 32);
  if (v9 <= 1.0)
  {
    if (v9 < 0.0) {
      float v9 = (float)(v9 + (float)(int)(float)-v9) + 1.0;
    }
  }
  else
  {
    float v9 = v9 - (float)(int)v9;
  }
  double v25 = v9 * 6.0;
  int v26 = (int)v25;
  *(double *)v28.i64 = v25 - floor(v25);
  v27.f32[0] = *(double *)v28.i64 + 0.0;
  v28.f32[0] = 1.0 - *(double *)v28.i64;
  switch(v26)
  {
    case 1:
      v27.i32[0] = 1.0;
      goto LABEL_46;
    case 2:
      v28.i32[0] = 0;
      v28.i32[1] = 1.0;
      v28.i32[2] = v27.i32[0];
      goto LABEL_48;
    case 3:
      v27.i32[0] = 0;
      v27.i32[1] = v28.i32[0];
      goto LABEL_57;
    case 4:
      v27.i32[1] = 0;
LABEL_57:
      v28.i32[0] = 1.0;
      goto LABEL_59;
    case 5:
      v27.i64[0] = COERCE_UNSIGNED_INT(1.0);
LABEL_59:
      v27.i64[1] = v28.u32[0];
      float32x4_t v28 = v27;
      if (!v24) {
        goto LABEL_60;
      }
      goto LABEL_49;
    default:
      v28.i32[0] = 1.0;
LABEL_46:
      v28.i32[1] = v27.i32[0];
      v28.i32[2] = 0;
LABEL_48:
      v28.i32[3] = 0;
      if (v24)
      {
LABEL_49:
        v29 = &dword_1EB9A3420;
        v30 = &dword_1EB9A341C;
        v31 = &dword_1EB9A3418;
        v32 = &dword_1EB9A3414;
        v33 = (__int32 *)&cc::matrix::rgb_to_YCbCr2020 + 3;
        if (v24 == 2) {
          v32 = &dword_1EB9A3518;
        }
        else {
          v33 = (__int32 *)&cc::matrix::rgb_to_YCbCr709 + 3;
        }
        if (v24 == 2)
        {
          v31 = &dword_1EB9A351C;
          v30 = &dword_1EB9A3520;
          v29 = &dword_1EB9A3524;
          v34 = &dword_1EB9A3528;
        }
        else
        {
          v34 = &dword_1EB9A3424;
        }
      }
      else
      {
LABEL_60:
        v34 = &dword_1EB9A3210;
        v29 = &dword_1EB9A320C;
        v30 = &dword_1EB9A3208;
        v31 = &dword_1EB9A3204;
        v32 = &dword_1EB9A3200;
        v33 = &dword_1EB9A31FC;
      }
      v35.i32[0] = *v33;
      v36.i32[0] = *v32;
      v37.i32[0] = *v31;
      v36.i32[1] = *v30;
      v35.i32[1] = *v29;
      v37.i32[1] = *v34;
      *(float32x2_t *)v28.f32 = vadd_f32(vadd_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v28.f32), v36), vmul_f32(*(float32x2_t *)v28.f32, v35)), vmul_laneq_f32(v37, v28, 2));
      int8x16_t result = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL);
      result.i32[0] = (__int32)*a3;
      result.i32[3] = HIDWORD(*(unsigned long long *)a3);
      *a3 = result;
      return result;
  }
}

void HGObject::HGObject(HGObject *this)
{
  *(void *)this = &unk_1F10CA7F8;
  *((_DWORD *)this + 2) = 1;
}

uint64_t HGFormatUtils::rowBytesHint(int a1, const char *a2, char *a3)
{
  unsigned int v3 = a2;
  int v5 = 0;
  uint64_t v6 = a1;
  unsigned int v7 = s_HGFormatInfos[8 * a1 + 1];
  if (v7 - 6403 <= 7)
  {
    if (((1 << (v7 - 3)) & 0xE9) != 0) {
      goto LABEL_11;
    }
    if (v7 == 6407)
    {
      int v5 = 1;
      if (a1 <= 41) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
  if (v7 == 32993 || v7 == 33319)
  {
LABEL_11:
    if (a1 <= 41) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  HGLogger::warning((HGLogger *)"componentsPerPixel -- unknown GL format", a2, a3);
  int v5 = 0;
  if (a1 <= 41)
  {
LABEL_17:
    unsigned int v9 = s_HGFormatInfos[8 * v6 + 3];
    if (v5) {
      return v9 * v3;
    }
    goto LABEL_13;
  }
LABEL_12:
  unsigned int v9 = 0;
  if (v5) {
    return v9 * v3;
  }
LABEL_13:
  if (a1 == 31) {
    return (4 * vcvtpd_u64_f64((double)v3 / 6.0) * v9 + 255) & 0xFFFFFF00;
  }
  else {
    return (v9 * v3 + 255) & 0xFFFFFF00;
  }
}

CMTime *_GLOBAL__sub_I_CMTimeAdditions_mm()
{
  CMTimeMake(&kPC_CMTimeOneSecond, 60, 60);
  CMTimeMake(&kPC_CMTimeOneMinute, 3600, 60);
  CMTimeMake(&kPC_CMTimeTenMinutes, 36000, 60);
  CMTimeMake(&kPC_CMTimeOneHour, 216000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeOneDay, 5184000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeNegativeOneDay, -5184000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeOneYear, 1892160000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeNegativeOneYear, -1892160000, 60);
  CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
  CMTime duration = start;
  CMTimeRangeMake(&kPC_CMTimeRangeIndefinite, &start, &duration);
  CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  v0 = (CMTime *)MEMORY[0x1E4F1FA10];
  CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  CMTimeRangeMake(&kPC_CMTimeRangeInfinite, &start, &duration);
  uint64_t v1 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime duration = *v0;
  CMTimeRangeMake(&kPC_CMTimeRangeAllNonNegative, &start, &duration);
  CMTime start = *(CMTime *)kPC_CMTimeNegativeOneYear;
  CMTime v3 = *(CMTime *)kPC_CMTimeOneYear;
  CMTimeMultiply(&duration, &v3, 2);
  CMTimeRangeMake(&kPC_CMTimeRangePlusAndMinusOneYear, &start, &duration);
  CMTime start = *(CMTime *)kPC_CMTimeNegativeOneDay;
  CMTime v3 = *(CMTime *)kPC_CMTimeOneDay;
  CMTimeMultiply(&duration, &v3, 2);
  CMTimeRangeMake(&kPC_CMTimeRangePlusAndMinusOneDay, &start, &duration);
  CMTime start = *v1;
  CMTime duration = *(CMTime *)kPC_CMTimeOneDay;
  CMTimeRangeMake(&kPC_CMTimeRangeOneDay, &start, &duration);
  CMTimeMake(&sStandardAliasList, 100, 2997);
  CMTimeMake(&stru_1EB9A26F0, 1001, 30000);
  CMTimeMake(&stru_1EB9A2708, 50, 2997);
  CMTimeMake(&stru_1EB9A2720, 1001, 60000);
  CMTimeMake(&stru_1EB9A2738, 125, 2997);
  CMTimeMake(&stru_1EB9A2750, 1001, 24000);
  CMTimeMake(&sWorkaroundAliasList, 100, 2397);
  CMTimeMake(&stru_1EB9A2780, 1001, 24000);
  CMTimeMake(&stru_1EB9A2798, 100, 2398);
  return CMTimeMake(&stru_1EB9A27B0, 1001, 24000);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  CMTime v5 = *start;
  CMTime v4 = *duration;
  return (CMTimeRange *)CMTimeRangeSaferMake(&v5, &v4, (uint64_t)retstr);
}

CMTime *CMTimeRangeSaferMake@<X0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime v5 = *a1;
  CMTime v4 = *a2;
  return _CMTimeRangeSaferMake(&v5, &v4, a3);
}

CMTime *_CMTimeRangeSaferMake@<X0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(CMTime *)a3 = *a1;
  uint64_t v6 = a3 + 24;
  long long v7 = *(_OWORD *)&a2->value;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&a2->value;
  CMTimeEpoch epoch = a2->epoch;
  *(void *)(a3 + 4pthread_cond_init((pthread_cond_t *)this, 0) = epoch;
  long long v17 = v7;
  CMTimeEpoch v18 = epoch;
  if (PC_CMTimeIsNegative((uint64_t)&v17))
  {
    uint64_t v9 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)uint64_t v6 = *MEMORY[0x1E4F1FA48];
    *(void *)(v6 + 16) = *(void *)(v9 + 16);
  }
  CMTime lhs = *a1;
  CMTime rhs = *a2;
  int8x16_t result = CMTimeAdd(&v16, &lhs, &rhs);
  if ((v16.flags & 0x1D) == 1)
  {
    CMTime v12 = *a1;
    CMTime v11 = *a2;
    int8x16_t result = CMTimeAdd(&v13, &v12, &v11);
    if ((v13.flags & 2) != 0 && ((a2->flags | a1->flags) & 2) == 0)
    {
      SimpCMTime(a3);
      return (CMTime *)SimpCMTime(v6);
    }
  }
  return result;
}

BOOL PC_CMTimeIsNegative(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 12) & 0x1D) == 1) {
    return *(void *)a1 >> 63 != *(_DWORD *)(a1 + 8) >> 31;
  }
  else {
    return (~*(_DWORD *)(a1 + 12) & 9) == 0;
  }
}

uint64_t _GLOBAL__sub_I_FigTimeAdditions_mm()
{
  long long v0 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  kFigTimeRangeNULL = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)algn_1EB9A36B0 = v0;
  xmmword_1EB9A36C0 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  long long v4 = *MEMORY[0x1E4F1F9F8];
  uint64_t v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v2 = v4;
  uint64_t v3 = v5;
  FigTimePairMake((uint64_t)&v4, (uint64_t)&v2, (uint64_t)&kFigTimePairInvalid);
  long long v4 = *MEMORY[0x1E4F1F9F0];
  uint64_t v5 = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
  long long v2 = v4;
  uint64_t v3 = v5;
  return FigTimePairMake((uint64_t)&v4, (uint64_t)&v2, (uint64_t)&kFigTimePairIndefinite);
}

uint64_t SimpCMTime(uint64_t result)
{
  if ((*(_DWORD *)(result + 12) & 0x1D) == 1)
  {
    uint64_t v1 = *(int *)(result + 8);
    if (v1)
    {
      uint64_t v2 = *(int *)(result + 8);
      uint64_t v3 = *(void *)result;
      do
      {
        uint64_t v4 = v2;
        uint64_t v2 = v3 % v2;
        uint64_t v3 = v4;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = *(void *)result;
    }
    if (v4 < 0) {
      uint64_t v4 = -v4;
    }
    if ((unint64_t)v4 >= 2)
    {
      *(uint64_t *)result /= v4;
      *(_DWORD *)(result + 8) = v1 / v4;
    }
  }
  return result;
}

uint64_t SimpCMTime(CMTime *a1)
{
  if ((a1->flags & 0x1D) != 1) {
    return 0;
  }
  uint64_t timescale = a1->timescale;
  if (timescale)
  {
    uint64_t v2 = a1->timescale;
    CMTimeValue value = a1->value;
    do
    {
      CMTimeValue v4 = v2;
      uint64_t v2 = value % v2;
      CMTimeValue value = v4;
    }
    while (v2);
  }
  else
  {
    CMTimeValue v4 = a1->value;
  }
  if (v4 < 0) {
    CMTimeValue v4 = -v4;
  }
  if ((unint64_t)v4 < 2) {
    return 0;
  }
  a1->value /= v4;
  a1->uint64_t timescale = timescale / v4;
  return 1;
}

uint64_t FigTimePairMake@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(void *)(a3 + 16) = *(void *)(result + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(void *)(a3 + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 16);
  if ((*(_DWORD *)(a3 + 12) & 0x1F) != 3) {
    int8x16_t result = SimpCMTime(a3);
  }
  if ((*(_DWORD *)(a3 + 36) & 0x1F) != 3)
  {
    return SimpCMTime(a3 + 24);
  }
  return result;
}

double _GLOBAL__sub_I_cc_color_cpp()
{
  dword_1EB9A3210 = -1113159905;
  *(_OWORD *)&cc::matrix::rgb_to_YCbCr601 = M_rgb2YCbCr601;
  *(_OWORD *)&dword_1EB9A3200 = unk_1B7E7B0D0;
  dword_1EB9A3424 = -1120155095;
  cc::matrix::rgb_to_YCbCr709 = M_rgb_to_YCbCr709;
  *(_OWORD *)&dword_1EB9A3414 = unk_1B7E7B0F4;
  dword_1EB9A3528 = -1121667137;
  cc::matrix::rgb_to_YCbCr2020 = M_rgb_to_YCbCr2020;
  *(_OWORD *)&dword_1EB9A3518 = unk_1B7E7B118;
  dword_1EB9A33AC = -1113159905;
  cc::matrix::YCbCr601_to_rgb = M_rgb2YCbCr601;
  unk_1EB9A339C = unk_1B7E7B0D0;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr601_to_rgb);
  cc::matrix::YCbCr709_to_rgb = cc::matrix::rgb_to_YCbCr709;
  *(_OWORD *)algn_1EB9A33F0 = *(_OWORD *)&dword_1EB9A3414;
  dword_1EB9A3400 = dword_1EB9A3424;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr709_to_rgb);
  cc::matrix::YCbCr2020_to_rgb = cc::matrix::rgb_to_YCbCr2020;
  unk_1EB9A3494 = *(_OWORD *)&dword_1EB9A3518;
  dword_1EB9A34A4 = dword_1EB9A3528;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr2020_to_rgb);
  cc::matrix::YCbCr601_to_709 = cc::matrix::YCbCr601_to_rgb;
  unk_1EB9A3378 = unk_1EB9A339C;
  dword_1EB9A3388 = dword_1EB9A33AC;
  cc_matrix::mul((cc_matrix *)&cc::matrix::YCbCr601_to_709, (const cc_matrix *)&cc::matrix::rgb_to_YCbCr709);
  cc::matrix::YCbCr709_to_601 = cc::matrix::YCbCr601_to_709;
  unk_1EB9A33CC = unk_1EB9A3378;
  dword_1EB9A33DC = dword_1EB9A3388;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr709_to_601);
  cc::matrix::YCbCr601_to_2020 = cc::matrix::YCbCr601_to_rgb;
  unk_1EB9A34C0 = unk_1EB9A339C;
  dword_1EB9A34D0 = dword_1EB9A33AC;
  cc_matrix::mul((cc_matrix *)&cc::matrix::YCbCr601_to_2020, (const cc_matrix *)&cc::matrix::rgb_to_YCbCr2020);
  cc::matrix::YCbCr2020_to_601 = cc::matrix::YCbCr601_to_2020;
  unk_1EB9A3444 = unk_1EB9A34C0;
  dword_1EB9A3454 = dword_1EB9A34D0;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr2020_to_601);
  cc::matrix::YCbCr709_to_2020 = cc::matrix::YCbCr709_to_rgb;
  unk_1EB9A34E8 = *(_OWORD *)algn_1EB9A33F0;
  dword_1EB9A34F8 = dword_1EB9A3400;
  cc_matrix::mul((cc_matrix *)&cc::matrix::YCbCr709_to_2020, (const cc_matrix *)&cc::matrix::rgb_to_YCbCr2020);
  cc::matrix::YCbCr2020_to_709 = cc::matrix::YCbCr709_to_2020;
  unk_1EB9A346C = unk_1EB9A34E8;
  dword_1EB9A347C = dword_1EB9A34F8;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr2020_to_709);
  dword_1EB9A3610 = 1050627350;
  cc::matrix::rgb2YIQ = M_rgb2YIQ;
  unk_1EB9A3600 = unk_1B7E7B13C;
  dword_1EB9A35E4 = 1071263829;
  cc::matrix::YIQ2rgb = M_YIQ2rgb;
  unk_1EB9A35D4 = unk_1B7E7B160;
  cc::matrix::rgb_to_XYZ = xmmword_1B7E7AF90;
  *(_OWORD *)algn_1EB9A3250 = xmmword_1B7E7AFA0;
  dword_1EB9A3260 = 1064519457;
  dword_1EB9A3234 = 1064519457;
  cc::matrix::XYZ_to_rgb = xmmword_1B7E7AF90;
  unk_1EB9A3224 = xmmword_1B7E7AFA0;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_to_rgb);
  cc::matrix::rgb_to_XYZ_D50 = xmmword_1B7E7AFB0;
  *(_OWORD *)algn_1EB9A3350 = xmmword_1B7E7AFC0;
  dword_1EB9A3360 = 1060557840;
  dword_1EB9A3304 = 1060557840;
  cc::matrix::XYZ_D50_to_rgb = xmmword_1B7E7AFB0;
  unk_1EB9A32F4 = xmmword_1B7E7AFC0;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_D50_to_rgb);
  cc::matrix::Bradford = xmmword_1B7E7AFD0;
  *(_OWORD *)algn_1EB9A3630 = xmmword_1B7E7AFE0;
  dword_1EB9A3640 = 1065601519;
  dword_1EB9A3664 = 1065601519;
  cc::matrix::iBradford = xmmword_1B7E7AFD0;
  unk_1EB9A3654 = xmmword_1B7E7AFE0;
  cc_matrix::invert((cc_matrix *)&cc::matrix::iBradford);
  cc::matrix::XYZ_C = xmmword_1B7E7AFF0;
  unk_1EB9A3540 = xmmword_1B7E7B000;
  dword_1EB9A3550 = 0;
  cc::matrix::XYZ_D50 = xmmword_1B7E7B010;
  *(_OWORD *)algn_1EB9A3570 = xmmword_1B7E7B020;
  dword_1EB9A3580 = 0;
  cc::matrix::XYZ_D65 = xmmword_1B7E7B030;
  unk_1EB9A35A0 = xmmword_1B7E7B040;
  dword_1EB9A35B0 = 0;
  cc::matrix::XYZ_C_to_D50 = xmmword_1B7E7B050;
  unk_1EB9A3280 = xmmword_1B7E7B060;
  dword_1EB9A3290 = 1060162983;
  dword_1EB9A32B4 = 1060162983;
  cc::matrix::XYZ_D50_to_C = xmmword_1B7E7B050;
  unk_1EB9A32A4 = xmmword_1B7E7B060;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_D50_to_C);
  cc::matrix::XYZ_D50_to_D65 = xmmword_1B7E7B070;
  *(_OWORD *)algn_1EB9A32D0 = xmmword_1B7E7B080;
  dword_1EB9A32E0 = 1068120700;
  dword_1EB9A3334 = 1068120700;
  cc::matrix::XYZ_D65_to_D50 = xmmword_1B7E7B070;
  unk_1EB9A3324 = xmmword_1B7E7B080;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_D65_to_D50);
  unk_1EB9A2620 = xmmword_1B7E7B0A0;
  dword_1EB9A2630 = 1060645296;
  dword_1EB9A2654 = 1060645296;
  unk_1EB9A2644 = xmmword_1B7E7B0A0;
  *(void *)&double result = 1170939904;
  return result;
}

float cc_matrix::invert(cc_matrix *this)
{
  float v2 = *(float *)this;
  float result = *((float *)this + 1);
  float v4 = *((float *)this + 2);
  float v3 = *((float *)this + 3);
  float v5 = *((float *)this + 4);
  float v6 = *((float *)this + 5);
  float v8 = *((float *)this + 6);
  float v7 = *((float *)this + 7);
  float v9 = *((float *)this + 8);
  float v10 = *(float *)this * v5;
  float v11 = 0.0;
  if ((float)(v10 * v9) >= 0.0) {
    float v12 = (float)(v10 * v9) + 0.0;
  }
  else {
    float v12 = 0.0;
  }
  if ((float)(v10 * v9) < 0.0) {
    float v11 = (float)(v10 * v9) + 0.0;
  }
  float v13 = v4 * (float)(v3 * v7);
  float v14 = -0.0;
  if (v13 >= 0.0) {
    float v15 = v4 * (float)(v3 * v7);
  }
  else {
    float v15 = -0.0;
  }
  float v16 = v12 + v15;
  if (v13 >= 0.0) {
    float v13 = -0.0;
  }
  float v17 = v11 + v13;
  float v18 = result * v8;
  float v19 = v6 * (float)(result * v8);
  if (v19 >= 0.0) {
    float v20 = v6 * (float)(result * v8);
  }
  else {
    float v20 = -0.0;
  }
  float v21 = v20 + v16;
  if (v19 >= 0.0) {
    float v19 = -0.0;
  }
  float v22 = v19 + v17;
  float v23 = v4 * (float)-(float)(v8 * v5);
  if (v23 >= 0.0) {
    float v24 = v4 * (float)-(float)(v8 * v5);
  }
  else {
    float v24 = -0.0;
  }
  float v25 = v24 + v21;
  if (v23 >= 0.0) {
    float v23 = -0.0;
  }
  float v26 = v23 + v22;
  float v27 = (float)-(float)(v3 * result) * v9;
  if (v27 >= 0.0) {
    float v28 = (float)-(float)(v3 * result) * v9;
  }
  else {
    float v28 = -0.0;
  }
  float v29 = v28 + v25;
  if (v27 >= 0.0) {
    float v27 = -0.0;
  }
  float v30 = v27 + v26;
  float v31 = v6 * (float)-(float)(v2 * v7);
  if (v31 >= 0.0) {
    float v32 = v6 * (float)-(float)(v2 * v7);
  }
  else {
    float v32 = -0.0;
  }
  float v33 = v32 + v29;
  if (v31 < 0.0) {
    float v14 = v6 * (float)-(float)(v2 * v7);
  }
  float v34 = v14 + v30;
  float v35 = v33 + v34;
  double v36 = (float)(v33 + v34);
  if ((float)(v33 + v34) < 0.0) {
    double v36 = -v36;
  }
  if (v36 >= 0.00000011920929)
  {
    float v37 = v35 / (float)(v33 - v34);
    if (v37 < 0.0) {
      float v37 = -v37;
    }
    if (v37 >= 1.0e-15)
    {
      float v38 = 1.0 / v35;
      *(float *)this = (float)((float)(v5 * v9) - (float)(v6 * v7)) * v38;
      *((float *)this + 1) = -(float)((float)((float)(result * v9) - (float)(v4 * v7)) * v38);
      *((float *)this + 2) = (float)((float)(result * v6) - (float)(v4 * v5)) * v38;
      *((float *)this + 3) = -(float)((float)((float)(v3 * v9) - (float)(v6 * v8)) * v38);
      *((float *)this + 4) = (float)((float)(v2 * v9) - (float)(v4 * v8)) * v38;
      *((float *)this + 5) = -(float)((float)((float)(v2 * v6) - (float)(v4 * v3)) * v38);
      float result = (float)(v10 - (float)(result * v3)) * v38;
      *((float *)this + 6) = (float)((float)(v3 * v7) - (float)(v5 * v8)) * v38;
      *((float *)this + 7) = -(float)((float)((float)(v2 * v7) - v18) * v38);
      *((float *)this + 8) = result;
    }
  }
  return result;
}

double cc_matrix::mul(cc_matrix *this, const cc_matrix *a2)
{
  uint64_t v2 = 0;
  int v13 = 1065353216;
  float v3 = (float *)v12;
  float v4 = this;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v6 = 0;
      float v7 = (float *)((char *)a2 + 4 * i);
      *float v3 = 0.0;
      float v8 = 0.0;
      do
      {
        float v9 = *v7;
        v7 += 3;
        float v8 = v8 + (float)(*(float *)((char *)v4 + v6) * v9);
        *float v3 = v8;
        v6 += 4;
      }
      while (v6 != 12);
      ++v3;
    }
    ++v2;
    float v4 = (cc_matrix *)((char *)v4 + 12);
  }
  while (v2 != 3);
  double result = *(double *)v12;
  long long v11 = v12[1];
  *(_OWORD *)this = v12[0];
  *((_OWORD *)this + 1) = v11;
  *((_DWORD *)this + 8) = v13;
  return result;
}

double _GLOBAL__sub_I_OZFontUtilities_mm()
{
  OZFontWeightUltraLight = *MEMORY[0x1E4F43948];
  OZFontWeightThin = *MEMORY[0x1E4F43938];
  OZFontWeightLight = *MEMORY[0x1E4F43918];
  OZFontWeightRegular = *MEMORY[0x1E4F43928];
  OZFontWeightMedium = *MEMORY[0x1E4F43920];
  OZFontWeightSemibold = *MEMORY[0x1E4F43930];
  OZFontWeightBold = *MEMORY[0x1E4F43908];
  OZFontWeightHeavy = *MEMORY[0x1E4F43910];
  double result = *MEMORY[0x1E4F43900];
  OZFontWeightBlack = *MEMORY[0x1E4F43900];
  return result;
}

double GetHostTime(void)
{
  if (*(double *)&GetHostTime(void)::timeBaseFactor == 0.0 && !mach_timebase_info(&info))
  {
    LODWORD(vpthread_cond_init((pthread_cond_t *)this, 0) = info.numer;
    LODWORD(v1) = info.denom;
    *(double *)&GetHostTime(void)::timeBaseFactor = (double)v0 / (double)v1 / 1000000000.0;
  }
  return *(double *)&GetHostTime(void)::timeBaseFactor * (double)mach_absolute_time();
}

id StringFormatPMR(NSString *a1, NSNumber *a2, NSString *a3)
{
  float v5 = a1;
  uint64_t v6 = a2;
  float v7 = a3;
  id v8 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v8 setDateFormat:@"yyyy-MM-dd 'at' HH:mm:ss"];
  float v9 = [MEMORY[0x1E4F1C9C8] date];
  float v10 = [v8 stringFromDate:v9];

  long long v11 = NSString;
  [(NSNumber *)v6 doubleValue];
  int v13 = objc_msgSend(v11, "stringWithFormat:", @"%f", v12);
  float v14 = [v11 stringWithFormat:@"<Measurement key=\"%@\" value=\"%@\" comment=\"%@\" timestamp=\"%@\"/>", v5, v13, v7, v10];

  return v14;
}

void sub_1B73F6A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id StringFormatJSON(NSString *a1, NSNumber *a2)
{
  float v3 = a1;
  [(NSNumber *)a2 doubleValue];
  float v5 = objc_msgSend(NSString, "stringWithFormat:", @"%f", v4);
  uint64_t v6 = [NSString stringWithFormat:@"\"%@\": %@", v3, v5];

  return v6;
}

void sub_1B73F6B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id StringFormatTEXT(NSString *a1, NSNumber *a2, NSString *a3)
{
  float v5 = a1;
  uint64_t v6 = a2;
  float v7 = a3;
  id v8 = NSString;
  [(NSNumber *)v6 doubleValue];
  float v10 = objc_msgSend(v8, "stringWithFormat:", @"%f", v9);
  long long v11 = [v8 stringWithFormat:@"%@: %@ | %@", v5, v10, v7];

  return v11;
}

void sub_1B73F6BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PerfTimer::Start(PerfTimer *this)
{
  this->_CMTime start = GetHostTime();
}

void PerfTimer::PerfTimer(PerfTimer *this)
{
  this->_CMTime start = 0.0;
  this->_end = 0.0;
  this->_CMTime start = GetHostTime();
}

double PerfTimer::End(PerfTimer *this)
{
  double HostTime = GetHostTime();
  this->_end = HostTime;
  return HostTime - this->_start;
}

void PVPerfStats::LogString(PVPerfStats *this, NSString *a2, ...)
{
  va_start(va, a2);
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  float v3 = a2;
  uint64_t v4 = (void *)[[NSString alloc] initWithFormat:v3 arguments:va];
  float v5 = v4;
  switch(PVPerfStats::_logOutput)
  {
    case 0:
      puts((const char *)[v4 UTF8String]);
      break;
    case 1:
      [*((id *)this + 79) appendString:v4];
      [*((id *)this + 79) appendString:@"\n"];
      break;
    case 2:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v7 = [v5 cStringUsingEncoding:4];
        _os_log_impl(&dword_1B73F3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
      break;
    case 3:
      NSLog(&stru_1F119C630.isa, v4);
      break;
    default:
      break;
  }
}

void sub_1B73F6DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PVPerfStats::FrameStats::FrameStats(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 48) = 0;
  *(_WORD *)(this + 56) = 0;
  *(void *)(this + 72) = 0;
  *(void *)(this + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(this + 64) = 0;
  return this;
}

void PVPerfStats::FrameStats::Init(PVPerfStats::FrameStats *this, int a2, int a3)
{
  float v3 = (long long *)MEMORY[0x1E4F1FA48];
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  long long v4 = *v3;
  *((void *)this + 3) = *((void *)v3 + 2);
  *(_OWORD *)((char *)this + 8) = v4;
  PVPerfStats::FrameStats::Clear(this);
}

void PVPerfStats::FrameStats::Clear(PVPerfStats::FrameStats *this)
{
  *((double *)this + 4) = GetHostTime();
  float v3 = (void **)((char *)this + 64);
  uint64_t v2 = (char *)*((void *)this + 8);
  *((void *)this + 9) = v2;
  if (*(_DWORD *)this)
  {
    unint64_t v4 = 0;
    float v5 = (void *)((char *)this + 80);
    do
    {
      if ((unint64_t)v2 >= *v5)
      {
        uint64_t v7 = (char *)*v3;
        uint64_t v8 = (v2 - (unsigned char *)*v3) >> 3;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v5 - (void)v7;
        if (v10 >> 2 > v9) {
          unint64_t v9 = v10 >> 2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 80, v11);
          uint64_t v7 = (char *)*((void *)this + 8);
          uint64_t v2 = (char *)*((void *)this + 9);
        }
        else
        {
          uint64_t v12 = 0;
        }
        int v13 = &v12[8 * v8];
        *(void *)int v13 = 0;
        uint64_t v6 = v13 + 8;
        while (v2 != v7)
        {
          uint64_t v14 = *((void *)v2 - 1);
          v2 -= 8;
          *((void *)v13 - 1) = v14;
          v13 -= 8;
        }
        *((void *)this + 8) = v13;
        *((void *)this + 9) = v6;
        *((void *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = &v12[8 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)uint64_t v2 = 0;
        uint64_t v6 = v2 + 8;
      }
      *((void *)this + 9) = v6;
      ++v4;
      uint64_t v2 = v6;
    }
    while (v4 < *(unsigned int *)this);
  }
}

__n128 PVPerfStats::FrameStats::Init(PVPerfStats::FrameStats *this, int a2, int a3, CMTime *a4)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  long long v4 = *(_OWORD *)&a4->value;
  *((void *)this + 3) = a4->epoch;
  *(_OWORD *)((char *)this + 8) = v4;
  PVPerfStats::FrameStats::Clear(this);
  return result;
}

uint64_t PVPerfStats::FrameStats::GetSize(PVPerfStats::FrameStats *this)
{
  return *(unsigned int *)this;
}

double PVPerfStats::FrameStats::GetValueForIndex(PVPerfStats::FrameStats *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (a2 >= (unint64_t)((*((void *)this + 9) - v2) >> 3)) {
    return INFINITY;
  }
  else {
    return *(double *)(v2 + 8 * a2);
  }
}

uint64_t PVPerfStats::FrameStats::SetValueForIndex(uint64_t this, unsigned int a2, double a3)
{
  uint64_t v3 = *(void *)(this + 64);
  if (a2 < (unint64_t)((*(void *)(this + 72) - v3) >> 3)) {
    *(double *)(v3 + 8 * a2) = a3;
  }
  return this;
}

double PVPerfStats::FrameStats::MarkEndTimeForIndex(PVPerfStats::FrameStats *this, unsigned int a2)
{
  uint64_t v2 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3))
  {
    double HostTime = GetHostTime();
    *((double *)this + 5) = HostTime;
    double result = HostTime - *((double *)this + 4);
    *(double *)(*((void *)this + 8) + 8 * v2) = result;
  }
  return result;
}

double PVPerfStats::FrameStats::operator-@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_OWORD *)a3 + 1) = v5;
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)a3 + 42) = *(_OWORD *)(a1 + 42);
  *((void *)a3 + 8) = 0;
  uint64_t v6 = (double **)(a3 + 16);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a3 + 8, *(const void **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
  uint64_t v8 = *a3;
  if (v8)
  {
    unint64_t v9 = *(double **)(a2 + 64);
    uint64_t v10 = *v6;
    do
    {
      double v11 = *v9++;
      double result = *v10 - v11;
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

double PVPerfStats::FrameStats::operator*@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_OWORD *)a3 + 1) = v5;
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)a3 + 42) = *(_OWORD *)(a1 + 42);
  *((void *)a3 + 8) = 0;
  uint64_t v6 = (double **)(a3 + 16);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a3 + 8, *(const void **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
  uint64_t v8 = *a3;
  if (v8)
  {
    unint64_t v9 = *(double **)(a2 + 64);
    uint64_t v10 = *v6;
    do
    {
      double v11 = *v9++;
      double result = v11 * *v10;
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *PVPerfStats::FrameStats::operator/@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int *a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_OWORD *)a3 + 1) = v5;
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)a3 + 42) = *(_OWORD *)(a1 + 42);
  *((void *)a3 + 8) = 0;
  uint64_t v6 = (double **)(a3 + 16);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  double result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a3 + 8, *(const void **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
  uint64_t v8 = *a3;
  if (v8)
  {
    unint64_t v9 = *v6;
    do
    {
      double *v9 = *v9 / (double)a2;
      ++v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *PVPerfStats::FrameStats::min@<X0>(PVPerfStats::FrameStats *this@<X0>, const PVPerfStats::FrameStats *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 42) = *(_OWORD *)((char *)this + 42);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a3 + 64) = 0;
  uint64_t v6 = (double **)(a3 + 64);
  double result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a3 + 64), *((const void **)this + 8), *((void *)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3);
  uint64_t v8 = *(unsigned int *)this;
  if (v8)
  {
    unint64_t v9 = (double *)*((void *)a2 + 8);
    uint64_t v10 = *v6;
    do
    {
      if (*v9 < *v10) {
        *uint64_t v10 = *v9;
      }
      ++v9;
      ++v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *PVPerfStats::FrameStats::max@<X0>(PVPerfStats::FrameStats *this@<X0>, const PVPerfStats::FrameStats *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 42) = *(_OWORD *)((char *)this + 42);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a3 + 64) = 0;
  uint64_t v6 = (double **)(a3 + 64);
  double result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a3 + 64), *((const void **)this + 8), *((void *)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3);
  uint64_t v8 = *(unsigned int *)this;
  if (v8)
  {
    unint64_t v9 = (double *)*((void *)a2 + 8);
    uint64_t v10 = *v6;
    do
    {
      if (*v9 > *v10) {
        *uint64_t v10 = *v9;
      }
      ++v9;
      ++v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void PVPerfStats::LogPlaybackRate(PVPerfStats *this)
{
  uint64_t v1 = *((void *)this + 76);
  uint64_t v2 = *((void *)this + 75);
  if ((unint64_t)(v1 - v2) < 2) {
    return;
  }
  uint64_t v4 = *((void *)this + 4);
  double v5 = *(double *)(v4 + 88 * v1 + 40) - *(double *)(v4 + 88 * v2 + 32);
  *(float *)&double v5 = v5;
  if (v1 > v2)
  {
    uint64_t v6 = v4 + 88 * v2 + 57;
    uint64_t v7 = v1 - v2;
    uint64_t v8 = (unsigned __int8 *)v6;
    do
    {
      int v9 = *v8;
      v8 += 88;
      if (v9)
      {
        double v5 = *(float *)&v5 - *(double *)(v6 - 9);
        *(float *)&double v5 = v5;
      }
      uint64_t v6 = (uint64_t)v8;
      --v7;
    }
    while (v7);
  }
  *(float *)&double v5 = (float)(unint64_t)(v1 - v2) / *(float *)&v5;
  if (!PVPerfStats::_logFormat)
  {
    float v23 = [NSNumber numberWithFloat:v5];
    float v18 = [NSString stringWithFormat:@"start/end frame nums: %d, %d", *(unsigned int *)(v4 + 88 * v2 + 4), *(unsigned int *)(v4 + 88 * v1 + 4)];
    uint64_t v11 = StringFormatTEXT(&cfstr_PlaybackFps.isa, v23, v18);

    PVPerfStats::LogString(this, &stru_1F119C630.isa, v11);
LABEL_14:
    float v17 = (void *)v11;
    goto LABEL_15;
  }
  if (PVPerfStats::_logFormat != 1)
  {
    if (PVPerfStats::_logFormat != 2) {
      return;
    }
    float v19 = [NSNumber numberWithFloat:v5];
    uint64_t v10 = [NSString stringWithFormat:@"Frame rate measured for stats during playback during frameNum range (%d, %d)", *(unsigned int *)(v4 + 88 * v2 + 4), *(unsigned int *)(v4 + 88 * v1 + 4)];
    uint64_t v11 = StringFormatPMR(&cfstr_PlaybackFps_0.isa, v19, v10);

    PVPerfStats::LogString(this, &stru_1F119C630.isa, v11);
    goto LABEL_14;
  }
  float v20 = [NSNumber numberWithFloat:v5];
  uint64_t v12 = StringFormatJSON(&cfstr_Playbackfps.isa, v20);
  PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v12);

  *(float *)&double v13 = (float)*(unsigned int *)(v4 + 88 * v2 + 4);
  float v21 = [NSNumber numberWithFloat:v13];
  uint64_t v14 = StringFormatJSON(&cfstr_Playbackstartf.isa, v21);
  PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v14);

  *(float *)&double v15 = (float)*(unsigned int *)(v4 + 88 * v1 + 4);
  float v22 = [NSNumber numberWithFloat:v15];
  float v16 = StringFormatJSON(&cfstr_Playbackendfra.isa, v22);
  PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v16);

  float v17 = v22;
LABEL_15:
}

void sub_1B73F7604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void PVPerfStats::BeginLogging(PVPerfStats *this)
{
  if (PVPerfStats::BeginLogging(void)::onceToken != -1) {
    dispatch_once(&PVPerfStats::BeginLogging(void)::onceToken, &__block_literal_global);
  }
}

void ___ZN11PVPerfStats12BeginLoggingEv_block_invoke()
{
  id v11 = [MEMORY[0x1E4F1C9C8] date];
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v0 setDateFormat:@"yyyyMMdd_HHmmss"];
  uint64_t v1 = [v0 stringFromDate:v11];
  uint64_t v2 = [NSString stringWithFormat:@"ProVideoRenderStats_%@.txt", v1];
  uint64_t v3 = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  uint64_t v4 = [v3 objectAtIndex:0];
  uint64_t v5 = [v4 stringByAppendingPathComponent:v2];
  uint64_t v6 = (void *)PVPerfStats::_logFilePath;
  PVPerfStats::_logFilePath = v5;

  uint64_t v7 = [(id)PVPerfStats::_logFilePath stringByExpandingTildeInPath];
  uint64_t v8 = (void *)PVPerfStats::_logFilePath;
  PVPerfStats::_logFilePath = v7;

  if (PVPerfStats::_logOutput == 1 && PVPerfStats::_logFormat == 1)
  {
    [v0 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    int v9 = [v0 stringFromDate:v11];

    uint64_t v10 = [NSString stringWithFormat:@"[\n  {\n    \"name\": \"begin\",\n    \"date\": \"%@\"\n  },\n", v9];
    WriteBufferToFile(v10, (NSString *)PVPerfStats::_logFilePath);
  }
  else
  {
    int v9 = v1;
  }
}

void sub_1B73F7820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  double v15 = v14;

  _Unwind_Resume(a1);
}

void WriteBufferToFile(NSString *a1, NSString *a2)
{
  uint64_t v7 = a1;
  uint64_t v3 = a2;
  if ([(NSString *)v7 length] && [(NSString *)v3 length])
  {
    uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
    if ([v4 fileExistsAtPath:v3])
    {
      uint64_t v5 = [MEMORY[0x1E4F28CB0] fileHandleForWritingAtPath:v3];
      objc_msgSend(v5, "truncateFileAtOffset:", objc_msgSend(v5, "seekToEndOfFile"));
      uint64_t v6 = [(NSString *)v7 dataUsingEncoding:4];
      [v5 writeData:v6];

      [v5 synchronizeFile];
    }
    else
    {
      [(NSString *)v7 writeToFile:v3 atomically:1 encoding:4 error:0];
    }
  }
}

void sub_1B73F799C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void PVPerfStats::EndLogging(PVPerfStats *this)
{
  if (PVPerfStats::_logOutput == 1 && PVPerfStats::_logFormat == 1)
  {
    id v5 = [MEMORY[0x1E4F1C9C8] date];
    id v2 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    [v2 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    uint64_t v3 = [v2 stringFromDate:v5];
    uint64_t v4 = [NSString stringWithFormat:@"  {\n    \"name\": \"end\",\n    \"date\": \"%@\"\n  }\n]", v3];
    WriteBufferToFile(v4, (NSString *)PVPerfStats::_logFilePath);
  }
}

void sub_1B73F7AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  double v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t PVPerfStats::GetFrameStatsDescription(PVPerfStats *this)
{
  return *((void *)this + 80);
}

uint64_t PVPerfStats::PVPerfStats(uint64_t a1, uint64_t (****a2)(void))
{
  *(double *)a1 = GetHostTime();
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a1 + 20pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(void *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 384) = 0;
  *(void *)(a1 + 464) = 0;
  *(_WORD *)(a1 + 472) = 0;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_WORD *)(a1 + 56pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 32pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 48pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 60pthread_cond_init((pthread_cond_t *)this, 0) = -1;
  *(void *)(a1 + 608) = -1;
  *(unsigned char *)(a1 + 616) = 0;
  *(void *)(a1 + 624) = &stru_1F119C770;
  *(void *)(a1 + 632) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 64pthread_cond_init((pthread_cond_t *)this, 0) = v4;
  LODWORD(a2) = (**v4)(v4);
  *(_DWORD *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 68) = 0;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(a1 + 72) = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 88) = *(void *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 64));
  *(_DWORD *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 16pthread_cond_init((pthread_cond_t *)this, 0) = *(_OWORD *)v5;
  *(void *)(a1 + 176) = *(void *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 152));
  *(_DWORD *)(a1 + 416) = a2;
  *(_DWORD *)(a1 + 42pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)v5;
  *(void *)(a1 + 44pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 416));
  *(_DWORD *)(a1 + 504) = a2;
  *(_DWORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)v5;
  *(void *)(a1 + 528) = *(void *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 504));
  *(_DWORD *)(a1 + 24pthread_cond_init((pthread_cond_t *)this, 0) = a2;
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v5;
  *(void *)(a1 + 264) = *(void *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 240));
  *(_DWORD *)(a1 + 328) = a2;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)v5;
  *(void *)(a1 + 352) = *(void *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 328));
  id v6 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  uint64_t v7 = *(void **)(a1 + 632);
  *(void *)(a1 + 632) = v6;

  objc_msgSend(*(id *)(a1 + 632), "setString:", &stru_1F119C770, a1 + 32);
  return a1;
}

void sub_1B73F7D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v16 = *(void *)(v10 + 640);
  *(void *)(v10 + 64pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  if (v16) {
    MEMORY[0x1BA9BFBA0](v16, 0x81C40B8603338);
  }
  float v17 = v11 + 44;

  float v18 = *(void **)(v10 + 568);
  if (v18)
  {
    *(void *)(v10 + 576) = v18;
    operator delete(v18);
  }
  float v19 = *v17;
  if (*v17)
  {
    *(void *)(v10 + 488) = v19;
    operator delete(v19);
  }
  float v20 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 40pthread_cond_init((pthread_cond_t *)this, 0) = v20;
    operator delete(v20);
  }
  float v21 = *v13;
  if (*v13)
  {
    *(void *)(v10 + 312) = v21;
    operator delete(v21);
  }
  float v22 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 224) = v22;
    operator delete(v22);
  }
  float v23 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 136) = v23;
    operator delete(v23);
  }
  a10 = a9;
  std::vector<PVPerfStats::FrameStats>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void PVPerfStats::SetName(PVPerfStats *this, __CFString *a2)
{
  if (!a2) {
    a2 = &stru_1F119C770;
  }
  objc_storeStrong((id *)this + 78, a2);
}

void PVPerfStats::Print(PVPerfStats *this, int a2, int a3)
{
  if (!PVPerfStats::_logLevel) {
    return;
  }
  uint64_t v4 = *((void *)this + 5) - *((void *)this + 4);
  if (!v4) {
    return;
  }
  LODWORD(v6) = a2;
  if (PVPerfStats::_logLevel <= 2)
  {
    if (PVPerfStats::_logLevel != 2 || (a3 & 1) == 0)
    {
      int v8 = PVPerfStats::_logFormat;
      char v9 = 1;
      goto LABEL_12;
    }
    BOOL v7 = (unint64_t)(0x2E8BA2E8BA2E8BA3 * (v4 >> 3)) > 1;
  }
  else
  {
    BOOL v7 = 1;
  }
  int v8 = PVPerfStats::_logFormat;
  char v9 = !v7;
  if (!PVPerfStats::_logFormat && v7)
  {
    PVPerfStats::LogString(this, &cfstr_PvBeginPerfSta.isa, *((void *)this + 78));
    goto LABEL_14;
  }
LABEL_12:
  if (v8 == 1) {
    PVPerfStats::LogString(this, &cfstr_Name.isa, *((void *)this + 78));
  }
LABEL_14:
  if (*((unsigned char *)this + 616)) {
    PVPerfStats::LogPlaybackRate(this);
  }
  *((unsigned char *)this + 616) = 0;
  *((void *)this + 75) = -1;
  *((void *)this + 76) = -1;
  int v10 = PVPerfStats::_logLevel;
  int v11 = PVPerfStats::_logFormat;
  if (PVPerfStats::_logLevel >= 3)
  {
    (*(void (**)(void ***__return_ptr))(**((void **)this + 80) + 8))(&v55);
    memset(&v54, 0, sizeof(v54));
    if (PVPerfStats::_logFormat == 1) {
      uint64_t v12 = "      ";
    }
    else {
      uint64_t v12 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v52, v12);
    if (PVPerfStats::_logFormat == 2) {
      double v13 = "";
    }
    else {
      double v13 = ",\n";
    }
    std::string::basic_string[abi:ne180100]<0>(v50, v13);
    unint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3);
    if (v14 > v6)
    {
      unint64_t v6 = v6;
      uint64_t v15 = 88 * v6;
      do
      {
        if ((v53 & 0x80u) == 0) {
          uint64_t v16 = v52;
        }
        else {
          uint64_t v16 = (void **)v52[0];
        }
        if ((v53 & 0x80u) == 0) {
          std::string::size_type v17 = v53;
        }
        else {
          std::string::size_type v17 = (std::string::size_type)v52[1];
        }
        std::string::append(&v54, (const std::string::value_type *)v16, v17);
        if (v6)
        {
          (*(void (**)(void **__return_ptr))(**((void **)this + 80) + 16))(&__p);
          if ((v49 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v49 & 0x80u) == 0) {
            std::string::size_type v19 = v49;
          }
          else {
            std::string::size_type v19 = v48;
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr))(**((void **)this + 80) + 16))(&__p);
          if ((v49 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v49 & 0x80u) == 0) {
            std::string::size_type v19 = v49;
          }
          else {
            std::string::size_type v19 = v48;
          }
        }
        std::string::append(&v54, p_p, v19);
        if ((char)v49 < 0) {
          operator delete(__p);
        }
        if (v6 < v14 - 1)
        {
          if ((v51 & 0x80u) == 0) {
            float v20 = v50;
          }
          else {
            float v20 = (void **)v50[0];
          }
          if ((v51 & 0x80u) == 0) {
            std::string::size_type v21 = v51;
          }
          else {
            std::string::size_type v21 = (std::string::size_type)v50[1];
          }
          std::string::append(&v54, (const std::string::value_type *)v20, v21);
        }
        ++v6;
        v15 += 88;
      }
      while (v14 != v6);
    }
    if (PVPerfStats::_logFormat != 1)
    {
      if (PVPerfStats::_logFormat == 2)
      {
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!*((unsigned char *)&v54.__r_.__value_.__s + 23)) {
            goto LABEL_90;
          }
          goto LABEL_86;
        }
        if (!v54.__r_.__value_.__l.__size_) {
          goto LABEL_90;
        }
LABEL_88:
        float v26 = (std::string *)v54.__r_.__value_.__r.__words[0];
        goto LABEL_89;
      }
      if (v57 < 0)
      {
        if (!v56) {
          goto LABEL_84;
        }
        float v23 = v55;
      }
      else
      {
        if (!v57) {
          goto LABEL_84;
        }
        float v23 = (void **)&v55;
      }
      PVPerfStats::LogString(this, &cfstr_S.isa, v23);
LABEL_84:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v54.__r_.__value_.__l.__size_) {
          goto LABEL_88;
        }
      }
      else if (*((unsigned char *)&v54.__r_.__value_.__s + 23))
      {
LABEL_86:
        float v26 = &v54;
LABEL_89:
        PVPerfStats::LogString(this, &cfstr_S.isa, v26);
      }
LABEL_90:
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (v57 < 0) {
        operator delete(v55);
      }
      int v10 = PVPerfStats::_logLevel;
      int v11 = PVPerfStats::_logFormat;
      goto LABEL_99;
    }
    if (v57 < 0)
    {
      if (v56)
      {
        float v22 = v55;
        goto LABEL_70;
      }
    }
    else if (v57)
    {
      float v22 = (void **)&v55;
LABEL_70:
      PVPerfStats::LogString(this, &cfstr_HeadersS.isa, v22);
    }
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v54.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      PVPerfStats::LogString(this, &cfstr_Frames.isa);
      float v25 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        float v25 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      PVPerfStats::LogString(this, &cfstr_S.isa, v25);
      if (a3
        && PVPerfStats::_logLevel >= 2
        && (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3)) > 1)
      {
        PVPerfStats::LogString(this, &stru_1F119C8D0.isa);
      }
      else
      {
        PVPerfStats::LogString(this, &stru_1F119C8F0.isa);
      }
    }
    goto LABEL_90;
  }
LABEL_99:
  if (a3
    && v10 >= 2
    && (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3)) >= 2
    && v11 != 2)
  {
    PVPerfStats::CalculateStats(this);
    (*(void (**)(void ***__return_ptr))(**((void **)this + 80) + 16))(&v55);
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 80) + 16))(&v54);
    (*(void (**)(void **__return_ptr))(**((void **)this + 80) + 16))(v52);
    (*(void (**)(void **__return_ptr))(**((void **)this + 80) + 16))(v50);
    (*(void (**)(void **__return_ptr))(**((void **)this + 80) + 16))(&__p);
    (*(void (**)(void **__return_ptr))(**((void **)this + 80) + 16))(v45);
    if (PVPerfStats::_logFormat == 1)
    {
      PVPerfStats::LogString(this, &cfstr_Statssummary.isa);
      float v28 = (void **)&v55;
      if (v57 < 0) {
        float v28 = v55;
      }
      PVPerfStats::LogString(this, &cfstr_AverageS.isa, v28);
      float v29 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        float v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      PVPerfStats::LogString(this, &cfstr_StddevS.isa, v29);
      float v30 = v52;
      if ((v53 & 0x80u) != 0) {
        float v30 = (void **)v52[0];
      }
      PVPerfStats::LogString(this, &cfstr_OlympicAvgS.isa, v30);
      float v31 = v50;
      if ((v51 & 0x80u) != 0) {
        float v31 = (void **)v50[0];
      }
      PVPerfStats::LogString(this, &cfstr_OlympicStddevS.isa, v31);
      float v32 = &__p;
      if ((v49 & 0x80u) != 0) {
        float v32 = __p;
      }
      PVPerfStats::LogString(this, &cfstr_MinS.isa, v32);
      float v33 = v45;
      if (v46 < 0) {
        float v33 = (void **)v45[0];
      }
      PVPerfStats::LogString(this, &cfstr_MaxS.isa, v33);
      PVPerfStats::LogString(this, &stru_1F119C9F0.isa);
LABEL_139:
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      if ((char)v49 < 0) {
        operator delete(__p);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (v57 < 0) {
        operator delete(v55);
      }
      int v11 = PVPerfStats::_logFormat;
      goto LABEL_152;
    }
    (*(void (**)(void **__return_ptr))(**((void **)this + 80) + 8))(v43);
    if (v44 < 0)
    {
      if (v43[1])
      {
        float v34 = (void **)v43[0];
        goto LABEL_124;
      }
    }
    else if (v44)
    {
      float v34 = v43;
LABEL_124:
      PVPerfStats::LogString(this, &cfstr_S.isa, v34);
    }
    float v35 = (void **)&v55;
    if (v57 < 0) {
      float v35 = v55;
    }
    PVPerfStats::LogString(this, &cfstr_AverageS_0.isa, v35);
    double v36 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      double v36 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    PVPerfStats::LogString(this, &cfstr_StdevS.isa, v36);
    float v37 = v52;
    if ((v53 & 0x80u) != 0) {
      float v37 = (void **)v52[0];
    }
    PVPerfStats::LogString(this, &cfstr_OaverageS.isa, v37);
    float v38 = v50;
    if ((v51 & 0x80u) != 0) {
      float v38 = (void **)v50[0];
    }
    PVPerfStats::LogString(this, &cfstr_OstdevS.isa, v38);
    v39 = &__p;
    if ((v49 & 0x80u) != 0) {
      v39 = __p;
    }
    PVPerfStats::LogString(this, &cfstr_MinS_0.isa, v39);
    v40 = v45;
    if (v46 < 0) {
      v40 = (void **)v45[0];
    }
    PVPerfStats::LogString(this, &cfstr_MaxS_0.isa, v40);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    goto LABEL_139;
  }
LABEL_152:
  if (v11) {
    char v41 = 1;
  }
  else {
    char v41 = v9;
  }
  if (v41)
  {
    if (v11 == 1) {
      PVPerfStats::LogString(this, &stru_1F119CAF0.isa, v42);
    }
  }
  else
  {
    PVPerfStats::LogString(this, &cfstr_PvEndPerfStats.isa, *((void *)this + 78));
  }
}

void sub_1B73F87A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (*(char *)(v46 - 89) < 0) {
    operator delete(*(void **)(v46 - 112));
  }
  _Unwind_Resume(exception_object);
}

PVPerfStats *PVPerfStats::CalculateStats(PVPerfStats *this)
{
  if (*((unsigned char *)this + 56))
  {
    uint64_t v1 = this;
    unint64_t v12 = 0;
    uint64_t v15 = 0;
    __int16 v16 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    unint64_t v4 = 0;
    uint64_t v7 = 0;
    __int16 v8 = 0;
    uint64_t v11 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    unsigned int v2 = (***((uint64_t (****)(void))this + 80))();
    unint64_t v12 = __PAIR64__(*((_DWORD *)v1 + 2), v2);
    uint64_t v3 = (long long *)MEMORY[0x1E4F1FA48];
    long long v13 = *MEMORY[0x1E4F1FA48];
    uint64_t v14 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)&v12);
    unint64_t v4 = __PAIR64__(*((_DWORD *)v1 + 2), v2);
    long long v5 = *v3;
    uint64_t v6 = *((void *)v3 + 2);
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)&v4);
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)v1 + 240));
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)v1 + 328));
    operator new[]();
  }
  return this;
}

void sub_1B73F94F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a29) {
    operator delete(a29);
  }
  unsigned __int8 v53 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v53;
    operator delete(v53);
  }
  std::string v54 = *(void **)(v51 - 136);
  if (v54)
  {
    *(void *)(v51 - 128) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(a1);
}

void PVPerfStats::Reset(PVPerfStats *this)
{
  if (*((unsigned char *)this + 616)) {
    BOOL v2 = PVPerfStats::_logLevel < 1;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    PVPerfStats::LogPlaybackRate(this);
  }
  *((unsigned char *)this + 616) = 0;
  *((void *)this + 75) = -1;
  *((void *)this + 76) = -1;
  if (PVPerfStats::_logOutput == 1)
  {
    WriteBufferToFile(*((NSString **)this + 79), (NSString *)PVPerfStats::_logFilePath);
    [*((id *)this + 79) setString:&stru_1F119C770];
  }
  *((_DWORD *)this + 2) = 0;
  std::vector<PVPerfStats::FrameStats>::__clear[abi:ne180100]((uint64_t *)this + 4);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)this + 64));
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)this + 152));
  *(double *)this = GetHostTime();
  *((unsigned char *)this + 56) = 1;
  *((void *)this + 74) = 0;
}

void PVPerfStats::AddFrameStats(PVPerfStats *this, const PVPerfStats::FrameStats *a2)
{
  if (!PVPerfStats::_logLevel) {
    return;
  }
  unint64_t v4 = (char *)this + 32;
  unint64_t v6 = *((void *)this + 5);
  unint64_t v5 = *((void *)this + 6);
  uint64_t v7 = (uint64_t *)((char *)this + 32);
  if (v6 >= v5)
  {
    uint64_t v8 = std::vector<PVPerfStats::FrameStats>::__push_back_slow_path<PVPerfStats::FrameStats const&>(v7, (long long *)a2);
  }
  else
  {
    std::vector<PVPerfStats::FrameStats>::__construct_one_at_end[abi:ne180100]<PVPerfStats::FrameStats const&>((uint64_t)v7, (long long *)a2);
    uint64_t v8 = v6 + 88;
  }
  *((void *)this + 5) = v8;
  if (*(unsigned char *)(v8 - 32))
  {
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - *((void *)this + 4)) >> 3) - 1;
    if (*((unsigned char *)this + 616)) {
      goto LABEL_12;
    }
    *((unsigned char *)this + 616) = 1;
  }
  else
  {
    if (*((unsigned char *)this + 616)) {
      PVPerfStats::LogPlaybackRate(this);
    }
    *((unsigned char *)this + 616) = 0;
    uint64_t v9 = -1;
  }
  *((void *)this + 75) = v9;
LABEL_12:
  *((void *)this + 76) = v9;
  int v10 = *((_DWORD *)this + 2);
  int v11 = v10 + 1;
  *((_DWORD *)this + 2) = v10 + 1;
  *((unsigned char *)this + 56) = 1;
  HIDWORD(v12) = -286331153 * (v10 + 1);
  LODWORD(v12) = HIDWORD(v12);
  if ((v12 >> 1) > 0x8888888)
  {
LABEL_13:
    int v13 = PVPerfStats::_logLevel;
LABEL_14:
    if (v13 == 4)
    {
      int v14 = *((_DWORD *)this + 2);
      if (v14 >= 1 && !(v14 % 0x64u))
      {
        PVPerfStats::Print(this, v14 - 100, 0);
      }
    }
    return;
  }
  if (v10 - 29 >= 0) {
    uint64_t v15 = 30;
  }
  else {
    uint64_t v15 = v11;
  }
  uint64_t v16 = *(void *)v4;
  uint64_t v17 = *(void *)v4 + 88 * (v11 - v15);
  double v18 = *((double *)a2 + 5);
  double v19 = v18 - *(double *)(v17 + 32);
  if (v15)
  {
    int v20 = v10 - ((v10 - 29) & ((v10 - 29) >> 31)) - 29;
    uint64_t v21 = v15;
    do
    {
      if (*(unsigned char *)(v16 + 88 * v20 + 57)) {
        double v19 = v19 - *(double *)(v16 + 88 * v20 + 48);
      }
      ++v20;
      --v21;
    }
    while (v21);
  }
  uint64_t v22 = *(unsigned int *)(v17 + 4);
  uint64_t v23 = *((unsigned int *)a2 + 1);
  double v24 = (double)v15 / v19;
  *((double *)this + 74) = v24;
  int v13 = PVPerfStats::_logLevel;
  if (PVPerfStats::_logLevel > 0)
  {
    double v25 = v18 - *(double *)(v16 + 32);
    double v26 = (double)v11 / v25;
    if (PVPerfStats::_logFormat == 2)
    {
      *(float *)&double v25 = v24;
      v52 = [NSNumber numberWithFloat:v25];
      unsigned __int8 v53 = [NSString stringWithFormat:@"Windowed FPS for frameNum range (%d, %d)", v22, v23];
      float v29 = StringFormatPMR(&cfstr_WindowedFps_0.isa, v52, v53);

      *(float *)&double v54 = v26;
      v55 = [NSNumber numberWithFloat:v54];
      uint64_t v56 = [NSString stringWithFormat:@"Average FPS for time range (%f, %f)", *(void *)(*(void *)v4 + 32), *((void *)a2 + 5)];
      float v33 = StringFormatPMR(&cfstr_AverageFps_0.isa, v55, v56);

      PVPerfStats::LogString(this, &stru_1F119C630.isa, v29);
      PVPerfStats::LogString(this, &stru_1F119C630.isa, v33);
    }
    else
    {
      if (PVPerfStats::_logFormat == 1)
      {
        PVPerfStats::LogString(this, &stru_1F119CB90.isa);
        double v34 = *((double *)this + 74);
        *(float *)&double v34 = v34;
        float v35 = [NSNumber numberWithFloat:v34];
        double v36 = StringFormatJSON(&cfstr_Windowedfps.isa, v35);
        PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v36);

        *(float *)&double v37 = (float)v22;
        float v38 = [NSNumber numberWithFloat:v37];
        v39 = StringFormatJSON(&cfstr_Windowedstartf.isa, v38);
        PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v39);

        *(float *)&double v40 = (float)v23;
        char v41 = [NSNumber numberWithFloat:v40];
        uint64_t v42 = StringFormatJSON(&cfstr_Windowedendfra.isa, v41);
        PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v42);

        *(float *)&double v43 = v26;
        char v44 = [NSNumber numberWithFloat:v43];
        v45 = StringFormatJSON(&cfstr_Averagefps.isa, v44);
        PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v45);

        double v46 = *(double *)(*(void *)v4 + 32);
        *(float *)&double v46 = v46;
        v47 = [NSNumber numberWithFloat:v46];
        std::string::size_type v48 = StringFormatJSON(&cfstr_Averagestartfr.isa, v47);
        PVPerfStats::LogString(this, &stru_1F119C6B0.isa, v48);

        double v49 = *((double *)a2 + 5);
        *(float *)&double v49 = v49;
        v50 = [NSNumber numberWithFloat:v49];
        uint64_t v51 = StringFormatJSON(&cfstr_Averageendfram.isa, v50);
        PVPerfStats::LogString(this, &stru_1F119CC50.isa, v51);

        PVPerfStats::LogString(this, &stru_1F119CAF0.isa);
        goto LABEL_13;
      }
      if (PVPerfStats::_logFormat) {
        goto LABEL_14;
      }
      *(float *)&double v25 = v24;
      float v27 = [NSNumber numberWithFloat:v25];
      float v28 = [NSString stringWithFormat:@"windowed start/end frame nums: %d, %d [%@]", v22, v23, *((void *)this + 78)];
      float v29 = StringFormatTEXT(&cfstr_WindowedFps.isa, v27, v28);

      *(float *)&double v30 = v26;
      float v31 = [NSNumber numberWithFloat:v30];
      float v32 = [NSString stringWithFormat:@"average start/end time range: %f, %f [%@]", *(void *)(*((void *)this + 4) + 32), *((void *)a2 + 5), *((void *)this + 78)];
      float v33 = StringFormatTEXT(&cfstr_AverageFps.isa, v31, v32);

      PVPerfStats::LogString(this, &stru_1F119C630.isa, v29);
      PVPerfStats::LogString(this, &stru_1F119C630.isa, v33);
    }

    goto LABEL_13;
  }
}

void sub_1B73F9C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double PVPerfStats::NumFrames(PVPerfStats *this)
{
  return (double)*((int *)this + 2);
}

double PVPerfStats::WindowedFPS(PVPerfStats *this)
{
  return *((double *)this + 74);
}

uint64_t PVPerfStats::AverageFrameStats(PVPerfStats *this)
{
  return (uint64_t)this + 64;
}

uint64_t PVPerfStats::LastFrameStats(PVPerfStats *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (*((void *)this + 4) == v1) {
    return (uint64_t)this + 64;
  }
  else {
    return v1 - 88;
  }
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B73F9DFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<double>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void __clang_call_terminate(void *a1)
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6168218, MEMORY[0x1E4FBA1C8]);
}

void sub_1B73F9F08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    double v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::vector<PVPerfStats::FrameStats>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    std::vector<PVPerfStats::FrameStats>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<PVPerfStats::FrameStats>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 88)
  {
    size_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *std::vector<PVPerfStats::FrameStats>::__construct_one_at_end[abi:ne180100]<PVPerfStats::FrameStats const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_OWORD *)(v3 + 42) = *(long long *)((char *)a2 + 42);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(v3 + 64) = 0;
  double result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(v3 + 64), *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3);
  *(void *)(a1 + 8) = v3 + 88;
  return result;
}

void sub_1B73FA264(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<PVPerfStats::FrameStats>::__push_back_slow_path<PVPerfStats::FrameStats const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v20 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  double v18 = v11;
  double v19 = &v10[88 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  long long v14 = a2[2];
  *(_OWORD *)(v11 + 42) = *(long long *)((char *)a2 + 42);
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = v14;
  *(_OWORD *)unint64_t v11 = v12;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *((void *)v11 + 8) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)v11 + 8, *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3);
  v18 += 88;
  std::vector<PVPerfStats::FrameStats>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<PVPerfStats::FrameStats>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B73FA3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PVPerfStats::FrameStats>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PVPerfStats::FrameStats>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 88);
      long long v9 = *(_OWORD *)(a3 - 72);
      long long v10 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 46) = *(_OWORD *)(a3 - 46);
      *(_OWORD *)(v7 - 56) = v10;
      *(_OWORD *)(v7 - 72) = v9;
      *(_OWORD *)(v7 - 88) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 88;
      *((void *)&v16 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 64);
    if (v3)
    {
      *(void *)(v1 + 72) = v3;
      operator delete(v3);
    }
    v1 += 88;
  }
}

uint64_t std::__split_buffer<PVPerfStats::FrameStats>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<PVPerfStats::FrameStats>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 88;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
}

void sub_1B73FA6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FA9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FBE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FBEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  long long v10 = v9;

  a9.super_class = (Class)PVOrientationEffect;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B73FC084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B73FC2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FC450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1B73FCA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

HGNode *PVInputHGNodeMap<unsigned int>::GetNode@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, HGNode **a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v4;
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      long long v10 = (uint64_t *)v5;
    }
    else {
      long long v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= a2)
  {
    uint64_t result = *(HGNode **)(v7 + 40);
    *a3 = result;
    if (result)
    {
      long long v15 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (HGNode *)v15();
    }
  }
  else
  {
LABEL_12:
    BOOL v11 = +[PVEnvironment PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE];
    long long v12 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    long long v13 = v12;
    if (v11) {
      HGSolidColor::HGSolidColor(v12);
    }
    uint64_t result = HGNode::HGNode((HGNode *)v12);
    *a3 = (HGNode *)v13;
  }
  return result;
}

void sub_1B73FCD4C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<unsigned int>::MapKeys(void *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v7 = *a2;
        uint64_t v8 = (v5 - *a2) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v6 - (void)v7;
        if (v10 >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v6, v11);
          uint64_t v7 = *a2;
          uint64_t v5 = a2[1];
        }
        else
        {
          long long v12 = 0;
        }
        long long v13 = &v12[4 * v8];
        *(_DWORD *)long long v13 = *((_DWORD *)v3 + 8);
        char v14 = v13 + 4;
        while (v5 != v7)
        {
          int v15 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v15;
          v13 -= 4;
        }
        *a2 = v13;
        a2[1] = v14;
        a2[2] = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
        uint64_t v5 = v14;
      }
      else
      {
        *(_DWORD *)uint64_t v5 = *((_DWORD *)v3 + 8);
        v5 += 4;
      }
      a2[1] = v5;
      long long v16 = (void *)v3[1];
      if (v16)
      {
        do
        {
          size_t v17 = v16;
          long long v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          size_t v17 = (void *)v3[2];
          BOOL v18 = *v17 == (void)v3;
          uint64_t v3 = v17;
        }
        while (!v18);
      }
      uint64_t v3 = v17;
    }
    while (v17 != v2);
  }
}

void sub_1B73FCEE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B73FD004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void sub_1B73FD2F0(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B73FD3D8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      std::string::size_type v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned __int8 v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B73FD978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      float v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1[4], v16);
      double v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_1B73FDF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B73FE42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 24))(a29);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 24))(a20);
  }
  if (*v29) {
    (*(void (**)(void))(*(void *)*v29 + 24))(*v29);
  }

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v30 - 104));
  _Unwind_Resume(a1);
}

HGNode *PVInputHGNodeMap<PVIGHGNodeCacheKey>::GetNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, HGNode **a3@<X8>)
{
  uint64_t v5 = std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::find<PVIGHGNodeCacheKey>(a1, a2);
  if ((void *)(a1 + 8) == v5)
  {
    BOOL v8 = +[PVEnvironment PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE];
    uint64_t v9 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    uint64_t v10 = v9;
    if (v8) {
      HGSolidColor::HGSolidColor(v9);
    }
    uint64_t result = HGNode::HGNode((HGNode *)v9);
    *a3 = (HGNode *)v10;
  }
  else
  {
    uint64_t result = (HGNode *)v5[9];
    *a3 = result;
    if (result)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (HGNode *)v7();
    }
  }
  return result;
}

void sub_1B73FE6F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t PVInputHGNodeMap<PVIGHGNodeCacheKey>::SetNode(uint64_t **a1, const PVIGHGNodeCacheKey *a2, uint64_t *a3)
{
  unint64_t v7 = a2;
  uint64_t v4 = std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__emplace_unique_key_args<PVIGHGNodeCacheKey,std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>(a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v7);
  uint64_t v5 = v4[9];
  uint64_t result = *a3;
  if (v5 != *a3)
  {
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      uint64_t result = *a3;
    }
    v4[9] = result;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  return result;
}

void sub_1B73FE84C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B73FE93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FE9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FEAAC(_Unwind_Exception *a1)
{
  BOOL v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B73FED3C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B73FEF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::find<PVIGHGNodeCacheKey>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 8);
  BOOL v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = PVIGHGNodeCacheKey::operator<((uint64_t)(v3 + 4), a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    BOOL v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || PVIGHGNodeCacheKey::operator<(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__emplace_unique_key_args<PVIGHGNodeCacheKey,std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, const PVIGHGNodeCacheKey **a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__find_equal<PVIGHGNodeCacheKey>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__find_equal<PVIGHGNodeCacheKey>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!PVIGHGNodeCacheKey::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!PVIGHGNodeCacheKey::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>(uint64_t a1@<X0>, const PVIGHGNodeCacheKey **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  PVIGHGNodeCacheKey::PVIGHGNodeCacheKey((PVIGHGNodeCacheKey *)(v6 + 32), *a2);
  *((void *)v6 + 9) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B73FF2AC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      BOOL v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              BOOL v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            HGSolidColor *v9 = v2;
            v2[2] = (uint64_t)v9;
            BOOL v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *BOOL v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            BOOL v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          BOOL v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *unint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGNode>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGNode>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  BOOL v3 = *(void **)(a1 + 32);
}

void sub_1B73FF5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FF7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1B73FF948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FFA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FFD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B73FFE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FFEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FFF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B73FFFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74000E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7400240(_Unwind_Exception *a1)
{
  int v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B74004E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7400740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7400B8C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v4);
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1B7400F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }

  _Unwind_Resume(a1);
}

void sub_1B74028B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::GetNode(uint64_t a1@<X0>, void *a2@<X1>, HGNode **a3@<X8>)
{
  id v15 = a2;
  uint64_t v7 = *(void **)(a1 + 8);
  int v6 = (void *)(a1 + 8);
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_22;
  }
  int v8 = v6;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= (unint64_t)v15;
    if (v9 >= (unint64_t)v15) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = v5 + 1;
    }
    if (v10) {
      int v8 = v5;
    }
    uint64_t v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 != v6 && v8[4] <= (unint64_t)v15)
  {
    uint64_t v14 = (HGNode *)v8[5];
    *a3 = v14;
    if (v14) {
      (*(void (**)(HGNode *))(*(void *)v14 + 16))(v14);
    }
  }
  else
  {
LABEL_22:
    if (+[PVEnvironment PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE])
    {
      uint64_t v12 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
      HGSolidColor::HGSolidColor(v12);
    }
    uint64_t v13 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v13);
    *a3 = v13;
  }
}

void sub_1B7403354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  HGObject::operator delete(v10);

  _Unwind_Resume(a1);
}

void HGInternalCompNode::SetContexts(HGInternalCompNode *this, objc_object *a2, PVCompositeDelegateContext *a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  uint64_t v7 = (void *)*((void *)this + 75);
  *((void *)this + 75) = v5;
  unint64_t v9 = v5;

  int v8 = (void *)*((void *)this + 73);
  *((void *)this + 73) = v6;
}

uint64_t HGInternalCompNode::SetGraphInput(HGInternalCompNode *this, unsigned int a2, HGNode *a3, HGRect a4)
{
  uint64_t v4 = *(uint64_t **)&a4.var2;
  uint64_t v5 = *(uint64_t **)&a4.var0;
  uint64_t v8 = *((unsigned int *)this + 118);
  *((_DWORD *)this + 118) = v8 + 1;
  unsigned int v12 = a2;
  uint64_t v13 = &v12;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 63, &v12, (uint64_t)&std::piecewise_construct, &v13)+ 8) = v8;
  unsigned int v12 = v8;
  uint64_t v13 = &v12;
  unint64_t v9 = std::__tree<std::__value_type<unsigned int,HGRect>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRect>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRect>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 69, &v12, (uint64_t)&std::piecewise_construct, &v13);
  v9[4] = v5;
  v9[5] = v4;
  uint64_t v10 = HGNode::SetInput((HGNode *)this, v8, a3);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, v8, 4096);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, v8, 2);
  return v10;
}

void HGInternalCompNode::SetImageInput(uint64_t **this, unsigned int a2, PVImageBuffer *a3)
{
  uint64_t v5 = a3;
  unsigned int v8 = a2;
  unint64_t v9 = &v8;
  int v6 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(this + 60, &v8, (uint64_t)&std::piecewise_construct, &v9);
  uint64_t v7 = v6[5];
  v6[5] = (uint64_t *)v5;
}

void sub_1B74035C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74036F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7403820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7403A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7403C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7403D38(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7404174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1B7404558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7404944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  unsigned int v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 24;
  return a1;
}

void sub_1B7404C84(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9BFAB0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9BFAB0](a1 + 128);
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,HGRect>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRect>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRect>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[7] = **a4;
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,__CVBuffer *>,std::__tree_node<std::__value_type<int,__CVBuffer *>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v14 = result;
    id v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      id v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v8[5] = v9[5];
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__node_insert_multi(v5, (uint64_t)v8);
          unsigned int v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            id v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unsigned int v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unsigned int v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_multi<std::pair<int const,__CVBuffer *> const&>(v5, (_OWORD *)a2 + 2);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B7405630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void *std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_multi<std::pair<int const,__CVBuffer *> const&>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t v5 = v4;
  v4[2] = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unsigned int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unsigned int v8 = v6 + 1;
  }
  else
  {
    unsigned int v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void HGInternalCompNode::HGInternalCompNode(HGInternalCompNode *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v2 = &unk_1F1088B58;
  *(void *)(v2 + 416) = 0;
  *(void *)(v2 + 424) = 0;
  *(void *)(v2 + 408) = v2 + 416;
  *(_OWORD *)(v2 + 432) = HGRectNull;
  *(_DWORD *)(v2 + 472) = 0;
  *(void *)(v2 + 48pthread_cond_init((pthread_cond_t *)this, 0) = v2 + 488;
  *(void *)(v2 + 488) = 0;
  *(void *)(v2 + 52pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(v2 + 504) = v2 + 512;
  *(void *)(v2 + 512) = 0;
  *(void *)(v2 + 496) = 0;
  *(void *)(v2 + 544) = 0;
  *(void *)(v2 + 536) = 0;
  *(void *)(v2 + 528) = v2 + 536;
  *(void *)(v2 + 568) = 0;
  *(void *)(v2 + 56pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(v2 + 552) = v2 + 560;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  HGNode::SetFlags((HGNode *)v2, 0xFFFFFFFFLL, 4096);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 2);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 1024);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(void *)this + 144))(this, 0xFFFFFFFFLL, 512);
}

void sub_1B7405964(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v6, *(void **)(v1 + 560));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v5, *(void **)(v1 + 536));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v4, *(void **)(v1 + 512));
  std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(v3, *(void **)(v1 + 488));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, *(void **)(v1 + 416));
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGInternalCompNode::~HGInternalCompNode(id *this)
{
  HGInternalCompNode::~HGInternalCompNode(this);

  HGObject::operator delete(v1);
}

{
  uint64_t vars8;

  *this = &unk_1F1088B58;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 69), this[70]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 66), this[67]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 63), this[64]);
  std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy((uint64_t)(this + 60), this[61]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 51), this[52]);

  HGNode::~HGNode((HGNode *)this);
}

uint64_t HGInternalCompNode::GetDOD(uint64_t a1)
{
  return *(void *)(a1 + 432);
}

uint64_t HGInternalCompNode::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 560);
  if (v4)
  {
    uint64_t v5 = a1 + 560;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 28);
      BOOL v7 = v6 >= a3;
      if (v6 >= a3) {
        unsigned int v8 = (uint64_t *)v4;
      }
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 560 && *(_DWORD *)(v5 + 28) <= a3) {
      return *(void *)(v5 + 32);
    }
  }
  return a4;
}

HGBuffer *HGInternalCompNode::RenderPageMetal(HGInternalCompNode *this, HGPage *a2)
{
  context = (void *)MEMORY[0x1BA9C0A20]();
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v52, (HGNode *)this, a2);
  double v43 = *(HGGPURenderer **)a2;
  char v44 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = (HGInternalCompNode *)*((void *)this + 60);
  if (v5 != (HGInternalCompNode *)((char *)this + 488))
  {
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 8);
      id v7 = *((id *)v5 + 5);
      if ([v7 cvPixelBuffer])
      {
        unsigned int v8 = (__CVBuffer *)[v7 cvPixelBuffer];
        uint64_t v9 = [*((id *)this + 73) renderingColorSpace];
        PVAddColorSpaceAttributesToCVPixelBuffer(v8, v9);
      }
      unsigned int v10 = [NSNumber numberWithUnsignedInt:v6];
      [v4 setObject:v7 forKey:v10];

      BOOL v11 = (HGInternalCompNode *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          BOOL v11 = *(HGInternalCompNode **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (HGInternalCompNode *)*((void *)v5 + 2);
          BOOL v22 = *(void *)v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v22);
      }
      uint64_t v5 = v12;
    }
    while (v12 != (HGInternalCompNode *)((char *)this + 488));
  }
  uint64_t v13 = (HGInternalCompNode *)*((void *)this + 66);
  if (v13 != (HGInternalCompNode *)((char *)this + 536))
  {
    do
    {
      uint64_t v14 = *((unsigned int *)v13 + 8);
      int v51 = *((_DWORD *)v13 + 7);
      unsigned __int8 v53 = (HGBitmap *)&v51;
      id v15 = +[PVImageBuffer imageWithCVPixelBuffer:](PVImageBuffer, "imageWithCVPixelBuffer:", std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 51, &v51, (uint64_t)&std::piecewise_construct, (_DWORD **)&v53)[5]);
      uint64_t v16 = [NSNumber numberWithUnsignedInt:v14];
      [v4 setObject:v15 forKey:v16];

      uint64_t v17 = (HGInternalCompNode *)*((void *)v13 + 1);
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = *(HGInternalCompNode **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (HGInternalCompNode *)*((void *)v13 + 2);
          BOOL v22 = *(void *)v18 == (void)v13;
          uint64_t v13 = v18;
        }
        while (!v22);
      }
      uint64_t v13 = v18;
    }
    while (v18 != (HGInternalCompNode *)((char *)this + 536));
  }
  uint64_t v19 = (HGInternalCompNode *)*((void *)this + 63);
  if (v19 != (HGInternalCompNode *)((char *)this + 512))
  {
    while (1)
    {
      uint64_t v20 = *((unsigned int *)v19 + 7);
      uint64_t v21 = (_DWORD *)*((void *)v44 + *((unsigned int *)v19 + 8) + 21);
      if (v21) {
        (*(void (**)(_DWORD *))(*(void *)v21 + 16))(v21);
      }
      BOOL v22 = (v21[3] & 0x30) != 0 && (v21[3] & 1) == 0;
      if (v22) {
        break;
      }
      uint64_t v49 = v21;
      (*(void (**)(_DWORD *))(*(void *)v21 + 16))(v21);
      uint64_t v23 = +[PVImageBuffer imageWithHGBitmap:&v49];
      if (v49) {
        (*(void (**)(_DWORD *))(*(void *)v49 + 24))(v49);
      }
LABEL_34:
      if ([v23 cvPixelBuffer])
      {
        uint64_t v26 = (__CVBuffer *)[v23 cvPixelBuffer];
        float v27 = [*((id *)this + 73) renderingColorSpace];
        PVAddColorSpaceAttributesToCVPixelBuffer(v26, v27);
      }
      uint64_t v28 = [NSNumber numberWithUnsignedInt:v20];
      [v4 setObject:v23 forKey:v28];

      if (v21) {
        (*(void (**)(_DWORD *))(*(void *)v21 + 24))(v21);
      }
      float v29 = (HGInternalCompNode *)*((void *)v19 + 1);
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          float v29 = *(HGInternalCompNode **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v30 = (HGInternalCompNode *)*((void *)v19 + 2);
          BOOL v22 = *(void *)v30 == (void)v19;
          uint64_t v19 = v30;
        }
        while (!v22);
      }
      uint64_t v19 = v30;
      if (v30 == (HGInternalCompNode *)((char *)this + 512)) {
        goto LABEL_44;
      }
    }
    uint64_t v24 = (*(uint64_t (**)(HGGPURenderer *, _DWORD *, void))(*(void *)v43 + 96))(v43, v21, v21[4]);
    unint64_t v25 = *(void (**)(_DWORD *))(*(void *)v21 + 24);
    if (v21 == (_DWORD *)v24)
    {
      v25(v21);
      uint64_t v50 = v21;
    }
    else
    {
      v25(v21);
      uint64_t v50 = (_DWORD *)v24;
      if (!v24)
      {
        uint64_t v21 = 0;
LABEL_32:
        uint64_t v23 = +[PVImageBuffer imageWithHGBitmap:&v50];
        if (v50) {
          (*(void (**)(_DWORD *))(*(void *)v50 + 24))(v50);
        }
        goto LABEL_34;
      }
      uint64_t v21 = (_DWORD *)v24;
    }
    (*(void (**)(_DWORD *))(*(void *)v21 + 16))(v21);
    goto LABEL_32;
  }
LABEL_44:
  long long v31 = (void *)*((void *)this + 72);
  long long v32 = (long long *)((char *)this + 448);
  if (*((void *)this + 74))
  {
    long long v47 = *v32;
    uint64_t v48 = *((void *)this + 58);
    unint64_t v33 = objc_msgSend(v31, "renderWithInputs:time:metadata:", v4, &v47);
  }
  else
  {
    long long v45 = *v32;
    uint64_t v46 = *((void *)this + 58);
    unint64_t v33 = [v31 renderWithInputs:v4 time:&v45 userContext:*((void *)this + 75) compositeContext:*((void *)this + 73)];
  }
  double v34 = v33;
  if (!v33) {
    goto LABEL_55;
  }
  if (![v33 canCreateHGBitmap])
  {
    if ([v34 canCreateCVPixelBuffer])
    {
      PixelFormatType = (HGCV *)CVPixelBufferGetPixelFormatType((CVPixelBufferRef)[v34 cvPixelBuffer]);
      int v37 = HGCV::HGFormatForCVPixelFormat(PixelFormatType, 0, v36);
      HGCVBitmap::create((HGCVPixelBuffer *)[v34 cvPixelBuffer], v37, 0, &v53);
      goto LABEL_52;
    }
LABEL_55:
    uint64_t v40 = 0;
    goto LABEL_58;
  }
  [v34 hgBitmap];
LABEL_52:
  float v38 = v53;
  uint64_t v39 = (HGBuffer *)*((void *)v44 + 1);
  if (v39)
  {
    HGGPURenderer::CopyBitmapIntoBuffer((uint64_t)v43, v39, *((HGRect *)v44 + 1), v53);
    uint64_t v40 = (HGBuffer *)*((void *)v44 + 1);
    if (!v38) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  uint64_t v40 = (HGBuffer *)HGObject::operator new(0x80uLL);
  HGBuffer::HGBuffer(v40, *((HGRect *)v44 + 1), v38);
  *((void *)v44 + 1) = v40;
  if (v38) {
LABEL_57:
  }
    (*(void (**)(HGBitmap *))(*(void *)v38 + 24))(v38);
LABEL_58:

  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v52);
  return v40;
}

void sub_1B740606C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HGObject::operator delete(v23);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }

  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)(v26 - 104));
  _Unwind_Resume(a1);
}

uint64_t HGNode::GetRenderPageStrategy(HGNode *this)
{
  return 0;
}

void std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  id v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        id v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        id v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

float64x2_t PCMatrix44Tmpl<double>::leftScale(float64x2_t *a1, double a2, double a3, double a4)
{
  if (a2 != 1.0)
  {
    float64x2_t v4 = vmulq_n_f64(*a1, a2);
    float64x2_t result = vmulq_n_f64(a1[1], a2);
    *a1 = v4;
    a1[1] = result;
  }
  if (a3 != 1.0)
  {
    float64x2_t result = vmulq_n_f64(a1[2], a3);
    float64x2_t v6 = vmulq_n_f64(a1[3], a3);
    a1[2] = result;
    a1[3] = v6;
  }
  result.f64[0] = 1.0;
  if (a4 != 1.0)
  {
    float64x2_t result = vmulq_n_f64(a1[4], a4);
    float64x2_t v7 = vmulq_n_f64(a1[5], a4);
    a1[4] = result;
    a1[5] = v7;
  }
  return result;
}

float64x2_t PCMatrix44Tmpl<double>::leftTranslate(float64x2_t *a1, float64x2_t result, double a3, double a4)
{
  if (result.f64[0] != 0.0)
  {
    float64x2_t v4 = vaddq_f64(*a1, vmulq_n_f64(a1[6], result.f64[0]));
    float64x2_t result = vaddq_f64(a1[1], vmulq_n_f64(a1[7], result.f64[0]));
    *a1 = v4;
    a1[1] = result;
  }
  if (a3 != 0.0)
  {
    float64x2_t result = vaddq_f64(a1[2], vmulq_n_f64(a1[6], a3));
    float64x2_t v5 = vaddq_f64(a1[3], vmulq_n_f64(a1[7], a3));
    a1[2] = result;
    a1[3] = v5;
  }
  if (a4 != 0.0)
  {
    float64x2_t result = vaddq_f64(a1[4], vmulq_n_f64(a1[6], a4));
    float64x2_t v6 = vaddq_f64(a1[5], vmulq_n_f64(a1[7], a4));
    a1[4] = result;
    a1[5] = v6;
  }
  return result;
}

void sub_1B74068E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7406994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7406A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7406B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7406C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7406D40(_Unwind_Exception *a1)
{
  float64x2_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B7406E50(_Unwind_Exception *a1)
{
  float64x2_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B7406F60(_Unwind_Exception *a1)
{
  float64x2_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B74070C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74071C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74077A4(_Unwind_Exception *a1)
{
  uint64_t v8 = *(void *)(v6 - 120);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }

  _Unwind_Resume(a1);
}

uint64_t PVInputHGNodeMap<unsigned int>::SetNode(uint64_t **a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v7 = a2;
  uint64_t v8 = &v7;
  float64x2_t v4 = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1, &v7, (uint64_t)&std::piecewise_construct, &v8);
  float64x2_t v5 = v4[5];
  uint64_t result = *a3;
  if (v5 != (uint64_t *)*a3)
  {
    if (v5)
    {
      (*(void (**)(uint64_t *))(*v5 + 24))(v5);
      uint64_t result = *a3;
    }
    v4[5] = (uint64_t *)result;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  return result;
}

uint64_t **PVInputHGNodeMap<unsigned int>::SetPixelTransform(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  unsigned int v8 = a2;
  uint64_t v9 = &v8;
  uint64_t result = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 48), &v8, (uint64_t)&std::piecewise_construct, &v9);
  float64x2_t v5 = result + 5;
  if (result + 5 != a3)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      for (uint64_t j = 0; j != 4; ++j)
        v5[j] = a3[j];
      v5 += 4;
      a3 += 4;
    }
  }
  return result;
}

void PVInputHGNodeMap<unsigned int>::SetTimedMetadata(uint64_t a1, unsigned int a2, void *a3)
{
  unsigned int v7 = a2;
  float64x2_t v4 = a3;
  unsigned int v8 = &v7;
  float64x2_t v5 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)(a1 + 120), &v7, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v6 = v5[5];
  v5[5] = v4;
}

void sub_1B7407B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7408698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v51 = *(void *)(v49 - 184);
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
  }
  std::__list_imp<unsigned int>::clear(&a49);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v49 - 136));
  _Unwind_Resume(a1);
}

void sub_1B7408BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B7408D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74090A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740938C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1B74096AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);

  PVInputHGNodeMap<unsigned int>::~PVInputHGNodeMap((void **)(v21 - 232));
  _Unwind_Resume(a1);
}

void *std::__list_imp<unsigned int>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        float64x2_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::erase(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unsigned int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  unsigned int v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unsigned int v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unsigned int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unsigned int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      unsigned int v7 = *(uint64_t **)(*v7 + 8);
    }
    id v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unsigned int v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        id v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unsigned int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    unsigned int v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  BOOL v6 = a1[1];
  int v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        BOOL v6 = *v9;
        int v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        int v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x30uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((void *)v12 + 5) = 0;
    char v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HGRef<HGNode>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HGRef<HGNode>>,0>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unsigned int v11 = (char *)operator new(0x48uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 56) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unsigned int v11 = (char *)operator new(0xA8uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((void *)v11 + 2pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
    *((void *)v11 + 15) = 0x3FF0000000000000;
    *((void *)v11 + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
    *((void *)v11 + 5) = 0x3FF0000000000000;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 9) = 0u;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::list<unsigned int>::__sort<std::__less<void,void>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      int v5 = *(uint64_t **)a2;
      if (*(_DWORD *)(*(void *)a2 + 16) < *(_DWORD *)(result + 16))
      {
        uint64_t v6 = *v5;
        *(void *)(v6 + 8) = v5[1];
        *(void *)v5[1] = v6;
        uint64_t v7 = *(void *)result;
        *(void *)(v7 + 8) = v5;
        *int v5 = v7;
        *(void *)uint64_t result = v5;
        v5[1] = result;
        return (uint64_t)v5;
      }
    }
    else
    {
      unint64_t v10 = a3 >> 1;
      unint64_t v11 = (a3 >> 1) + 1;
      uint64_t v12 = result;
      do
      {
        uint64_t v12 = *(void *)(v12 + 8);
        --v11;
      }
      while (v11 > 1);
      uint64_t v13 = std::list<unsigned int>::__sort<std::__less<void,void>>(result, v12, a3 >> 1, a4);
      uint64_t result = std::list<unsigned int>::__sort<std::__less<void,void>>(v12, a2, a3 - v10, a4);
      unsigned int v14 = *(_DWORD *)(v13 + 16);
      if (*(_DWORD *)(result + 16) >= v14)
      {
        uint64_t v16 = *(uint64_t **)(v13 + 8);
        uint64_t i = result;
        uint64_t result = v13;
      }
      else
      {
        for (uint64_t i = *(void *)(result + 8); i != a2; uint64_t i = *(void *)(i + 8))
        {
          if (*(_DWORD *)(i + 16) >= v14) {
            goto LABEL_14;
          }
        }
        uint64_t i = a2;
LABEL_14:
        uint64_t v17 = *(void *)i;
        uint64_t v18 = *(void *)result;
        *(void *)(v18 + 8) = *(void *)(*(void *)i + 8);
        **(void **)(v17 + 8) = v18;
        uint64_t v19 = *(void *)v13;
        uint64_t v16 = *(uint64_t **)(v13 + 8);
        *(void *)(v19 + 8) = result;
        *(void *)uint64_t result = v19;
        *(void *)uint64_t v13 = v17;
        *(void *)(v17 + 8) = v13;
      }
      if (v16 != (uint64_t *)i && i != a2)
      {
        uint64_t v20 = i;
        do
        {
          unsigned int v21 = *((_DWORD *)v16 + 4);
          if (*(_DWORD *)(i + 16) >= v21)
          {
            uint64_t v16 = (uint64_t *)v16[1];
          }
          else
          {
            for (uint64_t j = *(void *)(i + 8); j != a2; uint64_t j = *(void *)(j + 8))
            {
              if (*(_DWORD *)(j + 16) >= v21) {
                goto LABEL_25;
              }
            }
            uint64_t j = a2;
LABEL_25:
            uint64_t v23 = *(void *)j;
            uint64_t v24 = *(void *)i;
            *(void *)(v24 + 8) = *(void *)(*(void *)j + 8);
            **(void **)(v23 + 8) = v24;
            if (v20 == i) {
              uint64_t v20 = j;
            }
            uint64_t v26 = *v16;
            uint64_t v25 = (uint64_t *)v16[1];
            *(void *)(v26 + 8) = i;
            *(void *)uint64_t i = v26;
            *uint64_t v16 = v23;
            *(void *)(v23 + 8) = v16;
            uint64_t v16 = v25;
            uint64_t i = j;
          }
        }
        while (v16 != (uint64_t *)v20 && i != a2);
      }
    }
  }
  return result;
}

void **PVInputHGNodeMap<unsigned int>::~PVInputHGNodeMap(void **a1)
{
  return a1;
}

void std::__tree<std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGCVBitmap>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGCVBitmap>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGCVBitmap>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HGRef<HGCVBitmap>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HGRef<HGCVBitmap>>,0>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HGRef<HGNode>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1B740A3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740A478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740A550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740A5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B740AB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  if (*v7) {
    (*(void (**)(void))(*(void *)*v7 + 24))(*v7);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B740AD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740ADCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740AE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B740AFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B740D49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740D574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740D654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B740D6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCameraFrameSet;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void setShapeLayerPathFromPointsWithStyle(void *a1, void *a2, id a3, void *a4, void *a5, double a6, double a7)
{
  id v13 = a3;
  id v14 = a5;
  id v15 = a4;
  id v16 = a2;
  id v17 = a1;
  objc_msgSend(v17, "setFillColor:", objc_msgSend(v13, "CGColor"));
  id v18 = v15;
  uint64_t v19 = [v18 CGColor];

  [v17 setStrokeColor:v19];
  [v17 setLineDashPhase:a6];
  [v17 setLineDashPattern:v14];

  [v17 setLineWidth:a7];
  closed_CGPath_with_points = pv_create_closed_CGPath_with_points(v16);

  [v17 setPath:closed_CGPath_with_points];

  CGPathRelease(closed_CGPath_with_points);
}

id crosshairPointsWithSizeAndCenterPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  v12[0] = -(a3 * 0.5);
  v12[1] = a4 * 0.5;
  double v13 = -(a1 * 0.5);
  double v14 = a4 * 0.5;
  double v15 = v13;
  double v16 = -(a4 * 0.5);
  double v17 = v12[0];
  double v18 = v16;
  double v19 = v12[0];
  double v20 = -(a2 * 0.5);
  double v21 = a3 * 0.5;
  double v22 = v20;
  double v23 = a3 * 0.5;
  double v24 = v16;
  double v25 = a1 * 0.5;
  double v26 = v16;
  double v27 = a1 * 0.5;
  double v28 = a4 * 0.5;
  double v29 = a3 * 0.5;
  double v30 = a4 * 0.5;
  double v31 = a3 * 0.5;
  double v32 = a2 * 0.5;
  double v33 = v12[0];
  double v34 = a2 * 0.5;
  uint64_t v8 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:12];
  for (uint64_t i = 0; i != 24; i += 2)
  {
    uint64_t v10 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", a5 + v12[i], a6 + v12[i + 1]);
    [v8 addObject:v10];
  }

  return v8;
}

void ensureNSublayers(void *a1, unint64_t a2)
{
  id v14 = a1;
  unsigned int v3 = [v14 sublayers];
  if ([v3 count] != a2)
  {
    unint64_t v4 = [v3 count];
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      do
      {
        uint64_t v6 = [MEMORY[0x1E4F39C88] layer];
        [v14 addSublayer:v6];

        --v5;
      }
      while (v5);
    }
    uint64_t v7 = [v14 sublayers];
    unint64_t v8 = [v7 count];

    if (v8 > a2)
    {
      uint64_t v9 = [v14 sublayers];
      uint64_t v10 = (void *)[v9 copy];

      uint64_t v11 = [v10 count] - a2;
      if (v11 >= 1)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          double v13 = [v10 objectAtIndexedSubscript:i];
          [v13 removeFromSuperlayer];
        }
      }
      unsigned int v3 = v10;
    }
  }
}

uint64_t __makeCircleCrosshairWithSizeAndCenterPoint_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

uint64_t compareTimedObjects(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = v4;
  if (v3)
  {
    [v3 time];
    if (v5)
    {
LABEL_3:
      [v5 time];
      goto LABEL_6;
    }
  }
  else
  {
    memset(&time1, 0, sizeof(time1));
    if (v4) {
      goto LABEL_3;
    }
  }
  memset(&time2, 0, sizeof(time2));
LABEL_6:
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    if (v3)
    {
      [v3 time];
      if (v5)
      {
LABEL_9:
        [v5 time];
LABEL_13:
        uint64_t v6 = CMTimeCompare(&v9, &v8) > 0;
        goto LABEL_14;
      }
    }
    else
    {
      memset(&v9, 0, sizeof(v9));
      if (v5) {
        goto LABEL_9;
      }
    }
    memset(&v8, 0, sizeof(v8));
    goto LABEL_13;
  }
  uint64_t v6 = -1;
LABEL_14:

  return v6;
}

void sub_1B741364C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74136C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741373C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74137F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7413868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74138E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74139EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B7413A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7413B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7413BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7413C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7413CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7413E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7413FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74142B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1B7414604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741480C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74149A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7414AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7414CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7414E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B7414F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74151CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B741529C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7415B68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

id PVInputHGNodeMap<unsigned int>::GetTimedMetadata(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v2 = a1 + 128;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      CMTime v8 = (uint64_t *)v3;
    }
    else {
      CMTime v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2) {
    id v9 = *(id *)(v5 + 40);
  }
  else {
LABEL_12:
  }
    id v9 = 0;

  return v9;
}

void sub_1B7416158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7416268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

void sub_1B741663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741690C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_1B7416A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7416ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7416CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1B7416DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7416E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "1B741701C: call analysis failed (funcsize=198)"

void sub_1B7417164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7417330(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B7417448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74174FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7417904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7417AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__76(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B7417BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7417C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7417E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7417FA0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B74181E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1B74182D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7418378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7418BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1B7418DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1B7418EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7418FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7419378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7419544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1B7419640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74196D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7419A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7419AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7419C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v19 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1B7419D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7419F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741A0C8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B741A268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Block_object_dispose((const void *)(v23 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B741A344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741A590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741A7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741A9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

__n128 __Block_byref_object_copy__86(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v3;
  __n128 result = *(__n128 *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 16pthread_cond_init((pthread_cond_t *)this, 0) = v7;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v6;
  return result;
}

void sub_1B741AC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741AEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1B741B018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741B1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Block_object_dispose((const void *)(v26 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B741B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741B404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741B54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741B65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B741B748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741B998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__90(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B741BACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741BCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__93(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B741BDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741BE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741C134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B741C294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741C510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

void sub_1B741C8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741C9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741CE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double PCMatrix44Tmpl<double>::leftMult(uint64_t a1, double *a2)
{
  for (uint64_t i = 96; i != 128; i += 8)
  {
    long long v3 = (double *)(a1 + i);
    double v4 = *(double *)(a1 + i - 96);
    double v5 = *(double *)(a1 + i - 64);
    double v6 = *(double *)(a1 + i - 32);
    double v7 = *(double *)(a1 + i);
    *(v3 - 12) = v4 * *a2 + v5 * a2[1] + v6 * a2[2] + v7 * a2[3];
    *(v3 - 8) = v4 * a2[4] + v5 * a2[5] + v6 * a2[6] + v7 * a2[7];
    *(v3 - 4) = v4 * a2[8] + v5 * a2[9] + v6 * a2[10] + v7 * a2[11];
    double result = v4 * a2[12] + v5 * a2[13] + v6 * a2[14] + v7 * a2[15];
    *long long v3 = result;
  }
  return result;
}

void sub_1B741D0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741D194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741D414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741D770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741D85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741D930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741DAFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741DC74(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B741DE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741EE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741EFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_1B741F0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741F290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741F3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B741F4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741F580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741F654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741F6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B741F73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741F7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1B741FAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B741FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1B741FF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "1B74200E4: call analysis failed (funcsize=149)"

void sub_1B7420210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74204A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__84(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B74206FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7420820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7420950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7420C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7420D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7420D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7420E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7420EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7421024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7421178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7422154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, PCString a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void sub_1B7422708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7422768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74227B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7422888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7422960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7422A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7423380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7423478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7423550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7423620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74236AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7423720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7423850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B7423924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74239D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7423CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7423DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7423EF8(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B742406C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6168220, MEMORY[0x1E4FBA1D0]);
}

void sub_1B742415C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void sub_1B74242F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74243D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74244E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B74245BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B742471C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7424A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B7424CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7424EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7424F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74252C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74254DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B74255A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B742572C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7425AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7425C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7425FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B742604C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B742609C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7426180(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B74262A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B7426374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B7426428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7426514(_Unwind_Exception *a1)
{
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_1B7426618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7426708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7426774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7426850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B74269D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7426AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7426B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void HGSynchronizer::~HGSynchronizer(HGSynchronizable **this)
{
  if (!*((unsigned char *)this + 8)) {
    HGSynchronizable::Unlock(*this);
  }
}

{
  if (!*((unsigned char *)this + 8)) {
    HGSynchronizable::Unlock(*this);
  }
}

void __isRunningInMiro_block_invoke()
{
  id v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = [v0 bundleIdentifier];

  isRunningInMiro_s = [v1 isEqualToString:@"com.apple.mobileslideshow"];
}

double pv_simd_vector_scale(float32x4_t a1, float a2)
{
  float32x4_t v2 = vmulq_f32(a1, a1);
  float v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0];
  if (v3 <= -0.00001 || v3 >= 0.00001)
  {
    float v4 = v3;
    float32x2_t v5 = vrsqrte_f32((float32x2_t)LODWORD(v3));
    float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)LODWORD(v4), vmul_f32(v5, v5)));
    a1.i64[0] = vmulq_n_f32(a1, a2 * vmul_f32(v6, vrsqrts_f32((float32x2_t)LODWORD(v4), vmul_f32(v6, v6))).f32[0]).u64[0];
  }
  return *(double *)a1.i64;
}

{
  int8x16_t v2;
  double v3;
  float v4;

  float32x4_t v2 = (int8x16_t)vmulq_f32(a1, a1);
  float v3 = vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)));
  if (v3 <= -0.0000001 || v3 >= 0.0000001)
  {
    float v4 = 1.0 / sqrt(v3) * a2;
    a1.i64[0] = vmulq_n_f32(a1, v4).u64[0];
  }
  return *(double *)a1.i64;
}

float64_t pv_simd_vector_scale@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>, float64x2_t a3@<Q0>)
{
  float64x2_t v3 = *a1;
  float64x2_t v4 = a1[1];
  double v5 = vmulq_f64(v4, v4).f64[0] + vaddvq_f64(vmulq_f64(v3, v3));
  if (v5 <= -0.0000001 || v5 >= 0.0000001)
  {
    a3.f64[0] = 1.0 / sqrt(v5) * a3.f64[0];
    float64x2_t v4 = vmulq_f64(v4, a3);
    float64x2_t v3 = vmulq_n_f64(v3, a3.f64[0]);
  }
  *(void *)&float64_t result = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  v3.f64[1] = result;
  *a2 = v3;
  a2[1] = v4;
  return result;
}

float64x2_t *pv_simd_vector_scale@<X0>(float64x2_t *result@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  float64x2_t v3 = *result;
  float64x2_t v4 = result[1];
  double v5 = vaddvq_f64(vaddq_f64(vmulq_f64(v3, v3), vmulq_f64(v4, v4)));
  if (v5 <= -0.0000001 || v5 >= 0.0000001)
  {
    double v6 = 1.0 / sqrt(v5) * a3;
    float64x2_t v4 = vmulq_n_f64(v4, v6);
    float64x2_t v3 = vmulq_n_f64(v3, v6);
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

float32x2_t pv_simd_lerp(float32x2_t a1, float32x2_t a2, float a3)
{
  return vadd_f32(vmul_n_f32(vsub_f32(a2, a1), a3), a1);
}

double pv_simd_lerp(float64x2_t a1, float64x2_t a2, double a3)
{
  *(void *)&double result = *(_OWORD *)&vaddq_f64(vmulq_n_f64(vsubq_f64(a2, a1), a3), a1);
  return result;
}

float32x2_t pv_simd_lerp(float32x4_t a1, float32x4_t a2, float a3)
{
  return vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(a2, a1), a3));
}

double pv_simd_lerp@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  float64x2_t v4 = vaddq_f64(*a1, vmulq_n_f64(vsubq_f64(*a2, *a1), a4.n128_f64[0]));
  a4.n128_f64[0] = a1[1].f64[0] + (a2[1].f64[0] - a1[1].f64[0]) * a4.n128_f64[0];
  *(float64x2_t *)a3 = v4;
  *(__n128 *)(a3 + 16) = a4;
  return a4.n128_f64[0];
}

double pv_simd_lerp(float32x4_t a1, float32x4_t a2, float a3)
{
  *(void *)&double result = vaddq_f32(vmulq_n_f32(vsubq_f32(a2, a1), a3), a1).u64[0];
  return result;
}

float64x2_t pv_simd_lerp@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  float64x2_t v4 = a1[1];
  float64x2_t v5 = vmulq_n_f64(vsubq_f64(a2[1], v4), a4);
  float64x2_t result = vaddq_f64(*a1, vmulq_n_f64(vsubq_f64(*a2, *a1), a4));
  *a3 = result;
  a3[1] = vaddq_f64(v4, v5);
  return result;
}

{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t result;

  float64x2_t v4 = a1[3];
  float64x2_t v5 = vaddq_f64(*a1, vmulq_n_f64(vsubq_f64(*a2, *a1), a4));
  double v6 = vaddq_f64(a1[1], vmulq_n_f64(vsubq_f64(a2[1], a1[1]), a4));
  double v7 = vmulq_n_f64(vsubq_f64(a2[3], v4), a4);
  float64x2_t result = vaddq_f64(a1[2], vmulq_n_f64(vsubq_f64(a2[2], a1[2]), a4));
  a3[2] = result;
  a3[3] = vaddq_f64(v4, v7);
  *a3 = v5;
  a3[1] = v6;
  return result;
}

float32x4_t pv_simd_lerp@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>)
{
  float32x4_t v4 = vaddq_f32(*a1, vmulq_n_f32(vsubq_f32(*a2, *a1), a4));
  float32x4_t result = vaddq_f32(a1[1], vmulq_n_f32(vsubq_f32(a2[1], a1[1]), a4));
  *a3 = v4;
  a3[1] = result;
  return result;
}

{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t result;

  float32x4_t v4 = vaddq_f32(*a1, vmulq_n_f32(vsubq_f32(*a2, *a1), a4));
  float64x2_t v5 = vaddq_f32(a1[1], vmulq_n_f32(vsubq_f32(a2[1], a1[1]), a4));
  double v6 = vaddq_f32(a1[2], vmulq_n_f32(vsubq_f32(a2[2], a1[2]), a4));
  float32x4_t result = vaddq_f32(a1[3], vmulq_n_f32(vsubq_f32(a2[3], a1[3]), a4));
  a3[2] = v6;
  a3[3] = result;
  *a3 = v4;
  a3[1] = v5;
  return result;
}

BOOL pv_is_finite(double a1)
{
  unsigned int v1 = 0;
  do
  {
    unsigned int v2 = v1;
    double v5 = a1;
    if (v1 > 1) {
      break;
    }
    float v3 = fabsf(*(float *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v1++ & 1))));
  }
  while (v3 < INFINITY || v3 > INFINITY);
  return v2 > 1;
}

BOOL pv_is_finite(__n128 a1)
{
  unsigned int v1 = 0;
  do
  {
    unsigned int v2 = v1;
    __n128 v5 = a1;
    if (v1 > 1) {
      break;
    }
    double v3 = fabs(*(double *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF7 | (8 * (v1++ & 1))));
  }
  while (v3 < INFINITY || v3 > INFINITY);
  return v2 > 1;
}

{
  BOOL result;
  int v2;
  int v3;
  float v4;
  __n128 v5;

  float32x4_t result = 0;
  if (fabsf(a1.n128_f32[0]) != INFINITY)
  {
    unsigned int v2 = 1;
    do
    {
      __n128 v5 = a1;
      double v3 = v2 + 1;
      if (v2 == 3) {
        break;
      }
      float32x4_t v4 = fabsf(*(float *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2++ & 3))));
    }
    while (v4 < INFINITY || v4 > INFINITY);
    return (v3 - 2) > 1;
  }
  return result;
}

{
  unsigned int v1;
  unsigned int v2;
  float v3;
  __n128 v5;

  unsigned int v1 = 0;
  do
  {
    unsigned int v2 = v1;
    __n128 v5 = a1;
    if (v1 > 3) {
      break;
    }
    double v3 = fabsf(*(float *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1++ & 3))));
  }
  while (v3 < INFINITY || v3 > INFINITY);
  return v2 > 3;
}

BOOL pv_is_finite(int8x16_t *a1, double a2, __n128 a3)
{
  BOOL result = 0;
  int8x16_t v5 = *a1;
  if (fabs(*(double *)a1->i64) != INFINITY)
  {
    a3.n128_u64[0] = a1[1].u64[0];
    int v6 = 1;
    v5.i64[1] = vextq_s8(v5, v5, 8uLL).u64[0];
    do
    {
      v9[0] = v5;
      v9[1] = a3;
      int v7 = v6 + 1;
      if (v6 == 3) {
        break;
      }
      double v8 = fabs(*((double *)v9 + (v6++ & 3)));
    }
    while (v8 < INFINITY || v8 > INFINITY);
    return (v7 - 2) > 1;
  }
  return result;
}

BOOL pv_is_finite(long long *a1)
{
  unsigned int v1 = 0;
  long long v3 = *a1;
  long long v2 = a1[1];
  do
  {
    unsigned int v4 = v1;
    v7[0] = v3;
    v7[1] = v2;
    if (v1 > 3) {
      break;
    }
    double v5 = fabs(*((double *)v7 + (v1++ & 3)));
  }
  while (v5 < INFINITY || v5 > INFINITY);
  return v4 > 3;
}

{
  unsigned int v1;
  long long v2;
  long long v3;
  unsigned int v4;
  float v5;
  _OWORD v7[2];

  unsigned int v1 = 0;
  long long v3 = *a1;
  long long v2 = a1[1];
  do
  {
    unsigned int v4 = v1;
    v7[0] = v3;
    v7[1] = v2;
    if (v1 > 7) {
      break;
    }
    double v5 = fabsf(*((float *)v7 + (v1++ & 7)));
  }
  while (v5 < INFINITY || v5 > INFINITY);
  return v4 > 7;
}

{
  unsigned int v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  unsigned int v6;
  double v7;
  _OWORD v9[4];

  unsigned int v1 = 0;
  long long v3 = a1[2];
  long long v2 = a1[3];
  double v5 = *a1;
  unsigned int v4 = a1[1];
  do
  {
    int v6 = v1;
    v9[0] = v5;
    v9[1] = v4;
    _OWORD v9[2] = v3;
    v9[3] = v2;
    if (v1 > 7) {
      break;
    }
    int v7 = fabs(*((double *)v9 + (v1++ & 7)));
  }
  while (v7 < INFINITY || v7 > INFINITY);
  return v6 > 7;
}

{
  unsigned int v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  unsigned int v6;
  float v7;
  _OWORD v9[4];

  unsigned int v1 = 0;
  long long v3 = a1[2];
  long long v2 = a1[3];
  double v5 = *a1;
  unsigned int v4 = a1[1];
  do
  {
    int v6 = v1;
    v9[0] = v5;
    v9[1] = v4;
    _OWORD v9[2] = v3;
    v9[3] = v2;
    if (v1 > 0xF) {
      break;
    }
    int v7 = fabsf(*((float *)v9 + (v1++ & 0xF)));
  }
  while (v7 < INFINITY || v7 > INFINITY);
  return v6 > 0xF;
}

{
  long long v2;
  BOOL result;
  long long v4;
  long long v5;
  long long v6;
  long long v7[2];
  long long v8[2];
  long long v9[2];
  long long v10[2];

  long long v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  BOOL result = pv_is_finite(v10);
  if (result)
  {
    unsigned int v4 = a1[3];
    v9[0] = a1[2];
    v9[1] = v4;
    BOOL result = pv_is_finite(v9);
    if (result)
    {
      double v5 = a1[5];
      v8[0] = a1[4];
      v8[1] = v5;
      BOOL result = pv_is_finite(v8);
      if (result)
      {
        int v6 = a1[7];
        v7[0] = a1[6];
        v7[1] = v6;
        return pv_is_finite(v7);
      }
    }
  }
  return result;
}

uint64_t pv_simd_line_intersection(float32x2_t *a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  float32x2_t v5 = vsub_f32(a3, a2);
  float32x2_t v6 = vsub_f32(a5, a4);
  float v7 = vmuls_lane_f32(v5.f32[0], v6, 1) - vmuls_lane_f32(v6.f32[0], v5, 1);
  if (v7 > -0.00001 && v7 < 0.00001) {
    return 0;
  }
  float32x2_t v8 = vsub_f32(a2, a4);
  float v9 = (float)(vmuls_lane_f32(v5.f32[0], v8, 1) - (float)(v5.f32[1] * v8.f32[0])) / v7;
  if (v9 < 0.0 || v9 > 1.0) {
    return 0;
  }
  float v11 = (float)((float)(v8.f32[1] * v6.f32[0]) - (float)(v8.f32[0] * v6.f32[1])) / v7;
  if (v11 < 0.0 || v11 > 1.0) {
    return 0;
  }
  *a1 = vadd_f32(vmul_n_f32(v5, v11), a2);
  return 1;
}

uint64_t pv_simd_line_intersection(float64x2_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5 = vsubq_f64(a3, a2);
  float64x2_t v6 = vsubq_f64(a5, a4);
  double v7 = vmuld_lane_f64(v5.f64[0], v6, 1) - vmuld_lane_f64(v6.f64[0], v5, 1);
  if (v7 > -0.0000001 && v7 < 0.0000001) {
    return 0;
  }
  float64x2_t v8 = vsubq_f64(a2, a4);
  double v9 = (vmuld_lane_f64(v5.f64[0], v8, 1) - v5.f64[1] * v8.f64[0]) / v7;
  if (v9 < 0.0 || v9 > 1.0) {
    return 0;
  }
  double v11 = (v8.f64[1] * v6.f64[0] - v8.f64[0] * v6.f64[1]) / v7;
  if (v11 < 0.0 || v11 > 1.0) {
    return 0;
  }
  *a1 = vaddq_f64(vmulq_n_f64(v5, v11), a2);
  return 1;
}

void sub_1B74294B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PVCreateInputGraphForPixelBuffer@<X0>(__CVBuffer *a1@<X0>, HGNode **a2@<X8>)
{
  unsigned int v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *a2 = v4;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t result = CVPixelBufferIsPlanar(a1);
  if (result)
  {
    unsigned int v7 = PixelFormatType & 0xFFFFFFEF;
    if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066
      || PixelFormatType == 2016686640
      || PixelFormatType == 2019963440
      || v7 == 875704934
      || PixelFormatType == 2019963442
      || PixelFormatType == 2016686642)
    {
      uint64_t v40 = a2;
      unsigned int Width = CVPixelBufferGetWidth(a1);
      unsigned int Height = CVPixelBufferGetHeight(a1);
      *(void *)&v44.var0 = HGRectMake4i(0, 0, Width, Height);
      *(void *)&v44.var2 = v10;
      int v11 = 1;
      if (PixelFormatType == 2016686640
        || PixelFormatType == 2019963440
        || (PixelFormatType != 2016686642 ? (BOOL v12 = PixelFormatType == 2019963442) : (BOOL v12 = 1),
            !v12 ? (int v11 = 0) : (int v11 = 1),
            PixelFormatType == 2019963442 || PixelFormatType == 2016686642))
      {
        int v13 = 3;
      }
      else
      {
        int v13 = 1;
      }
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v13, 0, &v43);
      id v14 = (HGBitmap *)v43;
      double v15 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v15, v14);
      if (v11) {
        int v16 = 11;
      }
      else {
        int v16 = 10;
      }
      uint64_t v39 = v15;
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v16, 1uLL, &v42);
      double v17 = v42;
      uint64_t v18 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v18, v17);
      if (v15) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v15 + 16))(v15);
      }
      uint64_t v19 = (HGBitmapLoader *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v19);
      (*(void (**)(HGBitmapLoader *, void, HGBitmapLoader *))(*(void *)v19 + 120))(v19, 0, v15);
      (*(void (**)(HGBitmapLoader *, void, float, double, double, double))(*(void *)v19 + 96))(v19, 0, 1.0, 0.0, 0.0, 0.0);
      HGTextureWrap::SetCropRect(v19, &v44);
      *((unsigned char *)v19 + 452) = 1;
      uint64_t v20 = v15;
      if (v15 != v19)
      {
        if (v15) {
          (*(void (**)(HGBitmapLoader *))(*(void *)v15 + 24))(v15);
        }
        uint64_t v20 = v19;
        (*(void (**)(HGBitmapLoader *))(*(void *)v19 + 16))(v19);
      }
      char v41 = v20;
      if (v18) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v18 + 16))(v18);
      }
      double v21 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v21);
      (*(void (**)(HGTextureWrap *, void, HGBitmapLoader *))(*(void *)v21 + 120))(v21, 0, v18);
      (*(void (**)(HGTextureWrap *, void, float, double, double, double))(*(void *)v21 + 96))(v21, 0, 1.0, 0.0, 0.0, 0.0);
      double v22 = (HGXForm *)v18;
      if (v18 != v21)
      {
        if (v18) {
          (*(void (**)(HGBitmapLoader *))(*(void *)v18 + 24))(v18);
        }
        double v22 = (HGXForm *)v21;
        (*(void (**)(HGTextureWrap *))(*(void *)v21 + 16))(v21);
      }
      uint64_t v23 = (HGTransform *)HGObject::operator new(0x90uLL);
      HGTransform::HGTransform(v23);
      (*(void (**)(HGTransform *))(*(void *)v23 + 56))(v23);
      BOOL v27 = PixelFormatType == 2016686642 || PixelFormatType == 2019963442 || v7 == 875704934;
      v24.n128_u64[0] = 2.0;
      v25.n128_u64[0] = 1.0;
      if (!v27) {
        v25.n128_f64[0] = 2.0;
      }
      (*(void (**)(HGTransform *, __n128, __n128, double))(*(void *)v23 + 144))(v23, v24, v25, 1.0);
      double v28 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v28);
      (*(void (**)(HGXForm *, HGTransform *))(*(void *)v28 + 576))(v28, v23);
      (*(void (**)(HGXForm *, void, HGXForm *))(*(void *)v28 + 120))(v28, 0, v22);
      (*(void (**)(HGXForm *, void, double))(*(void *)v28 + 592))(v28, 0, 0.0);
      if (v22 != v28)
      {
        if (v22) {
          (*(void (**)(HGXForm *))(*(void *)v22 + 24))(v22);
        }
        double v22 = v28;
        (*(void (**)(HGXForm *))(*(void *)v28 + 16))(v28);
      }
      double v29 = (HGNode *)HGObject::operator new(0x1C0uLL);
      HGYUVPlanarToRGBA::HGYUVPlanarToRGBA(v29, 2, 0);
      (*(void (**)(HGNode *, void, HGBitmapLoader *))(*(void *)v29 + 120))(v29, 0, v41);
      (*(void (**)(HGNode *, uint64_t, HGXForm *))(*(void *)v29 + 120))(v29, 1, v22);
      CFTypeRef v30 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
      double v31 = v30;
      if (v30)
      {
        if (CFEqual(v30, (CFTypeRef)*MEMORY[0x1E4F24C40]))
        {
          int v32 = 0;
        }
        else if (CFEqual(v31, (CFTypeRef)*MEMORY[0x1E4F24C30]))
        {
          int v32 = 2;
        }
        else
        {
          int v32 = 1;
        }
        CFRelease(v31);
      }
      else
      {
        int v32 = 1;
      }
      float v34 = 0.0;
      if (PixelFormatType != 875704422)
      {
        float v34 = 1.0;
        if ((PixelFormatType & 0xFFFFFFFD) != 0x78663230)
        {
          if ((PixelFormatType & 0xFFFFFFFD) == 0x78343230) {
            float v34 = 4.0;
          }
          else {
            float v34 = 3.0;
          }
        }
      }
      (*(void (**)(HGNode *, void, float, double, double, double))(*(void *)v29 + 96))(v29, 0, (float)v32, 0.0, 0.0, 0.0);
      (*(void (**)(HGNode *, uint64_t, float, double, double, double))(*(void *)v29 + 96))(v29, 1, v34, 0.0, 0.0, 0.0);
      uint64_t v35 = *v40;
      if (*v40 != v29)
      {
        if (v35) {
          (*(void (**)(HGNode *))(*(void *)v35 + 24))(v35);
        }
        *uint64_t v40 = v29;
        (*(void (**)(HGNode *))(*(void *)v29 + 16))(v29);
      }
      (*(void (**)(HGNode *))(*(void *)v29 + 24))(v29);
      (*(void (**)(HGXForm *))(*(void *)v28 + 24))(v28);
      (*(void (**)(HGTransform *))(*(void *)v23 + 24))(v23);
      (*(void (**)(HGTextureWrap *))(*(void *)v21 + 24))(v21);
      if (v22) {
        (*(void (**)(HGXForm *))(*(void *)v22 + 24))(v22);
      }
      (*(void (**)(HGBitmapLoader *))(*(void *)v19 + 24))(v19);
      if (v41) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v41 + 24))(v41);
      }
      if (v18) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v18 + 24))(v18);
      }
      if (v42) {
        (*(void (**)(HGBitmap *))(*(void *)v42 + 24))(v42);
      }
      if (v39) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v39 + 24))(v39);
      }
      uint64_t result = v43;
      if (v43) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v43 + 24))(v43);
      }
    }
    return result;
  }
  if (PixelFormatType <= 1278226535)
  {
    if (PixelFormatType == 1111970369)
    {
      int v33 = 23;
    }
    else
    {
      if (PixelFormatType != 1278226488) {
        return result;
      }
      int v33 = 1;
    }
    goto LABEL_86;
  }
  if (PixelFormatType != 1278226536)
  {
    if (PixelFormatType == 1380411457)
    {
      int v33 = 27;
      goto LABEL_86;
    }
    if (PixelFormatType != 1751411059) {
      return result;
    }
  }
  int v33 = 5;
LABEL_86:
  uint64_t v36 = (HGBitmapLoader **)a2;
  HGCVBitmap::create((HGCVPixelBuffer *)a1, v33, 0, &v44);
  int v37 = *(HGBitmap **)&v44.var0;
  float v38 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v38, v37);
  if (v4 == (HGNode *)v38)
  {
    if (v4) {
      (*(void (**)(HGNode *))(*(void *)v4 + 24))(v4);
    }
  }
  else
  {
    if (v4) {
      (*(void (**)(HGNode *))(*(void *)v4 + 24))(v4);
    }
    *uint64_t v36 = v38;
  }
  uint64_t result = *(void *)&v44.var0;
  if (*(void *)&v44.var0) {
    return (*(uint64_t (**)(void))(**(void **)&v44.var0 + 24))(*(void *)&v44.var0);
  }
  return result;
}

void sub_1B742A080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL PVIsMultiplaneCoreVideo420Format(int a1)
{
  BOOL v2 = a1 == 2016686640 || a1 == 2019963440;
  return (a1 & 0xFFFFFFEF) == 0x34323066 || v2;
}

BOOL PVIsMultiplaneCoreVideo422Format(int a1)
{
  BOOL v2 = a1 == 2016686642 || a1 == 2019963442;
  return (a1 & 0xFFFFFFEF) == 0x34323266 || v2;
}

BOOL PVIs10BitMultiplaneCoreVideoX420Format(int a1)
{
  return a1 == 2016686640 || a1 == 2019963440;
}

BOOL PVIs10BitMultiplaneCoreVideoX422Format(int a1)
{
  return a1 == 2016686642 || a1 == 2019963442;
}

void PVCreateInputGraphForPixelBuffer(__CVBuffer *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, HGNode **a5@<X8>)
{
  id v9 = a2;
  id v10 = a3;
  PVCreateInputGraphForPixelBuffer(a1, a5);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (!CVPixelBufferIsPlanar(a1)
    && (PixelFormatType == 1278226488 || PixelFormatType == 1278226536 || PixelFormatType == 1751411059))
  {
    goto LABEL_25;
  }
  BOOL v12 = *a5;
  if (*a5)
  {
    (*(void (**)(HGNode *))(*(void *)v12 + 16))(*a5);
    id v13 = v9;
    id v14 = v10;
    if (v13)
    {
      uint64_t v23 = v12;
      (*(void (**)(HGNode *))(*(void *)v12 + 16))(v12);
LABEL_11:
      id v22 = 0;
      ColorConformInput((HGColorConform **)&v23, v9, v10, a4, &v22, (HGColorConform **)&v21);
      id v17 = v22;
      if (v23) {
        (*(void (**)(HGNode *))(*(void *)v23 + 24))(v23);
      }
      if (v17)
      {
        uint64_t v18 = [v17 localizedDescription];
        NSLog(&stru_1F119C630.isa, v18);
      }
      uint64_t v19 = v12;
      goto LABEL_17;
    }
  }
  else
  {
    id v15 = v9;
    id v16 = v10;
    if (v15)
    {
      uint64_t v23 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v19 = 0;
  double v21 = v12;
LABEL_17:

  uint64_t v20 = (HGColorConform *)v21;
  if (v12 == v21)
  {
    if (v12) {
      (*(void (**)(HGNode *))(*(void *)v12 + 24))(v12);
    }
  }
  else
  {
    if (v12)
    {
      (*(void (**)(HGNode *))(*(void *)v12 + 24))(v12);
      uint64_t v20 = (HGColorConform *)v21;
    }
    *a5 = (HGNode *)v20;
    double v21 = 0;
  }
  if (v19) {
    (*(void (**)(HGNode *))(*(void *)v19 + 24))(v19);
  }
LABEL_25:
}

void sub_1B742A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  if (*v12) {
    (*(void (**)(void))(*(void *)*v12 + 24))(*v12);
  }

  _Unwind_Resume(a1);
}

void PVCreateInputGraphForPixelBuffer(__CVBuffer *a1@<X0>, PVInstructionGraphContext **a2@<X2>, HGNode **a3@<X8>)
{
  id v8 = +[PVColorSpace pvColorSpaceForCVPixelBuffer:a1];
  if (!v8) {
    NSLog(&cfstr_Pvcreatecvpixe.isa);
  }
  float64x2_t v6 = PVInstructionGraphContext::WorkingColorSpace(*a2);
  int v7 = PVInstructionGraphContext::WorkingColorSpaceConformIntent(*a2);
  PVCreateInputGraphForPixelBuffer(a1, v8, v6, v7, a3);
}

void sub_1B742A9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t PVCreateOutputBufferForHGCVPixelBuffer(__CVBuffer *a1, HGRenderContext *a2, uint64_t *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  *(void *)bytes = 0x4240133DA0E92F00;
  CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 8);
  CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F249F0], v6, kCVAttachmentMode_ShouldPropagate);
  CFRelease(v6);
  OSType PixelFormatType = (HGCV *)CVPixelBufferGetPixelFormatType(a1);
  uint64_t Renderer = HGRenderContext::GetRenderer(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)Renderer + 304))(Renderer);
  if (result) {
    return result;
  }
  if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066) {
    goto LABEL_3;
  }
  if (PixelFormatType == 2016686640 || PixelFormatType == 2019963440) {
    goto LABEL_10;
  }
  if ((PixelFormatType & 0xFFFFFFEF) == 0x34323266
    || PixelFormatType == 2019963442
    || PixelFormatType == 2016686642)
  {
LABEL_3:
    if (PixelFormatType != 2019963442 && PixelFormatType != 2016686642)
    {
      int v12 = 10;
      int v13 = 1;
LABEL_11:
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v13, 0, &v45);
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v12, 1uLL, &v44);
      uint64_t v14 = v45;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
      }
      id v16 = a3 + 2;
      unint64_t v15 = a3[2];
      id v17 = (uint64_t *)a3[1];
      if ((unint64_t)v17 >= v15)
      {
        uint64_t v19 = ((uint64_t)v17 - *a3) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v15 - *a3;
        uint64_t v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v50 = a3 + 2;
        if (v22) {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v22);
        }
        else {
          uint64_t v23 = 0;
        }
        __n128 v24 = &v23[8 * v19];
        *(void *)bytes = v23;
        long long v47 = v24;
        uint64_t v49 = &v23[8 * v22];
        *(void *)__n128 v24 = v14;
        uint64_t v48 = v24 + 8;
        std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a3, bytes);
        uint64_t v18 = (void *)a3[1];
        std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)bytes);
      }
      else
      {
        *id v17 = v14;
        uint64_t v18 = v17 + 1;
        a3[1] = (uint64_t)v18;
      }
      a3[1] = (uint64_t)v18;
      uint64_t v25 = v44;
      if (v44)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        uint64_t v18 = (void *)a3[1];
      }
      if ((unint64_t)v18 >= *v16)
      {
        uint64_t v27 = ((uint64_t)v18 - *a3) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = *v16 - *a3;
        uint64_t v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
          uint64_t v29 = v27 + 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        uint64_t v50 = a3 + 2;
        if (v30) {
          double v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v30);
        }
        else {
          double v31 = 0;
        }
        int v32 = &v31[8 * v27];
        *(void *)bytes = v31;
        long long v47 = v32;
        uint64_t v49 = &v31[8 * v30];
        *(void *)int v32 = v25;
        uint64_t v48 = v32 + 8;
        std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a3, bytes);
        uint64_t v26 = (void *)a3[1];
        std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)bytes);
      }
      else
      {
        *uint64_t v18 = v25;
        uint64_t v26 = v18 + 1;
        a3[1] = (uint64_t)v26;
      }
      a3[1] = (uint64_t)v26;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
      }
      uint64_t result = v45;
      if (v45) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v45 + 24))(v45);
      }
      return result;
    }
LABEL_10:
    int v12 = 11;
    int v13 = 3;
    goto LABEL_11;
  }
  int v33 = HGCV::HGFormatForCVPixelFormat(PixelFormatType, 0, v10);
  HGCVBitmap::create((HGCVPixelBuffer *)a1, v33, 0, &v45);
  uint64_t v34 = v45;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
  }
  unint64_t v35 = a3[2];
  uint64_t v36 = (uint64_t *)a3[1];
  if ((unint64_t)v36 >= v35)
  {
    uint64_t v38 = ((uint64_t)v36 - *a3) >> 3;
    if ((unint64_t)(v38 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v39 = v35 - *a3;
    uint64_t v40 = v39 >> 2;
    if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
      uint64_t v40 = v38 + 1;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v40;
    }
    uint64_t v50 = a3 + 2;
    if (v41) {
      uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v41);
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = &v42[8 * v38];
    *(void *)bytes = v42;
    long long v47 = v43;
    uint64_t v49 = &v42[8 * v41];
    *(void *)uint64_t v43 = v34;
    uint64_t v48 = v43 + 8;
    std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a3, bytes);
    int v37 = (void *)a3[1];
    std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)bytes);
  }
  else
  {
    *uint64_t v36 = v34;
    int v37 = v36 + 1;
    a3[1] = (uint64_t)v37;
  }
  a3[1] = (uint64_t)v37;
  uint64_t result = v45;
  if (v45) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v45 + 24))(v45);
  }
  return result;
}

void sub_1B742AEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  _Unwind_Resume(a1);
}

id PVPixelBufferCreationOptions(void)
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v0 setObject:MEMORY[0x1E4F1CC08] forKeyedSubscript:*MEMORY[0x1E4F24D20]];

  return v0;
}

void sub_1B742B0A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PVCreateCGImageRefByConvertingCVPixelBuffer(HGCVPixelBuffer **a1)
{
  HGCVPixelBuffer::lock(*a1, 1uLL);
  if (PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::onceToken != -1) {
    dispatch_once(&PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::onceToken, &__block_literal_global_3);
  }
  BOOL v2 = [MEMORY[0x1E4F1E050] imageWithCVPixelBuffer:*((void *)*a1 + 3)];
  long long v3 = (void *)PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::ciContext;
  size_t v4 = HGCVPixelBuffer::w(*a1, 0);
  uint64_t v5 = objc_msgSend(v3, "createCGImage:fromRect:", v2, 0.0, 0.0, (double)v4, (double)HGCVPixelBuffer::h(*a1, 0));
  HGCVPixelBuffer::unlock(*a1, 1uLL);

  return v5;
}

void sub_1B742B184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z43PVCreateCGImageRefByConvertingCVPixelBuffer5HGRefI15HGCVPixelBufferE_block_invoke()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  id v0 = (void *)MEMORY[0x1E4F1E018];
  uint64_t v4 = *MEMORY[0x1E4F1E1E0];
  v5[0] = MEMORY[0x1E4F1CC28];
  unsigned int v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];
  uint64_t v2 = [v0 contextWithOptions:v1];
  long long v3 = (void *)PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::ciContext;
  PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::ciContext = v2;
}

void sub_1B742B24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGImageRef PVCreateCGImageRefFromCVPixelBuffer(HGCVPixelBuffer **a1, uint64_t a2)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)*a1 + 3));
  if (PixelFormatType == 1111970369 || PixelFormatType == 1380411457)
  {
    CFDataRef v6 = *a1;
    (*(void (**)(HGCVPixelBuffer *))(*(void *)v6 + 16))(v6);
    HGCVPixelBuffer::lock(v6, 1uLL);
    int v7 = HGCVPixelBuffer::ptr(v6, 0);
    size_t v8 = HGCVPixelBuffer::rowBytes(v6, 0);
    size_t v9 = HGCVPixelBuffer::h(v6, 0);
    id v10 = CGDataProviderCreateWithData(v6, v7, v9 * v8, (CGDataProviderReleaseDataCallback)freeAndUnlockUnderlyingHGCVPixelBuffer);
    size_t v11 = HGCVPixelBuffer::w(v6, 0);
    size_t v12 = HGCVPixelBuffer::h(v6, 0);
    size_t v13 = *(int *)(a2 + 4);
    size_t v14 = HGCVPixelBuffer::rowBytes(v6, 0);
    CGImageRef v15 = CGImageCreate(v11, v12, v13, 4 * v13, v14, *(CGColorSpaceRef *)(a2 + 16), *(_DWORD *)(a2 + 8), v10, 0, 1, kCGRenderingIntentDefault);
    CGDataProviderRelease(v10);
    return v15;
  }
  else
  {
    v20[0] = HIBYTE(PixelFormatType);
    v20[1] = BYTE2(PixelFormatType);
    v20[2] = BYTE1(PixelFormatType);
    v20[3] = PixelFormatType;
    v20[4] = 0;
    NSLog(&cfstr_WarningSlowCon.isa, v20);
    id v17 = *a1;
    uint64_t v19 = v17;
    if (v17) {
      (*(void (**)(HGCVPixelBuffer *))(*(void *)v17 + 16))(v17);
    }
    uint64_t v18 = PVCreateCGImageRefByConvertingCVPixelBuffer(&v19);
    if (v17) {
      (*(void (**)(HGCVPixelBuffer *))(*(void *)v17 + 24))(v17);
    }
    return (CGImageRef)v18;
  }
}

void sub_1B742B47C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t freeAndUnlockUnderlyingHGCVPixelBuffer(HGCVPixelBuffer *a1, const void *a2)
{
  HGCVPixelBuffer::unlock(a1, 1uLL);
  long long v3 = *(uint64_t (**)(HGCVPixelBuffer *))(*(void *)a1 + 24);

  return v3(a1);
}

void PVCreateCVPixelBufferFromCGImageRef(CGImage *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X2>, HGObject **a4@<X8>)
{
  unsigned int Width = (_anonymous_namespace_ *)CGImageGetWidth(a1);
  unsigned int Height = (char *)CGImageGetHeight(a1);
  HGCVPixelBuffer::create(a3, Width, Height, *(_DWORD *)a2, a4);
  HGCVPixelBuffer::lock((HGCVPixelBuffer *)*a4, 0);
  id v10 = HGCVPixelBuffer::ptr((HGCVPixelBuffer *)*a4, 0);
  size_t v11 = *(int *)(a2 + 4);
  size_t v12 = HGCVPixelBuffer::rowBytes((HGCVPixelBuffer *)*a4, 0);
  size_t v13 = CGBitmapContextCreate(v10, (size_t)Width, (size_t)Height, v11, v12, *(CGColorSpaceRef *)(a2 + 16), *(_DWORD *)(a2 + 8));
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = (double)(unint64_t)Width;
  v16.size.height = (double)(unint64_t)Height;
  CGContextClearRect(v13, v16);
  v17.origin.x = 0.0;
  v17.origin.y = 0.0;
  v17.size.width = (double)(unint64_t)Width;
  v17.size.height = (double)(unint64_t)Height;
  CGContextDrawImage(v13, v17, a1);
  CGContextRelease(v13);
  size_t v14 = +[PVColorSpace pvColorSpaceFromCGColorSpace:*(void *)(a2 + 16)];
  PVAddColorSpaceAttributesToCVPixelBuffer(*((__CVBuffer **)*a4 + 3), v14);
  HGCVPixelBuffer::unlock((HGCVPixelBuffer *)*a4, 0);
}

void sub_1B742B66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (*v10) {
    (*(void (**)(void))(*(void *)*v10 + 24))(*v10);
  }
  _Unwind_Resume(exception_object);
}

HGBitmapUtils *PVCreateCVPixelBufferFromCGImageRefAndGainMap@<X0>(HGBitmapUtils *result@<X0>, HGBitmapUtils *a2@<X1>, uint64_t a3@<X2>, const char **a4@<X3>, HGNode ****a5@<X8>)
{
  if (result && a2)
  {
    size_t v9 = result;
    HGBitmapUtils::createBitmapLoader(result, &v41);
    HGBitmapUtils::createBitmapLoader(a2, &v40);
    id v10 = +[PVColorSpace pvColorSpaceFromCGColorSpace:*(void *)(a3 + 16)];
    if (!v10)
    {
      id v10 = +[PVColorSpace sRGBColorSpace];
    }
    size_t v11 = v41;
    uint64_t v39 = v41;
    if (v41) {
      (*(void (**)(HGBitmapLoader *))(*(void *)v41 + 16))(v41);
    }
    uint64_t v28 = [v10 nclcTriplet];
    PVCreateColorConform([v28 hgColorPrimary], objc_msgSend(v28, "hgTransferFunction"), 0, 3, 8, 0, &v38);
    (*(void (**)(HGColorConform *, void, HGBitmapLoader *))(*(void *)v38 + 120))(v38, 0, v11);
    unsigned int Width = (_anonymous_namespace_ *)CGImageGetWidth(v9);
    unsigned int Height = (char *)CGImageGetHeight(v9);
    size_t v14 = CGImageGetWidth(a2);
    size_t v15 = CGImageGetHeight(a2);
    CGRect v16 = HGObject::operator new(0x1D0uLL);
    v16[27] = 0u;
    v16[28] = 0u;
    v16[25] = 0u;
    v16[26] = 0u;
    v16[23] = 0u;
    v16[24] = 0u;
    v16[21] = 0u;
    v16[22] = 0u;
    v16[19] = 0u;
    v16[20] = 0u;
    v16[17] = 0u;
    v16[18] = 0u;
    v16[15] = 0u;
    v16[16] = 0u;
    v16[13] = 0u;
    v16[14] = 0u;
    v16[11] = 0u;
    v16[12] = 0u;
    v16[9] = 0u;
    v16[10] = 0u;
    v16[7] = 0u;
    v16[8] = 0u;
    v16[5] = 0u;
    v16[6] = 0u;
    v16[3] = 0u;
    v16[4] = 0u;
    v16[1] = 0u;
    v16[2] = 0u;
    *CGRect v16 = 0u;
    HGNode::HGNode((HGNode *)v16);
    *(void *)CGRect v16 = &unk_1F119B230;
    *((void *)v16 + 51) = 0;
    *((_DWORD *)v16 + 104) = 1065353216;
    *(_OWORD *)((char *)v16 + 424) = 0u;
    *(_OWORD *)((char *)v16 + 44pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
    off_1F119B2A8((HGNode *)v16, 0, (HGNode *)v11);
    (*(void (**)(_OWORD *, uint64_t, HGBitmapLoader *))(*(void *)v16 + 120))(v16, 1, v40);
    (*(void (**)(_OWORD *, void, float, double, double, double))(*(void *)v16 + 96))(v16, 0, 1.265, 0.0, 0.0, 0.0);
    (*(void (**)(_OWORD *, uint64_t, float, float, double, double))(*(void *)v16 + 96))(v16, 1, (float)(unint64_t)Width, (float)(unint64_t)Height, 0.0, 0.0);
    (*(void (**)(_OWORD *, uint64_t, float, float, double, double))(*(void *)v16 + 96))(v16, 2, (float)v14, (float)v15, 0.0, 0.0);
    PVCreateColorConform(3, 8, 0, 3, 1, 0, &v37);
    (*(void (**)(HGColorConform *, void, _OWORD *))(*(void *)v37 + 120))(v37, 0, v16);
    if (v11 != v37)
    {
      if (v11) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v11 + 24))(v11);
      }
      size_t v11 = v37;
      uint64_t v39 = v37;
      if (v37) {
        (*(void (**)(HGColorConform *))(*(void *)v37 + 16))(v37);
      }
    }
    CGRect v17 = (HGBitmapLoader *)HGObject::operator new(0x1B0uLL);
    HGHLG::SDRToHLG::SDRToHLG((uint64_t)v17, 2, 1);
    (*(void (**)(HGBitmapLoader *, void, HGBitmapLoader *))(*(void *)v17 + 120))(v17, 0, v11);
    if (v11 != v17)
    {
      if (v11) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v11 + 24))(v11);
      }
      uint64_t v39 = v17;
      (*(void (**)(HGBitmapLoader *))(*(void *)v17 + 16))(v17);
    }
    uint64_t v18 = +[PVColorSpace rec2100HLGColorSpace];
    uint64_t v19 = [(PVColorSpace *)v18 nclcTriplet];
    PVCreateColorConform(3, 8, 0, [v19 hgColorPrimary], objc_msgSend(v19, "hgTransferFunction"), 0, &v36);
    uint64_t v20 = v39;
    (*(void (**)(HGColorConform *, void, HGBitmapLoader *))(*(void *)v36 + 120))(v36, 0, v39);
    if (v20 != v36)
    {
      if (v20) {
        (*(void (**)(HGColorConform *))(*(void *)v20 + 24))(v20);
      }
      uint64_t v20 = v36;
      uint64_t v39 = v36;
      if (v36) {
        (*(void (**)(HGColorConform *))(*(void *)v36 + 16))(v36);
      }
    }
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v21 = HGRectMake4i(0, 0, Width, Height);
    PVCreateYUVPlanesWithBackfillBlackBackground(v21, v22, v21, v22, &v39, v19, 2016686640, (uint64_t *)&v33);
    HGCVPixelBuffer::create(a4, Width, Height, 0x78343230u, (HGObject **)&v42);
    HGCVBitmap::create((HGCVPixelBuffer **)&v42, 3, 0, &v32);
    HGCVBitmap::create((HGCVPixelBuffer **)&v42, 11, 1uLL, &v31);
    uint64_t v23 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
    HGRenderNode::HGRenderNode(v23);
    if (v34 == v33) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    HGRenderNode::SetNode(v23, *v33);
    HGRenderNode::SetBitmap(v23, v32);
    __n128 v24 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
    HGRenderNode::HGRenderNode(v24);
    if ((unint64_t)((char *)v34 - (char *)v33) <= 8) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    HGRenderNode::SetNode(v24, v33[1]);
    HGRenderNode::SetBitmap(v24, v31);
    uint64_t v25 = (HGRenderJob *)HGObject::operator new(0x160uLL);
    HGRenderJob::HGRenderJob(v25);
    HGUserJob::SetPriority((uint64_t)v25, 1);
    HGUserJob::SetState((uint64_t)v25, 2);
    HGRenderJob::SetPriority((uint64_t)v25, 10);
    HGRenderJob::AddRenderNode(v25, v23);
    HGRenderJob::AddRenderNode(v25, v24);
    PVRenderManager::INSTANCE(v26, &v29);
    PVRenderManager::GetRenderQueue(v29, &v30);
    if (v29) {
      (*(void (**)(PVRenderManager *))(*(void *)v29 + 24))(v29);
    }
    if (v30)
    {
      uint64_t v27 = HGRenderQueue::ExecuteRenderJob(v30, v25);
      if (v27)
      {
        NSLog(&cfstr_HgrenderqueueE.isa, v27);
        *a5 = 0;
      }
      else
      {
        PVAddColorSpaceAttributesToCVPixelBuffer((__CVBuffer *)v42[3], v18);
        *a5 = v42;
        uint64_t v42 = 0;
      }
      if (v30) {
        (*(void (**)(HGRenderQueue *))(*(void *)v30 + 24))(v30);
      }
    }
    else
    {
      *a5 = 0;
    }
    if (v25) {
      (*(void (**)(HGRenderJob *))(*(void *)v25 + 24))(v25);
    }
    if (v24) {
      (*(void (**)(HGRenderNode *))(*(void *)v24 + 24))(v24);
    }
    if (v23) {
      (*(void (**)(HGRenderNode *))(*(void *)v23 + 24))(v23);
    }
    if (v31) {
      (*(void (**)(HGBitmap *))(*(void *)v31 + 24))(v31);
    }
    if (v32) {
      (*(void (**)(HGBitmap *))(*(void *)v32 + 24))(v32);
    }
    if (v42) {
      ((void (*)(HGNode ***))(*v42)[3])(v42);
    }
    uint64_t v42 = &v33;
    std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    if (v36) {
      (*(void (**)(HGColorConform *))(*(void *)v36 + 24))(v36);
    }

    (*(void (**)(HGBitmapLoader *))(*(void *)v17 + 24))(v17);
    if (v37) {
      (*(void (**)(HGColorConform *))(*(void *)v37 + 24))(v37);
    }
    (*(void (**)(_OWORD *))(*(void *)v16 + 24))(v16);
    if (v38) {
      (*(void (**)(HGColorConform *))(*(void *)v38 + 24))(v38);
    }

    if (v20) {
      (*(void (**)(HGColorConform *))(*(void *)v20 + 24))(v20);
    }

    if (v40) {
      (*(void (**)(HGBitmapLoader *))(*(void *)v40 + 24))(v40);
    }
    uint64_t result = v41;
    if (v41) {
      return (HGBitmapUtils *)(*(uint64_t (**)(HGBitmapLoader *))(*(void *)v41 + 24))(v41);
    }
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

void sub_1B742C0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  uint64_t v24 = *(void *)(v22 - 96);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
  }
  _Unwind_Resume(exception_object);
}

void PVCreateYUVPlanesWithBackfillBlackBackground(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int a7, uint64_t *a8)
{
  id v15 = a6;
  if (!HGRectContainsRect(a1, a2, a3, a4))
  {
    CGRect v17 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v17);
  }
  uint64_t v16 = *a5;
  if (*a5) {
    (*(void (**)(void))(*(void *)v16 + 16))(*a5);
  }
  PVCreateColorConform([v15 hgColorPrimary], objc_msgSend(v15, "hgTransferFunction"), 0, objc_msgSend(v15, "hgColorPrimary"), objc_msgSend(v15, "hgTransferFunction"), objc_msgSend(v15, "hgYCbCrMatrix"), &v29);
  (*(void (**)(HGColorConform *, void, uint64_t))(*(void *)v29 + 120))(v29, 0, v16);
  if (a7 > 2016686641)
  {
    switch(a7)
    {
      case 2016686642:
        uint64_t v18 = 14;
        goto LABEL_15;
      case 2019963440:
        uint64_t v18 = 13;
        goto LABEL_15;
      case 2019963442:
        uint64_t v18 = 15;
LABEL_15:
        uint64_t v19 = 25;
        goto LABEL_19;
    }
LABEL_17:
    uint64_t v18 = 8;
    goto LABEL_18;
  }
  if (a7 != 875704422)
  {
    if (a7 == 2016686640)
    {
      uint64_t v18 = 12;
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  uint64_t v18 = 9;
LABEL_18:
  uint64_t v19 = 24;
LABEL_19:
  HGColorConform::SetOutputPixelFormat((uint64_t)v29, v19, (char *)v18);
  uint64_t v20 = (HGNode *)HGObject::operator new(0x1B0uLL);
  HGYUV444ToPlanarLuma::HGYUV444ToPlanarLuma(v20, 2);
  uint64_t v28 = v20;
  (*(void (**)(HGNode *, void, HGColorConform *))(*(void *)v20 + 120))(v20, 0, v29);
  uint64_t v21 = (HGNode **)a8[1];
  if ((unint64_t)v21 >= a8[2])
  {
    uint64_t v23 = std::vector<HGRef<HGNode>>::__push_back_slow_path<HGRef<HGNode> const&>(a8, (uint64_t *)&v28);
  }
  else
  {
    uint64_t v22 = (uint64_t)v28;
    *uint64_t v21 = v28;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
    }
    uint64_t v23 = (uint64_t)(v21 + 1);
    a8[1] = (uint64_t)(v21 + 1);
  }
  a8[1] = v23;
  uint64_t v24 = (HGNode *)HGObject::operator new(0x1B0uLL);
  HGYUV444ToPlanarChroma::HGYUV444ToPlanarChroma(v24, 1, 0);
  uint64_t v27 = v24;
  (*(void (**)(HGNode *, void, HGColorConform *))(*(void *)v24 + 120))(v24, 0, v29);
  uint64_t v25 = (HGNode **)a8[1];
  if ((unint64_t)v25 >= a8[2])
  {
    uint64_t v26 = std::vector<HGRef<HGNode>>::__push_back_slow_path<HGRef<HGNode> const&>(a8, (uint64_t *)&v27);
    uint64_t v24 = v27;
    a8[1] = v26;
    if (!v24) {
      goto LABEL_28;
    }
  }
  else
  {
    *uint64_t v25 = v24;
    (*(void (**)(HGNode *))(*(void *)v24 + 16))(v24);
    a8[1] = (uint64_t)(v25 + 1);
  }
  (*(void (**)(HGNode *))(*(void *)v24 + 24))(v24);
LABEL_28:
  if (v28) {
    (*(void (**)(HGNode *))(*(void *)v28 + 24))(v28);
  }
  if (v29) {
    (*(void (**)(HGColorConform *))(*(void *)v29 + 24))(v29);
  }
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
}

void sub_1B742CAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v14 + 8) = v15;
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }

  _Unwind_Resume(a1);
}

void PVCreateCVPixelBufferFromCVPixelBufferWithColorSpaces(__CVBuffer *a1@<X0>, void *a2@<X1>, void *a3@<X2>, const char **a4@<X3>, HGColorConform ***a5@<X8>)
{
  id v12 = a2;
  id v9 = a3;
  if (a1)
  {
    unsigned int Width = (_anonymous_namespace_ *)CVPixelBufferGetWidth(a1);
    unsigned int Height = (char *)CVPixelBufferGetHeight(a1);
    PVCreateInputGraphForPixelBuffer(a1, &v13);
    PVCreateCVPixelBufferWithColorSpaces((HGColorConform **)&v13, Width, Height, v12, v9, a4, a5);
    if (v13) {
      (*(void (**)(HGNode *))(*(void *)v13 + 24))(v13);
    }
  }
  else
  {
    *a5 = 0;
  }
}

void sub_1B742CDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void PVCreateCVPixelBufferWithColorSpaces(HGColorConform **a1@<X0>, _anonymous_namespace_ *a2@<X1>, char *a3@<X2>, void *a4@<X3>, void *a5@<X4>, const char **a6@<X5>, HGColorConform ***a7@<X8>)
{
  id v13 = a4;
  uint64_t v14 = a5;
  if (v14)
  {
    unint64_t v41 = *a1;
    uint64_t v15 = v41;
    if (v41)
    {
      (*(void (**)(HGColorConform *))(*(void *)v41 + 16))(v41);
      uint64_t v40 = v41;
      (*(void (**)(HGColorConform *))(*(void *)v41 + 16))(v41);
    }
    else
    {
      uint64_t v40 = 0;
    }
    id v39 = 0;
    ColorConformInput(&v40, v13, v14, 1, &v39, (HGColorConform **)&v36);
    id v16 = v39;
    if (v15 == (HGColorConform *)v36)
    {
      if (v15) {
        (*(void (**)(HGColorConform *))(*(void *)v15 + 24))(v15);
      }
    }
    else
    {
      if (v15) {
        (*(void (**)(HGColorConform *))(*(void *)v15 + 24))(v15);
      }
      uint64_t v15 = (HGColorConform *)v36;
      unint64_t v41 = (HGColorConform *)v36;
      uint64_t v36 = 0;
    }
    if (v40) {
      (*(void (**)(HGColorConform *))(*(void *)v40 + 24))(v40);
    }
    if (v16)
    {
      NSLog(&cfstr_ErrorInColorCo.isa, v13, v14);
      *a7 = 0;
    }
    else
    {
      unint64_t v30 = a7;
      id v31 = v13;
      BOOL v17 = [(PVColorSpace *)v14 isHDRSpace];
      if (v17) {
        OSType v18 = 2016686640;
      }
      else {
        OSType v18 = 875704438;
      }
      uint64_t v36 = 0;
      int v37 = 0;
      uint64_t v38 = 0;
      uint64_t v19 = HGRectMake4i(0, 0, a2, a3);
      uint64_t v21 = v20;
      uint64_t v22 = [(PVColorSpace *)v14 nclcTriplet];
      PVCreateYUVPlanesWithBackfillBlackBackground(v19, v21, v19, v21, &v41, v22, v18, (uint64_t *)&v36);

      HGCVPixelBuffer::create(a6, a2, a3, v18, (HGObject **)&v42);
      if (v17) {
        int v23 = 3;
      }
      else {
        int v23 = 1;
      }
      id v13 = v31;
      HGCVBitmap::create((HGCVPixelBuffer **)&v42, v23, 0, &v35);
      id v16 = 0;
      if (v17) {
        int v24 = 11;
      }
      else {
        int v24 = 10;
      }
      HGCVBitmap::create((HGCVPixelBuffer **)&v42, v24, 1uLL, &v34);
      uint64_t v25 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
      HGRenderNode::HGRenderNode(v25);
      if (v37 == (HGColorConform *)v36) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      HGRenderNode::SetNode(v25, *v36);
      HGRenderNode::SetBitmap(v25, v35);
      uint64_t v26 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
      HGRenderNode::HGRenderNode(v26);
      if ((unint64_t)(v37 - (HGColorConform *)v36) <= 8) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      HGRenderNode::SetNode(v26, v36[1]);
      HGRenderNode::SetBitmap(v26, v34);
      uint64_t v27 = (HGRenderJob *)HGObject::operator new(0x160uLL);
      HGRenderJob::HGRenderJob(v27);
      HGUserJob::SetPriority((uint64_t)v27, 1);
      HGUserJob::SetState((uint64_t)v27, 2);
      HGRenderJob::SetPriority((uint64_t)v27, 10);
      HGRenderJob::AddRenderNode(v27, v25);
      HGRenderJob::AddRenderNode(v27, v26);
      PVRenderManager::INSTANCE(v28, &v32);
      PVRenderManager::GetRenderQueue(v32, &v33);
      if (v32) {
        (*(void (**)(PVRenderManager *))(*(void *)v32 + 24))(v32);
      }
      if (v33)
      {
        uint64_t v29 = HGRenderQueue::ExecuteRenderJob(v33, v27);
        if (v29)
        {
          NSLog(&cfstr_HgrenderqueueE_0.isa, v29);
          HGRenderQueue *v30 = 0;
        }
        else
        {
          PVAddColorSpaceAttributesToCVPixelBuffer(v42[3], v14);
          HGRenderQueue *v30 = v42;
          uint64_t v42 = 0;
        }
        if (v33) {
          (*(void (**)(HGRenderQueue *))(*(void *)v33 + 24))(v33);
        }
      }
      else
      {
        HGRenderQueue *v30 = 0;
      }
      if (v27) {
        (*(void (**)(HGRenderJob *))(*(void *)v27 + 24))(v27);
      }
      if (v26) {
        (*(void (**)(HGRenderNode *))(*(void *)v26 + 24))(v26);
      }
      if (v25) {
        (*(void (**)(HGRenderNode *))(*(void *)v25 + 24))(v25);
      }
      if (v34) {
        (*(void (**)(HGBitmap *))(*(void *)v34 + 24))(v34);
      }
      if (v35) {
        (*(void (**)(HGBitmap *))(*(void *)v35 + 24))(v35);
      }
      if (v42) {
        (*((void (**)(HGColorConform **))*v42 + 3))(v42);
      }
      uint64_t v42 = (HGColorConform **)&v36;
      std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    }

    if (v15) {
      (*(void (**)(HGColorConform *))(*(void *)v15 + 24))(v15);
    }
  }
  else
  {
    *a7 = 0;
  }
}

void sub_1B742D3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
  }
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 24))(a17);
  }
  uint64_t v24 = *(void *)(v22 - 88);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
  }
  *(void *)(v22 - 88) = &a18;
  std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 88));
  uint64_t v25 = *(void *)(v22 - 96);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }

  _Unwind_Resume(a1);
}

void PVCreateCVPixelBufferFromCGImageRefWithColorSpaces(HGBitmapUtils *a1@<X0>, void *a2@<X1>, void *a3@<X2>, const char **a4@<X3>, HGColorConform ***a5@<X8>)
{
  id v9 = a2;
  id v10 = a3;
  if (a1)
  {
    HGBitmapUtils::createBitmapLoader(a1, &v15);
    size_t v11 = v15;
    uint64_t v14 = v15;
    if (v15) {
      (*(void (**)(HGBitmapLoader *))(*(void *)v15 + 16))(v15);
    }
    unsigned int Width = (_anonymous_namespace_ *)CGImageGetWidth(a1);
    unsigned int Height = (char *)CGImageGetHeight(a1);
    PVCreateCVPixelBufferWithColorSpaces(&v14, Width, Height, v9, v10, a4, a5);
    if (v11) {
      (*(void (**)(HGBitmapLoader *))(*(void *)v11 + 24))(v11);
    }
    if (v15) {
      (*(void (**)(HGBitmapLoader *))(*(void *)v15 + 24))(v15);
    }
  }
  else
  {
    *a5 = 0;
  }
}

void sub_1B742D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

uint64_t PVMaximumCVPixelBufferSize(void)
{
  id v0 = &PSEmitter::PSEmitter_wavePhaseChanInfo::_PSEmitter_wavePhaseChanInfo;
  {
    id v0 = &PSEmitter::PSEmitter_wavePhaseChanInfo::_PSEmitter_wavePhaseChanInfo;
    if (v2)
    {
      PVMaximumCVPixelBufferSize(void)::maxCVPixelBufferSize = PVMaximumCVPixelBufferSize(void)::$_0::operator()();
      id v0 = &PSEmitter::PSEmitter_wavePhaseChanInfo::_PSEmitter_wavePhaseChanInfo;
    }
  }
  return v0[172];
}

uint64_t PVMaximumCVPixelBufferSize(void)::$_0::operator()()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = *(void *)"";
  block[2] = ___ZZ26PVMaximumCVPixelBufferSizevENK3__0clEv_block_invoke;
  block[3] = &unk_1E61690D8;
  block[4] = &v3;
  if (PVMaximumCVPixelBufferSize(void)::$_0::operator() const(void)::once != -1) {
    dispatch_once(&PVMaximumCVPixelBufferSize(void)::$_0::operator() const(void)::once, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

BOOL PVCanCreateCVPixelBuffer(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  double v3 = (double)(unint64_t)PVMaximumCVPixelBufferSize();
  return height <= v3 && width <= v3;
}

void PVAddColorSpaceAttributesToCVPixelBuffer(__CVBuffer *a1, PVColorSpace *a2)
{
  double v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = [(PVColorSpace *)v3 nclcTriplet];
    if ([v5 colorPrimary])
    {
      int v6 = (const void *)[v5 colorPrimary];
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90], v6, kCVAttachmentMode_ShouldPropagate);
    }
    if ([v5 transferFunction])
    {
      int v7 = (const void *)[v5 transferFunction];
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], v7, kCVAttachmentMode_ShouldPropagate);
    }
    if ([v5 ycbcrMatrix])
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      {
        __cxa_atexit((void (*)(void *))std::unique_ptr<PVGCDLock>::~unique_ptr[abi:ne180100], &PVPixelFormatIsYCbCr::s_mapLock, &dword_1B73F3000);
      }
      {
        qword_1EB9A0860 = 0;
        qword_1EB9A0858 = 0;
        PVPixelFormatIsYCbCr::s_formatIsYCbCr = (uint64_t)&qword_1EB9A0858;
        __cxa_atexit((void (*)(void *))std::map<unsigned int,BOOL>::~map[abi:ne180100], &PVPixelFormatIsYCbCr::s_formatIsYCbCr, &dword_1B73F3000);
      }
      if (PVPixelFormatIsYCbCr::onceToken != -1) {
        dispatch_once(&PVPixelFormatIsYCbCr::onceToken, &__block_literal_global_22);
      }
      uint64_t v13 = 0;
      uint64_t v14 = &v13;
      uint64_t v15 = 0x2020000000;
      char v16 = 0;
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = *(void *)"";
      v11[2] = ___ZL20PVPixelFormatIsYCbCrj_block_invoke_2;
      v11[3] = &unk_1E6169100;
      OSType v12 = PixelFormatType;
      v11[4] = &v13;
      dispatch_sync(*(dispatch_queue_t *)PVPixelFormatIsYCbCr::s_mapLock, v11);
      int v9 = *((unsigned __int8 *)v14 + 24);
      _Block_object_dispose(&v13, 8);
      if (v9)
      {
        id v10 = (const void *)[v5 ycbcrMatrix];
        CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18], v10, kCVAttachmentMode_ShouldPropagate);
      }
    }
  }
}

void sub_1B742DC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVCreateHGBitmapWithStorage(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, HGBitmap **a5@<X8>)
{
  uint64_t v14 = a4;
  uint64_t v10 = HGFormatUtils::rowBytesHint(a3, (const char *)(a2 - a1), v9);
  size_t v11 = malloc_type_valloc((((uint64_t)(a2 - (a1 & 0xFFFFFFFF00000000)) >> 32) * v10 + 4095) & 0xFFFFFFFFFFFFF000, 0xD8DD7037uLL);
  OSType v12 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v12, a1, a2, a3, v11, v10);
  *a5 = v12;
  uint64_t v13 = (PVOwnedBufferStorage *)HGObject::operator new(0x20uLL);
  PVOwnedBufferStorage::PVOwnedBufferStorage(v13, v11, v14);
  HGBitmap::SetStorage(v12, v13);
  (*(void (**)(PVOwnedBufferStorage *))(*(void *)v13 + 24))(v13);
}

void sub_1B742DDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  HGObject::operator delete(v11);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }

  _Unwind_Resume(a1);
}

void PVCreateHGBitmapFromCGImageRefWithStorage(CGImage *a1@<X0>, PVColorSpace *a2@<X1>, HGBitmap **a3@<X8>)
{
  uint64_t v25 = a2;
  unsigned int Width = (const char *)CGImageGetWidth(a1);
  unint64_t Height = CGImageGetHeight(a1);
  size_t BitsPerPixel = CGImageGetBitsPerPixel(a1);
  size_t BitsPerComponent = CGImageGetBitsPerComponent(a1);
  CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo(a1);
  BOOL v11 = AlphaInfo == kCGImageAlphaFirst || AlphaInfo == kCGImageAlphaPremultipliedFirst;
  uint64_t v12 = PGHelium::convertBitsPerChannel((PGHelium *)(BitsPerPixel / BitsPerComponent), BitsPerComponent, v11);
  size_t v14 = HGFormatUtils::rowBytesHint(v12, Width, v13);
  uint64_t v15 = malloc_type_valloc((Height * v14 + 4095) & 0xFFFFFFFFFFFFF000, 0xD1EEE70EuLL);
  char v16 = [(PVColorSpace *)v25 cgColorSpace];
  uint32_t v17 = CGImageGetAlphaInfo(a1);
  OSType v18 = CGBitmapContextCreate(v15, (size_t)Width, Height, BitsPerComponent, v14, v16, v17);
  v27.origin.x = 0.0;
  v27.origin.y = 0.0;
  v27.size.double width = (double)(unint64_t)Width;
  v27.size.double height = (double)Height;
  CGContextClearRect(v18, v27);
  v28.origin.x = 0.0;
  v28.origin.y = 0.0;
  v28.size.double width = (double)(unint64_t)Width;
  v28.size.double height = (double)Height;
  CGContextDrawImage(v18, v28, a1);
  CGContextRelease(v18);
  uint64_t v20 = HGRectMake4f(v19, 0.0, 0.0, (float)(unint64_t)Width, (float)Height);
  uint64_t v22 = v21;
  int v23 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v23, v20, v22, v12, v15, v14);
  *a3 = v23;
  uint64_t v24 = (PVOwnedBufferStorage *)HGObject::operator new(0x20uLL);
  PVOwnedBufferStorage::PVOwnedBufferStorage(v24, v15, v25);
  HGBitmap::SetStorage(v23, v24);
  (*(void (**)(PVOwnedBufferStorage *))(*(void *)v24 + 24))(v24);
}

void sub_1B742E00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  HGObject::operator delete(v11);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZZ26PVMaximumCVPixelBufferSizevENK3__0clEv_block_invoke(HGMetalDeviceInfo *a1)
{
  uint64_t result = HGMetalDeviceInfo::getMainDevice(a1);
  *(_DWORD *)(*(void *)(*((void *)a1 + 4) + 8) + 24) = *(_DWORD *)(result + 48);
  return result;
}

id **std::unique_ptr<PVGCDLock>::~unique_ptr[abi:ne180100](id **a1)
{
  return a1;
}

uint64_t std::map<unsigned int,BOOL>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void ___ZL20PVPixelFormatIsYCbCrj_block_invoke()
{
}

uint64_t **___ZL20PVPixelFormatIsYCbCrj_block_invoke_2(uint64_t a1)
{
  int v2 = (OSType *)(a1 + 40);
  uint64_t v3 = qword_1EB9A0858;
  if (!qword_1EB9A0858)
  {
    OSType v4 = *v2;
LABEL_14:
    CFDictionaryRef v9 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, v4);
    if (v9)
    {
      CFDictionaryRef v10 = v9;
      Value = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F24EB8]);
      if (Value)
      {
        BOOL v12 = CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
        size_t v14 = v2;
        *((unsigned char *)std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)&PVPixelFormatIsYCbCr::s_formatIsYCbCr, v2, (uint64_t)&std::piecewise_construct, &v14)+ 32) = v12;
      }
      else
      {
        size_t v14 = v2;
        *((unsigned char *)std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)&PVPixelFormatIsYCbCr::s_formatIsYCbCr, v2, (uint64_t)&std::piecewise_construct, &v14)+ 32) = 0;
      }
      CFRelease(v10);
    }
    else
    {
      size_t v14 = v2;
      *((unsigned char *)std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)&PVPixelFormatIsYCbCr::s_formatIsYCbCr, v2, (uint64_t)&std::piecewise_construct, &v14)+ 32) = 0;
    }
    goto LABEL_20;
  }
  OSType v4 = *v2;
  uint64_t v5 = &qword_1EB9A0858;
  do
  {
    OSType v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      size_t v8 = (uint64_t *)v3;
    }
    else {
      size_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = (uint64_t *)v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == &qword_1EB9A0858 || v4 < *((_DWORD *)v5 + 7)) {
    goto LABEL_14;
  }
LABEL_20:
  size_t v14 = v2;
  uint64_t result = std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)&PVPixelFormatIsYCbCr::s_formatIsYCbCr, v2, (uint64_t)&std::piecewise_construct, &v14);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *((unsigned char *)result + 32);
  return result;
}

id **std::unique_ptr<PVGCDLock>::reset[abi:ne180100](id **result, id *a2)
{
  int v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {

    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  BOOL v7 = a1 + 1;
  OSType v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        CFDictionaryRef v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        OSType v6 = *v9;
        BOOL v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      OSType v6 = v9[1];
      if (!v6)
      {
        BOOL v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFDictionaryRef v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((unsigned char *)v11 + 32) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void PVOwnedBufferStorage::PVOwnedBufferStorage(PVOwnedBufferStorage *this, void *a2, PVColorSpace *a3)
{
  uint64_t v5 = a3;
  HGObject::HGObject(this);
  *(void *)this = &unk_1F1088EE8;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = v5;
}

void sub_1B742E4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVOwnedBufferStorage::~PVOwnedBufferStorage(PVOwnedBufferStorage *this)
{
  PVOwnedBufferStorage::~PVOwnedBufferStorage(this);

  HGObject::operator delete(v1);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1088EE8;
  int v2 = (void *)*((void *)this + 2);
  if (v2) {
    free(v2);
  }

  HGObject::~HGObject(this);
}

uint64_t std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v11 = *(void *)(v9 - 8);
      v9 -= 8;
      uint64_t v10 = v11;
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t v7 = *((void *)&v17 + 1);
      }
      v7 -= 8;
      *((void *)&v17 + 1) = v7;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B742E684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(uint64_t **)(result[2] + 8);
  int v2 = *(uint64_t **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
      uint64_t result = (uint64_t *)std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
  return result;
}

uint64_t std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void **std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<HGRef<HGBitmap>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 8;
      uint64_t result = std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100](v4, (uint64_t *)(v1 - 8));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<HGRef<HGNode>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<HGRef<HGNode>>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t std::vector<HGRef<HGNode>>::__push_back_slow_path<HGRef<HGNode> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  OSType v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  long long v16 = v11;
  long long v17 = &v10[8 * v9];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v11 = v16;
  }
  long long v16 = v11 + 8;
  std::vector<HGRef<HGNode>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<HGRef<HGNode>>::~__split_buffer(v15);
  return v13;
}

void sub_1B742E9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<HGRef<HGNode>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<HGRef<HGNode>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v11 = *(void *)(v9 - 8);
      v9 -= 8;
      uint64_t v10 = v11;
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t v7 = *((void *)&v17 + 1);
      }
      v7 -= 8;
      *((void *)&v17 + 1) = v7;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B742EB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(uint64_t **)(result[2] + 8);
  uint64_t v2 = *(uint64_t **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
      uint64_t result = (uint64_t *)std::allocator<HGRef<HGNode>>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<HGRef<HGNode>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<HGRef<HGNode>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 8;
      uint64_t result = std::allocator<HGRef<HGNode>>::destroy[abi:ne180100](v4, (uint64_t *)(v1 - 8));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t pv_buffer_size_for_string_representation(_OWORD *a1, uint64_t a2)
{
  long long v2 = a1[5];
  v7[4] = a1[4];
  v7[5] = v2;
  long long v3 = a1[7];
  v7[6] = a1[6];
  v7[7] = v3;
  long long v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  long long v5 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v5;
  return pv_get_string_representation((uint64_t)v7, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  *(void *)&long long v91 = 0;
  long long v90 = 0uLL;
  float64x2_t v8 = *(float64x2_t *)(a1 + 48);
  v89[0] = *(float64x2_t *)(a1 + 32);
  v89[1] = v8;
  int euler_angles = pv_simd_quaternion_get_euler_angles(v89, 4, (uint64_t)&v90);
  if (a2) {
    size_t v9 = a3;
  }
  else {
    size_t v9 = 0;
  }
  int v10 = snprintf(a2, v9, "translation:");
  uint64_t v11 = 0;
  uint64_t v12 = v10;
  do
  {
    if (a2) {
      uint64_t v13 = &a2[v12];
    }
    else {
      uint64_t v13 = 0;
    }
    if (a2) {
      size_t v14 = a3 - v12;
    }
    else {
      size_t v14 = 0;
    }
    int v15 = snprintf(v13, v14, "\n    %s: ", pv_get_string_representation[v11]);
    uint64_t v16 = v12 + v15;
    int v17 = v15 + v10;
    long long v18 = *(_OWORD *)(a1 + 16);
    v88[0] = *(_OWORD *)a1;
    v88[1] = v18;
    if (a2) {
      uint64_t v19 = &a2[v16];
    }
    else {
      uint64_t v19 = 0;
    }
    if (a2) {
      size_t v20 = a3 - v16;
    }
    else {
      size_t v20 = 0;
    }
    int string_representation = pv_get_string_representation(*((double *)v88 + (v11 & 3)), v19, v20, a4);
    int v10 = v17 + string_representation;
    uint64_t v12 = v16 + string_representation;
    ++v11;
  }
  while (v11 != 3);
  if (a2) {
    uint64_t v22 = &a2[v12];
  }
  else {
    uint64_t v22 = 0;
  }
  if (a2) {
    size_t v23 = a3 - v12;
  }
  else {
    size_t v23 = 0;
  }
  int v24 = snprintf(v22, v23, "\nscale:");
  uint64_t v25 = 0;
  int v26 = v24 + v10;
  uint64_t v27 = v12 + v24;
  do
  {
    if (a2) {
      CGRect v28 = &a2[v27];
    }
    else {
      CGRect v28 = 0;
    }
    if (a2) {
      size_t v29 = a3 - v27;
    }
    else {
      size_t v29 = 0;
    }
    int v30 = snprintf(v28, v29, "\n    %s: ", pv_get_string_representation[v25]);
    uint64_t v31 = v27 + v30;
    int v32 = v30 + v26;
    long long v33 = *(_OWORD *)(a1 + 80);
    v87[0] = *(_OWORD *)(a1 + 64);
    v87[1] = v33;
    if (a2) {
      uint64_t v34 = &a2[v31];
    }
    else {
      uint64_t v34 = 0;
    }
    if (a2) {
      size_t v35 = a3 - v31;
    }
    else {
      size_t v35 = 0;
    }
    int v36 = pv_get_string_representation(*((double *)v87 + (v25 & 3)), v34, v35, a4);
    int v26 = v32 + v36;
    uint64_t v27 = v31 + v36;
    ++v25;
  }
  while (v25 != 3);
  if (a2) {
    int v37 = &a2[v27];
  }
  else {
    int v37 = 0;
  }
  if (a2) {
    size_t v38 = a3 - v27;
  }
  else {
    size_t v38 = 0;
  }
  id v39 = "FAILED";
  if (euler_angles) {
    id v39 = "OK";
  }
  uint64_t v81 = a1;
  int v40 = snprintf(v37, v38, "\nrotation: %s (%s)", "ZXY", v39);
  uint64_t v41 = 0;
  int v42 = v40 + v26;
  uint64_t v43 = v27 + v40;
  unsigned int v83 = a4;
  uint64_t v44 = a4;
  do
  {
    if (a2) {
      uint64_t v45 = &a2[v43];
    }
    else {
      uint64_t v45 = 0;
    }
    if (a2) {
      size_t v46 = a3 - v43;
    }
    else {
      size_t v46 = 0;
    }
    int v47 = snprintf(v45, v46, "\n    %s: ", pv_get_string_representation[v41]);
    uint64_t v48 = v43 + v47;
    v86[0] = v90;
    v86[1] = v91;
    if (a2) {
      uint64_t v49 = &a2[v48];
    }
    else {
      uint64_t v49 = 0;
    }
    if (a2) {
      size_t v50 = a3 - v48;
    }
    else {
      size_t v50 = 0;
    }
    int v51 = pv_get_string_representation(*((double *)v86 + (v41 & 3)) * 180.0 / 3.14159265, v49, v50, v44);
    uint64_t v52 = v48 + v51;
    if (a2) {
      unsigned __int8 v53 = &a2[v52];
    }
    else {
      unsigned __int8 v53 = 0;
    }
    if (a2) {
      size_t v54 = a3 - v52;
    }
    else {
      size_t v54 = 0;
    }
    int v55 = snprintf(v53, v54, "° (");
    uint64_t v56 = v52 + v55;
    v85[0] = v90;
    v85[1] = v91;
    if (a2) {
      char v57 = &a2[v56];
    }
    else {
      char v57 = 0;
    }
    if (a2) {
      size_t v58 = a3 - v56;
    }
    else {
      size_t v58 = 0;
    }
    int v59 = pv_get_string_representation(*((double *)v85 + (v41 & 3)), v57, v58, v44);
    uint64_t v60 = v56 + v59;
    int v61 = v47 + v42 + v51 + v55 + v59;
    if (a2) {
      v62 = &a2[v60];
    }
    else {
      v62 = 0;
    }
    if (a2) {
      size_t v63 = a3 - v60;
    }
    else {
      size_t v63 = 0;
    }
    int v64 = snprintf(v62, v63, ")");
    int v42 = v61 + v64;
    uint64_t v43 = v60 + v64;
    ++v41;
  }
  while (v41 != 3);
  if (a2) {
    v65 = &a2[v43];
  }
  else {
    v65 = 0;
  }
  if (a2) {
    size_t v66 = a3 - v43;
  }
  else {
    size_t v66 = 0;
  }
  int v67 = snprintf(v65, v66, "\nshear:");
  uint64_t v68 = 0;
  LODWORD(v69) = v67 + v42;
  uint64_t v70 = v43 + v67;
  do
  {
    if (a2) {
      v71 = &a2[v70];
    }
    else {
      v71 = 0;
    }
    if (a2) {
      size_t v72 = a3 - v70;
    }
    else {
      size_t v72 = 0;
    }
    int v73 = snprintf(v71, v72, "\n    %s: ", pv_get_string_representation[v68]);
    uint64_t v74 = v70 + v73;
    int v75 = v73 + v69;
    long long v76 = *(_OWORD *)(v81 + 112);
    v84[0] = *(_OWORD *)(v81 + 96);
    v84[1] = v76;
    if (a2) {
      v77 = &a2[v74];
    }
    else {
      v77 = 0;
    }
    if (a2) {
      size_t v78 = a3 - v74;
    }
    else {
      size_t v78 = 0;
    }
    int v79 = pv_get_string_representation(*((double *)v84 + (v68 & 3)), v77, v78, v83);
    uint64_t v69 = (v75 + v79);
    uint64_t v70 = v74 + v79;
    ++v68;
  }
  while (v68 != 3);
  return v69;
}

BOOL pv_transform_info_make(simd_float4x4 a1, PVTransformInfo *a2)
{
  if (a1.columns[3].f32[3] > -0.00001 && a1.columns[3].f32[3] < 0.00001) {
    return 0;
  }
  uint64_t v4 = MEMORY[0x1E4F149A0];
  *(double *)v114.columns[0].i64 = pv_simd_normalize(a1);
  float64x2_t v6 = vcvtq_f64_f32(v5);
  *(double *)&long long v7 = *((float *)&v7 + 2);
  *(float64x2_t *)a2 = v6;
  *((_OWORD *)a2 + 1) = v7;
  v114.columns[0].i32[3] = *(_DWORD *)(v4 + 12);
  v114.columns[1].i32[3] = *(_DWORD *)(v4 + 28);
  int32x4_t v99 = (int32x4_t)v114.columns[1];
  int32x4_t v106 = (int32x4_t)v114.columns[0];
  v114.columns[2].i32[3] = *(_DWORD *)(v4 + 44);
  v114.columns[3] = *(simd_float4 *)(v4 + 48);
  __n128 v85 = (__n128)v114.columns[3];
  __n128 v92 = (__n128)v114.columns[2];
  *(double *)v8.i64 = pv_simd_matrix_get_row(v114, 0);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  *(float32x2_t *)v9.i8 = vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  unsigned __int32 v10 = vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1)).u32[0];
  *((double *)a2 + 8) = sqrtf(vaddv_f32(*(float32x2_t *)v9.i8));
  *(float32x2_t *)v9.i8 = vrsqrte_f32((float32x2_t)v10);
  *(float32x2_t *)v9.i8 = vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v10, vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)));
  float32x4_t v82 = vmulq_n_f32(v8, vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v10, vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8))).f32[0]);
  *(double *)v115.columns[0].i64 = pv_simd_matrix_set_row(0, v106, v99, v92, v85, (int32x4_t)v82);
  int32x4_t v100 = (int32x4_t)v115.columns[1];
  int32x4_t v107 = (int32x4_t)v115.columns[0];
  __n128 v86 = (__n128)v115.columns[3];
  __n128 v93 = (__n128)v115.columns[2];
  *(double *)v11.i64 = pv_simd_matrix_get_row(v115, 1);
  int8x16_t v12 = (int8x16_t)vmulq_f32(v11, v82);
  *(double *)v12.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *((void *)a2 + 12) = v12.i64[0];
  *(double *)v116.columns[0].i64 = pv_simd_matrix_set_row(1, v107, v100, v93, v86, (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v11.f32), vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v82.f32), *(double *)v12.i64))), vsubq_f64(vcvt_hight_f64_f32(v11), vmulq_n_f64(vcvt_hight_f64_f32(v82), *(double *)v12.i64))));
  int32x4_t v101 = (int32x4_t)v116.columns[1];
  int32x4_t v108 = (int32x4_t)v116.columns[0];
  __n128 v87 = (__n128)v116.columns[3];
  __n128 v94 = (__n128)v116.columns[2];
  *(double *)v13.i64 = pv_simd_matrix_get_row(v116, 1);
  int8x16_t v14 = (int8x16_t)vmulq_f32(v13, v13);
  *(float32x2_t *)v14.i8 = vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  unsigned __int32 v15 = vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1)).u32[0];
  *((double *)a2 + 9) = sqrtf(vaddv_f32(*(float32x2_t *)v14.i8));
  *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v15);
  *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15, vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
  *(double *)v117.columns[0].i64 = pv_simd_matrix_set_row(1, v108, v101, v94, v87, (int32x4_t)vmulq_n_f32(v13, vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15, vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8))).f32[0]));
  int32x4_t v102 = (int32x4_t)v117.columns[1];
  int32x4_t v109 = (int32x4_t)v117.columns[0];
  __n128 v88 = (__n128)v117.columns[3];
  __n128 v95 = (__n128)v117.columns[2];
  *((double *)a2 + 12) = *((double *)a2 + 12) / *((double *)a2 + 9);
  *(double *)v16.i64 = pv_simd_matrix_get_row(v117, 0);
  float32x4_t v83 = v16;
  v118.columns[1] = (simd_float4)v102;
  v118.columns[0] = (simd_float4)v109;
  v118.columns[3] = (simd_float4)v88;
  v118.columns[2] = (simd_float4)v95;
  *(double *)v17.i64 = pv_simd_matrix_get_row(v118, 2);
  int8x16_t v18 = (int8x16_t)vmulq_f32(v83, v17);
  *(double *)v18.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)));
  *((void *)a2 + 13) = v18.i64[0];
  *(double *)v119.columns[0].i64 = pv_simd_matrix_set_row(2, v109, v102, v95, v88, (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v17.f32), vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v83.f32), *(double *)v18.i64))), vsubq_f64(vcvt_hight_f64_f32(v17), vmulq_n_f64(vcvt_hight_f64_f32(v83), *(double *)v18.i64))));
  int32x4_t v103 = (int32x4_t)v119.columns[1];
  int32x4_t v110 = (int32x4_t)v119.columns[0];
  __n128 v89 = (__n128)v119.columns[3];
  __n128 v96 = (__n128)v119.columns[2];
  *(double *)v19.i64 = pv_simd_matrix_get_row(v119, 1);
  float32x4_t v84 = v19;
  v120.columns[1] = (simd_float4)v103;
  v120.columns[0] = (simd_float4)v110;
  v120.columns[3] = (simd_float4)v89;
  v120.columns[2] = (simd_float4)v96;
  *(double *)v20.i64 = pv_simd_matrix_get_row(v120, 2);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v84, v20);
  *(double *)v21.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *((void *)a2 + 14) = v21.i64[0];
  *(double *)v121.columns[0].i64 = pv_simd_matrix_set_row(2, v110, v103, v96, v89, (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v20.f32), vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v84.f32), *(double *)v21.i64))), vsubq_f64(vcvt_hight_f64_f32(v20), vmulq_n_f64(vcvt_hight_f64_f32(v84), *(double *)v21.i64))));
  int32x4_t v104 = (int32x4_t)v121.columns[1];
  int32x4_t v111 = (int32x4_t)v121.columns[0];
  __n128 v90 = (__n128)v121.columns[3];
  __n128 v97 = (__n128)v121.columns[2];
  *(double *)v22.i64 = pv_simd_matrix_get_row(v121, 2);
  int8x16_t v23 = (int8x16_t)vmulq_f32(v22, v22);
  *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  unsigned __int32 v24 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1)).u32[0];
  *((double *)a2 + 1pthread_cond_init((pthread_cond_t *)this, 0) = sqrtf(vaddv_f32(*(float32x2_t *)v23.i8));
  *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v24);
  *(float32x2_t *)v23.i8 = vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v24, vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)));
  *(double *)v34.columns[0].i64 = pv_simd_matrix_set_row(2, v111, v104, v97, v90, (int32x4_t)vmulq_n_f32(v22, vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v24, vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8))).f32[0]));
  float32x4_t v25 = (float32x4_t)v34.columns[0];
  v34.columns[0].i64[0] = *((void *)a2 + 10);
  double v26 = *((double *)a2 + 13) / *(double *)v34.columns[0].i64;
  *(double *)v34.columns[0].i64 = *((double *)a2 + 14) / *(double *)v34.columns[0].i64;
  *((double *)a2 + 13) = v26;
  *((void *)a2 + 14) = v34.columns[0].i64[0];
  float32x4_t v27 = (float32x4_t)vextq_s8((int8x16_t)v34.columns[2], (int8x16_t)v34.columns[2], 8uLL);
  float32x4_t v29 = (float32x4_t)vextq_s8(v28, v28, 0xCuLL);
  float32x4_t v30 = (float32x4_t)vextq_s8((int8x16_t)v34.columns[2], (int8x16_t)v34.columns[2], 0xCuLL);
  float32x4_t v31 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
  float32x4_t v32 = (float32x4_t)vextq_s8(v28, v28, 4uLL);
  float32x4_t v33 = (float32x4_t)vextq_s8((int8x16_t)v34.columns[2], (int8x16_t)v34.columns[2], 4uLL);
  v34.columns[0] = (simd_float3)vmulq_f32(v25, vaddq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v34.columns[1], (int8x16_t)v34.columns[1], 0xCuLL), vsubq_f32(vmulq_f32(v33, v31), vmulq_f32(v27, v32))), vaddq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v34.columns[1], (int8x16_t)v34.columns[1], 4uLL), vsubq_f32(vmulq_f32(v27, v29), vmulq_f32(v30, v31))), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v34.columns[1], (int8x16_t)v34.columns[1],
                                                       8uLL),
                                        vsubq_f32(vmulq_f32(v30, v32), vmulq_f32(v33, v29))))));
  v31.i64[0] = vextq_s8((int8x16_t)v34.columns[0], (int8x16_t)v34.columns[0], 8uLL).u64[0];
  simd_float4 v91 = (simd_float4)v28;
  simd_float4 v98 = (simd_float4)v25;
  simd_float3 v105 = v34.columns[1];
  simd_float3 v112 = v34.columns[2];
  if (vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v34.columns[0].f32, *(int32x2_t *)v31.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v34.columns[0].f32, *(int32x2_t *)v31.f32))) < 0.0)
  {
    float64x2_t v35 = vnegq_f64(*((float64x2_t *)a2 + 5));
    *((float64x2_t *)a2 + 4) = vnegq_f64(*((float64x2_t *)a2 + 4));
    *((float64x2_t *)a2 + 5) = v35;
    v34.columns[0] = (simd_float3)v25;
    *(double *)v36.i64 = pv_simd_negate(v34);
    v36.i32[3] = v98.i32[3];
    v37.i32[3] = v105.i32[3];
    v38.i32[3] = v112.i32[3];
    simd_float4 v98 = v36;
    simd_float3 v105 = v37;
    simd_float3 v112 = v38;
  }
  long long v39 = *((_OWORD *)a2 + 5);
  v113[4] = *((_OWORD *)a2 + 4);
  v113[5] = v39;
  long long v40 = *((_OWORD *)a2 + 7);
  v113[6] = *((_OWORD *)a2 + 6);
  v113[7] = v40;
  long long v41 = *((_OWORD *)a2 + 1);
  v113[0] = *(_OWORD *)a2;
  v113[1] = v41;
  long long v42 = *((_OWORD *)a2 + 3);
  v113[2] = *((_OWORD *)a2 + 2);
  v113[3] = v42;
  BOOL result = pv_is_finite((uint64_t)v113);
  if (result)
  {
    v122.columns[0] = v98;
    v122.columns[1] = (simd_float4)v105;
    v122.columns[2] = (simd_float4)v112;
    v122.columns[3] = v91;
    *(double *)v43.i64 = pv_simd_matrix_get_rotation_matrix(v122);
    float v46 = *(float *)&v45.i32[2] + (float)(*(float *)v43.i32 + *(float *)&v44.i32[1]);
    if (v46 >= 0.0)
    {
      float v56 = sqrtf(v46 + 1.0);
      float32_t v57 = v56 + v56;
      float32x2_t v58 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v56 + v56));
      float32x2_t v59 = vmul_f32(v58, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v56 + v56), v58));
      v59.i32[0] = vmul_f32(v59, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v56 + v56), v59)).u32[0];
      float32x2_t v70 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v44, vuzp1q_s32(v44, v45)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v45, vzip2q_s32(v45, v43))), v59.f32[0]);
      v60.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v44.i8).u32[0];
      v60.f32[1] = v57;
      v59.i32[1] = 0.25;
      float32x2_t v73 = vmul_f32(v60, v59);
    }
    else if (*(float *)v43.i32 < *(float *)&v44.i32[1] || *(float *)v43.i32 < *(float *)&v45.i32[2])
    {
      float v48 = 1.0 - *(float *)v43.i32;
      if (*(float *)&v44.i32[1] >= *(float *)&v45.i32[2])
      {
        float v74 = sqrtf(*(float *)&v44.i32[1] + (float)(v48 - *(float *)&v45.i32[2]));
        *(float *)&unsigned int v75 = v74 + v74;
        float32x2_t v76 = vrecpe_f32((float32x2_t)v75);
        float32x2_t v77 = vmul_f32(v76, vrecps_f32((float32x2_t)v75, v76));
        v78.i32[0] = vmul_f32(v77, vrecps_f32((float32x2_t)v75, v77)).u32[0];
        v77.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v44.i8).u32[0];
        v77.i32[1] = v75;
        float32x2_t v79 = (float32x2_t)vrev64_s32(*(int32x2_t *)v45.i8);
        float32x2_t v80 = (float32x2_t)vzip2q_s32(v44, v43).u64[0];
        v81.i32[0] = vadd_f32(v79, v80).u32[0];
        v81.i32[1] = vsub_f32(v79, v80).i32[1];
        float32x2_t v73 = vmul_n_f32(v81, v78.f32[0]);
        v78.i32[1] = 0.25;
        float32x2_t v70 = vmul_f32(v77, v78);
      }
      else
      {
        float32x2_t v49 = (float32x2_t)__PAIR64__(v43.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)&v45.i32[2] + (float)(v48 - *(float *)&v44.i32[1]))));
        float32x2_t v50 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v43, v44), *(float32x2_t *)v45.i8);
        float32x2_t v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 0);
        float32x2_t v52 = vsub_f32(*(float32x2_t *)v43.i8, v51);
        v51.i32[0] = 2.0;
        v51.i32[0] = vmul_f32(v49, v51).u32[0];
        v51.i32[1] = v52.i32[1];
        float32x2_t v53 = vrecpe_f32((float32x2_t)v51.u32[0]);
        float32x2_t v54 = vmul_f32(v53, vrecps_f32((float32x2_t)v51.u32[0], v53));
        v52.i32[0] = vmul_f32(v54, vrecps_f32((float32x2_t)v51.u32[0], v54)).u32[0];
        float32x2_t v70 = vmul_n_f32(v50, v52.f32[0]);
        __asm { FMOV            V2.2S, #0.25 }
        _D2.i32[1] = v52.i32[0];
        float32x2_t v73 = vmul_f32(v51, _D2);
      }
    }
    else
    {
      float32x2_t v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 0);
      float32x2_t v62 = vadd_f32(*(float32x2_t *)v43.i8, v61);
      v61.i32[0] = 2.0;
      v61.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v43.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v43.i32+ (float)((float)(1.0 - *(float *)&v44.i32[1]) - *(float *)&v45.i32[2])))), v61).u32[0];
      v61.i32[1] = v62.i32[1];
      float32x2_t v63 = vrecpe_f32((float32x2_t)v61.u32[0]);
      float32x2_t v64 = vmul_f32(v63, vrecps_f32((float32x2_t)v61.u32[0], v63));
      LODWORD(v65) = vmul_f32(v64, vrecps_f32((float32x2_t)v61.u32[0], v64)).u32[0];
      __asm { FMOV            V5.2S, #0.25 }
      _D5.f32[1] = v65;
      float32x2_t v70 = vmul_f32(v61, _D5);
      float32x2_t v71 = (float32x2_t)vzip2q_s32(v43, v44).u64[0];
      v72.i32[0] = vadd_f32(v71, *(float32x2_t *)v45.i8).u32[0];
      v72.i32[1] = vsub_f32(v71, *(float32x2_t *)&v45).i32[1];
      float32x2_t v73 = vmul_n_f32(v72, v65);
    }
    *((float64x2_t *)a2 + 2) = vcvtq_f64_f32(v70);
    *((float64x2_t *)a2 + 3) = vcvtq_f64_f32(v73);
    return 1;
  }
  return result;
}

BOOL pv_is_finite(uint64_t a1)
{
  __n128 v2 = *(__n128 *)(a1 + 16);
  v9[0] = *(int8x16_t *)a1;
  v9[1] = (int8x16_t)v2;
  BOOL result = pv_is_finite(v9, *(double *)v9[0].i64, v2);
  if (result)
  {
    *(_OWORD *)&v10.vector.f64[2] = *(_OWORD *)(a1 + 48);
    v8[0] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v10.vector.f64 = v8[0];
    v8[1] = *(_OWORD *)&v10.vector.f64[2];
    BOOL result = pv_is_finite(v10, v8);
    if (result)
    {
      __n128 v4 = *(__n128 *)(a1 + 80);
      v7[0] = *(int8x16_t *)(a1 + 64);
      v7[1] = (int8x16_t)v4;
      BOOL result = pv_is_finite(v7, *(double *)v7[0].i64, v4);
      if (result)
      {
        __n128 v5 = *(__n128 *)(a1 + 112);
        v6[0] = *(int8x16_t *)(a1 + 96);
        v6[1] = (int8x16_t)v5;
        return pv_is_finite(v6, *(double *)v6[0].i64, v5);
      }
    }
  }
  return result;
}

{
  __n128 v2;
  BOOL result;
  __n128 v4;
  __n128 v5;
  int8x16_t v6[2];
  int8x16_t v7[2];
  int8x16_t v8[2];

  __n128 v2 = *(__n128 *)(a1 + 16);
  v8[0] = *(int8x16_t *)a1;
  v8[1] = (int8x16_t)v2;
  BOOL result = pv_is_finite(v8, *(double *)v8[0].i64, v2);
  if (result)
  {
    __n128 v4 = *(__n128 *)(a1 + 48);
    v7[0] = *(int8x16_t *)(a1 + 32);
    v7[1] = (int8x16_t)v4;
    BOOL result = pv_is_finite(v7, *(double *)v7[0].i64, v4);
    if (result)
    {
      __n128 v5 = *(__n128 *)(a1 + 80);
      v6[0] = *(int8x16_t *)(a1 + 64);
      v6[1] = (int8x16_t)v5;
      return pv_is_finite(v6, *(double *)v6[0].i64, v5);
    }
  }
  return result;
}

BOOL pv_transform_info_make(uint64_t a1, uint64_t a2)
{
  int8x16_t v3 = *(int8x16_t *)(a1 + 96);
  int8x16_t v4 = *(int8x16_t *)(a1 + 112);
  double v5 = *(double *)(a1 + 120);
  if (v5 > -0.0000001 && v5 < 0.0000001) {
    return 0;
  }
  long long v7 = (void *)MEMORY[0x1E4F14990];
  *(_OWORD *)v128.columns[1].f64 = *(_OWORD *)(MEMORY[0x1E4F14990] + 112);
  *(_OWORD *)&v128.columns[1].f64[2] = *(_OWORD *)(MEMORY[0x1E4F14990] + 96);
  int64x2_t v8 = *(int64x2_t *)(a1 + 64);
  int8x16_t v9 = *(int8x16_t *)(a1 + 80);
  float64x2_t v10 = *(float64x2_t *)(a1 + 32);
  float64x2_t v11 = *(float64x2_t *)(a1 + 48);
  float64x2_t v12 = *(float64x2_t *)(a1 + 16);
  int64x2_t v154 = *(int64x2_t *)a1;
  float64x2_t v155 = v12;
  float64x2_t v156 = v10;
  float64x2_t v157 = v11;
  int64x2_t v158 = v8;
  int8x16_t v159 = v9;
  int8x16_t v160 = v3;
  int8x16_t v161 = v4;
  pv_simd_normalize((uint64_t)&v154, (uint64_t)&v162);
  v13.f64[0] = v163.f64[0];
  v15.f64[0] = v165.f64[0];
  float64x2_t v114 = v164;
  float64x2_t v14 = v164;
  int64x2_t v121 = (int64x2_t)v162;
  v17.i64[0] = v167.i64[0];
  *(int64x2_t *)v128.columns[0].f64 = v166;
  int64x2_t v16 = v166;
  int8x16_t v18 = v169;
  v13.f64[1] = (float64_t)v7[3];
  v15.f64[1] = (float64_t)v7[7];
  float64x2_t v100 = v15;
  float64x2_t v107 = v13;
  *(int8x16_t *)a2 = v168;
  *(int8x16_t *)(a2 + 16) = v18;
  v17.i64[1] = v7[11];
  int8x16_t v96 = v17;
  float64x2_t v162 = (float64x2_t)v121;
  float64x2_t v163 = v13;
  float64x2_t v164 = v14;
  float64x2_t v165 = v15;
  int64x2_t v166 = v16;
  int8x16_t v167 = v17;
  int8x16_t v169 = *(int8x16_t *)v128.columns[1].f64;
  int8x16_t v168 = *(int8x16_t *)&v128.columns[1].f64[2];
  pv_simd_matrix_get_row((int64x2_t *)&v162, 0, v153);
  float64x2_t v19 = (float64x2_t)v153[0];
  float64x2_t v20 = (float64x2_t)v153[1];
  double v21 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v19, v19), vmulq_f64(v20, v20))));
  *(double *)(a2 + 64) = v21;
  double v22 = 1.0 / v21;
  *(float64x2_t *)&v128.columns[0].f64[2] = vmulq_n_f64(v19, v22);
  float64x2_t v155 = v107;
  int64x2_t v154 = v121;
  float64x2_t v157 = v100;
  float64x2_t v156 = v114;
  int8x16_t v159 = v96;
  int64x2_t v158 = *(int64x2_t *)v128.columns[0].f64;
  int8x16_t v161 = *(int8x16_t *)v128.columns[1].f64;
  int8x16_t v160 = *(int8x16_t *)&v128.columns[1].f64[2];
  *(float64x2_t *)&v128.columns[1].f64[2] = vmulq_n_f64(v20, v22);
  v152[0] = *(int64x2_t *)&v128.columns[0].f64[2];
  v152[1] = *(int64x2_t *)&v128.columns[1].f64[2];
  pv_simd_matrix_set_row(&v154, v152, 0, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v162;
  float64x2_t v101 = v165;
  float64x2_t v108 = v163;
  int64x2_t v122 = v166;
  *(float64x2_t *)v128.columns[0].f64 = v164;
  int8x16_t v115 = v168;
  int8x16_t v93 = v169;
  int8x16_t v97 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 1, (int64x2_t *)&v150);
  float64x2_t v23 = v150;
  float64x2_t v24 = v151;
  float64x2_t v25 = vaddq_f64(vmulq_f64(*(float64x2_t *)&v128.columns[0].f64[2], v150), vmulq_f64(*(float64x2_t *)&v128.columns[1].f64[2], v151));
  *(void *)&double v26 = *(_OWORD *)&vaddq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1));
  *(double *)(a2 + 96) = vaddvq_f64(v25);
  int64x2_t v154 = *(int64x2_t *)v128.columns[1].f64;
  float64x2_t v155 = v108;
  float64x2_t v156 = *(float64x2_t *)v128.columns[0].f64;
  float64x2_t v157 = v101;
  int64x2_t v158 = v122;
  int8x16_t v159 = v97;
  int8x16_t v160 = v115;
  int8x16_t v161 = v93;
  v149[0] = (int64x2_t)vsubq_f64(v23, vmulq_n_f64(*(float64x2_t *)&v128.columns[0].f64[2], v26));
  v149[1] = (int64x2_t)vsubq_f64(v24, vmulq_n_f64(*(float64x2_t *)&v128.columns[1].f64[2], v26));
  pv_simd_matrix_set_row(&v154, v149, 1, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  float64x2_t v116 = v165;
  float64x2_t v123 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  int8x16_t v102 = v169;
  int8x16_t v109 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 1, v148);
  float64x2_t v27 = (float64x2_t)v148[0];
  float64x2_t v28 = (float64x2_t)v148[1];
  double v29 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v27, v27), vmulq_f64(v28, v28))));
  *(double *)(a2 + 72) = v29;
  double v30 = 1.0 / v29;
  float64x2_t v155 = v123;
  int64x2_t v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  float64x2_t v157 = v116;
  float64x2_t v156 = *(float64x2_t *)v128.columns[1].f64;
  int8x16_t v159 = v109;
  int64x2_t v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  int8x16_t v161 = v102;
  int8x16_t v160 = *(int8x16_t *)v128.columns[0].f64;
  v147[0] = (int64x2_t)vmulq_n_f64(v27, v30);
  v147[1] = (int64x2_t)vmulq_n_f64(v28, v30);
  pv_simd_matrix_set_row(&v154, v147, 1, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  float64x2_t v31 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  float64x2_t v117 = v165;
  float64x2_t v124 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  int8x16_t v32 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  int8x16_t v103 = v169;
  int8x16_t v110 = v167;
  *(double *)(a2 + 96) = *(double *)(a2 + 96) / *(double *)(a2 + 72);
  float64x2_t v162 = *(float64x2_t *)&v128.columns[1].f64[2];
  float64x2_t v163 = v124;
  float64x2_t v164 = v31;
  float64x2_t v165 = v117;
  int64x2_t v166 = *(int64x2_t *)&v128.columns[0].f64[2];
  int8x16_t v167 = v110;
  int8x16_t v168 = v32;
  int8x16_t v169 = v103;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 0, v146);
  float64x2_t v94 = (float64x2_t)v146[1];
  float64x2_t v98 = (float64x2_t)v146[0];
  float64x2_t v162 = *(float64x2_t *)&v128.columns[1].f64[2];
  float64x2_t v163 = v124;
  float64x2_t v164 = *(float64x2_t *)v128.columns[1].f64;
  float64x2_t v165 = v117;
  int64x2_t v166 = *(int64x2_t *)&v128.columns[0].f64[2];
  int8x16_t v167 = v110;
  int8x16_t v168 = *(int8x16_t *)v128.columns[0].f64;
  int8x16_t v169 = v103;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 2, (int64x2_t *)&v144);
  float64x2_t v33 = v144;
  float64x2_t v34 = v145;
  float64x2_t v35 = vaddq_f64(vmulq_f64(v98, v144), vmulq_f64(v94, v145));
  *(void *)&double v36 = *(_OWORD *)&vaddq_f64(v35, (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1));
  *(double *)(a2 + 104) = vaddvq_f64(v35);
  int64x2_t v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  float64x2_t v155 = v124;
  float64x2_t v156 = *(float64x2_t *)v128.columns[1].f64;
  float64x2_t v157 = v117;
  int64x2_t v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  int8x16_t v159 = v110;
  int8x16_t v160 = *(int8x16_t *)v128.columns[0].f64;
  int8x16_t v161 = v103;
  v143[0] = (int64x2_t)vsubq_f64(v33, vmulq_n_f64(v98, v36));
  v143[1] = (int64x2_t)vsubq_f64(v34, vmulq_n_f64(v94, v36));
  pv_simd_matrix_set_row(&v154, v143, 2, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  float64x2_t v118 = v165;
  float64x2_t v125 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  int8x16_t v104 = v169;
  int8x16_t v111 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 1, v142);
  float64x2_t v99 = (float64x2_t)v142[0];
  float64x2_t v95 = (float64x2_t)v142[1];
  float64x2_t v163 = v125;
  float64x2_t v162 = *(float64x2_t *)&v128.columns[1].f64[2];
  float64x2_t v165 = v118;
  float64x2_t v164 = *(float64x2_t *)v128.columns[1].f64;
  int8x16_t v167 = v111;
  int64x2_t v166 = *(int64x2_t *)&v128.columns[0].f64[2];
  int8x16_t v169 = v104;
  int8x16_t v168 = *(int8x16_t *)v128.columns[0].f64;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 2, (int64x2_t *)&v140);
  float64x2_t v37 = v140;
  float64x2_t v38 = v141;
  float64x2_t v39 = vaddq_f64(vmulq_f64(v99, v140), vmulq_f64(v95, v141));
  *(void *)&double v40 = *(_OWORD *)&vaddq_f64(v39, (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1));
  *(double *)(a2 + 112) = vaddvq_f64(v39);
  int64x2_t v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  float64x2_t v155 = v125;
  float64x2_t v156 = *(float64x2_t *)v128.columns[1].f64;
  float64x2_t v157 = v118;
  int64x2_t v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  int8x16_t v159 = v111;
  int8x16_t v160 = *(int8x16_t *)v128.columns[0].f64;
  int8x16_t v161 = v104;
  v139[0] = (int64x2_t)vsubq_f64(v37, vmulq_n_f64(v99, v40));
  v139[1] = (int64x2_t)vsubq_f64(v38, vmulq_n_f64(v95, v40));
  pv_simd_matrix_set_row(&v154, v139, 2, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  float64x2_t v119 = v165;
  float64x2_t v126 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  int8x16_t v105 = v169;
  int8x16_t v112 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 2, v138);
  float64x2_t v41 = (float64x2_t)v138[0];
  float64x2_t v42 = (float64x2_t)v138[1];
  double v43 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v41, v41), vmulq_f64(v42, v42))));
  *(double *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v43;
  double v44 = 1.0 / v43;
  float64x2_t v155 = v126;
  int64x2_t v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  float64x2_t v157 = v119;
  float64x2_t v156 = *(float64x2_t *)v128.columns[1].f64;
  int8x16_t v159 = v112;
  int64x2_t v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  int8x16_t v161 = v105;
  int8x16_t v160 = *(int8x16_t *)v128.columns[0].f64;
  v137[0] = (int64x2_t)vmulq_n_f64(v41, v44);
  v137[1] = (int64x2_t)vmulq_n_f64(v42, v44);
  pv_simd_matrix_set_row(&v154, v137, 2, (int64x2_t *)&v162);
  float64x2_t v46 = v162;
  float64x2_t v45 = v163;
  int8x16_t v48 = (int8x16_t)v164;
  int8x16_t v47 = (int8x16_t)v165;
  int8x16_t v50 = (int8x16_t)v166;
  int8x16_t v49 = v167;
  int8x16_t v51 = v168;
  int8x16_t v52 = v169;
  double v53 = *(double *)(a2 + 80);
  double v54 = *(double *)(a2 + 104) / v53;
  double v55 = *(double *)(a2 + 112) / v53;
  *(double *)(a2 + 104) = v54;
  *(double *)(a2 + 112) = v55;
  float64x2_t v56 = (float64x2_t)vextq_s8(v52, v51, 8uLL);
  float64x2_t v57 = (float64x2_t)vextq_s8(v51, v52, 8uLL);
  float64x2_t v58 = (float64x2_t)vextq_s8(v49, v50, 8uLL);
  float64x2_t v59 = (float64x2_t)vextq_s8(v50, v49, 8uLL);
  float64x2_t v60 = (float64x2_t)vextq_s8(v48, v47, 8uLL);
  float64x2_t v61 = (float64x2_t)vextq_s8(v47, v48, 8uLL);
  float64x2_t v62 = vmulq_f64(v58, v57);
  float64x2_t v63 = vmulq_f64(v59, v56);
  float64x2_t v64 = vaddq_f64(vmulq_f64(v60, vsubq_f64(vmulq_f64((float64x2_t)v49, v56), vmulq_f64(v58, (float64x2_t)v52))), vmulq_f64((float64x2_t)v47, vsubq_f64(v62, v63)));
  int64x2_t v65 = (int64x2_t)vmulq_f64(v45, vaddq_f64(vmulq_f64(v60, vsubq_f64(vmulq_f64(v58, (float64x2_t)v51), vmulq_f64((float64x2_t)v50, v56))), vaddq_f64(vmulq_f64(v61, vsubq_f64(vmulq_f64((float64x2_t)v50, v57), vmulq_f64(v59, (float64x2_t)v51))), vmulq_f64((float64x2_t)v48, vsubq_f64(v63, v62)))));
  int64x2_t v66 = (int64x2_t)vmulq_f64(v46, vaddq_f64(vmulq_f64(v61, vsubq_f64(vmulq_f64(v59, (float64x2_t)v52), vmulq_f64((float64x2_t)v49, v57))), v64));
  int8x16_t v127 = v52;
  *(int8x16_t *)v128.columns[0].f64 = v51;
  *(int8x16_t *)v128.columns[1].f64 = v47;
  *(float64x2_t *)&v128.columns[1].f64[2] = v45;
  *(int8x16_t *)&v128.columns[0].f64[2] = v49;
  if (vaddvq_f64(vsubq_f64((float64x2_t)vzip1q_s64(v66, v65), (float64x2_t)vzip2q_s64(v66, v65))) >= 0.0)
  {
    int8x16_t v106 = v50;
    int8x16_t v113 = v48;
    float64x2_t v120 = v46;
  }
  else
  {
    float64x2_t v67 = vnegq_f64(*(float64x2_t *)(a2 + 80));
    *(float64x2_t *)(a2 + 64) = vnegq_f64(*(float64x2_t *)(a2 + 64));
    *(float64x2_t *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v67;
    *(float64x2_t *)v128.columns[2].f64 = v46;
    *(float64x2_t *)&v128.columns[2].f64[2] = v45;
    *(int8x16_t *)v128.columns[3].f64 = v48;
    *(int8x16_t *)&v128.columns[3].f64[2] = v47;
    int8x16_t v129 = v50;
    int8x16_t v130 = v49;
    pv_simd_negate((uint64_t)&v128.columns[2], &v131);
    *(void *)&long long v68 = v132;
    int8x16_t v113 = v133;
    float64x2_t v120 = v131;
    *(void *)&long long v69 = v134;
    *((void *)&v68 + 1) = *(void *)&v128.columns[1].f64[3];
    *((void *)&v69 + 1) = *(void *)&v128.columns[1].f64[1];
    int8x16_t v106 = v135;
    *(void *)&long long v70 = v136;
    *((void *)&v70 + 1) = *(void *)&v128.columns[0].f64[3];
    *(_OWORD *)v128.columns[1].f64 = v69;
    *(_OWORD *)&v128.columns[1].f64[2] = v68;
    *(_OWORD *)&v128.columns[0].f64[2] = v70;
  }
  int8x16_t v71 = *(int8x16_t *)(a2 + 80);
  int64x2_t v166 = *(int64x2_t *)(a2 + 64);
  int8x16_t v167 = v71;
  int8x16_t v72 = *(int8x16_t *)(a2 + 112);
  int8x16_t v168 = *(int8x16_t *)(a2 + 96);
  int8x16_t v169 = v72;
  float64x2_t v73 = *(float64x2_t *)(a2 + 16);
  float64x2_t v162 = *(float64x2_t *)a2;
  float64x2_t v163 = v73;
  float64x2_t v74 = *(float64x2_t *)(a2 + 48);
  float64x2_t v164 = *(float64x2_t *)(a2 + 32);
  float64x2_t v165 = v74;
  BOOL result = pv_is_finite((uint64_t)&v162);
  if (result)
  {
    int64x2_t v158 = 0u;
    int8x16_t v159 = 0u;
    float64x2_t v156 = 0u;
    float64x2_t v157 = 0u;
    int64x2_t v154 = 0u;
    float64x2_t v155 = 0u;
    float64x2_t v162 = v120;
    float64x2_t v163 = *(float64x2_t *)&v128.columns[1].f64[2];
    float64x2_t v164 = (float64x2_t)v113;
    float64x2_t v165 = *(float64x2_t *)v128.columns[1].f64;
    int64x2_t v166 = (int64x2_t)v106;
    int8x16_t v167 = *(int8x16_t *)&v128.columns[0].f64[2];
    int8x16_t v168 = *(int8x16_t *)v128.columns[0].f64;
    int8x16_t v169 = v127;
    pv_simd_matrix_get_rotation_matrix(&v162, (float64x2_t *)&v154);
    double v75 = *(double *)v154.i64 + v156.f64[1] + *(double *)v159.i64;
    if (v75 >= 0.0)
    {
      double v83 = sqrt(v75 + 1.0);
      double v84 = v83 + v83;
      double v85 = 1.0 / (v83 + v83);
      *(double *)&long long v79 = v85 * vsubq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
      double v80 = (*(double *)v158.i64 - v155.f64[0]) * v85;
      *(double *)&long long v81 = v85 * vsubq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
      double v82 = v84 * 0.25;
    }
    else if (*(double *)v154.i64 < v156.f64[1] || *(double *)v154.i64 < *(double *)v159.i64)
    {
      double v86 = 1.0 - *(double *)v154.i64;
      if (v156.f64[1] >= *(double *)v159.i64)
      {
        double v90 = sqrt(v156.f64[1] + v86 - *(double *)v159.i64);
        double v91 = v90 + v90;
        double v92 = 1.0 / (v90 + v90);
        *(double *)&long long v79 = v92 * vaddq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
        double v80 = v91 * 0.25;
        *(double *)&long long v81 = v92 * vaddq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
        double v82 = (*(double *)v158.i64 - v155.f64[0]) * v92;
      }
      else
      {
        double v87 = sqrt(v86 - v156.f64[1] + *(double *)v159.i64);
        double v88 = v87 + v87;
        double v89 = 1.0 / (v87 + v87);
        *(double *)&long long v79 = (v155.f64[0] + *(double *)v158.i64) * v89;
        double v80 = v89 * vaddq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
        *(double *)&long long v81 = v88 * 0.25;
        double v82 = v89 * vsubq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
      }
    }
    else
    {
      double v76 = sqrt(*(double *)v154.i64 + 1.0 - v156.f64[1] - *(double *)v159.i64);
      double v77 = v76 + v76;
      double v78 = 1.0 / v77;
      *(double *)&long long v79 = v77 * 0.25;
      double v80 = v78 * vaddq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
      *(double *)&long long v81 = (v155.f64[0] + *(double *)v158.i64) * v78;
      double v82 = v78 * vsubq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
    }
    *((double *)&v79 + 1) = v80;
    *((double *)&v81 + 1) = v82;
    *(_OWORD *)(a2 + 32) = v79;
    *(_OWORD *)(a2 + 48) = v81;
    return 1;
  }
  return result;
}

float64_t pv_transform_info_make(uint64_t a1, float64x2_t *a2, float64x2_t a3)
{
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  __asm { FMOV            V1.2D, #-0.5 }
  long long v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v28[32] = v9;
  float64x2_t v10 = *(float64x2_t *)(a1 + 112);
  float64x2_t v29 = *(float64x2_t *)(a1 + 96);
  float64x2_t v30 = v10;
  float64x2_t v11 = *(float64x2_t *)(a1 + 16);
  float64x2_t v25 = *(float64x2_t *)a1;
  float64x2_t v26 = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  float64x2_t v27 = *(float64x2_t *)(a1 + 32);
  *(_OWORD *)float64x2_t v28 = v12;
  v24[0] = vmulq_f64(a3, _Q1);
  v24[1] = 0u;
  pv_simd_matrix_translate((long long *)&v25, v24, &v31);
  *(_OWORD *)&v28[32] = 0u;
  float64x2_t v29 = 0u;
  float64x2_t v30 = 0u;
  float64x2_t v27 = 0u;
  *(void *)float64x2_t v28 = 0;
  float64x2_t v25 = 0u;
  float64x2_t v26 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&v28[8] = _Q0;
  *(_OWORD *)&v28[24] = _Q0;
  v23[4] = v35;
  v23[5] = v36;
  v23[6] = v37;
  v23[7] = v38;
  v23[0] = v31;
  v23[1] = v32;
  v23[2] = v33;
  v23[3] = v34;
  pv_transform_info_make((uint64_t)v23, (uint64_t)&v25);
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v15 = v26;
  float64x2_t v25 = vaddq_f64(vmulq_f64(a3, _Q0), v25);
  float64x2_t v16 = *(float64x2_t *)&v28[32];
  float64x2_t v17 = v29;
  float64x2_t v18 = *(float64x2_t *)v28;
  a2[4] = *(float64x2_t *)&v28[16];
  a2[5] = v16;
  float64x2_t v19 = v30;
  a2[6] = v17;
  a2[7] = v19;
  float64_t result = v27.f64[0];
  float64x2_t v21 = v25;
  a2[2] = v27;
  a2[3] = v18;
  *a2 = v21;
  a2[1] = v15;
  return result;
}

double pv_simd_float4x4_from_pv_transform_info(float64x2_t *a1)
{
  *(float32x2_t *)v23.columns[1].f32 = vcvt_f32_f64(a1[2]);
  float32x2_t v2 = vcvt_f32_f64(a1[3]);
  float v3 = vmul_f32(*(float32x2_t *)v23.columns[1].f32, *(float32x2_t *)v23.columns[1].f32).f32[0];
  float v4 = vmuls_lane_f32(v23.columns[1].f32[1], *(float32x2_t *)v23.columns[1].f32, 1);
  float v5 = vmul_f32(v2, v2).f32[0];
  float v6 = vmuls_lane_f32(v2.f32[1], v2, 1);
  float v7 = vmuls_lane_f32(v23.columns[1].f32[0], *(float32x2_t *)v23.columns[1].f32, 1);
  float v8 = vmuls_lane_f32(v2.f32[0], v2, 1);
  float32x2_t v9 = vmul_f32(*(float32x2_t *)v23.columns[1].f32, v2);
  v23.columns[0].i32[3] = 0;
  v23.columns[0].f32[0] = v6 + (float)((float)(v3 - v4) - v5);
  v23.columns[2].i32[3] = 0;
  v23.columns[0].f32[1] = (float)(v7 + v8) + (float)(v7 + v8);
  v23.columns[0].f32[2] = (float)(v9.f32[0] - v9.f32[1]) + (float)(v9.f32[0] - v9.f32[1]);
  float v10 = vmuls_lane_f32(v2.f32[0], *(float32x2_t *)v23.columns[1].f32, 1);
  v2.f32[0] = vmuls_lane_f32(v23.columns[1].f32[0], v2, 1);
  v23.columns[1].i32[3] = 0;
  v23.columns[1].f32[0] = (float)(v7 - v8) + (float)(v7 - v8);
  v23.columns[1].f32[1] = (float)(v6 + (float)(v4 - v5)) - v3;
  v23.columns[1].f32[2] = (float)(v10 + v2.f32[0]) + (float)(v10 + v2.f32[0]);
  float v11 = vaddv_f32(v9);
  v23.columns[2].f32[0] = v11 + v11;
  v23.columns[2].f32[1] = (float)(v10 - v2.f32[0]) + (float)(v10 - v2.f32[0]);
  v23.columns[2].f32[2] = (float)((float)(v5 + v6) - v3) - v4;
  v23.columns[3] = (simd_float4)xmmword_1B7E734D0;
  float v12 = a1[4].f64[0];
  float32_t v13 = a1[4].f64[1];
  float v14 = a1[5].f64[0];
  double v15 = pv_simd_matrix_scale(v23, v12, v13, v14);
  float32x4_t v20 = *(float32x4_t *)a1;
  *(float32x2_t *)v20.f32 = vcvt_f32_f64(*a1);
  float32_t v19 = a1[1].f64[0];
  v20.f32[2] = v19;

  return pv_simd_matrix_translate(v15, v16, v17, v18, v20);
}

double pv_simd_double4x4_from_pv_transform_info@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24)
{
  float64x2_t v27 = *(float64x2_t *)(a1 + 32);
  float64x2_t v26 = *(float64x2_t *)(a1 + 48);
  double v28 = vmuld_n_f64(v27.f64[0], v27.f64[0]);
  double v29 = *(double *)(a1 + 40);
  double v30 = vmuld_lane_f64(v29, v27, 1);
  double v31 = vmuld_n_f64(v26.f64[0], v26.f64[0]);
  double v32 = vmuld_lane_f64(*(double *)(a1 + 56), v26, 1);
  *(double *)&long long v33 = v32 + v28 - v30 - v31;
  double v34 = vmuld_lane_f64(v27.f64[0], v27, 1);
  double v35 = vmuld_lane_f64(v26.f64[0], v26, 1);
  double v36 = vmuld_n_f64(v27.f64[0], v26.f64[0]);
  double v37 = vmuld_lane_f64(v29, v26, 1);
  *((double *)&v33 + 1) = v34 + v35 + v34 + v35;
  *(_OWORD *)a2 = v33;
  *(_OWORD *)(a2 + 16) = COERCE_UNSIGNED_INT64(v36 - v37 + v36 - v37);
  *(double *)&long long v33 = v34 - v35 + v34 - v35;
  double v38 = vmuld_lane_f64(v26.f64[0], v27, 1);
  v26.f64[0] = vmuld_lane_f64(v27.f64[0], v26, 1);
  *((double *)&v33 + 1) = v32 + v30 - v31 - v28;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = COERCE_UNSIGNED_INT64(v38 + v26.f64[0] + v38 + v26.f64[0]);
  v27.f64[0] = v36 + v37 + v36 + v37;
  v27.f64[1] = v38 - v26.f64[0] + v38 - v26.f64[0];
  *(float64x2_t *)(a2 + 64) = v27;
  *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = COERCE_UNSIGNED_INT64(v31 + v32 - v28 - v30);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 112) = xmmword_1B7E733E0;
  long long v39 = *(_OWORD *)(a1 + 64);
  unint64_t v40 = *(void *)(a1 + 80);
  long long v41 = *(_OWORD *)(a2 + 80);
  a21 = *(_OWORD *)(a2 + 64);
  a22 = v41;
  long long v42 = *(_OWORD *)(a2 + 112);
  a23 = *(_OWORD *)(a2 + 96);
  a24 = v42;
  long long v43 = *(_OWORD *)(a2 + 16);
  a17 = *(_OWORD *)a2;
  a18 = v43;
  long long v44 = *(_OWORD *)(a2 + 48);
  a19 = *(_OWORD *)(a2 + 32);
  a20 = v44;
  pv_simd_matrix_scale(&a17, (_OWORD *)a2, v39, *((float64_t *)&v39 + 1), v40);
  float64x2_t v45 = *(float64x2_t *)a1;
  float64x2_t v46 = *(float64x2_t *)(a1 + 16);
  long long vars0 = *(_OWORD *)a2;
  v52[0] = v45;
  v52[1] = v46;
  pv_simd_matrix_translate(&vars0, v52, &a17);
  long long v47 = a22;
  *(_OWORD *)(a2 + 64) = a21;
  *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v47;
  long long v48 = a24;
  *(_OWORD *)(a2 + 96) = a23;
  *(_OWORD *)(a2 + 112) = v48;
  long long v49 = a18;
  *(_OWORD *)a2 = a17;
  *(_OWORD *)(a2 + 16) = v49;
  double result = *(double *)&a19;
  long long v51 = a20;
  *(_OWORD *)(a2 + 32) = a19;
  *(_OWORD *)(a2 + 48) = v51;
  return result;
}

BOOL pv_simd_almost_equal_elements(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)&long long v47 = 0;
  long long v6 = *(_OWORD *)(a1 + 48);
  float64x2_t v44 = *(float64x2_t *)(a1 + 32);
  long long v45 = v6;
  long long v46 = 0u;
  pv_simd_quaternion_get_euler_angles(&v44, 4, (uint64_t)&v46);
  *(void *)&long long v45 = 0;
  float64x2_t v7 = *(float64x2_t *)(a2 + 48);
  v43[0] = *(float64x2_t *)(a2 + 32);
  v43[1] = v7;
  float64x2_t v44 = 0u;
  pv_simd_quaternion_get_euler_angles(v43, 4, (uint64_t)&v44);
  int v8 = 0;
  int8x16_t v11 = *(int8x16_t *)a1;
  int8x16_t v12 = *(int8x16_t *)a2;
  *(void *)&long long v9 = *(void *)(a1 + 16);
  *(void *)&long long v10 = *(void *)(a2 + 16);
  v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
  v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
  while (1)
  {
    v42[0] = v11;
    v42[1] = v9;
    double v13 = *((double *)v42 + (v8 & 3));
    v41[0] = v12;
    v41[1] = v10;
    if (vabdd_f64(v13, *((double *)v41 + (v8 & 3))) >= a3) {
      break;
    }
    if (++v8 == 3)
    {
      double v33 = *(double *)&v47;
      double v34 = *(double *)&v45;
      double v35 = *((double *)&v46 + 1);
      float64x2_t v36 = v44;
      for (double i = fmod(*(double *)&v46 + a3, 6.28318531); i < 0.0; double i = i + 6.28318531)
        ;
      for (double j = fmod(v36.f64[0] + a3, 6.28318531); j < 0.0; double j = j + 6.28318531)
        ;
      if (vabdd_f64(i, j) < a3)
      {
        for (double k = fmod(v35 + a3, 6.28318531); k < 0.0; double k = k + 6.28318531)
          ;
        for (double m = fmod(v36.f64[1] + a3, 6.28318531); m < 0.0; double m = m + 6.28318531)
          ;
        if (vabdd_f64(k, m) < a3)
        {
          for (double n = fmod(v33 + a3, 6.28318531); n < 0.0; double n = n + 6.28318531)
            ;
          for (idouble i = fmod(v34 + a3, 6.28318531); ii < 0.0; idouble i = ii + 6.28318531)
            ;
          if (vabdd_f64(n, ii) < a3)
          {
            int v22 = 0;
            int8x16_t v23 = *(int8x16_t *)(a1 + 64);
            int8x16_t v24 = *(int8x16_t *)(a2 + 64);
            *(void *)&long long v20 = *(void *)(a1 + 80);
            *(void *)&long long v21 = *(void *)(a2 + 80);
            v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
            v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
            while (1)
            {
              v40[0] = v23;
              v40[1] = v20;
              double v25 = *((double *)v40 + (v22 & 3));
              v39[0] = v24;
              v39[1] = v21;
              if (vabdd_f64(v25, *((double *)v39 + (v22 & 3))) >= a3) {
                break;
              }
              if (++v22 == 3)
              {
                int v26 = 0;
                int8x16_t v27 = *(int8x16_t *)(a1 + 96);
                int8x16_t v28 = *(int8x16_t *)(a2 + 96);
                *(void *)&long long v20 = *(void *)(a1 + 112);
                *(void *)&long long v21 = *(void *)(a2 + 112);
                v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
                v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
                do
                {
                  v38[0] = v27;
                  v38[1] = v20;
                  double v29 = *((double *)v38 + (v26 & 3));
                  v37[0] = v28;
                  v37[1] = v21;
                  double v30 = vabdd_f64(v29, *((double *)v37 + (v26 & 3)));
                  BOOL result = v30 < a3;
                }
                while (v30 < a3 && v26++ != 2);
                return result;
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return 0;
}

double pv_transform_info_lerp@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v7 = a5.n128_u64[0];
  a4[6] = 0u;
  a4[7] = 0u;
  a4[2] = 0u;
  long long v10 = (float64x2_t *)(a4 + 2);
  __asm { FMOV            V1.2D, #1.0 }
  a4[3] = 0u;
  a4[4] = _Q1;
  a4[5] = 0u;
  *((void *)a4 + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
  float64x2_t v16 = a1[1];
  float64x2_t v17 = *a2;
  float64x2_t v18 = a2[1];
  v46[0] = *a1;
  a5.n128_u64[1] = *(void *)&v46[0].f64[1];
  v46[1] = v16;
  v45[0] = v17;
  v45[1] = v18;
  pv_simd_lerp(v46, v45, (uint64_t)v47, a5);
  long long v19 = v47[1];
  *a4 = v47[0];
  a4[1] = v19;
  if (!a3)
  {
    float64x2_t v20 = a1[2];
    float64x2_t v21 = a1[3];
    float64x2_t v22 = a2[2];
    float64x2_t v23 = a2[3];
    if (vaddvq_f64(vaddq_f64(vmulq_f64(v20, v22), vmulq_f64(v21, v23))) >= 0.0) {
      goto LABEL_3;
    }
LABEL_5:
    float64x2_t v50 = vnegq_f64(v22);
    float64x2_t v51 = vnegq_f64(v23);
    float64x2_t v48 = v20;
    float64x2_t v49 = v21;
    int8x16_t v24 = &v48;
    double v25 = &v50;
    goto LABEL_6;
  }
  float64x2_t v20 = a1[2];
  float64x2_t v21 = a1[3];
  float64x2_t v22 = a2[2];
  float64x2_t v23 = a2[3];
  if (vaddvq_f64(vaddq_f64(vmulq_f64(v20, v22), vmulq_f64(v21, v23))) >= 0.0) {
    goto LABEL_5;
  }
LABEL_3:
  float64x2_t v50 = v20;
  float64x2_t v51 = v21;
  float64x2_t v48 = v22;
  float64x2_t v49 = v23;
  int8x16_t v24 = &v50;
  double v25 = &v48;
LABEL_6:
  _simd_slerp_internal(v24, v25, v44, *(double *)&v7);
  float64x2_t v26 = v44[1];
  *long long v10 = v44[0];
  v10[1] = v26;
  float64x2_t v28 = a1[5];
  float64x2_t v29 = a2[4];
  float64x2_t v30 = a2[5];
  v42[0] = a1[4];
  v27.n128_u64[1] = *(void *)&v42[0].f64[1];
  v42[1] = v28;
  v41[0] = v29;
  v41[1] = v30;
  v27.n128_u64[0] = v7;
  pv_simd_lerp(v42, v41, (uint64_t)v43, v27);
  long long v31 = v43[1];
  a4[4] = v43[0];
  a4[5] = v31;
  float64x2_t v33 = a1[7];
  float64x2_t v34 = a2[6];
  float64x2_t v35 = a2[7];
  v39[0] = a1[6];
  v32.n128_u64[1] = *(void *)&v39[0].f64[1];
  v39[1] = v33;
  v38[0] = v34;
  v38[1] = v35;
  v32.n128_u64[0] = v7;
  pv_simd_lerp(v39, v38, (uint64_t)v40, v32);
  double result = *(double *)v40;
  long long v37 = v40[1];
  a4[6] = v40[0];
  a4[7] = v37;
  return result;
}

void _simd_slerp_internal(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  double v6 = 1.0;
  double v7 = 1.0 - a4;
  float64x2_t v8 = a1[1];
  float64x2_t v9 = a2[1];
  float64x2_t v10 = vsubq_f64(*a1, *a2);
  float64x2_t v11 = vsubq_f64(v8, v9);
  v10.f64[0] = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v10, v10), vmulq_f64(v11, v11))));
  float64x2_t v37 = v9;
  float64x2_t v38 = *a2;
  float64x2_t v33 = v8;
  float64x2_t v35 = *a1;
  float64x2_t v12 = vaddq_f64(*a1, *a2);
  float64x2_t v13 = vaddq_f64(v8, v9);
  long double v14 = atan2(v10.f64[0], sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v12, v12), vmulq_f64(v13, v13)))));
  double v15 = v14 + v14;
  BOOL v16 = v14 + v14 == 0.0;
  double v17 = 1.0;
  if (!v16) {
    double v17 = sin(v15) / v15;
  }
  double v18 = 1.0 / v17;
  if (v7 * v15 != 0.0) {
    double v6 = sin(v7 * v15) / (v7 * v15);
  }
  double v19 = v7 * (v18 * v6);
  float64x2_t v20 = vmulq_n_f64(v33, v19);
  float64x2_t v21 = vmulq_n_f64(v35, v19);
  double v22 = v15 * a4;
  double v23 = 1.0;
  if (v22 != 0.0)
  {
    float64x2_t v34 = v21;
    float64x2_t v36 = v20;
    long double v24 = sin(v22);
    float64x2_t v21 = v34;
    float64x2_t v20 = v36;
    double v23 = v24 / v22;
  }
  double v25 = v18 * v23 * a4;
  float64x2_t v26 = vmulq_n_f64(v37, v25);
  float64x2_t v27 = vaddq_f64(v21, vmulq_n_f64(v38, v25));
  float64x2_t v28 = vaddq_f64(v20, v26);
  double v29 = vaddvq_f64(vaddq_f64(vmulq_f64(v27, v27), vmulq_f64(v28, v28)));
  if (v29 == 0.0)
  {
    float64x2_t v30 = (float64x2_t)xmmword_1B7E733E0;
    float64x2_t v31 = 0uLL;
  }
  else
  {
    double v32 = 1.0 / sqrt(v29);
    float64x2_t v30 = vmulq_n_f64(v28, v32);
    float64x2_t v31 = vmulq_n_f64(v27, v32);
  }
  *a3 = v31;
  a3[1] = v30;
}

__n128 pv_simd_double4_from_PCVector4d@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  __n128 v3 = a1[1];
  *a2 = *a1;
  a2[1] = v3;
  return result;
}

__n128 pv_PCVector4d_from_simd_double4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void PVImagePropertiesForColorSpace(PVColorSpace *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  double v6 = a1;
  *(void *)(a3 + 16) = [(PVColorSpace *)v6 cgColorSpace];
  if (![(PVColorSpace *)v6 isP3d65GammaColorSpace] || (a2)
    && [(PVColorSpace *)v6 isWideGamutSpace])
  {
    *(void *)a3 = 0x1052476841;
    int v5 = 4353;
  }
  else
  {
    *(void *)a3 = 0x842475241;
    int v5 = 8194;
  }
  *(_DWORD *)(a3 + 8) = v5;
}

void sub_1B7430A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ConvertToHDR(HGColorConform **a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v17 = a2;
  id v7 = a3;
  float64x2_t v8 = *a1;
  if (v8) {
    (*(void (**)(HGColorConform *))(*(void *)v8 + 16))(v8);
  }
  if ((objc_msgSend(v17, "isRec709GammaColorSpace", v17) & 1) != 0
    || ([v18 isP3d65GammaColorSpace] & 1) != 0)
  {
    int v9 = [v18 isP3d65GammaColorSpace];
  }
  else
  {
    int v10 = [v18 isWideGamutSpace];
    if (v10) {
      int v9 = 2;
    }
    else {
      int v9 = 0;
    }
    if (v10) {
      uint64_t v11 = 3;
    }
    else {
      uint64_t v11 = 0;
    }
    float64x2_t v12 = [v18 nclcTriplet];
    uint64_t v13 = [v12 hgColorPrimary];
    long double v14 = [v18 nclcTriplet];
    PVCreateColorConform(v13, [v14 hgTransferFunction], 0, v11, 1, 0, 0, &v19);

    double v15 = v19;
    (*(void (**)(HGColorConform *, void, HGColorConform *))(*(void *)v19 + 120))(v19, 0, v8);
    if (v8 != v15)
    {
      if (v8) {
        (*(void (**)(HGColorConform *))(*(void *)v8 + 24))(v8);
      }
      float64x2_t v8 = v15;
      (*(void (**)(HGColorConform *))(*(void *)v15 + 16))(v15);
    }
    (*(void (**)(HGColorConform *))(*(void *)v15 + 24))(v15);
  }
  BOOL v16 = HGObject::operator new(0x1B0uLL);
  HGHLG::SDRToHLG::SDRToHLG((uint64_t)v16, v9, 1);
  (*(void (**)(void *, void, HGColorConform *))(*(void *)v16 + 120))(v16, 0, v8);
  *a4 = v16;
  if (v8) {
    (*(void (**)(HGColorConform *))(*(void *)v8 + 24))(v8);
  }
}

void sub_1B7430CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }

  _Unwind_Resume(a1);
}

void PVCreateColorConform(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, HGColorConform **a7@<X8>)
{
}

void ColorConformInput(HGColorConform **a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, void *a5@<X4>, HGColorConform **a6@<X8>)
{
  unint64_t v55 = a2;
  uint64_t v11 = a3;
  if (([(id)v55 isEqual:v11] & 1) != 0 || !(v55 | (unint64_t)v11) || a4 == 3)
  {
    *a6 = *a1;
    *a1 = 0;
    goto LABEL_30;
  }
  float64x2_t v12 = (PVColorSpace *)[(id)v55 copy];
  uint64_t v13 = *a1;
  *a6 = *a1;
  if (v13) {
    (*(void (**)(HGColorConform *))(*(void *)v13 + 16))(v13);
  }
  int v14 = [(PVColorSpace *)v12 isExtendedSRGBColorSpace]
     || [(PVColorSpace *)v12 isSRGBColorSpace];
  int v15 = [(PVColorSpace *)v11 isExtendedSRGBColorSpace]
     || [(PVColorSpace *)v11 isSRGBColorSpace];
  if ([(id)v55 isExtendedSRGBColorSpace]
    && [(PVColorSpace *)v11 isSRGBColorSpace]
    || [(id)v55 isExtendedSRGBColorSpace]
    && [(PVColorSpace *)v11 isRec709GammaColorSpace])
  {
    if (a4 == 2) {
      PVLogError(@"xrSRGB to sRGB Gamut Mapping not Supported. Clamping", @"ProVideo.ColorConform", a5);
    }
    BOOL v16 = (HGColorClamp *)HGObject::operator new(0x1C0uLL);
    HGColorClamp::HGColorClamp(v16);
  }
  if ((!v14 || ![(PVColorSpace *)v11 isRec709GammaColorSpace])
    && (!v15 || ![(PVColorSpace *)v12 isRec709GammaColorSpace]))
  {
    double v54 = [(PVColorSpace *)v11 nclcTriplet];
    id v17 = [(PVColorSpace *)v12 nclcTriplet];
    if ([v17 isInvalid])
    {

LABEL_27:
      double v19 = [NSString stringWithFormat:@"Null NCLC Triplets for conversion from (%@) to (%@)", v12, v11];
      PVLogError(v19, @"ProVideo.ColorConform", a5);

LABEL_28:
      goto LABEL_29;
    }
    char v18 = [v54 isInvalid];

    if (v18) {
      goto LABEL_27;
    }
    if ([(PVColorSpace *)v12 isRec2100PQColorSpace]
      || [(PVColorSpace *)v12 isP3PQGammaColorSpace])
    {
      float64x2_t v20 = [(PVColorSpace *)v12 nclcTriplet];
      uint64_t v21 = [v20 hgColorPrimary];
      double v22 = [(PVColorSpace *)v12 nclcTriplet];
      PVCreateColorConform(v21, [v22 hgTransferFunction], 0, 3, 8, 0, 0, &v57);

      double v23 = v57;
      (*(void (**)(HGColorConform *, void, HGColorConform *))(*(void *)v57 + 120))(v57, 0, v13);
      long double v24 = (HGPQ::OOTF *)HGObject::operator new(0x1B0uLL);
      HGPQ::OOTF::OOTF(v24, 1, 100.0, 100.0);
      (*(void (**)(HGPQ::OOTF *, void, HGColorConform *))(*(void *)v24 + 120))(v24, 0, v23);
      double v25 = (HGNode *)HGObject::operator new(0x1C0uLL);
      HGHLG::InverseOOTF::InverseOOTF(v25);
    }
    BOOL v26 = 0;
    BOOL v27 = [(PVColorSpace *)v12 isRec2020LinearColorSpace];
    if (([(PVColorSpace *)v12 isRec2100HLGColorSpace]
       || [(PVColorSpace *)v12 isP3HLGGammaColorSpace])
      && ![(PVColorSpace *)v11 isHDRSpace]
      && ![(PVColorSpace *)v11 isRec2020GammaColorSpace])
    {
      float64x2_t v28 = [(PVColorSpace *)v12 nclcTriplet];
      uint64_t v29 = [v28 hgColorPrimary];
      float64x2_t v30 = [(PVColorSpace *)v12 nclcTriplet];
      PVCreateColorConform(v29, [v30 hgTransferFunction], 0, 3, 8, 0, 0, &v57);

      float64x2_t v31 = v57;
      double v32 = *a6;
      (*(void (**)(HGColorConform *, void, HGColorConform *))(*(void *)v57 + 120))(v57, 0, *a6);
      BOOL v26 = [(PVColorSpace *)v11 isRec2020LinearColorSpace];
      if (v32 != v31)
      {
        if (v32) {
          (*(void (**)(HGColorConform *))(*(void *)v32 + 24))(v32);
        }
        *a6 = v31;
        (*(void (**)(HGColorConform *))(*(void *)v31 + 16))(v31);
      }
      (*(void (**)(HGColorConform *))(*(void *)v31 + 24))(v31);
    }
    else if (!v27)
    {
LABEL_53:
      if (!v26)
      {
        if ([(id)v55 isProResLogColorSpace])
        {
          if (ToSpaceProcessInHDR(v11))
          {
            float64x2_t v35 = (HGColorConform *)HGObject::operator new(0x320uLL);
            HGColorConform::HGColorConform(v35);
            HGColorConform::SetConversion((HGNode *)v35, 0, (char *)0xE, 1, 3);
            float64x2_t v36 = *a6;
            (*(void (**)(HGColorConform *, void, HGColorConform *))(*(void *)v35 + 120))(v35, 0, *a6);
            if (v36 != v35)
            {
              if (v36) {
                (*(void (**)(HGColorConform *))(*(void *)v36 + 24))(v36);
              }
              *a6 = v35;
              (*(void (**)(HGColorConform *))(*(void *)v35 + 16))(v35);
            }
            float64x2_t v37 = (HGPQ::OOTF *)HGObject::operator new(0x1B0uLL);
            HGPQ::OOTF::OOTF(v37, 1, 100.0, 100.0);
            (*(void (**)(HGPQ::OOTF *, void, HGColorConform *))(*(void *)v37 + 120))(v37, 0, v35);
            float64x2_t v38 = (HGNode *)HGObject::operator new(0x1C0uLL);
            HGHLG::InverseOOTF::InverseOOTF(v38);
          }
          {
            ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::$_0::operator()();
            __cxa_atexit((void (*)(void *))std::unique_ptr<HGColorConformLook3DLUT>::~unique_ptr[abi:ne180100], &ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::LUTData, &dword_1B73F3000);
          }
          long long v39 = (HGColorConform *)HGObject::operator new(0x320uLL);
          HGColorConform::HGColorConform(v39);
          HGColorConform::SetLook3DLutConversion((uint64_t)v39, ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::LUTData, 0, 0);
          unint64_t v40 = *a6;
          (*(void (**)(HGColorConform *, void, HGColorConform *))(*(void *)v39 + 120))(v39, 0, *a6);
          if (v40 != v39)
          {
            if (v40) {
              (*(void (**)(HGColorConform *))(*(void *)v40 + 24))(v40);
            }
            *a6 = v39;
            (*(void (**)(HGColorConform *))(*(void *)v39 + 16))(v39);
          }
          uint64_t v41 = +[PVColorSpace rec709GammaColorSpace];

          (*(void (**)(HGColorConform *))(*(void *)v39 + 24))(v39);
          float64x2_t v12 = (PVColorSpace *)v41;
        }
        if (!NeedsConversionToHDR(v12, v11)) {
          goto LABEL_81;
        }
        long long v42 = *a6;
        float64x2_t v56 = v42;
        if (v42) {
          (*(void (**)(HGColorConform *))(*(void *)v42 + 16))(v42);
        }
        ConvertToHDR(&v56, v12, v11, &v57);
        long long v43 = *a6;
        float64x2_t v44 = v57;
        if (*a6 == v57)
        {
          if (v43) {
            (*(void (**)(HGColorConform *))(*(void *)v43 + 24))(v43);
          }
        }
        else
        {
          if (v43) {
            (*(void (**)(HGColorConform *))(*(void *)v43 + 24))(v43);
          }
          *a6 = v44;
        }
        if (v56) {
          (*(void (**)(HGColorConform *))(*(void *)v56 + 24))(v56);
        }
        uint64_t v45 = +[PVColorSpace rec2020LinearColorSpace];

        float64x2_t v12 = (PVColorSpace *)v45;
        if (![(PVColorSpace *)v11 isRec2020LinearColorSpace])
        {
LABEL_81:
          long long v46 = [(PVColorSpace *)v12 nclcTriplet];
          uint64_t v47 = [v46 hgColorPrimary];
          float64x2_t v48 = [(PVColorSpace *)v12 nclcTriplet];
          PVCreateColorConform(v47, [v48 hgTransferFunction], 0, objc_msgSend(v54, "hgColorPrimary"), objc_msgSend(v54, "hgTransferFunction"), 0, 0, &v57);

          float64x2_t v49 = v57;
          float64x2_t v50 = *a6;
          (*(void (**)(HGColorConform *, void, HGColorConform *))(*(void *)v57 + 120))(v57, 0, *a6);
          if (v50 != v49)
          {
            if (v50) {
              (*(void (**)(HGColorConform *))(*(void *)v50 + 24))(v50);
            }
            *a6 = v49;
            (*(void (**)(HGColorConform *))(*(void *)v49 + 16))(v49);
          }
          (*(void (**)(HGColorConform *))(*(void *)v49 + 24))(v49);
        }
      }
      if ([(PVColorSpace *)v12 isWideGamutSpace])
      {
        char v51 = [(PVColorSpace *)v11 isWideGamutSpace];
        char v52 = a4 == 1 ? v51 : 1;
        if ((v52 & 1) == 0)
        {
          double v53 = (HGColorClamp *)HGObject::operator new(0x1C0uLL);
          HGColorClamp::HGColorClamp(v53);
        }
      }
      goto LABEL_28;
    }
    if (![(PVColorSpace *)v11 isHDRSpace] && !v26)
    {
      float64x2_t v33 = (HGColorConform *)HGObject::operator new(0x1B0uLL);
      HGHLG::HLGToSDR::HLGToSDR((uint64_t)v33, 2);
      float64x2_t v34 = *a6;
      (*(void (**)(HGColorConform *, void, HGColorConform *))(*(void *)v33 + 120))(v33, 0, *a6);
      LOBYTE(v26) = [(PVColorSpace *)v11 isRec709GammaColorSpace];
      HGHLG::HLGToSDR::SetOutputIsRec709Gamma((uint64_t)v33, v26);
      if (v34 != v33)
      {
        if (v34) {
          (*(void (**)(HGColorConform *))(*(void *)v34 + 24))(v34);
        }
        *a6 = v33;
        (*(void (**)(HGColorConform *))(*(void *)v33 + 16))(v33);
      }
      (*(void (**)(HGColorConform *))(*(void *)v33 + 24))(v33);
    }
    goto LABEL_53;
  }
LABEL_29:

LABEL_30:
}

{
  id v11;
  HGColorConform *v12;
  id v13;
  HGColorConform *v14;
  uint64_t vars8;

  uint64_t v13 = a2;
  uint64_t v11 = a3;
  float64x2_t v12 = *a1;
  int v14 = v12;
  if (v12) {
    (*(void (**)(HGColorConform *))(*(void *)v12 + 16))(v12);
  }
  ColorConformInput(&v14, v13, v11, a4, a5, a6);
  if (v14) {
    (*(void (**)(HGColorConform *))(*(void *)v14 + 24))(v14);
  }
}

void sub_1B7431DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, id a13, uint64_t a14)
{
  if (*v15) {
    (*(void (**)(void))(*(void *)*v15 + 24))(*v15);
  }

  _Unwind_Resume(a1);
}

uint64_t ToSpaceProcessInHDR(PVColorSpace *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [(PVColorSpace *)v1 isHDRSpace]
    || [(PVColorSpace *)v1 isRec2020LinearColorSpace];

  return v2;
}

void sub_1B74322DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::$_0::operator()()
{
  uint64_t v0 = HGObject::operator new(0x78uLL);
  uint64_t result = HGColorConformLook3DLUT::HGColorConformLook3DLUT(v0, 9);
  ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::LUTData = (uint64_t)v0;
  return result;
}

void sub_1B7432324(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HGColorConformLook3DLUT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t NeedsConversionToHDR(PVColorSpace *a1, PVColorSpace *a2)
{
  __n128 v3 = a1;
  float v4 = a2;
  if ([(PVColorSpace *)v3 isHDRSpace]
    || [(PVColorSpace *)v3 isRec2020LinearColorSpace]
    || !ToSpaceProcessInHDR(v4))
  {
    uint64_t v6 = 0;
  }
  else
  {
    int v5 = [(PVColorSpace *)v3 nclcTriplet];
    uint64_t v6 = [v5 isInvalid] ^ 1;
  }
  return v6;
}

void sub_1B7432418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7432524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

id PVCreateColorInColorSpace(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  uint64_t v10 = (CGColorSpace *)[v9 cgColorSpace];
  float v11 = a5;
  float v12 = a4;
  float v13 = a3;
  float v14 = a2;
  PCColor::PCColor(&v20, v14, v13, v12, v11, v10);
  uint64_t v19 = 0;
  float v18 = 0.0;
  int v15 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBE8]);
  PCColor::getRGB(&v20, (float *)&v19 + 1, &v18, (float *)&v19, v15);
  BOOL v16 = [MEMORY[0x1E4F428B8] colorWithRed:*((float *)&v19 + 1) green:v18 blue:*(float *)&v19 alpha:a5];
  PCCFRef<CGColorSpace *>::~PCCFRef(&v20.var1._obj);

  return v16;
}

void sub_1B7432660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PVCreateColorWithInverseToneMap(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (CGColor *)[v1 CGColor];
  ColorSpace = CGColorGetColorSpace(v2);
  if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelRGB)
  {
    NSLog(&cfstr_UnexpectedNonR.isa);
    goto LABEL_6;
  }
  float v4 = +[PVColorSpace sRGBColorSpace];
  if (ColorSpace == (CGColorSpace *)[v4 cgColorSpace])
  {
  }
  else
  {
    int v5 = +[PVColorSpace extendedSRGBColorSpace];
    uint64_t v6 = [v5 cgColorSpace];

    if (ColorSpace != (CGColorSpace *)v6)
    {
      NSLog(&cfstr_UnexpectedNonS.isa);
LABEL_6:
      id v7 = v1;
      goto LABEL_9;
    }
  }
  Components = CGColorGetComponents(v2);
  float v9 = *Components;
  float v10 = Components[1];
  float v11 = Components[2];
  PCColor::PCColor(&v18, v9, v10, v11, ColorSpace);
  uint64_t v17 = 0;
  float v16 = 0.0;
  float v12 = +[PVColorSpace rec2020GammaColorSpace];
  PCColor::getRGB(&v18, (float *)&v17 + 1, (float *)&v17, &v16, (CGColorSpaceRef)[v12 cgColorSpace]);
  v15[0] = *((float *)&v17 + 1);
  LODWORD(v15[1]) = v17;
  v15[2] = v16;
  FxApplyBT2446A(v15, v14);
  PVCreateColorInColorSpace(v12, v14[0], v14[1], v14[2], Components[3]);
  id v7 = (id)objc_claimAutoreleasedReturnValue();

  PCCFRef<CGColorSpace *>::~PCCFRef(&v18.var1._obj);
LABEL_9:

  return v7;
}

void sub_1B7432828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);

  _Unwind_Resume(a1);
}

void PVCreateColorConform(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, HGColorConform **a8@<X8>)
{
  float v16 = (HGColorConform *)HGObject::operator new(0x320uLL);
  HGColorConform::HGColorConform(v16);
  *a8 = v16;
  if ((HGColorConform::SetConversion((uint64_t)v16, a1, a2, a3, a4, a5, a6) & 1) == 0)
  {
    id v17 = [NSString stringWithFormat:@"unable to setup color conform:\n <>From (primaries:%d, transfer:%d, matrix:%d)\n <>To   (primaries:%d, transfer:%d, matrix:%d)", a1, a2, a3, a4, a5, a6];
    PVLogError(v17, @"ProVideo.ColorConform", a7);
  }
}

void sub_1B7432988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  _Unwind_Resume(a1);
}

CGColorSpace **PCCFRef<CGColorSpace *>::~PCCFRef(CGColorSpace **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    PCCFRefTraits<CGColorSpace *>::release(v2);
  }
  return a1;
}

void PVRenderJob::PVRenderJob(uint64_t a1, void *a2)
{
  id v3 = a2;
  HGObject::HGObject((HGObject *)a1);
  *(void *)a1 = &unk_1F1088F38;
  id v4 = v3;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  PVPerfStats::FrameStats::FrameStats(a1 + 136);
  PerfTimer::PerfTimer((PerfTimer *)(a1 + 224));
  PerfTimer::PerfTimer((PerfTimer *)(a1 + 240));
  PerfTimer::PerfTimer((PerfTimer *)(a1 + 256));
  *(_DWORD *)(a1 + 272) = 0;
  int v5 = [*(id *)(a1 + 16) videoCompositingContext];
  uint64_t v6 = (const char *)[v5 renderGraphDumpLevel];

  HGLogger::setLevel((HGLogger *)"graph", v6);
  operator new();
}

void sub_1B7432BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (a10) {
    (*((void (**)(void **))*a10 + 3))(a10);
  }
  int v15 = *(void **)(v10 + 200);
  if (v15)
  {
    *(void *)(v10 + 208) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void *)(v10 + 104);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  uint64_t v17 = *(void *)(v10 + 96);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  a10 = v13;
  std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v13 - 3;
  std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*v12) {
    (*(void (**)(void))(*(void *)*v12 + 24))(*v12);
  }

  HGObject::~HGObject((HGObject *)v10);
  _Unwind_Resume(a1);
}

void PVRenderJob::~PVRenderJob(PVRenderJob *this)
{
  *(void *)this = &unk_1F1088F38;
  uint64_t v2 = (void **)((char *)this + 72);
  id v3 = (uint64_t *)*((void *)this + 9);
  id v4 = (uint64_t *)*((void *)this + 10);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(uint64_t))(*(void *)*v3 + 24))(*v3);
        id v4 = (uint64_t *)*((void *)this + 10);
      }
      *v3++ = 0;
    }
    while (v3 != v4);
    id v3 = (uint64_t *)*v2;
    if (v4 != *v2)
    {
      do
        std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100]((uint64_t)this + 88, --v4);
      while (v4 != v3);
    }
  }
  int v5 = (uint64_t **)((char *)this + 48);
  uint64_t v6 = (uint64_t *)*((void *)this + 6);
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = v3;
  id v7 = (uint64_t *)*((void *)this + 7);
  if (v6 != v7)
  {
    do
    {
      if (*v6)
      {
        (*(void (**)(uint64_t))(*(void *)*v6 + 24))(*v6);
        id v7 = (uint64_t *)*((void *)this + 7);
      }
      *v6++ = 0;
    }
    while (v6 != v7);
    uint64_t v6 = *v5;
    while (v7 != v6)
      std::allocator<HGRef<HGNode>>::destroy[abi:ne180100]((uint64_t)this + 64, --v7);
  }
  *((void *)this + 7) = v6;
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 14);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 15);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 5);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  float v12 = (void *)*((void *)this + 25);
  if (v12)
  {
    *((void *)this + 26) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *((void *)this + 13);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  uint64_t v14 = *((void *)this + 12);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v16 = v2;
  std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](&v16);
  uint64_t v16 = (void **)((char *)this + 48);
  std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100](&v16);
  uint64_t v15 = *((void *)this + 5);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }

  HGObject::~HGObject((HGObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  PVRenderJob::~PVRenderJob(this);

  HGObject::operator delete(v1);
}

void PVRenderJob::InitFrameStats(PVRenderJob *this, int a2, CMTime *a3, char a4)
{
  CMTime v6 = *a3;
  id v7 = &unk_1F10898E8;
  PVPerfStats::FrameStats::Init((PVPerfStats::FrameStats *)((char *)this + 136), 11, a2, &v6);
  *((unsigned char *)this + 192) = a4;
}

uint64_t PVRenderJob::GetFrameStats(PVRenderJob *this)
{
  return (uint64_t)this + 136;
}

id PVRenderJob::GetDelegate(PVRenderJob *this)
{
  return *((id *)this + 2);
}

void PVRenderJob::CancelJob(PVRenderJob *this, int a2)
{
  uint64_t v8 = (HGSynchronizable *)*((void *)this + 4);
  char v9 = 0;
  HGSynchronizable::Lock(v8);
  int v4 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v8);
  if (v4 != 5)
  {
    CMTime v6 = (HGSynchronizable *)*((void *)this + 14);
    char v7 = 0;
    HGSynchronizable::Lock(v6);
    uint64_t v8 = (HGSynchronizable *)*((void *)this + 4);
    char v9 = 0;
    HGSynchronizable::Lock(v8);
    int v5 = *((_DWORD *)this + 6);
    HGSynchronizer::~HGSynchronizer(&v8);
    *((_DWORD *)this + 32) = v5;
    uint64_t v8 = (HGSynchronizable *)*((void *)this + 4);
    char v9 = 0;
    HGSynchronizable::Lock(v8);
    *((_DWORD *)this + 6) = 5;
    HGSynchronizer::~HGSynchronizer(&v8);
    if (a2) {
      [*((id *)this + 2) finishCancelledJob];
    }
    if (*((void *)this + 13)) {
      PVRenderManager::CancelRenderJob(*((void *)this + 12), (HGRenderJob **)this + 13);
    }
    HGSynchronizer::~HGSynchronizer(&v6);
  }
}

void sub_1B74331B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

uint64_t PVRenderJob::State(PVRenderJob *this)
{
  int v4 = (HGSynchronizable *)*((void *)this + 4);
  char v5 = 0;
  HGSynchronizable::Lock(v4);
  uint64_t v2 = *((unsigned int *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v4);
  return v2;
}

void PVRenderJob::GraphBuildingJobNotification(PVRenderJob *this, HGRenderJob *a2)
{
  id v3 = (void *)MEMORY[0x1BA9C0A20](this, a2);
  uint64_t UserData = HGRenderJob::GetUserData((HGRenderJob *)this);
  int State = HGRenderJob::GetState((HGRenderJob *)this);
  if (State > 1)
  {
    switch(State)
    {
      case 6:
        HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
        char v7 = *(HGSynchronizable **)(UserData + 32);
        char v8 = 0;
        HGSynchronizable::Lock(v7);
        int v6 = 5;
        goto LABEL_9;
      case 4:
        PerfTimer::End((PerfTimer *)(UserData + 224));
        PVPerfStats::FrameStats::SetValueForIndex(UserData + 136, 0, *(double *)(UserData + 232) - *(double *)(UserData + 224));
        PVRenderJob::SetupRenderer((PVRenderJob *)UserData);
        PVRenderJob::BuildGraph((PVRenderJob *)UserData);
        PVRenderJob::SubmitRenderJob((PVRenderJob *)UserData);
        break;
      case 2:
        PerfTimer::Start((PerfTimer *)(UserData + 224));
        break;
    }
  }
  else if ((State + 1000) < 3)
  {
    HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
    char v7 = *(HGSynchronizable **)(UserData + 32);
    char v8 = 0;
    HGSynchronizable::Lock(v7);
    int v6 = 6;
LABEL_9:
    *(_DWORD *)(UserData + 24) = v6;
    HGSynchronizer::~HGSynchronizer(&v7);
    PVRenderJob::FinishRequest((PVRenderJob *)UserData);
  }
}

uint64_t PVRenderJob::SetupRenderer(PVRenderJob *this)
{
  RenderContext = (HGRenderContext *)HGRenderJob::GetRenderContext(*((HGRenderJob **)this + 13));
  uint64_t Renderer = HGRenderContext::GetRenderer(RenderContext);
  uint64_t v4 = Renderer;
  if (Renderer)
  {
    (*(void (**)(uint64_t))(*(void *)Renderer + 16))(Renderer);
    uint64_t v7 = *((void *)this + 5);
    int v6 = (uint64_t *)((char *)this + 40);
    uint64_t v5 = v7;
    if (v7 == v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      uint64_t v4 = *v6;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 5);
    int v6 = (uint64_t *)((char *)this + 40);
    uint64_t v5 = v8;
    if (!v8)
    {
      uint64_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  *int v6 = v4;
LABEL_8:
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 16);

  return v9(v4);
}

void sub_1B743343C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void PVRenderJob::BuildGraph(PVRenderJob *this)
{
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v6, "kPVInstructionGraphToHeliumGraphLogContext", 1, "Build Helium Render Graph from Delegate");
  v7._CMTime start = *((double *)this + 4);
  LOBYTE(v7._end) = 0;
  HGSynchronizable::Lock(*(HGSynchronizable **)&v7._start);
  *((_DWORD *)this + 6) = 1;
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)&v7);
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v2) >= 1)
  {
    if (objc_opt_respondsToSelector()) {
      [*((id *)this + 2) packedFamilyCode];
    }
    kdebug_trace();
  }
  PerfTimer::PerfTimer(&v7);
  PerfTimer::Start(&v7);
  PVRenderJob::SetJobsRendererParameters(this, *((HGRenderJob **)this + 13));
  [*((id *)this + 2) buildGraph:(char *)this + 48 renderContext:HGRenderJob::GetRenderContext(*((HGRenderJob **)this + 13)) frameStats:(char *)this + 136];
  PerfTimer::End(&v7);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 2u, v7._end - v7._start);
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v3) >= 1) {
    kdebug_trace();
  }
  uint64_t v4 = (HGSynchronizable *)*((void *)this + 4);
  char v5 = 0;
  HGSynchronizable::Lock(v4);
  if (*((_DWORD *)this + 6) == 1) {
    *((_DWORD *)this + 6) = 2;
  }
  HGSynchronizer::~HGSynchronizer(&v4);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v6);
}

void sub_1B74335FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void PVRenderJob::SubmitRenderJob(PVRenderJob *this)
{
  uint64_t v19 = (HGSynchronizable *)*((void *)this + 4);
  char v20 = 0;
  HGSynchronizable::Lock(v19);
  int v2 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v19);
  if (v2 == 5)
  {
    PVRenderJob::FinishRequest(this);
    return;
  }
  id v3 = (HGRenderJob **)((char *)this + 104);
  uint64_t Renderer = (HGRenderer *)HGRenderJob::GetRenderer(*((HGRenderJob **)this + 13));
  char v5 = (HGRenderJob *)HGObject::operator new(0x160uLL);
  HGRenderJob::HGRenderJob(v5);
  HGUserJob::SetPriority((uint64_t)v5, 0);
  if (objc_opt_respondsToSelector()) {
    int v6 = [*((id *)this + 2) jobPriority];
  }
  else {
    int v6 = 5;
  }
  if (objc_opt_respondsToSelector()) {
    int v7 = [*((id *)this + 2) renderThreadPriority];
  }
  else {
    int v7 = 3;
  }
  if (objc_opt_respondsToSelector()) {
    int v8 = [*((id *)this + 2) renderContextPriority];
  }
  else {
    int v8 = 5;
  }
  HGRenderJob::SetPriority((uint64_t)v5, v6);
  HGRenderJob::SetGLContextPriority((uint64_t)v5, v8);
  HGRenderJob::SetRenderer(v5, Renderer);
  HGRenderJob::SetNotifyFunc(v5, (void (*)(HGRenderJob *))PVRenderJob::RenderJobNotification);
  HGRenderJob::SetRenderThreadPriority((uint64_t)v5, v7);
  uint64_t UserTag = HGRenderJob::GetUserTag(*v3);
  HGRenderJob::SetUserTag(v5, UserTag);
  HGRenderJob::SetUserData(v5, this);
  PVRenderJob::SetJobsRendererParameters(this, v5);
  for (double i = (HGNode **)*((void *)this + 6); i != *((HGNode ***)this + 7); ++i)
  {
    uint64_t v11 = *i;
    if (*i) {
      (*(void (**)(HGNode *))(*(void *)v11 + 16))(*i);
    }
    float v12 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
    HGRenderNode::HGRenderNode(v12);
    HGRenderNode::SetNode(v12, v11);
    HGRenderNode::SetDestination((uint64_t)v12, 0);
    uint64_t v13 = HGRenderJob::GetUserTag(v5);
    HGRenderNode::SetUserTag((uint64_t)v12, v13);
    HGRenderJob::AddRenderNode(v5, v12);
    if (v12) {
      (*(void (**)(HGRenderNode *))(*(void *)v12 + 24))(v12);
    }
    if (v11) {
      (*(void (**)(HGNode *))(*(void *)v11 + 24))(v11);
    }
  }
  uint64_t v19 = (HGSynchronizable *)*((void *)this + 4);
  char v20 = 0;
  HGSynchronizable::Lock(v19);
  int v14 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v19);
  if (v14 == 5)
  {
    PVRenderJob::FinishRequest(this);
    if (!v5) {
      return;
    }
LABEL_32:
    (*(void (**)(HGRenderJob *))(*(void *)v5 + 24))(v5);
    return;
  }
  uint64_t v17 = (HGSynchronizable *)*((void *)this + 14);
  char v18 = 0;
  HGSynchronizable::Lock(v17);
  uint64_t v19 = (HGSynchronizable *)*((void *)this + 4);
  char v20 = 0;
  HGSynchronizable::Lock(v19);
  int v15 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v19);
  if (v15 != 5)
  {
    uint64_t v16 = *v3;
    if (*v3 != v5)
    {
      if (v16) {
        (*(void (**)(HGRenderJob *))(*(void *)v16 + 24))(v16);
      }
      *id v3 = v5;
      if (v5) {
        (*(void (**)(HGRenderJob *))(*(void *)v5 + 16))(v5);
      }
    }
    PVRenderManager::EnqueueRenderJob(*((void *)this + 12), (HGRenderJob **)this + 13);
  }
  HGSynchronizer::~HGSynchronizer(&v17);
  if (v5) {
    goto LABEL_32;
  }
}

void sub_1B7433994(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void PVRenderJob::FinishRequest(PVRenderJob *this)
{
  uint64_t v10 = (HGSynchronizable *)*((void *)this + 4);
  char v11 = 0;
  HGSynchronizable::Lock(v10);
  int v2 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v10);
  if (v2 != 7)
  {
    if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v3) >= 1)
    {
      if (objc_opt_respondsToSelector()) {
        [*((id *)this + 2) packedFamilyCode];
      }
      kdebug_trace();
    }
    PerfTimer::PerfTimer(&v9);
    PerfTimer::Start(&v9);
    if (v2 != 6)
    {
      if (v2 == 5)
      {
        [*((id *)this + 2) finishCancelledJob];
      }
      else if (v2 == 4)
      {
        [*((id *)this + 2) finishCompletedJob];
      }
      else
      {
        NSLog(&cfstr_WarningFinishi.isa);
      }
    }
    PerfTimer::End(&v9);
    PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 8u, v9._end - v9._start);
    PVPerfStats::FrameStats::MarkEndTimeForIndex((PVPerfStats::FrameStats *)((char *)this + 136), 9u);
    if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v4) >= 1) {
      kdebug_trace();
    }
    (*(void (**)(PVRenderJob *))(*(void *)this + 16))(this);
    char v5 = (void *)*((void *)this + 2);
    int v8 = this;
    (*(void (**)(PVRenderJob *))(*(void *)this + 16))(this);
    [v5 renderJobFinished:&v8];
    if (v8) {
      (*(void (**)(PVRenderJob *))(*(void *)v8 + 24))(v8);
    }
    int v6 = (HGSynchronizable *)*((void *)this + 15);
    char v7 = 0;
    HGSynchronizable::Lock(v6);
    uint64_t v10 = (HGSynchronizable *)*((void *)this + 4);
    char v11 = 0;
    HGSynchronizable::Lock(v10);
    *((_DWORD *)this + 6) = 7;
    HGSynchronizer::~HGSynchronizer(&v10);
    HGSynchronizable::Notify(v6);
    HGSynchronizer::~HGSynchronizer(&v6);
    (*(void (**)(PVRenderJob *))(*(void *)this + 24))(this);
  }
}

void sub_1B7433CE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void PVRenderJob::RenderJobNotification(PVRenderJob *this, HGRenderJob *a2)
{
  id v3 = (void *)MEMORY[0x1BA9C0A20](this, a2);
  uint64_t UserData = HGRenderJob::GetUserData((HGRenderJob *)this);
  int State = HGRenderJob::GetState((HGRenderJob *)this);
  switch(State)
  {
    case 2:
      PVRenderJob::StartWaitToRenderTimer((PVRenderJob *)UserData, v6);
      goto LABEL_14;
    case 3:
    case 5:
    case 7:
      goto LABEL_14;
    case 4:
      PVRenderJob::StopWaitToRenderTimer((PVRenderJob *)UserData);
      PVRenderJob::SetupBitmapsOnRenderNodes((PVRenderJob *)UserData, v8);
      PVRenderJob::StartRenderTimer((PVRenderJob *)UserData, v9);
      int v14 = *(HGSynchronizable **)(UserData + 32);
      char v15 = 0;
      HGSynchronizable::Lock(v14);
      *(_DWORD *)(UserData + 24) = 3;
      HGSynchronizer::~HGSynchronizer(&v14);
      goto LABEL_14;
    case 6:
      if (*(_DWORD *)(UserData + 128) == 3) {
        PVRenderJob::StopRenderTimer((PVRenderJob *)UserData);
      }
      HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
      int v14 = *(HGSynchronizable **)(UserData + 32);
      char v15 = 0;
      HGSynchronizable::Lock(v14);
      int v7 = 5;
      goto LABEL_11;
    case 8:
      PVRenderJob::StopRenderTimer((PVRenderJob *)UserData);
      int v14 = *(HGSynchronizable **)(UserData + 32);
      char v15 = 0;
      HGSynchronizable::Lock(v14);
      *(_DWORD *)(UserData + 24) = 4;
      HGSynchronizer::~HGSynchronizer(&v14);
      uint64_t Renderer = HGRenderJob::GetRenderer((HGRenderJob *)this);
      unint64_t Stats = HGRenderer::GetStats(Renderer, 11);
      PVPerfStats::FrameStats::SetValueForIndex(UserData + 136, 0xAu, (double)Stats);
      uint64_t v12 = HGRenderJob::GetRenderer((HGRenderJob *)this);
      double v13 = (*(double (**)(uint64_t))(*(void *)v12 + 112))(v12);
      PVPerfStats::FrameStats::SetValueForIndex(UserData + 136, 6u, v13 / 1000.0);
      goto LABEL_13;
    default:
      if ((State + 1000) >= 3) {
        goto LABEL_14;
      }
      if (*(_DWORD *)(UserData + 128) == 3) {
        PVRenderJob::StopRenderTimer((PVRenderJob *)UserData);
      }
      HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
      int v14 = *(HGSynchronizable **)(UserData + 32);
      char v15 = 0;
      HGSynchronizable::Lock(v14);
      int v7 = 6;
LABEL_11:
      *(_DWORD *)(UserData + 24) = v7;
      HGSynchronizer::~HGSynchronizer(&v14);
LABEL_13:
      PVRenderJob::FinishRequest((PVRenderJob *)UserData);
LABEL_14:
      return;
  }
}

void PVRenderJob::StartWaitToRenderTimer(PVRenderJob *this, const char *a2)
{
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", a2) >= 1)
  {
    if (objc_opt_respondsToSelector()) {
      [*((id *)this + 2) packedFamilyCode];
    }
    kdebug_trace();
  }

  PerfTimer::Start((PerfTimer *)this + 15);
}

uint64_t PVRenderJob::StopWaitToRenderTimer(PVRenderJob *this)
{
  PerfTimer::End((PerfTimer *)this + 15);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 3u, *((double *)this + 31) - *((double *)this + 30));
  uint64_t result = HGLogger::getLevel((HGLogger *)"PVSignPost", v2);
  if ((int)result >= 1)
  {
    return kdebug_trace();
  }
  return result;
}

void *PVRenderJob::SetupBitmapsOnRenderNodes(PVRenderJob *this, const char *a2)
{
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", a2) >= 1)
  {
    if (objc_opt_respondsToSelector()) {
      [*((id *)this + 2) packedFamilyCode];
    }
    kdebug_trace();
  }
  PerfTimer::PerfTimer(&v13);
  PerfTimer::Start(&v13);
  id v3 = (void *)((char *)this + 72);
  [*((id *)this + 2) setupDestinationBuffers:(char *)this + 72 renderContext:HGRenderJob::GetRenderContext(*((HGRenderJob **)this + 13)) frameStats:(char *)this + 136];
  PerfTimer::End(&v13);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 4u, v13._end - v13._start);
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v4) >= 1) {
    kdebug_trace();
  }
  uint64_t result = (void *)HGRenderJob::GetRenderNodeList(*((HGRenderJob **)this + 13));
  uint64_t v6 = result[1] - *result;
  if (v6)
  {
    int v7 = result;
    uint64_t v8 = 0;
    unint64_t v9 = v6 >> 3;
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    do
    {
      char v11 = *(HGRenderNode **)(*v7 + 8 * v8);
      uint64_t v12 = *(HGBitmap **)(*v3 + 8 * v8);
      if (v12) {
        (*(void (**)(void))(*(void *)v12 + 16))(*(void *)(*v3 + 8 * v8));
      }
      uint64_t result = (void *)HGRenderNode::SetBitmap(v11, v12);
      if (v12) {
        uint64_t result = (void *)(*(uint64_t (**)(HGBitmap *))(*(void *)v12 + 24))(v12);
      }
      ++v8;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_1B743423C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void PVRenderJob::StartRenderTimer(PVRenderJob *this, const char *a2)
{
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", a2) >= 1)
  {
    if (objc_opt_respondsToSelector()) {
      [*((id *)this + 2) packedFamilyCode];
    }
    kdebug_trace();
  }

  PerfTimer::Start((PerfTimer *)this + 16);
}

uint64_t PVRenderJob::StopRenderTimer(PVRenderJob *this)
{
  PerfTimer::End((PerfTimer *)this + 16);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 7u, *((double *)this + 33) - *((double *)this + 32));
  uint64_t result = HGLogger::getLevel((HGLogger *)"PVSignPost", v2);
  if ((int)result >= 1)
  {
    HGRenderer::GetStats(*((void *)this + 5), 11);
    return kdebug_trace();
  }
  return result;
}

void PVRenderJob::StartHandlingRequest(PVRenderJob *this)
{
  char v15 = (HGSynchronizable *)*((void *)this + 4);
  char v16 = 0;
  HGSynchronizable::Lock(v15);
  int v2 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v15);
  if (v2 == 5)
  {
    PVRenderJob::FinishRequest(this);
    return;
  }
  id v3 = (HGRenderJob *)HGObject::operator new(0x160uLL);
  HGRenderJob::HGRenderJob(v3);
  HGUserJob::SetPriority((uint64_t)v3, 7);
  HGRenderJob::SetNotifyFunc(v3, (void (*)(HGRenderJob *))PVRenderJob::GraphBuildingJobNotification);
  uint64_t v4 = [*((id *)this + 2) videoCompositingContext];
  int v5 = [v4 renderDevice];

  if (v5 == 1) {
    int v6 = 1;
  }
  else {
    int v6 = 2 * (v5 == 0);
  }
  if (objc_opt_respondsToSelector()) {
    int v7 = [*((id *)this + 2) jobPriority];
  }
  else {
    int v7 = 5;
  }
  if (objc_opt_respondsToSelector()) {
    int v8 = [*((id *)this + 2) graphBuildThreadPriority];
  }
  else {
    int v8 = 0;
  }
  if (objc_opt_respondsToSelector()) {
    int v9 = [*((id *)this + 2) renderContextPriority];
  }
  else {
    int v9 = 5;
  }
  HGRenderJob::SetPriority((uint64_t)v3, v7);
  HGRenderJob::SetGLContextPriority((uint64_t)v3, v9);
  HGUserJob::SetState((uint64_t)v3, v6);
  HGRenderJob::SetUserData(v3, this);
  HGRenderJob::SetUserTag(v3, [*((id *)this + 2) jobTypeTag]);
  HGRenderJob::SetCustomJobThreadPriority((uint64_t)v3, v8);
  HGRenderJob::SetRenderThreadPriority((uint64_t)v3, 0);
  char v15 = (HGSynchronizable *)*((void *)this + 4);
  char v16 = 0;
  HGSynchronizable::Lock(v15);
  int v10 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v15);
  if (v10 == 5)
  {
    PVRenderJob::FinishRequest(this);
    if (!v3) {
      return;
    }
LABEL_26:
    (*(void (**)(HGRenderJob *))(*(void *)v3 + 24))(v3);
    return;
  }
  PerfTimer v13 = (HGSynchronizable *)*((void *)this + 14);
  char v14 = 0;
  HGSynchronizable::Lock(v13);
  char v15 = (HGSynchronizable *)*((void *)this + 4);
  char v16 = 0;
  HGSynchronizable::Lock(v15);
  int v11 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v15);
  if (v11 != 5)
  {
    uint64_t v12 = (HGRenderJob *)*((void *)this + 13);
    if (v12 != v3)
    {
      if (v12) {
        (*(void (**)(HGRenderJob *))(*(void *)v12 + 24))(v12);
      }
      *((void *)this + 13) = v3;
      if (v3) {
        (*(void (**)(HGRenderJob *))(*(void *)v3 + 16))(v3);
      }
    }
    PVRenderManager::EnqueueRenderJob(*((void *)this + 12), (HGRenderJob **)this + 13);
  }
  HGSynchronizer::~HGSynchronizer(&v13);
  if (v3) {
    goto LABEL_26;
  }
}

void sub_1B7434640(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void PVRenderJob::WaitForFinish(PVRenderJob *this)
{
  uint64_t v1 = this;
  int v2 = (HGSynchronizable *)*((void *)this + 15);
  char v3 = 0;
  HGSynchronizable::Lock(v2);
  uint64_t v4 = (HGSynchronizable *)*((void *)v1 + 4);
  char v5 = 0;
  HGSynchronizable::Lock(v4);
  LODWORD(v1) = *((_DWORD *)v1 + 6);
  HGSynchronizer::~HGSynchronizer(&v4);
  if (v1 != 7) {
    HGSynchronizable::Wait(v2);
  }
  HGSynchronizer::~HGSynchronizer(&v2);
}

void sub_1B743472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void PVRenderJob::SetJobsRendererParameters(PVRenderJob *this, HGRenderJob *a2)
{
  id v19 = [*((id *)this + 2) videoCompositingContext];
  char v3 = [v19 concatenationFlag];
  int v4 = [v19 renderGraphDumpLevel];
  int v5 = [v19 dotGraphLevel];
  int v6 = [v19 bufferFormat];
  if (v6 == 28) {
    int v7 = 3;
  }
  else {
    int v7 = 1;
  }
  if (v6 == 27) {
    int v8 = 2;
  }
  else {
    int v8 = v7;
  }
  BOOL v9 = [v19 shaderFormat] != 27;
  HGRenderJob::SetDumpHeliumGraphLevel(a2, v4);
  HGRenderJob::SetDumpHeliumDotGraphLevel(a2, v5);
  HGRenderJob::SetProcessingBufferPrecision((uint64_t)a2, v8);
  HGRenderJob::SetMetalShaderPrecision((uint64_t)a2, v9);
  HGRenderJob::SetGraphConcatenationFlag(a2, v3);
  uint64_t Renderer = HGRenderJob::GetRenderer(a2);
  if (Renderer)
  {
    uint64_t v11 = [v19 gpuRenderAPI];
    uint64_t v12 = [v19 numCPUThreads];
    uint64_t v13 = [v19 tileSize];
    uint64_t v14 = [v19 pageSize];
    uint64_t v15 = [v19 traceGLLevel];
    int v16 = [v19 textureBorder];
    unsigned int v17 = +[PVEnvironment PV_TEXTURE_BORDER_WIDTH];
    if (v11)
    {
      if (v11 == 1)
      {
        uint64_t v11 = 1;
      }
      else
      {
        NSLog(&cfstr_WarningUnknown.isa, v11);
        uint64_t v11 = 0;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Renderer + 120))(Renderer, 43, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Renderer + 120))(Renderer, 5, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Renderer + 120))(Renderer, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Renderer + 120))(Renderer, 2, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Renderer + 120))(Renderer, 29, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Renderer + 120))(Renderer, 18, v14);
    if (v16) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Renderer + 120))(Renderer, 21, v18);
  }
}

void sub_1B7434A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (uint64_t *)**a1;
  if (v2)
  {
    int v4 = (uint64_t *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B7434BB0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B7434C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVRenderEffectLoader;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B7434F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,HGSynchronizable *a28)
{
  HGSynchronizer::~HGSynchronizer(&a28);
  _Unwind_Resume(a1);
}

void sub_1B74350A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::deque<PVLoadedEffectItem>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  uint64_t v3 = (id *)(*(void *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v2);

  --a1[5];

  return std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

void sub_1B7435178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7435374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::deque<PVLoadedEffectItem>::erase(int64x2_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  int v6 = (uint64_t *)(v5 + 8 * (v4 >> 8));
  if (a1[1].i64[0] == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 16 * v4;
  }
  float64x2_t v37 = v6;
  float64x2_t v38 = (id *)v7;
  if (v7 == a3) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - (char *)v6) - ((v7 - *v6) >> 4);
  }
  BOOL v9 = std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>::operator+[abi:ne180100]((uint64_t)&v37, v8);
  unint64_t v11 = (unint64_t)v9;
  unint64_t v12 = v10;
  uint64_t v13 = a1[2].i64[1];
  if (v8 <= (unint64_t)(v13 - 1) >> 1)
  {
    uint64_t v19 = v10 - *v9;
    uint64_t v20 = v19 >> 4;
    if (v19 < -15)
    {
      unint64_t v29 = 254 - v20;
      double v22 = &v9[-(v29 >> 8)];
      uint64_t v23 = *v22 + 16 * ~(_BYTE)v29;
    }
    else
    {
      unint64_t v21 = v20 + 1;
      double v22 = &v9[v21 >> 8];
      uint64_t v23 = *v22 + 16 * v21;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,0>(v37, (uint64_t)v38, v9, v10, v22, v23, v39);
    float64x2_t v30 = v38;

    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B7E73580);
    std::deque<PVLoadedEffectItem>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    uint64_t v14 = v10 - *v9;
    uint64_t v15 = v14 >> 4;
    if (v14 < -15)
    {
      unint64_t v24 = 254 - v15;
      unsigned int v17 = (id **)&v9[-(v24 >> 8)];
      uint64_t v18 = &(*v17)[2 * ~(_BYTE)v24];
    }
    else
    {
      unint64_t v16 = v15 + 1;
      unsigned int v17 = (id **)&v9[v16 >> 8];
      uint64_t v18 = &(*v17)[2 * v16];
    }
    unint64_t v25 = a1[2].i64[0] + v13;
    uint64_t v26 = a1->i64[1];
    BOOL v27 = (id **)(v26 + 8 * (v25 >> 8));
    if (a1[1].i64[0] == v26) {
      float64x2_t v28 = 0;
    }
    else {
      float64x2_t v28 = &(*v27)[2 * v25];
    }
    v39[0].n128_u64[0] = v11;
    v39[0].n128_u64[1] = v12;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>>>(v17, v18, v27, v28, (id **)v39);
    float64x2_t v31 = (id *)v39[0].n128_u64[1];

    --a1[2].i64[1];
    std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  unint64_t v32 = a1[2].u64[0];
  uint64_t v33 = a1->i64[1];
  float64x2_t v34 = (void *)(v33 + 8 * (v32 >> 8));
  if (a1[1].i64[0] == v33) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = *v34 + 16 * v32;
  }
  v39[0].n128_u64[0] = (unint64_t)v34;
  v39[0].n128_u64[1] = v35;
  return std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>::operator+[abi:ne180100]((uint64_t)v39, v8);
}

void *std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }
  return result;
}

void sub_1B7435804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64x2_t std::deque<PVLoadedEffectItem>::push_front(uint64_t a1, id *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<PVLoadedEffectItem>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = (void *)(v5 + 8 * (v4 >> 8));
  uint64_t v7 = *v6 + 16 * v4;
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4096;
  }
  *(void *)(v8 - 16) = *a2;
  *(void *)(v8 - 8) = a2[1];
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B7E73590);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_1B74359D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void PVLoadedEffectItem::PVLoadedEffectItem(PVLoadedEffectItem *this, PVEffect *a2)
{
  uint64_t v3 = a2;
  *(void *)this = v3;
  *((void *)this + 1) = 0;
  unint64_t v4 = (void *)MEMORY[0x1E4F1C9C8];
  uint64_t v5 = v3;
  uint64_t v6 = [v4 date];
  uint64_t v7 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v6;
}

void sub_1B7435A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::deque<PVLoadedEffectItem>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6 + 16 * v5;
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {

        BOOL v9 = *(void **)v7;
        v7 += 16;

        if (v7 - (void)*v6 == 4096)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != v8);
      unint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 128;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 256;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<PVLoadedEffectItem>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,0>@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = a4 - *a3;
    if ((a2 - a1) >> 4 >= v10 >> 4) {
      uint64_t v11 = v10 >> 4;
    }
    else {
      uint64_t v11 = (a2 - a1) >> 4;
    }
    uint64_t v12 = a2 - 16 * v11;
    uint64_t result = std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((uint64_t)&v20, v12, a2, a4);
    if (v12 != a1)
    {
      do
      {
        uint64_t v15 = *--v6;
        uint64_t v16 = v15 + 4096;
        uint64_t v17 = (v12 - a1) >> 4;
        if (v17 >= 256) {
          uint64_t v17 = 256;
        }
        uint64_t v18 = v12 - 16 * v17;
        uint64_t result = std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((uint64_t)&v20, v18, v12, v16);
        uint64_t v12 = v18;
      }
      while (v18 != a1);
    }
    uint64_t v5 = v14;
    if (*v6 + 4096 == v14)
    {
      uint64_t v19 = v6[1];
      ++v6;
      uint64_t v5 = v19;
    }
  }
  *a5 = v9;
  a5[1] = (uint64_t)v6;
  a5[2] = v5;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *(void **)(v7 - 16);
      v7 -= 16;
      objc_storeStrong((id *)(a4 - 16), v8);
      objc_storeStrong((id *)(a4 - 8), *(id *)(v7 + 8));
      a4 -= 16;
    }
    while (v7 != a2);
  }
  return a3;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>>>(id **a1, id *a2, id **a3, id *a4, id **a5)
{
  uint64_t v7 = *a5;
  uint64_t v8 = a5[1];
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (double i = *a1 + 512; ; double i = v12 + 512)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v8, a2, i, v7, &v14);
      uint64_t v8 = (id *)*((void *)&v15 + 1);
      uint64_t v7 = (id *)v15;
      *a5 = (id *)v15;
      a5[1] = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v8, a2, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(id *location@<X4>, id *a2@<X1>, id *a3@<X2>, id *a4@<X3>, id **a5@<X8>)
{
  uint64_t v5 = location;
  uint64_t v6 = a4;
  if (a2 == a3)
  {
    uint64_t v8 = a2;
  }
  else
  {
    uint64_t v8 = a3;
    uint64_t v9 = (unsigned char *)*a4 - (unsigned char *)location + 4096;
    if (((char *)a3 - (char *)a2) >> 4 >= v9 >> 4) {
      uint64_t v10 = v9 >> 4;
    }
    else {
      uint64_t v10 = ((char *)a3 - (char *)a2) >> 4;
    }
    uint64_t v11 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((int)&v18, a2, &a2[2 * v10], location);
    if (v11 != v8)
    {
      uint64_t v13 = v11;
      do
      {
        long long v15 = (id *)v6[1];
        ++v6;
        uint64_t v14 = v15;
        uint64_t v16 = ((char *)v8 - (char *)v13) >> 4;
        if (v16 >= 256) {
          uint64_t v16 = 256;
        }
        uint64_t v13 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((int)&v18, v13, &v13[2 * v16], v14);
      }
      while (v13 != v8);
    }
    uint64_t v5 = v12;
    if ((char *)*v6 + 4096 == (char *)v12)
    {
      uint64_t v17 = (id *)v6[1];
      ++v6;
      uint64_t v5 = v17;
    }
  }
  *a5 = v8;
  a5[1] = v6;
  a5[2] = v5;
}

id *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>(int a1, id *a2, id *a3, id *location)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    objc_storeStrong(location, *v5);
    objc_storeStrong(location + 1, v5[1]);
    location += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void *std::__find_segment_if[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__find_segment<PVLoadedEffectItem>,std::__identity>(void *result, void *a2, void **a3, void *a4, void *a5)
{
  if (result == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        a2 += 2;
        if (a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }
    if (result && (void *)(*result + 4096) == a2) {
      ++result;
    }
  }
  else
  {
    uint64_t v5 = *result + 4096;
    if ((void *)v5 == a2) {
      goto LABEL_14;
    }
    while (*a2 != *a5)
    {
      a2 += 2;
      if (a2 == (void *)v5) {
        goto LABEL_14;
      }
    }
    if (a2 == (void *)v5)
    {
LABEL_14:
      uint64_t v6 = result + 1;
      if (result + 1 == a3)
      {
        uint64_t v8 = result;
      }
      else
      {
        do
        {
          uint64_t v7 = 0;
          uint64_t v8 = v6;
          uint64_t v9 = *v6;
          do
          {
            if (*(void *)(v9 + v7) == *a5) {
              return v8;
            }
            v7 += 16;
          }
          while (v7 != 4096);
          uint64_t v6 = v8 + 1;
        }
        while (v8 + 1 != a3);
      }
      if (*a3 == a4)
      {
        return a3;
      }
      else
      {
        uint64_t v10 = *a3;
        while (*v10 != *a5)
        {
          v10 += 2;
          if (v10 == a4)
          {
            uint64_t v10 = a4;
            break;
          }
        }
        double result = a3;
        if (*a3 + 512 == v10) {
          return v8 + 2;
        }
      }
    }
  }
  return result;
}

void std::deque<PVLoadedEffectItem>::__add_front_capacity(void **a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v2) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x100)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      long long v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v11);
      long long v43 = (char *)__p;
      float64x2_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              float64x2_t v31 = __p;
              __p = v24;
              long long v43 = &v24[8 * (v23 >> 2)];
              float64x2_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              char v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              __n128 v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              long long v43 = v22;
              float64x2_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      float64x2_t v36 = *a1;
      float64x2_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      long long v43 = v33;
      float64x2_t v38 = (char *)a1[3];
      long long v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      float64x2_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 128;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        float64x2_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        float64x2_t v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 128;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B74364CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B7438D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7438E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7438F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7438FCC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B74390F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7439170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74391D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t pv_buffer_size_for_string_representation(PVCGPointQuad *a1, int a2)
{
  CGPoint b = a1->b;
  v5.a = a1->a;
  v5.CGPoint b = b;
  CGPoint d = a1->d;
  v5.c = a1->c;
  v5.CGPoint d = d;
  return pv_get_string_representation(&v5, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(PVCGPointQuad *a1, char *a2, uint64_t a3, int a4)
{
  uint64_t v23 = 0;
  unint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v22[3] = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = *(void *)"";
  int64_t v15 = ___Z28pv_get_string_representation13PVCGPointQuadPcmj_block_invoke;
  uint64_t v16 = &unk_1E6169178;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  BOOL v17 = v22;
  uint64_t v18 = &v23;
  int v21 = a4;
  CGPoint b = a1->b;
  CGPoint a = a1->a;
  CGPoint d = a1->d;
  CGPoint c = a1->c;
  unint64_t v4 = v14;
  uint64_t v5 = 0;
  __n128 v13 = *(__n128 *)MEMORY[0x1E4F1DAD8];
  do
  {
    __n128 v6 = v13;
    switch((int)v5)
    {
      case 0:
        __n128 v6 = (__n128)a;
        break;
      case 1:
        __n128 v6 = (__n128)b;
        break;
      case 2:
        __n128 v6 = (__n128)c;
        break;
      case 3:
        __n128 v6 = (__n128)d;
        break;
      default:
        break;
    }
    ((void (*)(void *, uint64_t, __n128, double))v15)(v4, v5, v6, v6.n128_f64[1]);
    uint64_t v5 = (v5 + 1);
  }
  while (v5 != 4);

  uint64_t v7 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(&v23, 8);
  return v7;
}

void sub_1B7439464(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z28pv_get_string_representation13PVCGPointQuadPcmj_block_invoke(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v8 = (char *)(v6 + v7);
    size_t v9 = *(void *)(a1 + 56) - v7;
  }
  else
  {
    size_t v9 = 0;
    uint64_t v8 = 0;
  }
  int v10 = snprintf(v8, v9, "%s: (", pv_get_string_representation[a2]);
  uint64_t v11 = *(void *)(a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v10;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v10;
  v12.n128_f64[0] = a3;
  v12.n128_f64[1] = a4;
  if (v11)
  {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v14 = (char *)(v11 + v13);
    size_t v15 = *(void *)(a1 + 56) - v13;
  }
  else
  {
    uint64_t v14 = 0;
    size_t v15 = 0;
  }
  int string_representation = pv_get_string_representation(v14, v15, *(unsigned int *)(a1 + 64), v12);
  uint64_t v17 = *(void *)(a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += string_representation;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += string_representation;
  if (v17)
  {
    uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v19 = (char *)(v17 + v18);
    size_t v20 = *(void *)(a1 + 56) - v18;
  }
  else
  {
    size_t v20 = 0;
    uint64_t v19 = 0;
  }
  uint64_t result = snprintf(v19, v20, ")");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += result;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += (int)result;
  if (a2 <= 2)
  {
    uint64_t v22 = *(void *)(a1 + 48);
    if (v22)
    {
      uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      unint64_t v24 = (char *)(v22 + v23);
      size_t v25 = *(void *)(a1 + 56) - v23;
    }
    else
    {
      size_t v25 = 0;
      unint64_t v24 = 0;
    }
    uint64_t result = snprintf(v24, v25, "\n");
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += result;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += (int)result;
  }
  return result;
}

CGFloat PVCGPointQuad_get_point_at_index(PVCGPointQuad *a1, int a2)
{
  switch(a2)
  {
    case 0:
      return a1->a.x;
    case 1:
      a1 = (PVCGPointQuad *)((char *)a1 + 16);
      break;
    case 2:
      a1 = (PVCGPointQuad *)((char *)a1 + 32);
      break;
    case 3:
      a1 = (PVCGPointQuad *)((char *)a1 + 48);
      break;
    default:
      a1 = (PVCGPointQuad *)MEMORY[0x1E4F1DAD8];
      break;
  }
  return a1->a.x;
}

CGFloat *PVCGPointQuad_set_point_at_index(CGFloat *result, CGPoint a2, int a3)
{
  switch(a3)
  {
    case 0:
      *result++ = a2.x;
      goto LABEL_6;
    case 1:
      result[2] = a2.x;
      result += 3;
      goto LABEL_6;
    case 2:
      result[4] = a2.x;
      result += 5;
      goto LABEL_6;
    case 3:
      result[6] = a2.x;
      result += 7;
LABEL_6:
      *uint64_t result = a2.y;
      break;
    default:
      return result;
  }
  return result;
}

BOOL pv_almost_equal(PVCGPointQuad *a1, PVCGPointQuad *a2, double a3)
{
  char v3 = 0;
  CGPoint a = a1->a;
  CGPoint v5 = a2->a;
  char v6 = 1;
  while (1)
  {
    char v7 = v6;
    CGPoint v34 = a;
    double v8 = *(double *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF7 | (8 * (v3 & 1)));
    CGPoint v33 = v5;
    if (vabdd_f64(v8, *(double *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF7 | (8 * (v3 & 1)))) >= a3) {
      break;
    }
    char v6 = 0;
    char v3 = 1;
    if ((v7 & 1) == 0)
    {
      char v9 = 0;
      CGPoint b = a1->b;
      CGPoint v11 = a2->b;
      char v12 = 1;
      while (1)
      {
        char v13 = v12;
        CGPoint v32 = b;
        double v14 = *(double *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF7 | (8 * (v9 & 1)));
        CGPoint v31 = v11;
        if (vabdd_f64(v14, *(double *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF7 | (8 * (v9 & 1)))) >= a3) {
          break;
        }
        char v12 = 0;
        char v9 = 1;
        if ((v13 & 1) == 0)
        {
          char v15 = 0;
          CGPoint c = a1->c;
          CGPoint v17 = a2->c;
          char v18 = 1;
          while (1)
          {
            char v19 = v18;
            CGPoint v30 = c;
            double v20 = *(double *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)));
            CGPoint v29 = v17;
            if (vabdd_f64(v20, *(double *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)))) >= a3) {
              break;
            }
            char v18 = 0;
            char v15 = 1;
            if ((v19 & 1) == 0)
            {
              char v21 = 0;
              CGPoint d = a1->d;
              CGPoint v23 = a2->d;
              do
              {
                CGPoint v28 = d;
                double v24 = *(double *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF7 | (8 * (v21 & 1)));
                CGPoint v27 = v23;
                double v25 = vabdd_f64(v24, *(double *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF7 | (8 * (v21 & 1))));
                BOOL result = v25 < a3;
                if (v21) {
                  break;
                }
                char v21 = 1;
              }
              while (v25 < a3);
              return result;
            }
          }
          return 0;
        }
      }
      return 0;
    }
  }
  return 0;
}

id PVCGPointQuad_to_NSArray(PVCGPointQuad *a1)
{
  uint64_t v1 = 0;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = *(void *)"";
  CGPoint v11 = ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke;
  char v12 = &__block_descriptor_40_e22_v28__0_CGPoint_dd_8I24l;
  char v13 = v14;
  CGPoint b = a1->b;
  CGPoint a = a1->a;
  CGPoint d = a1->d;
  CGPoint c = a1->c;
  __n128 v9 = *(__n128 *)MEMORY[0x1E4F1DAD8];
  do
  {
    __n128 v2 = v9;
    switch((int)v1)
    {
      case 0:
        __n128 v2 = (__n128)a;
        break;
      case 1:
        __n128 v2 = (__n128)b;
        break;
      case 2:
        __n128 v2 = (__n128)c;
        break;
      case 3:
        __n128 v2 = (__n128)d;
        break;
      default:
        break;
    }
    ((void (*)(void *, uint64_t, __n128, double))v11)(v10, v1, v2, v2.n128_f64[1]);
    uint64_t v1 = (v1 + 1);
  }
  while (v1 != 4);
  char v3 = pv_CGPoint_array_to_NSArray((uint64_t)v14, 4u);

  return v3;
}

BOOL pv_is_finite(PVCGPointQuad *a1)
{
  if (!pv_is_finite((__n128)a1->a) || !pv_is_finite((__n128)a1->b) || !pv_is_finite((__n128)a1->c)) {
    return 0;
  }
  CGPoint d = a1->d;

  return pv_is_finite((__n128)d);
}

uint64_t PVCGPointQuad_from_CGRect@<X0>(CGRect a1@<0:D0, 8:D1, 16:D2, 24:D3>, _OWORD *a2@<X8>)
{
  uint64_t v2 = 0;
  v9[7] = *MEMORY[0x1E4F143B8];
  char v3 = v9;
  CGFloat x = a1.origin.x;
  v9[0] = *(void *)&a1.origin.y;
  *(double *)&v9[1] = a1.origin.x + a1.size.width;
  int8x16_t v9[2] = *(void *)&a1.origin.y;
  *(double *)&v9[3] = a1.origin.x + a1.size.width;
  *(double *)&v9[4] = a1.origin.y + a1.size.height;
  v9[5] = *(void *)&a1.origin.x;
  *(double *)&v9[6] = a1.origin.y + a1.size.height;
  a2[3] = 0u;
  *a2 = 0u;
  a2[2] = 0u;
  a2[1] = 0u;
  uint64_t result = (uint64_t)a2 + 24;
  do
  {
    CGPoint v5 = a2;
    char v6 = (void *)a2 + 1;
    switch((int)v2)
    {
      case 0:
        goto LABEL_6;
      case 1:
        CGPoint v5 = a2 + 1;
        char v6 = (void *)a2 + 3;
        goto LABEL_6;
      case 2:
        CGPoint v5 = a2 + 2;
        char v6 = (void *)a2 + 5;
        goto LABEL_6;
      case 3:
        CGPoint v5 = a2 + 3;
        char v6 = (void *)a2 + 7;
LABEL_6:
        uint64_t v7 = *v3;
        *CGPoint v5 = *(v3 - 1);
        *char v6 = v7;
        break;
      default:
        break;
    }
    ++v2;
    v3 += 2;
  }
  while (v2 != 4);
  return result;
}

uint64_t pv_is_CGPoint_in_quad(CGPoint a1, PVCGPointQuad *a2)
{
  double y = a1.y;
  double x = a1.x;
  uint64_t v4 = 0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = *(void *)"";
  uint64_t v22 = ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke;
  CGPoint v23 = &__block_descriptor_40_e22_v28__0_CGPoint_dd_8I24l;
  double v24 = v25;
  CGPoint b = a2->b;
  CGPoint a = a2->a;
  CGPoint d = a2->d;
  CGPoint c = a2->c;
  __n128 v20 = *(__n128 *)MEMORY[0x1E4F1DAD8];
  do
  {
    __n128 v5 = v20;
    switch((int)v4)
    {
      case 0:
        __n128 v5 = (__n128)a;
        break;
      case 1:
        __n128 v5 = (__n128)b;
        break;
      case 2:
        __n128 v5 = (__n128)c;
        break;
      case 3:
        __n128 v5 = (__n128)d;
        break;
      default:
        break;
    }
    ((void (*)(void *, uint64_t, __n128, double))v22)(v21, v4, v5, v5.n128_f64[1]);
    uint64_t v4 = (v4 + 1);
  }
  while (v4 != 4);
  uint64_t v6 = 0;
  char v7 = 0;
  double v8 = (double *)v26;
  LODWORD(v9) = 3;
  do
  {
    int v10 = v9;
    uint64_t v9 = v6;
    double v11 = *v8;
    double v12 = *(double *)&v26[v10];
    BOOL v13 = *v8 <= y && y < v12;
    if (v13 || (y < v11 ? (BOOL v14 = v12 > y) : (BOOL v14 = 1), !v14))
    {
      if (x < *(v8 - 1) + (y - v11) * (*(double *)&v25[16 * v10] - *(v8 - 1)) / (v12 - v11)) {
        v7 ^= 1u;
      }
    }
    ++v6;
    v8 += 2;
  }
  while (v9 != 3);
  return v7 & 1;
}

uint64_t pv_bounding_CGRect(PVCGPointQuad *a1)
{
  uint64_t v1 = 0;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = *(void *)"";
  CGPoint v17 = ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke;
  char v18 = &__block_descriptor_40_e22_v28__0_CGPoint_dd_8I24l;
  char v19 = v20;
  CGPoint b = a1->b;
  CGPoint a = a1->a;
  CGPoint d = a1->d;
  CGPoint c = a1->c;
  __n128 v15 = *(__n128 *)MEMORY[0x1E4F1DAD8];
  do
  {
    __n128 v2 = v15;
    switch((int)v1)
    {
      case 0:
        __n128 v2 = (__n128)a;
        break;
      case 1:
        __n128 v2 = (__n128)b;
        break;
      case 2:
        __n128 v2 = (__n128)c;
        break;
      case 3:
        __n128 v2 = (__n128)d;
        break;
      default:
        break;
    }
    uint64_t result = ((uint64_t (*)(void *, uint64_t, __n128, double))v17)(v16, v1, v2, v2.n128_f64[1]);
    uint64_t v1 = (v1 + 1);
  }
  while (v1 != 4);
  uint64_t v4 = 0;
  double v5 = -1.79769313e308;
  double v6 = 1.79769313e308;
  double v7 = -1.79769313e308;
  double v8 = 1.79769313e308;
  do
  {
    double v9 = *(double *)&v20[v4];
    double v10 = *(double *)&v20[v4 + 8];
    if (v9 < v8) {
      double v8 = *(double *)&v20[v4];
    }
    if (v9 > v7) {
      double v7 = *(double *)&v20[v4];
    }
    if (v10 > v5) {
      double v5 = *(double *)&v20[v4 + 8];
    }
    if (v10 < v6) {
      double v6 = *(double *)&v20[v4 + 8];
    }
    v4 += 16;
  }
  while (v4 != 64);
  return result;
}

double pv_CGPoint_get_quad_center(PVCGPointQuad *a1)
{
  CGPoint a = a1->a;
  CGPoint b = a1->b;
  CGPoint c = a1->c;
  CGPoint d = a1->d;
  float64x2_t v8 = 0uLL;
  float64x2_t v6 = (float64x2_t)c;
  float64x2_t v7 = (float64x2_t)a;
  if (pv_simd_line_intersection(&v8, (float64x2_t)a, (float64x2_t)c, (float64x2_t)b, (float64x2_t)d)) {
    return v8.f64[0];
  }
  else {
    return pv_simd_lerp(v7, v6, 0.5);
  }
}

void pv_transform_PVCGPointQuad_between_coordinate_systems(__n128 *a1@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v36 = 0;
  float64x2_t v37 = &v36;
  uint64_t v38 = 0x6010000000;
  long long v39 = &unk_1B876C866;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = *(void *)"";
  __n128 v26 = *a1;
  __n128 v9 = *a1;
  __n128 v27 = a1[1];
  __n128 v19 = a1[1];
  __n128 v20 = v9;
  __n128 v28 = a1[2];
  __n128 v10 = a1[2];
  __n128 v29 = a1[3];
  double v30 = a5;
  double v31 = a6;
  CGPoint v23 = ___Z53pv_transform_PVCGPointQuad_between_coordinate_systems13PVCGPointQuad6CGSize25_PVCoordinateSystemOriginS0_S1__block_invoke;
  double v24 = &unk_1E61691A0;
  double v32 = a7;
  double v33 = a8;
  int v34 = a2;
  int v35 = a3;
  double v25 = &v36;
  __n128 v17 = a1[3];
  __n128 v18 = v10;
  double v11 = v22;
  uint64_t v12 = 0;
  __n128 v21 = *(__n128 *)MEMORY[0x1E4F1DAD8];
  do
  {
    __n128 v13 = v21;
    switch((int)v12)
    {
      case 0:
        __n128 v13 = v20;
        break;
      case 1:
        __n128 v13 = v19;
        break;
      case 2:
        __n128 v13 = v18;
        break;
      case 3:
        __n128 v13 = v17;
        break;
      default:
        break;
    }
    ((void (*)(void *, uint64_t, __n128, double))v23)(v11, v12, v13, v13.n128_f64[1]);
    uint64_t v12 = (v12 + 1);
  }
  while (v12 != 4);

  BOOL v14 = v37;
  long long v15 = *((_OWORD *)v37 + 3);
  *a4 = *((_OWORD *)v37 + 2);
  a4[1] = v15;
  long long v16 = *((_OWORD *)v14 + 5);
  a4[2] = *((_OWORD *)v14 + 4);
  a4[3] = v16;
  _Block_object_dispose(&v36, 8);
}

void sub_1B743A0C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

CGAffineTransform *___Z53pv_transform_PVCGPointQuad_between_coordinate_systems13PVCGPointQuad6CGSize25_PVCoordinateSystemOriginS0_S1__block_invoke(uint64_t a1, int a2)
{
  double v4 = *MEMORY[0x1E4F1DAD8];
  double v5 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  double v6 = *MEMORY[0x1E4F1DAD8];
  double v7 = v5;
  switch(a2)
  {
    case 0:
      float64x2_t v8 = (double *)(a1 + 40);
      __n128 v9 = (double *)(a1 + 48);
      goto LABEL_6;
    case 1:
      __n128 v9 = (double *)(a1 + 64);
      float64x2_t v8 = (double *)(a1 + 56);
      goto LABEL_6;
    case 2:
      __n128 v9 = (double *)(a1 + 80);
      float64x2_t v8 = (double *)(a1 + 72);
      goto LABEL_6;
    case 3:
      __n128 v9 = (double *)(a1 + 96);
      float64x2_t v8 = (double *)(a1 + 88);
LABEL_6:
      double v7 = *v9;
      double v6 = *v8;
      break;
    default:
      break;
  }
  int v11 = *(_DWORD *)(a1 + 136);
  int v10 = *(_DWORD *)(a1 + 140);
  double v13 = *(double *)(a1 + 104);
  double v12 = *(double *)(a1 + 112);
  double v15 = *(double *)(a1 + 120);
  double v14 = *(double *)(a1 + 128);
  if (v11 == 2)
  {
    if (!v10)
    {
      double v5 = v12 * 0.5;
      double v4 = v13 * 0.5;
    }
    BOOL v25 = v10 == 1;
    if (v10 == 1) {
      double v26 = v12 * 0.5;
    }
    else {
      double v26 = v5;
    }
    if (v10 == 1) {
      double v27 = v13 * 0.5;
    }
    else {
      double v27 = v4;
    }
  }
  else
  {
    double v16 = v13 * -0.5;
    double v17 = v12 * 0.5;
    if (v10) {
      double v18 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    }
    else {
      double v18 = *(double *)(a1 + 112);
    }
    BOOL v19 = v10 == 2 || v10 == 0;
    if (v10 == 2)
    {
      double v20 = v13 * -0.5;
    }
    else
    {
      double v17 = v18;
      double v20 = *MEMORY[0x1E4F1DAD8];
    }
    double v21 = v12 * -0.5;
    if (v10 == 1) {
      double v22 = *(double *)(a1 + 112);
    }
    else {
      double v22 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    }
    BOOL v23 = v10 == 2;
    BOOL v24 = v10 != 2 && v10 == 1;
    if (!v23)
    {
      double v21 = v22;
      double v16 = *MEMORY[0x1E4F1DAD8];
    }
    if (v11) {
      BOOL v24 = 0;
    }
    else {
      double v5 = v21;
    }
    if (!v11) {
      double v4 = v16;
    }
    if (v11 == 1) {
      BOOL v25 = v19;
    }
    else {
      BOOL v25 = v24;
    }
    if (v11 == 1) {
      double v26 = v17;
    }
    else {
      double v26 = v5;
    }
    if (v11 == 1) {
      double v27 = v20;
    }
    else {
      double v27 = v4;
    }
  }
  memset(&v33, 0, sizeof(v33));
  CGAffineTransformMakeScale(&v33, v15 / v13, v14 / v12);
  CGAffineTransform v34 = v33;
  uint64_t result = CGAffineTransformTranslate(&v35, &v34, v27, v26);
  CGAffineTransform v33 = v35;
  if (v25)
  {
    CGAffineTransform v34 = v33;
    uint64_t result = CGAffineTransformScale(&v35, &v34, 1.0, -1.0);
    CGAffineTransform v33 = v35;
  }
  double v29 = v33.tx + v6 * v33.a + v7 * v33.c;
  double v30 = v33.ty + v6 * v33.b + v7 * v33.d;
  double v31 = *(double **)(*(void *)(a1 + 32) + 8);
  switch(a2)
  {
    case 0:
      v31[4] = v29;
      double v32 = v31 + 5;
      goto LABEL_54;
    case 1:
      v31[6] = v29;
      double v32 = v31 + 7;
      goto LABEL_54;
    case 2:
      v31[8] = v29;
      double v32 = v31 + 9;
      goto LABEL_54;
    case 3:
      v31[10] = v29;
      double v32 = v31 + 11;
LABEL_54:
      double *v32 = v30;
      break;
    default:
      return result;
  }
  return result;
}

void PVCGPointQuad_scale(PVCGPointQuad *a1@<X0>, CGPoint a2@<0:D0, 8:D1>, _OWORD *a3@<X8>)
{
  CGFloat y = a2.y;
  CGFloat x = a2.x;
  uint64_t v35 = 0x6010000000;
  CGPoint b = a1->b;
  CGPoint a = a1->a;
  CGPoint v38 = b;
  CGPoint d = a1->d;
  CGPoint v10 = a1->a;
  CGPoint v9 = a1->b;
  CGPoint c = a1->c;
  CGPoint v40 = d;
  uint64_t v33 = 0;
  CGAffineTransform v34 = &v33;
  uint64_t v36 = &unk_1B876C866;
  v32.CGPoint a = v10;
  v32.CGPoint b = v9;
  CGPoint v11 = a1->d;
  v32.CGPoint c = a1->c;
  v32.CGPoint d = v11;
  *(double *)&long long v12 = pv_CGPoint_get_quad_center(&v32);
  *((void *)&v12 + 1) = v13;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = *(void *)"";
  double v26 = ___Z19PVCGPointQuad_scale13PVCGPointQuad7CGPoint_block_invoke;
  double v27 = &unk_1E61691C8;
  long long v28 = v12;
  CGFloat v30 = x;
  CGFloat v31 = y;
  double v29 = &v33;
  CGPoint v22 = a1->b;
  CGPoint v23 = a1->a;
  CGPoint v20 = a1->d;
  CGPoint v21 = a1->c;
  double v14 = v25;
  uint64_t v15 = 0;
  __n128 v24 = *(__n128 *)MEMORY[0x1E4F1DAD8];
  do
  {
    __n128 v16 = v24;
    switch((int)v15)
    {
      case 0:
        __n128 v16 = (__n128)v23;
        break;
      case 1:
        __n128 v16 = (__n128)v22;
        break;
      case 2:
        __n128 v16 = (__n128)v21;
        break;
      case 3:
        __n128 v16 = (__n128)v20;
        break;
      default:
        break;
    }
    v26((uint64_t)v14, v15, (float64x2_t)v16, v16.n128_f64[1]);
    uint64_t v15 = (v15 + 1);
  }
  while (v15 != 4);

  double v17 = v34;
  long long v18 = *((_OWORD *)v34 + 3);
  *a3 = *((_OWORD *)v34 + 2);
  a3[1] = v18;
  long long v19 = *((_OWORD *)v17 + 5);
  a3[2] = *((_OWORD *)v17 + 4);
  a3[3] = v19;
  _Block_object_dispose(&v33, 8);
}

void sub_1B743A54C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z19PVCGPointQuad_scale13PVCGPointQuad7CGPoint_block_invoke(uint64_t result, int a2, float64x2_t a3, float64_t a4)
{
  a3.f64[1] = a4;
  float64x2_t v4 = vaddq_f64(*(float64x2_t *)(result + 32), vmulq_f64(vsubq_f64(a3, *(float64x2_t *)(result + 32)), *(float64x2_t *)(result + 56)));
  double v5 = *(void **)(*(void *)(result + 48) + 8);
  switch(a2)
  {
    case 0:
      v5[4] = *(void *)&v4.f64[0];
      double v6 = v5 + 5;
      goto LABEL_6;
    case 1:
      v5[6] = *(void *)&v4.f64[0];
      double v6 = v5 + 7;
      goto LABEL_6;
    case 2:
      v5[8] = *(void *)&v4.f64[0];
      double v6 = v5 + 9;
      goto LABEL_6;
    case 3:
      v5[10] = *(void *)&v4.f64[0];
      double v6 = v5 + 11;
LABEL_6:
      *double v6 = *(void *)&v4.f64[1];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke(uint64_t result, unsigned int a2, double a3, double a4)
{
  float64x2_t v4 = (double *)(*(void *)(result + 32) + 16 * a2);
  *float64x2_t v4 = a3;
  v4[1] = a4;
  return result;
}

void sub_1B743A6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743A738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743A7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743A858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743A8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743A9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B743ABE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B743AD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743ADE0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x1BA9BFBA0](v4, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B743AE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743B040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743B27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743B428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B743B498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B743B4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B743B560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B743B5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B743B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B743B78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);

  _Unwind_Resume(a1);
}

void sub_1B743B898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B743B918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B743B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B743BBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743BD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PVLivePlayerAVAssetSource;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B743BF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B743C0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743C210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743C3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743C47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B743C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Block_object_dispose((const void *)(v43 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_1B743CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B743CA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B743CB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B743CBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B743CCE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743CDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743CF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *PVDocumentAccessController::INSTANCE(PVDocumentAccessController *this)
{
  {
    PVDocumentAccessController::PVDocumentAccessController((PVDocumentAccessController *)&PVDocumentAccessController::INSTANCE(void)::s_docAccessCtl);
    __cxa_atexit((void (*)(void *))PVDocumentAccessController::~PVDocumentAccessController, &PVDocumentAccessController::INSTANCE(void)::s_docAccessCtl, &dword_1B73F3000);
  }
  return &PVDocumentAccessController::INSTANCE(void)::s_docAccessCtl;
}

void sub_1B743D0B4(_Unwind_Exception *a1)
{
}

void PVDocumentAccessController::PVDocumentAccessController(PVDocumentAccessController *this)
{
  *(void *)this = 0;
  __n128 v2 = (HGRenderQueue *)HGObject::operator new(0x2F0uLL);
  HGRenderQueue::HGRenderQueue(v2);
  uint64_t v3 = *(void *)this;
  if (*(HGRenderQueue **)this == v2)
  {
    if (v2)
    {
      (*(void (**)(HGRenderQueue *))(*(void *)v2 + 24))(v2);
      __n128 v2 = *(HGRenderQueue **)this;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    *(void *)this = v2;
  }
  HGRenderQueue::SetRunMode((uint64_t)v2, 0);
  HGRenderQueue::SetSerializeRendersFlag(*(HGRenderQueue **)this, 1);
  HGRenderQueue::SetNumGPUReadbackExecUnitsPerGPURenderer(*(HGRenderQueue **)this, 0);
  HGRenderQueue::SetNumPBOsPerGPUReadbackExecUnit(*(HGRenderQueue **)this, 0);
  HGRenderQueue::SetGPUReadbackQueueThrottleSize(*(HGRenderQueue **)this, 0);
  HGRenderQueue::SetSerializeGPUReadbacksFlag(*(HGRenderQueue **)this, 1);
  HGRenderQueue::SetPreferredResource(*(void *)this, 0);
  HGRenderQueue::SetDebugQueueVerboseMask(*(HGRenderQueue **)this, 0);
  uint64_t v4 = (HGCPURenderContext *)HGObject::operator new(0xB0uLL);
  HGCPURenderContext::HGCPURenderContext(v4);
  HGRenderQueue::AddRenderContext(*(HGRenderQueue **)this, v4);
  if (v4) {
    (*(void (**)(HGCPURenderContext *))(*(void *)v4 + 24))(v4);
  }
  HGRenderQueue::Start(*(HGRenderQueue **)this);
}

void sub_1B743D228(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(exception_object);
}

void PVDocumentAccessController::~PVDocumentAccessController(HGRenderQueue **this)
{
  if (*this) {
    (*(void (**)(HGRenderQueue *))(*(void *)*this + 24))(*this);
  }
}

void DocumentAccessJob::Wait(DocumentAccessJob *this)
{
  uint64_t v2 = (HGSynchronizable *)*((void *)this + 37);
  uint64_t v3 = v2;
  char v4 = 0;
  HGSynchronizable::Lock(v2);
  if (!*((unsigned char *)this + 352)) {
    HGSynchronizable::Wait(v2);
  }
  HGSynchronizer::~HGSynchronizer(&v3);
}

void sub_1B743D3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void PVDocumentAccessController::InitializeMotion(PVDocumentAccessController *this)
{
  uint64_t v1 = (DocumentAccessJob *)HGObject::operator new(0x168uLL);
  DocumentAccessJob::DocumentAccessJob(v1);
}

void sub_1B743D49C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void PVDocumentAccessController::LoadEffectDocument(PVDocumentAccessController *this, PVMotionEffect *a2)
{
  uint64_t v3 = a2;
  uint64_t v2 = (LoadEffectJob *)HGObject::operator new(0x168uLL);
  LoadEffectJob::LoadEffectJob(v2, v3);
}

void sub_1B743D61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);

  _Unwind_Resume(a1);
}

void PVDocumentAccessController::ReleaseOZXDocument(PVDocumentAccessController *this, void *a2)
{
  uint64_t v3 = (ReleaseDocumentJob *)HGObject::operator new(0x168uLL);
  ReleaseDocumentJob::ReleaseDocumentJob(v3, a2);
}

void sub_1B743D728(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void DocumentAccessJob::DocumentAccessJob(DocumentAccessJob *this)
{
}

void sub_1B743D824(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x10A1C40BBCAB520);
  HGRenderJob::~HGRenderJob(v1);
  _Unwind_Resume(a1);
}

void PVDocumentAccessControllerNotificationFunc(HGRenderJob *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1BA9C0A20]();
  if (HGRenderJob::GetState(a1) == 4)
  {
    (*(void (**)(HGRenderJob *))(*(void *)a1 + 40))(a1);
    DocumentAccessJob::SignalComplete((DocumentAccessJob *)a1);
  }
}

void DocumentAccessJob::~DocumentAccessJob(HGRenderJob *this)
{
  *(void *)this = &unk_1F1088F88;
  uint64_t v2 = *((void *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 37) = 0;
  }

  HGRenderJob::~HGRenderJob(this);
}

void DocumentAccessJob::SignalComplete(DocumentAccessJob *this)
{
  uint64_t v2 = (HGSynchronizable *)*((void *)this + 37);
  uint64_t v3 = v2;
  char v4 = 0;
  HGSynchronizable::Lock(v2);
  *((unsigned char *)this + 352) = 1;
  HGSynchronizable::Notify(v2);
  HGSynchronizer::~HGSynchronizer(&v3);
}

void sub_1B743D9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

uint64_t InitializeMotionJob::RunJob(InitializeMotionJob *this)
{
  return +[PVMotionEffect initializeMotionInternal];
}

void LoadEffectJob::LoadEffectJob(LoadEffectJob *this, PVMotionEffect *a2)
{
  uint64_t v3 = a2;
  DocumentAccessJob::DocumentAccessJob(this);
}

void sub_1B743DA3C(_Unwind_Exception *a1)
{
  DocumentAccessJob::~DocumentAccessJob(v2);

  _Unwind_Resume(a1);
}

void LoadEffectJob::RunJob(HGRenderJob *this)
{
  HGRenderJob::GetUserData(this);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "loadEffectInternal_NoLock");
}

void sub_1B743DAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ReleaseDocumentJob::ReleaseDocumentJob(ReleaseDocumentJob *this, void *a2)
{
}

void sub_1B743DB08(_Unwind_Exception *a1)
{
  DocumentAccessJob::~DocumentAccessJob(v1);
  _Unwind_Resume(a1);
}

void ReleaseDocumentJob::RunJob(HGRenderJob *this)
{
  uint64_t UserData = (void *)HGRenderJob::GetUserData(this);

  OZXFreeDocument(UserData, 1);
}

void InitializeMotionJob::~InitializeMotionJob(HGRenderJob *this)
{
  DocumentAccessJob::~DocumentAccessJob(this);

  HGObject::operator delete(v1);
}

void LoadEffectJob::~LoadEffectJob(HGRenderJob *this)
{
  DocumentAccessJob::~DocumentAccessJob(this);

  HGObject::operator delete(v1);
}

void ReleaseDocumentJob::~ReleaseDocumentJob(HGRenderJob *this)
{
  DocumentAccessJob::~DocumentAccessJob(this);

  HGObject::operator delete(v1);
}

void sub_1B743DC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743DC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743DD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743DD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCGImageBufferImpl;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B743E1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 24))(a19);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B743E4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B743E71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B743F344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  HGObject::operator delete(v30);
  (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  HGTransform::~HGTransform((HGTransform *)&a9);
  HGTransform::~HGTransform((HGTransform *)&a27);
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
  uint64_t v33 = *(void *)(v31 - 112);
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
  }
  uint64_t v34 = *(void *)(v31 - 104);
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  }
  _Unwind_Resume(a1);
}

void sub_1B743FC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74401F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 pv_simd_double4x4_from_PCMatrix44d@<Q0>(unint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  v36.n128_u64[0] = *a1;
  v36.n128_u64[1] = v4;
  unint64_t v6 = a1[9];
  unint64_t v7 = a1[12];
  unint64_t v8 = a1[13];
  unint64_t v37 = a1[8];
  unint64_t v38 = v7;
  v33.n128_u64[0] = v3;
  v33.n128_u64[1] = v5;
  unint64_t v34 = v6;
  unint64_t v35 = v8;
  unint64_t v9 = a1[3];
  unint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  v30.n128_u64[0] = a1[2];
  v30.n128_u64[1] = v10;
  unint64_t v12 = a1[11];
  unint64_t v13 = a1[14];
  unint64_t v14 = a1[15];
  unint64_t v31 = a1[10];
  unint64_t v32 = v13;
  v27.n128_u64[0] = v9;
  v27.n128_u64[1] = v11;
  unint64_t v28 = v12;
  unint64_t v29 = v14;
  pv_simd_double4_from_PCVector4d(&v36, v26);
  __n128 v21 = v26[1];
  __n128 v22 = v26[0];
  pv_simd_double4_from_PCVector4d(&v33, v25);
  __n128 v19 = v25[1];
  __n128 v20 = v25[0];
  pv_simd_double4_from_PCVector4d(&v30, v24);
  __n128 v17 = v24[1];
  __n128 v18 = v24[0];
  pv_simd_double4_from_PCVector4d(&v27, v23);
  __n128 result = v23[0];
  __n128 v16 = v23[1];
  *a2 = v22;
  a2[1] = v21;
  a2[2] = v20;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  a2[6] = result;
  a2[7] = v16;
  return result;
}

double pv_PCMatrix44d_from_simd_double4x4(long long *a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v40 = 0x3FF0000000000000;
  uint64_t v37 = 0x3FF0000000000000;
  uint64_t v34 = 0x3FF0000000000000;
  *(void *)__n128 v33 = 0x3FF0000000000000;
  memset(&v33[8], 0, 32);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  do
  {
    unint64_t v4 = (_OWORD *)(a2 + v3);
    long long v5 = *(_OWORD *)&v33[v3 + 16];
    *unint64_t v4 = *(_OWORD *)&v33[v3];
    v4[1] = v5;
    v3 += 32;
  }
  while (v3 != 128);
  long long v6 = *a1;
  long long v7 = a1[1];
  long long v17 = a1[3];
  long long v18 = a1[2];
  long long v19 = a1[5];
  long long v20 = a1[4];
  long long v21 = a1[7];
  long long v22 = a1[6];
  memset(v33, 0, 32);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  v26[0] = v6;
  v26[1] = v7;
  pv_PCVector4d_from_simd_double4((uint64_t)v26, (uint64_t)v33);
  v25[0] = v18;
  v25[1] = v17;
  pv_PCVector4d_from_simd_double4((uint64_t)v25, (uint64_t)&v31);
  v24[0] = v20;
  v24[1] = v19;
  pv_PCVector4d_from_simd_double4((uint64_t)v24, (uint64_t)&v29);
  v23[0] = v22;
  v23[1] = v21;
  pv_PCVector4d_from_simd_double4((uint64_t)v23, (uint64_t)&v27);
  uint64_t v8 = *(void *)&v33[8];
  long long v9 = v31;
  *(void *)a2 = *(void *)v33;
  *(void *)(a2 + 8) = v9;
  long long v10 = *(_OWORD *)&v33[16];
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = *((void *)&v9 + 1);
  long long v11 = v32;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v11;
  *(void *)(a2 + 96) = *((void *)&v10 + 1);
  *(void *)(a2 + 104) = *((void *)&v11 + 1);
  uint64_t v12 = *((void *)&v29 + 1);
  long long v13 = v27;
  *(void *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v13;
  uint64_t v15 = *((void *)&v30 + 1);
  double result = *(double *)&v30;
  *(void *)(a2 + 48) = v12;
  *(void *)(a2 + 56) = *((void *)&v13 + 1);
  long long v16 = v28;
  *(double *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = result;
  *(void *)(a2 + 88) = v16;
  *(void *)(a2 + 112) = v15;
  *(void *)(a2 + 12pthread_cond_init((pthread_cond_t *)this, 0) = *((void *)&v16 + 1);
  return result;
}

uint64_t pv_simd_quaternion_get_euler_angles(int a1, uint64_t a2, float32x4_t a3)
{
  float v3 = vmulq_f32(a3, a3).f32[0];
  float v4 = vmuls_lane_f32(a3.f32[1], *(float32x2_t *)a3.f32, 1);
  float v5 = vmuls_lane_f32(a3.f32[2], a3, 2);
  float v6 = vmuls_lane_f32(a3.f32[3], a3, 3);
  float v7 = vmuls_lane_f32(a3.f32[0], *(float32x2_t *)a3.f32, 1);
  float v8 = vmuls_lane_f32(a3.f32[2], a3, 3);
  float v9 = vmuls_lane_f32(a3.f32[0], a3, 2);
  float v10 = vmuls_lane_f32(a3.f32[1], a3, 3);
  v11.i32[3] = 0;
  v11.f32[0] = v6 + (float)((float)(v3 - v4) - v5);
  v15.columns[2].i32[3] = 0;
  v11.f32[1] = (float)(v7 + v8) + (float)(v7 + v8);
  v11.f32[2] = (float)(v9 - v10) + (float)(v9 - v10);
  float v12 = vmuls_lane_f32(a3.f32[1], a3, 2);
  float v13 = vmuls_lane_f32(a3.f32[0], a3, 3);
  v15.columns[1].i32[3] = 0;
  v15.columns[1].f32[0] = (float)(v7 - v8) + (float)(v7 - v8);
  v15.columns[1].f32[1] = (float)(v6 + (float)(v4 - v5)) - v3;
  v15.columns[1].f32[2] = (float)(v12 + v13) + (float)(v12 + v13);
  v15.columns[2].f32[0] = (float)(v9 + v10) + (float)(v9 + v10);
  v15.columns[2].f32[1] = (float)(v12 - v13) + (float)(v12 - v13);
  v15.columns[2].f32[2] = (float)((float)(v5 + v6) - v3) - v4;
  v15.columns[0] = v11;
  return pv_simd_matrix_get_euler_angles(a1, a2, v15);
}

uint64_t pv_simd_quaternion_get_euler_angles(float64x2_t *a1, int a2, uint64_t a3)
{
  float64x2_t v4 = *a1;
  float64x2_t v3 = a1[1];
  double v5 = vmuld_n_f64(v4.f64[0], v4.f64[0]);
  double v6 = a1->f64[1];
  double v7 = vmuld_lane_f64(v6, *a1, 1);
  double v8 = vmuld_n_f64(v3.f64[0], v3.f64[0]);
  double v9 = vmuld_lane_f64(a1[1].f64[1], v3, 1);
  v10.f64[0] = v9 + v5 - v7 - v8;
  double v11 = vmuld_lane_f64(v4.f64[0], v4, 1);
  double v12 = vmuld_lane_f64(v3.f64[0], v3, 1);
  double v13 = vmuld_n_f64(a1->f64[0], v3.f64[0]);
  double v14 = vmuld_lane_f64(v6, v3, 1);
  v10.f64[1] = v11 + v12 + v11 + v12;
  v17[0] = v10;
  v17[1] = (float64x2_t)COERCE_UNSIGNED_INT64(v13 - v14 + v13 - v14);
  v10.f64[0] = v11 - v12 + v11 - v12;
  double v15 = vmuld_lane_f64(v3.f64[0], v4, 1);
  v3.f64[0] = vmuld_lane_f64(v4.f64[0], v3, 1);
  v10.f64[1] = v9 + v7 - v8 - v5;
  void v17[2] = v10;
  v17[3] = (float64x2_t)COERCE_UNSIGNED_INT64(v15 + v3.f64[0] + v15 + v3.f64[0]);
  v4.f64[0] = v13 + v14 + v13 + v14;
  v4.f64[1] = v15 - v3.f64[0] + v15 - v3.f64[0];
  v17[4] = v4;
  v17[5] = (float64x2_t)COERCE_UNSIGNED_INT64(v8 + v9 - v5 - v7);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v20 = xmmword_1B7E733E0;
  return pv_simd_matrix_get_euler_angles(v17, a2, a3);
}

BOOL pv_is_finite(simd_quatd a1, long long *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return pv_is_finite(v4);
}

id NSStringFromPVCGPointQuad(CGPoint *a1, int a2)
{
  CGPoint v4 = a1[1];
  v13.CGPoint a = *a1;
  v13.CGPoint b = v4;
  CGPoint v5 = a1[3];
  v13.CGPoint c = a1[2];
  v13.CGPoint d = v5;
  int v6 = pv_buffer_size_for_string_representation(&v13, a2);
  double v7 = (char *)malloc_type_calloc(v6, 1uLL, 0x100004077774924uLL);
  CGPoint v8 = a1[1];
  v13.CGPoint a = *a1;
  v13.CGPoint b = v8;
  CGPoint v9 = a1[3];
  v13.CGPoint c = a1[2];
  v13.CGPoint d = v9;
  unsigned int string_representation = pv_get_string_representation(&v13, v7, v6, a2);
  double v11 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v6
    || (double v11 = (void *)[[NSString alloc] initWithBytesNoCopy:v7 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v7);
  }

  return v11;
}

double pv_simd_normalize(simd_float3x3 a1)
{
  v3[2] = a1.columns[2];
  if (a1.columns[2].f32[2] <= -0.00001 || a1.columns[2].f32[2] >= 0.00001)
  {
    for (uint64_t i = 0; i != 3; ++i)
      v3[i] = vmulq_n_f32((float32x4_t)v3[i], 1.0 / a1.columns[2].f32[2]);
    return *(double *)v3;
  }
  return result;
}

__n128 pv_simd_normalize@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, float64x2_t a3@<Q0>)
{
  double v3 = *(double *)(a1 + 80);
  if (v3 <= -0.0000001 || v3 >= 0.0000001)
  {
    uint64_t v4 = 0;
    a3.f64[0] = 1.0 / v3;
    v5.f64[0] = a3.f64[0];
    v5.f64[1] = a3.f64[0];
    do
    {
      int v6 = (float64x2_t *)(a1 + v4);
      float64x2_t v7 = vmulq_f64(a3, *(float64x2_t *)(a1 + v4 + 16));
      *int v6 = vmulq_f64(v5, *(float64x2_t *)(a1 + v4));
      v6[1] = v7;
      v4 += 32;
    }
    while (v4 != 96);
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v9;
  __n128 result = *(__n128 *)a1;
  long long v11 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v11;
  return result;
}

double pv_simd_normalize(simd_float4x4 a1)
{
  v3[2] = a1.columns[2];
  _OWORD v3[3] = a1.columns[3];
  if (a1.columns[3].f32[3] <= -0.00001 || a1.columns[3].f32[3] >= 0.00001)
  {
    for (uint64_t i = 0; i != 3; ++i)
      v3[i] = vmulq_n_f32((float32x4_t)v3[i], 1.0 / a1.columns[3].f32[3]);
    return *(double *)v3;
  }
  return result;
}

__n128 pv_simd_normalize@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2 = *(double *)(a1 + 120);
  if (v2 <= -0.0000001 || v2 >= 0.0000001)
  {
    uint64_t v3 = 0;
    double v4 = 1.0 / v2;
    do
    {
      float64x2_t v5 = (float64x2_t *)(a1 + v3);
      float64x2_t v6 = vmulq_n_f64(*(float64x2_t *)(a1 + v3 + 16), v4);
      *float64x2_t v5 = vmulq_n_f64(*(float64x2_t *)(a1 + v3), v4);
      v5[1] = v6;
      v3 += 32;
    }
    while (v3 != 96);
  }
  long long v7 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v7;
  long long v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v9;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v11;
  return result;
}

double pv_simd_negate(simd_float3x3 a1)
{
  uint64_t v1 = 0;
  v3[2] = a1.columns[2];
  do
  {
    v3[v1] = vnegq_f32((float32x4_t)v3[v1]);
    ++v1;
  }
  while (v1 != 3);
  return *(double *)v3;
}

__n128 pv_simd_negate@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  for (uint64_t i = 0; i != 96; i += 32)
  {
    uint64_t v3 = (float64x2_t *)(a1 + i);
    float64x2_t v4 = vnegq_f64(*(float64x2_t *)(a1 + i + 16));
    *uint64_t v3 = vnegq_f64(*(float64x2_t *)(a1 + i));
    v3[1] = v4;
  }
  long long v5 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v8;
  return result;
}

double pv_simd_negate(simd_float4x4 a1)
{
  uint64_t v1 = 0;
  v3[2] = a1.columns[2];
  _OWORD v3[3] = a1.columns[3];
  do
  {
    v3[v1] = vnegq_f32((float32x4_t)v3[v1]);
    ++v1;
  }
  while (v1 != 4);
  return *(double *)v3;
}

__n128 pv_simd_negate@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 128; i += 32)
  {
    uint64_t v3 = (float64x2_t *)(a1 + i);
    float64x2_t v4 = vnegq_f64(*(float64x2_t *)(a1 + i + 16));
    *uint64_t v3 = vnegq_f64(*(float64x2_t *)(a1 + i));
    v3[1] = v4;
  }
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v5;
  long long v6 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v7;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v9;
  return result;
}

double pv_simd_matrix_get_rotation_matrix(simd_float3x3 a1)
{
  float32x4_t v1 = vmulq_f32((float32x4_t)a1.columns[0], (float32x4_t)a1.columns[0]);
  float v2 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2), vaddq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1))).f32[0]);
  if ((v2 <= -0.00001 || v2 >= 0.00001)
    && ((float32x4_t v3 = vmulq_f32((float32x4_t)a1.columns[1], (float32x4_t)a1.columns[1]),
         float v4 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]), v4 <= -0.00001)|| v4 >= 0.00001)&& ((v5 = vmulq_f32((float32x4_t)a1.columns[2], (float32x4_t)a1.columns[2]), v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]), v6 <= -0.00001)|| v6 >= 0.00001))
  {
    a1.columns[0].i64[0] = vmulq_n_f32((float32x4_t)a1.columns[0], 1.0 / v2).u64[0];
  }
  else
  {
    a1.columns[0] = (simd_float3)*MEMORY[0x1E4F14998];
  }
  return *(double *)a1.columns[0].i64;
}

float64x2_t pv_simd_matrix_get_rotation_matrix@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v3 = *a1;
  float64x2_t v2 = a1[1];
  float64x2_t v5 = a1[2];
  float64x2_t v4 = a1[3];
  float64x2_t v7 = a1[4];
  float64x2_t v6 = a1[5];
  float64x2_t v8 = vmulq_f64(v2, v2);
  v8.f64[0] = sqrt(v8.f64[0] + vaddvq_f64(vmulq_f64(v3, v3)));
  if ((v8.f64[0] <= -0.0000001 || v8.f64[0] >= 0.0000001)
    && ((double v9 = sqrt(vmulq_f64(v4, v4).f64[0] + vaddvq_f64(vmulq_f64(v5, v5))), v9 <= -0.0000001) || v9 >= 0.0000001)
    && ((double v10 = sqrt(vmulq_f64(v6, v6).f64[0] + vaddvq_f64(vmulq_f64(v7, v7))), v10 <= -0.0000001) || v10 >= 0.0000001))
  {
    v8.f64[0] = 1.0 / v8.f64[0];
    *(void *)&v3.f64[1] = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
    float64x2_t v16 = vmulq_n_f64(v3, v8.f64[0]);
    float64x2_t v17 = vmulq_f64(v2, v8);
    v8.f64[0] = 1.0 / v9;
    *(void *)&v5.f64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    float64x2_t v18 = vmulq_f64(v4, v8);
    *(void *)&v7.f64[1] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    v8.f64[0] = 1.0 / v10;
    *a2 = v16;
    a2[1] = v17;
    a2[2] = vmulq_n_f64(v5, 1.0 / v9);
    a2[3] = v18;
    float64x2_t result = vmulq_f64(v6, v8);
    a2[4] = vmulq_n_f64(v7, 1.0 / v10);
    a2[5] = result;
  }
  else
  {
    long long v11 = (float64x2_t *)MEMORY[0x1E4F14988];
    float64x2_t v12 = *(float64x2_t *)(MEMORY[0x1E4F14988] + 48);
    a2[2] = *(float64x2_t *)(MEMORY[0x1E4F14988] + 32);
    a2[3] = v12;
    float64x2_t v13 = v11[5];
    a2[4] = v11[4];
    a2[5] = v13;
    float64x2_t result = *v11;
    float64x2_t v15 = v11[1];
    *a2 = *v11;
    a2[1] = v15;
  }
  return result;
}

double pv_simd_matrix_get_rotation_matrix(simd_float4x4 a1)
{
  a1.columns[0].i32[3] = 0;
  a1.columns[1].i32[3] = 0;
  a1.columns[2].i32[3] = 0;
  return pv_simd_matrix_get_rotation_matrix(*(simd_float3x3 *)a1.columns[0].f32);
}

double pv_simd_matrix_get_rotation_matrix@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2 = a1[1];
  float64x2_t v3 = a1[2];
  float64x2_t v4 = a1[3];
  float64x2_t v5 = a1[4];
  float64x2_t v6 = a1[5];
  v8[0] = *a1;
  v8[1] = v2;
  long long v8[2] = v3;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v6;
  *(void *)&double result = *(_OWORD *)&pv_simd_matrix_get_rotation_matrix(v8, a2);
  return result;
}

double pv_simd_matrix_rotate(simd_float4x4 a1, float32x4_t a2)
{
  uint64_t v2 = 0;
  float v3 = vmulq_f32(a2, a2).f32[0];
  float v4 = vmuls_lane_f32(a2.f32[1], *(float32x2_t *)a2.f32, 1);
  float v5 = vmuls_lane_f32(a2.f32[2], a2, 2);
  float v6 = vmuls_lane_f32(a2.f32[3], a2, 3);
  float v7 = vmuls_lane_f32(a2.f32[0], *(float32x2_t *)a2.f32, 1);
  float v8 = vmuls_lane_f32(a2.f32[2], a2, 3);
  float v9 = vmuls_lane_f32(a2.f32[0], a2, 2);
  float v10 = vmuls_lane_f32(a2.f32[1], a2, 3);
  v11.i32[3] = 0;
  v11.f32[0] = v6 + (float)((float)(v3 - v4) - v5);
  v11.f32[1] = (float)(v7 + v8) + (float)(v7 + v8);
  float32_t v12 = (float)(v7 - v8) + (float)(v7 - v8);
  float v13 = vmuls_lane_f32(a2.f32[1], a2, 2);
  float v14 = vmuls_lane_f32(a2.f32[0], a2, 3);
  a2.i32[3] = 0;
  a2.f32[0] = v12;
  a2.f32[1] = (float)(v6 + (float)(v4 - v5)) - v3;
  *(float *)&unsigned int v15 = (float)((float)(v5 + v6) - v3) - v4;
  v16.f32[0] = (float)(v9 + v10) + (float)(v9 + v10);
  v16.f32[1] = (float)(v13 - v14) + (float)(v13 - v14);
  v16.i64[1] = v15;
  v18[2] = a1.columns[2];
  v18[3] = a1.columns[3];
  memset(v19, 0, sizeof(v19));
  do
  {
    v11.f32[2] = (float)(v9 - v10) + (float)(v9 - v10);
    a2.f32[2] = (float)(v13 + v14) + (float)(v13 + v14);
    v19[v2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(v18[v2])), a2, *(float32x2_t *)&v18[v2], 1), v16, (float32x4_t)v18[v2], 2), (float32x4_t)xmmword_1B7E734D0, (float32x4_t)v18[v2], 3);
    ++v2;
  }
  while (v2 != 4);
  return *(double *)v19;
}

long long *pv_simd_matrix_rotate@<X0>(long long *result@<X0>, float64x2_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = 0;
  float64x2_t v4 = *a2;
  float64x2_t v18 = a2[1];
  double v5 = vmuld_n_f64(v4.f64[0], v4.f64[0]);
  v14.f64[0] = a2->f64[1];
  double v6 = vmuld_lane_f64(v14.f64[0], *a2, 1);
  double v7 = vmuld_n_f64(v18.f64[0], v18.f64[0]);
  double v8 = vmuld_lane_f64(a2[1].f64[1], v18, 1);
  v13.f64[0] = v8 + v5 - v6 - v7;
  double v9 = vmuld_lane_f64(v4.f64[0], v4, 1);
  double v10 = vmuld_lane_f64(v18.f64[0], v18, 1);
  double v11 = vmuld_n_f64(a2->f64[0], v18.f64[0]);
  double v12 = vmuld_lane_f64(v14.f64[0], v18, 1);
  v13.f64[1] = v9 + v10 + v9 + v10;
  float64x2_t v14 = (float64x2_t)*(unint64_t *)&v14.f64[0];
  v17.f64[0] = v9 - v10 + v9 - v10;
  double v15 = vmuld_lane_f64(v18.f64[0], *a2, 1);
  double v16 = vmuld_lane_f64(a2->f64[0], v18, 1);
  v17.f64[1] = v8 + v6 - v7 - v5;
  v18.f64[1] = 0.0;
  v20.f64[1] = 0.0;
  v20.f64[0] = v7 + v8 - v5 - v6;
  long long vars0 = *result;
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  do
  {
    float64x2_t v22 = *(float64x2_t *)((char *)&vars0 + v3 * 16);
    float64x2_t v21 = *(float64x2_t *)((char *)&vars0 + v3 * 16 + 16);
    CGPoint v23 = (float64x2_t *)&a3[v3];
    v19.f64[1] = v15 - v16 + v15 - v16;
    v19.f64[0] = v11 + v12 + v11 + v12;
    *CGPoint v23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v22.f64[0]), v17, v22, 1), v19, v21.f64[0]), (float64x2_t)0, v21, 1);
    v14.f64[0] = v11 - v12 + v11 - v12;
    v18.f64[0] = v15 + v16 + v15 + v16;
    v23[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v14, v22.f64[0]), v18, v22, 1), v20, v21.f64[0]), (float64x2_t)xmmword_1B7E733E0, v21, 1);
    v3 += 2;
  }
  while (v3 != 8);
  return result;
}

double pv_simd_matrix_rotate(__n128 a1, __n128 a2, __n128 a3, __n128 a4, float a5, float32x4_t a6)
{
  *(__n128 *)&v14[32] = a3;
  *(__n128 *)&v14[48] = a4;
  *(__n128 *)float64x2_t v14 = a1;
  *(__n128 *)&v14[16] = a2;
  int32x4_t v6 = (int32x4_t)vmulq_f32(a6, a6);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  float32x2_t v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  float32x2_t v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  float32x4_t v13 = vmulq_n_f32(a6, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  __float2 v9 = __sincosf_stret(a5 * 0.5);
  float32x4_t v10 = vmulq_n_f32(v13, v9.__sinval);
  v10.i32[3] = LODWORD(v9.__cosval);
  simd_float4x4 v11 = *(simd_float4x4 *)v14;

  return pv_simd_matrix_rotate(v11, v10);
}

long long *pv_simd_matrix_rotate@<X0>(long long *a1@<X0>, float64x2_t *a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>)
{
  float64x2_t v6 = a2[1];
  float64x2_t v7 = vmulq_f64(v6, v6);
  v7.f64[0] = 1.0 / sqrt(v7.f64[0] + vaddvq_f64(vmulq_f64(*a2, *a2)));
  float64x2_t v16 = vmulq_f64(v6, v7);
  float64x2_t v17 = vmulq_n_f64(*a2, v7.f64[0]);
  __double2 v9 = __sincos_stret(a4 * 0.5);
  v8.f64[0] = v9.__sinval;
  *(void *)&v10.f64[0] = *(_OWORD *)&vmulq_f64(v8, v16);
  v10.f64[1] = v9.__cosval;
  long long v11 = a1[5];
  _OWORD v19[4] = a1[4];
  v19[5] = v11;
  long long v12 = a1[7];
  v19[6] = a1[6];
  v19[7] = v12;
  long long v13 = a1[1];
  v19[0] = *a1;
  v19[1] = v13;
  long long v14 = a1[3];
  v19[2] = a1[2];
  v19[3] = v14;
  v18[0] = vmulq_n_f64(v17, v9.__sinval);
  v18[1] = v10;
  return pv_simd_matrix_rotate(v19, v18, a3);
}

uint64_t pv_simd_matrix_get_euler_angles(int a1, uint64_t a2, simd_float3x3 a3)
{
  a3.columns[0].i32[3] = 0;
  a3.columns[1].i32[3] = 0;
  a3.columns[2].i32[3] = 0;
  v5.n128_f64[0] = pv_simd_matrix_get_rotation_matrix(a3);
  pv_simd_matrix_get_euler_angles(a1, a2, v5, v6, v7);
  return 1;
}

uint64_t pv_simd_matrix_get_euler_angles(int a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  switch(a1)
  {
    case 0:
      float v23 = asinf(fminf(fmaxf(a5.n128_f32[0], -1.0), 1.0));
      if (fabsf(a5.n128_f32[0]) < 0.99999)
      {
        float v25 = atan2f(-a5.n128_f32[1], a5.n128_f32[2]);
        float v6 = -a4.n128_f32[0];
        float v7 = a3.n128_f32[0];
        goto LABEL_16;
      }
      float v19 = atan2f(a4.n128_f32[2], a4.n128_f32[1]);
      float v20 = 0.0;
      unint64_t v15 = __PAIR64__(LODWORD(v23), LODWORD(v19));
      break;
    case 1:
      float v24 = asinf(-fminf(fmaxf(a4.n128_f32[0], -1.0), 1.0));
      if (fabsf(a4.n128_f32[0]) < 0.99999)
      {
        float v26 = atan2f(a4.n128_f32[2], a4.n128_f32[1]);
        float v9 = a3.n128_f32[0];
        float v8 = a5.n128_f32[0];
        goto LABEL_10;
      }
      unint64_t v15 = COERCE_UNSIGNED_INT(atan2f(-a5.n128_f32[1], a5.n128_f32[2]));
      goto LABEL_22;
    case 2:
      float v10 = a5.n128_f32[1];
      float v27 = asinf(-fminf(fmaxf(a5.n128_f32[1], -1.0), 1.0));
      if (fabsf(v10) < 0.99999)
      {
        float v30 = atan2f(a5.n128_f32[0], a5.n128_f32[2]);
        float v11 = a3.n128_f32[1];
        float v12 = a4.n128_f32[1];
        goto LABEL_13;
      }
      float v21 = atan2f(-a3.n128_f32[2], a3.n128_f32[0]);
      float v20 = 0.0;
      unint64_t v15 = __PAIR64__(LODWORD(v21), LODWORD(v27));
      break;
    case 3:
      float v13 = a3.n128_f32[1];
      float v24 = asinf(fminf(fmaxf(a3.n128_f32[1], -1.0), 1.0));
      if (fabsf(v13) >= 0.99999)
      {
        float v14 = atan2f(a5.n128_f32[0], a5.n128_f32[2]);
        LODWORD(v15) = 0;
      }
      else
      {
        float v26 = atan2f(-a5.n128_f32[1], a4.n128_f32[1]);
        float v9 = a3.n128_f32[0];
        float v8 = -a3.n128_f32[2];
LABEL_10:
        float v14 = atan2f(v8, v9);
        *(float *)&unint64_t v15 = v26;
      }
      *((float *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v14;
LABEL_22:
      float v20 = v24;
      break;
    case 4:
      float v16 = a4.n128_f32[2];
      float v27 = asinf(fminf(fmaxf(a4.n128_f32[2], -1.0), 1.0));
      if (fabsf(v16) >= 0.99999)
      {
        float v17 = atan2f(a3.n128_f32[1], a3.n128_f32[0]);
        unint64_t v15 = LODWORD(v27);
      }
      else
      {
        float v30 = atan2f(-a3.n128_f32[2], a5.n128_f32[2]);
        float v12 = a4.n128_f32[1];
        float v11 = -a4.n128_f32[0];
LABEL_13:
        float v17 = atan2f(v11, v12);
        unint64_t v15 = __PAIR64__(LODWORD(v30), LODWORD(v27));
      }
LABEL_26:
      float v20 = v17;
      break;
    case 5:
      float v18 = a3.n128_f32[2];
      float v23 = asinf(-fminf(fmaxf(a3.n128_f32[2], -1.0), 1.0));
      if (fabsf(v18) >= 0.99999)
      {
        float v17 = atan2f(-a4.n128_f32[0], a4.n128_f32[1]);
        LODWORD(v15) = 0;
      }
      else
      {
        float v25 = atan2f(a4.n128_f32[2], a5.n128_f32[2]);
        float v6 = a3.n128_f32[1];
        float v7 = a3.n128_f32[0];
LABEL_16:
        float v17 = atan2f(v6, v7);
        *(float *)&unint64_t v15 = v25;
      }
      *((float *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v23;
      goto LABEL_26;
    default:
      return 1;
  }
  *(float *)(a2 + 8) = v20;
  *(void *)a2 = v15;
  return 1;
}

uint64_t pv_simd_matrix_get_euler_angles(float64x2_t *a1, int a2, uint64_t a3)
{
  float64x2_t v5 = a1[1];
  float64x2_t v6 = a1[2];
  float64x2_t v7 = a1[3];
  float64x2_t v8 = a1[4];
  float64x2_t v9 = a1[5];
  v12[0] = *a1;
  v12[1] = v5;
  double v12[2] = v6;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v9;
  pv_simd_matrix_get_rotation_matrix(v12, v11);
  pv_simd_matrix_get_euler_angles((uint64_t)v11, a2, a3);
  return 1;
}

uint64_t pv_simd_matrix_get_euler_angles(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      long double v5 = asin(fmin(fmax(*(double *)(a1 + 64), -1.0), 1.0));
      uint64_t v6 = *(void *)(a3 + 16);
      int8x16_t v7 = *(int8x16_t *)a3;
      *(long double *)&v7.i64[1] = v5;
      unint64_t v49 = vextq_s8(v7, v7, 8uLL).u64[0];
      *(long double *)(a3 + 8) = v5;
      long long v8 = *(_OWORD *)(a1 + 64);
      if (fabs(*(double *)&v8) < 0.9999999)
      {
        uint64_t v45 = v6;
        long double v9 = atan2(-*((double *)&v8 + 1), *(long double *)(a1 + 80));
        v10.i64[1] = v49;
        *(long double *)v10.i64 = v9;
        int8x16_t v50 = v10;
        *(void *)(a3 + 16) = v45;
        *(int8x16_t *)a3 = v10;
        double v11 = -*(double *)(a1 + 32);
        goto LABEL_22;
      }
      long double v39 = atan2(*(long double *)(a1 + 48), *(long double *)(a1 + 40));
      v27.i64[1] = v49;
      *(long double *)v27.i64 = v39;
      goto LABEL_18;
    case 1:
      long double v12 = asin(-fmin(fmax(*(double *)(a1 + 32), -1.0), 1.0));
      int8x16_t v13 = *(int8x16_t *)a3;
      *(long double *)(a3 + 16) = v12;
      long long v14 = *(_OWORD *)(a1 + 32);
      if (fabs(*(double *)&v14) < 0.9999999)
      {
        unint64_t v51 = vextq_s8(v13, v13, 8uLL).u64[0];
        long double v15 = atan2(*(long double *)(a1 + 48), *((long double *)&v14 + 1));
        *((void *)&v16 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v51;
        *(long double *)&long long v16 = v15;
        long double v52 = v15;
        *(long double *)(a3 + 16) = v12;
        *(_OWORD *)a3 = v16;
        double v17 = *(double *)(a1 + 64);
        goto LABEL_10;
      }
      v27.i64[0] = atan2(-*(double *)(a1 + 72), *(long double *)(a1 + 80));
      double v40 = 0.0;
      goto LABEL_27;
    case 2:
      long double v18 = asin(-fmin(fmax(*(double *)(a1 + 72), -1.0), 1.0));
      uint64_t v19 = *(void *)(a3 + 16);
      long double v53 = v18;
      *(long double *)a3 = v18;
      if (fabs(*(double *)(a1 + 72)) < 0.9999999)
      {
        uint64_t v46 = v19;
        long double v20 = atan2(*(long double *)(a1 + 64), *(long double *)(a1 + 80));
        *(long double *)v21.i64 = v53;
        *(long double *)&v21.i64[1] = v20;
        int8x16_t v50 = v21;
        *(void *)(a3 + 16) = v46;
        *(int8x16_t *)a3 = v21;
        double v11 = *(double *)(a1 + 8);
        long double v22 = *(double *)(a1 + 40);
        goto LABEL_25;
      }
      long double v41 = atan2(-*(double *)(a1 + 16), *(long double *)a1);
      *(long double *)v27.i64 = v53;
      *(long double *)&v27.i64[1] = v41;
LABEL_18:
      *(void *)&double v40 = vextq_s8(v27, v27, 8uLL).u64[0];
      long double v12 = 0.0;
      goto LABEL_27;
    case 3:
      long double v12 = asin(fmin(fmax(*(double *)(a1 + 8), -1.0), 1.0));
      unint64_t v23 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 8uLL).u64[0];
      *(long double *)(a3 + 16) = v12;
      if (fabs(*(double *)(a1 + 8)) >= 0.9999999)
      {
        *((void *)&v42 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v23;
        *(void *)&long long v42 = 0;
        *(long double *)(a3 + 16) = v12;
        *(_OWORD *)a3 = v42;
        double v40 = atan2(*(long double *)(a1 + 64), *(long double *)(a1 + 80));
        v27.i64[0] = 0;
        goto LABEL_27;
      }
      unint64_t v54 = v23;
      long double v24 = atan2(-*(double *)(a1 + 72), *(long double *)(a1 + 40));
      *((void *)&v25 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v54;
      *(long double *)&long long v25 = v24;
      long double v52 = v24;
      *(long double *)(a3 + 16) = v12;
      *(_OWORD *)a3 = v25;
      double v17 = -*(double *)(a1 + 16);
LABEL_10:
      long double v26 = atan2(v17, *(long double *)a1);
      *(long double *)v27.i64 = v52;
      *(long double *)&v27.i64[1] = v26;
      goto LABEL_26;
    case 4:
      double v28 = asin(fmin(fmax(*(double *)(a1 + 48), -1.0), 1.0));
      uint64_t v29 = *(void *)(a3 + 16);
      *(double *)a3 = v28;
      if (fabs(*(double *)(a1 + 48)) < 0.9999999)
      {
        uint64_t v47 = v29;
        double v55 = v28;
        long double v30 = atan2(-*(double *)(a1 + 16), *(long double *)(a1 + 80));
        *(double *)v31.i64 = v55;
        *(long double *)&v31.i64[1] = v30;
        int8x16_t v50 = v31;
        *(void *)(a3 + 16) = v47;
        int8x16_t v32 = v31;
        goto LABEL_24;
      }
      int8x16_t v50 = (int8x16_t)*(unint64_t *)&v28;
      *(void *)(a3 + 16) = v29;
      *(_OWORD *)a3 = *(unint64_t *)&v28;
      goto LABEL_21;
    case 5:
      long double v33 = asin(-fmin(fmax(*(double *)(a1 + 16), -1.0), 1.0));
      uint64_t v34 = *(void *)(a3 + 16);
      int8x16_t v35 = *(int8x16_t *)a3;
      *(long double *)&v35.i64[1] = v33;
      unint64_t v36 = vextq_s8(v35, v35, 8uLL).u64[0];
      *(long double *)(a3 + 8) = v33;
      if (fabs(*(double *)(a1 + 16)) >= 0.9999999)
      {
        v32.i64[1] = v36;
        v32.i64[0] = 0;
        int8x16_t v50 = v32;
        *(void *)(a3 + 16) = v34;
LABEL_24:
        *(int8x16_t *)a3 = v32;
        long double v22 = *(double *)(a1 + 40);
        double v11 = -*(double *)(a1 + 32);
      }
      else
      {
        uint64_t v48 = v34;
        unint64_t v56 = v36;
        long double v37 = atan2(*(long double *)(a1 + 48), *(long double *)(a1 + 80));
        v38.i64[1] = v56;
        *(long double *)v38.i64 = v37;
        int8x16_t v50 = v38;
        *(void *)(a3 + 16) = v48;
        *(int8x16_t *)a3 = v38;
LABEL_21:
        double v11 = *(double *)(a1 + 8);
LABEL_22:
        long double v22 = *(double *)a1;
      }
LABEL_25:
      long double v43 = atan2(v11, v22);
      int8x16_t v27 = v50;
      long double v12 = v43;
LABEL_26:
      *(void *)&double v40 = vextq_s8(v27, v27, 8uLL).u64[0];
LABEL_27:
      *(long double *)(a3 + 16) = v12;
      *(double *)&v27.i64[1] = v40;
      *(int8x16_t *)a3 = v27;
      return 1;
    default:
      return 1;
  }
}

double pv_simd_matrix_translate(double a1, double a2, __n128 a3, __n128 a4, float32x4_t a5)
{
  uint64_t v5 = 0;
  a5.i32[3] = 1.0;
  int8x16_t v7[2] = a3;
  v7[3] = a4;
  memset(v8, 0, sizeof(v8));
  do
  {
    v8[v5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B7E736B0, COERCE_FLOAT(v7[v5])), (float32x4_t)xmmword_1B7E736C0, *(float32x2_t *)&v7[v5], 1), (float32x4_t)xmmword_1B7E736D0, (float32x4_t)v7[v5], 2), a5, (float32x4_t)v7[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  return *(double *)v8;
}

long long *pv_simd_matrix_translate@<X0>(long long *result@<X0>, float64x2_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = 0;
  float64x2_t v4 = *a2;
  float64x2_t v5 = a2[1];
  v5.f64[1] = 1.0;
  long long vars0 = *result;
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  do
  {
    float64x2_t v7 = *(float64x2_t *)((char *)&vars0 + v3 * 16);
    float64x2_t v6 = *(float64x2_t *)((char *)&vars0 + v3 * 16 + 16);
    long long v8 = (float64x2_t *)&a3[v3];
    float64x2_t *v8 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1B7E733D0, v7.f64[0]), (float64x2_t)xmmword_1B7E733E0, v7, 1), (float64x2_t)0, v6.f64[0]), v4, v6, 1);
    v8[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v7.f64[0]), (float64x2_t)0, v7, 1), (float64x2_t)xmmword_1B7E733D0, v6.f64[0]), v5, v6, 1);
    v3 += 2;
  }
  while (v3 != 8);
  return result;
}

double pv_simd_matrix_scale(simd_float4x4 a1, float a2, float32_t a3, float a4)
{
  uint64_t v4 = 0;
  float32x4_t v5 = (float32x4_t)LODWORD(a2);
  v6.i32[0] = 0;
  v6.i64[1] = 0;
  v6.f32[1] = a3;
  v7.i64[0] = 0;
  v7.i64[1] = LODWORD(a4);
  int8x16_t v9[2] = a1.columns[2];
  v9[3] = a1.columns[3];
  memset(v10, 0, sizeof(v10));
  do
  {
    v10[v4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(v9[v4])), v6, *(float32x2_t *)&v9[v4], 1), v7, (float32x4_t)v9[v4], 2), (float32x4_t)xmmword_1B7E734D0, (float32x4_t)v9[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  return *(double *)v10;
}

long long *pv_simd_matrix_scale@<X0>(long long *result@<X0>, _OWORD *a2@<X8>, unint64_t a3@<D0>, float64_t a4@<D1>, unint64_t a5@<D2>)
{
  uint64_t v5 = 0;
  float64x2_t v6 = (float64x2_t)a3;
  v7.f64[0] = 0.0;
  v7.f64[1] = a4;
  long long vars0 = *result;
  *a2 = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  do
  {
    float64x2_t v9 = *(float64x2_t *)((char *)&vars0 + v5 * 16);
    float64x2_t v8 = *(float64x2_t *)((char *)&vars0 + v5 * 16 + 16);
    int8x16_t v10 = (float64x2_t *)&a2[v5];
    *int8x16_t v10 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, v9.f64[0]), v7, v9, 1), (float64x2_t)0, v8.f64[0]), (float64x2_t)0, v8, 1);
    v10[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v9.f64[0]), (float64x2_t)0, v9, 1), (float64x2_t)a5, v8.f64[0]), (float64x2_t)xmmword_1B7E733E0, v8, 1);
    v5 += 2;
  }
  while (v5 != 8);
  return result;
}

double pv_simd_matrix_get_row(simd_float3x3 a1, int a2)
{
  int32x4_t v2 = (int32x4_t)a1.columns[0];
  if (a2 == 2)
  {
    *(void *)&double result = vzip2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
  }
  else if (a2 == 1)
  {
    *(void *)&double result = vtrn2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
  }
  else
  {
    double result = 0.0;
    if (!a2) {
      *(void *)&double result = vzip1q_s32(v2, (int32x4_t)a1.columns[1]).u64[0];
    }
  }
  return result;
}

__n128 pv_simd_matrix_get_row@<Q0>(unint64_t *a1@<X0>, int a2@<W1>, __n128 *a3@<X8>, __n128 a4@<Q2>)
{
  if (a2 == 2)
  {
    result.n128_u64[0] = a1[2];
    unint64_t v5 = a1[6];
    a4.n128_u64[0] = a1[10];
  }
  else if (a2 == 1)
  {
    result.n128_u64[0] = a1[1];
    unint64_t v5 = a1[5];
    a4.n128_u64[0] = a1[9];
  }
  else if (a2)
  {
    result.n128_u64[0] = 0;
    unint64_t v5 = 0;
    a4.n128_u64[0] = 0;
  }
  else
  {
    result.n128_u64[0] = *a1;
    unint64_t v5 = a1[4];
    a4.n128_u64[0] = a1[8];
  }
  result.n128_u64[1] = v5;
  *a3 = result;
  a3[1] = a4;
  return result;
}

double pv_simd_matrix_get_row(simd_float4x4 a1, int a2)
{
  switch(a2)
  {
    case 0:
      *(void *)&double result = vzip1q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
      break;
    case 1:
      *(void *)&double result = vtrn2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
      break;
    case 2:
      *(void *)&double result = vzip2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
      break;
    case 3:
      *(void *)&double result = vuzp2q_s32(vuzp2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]), (int32x4_t)a1.columns[0]).u64[0];
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

int64x2_t *pv_simd_matrix_get_row@<X0>(int64x2_t *result@<X0>, int a2@<W1>, int64x2_t *a3@<X8>)
{
  switch(a2)
  {
    case 0:
      int64x2_t v3 = *result;
      int64x2_t v4 = result[2];
      int64x2_t v5 = result[4];
      int64x2_t v6 = result[6];
      goto LABEL_6;
    case 1:
      int64x2_t v7 = vzip2q_s64(*result, result[2]);
      v8.i64[0] = vdupq_laneq_s64(result[4], 1).u64[0];
      float64x2_t v9 = &result[6].i64[1];
      goto LABEL_8;
    case 2:
      int64x2_t v3 = result[1];
      int64x2_t v4 = result[3];
      int64x2_t v5 = result[5];
      int64x2_t v6 = result[7];
LABEL_6:
      int64x2_t v7 = vzip1q_s64(v3, v4);
      int64x2_t v8 = vzip1q_s64(v5, v6);
      break;
    case 3:
      int64x2_t v7 = vzip2q_s64(result[1], result[3]);
      v8.i64[0] = vdupq_laneq_s64(result[5], 1).u64[0];
      float64x2_t v9 = &result[7].i64[1];
LABEL_8:
      v8.i64[1] = *v9;
      break;
    default:
      int64x2_t v7 = 0uLL;
      int64x2_t v8 = 0uLL;
      break;
  }
  *a3 = v7;
  a3[1] = v8;
  return result;
}

double pv_simd_matrix_set_row(int a1, int32x4_t a2, int32x4_t a3, double a4, int32x4_t a5)
{
  if (a1)
  {
    int32x4_t v5 = vzip1q_s32(a2, a3);
    v5.i32[2] = LODWORD(a4);
    if (a1 == 1)
    {
      int32x4_t v6 = a5;
    }
    else
    {
      int32x4_t v6 = vtrn2q_s32(a2, a3);
      v6.i32[2] = HIDWORD(a4);
    }
  }
  else
  {
    int32x4_t v6 = vtrn2q_s32(a2, a3);
    v6.i32[2] = HIDWORD(a4);
    int32x4_t v5 = a5;
  }
  *(void *)&double result = vzip1q_s32(v5, v6).u64[0];
  return result;
}

__n128 pv_simd_matrix_set_row@<Q0>(long long *a1@<X0>, int8x16_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int8x16_t v5 = *a2;
  int8x16_t v4 = a2[1];
  if (!a3)
  {
    result.n128_u64[0] = vextq_s8(v5, v5, 8uLL).u64[0];
    uint64_t v12 = *((void *)a1 + 1);
    unint64_t v11 = *((void *)a1 + 5);
    *(void *)&long long v6 = a2->i64[0];
    *(void *)&long long v8 = a2[1].i64[0];
    uint64_t v13 = *((void *)a1 + 9);
    goto LABEL_7;
  }
  long long v6 = *a1;
  __n128 result = (__n128)a1[2];
  long long v8 = a1[4];
  if (a3 == 1)
  {
    long long v9 = a1[1];
    int8x16_t v10 = (int8x16_t)a1[3];
    unint64_t v11 = vextq_s8(v5, v5, 8uLL).u64[0];
    uint64_t v12 = a2->i64[0];
    uint64_t v13 = a2[1].i64[0];
LABEL_8:
    int8x16_t v4 = (int8x16_t)a1[5];
    goto LABEL_9;
  }
  uint64_t v13 = *((void *)a1 + 9);
  unint64_t v11 = *((void *)a1 + 5);
  uint64_t v12 = *((void *)a1 + 1);
  if (a3 != 2)
  {
LABEL_7:
    long long v9 = a1[1];
    int8x16_t v10 = (int8x16_t)a1[3];
    goto LABEL_8;
  }
  int8x16_t v10 = vextq_s8(v5, v5, 8uLL);
  *(void *)&long long v9 = a2->i64[0];
LABEL_9:
  *((void *)&v6 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v12;
  result.n128_u64[1] = v11;
  *((void *)&v8 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v13;
  *((void *)&v9 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v10.i64[0];
  *(_OWORD *)a4 = v6;
  *(_OWORD *)(a4 + 16) = v9;
  *(__n128 *)(a4 + 32) = result;
  *(int8x16_t *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v8;
  *(int8x16_t *)(a4 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v4;
  return result;
}

double pv_simd_matrix_set_row(int a1, int32x4_t a2, int32x4_t a3, __n128 a4, __n128 a5, int32x4_t a6)
{
  if (!a1)
  {
    v7.i64[0] = vtrn2q_s32(a2, a3).u64[0];
    v7.i64[1] = __PAIR64__(a5.n128_u32[1], a4.n128_u32[1]);
    int32x4_t v6 = a6;
    goto LABEL_5;
  }
  v6.i64[0] = vzip1q_s32(a2, a3).u64[0];
  v6.i64[1] = __PAIR64__(a5.n128_u32[0], a4.n128_u32[0]);
  if (a1 == 1)
  {
    int32x4_t v7 = a6;
LABEL_5:
    v8.i64[0] = vzip2q_s32(a2, a3).u64[0];
    v8.i64[1] = __PAIR64__(a5.n128_u32[2], a4.n128_u32[2]);
    goto LABEL_6;
  }
  v7.i64[0] = vtrn2q_s32(a2, a3).u64[0];
  v7.i64[1] = __PAIR64__(a5.n128_u32[1], a4.n128_u32[1]);
  if (a1 == 2)
  {
    int32x4_t v8 = a6;
  }
  else
  {
    v8.i64[0] = vzip2q_s32(a2, a3).u64[0];
    v8.i64[1] = __PAIR64__(a5.n128_u32[2], a4.n128_u32[2]);
    if (a1 == 3) {
      goto LABEL_7;
    }
  }
LABEL_6:
  a6.i64[0] = vuzp2q_s32(vuzp2q_s32(a2, a3), a2).u64[0];
  a6.i32[2] = a4.n128_i32[3];
  a6.i32[3] = a5.n128_i32[3];
LABEL_7:
  *(void *)&double result = vzip1q_s32(vzip1q_s32(v6, v8), vzip1q_s32(v7, a6)).u64[0];
  return result;
}

int64x2_t pv_simd_matrix_set_row@<Q0>(int64x2_t *a1@<X0>, int64x2_t *a2@<X1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  int64x2_t v5 = *a2;
  int64x2_t v4 = a2[1];
  int64x2_t v6 = *a1;
  int64x2_t v7 = a1[1];
  int64x2_t v8 = a1[2];
  int64x2_t v9 = a1[3];
  int64x2_t v11 = a1[4];
  int64x2_t v10 = a1[5];
  int64x2_t v12 = a1[7];
  if (!a3)
  {
    int64x2_t v15 = vzip2q_s64(v6, v8);
    v16.i64[0] = vdupq_laneq_s64(v11, 1).u64[0];
    v16.i64[1] = a1[6].i64[1];
    int64x2_t v13 = *a2;
    int64x2_t v14 = a2[1];
    goto LABEL_5;
  }
  int64x2_t v13 = vzip1q_s64(v6, v8);
  int64x2_t v14 = vzip1q_s64(v11, a1[6]);
  if (a3 == 1)
  {
    int64x2_t v15 = *a2;
    int64x2_t v16 = a2[1];
LABEL_5:
    int64x2_t v17 = vzip1q_s64(v7, v9);
    int64x2_t v18 = vzip1q_s64(v10, v12);
    goto LABEL_6;
  }
  int64x2_t v15 = vzip2q_s64(v6, v8);
  v16.i64[0] = vdupq_laneq_s64(v11, 1).u64[0];
  v16.i64[1] = a1[6].i64[1];
  if (a3 == 2)
  {
    int64x2_t v17 = *a2;
    int64x2_t v18 = a2[1];
  }
  else
  {
    int64x2_t v17 = vzip1q_s64(v7, v9);
    int64x2_t v18 = vzip1q_s64(v10, v12);
    if (a3 == 3) {
      goto LABEL_7;
    }
  }
LABEL_6:
  int64x2_t v5 = vzip2q_s64(v7, v9);
  v4.i64[0] = vdupq_laneq_s64(v10, 1).u64[0];
  v4.i64[1] = a1[7].i64[1];
LABEL_7:
  int64x2_t v19 = vzip1q_s64(v13, v15);
  int64x2_t v20 = vzip2q_s64(v13, v15);
  *a4 = v19;
  a4[1] = vzip1q_s64(v17, v5);
  int64x2_t v21 = vzip1q_s64(v14, v16);
  int64x2_t result = vzip2q_s64(v14, v16);
  a4[2] = v20;
  a4[3] = vzip2q_s64(v17, v5);
  a4[4] = v21;
  a4[5] = vzip1q_s64(v18, v4);
  a4[6] = result;
  a4[7] = vzip2q_s64(v18, v4);
  return result;
}

void pv_simd_matrix_lerp(simd_float4x4 a1, simd_float4x4 a2, int a3, float a4)
{
  float64x2_t v22 = (float64x2_t)xmmword_1B7E73520;
  float64x2_t v23 = (float64x2_t)unk_1B7E73530;
  float64x2_t v24 = (float64x2_t)xmmword_1B7E73540;
  float64x2_t v25 = (float64x2_t)unk_1B7E73550;
  float64x2_t v18 = (float64x2_t)pv_transform_info_identity;
  float64x2_t v19 = *(float64x2_t *)algn_1B7E734F0;
  float64x2_t v20 = (float64x2_t)xmmword_1B7E73500;
  float64x2_t v21 = (float64x2_t)unk_1B7E73510;
  pv_transform_info_make(a1, (PVTransformInfo *)&v18);
  float64x2_t v14 = (float64x2_t)xmmword_1B7E73520;
  float64x2_t v15 = (float64x2_t)unk_1B7E73530;
  float64x2_t v16 = (float64x2_t)xmmword_1B7E73540;
  float64x2_t v17 = (float64x2_t)unk_1B7E73550;
  float64x2_t v10 = (float64x2_t)pv_transform_info_identity;
  float64x2_t v11 = *(float64x2_t *)algn_1B7E734F0;
  float64x2_t v12 = (float64x2_t)xmmword_1B7E73500;
  float64x2_t v13 = (float64x2_t)unk_1B7E73510;
  pv_transform_info_make(a2, (PVTransformInfo *)&v10);
  v5.n128_f64[0] = a4;
  _OWORD v8[4] = v22;
  v8[5] = v23;
  float64x2_t v8[6] = v24;
  v8[7] = v25;
  v8[0] = v18;
  v8[1] = v19;
  long long v8[2] = v20;
  v8[3] = v21;
  _OWORD v7[4] = v14;
  v7[5] = v15;
  v7[6] = v16;
  v7[7] = v17;
  v7[0] = v10;
  v7[1] = v11;
  int8x16_t v7[2] = v12;
  v7[3] = v13;
  pv_transform_info_lerp(v8, v7, a3, v9, v5);
  pv_simd_float4x4_from_pv_transform_info(v9);
}

void pv_simd_matrix_lerp(long long *a1@<X0>, long long *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  long long v9 = a1[4];
  long long v48 = xmmword_1B7E73520;
  long long v49 = xmmword_1B7E73530;
  long long v50 = xmmword_1B7E73540;
  long long v51 = *(_OWORD *)&qword_1B7E73550;
  long long v44 = pv_transform_info_identity;
  long long v45 = *(_OWORD *)algn_1B7E734F0;
  long long v46 = xmmword_1B7E73500;
  long long v47 = *(_OWORD *)&qword_1B7E73510;
  long long v10 = a1[5];
  long long v40 = v9;
  long long v41 = v10;
  long long v11 = a1[7];
  long long v42 = a1[6];
  long long v43 = v11;
  long long v12 = a1[1];
  long long v36 = *a1;
  long long v37 = v12;
  long long v13 = a1[3];
  long long v38 = a1[2];
  long long v39 = v13;
  pv_transform_info_make((uint64_t)&v36, (uint64_t)&v44);
  long long v40 = xmmword_1B7E73520;
  long long v41 = xmmword_1B7E73530;
  long long v42 = xmmword_1B7E73540;
  long long v43 = *(_OWORD *)&qword_1B7E73550;
  long long v36 = pv_transform_info_identity;
  long long v37 = *(_OWORD *)algn_1B7E734F0;
  long long v38 = xmmword_1B7E73500;
  long long v39 = *(_OWORD *)&qword_1B7E73510;
  long long v14 = a2[5];
  long long v32 = a2[4];
  long long v33 = v14;
  long long v15 = a2[7];
  long long v34 = a2[6];
  long long v35 = v15;
  long long v16 = a2[1];
  long long v28 = *a2;
  long long v29 = v16;
  long long v17 = a2[3];
  long long v30 = a2[2];
  long long v31 = v17;
  pv_transform_info_make((uint64_t)&v28, (uint64_t)&v36);
  long long v32 = v48;
  long long v33 = v49;
  long long v34 = v50;
  long long v35 = v51;
  long long v28 = v44;
  long long v29 = v45;
  long long v30 = v46;
  long long v31 = v47;
  long long v23 = v40;
  long long v24 = v41;
  long long v25 = v42;
  long long v26 = v43;
  long long v19 = v36;
  long long v20 = v37;
  v18.n128_u64[1] = *((void *)&v38 + 1);
  long long v21 = v38;
  long long v22 = v39;
  v18.n128_f64[0] = a5;
  pv_transform_info_lerp((float64x2_t *)&v28, (float64x2_t *)&v19, a3, v27, v18);
  pv_simd_double4x4_from_pv_transform_info((uint64_t)v27, a4, 0, 0, 0, unk_1B7E73518, pv_transform_info_identity, *((uint64_t *)&pv_transform_info_identity + 1), 0, 0, 0, 0, 0, unk_1B7E73558, 0x3FF0000000000000, 0x3FF0000000000000, xmmword_1B7E73530, v19, v20,
    v21,
    v22,
    v23,
    v24,
    v25);
}

double pv_simd_matrix_convert_coordinate_system(int a1, int a2, simd_float4x4 a3, float32x4_t a4, float32x2_t a5)
{
  char v5 = 0;
  if ((a1 != 1) != (a2 != 1)) {
    unsigned int v6 = -1;
  }
  else {
    unsigned int v6 = 0;
  }
  __asm { FMOV            V16.4S, #1.0 }
  float32x4_t v12 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1B7E736E0, _Q16);
  for (char i = 1; ; char i = 0)
  {
    char v14 = i;
    unint64_t v18 = a4.i64[0];
    float v15 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
    float32x2_t v17 = a5;
    if (vabds_f32(v15, *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)))) >= 0.0001) {
      break;
    }
    char v5 = 1;
    if ((v14 & 1) == 0) {
      return pv_simd_matrix_scale(a3, v12.f32[0], v12.f32[1], v12.f32[2]);
    }
  }
  *(float32x2_t *)a4.f32 = vdiv_f32(a5, *(float32x2_t *)a4.f32);
  a4.i32[2] = 1.0;
  float32x4_t v12 = vmulq_f32(v12, a4);
  return pv_simd_matrix_scale(a3, v12.f32[0], v12.f32[1], v12.f32[2]);
}

long long *pv_simd_matrix_convert_coordinate_system@<X0>(long long *result@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q1>, float64x2_t a7, long long a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15)
{
  char v15 = 0;
  if ((a2 != 1) != (a3 != 1)) {
    unint64_t v16 = -1;
  }
  else {
    unint64_t v16 = 0;
  }
  __asm { FMOV            V4.2D, #1.0 }
  float64x2_t v22 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_1B7E736F0, _Q4);
  unint64_t v23 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v24.f64[0] = 1.0;
  for (char i = 1; ; char i = 0)
  {
    char v26 = i;
    a7 = a5;
    double v27 = *(double *)((unint64_t)&a7 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)));
    float64x2_t vars0 = a6;
    if (vabdd_f64(v27, *(double *)((unint64_t)&vars0 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)))) >= 0.0001) {
      break;
    }
    char v15 = 1;
    if ((v26 & 1) == 0)
    {
      uint64_t v28 = 0;
      long long v29 = result[5];
      a12 = result[4];
      a13 = v29;
      long long v30 = result[7];
      a14 = result[6];
      a15 = v30;
      long long v31 = result[1];
      a8 = *result;
      a9 = v31;
      long long v32 = result[3];
      a10 = result[2];
      a11 = v32;
      v33.f64[0] = 0.0;
      v22.f64[1] = 0.0;
      v24.f64[1] = 0.0;
      *(void *)&v33.f64[1] = v23;
      *a4 = 0u;
      a4[1] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      do
      {
        float64x2_t v35 = *(float64x2_t *)((char *)&a8 + v28 * 16);
        float64x2_t v34 = *(float64x2_t *)((char *)&a8 + v28 * 16 + 16);
        long long v36 = (float64x2_t *)&a4[v28];
        *long long v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, v35.f64[0]), v33, v35, 1), (float64x2_t)0, v34.f64[0]), (float64x2_t)0, v34, 1);
        v36[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v35.f64[0]), (float64x2_t)0, v35, 1), v24, v34.f64[0]), (float64x2_t)xmmword_1B7E733E0, v34, 1);
        v28 += 2;
      }
      while (v28 != 8);
      return result;
    }
  }
  uint64_t v37 = 0;
  *(void *)&v22.f64[1] = v23;
  float64x2_t v38 = vmulq_f64(v22, vdivq_f64(a6, a5));
  long long v39 = result[5];
  a12 = result[4];
  a13 = v39;
  long long v40 = result[7];
  a14 = result[6];
  a15 = v40;
  long long v41 = result[1];
  a8 = *result;
  a9 = v41;
  long long v42 = result[3];
  a10 = result[2];
  a11 = v42;
  v43.f64[0] = 0.0;
  v43.f64[1] = v38.f64[1];
  v24.f64[1] = 0.0;
  *a4 = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  do
  {
    float64x2_t v45 = *(float64x2_t *)((char *)&a8 + v37 * 16);
    float64x2_t v44 = *(float64x2_t *)((char *)&a8 + v37 * 16 + 16);
    long long v46 = (float64x2_t *)&a4[v37];
    *long long v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v38.f64[0], v45.f64[0]), v43, v45, 1), (float64x2_t)0, v44.f64[0]), (float64x2_t)0, v44, 1);
    v46[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v45.f64[0]), (float64x2_t)0, v45, 1), v24, v44.f64[0]), (float64x2_t)xmmword_1B7E733E0, v44, 1);
    v37 += 2;
  }
  while (v37 != 8);
  return result;
}

double pv_simd_matrix_transform_vector(float32x4_t a1, __n128 a2, float32x4_t a3, __n128 a4, float32x4_t a5, float32x4_t a6)
{
  *(float32x2_t *)a6.f32 = vadd_f32((float32x2_t)a4.n128_u64[0], vadd_f32(vmul_laneq_f32(*(float32x2_t *)a3.f32, a5, 2), vadd_f32(vmul_n_f32(*(float32x2_t *)a1.f32, a5.f32[0]), vmul_lane_f32((float32x2_t)a2.n128_u64[0], *(float32x2_t *)a5.f32, 1))));
  a6.f32[2] = a4.n128_f32[2]
            + (float)(COERCE_FLOAT(vmulq_f32(a3, a5).i32[2])
                    + (float)(vmulq_laneq_f32(a5, a1, 2).f32[0]
                            + vmuls_lane_f32(a2.n128_f32[2], *(float32x2_t *)a5.f32, 1)));
  int32x2_t v6 = (int32x2_t)vmulq_laneq_f32(a5, a1, 3).u64[0];
  *(float *)v6.i32 = a4.n128_f32[3]
                   + (float)(vmuls_lane_f32(a3.f32[3], a5, 2)
                           + (float)(*(float *)v6.i32 + vmuls_lane_f32(a2.n128_f32[3], *(float32x2_t *)a5.f32, 1)));
  *(void *)&double result = vdivq_f32(a6, (float32x4_t)vdupq_lane_s32(v6, 0)).u64[0];
  return result;
}

float64x2_t pv_simd_matrix_transform_vector@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v3 = a2[1];
  float64x2_t v4 = a1[1];
  float64x2_t v5 = a1[3];
  float64x2_t v6 = a1[5];
  float64x2_t v7 = vmulq_n_f64(a1[4], v3.f64[0]);
  float64x2_t v8 = vaddq_f64(a1[6], vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, a2->f64[0]), vmulq_laneq_f64(a1[2], *a2, 1)), v7));
  v7.f64[0] = a1[7].f64[0]
            + vmuld_n_f64(a2->f64[0], v4.f64[0])
            + vmuld_lane_f64(v5.f64[0], *a2, 1)
            + vmuld_n_f64(v3.f64[0], v6.f64[0]);
  v3.f64[0] = a1[7].f64[1]
            + vmuld_lane_f64(a2->f64[0], v4, 1)
            + vmuld_lane_f64(a2->f64[1], v5, 1)
            + vmuld_lane_f64(v3.f64[0], v6, 1);
  float64x2_t v9 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v3.f64[0], 0));
  float64x2_t result = vdivq_f64(v7, v3);
  *a3 = v9;
  a3[1] = result;
  return result;
}

{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t result;

  float64x2_t v3 = a2[1];
  float64x2_t v4 = vaddq_f64(vaddq_f64(vmulq_n_f64(a1[1], a2->f64[0]), vmulq_laneq_f64(a1[3], *a2, 1)), vmulq_n_f64(a1[5], v3.f64[0]));
  float64x2_t v5 = vmulq_laneq_f64(a1[7], v3, 1);
  float64x2_t result = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, a2->f64[0]), vmulq_laneq_f64(a1[2], *a2, 1)), vmulq_n_f64(a1[4], v3.f64[0])), vmulq_laneq_f64(a1[6], v3, 1));
  *a3 = result;
  a3[1] = vaddq_f64(v4, v5);
  return result;
}

double pv_simd_matrix_transform_vector(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  *(void *)&double result = vaddq_f32(vmulq_laneq_f32(a4, a5, 3), vaddq_f32(vmulq_laneq_f32(a3, a5, 2), vaddq_f32(vmulq_n_f32(a1, a5.f32[0]), vmulq_lane_f32(a2, *(float32x2_t *)a5.f32, 1)))).u64[0];
  return result;
}

BOOL pv_is_finite(simd_float3x3 a1)
{
  __n128 v2 = (__n128)a1.columns[2];
  __n128 v3 = (__n128)a1.columns[1];
  if (!pv_is_finite((__n128)a1.columns[0]) || !pv_is_finite(v3)) {
    return 0;
  }

  return pv_is_finite(v2);
}

BOOL pv_is_finite(simd_float4x4 a1)
{
  __n128 v2 = (__n128)a1.columns[3];
  __n128 v3 = (__n128)a1.columns[2];
  __n128 v4 = (__n128)a1.columns[1];
  if (!pv_is_finite((__n128)a1.columns[0]) || !pv_is_finite(v4) || !pv_is_finite(v3)) {
    return 0;
  }

  return pv_is_finite(v2);
}

void sub_1B7443774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74439C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  HGObject::operator delete(v19);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 24))(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1B7443CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7443F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7444064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7444148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  long long v10 = v9;

  a9.super_class = (Class)PVRendererBase;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B744421C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<HGRef<PVRenderJob>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B7444358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }

  _Unwind_Resume(a1);
}

void sub_1B744448C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_1B74446D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7444794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B7444818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B74449D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7444A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7444AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7444B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v18 - 48));
  _Unwind_Resume(a1);
}

void sub_1B7444C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v18 - 48));
  _Unwind_Resume(a1);
}

void sub_1B7444DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVPerfStats::~PVPerfStats(PVPerfStats *this)
{
  uint64_t v2 = *((void *)this + 80);
  *((void *)this + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x81C40B8603338);
  }

  uint64_t v3 = (void *)*((void *)this + 71);
  if (v3)
  {
    *((void *)this + 72) = v3;
    operator delete(v3);
  }
  __n128 v4 = (void *)*((void *)this + 60);
  if (v4)
  {
    *((void *)this + 6HGRenderQueue::CancelAllRenderJobs(*this, 1) = v4;
    operator delete(v4);
  }
  float64x2_t v5 = (void *)*((void *)this + 49);
  if (v5)
  {
    *((void *)this + 5pthread_cond_init((pthread_cond_t *)this, 0) = v5;
    operator delete(v5);
  }
  float64x2_t v6 = (void *)*((void *)this + 38);
  if (v6)
  {
    *((void *)this + 39) = v6;
    operator delete(v6);
  }
  float64x2_t v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    *((void *)this + 28) = v7;
    operator delete(v7);
  }
  float64x2_t v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    *((void *)this + 17) = v8;
    operator delete(v8);
  }
  float64x2_t v9 = (void **)((char *)this + 32);
  std::vector<PVPerfStats::FrameStats>::__destroy_vector::operator()[abi:ne180100](&v9);
}

uint64_t *std::vector<HGRef<PVRenderJob>>::__init_with_size[abi:ne180100]<HGRef<PVRenderJob>*,HGRef<PVRenderJob>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    float64x2_t v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1B7444FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<HGRef<PVRenderJob>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __n128 v4 = a4;
  uint64_t v11 = a4;
  float32x4_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  int8x16_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    float64x2_t v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      *__n128 v4 = *v6;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        __n128 v4 = v12;
      }
      ++v6;
      float32x4_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B7445088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t **)result[1];
  uint64_t v1 = (uint64_t **)result[2];
  uint64_t v3 = *v1;
  __n128 v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
      double result = (uint64_t *)std::allocator<HGRef<PVRenderJob>>::destroy[abi:ne180100](v5, --v3);
    while (v3 != v4);
  }
  return result;
}

uint64_t std::allocator<HGRef<PVRenderJob>>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void std::vector<HGRef<PVRenderJob>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    __n128 v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<HGRef<PVRenderJob>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<HGRef<PVRenderJob>>::__push_back_slow_path<HGRef<PVRenderJob> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  float32x2_t v17 = &v10[8 * v9];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v11 = v16;
  }
  unint64_t v16 = v11 + 8;
  std::vector<HGRef<PVRenderJob>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<HGRef<PVRenderJob>>::~__split_buffer(v15);
  return v13;
}

void sub_1B74452FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<HGRef<PVRenderJob>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<HGRef<PVRenderJob>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v11 = *(void *)(v9 - 8);
      v9 -= 8;
      uint64_t v10 = v11;
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t v7 = *((void *)&v17 + 1);
      }
      v7 -= 8;
      *((void *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B7445450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(uint64_t **)(result[2] + 8);
  uint64_t v2 = *(uint64_t **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
      uint64_t result = (uint64_t *)std::allocator<HGRef<PVRenderJob>>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<HGRef<PVRenderJob>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<HGRef<PVRenderJob>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 8;
      uint64_t result = std::allocator<HGRef<PVRenderJob>>::destroy[abi:ne180100](v4, (uint64_t *)(v1 - 8));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HGRef<PVRenderJob> *,HGRef<PVRenderJob> *,HGRef<PVRenderJob> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v7 = *a4;
      uint64_t v8 = *v5;
      if (*a4 != *v5)
      {
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
          uint64_t v8 = *v5;
        }
        *a4 = v8;
        *uint64_t v5 = 0;
      }
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1B74456AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7445754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74457FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74458A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7445954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7445A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7445B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7445DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7445E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *pv_CGPoint_array_from_NSArray(void *a1)
{
  id v1 = a1;
  if ([v1 count])
  {
    uint64_t v2 = malloc_type_malloc(16 * [v1 count], 0x1000040451B5BE8uLL);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = *(void *)"";
    long long v4[2] = __pv_CGPoint_array_from_NSArray_block_invoke;
    v4[3] = &__block_descriptor_40_e24_v32__0__NSValue_8Q16_B24l;
    v4[4] = v2;
    [v1 enumerateObjectsUsingBlock:v4];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id pv_CGPoint_array_to_NSArray(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v2 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:4];
    uint64_t v5 = (double *)(a1 + 8);
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", *(v5 - 1), *v5);
      [v2 addObject:v7];

      v5 += 2;
      --v6;
    }
    while (v6);
  }

  return v2;
}

__n128 pv_CGPoint_polygon_centroid(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 count];
  if (v2)
  {
    unint64_t v3 = v2;
    uint64_t v4 = 0;
    float64x2_t v5 = 0uLL;
    unint64_t v6 = 1;
    __asm { FMOV            V0.2D, #3.0 }
    float64x2_t v23 = _Q0;
    float64x2_t v12 = 0uLL;
    do
    {
      float64x2_t v30 = v12;
      float64x2_t v31 = v5;
      uint64_t v13 = objc_msgSend(v1, "objectAtIndexedSubscript:", v4, *(_OWORD *)&v23);
      [v13 CGPointValue];
      long long v27 = v14;
      double v28 = v15;
      *(void *)&v16.f64[0] = v14;
      v16.f64[1] = v15;
      float64x2_t v29 = v16;

      long long v17 = [v1 objectAtIndexedSubscript:v6];
      [v17 CGPointValue];
      double v24 = v19;
      double v25 = v18;
      v20.f64[0] = v18;
      v20.f64[1] = v19;
      float64x2_t v26 = v20;

      v21.f64[1] = *((float64_t *)&v27 + 1);
      v21.f64[0] = *(double *)&v27 * v24 - v28 * v25;
      float64x2_t v5 = vaddq_f64(v31, vmulq_n_f64(vaddq_f64(v29, v26), v21.f64[0]));
      float64x2_t v12 = vaddq_f64(v30, vmulq_f64(v21, v23));
      ++v4;
      unint64_t v6 = (v6 + 1) % v3;
    }
    while (v3 != v4);
  }
  else
  {
    float64x2_t v5 = 0uLL;
    v12.f64[0] = 0.0;
  }
  float64x2_t v32 = vdivq_f64(v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12.f64[0], 0));

  return (__n128)v32;
}

float64x2_t *pv_CGPoint_scale_polygon(float64x2_t *result, unsigned int a2, CGPoint a3, float64x2_t *a4)
{
  if (a2)
  {
    uint64_t v4 = a2;
    float64x2_t v5 = 0uLL;
    unsigned int v6 = 1;
    __asm { FMOV            V4.2D, #3.0 }
    uint64_t v12 = a2;
    uint64_t v13 = result;
    float64x2_t v14 = 0uLL;
    do
    {
      float64x2_t v15 = *v13++;
      float64x2_t v16 = result[v6];
      float64x2_t v17 = vmulq_f64(v15, (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL));
      float64x2_t v18 = vsubq_f64(v17, (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1));
      float64x2_t v14 = vaddq_f64(v14, vmulq_f64(v18, _Q4));
      float64x2_t v5 = vaddq_f64(v5, vmulq_n_f64(vaddq_f64(v15, v16), v18.f64[0]));
      unsigned int v6 = (v6 + 1) % a2;
      --v12;
    }
    while (v12);
    *(void *)&v5.f64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    float64x2_t v19 = vdivq_f64(v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14.f64[0], 0));
    CGFloat y = a3.y;
    do
    {
      float64x2_t v21 = *result++;
      *a4++ = vaddq_f64(v19, vmulq_f64((float64x2_t)a3, vsubq_f64(v21, v19)));
      --v4;
    }
    while (v4);
  }
  return result;
}

id pv_CGPoint_scale_polygon(void *a1, float64_t a2, float64_t a3)
{
  id v3 = a1;
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  unint64_t v5 = pv_CGPoint_polygon_centroid(v3).n128_u64[0];
  float64_t v16 = v6;
  unint64_t v17 = v5;
  uint64_t v7 = [v3 count];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    *(void *)&v10.f64[0] = v17;
    v10.f64[1] = v16;
    float64x2_t v18 = v10;
    v10.f64[0] = a2;
    v10.f64[1] = a3;
    float64x2_t v20 = v10;
    do
    {
      uint64_t v11 = [v3 objectAtIndexedSubscript:v9];
      [v11 CGPointValue];
      v13.f64[1] = v12;
      float64x2_t v22 = v13;

      float64x2_t v14 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", vaddq_f64(v18, vmulq_f64(v20, vsubq_f64(v22, v18))));
      [v4 addObject:v14];

      ++v9;
    }
    while (v8 != v9);
  }

  return v4;
}

double pv_bounding_CGRect(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = (double *)&v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0x7FEFFFFFFFFFFFFFLL;
  v7[0] = 0;
  v7[1] = v7;
  int8x16_t v7[2] = 0x2020000000;
  v7[3] = 0xFFEFFFFFFFFFFFFFLL;
  v6[0] = 0;
  v6[1] = v6;
  int8x16_t v6[2] = 0x2020000000;
  v6[3] = 0xFFEFFFFFFFFFFFFFLL;
  v5[0] = 0;
  v5[1] = v5;
  void v5[2] = 0x2020000000;
  v5[3] = 0x7FEFFFFFFFFFFFFFLL;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = *(void *)"";
  long long v4[2] = ___Z18pv_bounding_CGRectP7NSArrayIP7NSValueE_block_invoke;
  v4[3] = &unk_1E61692F8;
  v4[4] = &v8;
  void v4[5] = v7;
  v4[6] = v6;
  v4[7] = v5;
  [v1 enumerateObjectsUsingBlock:v4];
  double v2 = v9[3];
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v8, 8);

  return v2;
}

void sub_1B74464C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z18pv_bounding_CGRectP7NSArrayIP7NSValueE_block_invoke(void *a1, void *a2)
{
  uint64_t result = [a2 CGPointValue];
  uint64_t v6 = *(void *)(a1[4] + 8);
  if (v4 < *(double *)(v6 + 24)) {
    *(double *)(v6 + 24) = v4;
  }
  uint64_t v7 = *(void *)(a1[5] + 8);
  if (v4 > *(double *)(v7 + 24)) {
    *(double *)(v7 + 24) = v4;
  }
  uint64_t v8 = *(void *)(a1[6] + 8);
  if (v5 > *(double *)(v8 + 24)) {
    *(double *)(v8 + 24) = v5;
  }
  uint64_t v9 = *(void *)(a1[7] + 8);
  if (v5 < *(double *)(v9 + 24)) {
    *(double *)(v9 + 24) = v5;
  }
  return result;
}

id pv_CGRect_to_NSArray(CGRect a1)
{
  v3[8] = *MEMORY[0x1E4F143B8];
  v3[0] = *(void *)&a1.origin.x;
  v3[1] = *(void *)&a1.origin.y;
  *(double *)&v3[2] = a1.origin.x + a1.size.width;
  _OWORD v3[3] = *(void *)&a1.origin.y;
  *(double *)&_OWORD v3[4] = a1.origin.x + a1.size.width;
  *(double *)&v3[5] = a1.origin.y + a1.size.height;
  v3[6] = *(void *)&a1.origin.x;
  *(double *)&v3[7] = a1.origin.y + a1.size.height;
  id v1 = pv_CGPoint_array_to_NSArray((uint64_t)v3, 4u);

  return v1;
}

uint64_t pv_is_CGPoint_in_polygon(void *a1, double a2, double a3)
{
  id v5 = a1;
  unsigned int v6 = [v5 count];
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    char v9 = 0;
    LODWORD(v1pthread_cond_init((pthread_cond_t *)this, 0) = v6 - 1;
    do
    {
      unsigned int v11 = v10;
      uint64_t v10 = v8;
      float64_t v12 = [v5 objectAtIndexedSubscript:v8];
      [v12 CGPointValue];
      double v14 = v13;
      double v16 = v15;

      unint64_t v17 = [v5 objectAtIndexedSubscript:v11];
      [v17 CGPointValue];
      double v19 = v18;
      double v21 = v20;

      BOOL v22 = v16 <= a3 && a3 < v21;
      if (v22 || (v21 <= a3 ? (BOOL v23 = a3 < v16) : (BOOL v23 = 0), v23))
      {
        if (a2 < v14 + (a3 - v16) * (v19 - v14) / (v21 - v16)) {
          v9 ^= 1u;
        }
      }
      uint64_t v8 = v10 + 1;
    }
    while (v7 != v10 + 1);
  }
  else
  {
    char v9 = 0;
  }

  return v9 & 1;
}

CGPath *pv_create_closed_CGPath_with_points(void *a1)
{
  id v1 = a1;
  Mutable = CGPathCreateMutable();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = *(void *)"";
  long long v4[2] = __pv_create_closed_CGPath_with_points_block_invoke;
  v4[3] = &__block_descriptor_40_e24_v32__0__NSValue_8Q16_B24l;
  v4[4] = Mutable;
  [v1 enumerateObjectsUsingBlock:v4];

  CGPathCloseSubpath(Mutable);
  return Mutable;
}

CGPathRef pv_create_expanded_closed_CGPath_with_CGPath(const CGPath *a1, CGFloat a2)
{
  return CGPathCreateCopyByStrokingPath(a1, 0, a2, kCGLineCapRound, kCGLineJoinRound, 0.0);
}

void sub_1B7446DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7446F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7447040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PVThermalMonitorPreviousLevel(int a1)
{
  return *((unsigned int *)PVThermalLevelEntry(a1) + 2);
}

uint64_t **PVThermalLevelEntry(int a1)
{
  int v7 = a1;
  {
    qword_1E9EE45E0 = 0;
    qword_1E9EE45D8 = 0;
    PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap = (uint64_t)&qword_1E9EE45D8;
    __cxa_atexit((void (*)(void *))std::map<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>::~map[abi:ne180100], &PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &dword_1B73F3000);
  }
  if (PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::onceToken != -1) {
    dispatch_once(&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::onceToken, &__block_literal_global_81);
  }
  uint64_t v1 = qword_1E9EE45D8;
  if (!qword_1E9EE45D8) {
    goto LABEL_14;
  }
  double v2 = &qword_1E9EE45D8;
  do
  {
    int v3 = *(_DWORD *)(v1 + 32);
    BOOL v4 = v3 < v7;
    if (v3 >= v7) {
      id v5 = (uint64_t *)v1;
    }
    else {
      id v5 = (uint64_t *)(v1 + 8);
    }
    if (!v4) {
      double v2 = (uint64_t *)v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  if (v2 == &qword_1E9EE45D8 || v7 < *((_DWORD *)v2 + 8)) {
LABEL_14:
  }
    int v7 = 99999;
  uint64_t v8 = &v7;
  return std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v7, (uint64_t)&std::piecewise_construct, &v8)+ 5;
}

uint64_t PVThermalMonitorNextLevel(int a1)
{
  return *((unsigned int *)PVThermalLevelEntry(a1) + 3);
}

uint64_t *PVThermalMonitorLevelName(int a1)
{
  uint64_t v1 = *PVThermalLevelEntry(a1);

  return v1;
}

void sub_1B7447A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1B7447CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7447DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7447F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7448068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_1B744836C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void ___ZL19PVThermalLevelEntry28PVSPI_OSThermalPressureLevel_block_invoke()
{
  int v14 = 0;
  double v15 = &v14;
  uint64_t v0 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  uint64_t v1 = v0[5];
  v0[5] = (uint64_t *)@"nominal";

  v0[6] = (uint64_t *)0xA00000000;
  int v14 = 10;
  double v15 = &v14;
  double v2 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  int v3 = v2[5];
  v2[5] = (uint64_t *)@"light";

  v2[6] = (uint64_t *)0x1400000000;
  int v14 = 20;
  double v15 = &v14;
  BOOL v4 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  id v5 = v4[5];
  void v4[5] = (uint64_t *)@"moderate";

  v4[6] = (uint64_t *)0x1E0000000ALL;
  int v14 = 30;
  double v15 = &v14;
  unsigned int v6 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  int v7 = v6[5];
  v6[5] = (uint64_t *)@"heavy";

  v6[6] = (uint64_t *)0x2800000014;
  int v14 = 40;
  double v15 = &v14;
  uint64_t v8 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  char v9 = v8[5];
  v8[5] = (uint64_t *)@"trapping";

  float64x2_t v8[6] = (uint64_t *)0x320000001ELL;
  int v14 = 50;
  double v15 = &v14;
  uint64_t v10 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  unsigned int v11 = v10[5];
  v10[5] = (uint64_t *)@"sleeping";

  v10[6] = (uint64_t *)0x3200000028;
  double v15 = &PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::kNotFoundMaxLevel;
  float64_t v12 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::kNotFoundMaxLevel, (uint64_t)&std::piecewise_construct, &v15);
  double v13 = v12[5];
  v12[5] = (uint64_t *)@"unknown";

  float64x2_t v12[6] = (uint64_t *)0x3200000000;
}

uint64_t **std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = a1 + 1;
LABEL_10:
    unsigned int v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1B7448810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7448874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVHGBitmapImageBufferImpl;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B7448A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t freeUnderlyingHGBitmap(void *a1, const void *a2)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t pv_buffer_size_for_string_representation(simd_float3x3 a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(simd_float3x3 a1, char *a2, size_t a3, uint64_t a4)
{
  simd_float3x3 v22 = a1;
  v7.n128_f64[0] = pv_simd_matrix_get_row(a1, 0);
  if (a2) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = 0;
  }
  int string_representation = pv_get_string_representation(a2, v8, a4, v7);
  int v10 = string_representation;
  uint64_t v11 = 0;
  for (int i = 1; i != 3; ++i)
  {
    uint64_t v13 = v11 + string_representation;
    if (a2) {
      int v14 = &a2[v13];
    }
    else {
      int v14 = 0;
    }
    if (a2) {
      size_t v15 = a3 - v13;
    }
    else {
      size_t v15 = 0;
    }
    int v16 = snprintf(v14, v15, ",\n", *(_OWORD *)v22.columns, *(_OWORD *)&v22.columns[1], *(_OWORD *)&v22.columns[2]);
    uint64_t v11 = v13 + v16;
    int v17 = v16 + v10;
    if (a2) {
      double v18 = &a2[v11];
    }
    else {
      double v18 = 0;
    }
    if (a2) {
      size_t v19 = a3 - v11;
    }
    else {
      size_t v19 = 0;
    }
    v20.n128_f64[0] = pv_simd_matrix_get_row(v22, i);
    int string_representation = pv_get_string_representation(v18, v19, a4, v20);
    int v10 = string_representation + v17;
  }
  return (string_representation + v17);
}

uint64_t pv_buffer_size_for_string_representation(_OWORD *a1, uint64_t a2, double a3, double a4, __n128 a5)
{
  long long v5 = a1[3];
  int8x16_t v9[2] = a1[2];
  void v9[3] = v5;
  long long v6 = a1[5];
  _OWORD v9[4] = a1[4];
  v9[5] = v6;
  long long v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  return pv_get_string_representation(v9, 0, 0, a2, *(double *)v9, *(double *)&v7, a5) + 1;
}

uint64_t pv_get_string_representation(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, __n128 a7)
{
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  while (1)
  {
    long long v14 = a1[3];
    v27[2] = a1[2];
    v27[3] = v14;
    long long v15 = a1[5];
    v27[4] = a1[4];
    v27[5] = v15;
    long long v16 = a1[1];
    v27[0] = *a1;
    v27[1] = v16;
    pv_simd_matrix_get_row((unint64_t *)v27, v11, v28, a7);
    int v17 = a2 ? (char *)(a2 + v13) : 0;
    size_t v18 = a2 ? a3 - v13 : 0;
    v26[0] = (int8x16_t)v28[0];
    v26[1] = (int8x16_t)v28[1];
    int string_representation = pv_get_string_representation(v26, v17, v18, a4);
    uint64_t v20 = (string_representation + v12);
    if (v11 == 2) {
      break;
    }
    uint64_t v21 = v13 + string_representation;
    if (a2) {
      simd_float3x3 v22 = (char *)(a2 + v21);
    }
    else {
      simd_float3x3 v22 = 0;
    }
    if (a2) {
      size_t v23 = a3 - v21;
    }
    else {
      size_t v23 = 0;
    }
    int v24 = snprintf(v22, v23, ",\n");
    int v12 = v24 + v20;
    uint64_t v13 = v21 + v24;
    ++v11;
  }
  return v20;
}

uint64_t pv_buffer_size_for_string_representation(simd_float4x4 a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(simd_float4x4 a1, char *a2, size_t a3, uint64_t a4)
{
  simd_float4x4 v22 = a1;
  v7.n128_f64[0] = pv_simd_matrix_get_row(a1, 0);
  if (a2) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = 0;
  }
  int string_representation = pv_get_string_representation(a2, v8, a4, v7);
  int v10 = string_representation;
  uint64_t v11 = 0;
  for (int i = 1; i != 4; ++i)
  {
    uint64_t v13 = v11 + string_representation;
    if (a2) {
      long long v14 = &a2[v13];
    }
    else {
      long long v14 = 0;
    }
    if (a2) {
      size_t v15 = a3 - v13;
    }
    else {
      size_t v15 = 0;
    }
    int v16 = snprintf(v14, v15, ",\n", *(_OWORD *)v22.columns, *(_OWORD *)&v22.columns[1], *(_OWORD *)&v22.columns[2], *(_OWORD *)&v22.columns[3]);
    uint64_t v11 = v13 + v16;
    int v17 = v16 + v10;
    if (a2) {
      size_t v18 = &a2[v11];
    }
    else {
      size_t v18 = 0;
    }
    if (a2) {
      size_t v19 = a3 - v11;
    }
    else {
      size_t v19 = 0;
    }
    v20.n128_f64[0] = pv_simd_matrix_get_row(v22, i);
    int string_representation = pv_get_string_representation(v18, v19, a4, v20);
    int v10 = string_representation + v17;
  }
  return (string_representation + v17);
}

uint64_t pv_buffer_size_for_string_representation(int64x2_t *a1, uint64_t a2)
{
  int64x2_t v2 = a1[5];
  void v7[4] = a1[4];
  v7[5] = v2;
  int64x2_t v3 = a1[7];
  v7[6] = a1[6];
  v7[7] = v3;
  int64x2_t v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  int64x2_t v5 = a1[3];
  int8x16_t v7[2] = a1[2];
  v7[3] = v5;
  return pv_get_string_representation(v7, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    int64x2_t v11 = a1[5];
    v25[4] = a1[4];
    v25[5] = v11;
    int64x2_t v12 = a1[7];
    v25[6] = a1[6];
    v25[7] = v12;
    int64x2_t v13 = a1[1];
    v25[0] = *a1;
    v25[1] = v13;
    int64x2_t v14 = a1[3];
    _OWORD v25[2] = a1[2];
    v25[3] = v14;
    pv_simd_matrix_get_row(v25, v8, v26);
    size_t v15 = a2 ? (char *)(a2 + v10) : 0;
    size_t v16 = a2 ? a3 - v10 : 0;
    v24[0] = (__int128)v26[0];
    v24[1] = (__int128)v26[1];
    int string_representation = pv_get_string_representation(v24, v15, v16, a4);
    uint64_t v18 = (string_representation + v9);
    if (v8 == 3) {
      break;
    }
    uint64_t v19 = v10 + string_representation;
    if (a2) {
      __n128 v20 = (char *)(a2 + v19);
    }
    else {
      __n128 v20 = 0;
    }
    if (a2) {
      size_t v21 = a3 - v19;
    }
    else {
      size_t v21 = 0;
    }
    int v22 = snprintf(v20, v21, ",\n");
    int v9 = v22 + v18;
    uint64_t v10 = v19 + v22;
    ++v8;
  }
  return v18;
}

void sub_1B744915C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B744926C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVEffectScheduler;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B744955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v11 - 240));
  _Unwind_Resume(a1);
}

void sub_1B744973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7449BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t LoadableInstruction::LoadInstructionGraphNodes(uint64_t result, uint64_t *a2)
{
  if (!*(unsigned char *)(result + 12))
  {
    *(unsigned char *)(result + 12) = 1;
    uint64_t v2 = *(void **)(result + 16);
    uint64_t v3 = *a2;
    uint64_t v4 = v3;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    [v2 loadInstructionGraphNodes:&v4];
    uint64_t result = v4;
    if (v4) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
  }
  return result;
}

void sub_1B7449D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL LoadableInstruction::ShouldLoadForTime(LoadableInstruction *this, CMTime *a2, CMTime *a3, int a4)
{
  if (*((unsigned char *)this + 12)) {
    return 0;
  }
  char v5 = a4;
  uint64_t v9 = 28;
  if (a4) {
    uint64_t v9 = 76;
  }
  uint64_t v10 = (long long *)((char *)this + v9);
  long long v11 = v10[1];
  long long v33 = *v10;
  long long v34 = v11;
  long long v35 = v10[2];
  *(_OWORD *)&range.start.CMTimeValue value = v33;
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v11;
  *(_OWORD *)&range.duration.uint64_t timescale = v35;
  CMTime time = *a2;
  int v12 = CMTimeRangeContainsTime(&range, &time);
  BOOL result = v12 != 0;
  if (!v12 && (v5 & 1) == 0)
  {
    if (!*((unsigned char *)this + 24))
    {
      memset(&v30, 0, sizeof(v30));
      BOOL v13 = +[PVDeviceCharacteristics isLowMemDevice];
      double v14 = 0.9;
      if (!v13) {
        double v14 = 3.0;
      }
      CMTimeMakeWithSeconds(&v30, v14, 30);
      memset(&v29, 0, sizeof(v29));
      CMTime lhs = *a2;
      CMTime rhs = v30;
      CMTimeAdd(&v29, &lhs, &rhs);
      CMTime time1 = v29;
      CMTime time2 = *a3;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        memset(&v24, 0, sizeof(v24));
        CMTime v23 = v30;
        CMTime v21 = *a3;
        CMTime v20 = *a2;
        CMTimeSubtract(&v22, &v21, &v20);
        CMTimeSubtract(&v24, &v23, &v22);
        memset(&v19, 0, sizeof(v19));
        CMTimeMakeWithSeconds(&start, -3.0, a2->timescale);
        CMTime duration = v24;
        CMTimeRangeMake(&v19, &start, &duration);
        CMTimeRange v16 = v19;
        *(_OWORD *)&v15.CMTimeValue value = v33;
        v15.CMTimeEpoch epoch = v34;
        return CMTimeRangeContainsTime(&v16, &v15) != 0;
      }
    }
    return 0;
  }
  return result;
}

BOOL LoadableInstruction::ShouldReleaseForTime(LoadableInstruction *this, CMTime *a2, CMTime *a3)
{
  if (!*((unsigned char *)this + 12)) {
    return 0;
  }
  long long v6 = *(_OWORD *)((char *)this + 140);
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)((char *)this + 124);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v6;
  *(_OWORD *)&range.duration.uint64_t timescale = *(_OWORD *)((char *)this + 156);
  CMTime time = *a2;
  if (CMTimeRangeContainsTime(&range, &time)) {
    return 0;
  }
  memset(&v18, 0, sizeof(v18));
  BOOL v8 = +[PVDeviceCharacteristics isLowMemDevice];
  double v9 = 0.9;
  if (!v8) {
    double v9 = 3.0;
  }
  CMTimeMakeWithSeconds(&v18, v9, 30);
  memset(&v17, 0, sizeof(v17));
  CMTime lhs = *a2;
  CMTime rhs = v18;
  CMTimeAdd(&v17, &lhs, &rhs);
  CMTime time1 = v17;
  CMTime time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0) {
    return 1;
  }
  long long v10 = *(_OWORD *)((char *)this + 140);
  *(_OWORD *)&v12.start.CMTimeValue value = *(_OWORD *)((char *)this + 124);
  *(_OWORD *)&v12.start.CMTimeEpoch epoch = v10;
  *(_OWORD *)&v12.duration.uint64_t timescale = *(_OWORD *)((char *)this + 156);
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  return CMTimeRangeContainsTime(&v12, &v11) == 0;
}

uint64_t *std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__emplace_unique_key_args<HGRef<LoadableInstruction>,HGRef<LoadableInstruction> const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  char v5 = (uint64_t **)std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__find_equal<HGRef<LoadableInstruction>>((uint64_t)a1, &v10, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    __n128 v7 = v5;
    std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__construct_node<HGRef<LoadableInstruction> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    long long v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<HGRef<LoadableInstruction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<HGRef<LoadableInstruction>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__find_equal<HGRef<LoadableInstruction>>(uint64_t a1, void *a2, uint64_t *a3)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        __n128 v7 = v4;
        if (!LoadableInstruction::operator<(*a3, v4[4])) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        char v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!LoadableInstruction::operator<(v7[4], *a3)) {
        break;
      }
      char v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    __n128 v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__construct_node<HGRef<LoadableInstruction> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x28uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = *a2;
  void v6[4] = *a2;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B744A600(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<HGRef<LoadableInstruction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<HGRef<LoadableInstruction>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

BOOL LoadableInstruction::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    [v3 timeRange];
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
  }
  *(_OWORD *)&time1.CMTimeValue value = v8;
  time1.CMTimeEpoch epoch = v9;
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4) {
    [v4 timeRange];
  }
  else {
    memset(&v6, 0, sizeof(v6));
  }
  CMTime time2 = v6;
  return CMTimeCompare(&time1, &time2) == -1;
}

void std::unique_ptr<std::__tree_node<HGRef<LoadableInstruction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<HGRef<LoadableInstruction>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<HGRef<LoadableInstruction>,0>(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<HGRef<LoadableInstruction>,0>(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::destroy(a1, *a2);
    std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<HGRef<LoadableInstruction>,0>(a2 + 4);
    operator delete(a2);
  }
}

void LoadableInstruction::LoadableInstruction(LoadableInstruction *this, PVVideoCompositionInstruction *a2, int a3)
{
  uint64_t v5 = a2;
  HGObject::HGObject(this);
  *(void *)this = &unk_1F1089188;
  *((unsigned char *)this + 12) = 0;
  CMTime v6 = v5;
  *((void *)this + 2) = v6;
  *((unsigned char *)this + 24) = a3;
  if (+[PVDeviceCharacteristics actualMemory] > 0x40000000)
  {
    CMTimeMakeWithSeconds(&v50.start, 3.0, 30);
    CMTime v53 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 1.0, 30);
    CMTime v52 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 3.1, 30);
  }
  else
  {
    CMTimeMakeWithSeconds(&v50.start, 0.9, 30);
    CMTime v53 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 0.5, 30);
    CMTime v52 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 1.0, 30);
  }
  CMTime v51 = v50.start;
  if (v6)
  {
    [(PVVideoCompositionInstruction *)v6 timeRange];
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v45 = 0u;
  }
  *(_OWORD *)&lhs.CMTimeValue value = v45;
  lhs.CMTimeEpoch epoch = v46;
  CMTime rhs = v52;
  CMTimeSubtract(&start, &lhs, &rhs);
  if (v6)
  {
    [(PVVideoCompositionInstruction *)v6 timeRange];
  }
  else
  {
    memset(v40, 0, sizeof(v40));
    long long v39 = 0u;
  }
  CMTime v41 = *(CMTime *)((char *)v40 + 8);
  CMTime v38 = v52;
  CMTimeAdd(&v42, &v41, &v38);
  CMTime v37 = v52;
  CMTimeAdd(&duration, &v42, &v37);
  CMTimeRangeMake(&v50, &start, &duration);
  long long v7 = *(_OWORD *)&v50.start.epoch;
  *(_OWORD *)((char *)this + 76) = *(_OWORD *)&v50.start.value;
  *(_OWORD *)((char *)this + 92) = v7;
  *(_OWORD *)((char *)this + 108) = *(_OWORD *)&v50.duration.timescale;
  if (a3)
  {
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
    }
    *(_OWORD *)&v35.CMTimeValue value = v45;
    v35.CMTimeEpoch epoch = v46;
    CMTimeMakeWithSeconds(&v34, 0.9, 30);
    CMTimeSubtract(&v36, &v35, &v34);
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      long long v39 = 0u;
    }
    CMTime v32 = *(CMTime *)((char *)v40 + 8);
    CMTimeMakeWithSeconds(&v31, 0.9, 30);
    CMTimeAdd(&v33, &v32, &v31);
    CMTimeRangeMake(&v50, &v36, &v33);
    long long v9 = *(_OWORD *)&v50.start.epoch;
    *(_OWORD *)((char *)this + 28) = *(_OWORD *)&v50.start.value;
    *(_OWORD *)((char *)this + 44) = v9;
    *(_OWORD *)((char *)this + 6pthread_cond_init((pthread_cond_t *)this, 0) = *(_OWORD *)&v50.duration.timescale;
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
    }
    *(_OWORD *)&v29.CMTimeValue value = v45;
    v29.CMTimeEpoch epoch = v46;
    CMTimeMakeWithSeconds(&v28, 1.0, 30);
    CMTimeSubtract(&v30, &v29, &v28);
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      long long v39 = 0u;
    }
    CMTime v26 = *(CMTime *)((char *)v40 + 8);
    CMTimeMakeWithSeconds(&v25, 1.0, 30);
    CMTimeAdd(&v27, &v26, &v25);
    CMTimeRangeMake(&v50, &v30, &v27);
  }
  else
  {
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
    }
    *(_OWORD *)&v23.CMTimeValue value = v45;
    v23.CMTimeEpoch epoch = v46;
    CMTime v22 = v53;
    CMTimeSubtract(&v24, &v23, &v22);
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      long long v39 = 0u;
    }
    CMTime v20 = *(CMTime *)((char *)v40 + 8);
    CMTime v19 = v53;
    CMTimeAdd(&v21, &v20, &v19);
    CMTimeRangeMake(&v50, &v24, &v21);
    long long v8 = *(_OWORD *)&v50.start.epoch;
    *(_OWORD *)((char *)this + 28) = *(_OWORD *)&v50.start.value;
    *(_OWORD *)((char *)this + 44) = v8;
    *(_OWORD *)((char *)this + 6pthread_cond_init((pthread_cond_t *)this, 0) = *(_OWORD *)&v50.duration.timescale;
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
    }
    *(_OWORD *)&v17.CMTimeValue value = v45;
    v17.CMTimeEpoch epoch = v46;
    CMTime v16 = v51;
    CMTimeSubtract(&v18, &v17, &v16);
    if (v6)
    {
      [(PVVideoCompositionInstruction *)v6 timeRange];
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      long long v39 = 0u;
    }
    CMTime v13 = *(CMTime *)((char *)v40 + 8);
    CMTime v12 = v51;
    CMTimeAdd(&v14, &v13, &v12);
    CMTime v11 = v51;
    CMTimeAdd(&v15, &v14, &v11);
    CMTimeRangeMake(&v50, &v18, &v15);
  }
  long long v10 = *(_OWORD *)&v50.start.epoch;
  *(_OWORD *)((char *)this + 124) = *(_OWORD *)&v50.start.value;
  *(_OWORD *)((char *)this + 14pthread_cond_init((pthread_cond_t *)this, 0) = v10;
  *(_OWORD *)((char *)this + 156) = *(_OWORD *)&v50.duration.timescale;
}

void sub_1B744AD20(_Unwind_Exception *a1)
{
  HGObject::~HGObject((HGObject *)v1);
  _Unwind_Resume(a1);
}

void LoadableInstruction::~LoadableInstruction(id *this)
{
  HGObject::~HGObject((HGObject *)this);
}

{
  void *v2;
  uint64_t vars8;

  HGObject::~HGObject((HGObject *)this);

  HGObject::operator delete(v2);
}

void pv_simd_make_quatf_with_eulers(float32x4_t a1)
{
}

void pv_simd_make_quatd_with_eulers(float64x2_t *a1@<X0>, int a2@<W1>, float64x2_t *a3@<X8>)
{
  float64x2_t v61 = *a1;
  __double2 v7 = __sincos_stret(0.5 * a1->f64[0]);
  v6.f64[0] = v7.__sinval;
  float64x2_t v59 = v6;
  __double2 v9 = __sincos_stret(vmuld_lane_f64(0.5, v61, 1));
  v8.f64[0] = v9.__sinval;
  float64x2_t v60 = v8;
  __double2 v10 = __sincos_stret(a1[1].f64[0] * 0.5);
  *a3 = 0u;
  a3[1] = 0u;
  *(void *)&double v11 = *(_OWORD *)&vmulq_f64(v59, (float64x2_t)0);
  int8x16_t v12 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_1B7E733D0, v59.f64[0]);
  *(void *)&double v13 = vextq_s8(v12, v12, 8uLL).u64[0];
  *(double *)v14.i64 = v11;
  v14.i64[1] = *(void *)&v7.__cosval;
  *(void *)&double v15 = *(_OWORD *)&vmulq_f64(v60, (float64x2_t)0);
  int8x16_t v16 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_1B7E733E0, v60.f64[0]);
  *(void *)&double v17 = vextq_s8(v16, v16, 8uLL).u64[0];
  *(double *)v18.i64 = v15;
  v18.i64[1] = *(void *)&v9.__cosval;
  int8x16_t v19 = (int8x16_t)vmulq_n_f64((float64x2_t)0, v10.__sinval);
  *(void *)&double v20 = vextq_s8(v19, v19, 8uLL).u64[0];
  switch(a2)
  {
    case 0:
      int8x16_t v21 = (int8x16_t)vnegq_f64((float64x2_t)v19);
      float64x2_t v22 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)vnegq_f64((float64x2_t)v10), 8uLL);
      float64x2_t v23 = vmulq_n_f64((float64x2_t)v10, v17);
      float64x2_t v24 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v21, v17), (float64x2_t)vextq_s8(v19, v21, 8uLL), *(double *)v16.i64);
      int8x16_t v25 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v23, v22, *(double *)v16.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v19, (float64x2_t)v18, 1), (float64x2_t)vextq_s8(v21, v19, 8uLL), v15));
      int8x16_t v26 = (int8x16_t)vaddq_f64(v24, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v10, (float64x2_t)v18, 1), v22, v15));
      goto LABEL_4;
    case 1:
      int8x16_t v27 = (int8x16_t)vnegq_f64((float64x2_t)v16);
      float64x2_t v28 = (float64x2_t)vextq_s8(v18, (int8x16_t)vnegq_f64((float64x2_t)v18), 8uLL);
      int8x16_t v25 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v18, v20), v28, *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v16, (float64x2_t)v10, 1), (float64x2_t)vextq_s8(v27, v16, 8uLL), v10.__sinval));
      int8x16_t v26 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v27, v20), (float64x2_t)vextq_s8(v16, v27, 8uLL), *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v18, (float64x2_t)v10, 1), v28, v10.__sinval));
LABEL_4:
      int8x16_t v29 = (int8x16_t)vnegq_f64((float64x2_t)v25);
      float64x2_t v30 = (float64x2_t)vextq_s8(v26, (int8x16_t)vnegq_f64((float64x2_t)v26), 8uLL);
      float64x2_t v31 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v26, v13), v30, *(double *)v12.i64);
      float64x2_t v32 = vmulq_laneq_f64((float64x2_t)v26, (float64x2_t)v14, 1);
      float64x2_t v33 = vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v25, (float64x2_t)v14, 1), (float64x2_t)vextq_s8(v29, v25, 8uLL), v11);
      float64x2_t v34 = vaddq_f64(vmlaq_n_f64(v32, v30, v11), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v29, v13), (float64x2_t)vextq_s8(v25, v29, 8uLL), *(double *)v12.i64));
      float64x2_t v35 = vaddq_f64(v33, v31);
      goto LABEL_11;
    case 2:
      int8x16_t v36 = (int8x16_t)vnegq_f64((float64x2_t)v19);
      float64x2_t v37 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)vnegq_f64((float64x2_t)v10), 8uLL);
      float64x2_t v38 = vmulq_n_f64((float64x2_t)v10, v13);
      float64x2_t v39 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v36, v13), (float64x2_t)vextq_s8(v19, v36, 8uLL), *(double *)v12.i64);
      int8x16_t v40 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v38, v37, *(double *)v12.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v19, (float64x2_t)v14, 1), (float64x2_t)vextq_s8(v36, v19, 8uLL), v11));
      int8x16_t v41 = (int8x16_t)vaddq_f64(v39, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v10, (float64x2_t)v14, 1), v37, v11));
      goto LABEL_7;
    case 3:
      int8x16_t v42 = (int8x16_t)vnegq_f64((float64x2_t)v12);
      float64x2_t v43 = (float64x2_t)vextq_s8(v14, (int8x16_t)vnegq_f64((float64x2_t)v14), 8uLL);
      int8x16_t v40 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v14, v20), v43, *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v12, (float64x2_t)v10, 1), (float64x2_t)vextq_s8(v42, v12, 8uLL), v10.__sinval));
      int8x16_t v41 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v42, v20), (float64x2_t)vextq_s8(v12, v42, 8uLL), *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v14, (float64x2_t)v10, 1), v43, v10.__sinval));
LABEL_7:
      int8x16_t v44 = (int8x16_t)vnegq_f64((float64x2_t)v40);
      float64x2_t v45 = (float64x2_t)vextq_s8(v41, (int8x16_t)vnegq_f64((float64x2_t)v41), 8uLL);
      float64x2_t v46 = vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v40, (float64x2_t)v18, 1), (float64x2_t)vextq_s8(v44, v40, 8uLL), v15);
      float64x2_t v34 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v41, (float64x2_t)v18, 1), v45, v15), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v44, v17), (float64x2_t)vextq_s8(v40, v44, 8uLL), *(double *)v16.i64));
      float64x2_t v35 = vaddq_f64(v46, vmlaq_n_f64(vmulq_n_f64((float64x2_t)v41, v17), v45, *(double *)v16.i64));
      goto LABEL_11;
    case 4:
      int8x16_t v47 = (int8x16_t)vnegq_f64((float64x2_t)v16);
      float64x2_t v48 = (float64x2_t)vextq_s8(v18, (int8x16_t)vnegq_f64((float64x2_t)v18), 8uLL);
      float64x2_t v49 = vmulq_n_f64((float64x2_t)v18, v13);
      float64x2_t v50 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v47, v13), (float64x2_t)vextq_s8(v16, v47, 8uLL), *(double *)v12.i64);
      int8x16_t v51 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v49, v48, *(double *)v12.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v16, (float64x2_t)v14, 1), (float64x2_t)vextq_s8(v47, v16, 8uLL), v11));
      int8x16_t v52 = (int8x16_t)vaddq_f64(v50, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v18, (float64x2_t)v14, 1), v48, v11));
      goto LABEL_10;
    case 5:
      int8x16_t v53 = (int8x16_t)vnegq_f64((float64x2_t)v12);
      float64x2_t v54 = (float64x2_t)vextq_s8(v14, (int8x16_t)vnegq_f64((float64x2_t)v14), 8uLL);
      float64x2_t v55 = vmulq_n_f64((float64x2_t)v14, v17);
      float64x2_t v56 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v53, v17), (float64x2_t)vextq_s8(v12, v53, 8uLL), *(double *)v16.i64);
      int8x16_t v51 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v55, v54, *(double *)v16.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v12, (float64x2_t)v18, 1), (float64x2_t)vextq_s8(v53, v12, 8uLL), v15));
      int8x16_t v52 = (int8x16_t)vaddq_f64(v56, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v14, (float64x2_t)v18, 1), v54, v15));
LABEL_10:
      int8x16_t v57 = (int8x16_t)vnegq_f64((float64x2_t)v51);
      float64x2_t v58 = (float64x2_t)vextq_s8(v52, (int8x16_t)vnegq_f64((float64x2_t)v52), 8uLL);
      float64x2_t v34 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v52, (float64x2_t)v10, 1), v58, v10.__sinval), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v57, v20), (float64x2_t)vextq_s8(v51, v57, 8uLL), *(double *)v19.i64));
      float64x2_t v35 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v51, (float64x2_t)v10, 1), (float64x2_t)vextq_s8(v57, v51, 8uLL), v10.__sinval), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v52, v20), v58, *(double *)v19.i64));
LABEL_11:
      *a3 = v35;
      a3[1] = v34;
      break;
    default:
      return;
  }
}

void sub_1B744B50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744B76C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  uint64_t v4 = *(void *)(v2 - 80);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(void *)(v2 - 72);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  _Unwind_Resume(a1);
}

void sub_1B744B8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744B914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744B988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CachedImageInfo::CachedImageInfo(CachedImageInfo *this)
{
  this->cacheCGPoint d = 0;
  this->std::string::size_type size = (CGSize)*MEMORY[0x1E4F1DB30];
  this->imageExists = 0;
  this->_source = 0;
  operator new();
}

void sub_1B744BA08(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10A1C40BBCAB520);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void CachedImageInfo::~CachedImageInfo(CachedImageInfo *this)
{
  locdouble k = this->_lock;
  if (lock) {
    (*((void (**)(HGSynchronizable *))lock->var0 + 1))(lock);
  }
  objc_destroyWeak((id *)&this->_source);
}

void CachedImageInfo::SetSourceNode(CachedImageInfo *this, PVInstructionGraphImageSourceNode *a2)
{
  uint64_t v3 = a2;
  locdouble k = this->_lock;
  char v5 = 0;
  HGSynchronizable::Lock(lock);
  objc_storeWeak((id *)&this->_source, v3);
  HGSynchronizer::~HGSynchronizer(&lock);
}

void sub_1B744BAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CachedImageInfo::Init(CachedImageInfo *this)
{
  locdouble k = this->_lock;
  char v11 = 0;
  uint64_t v2 = HGSynchronizable::Lock(lock);
  if (!this->cached)
  {
    uint64_t v3 = (void *)MEMORY[0x1BA9C0A20](v2);
    CGSize v9 = (CGSize)*MEMORY[0x1E4F1DB30];
    WeakRetaineCGPoint d = objc_loadWeakRetained((id *)&this->_source);
    char v5 = [WeakRetained imageDelegate];
    id v6 = objc_loadWeakRetained((id *)&this->_source);
    __double2 v7 = [v6 url];
    id v8 = objc_loadWeakRetained((id *)&this->_source);
    this->imageExists = objc_msgSend(v5, "isImageValid:renderingIntent:size:", v7, objc_msgSend(v8, "renderingIntent"), &v9);

    if (this->imageExists) {
      this->std::string::size_type size = v9;
    }
    this->cacheCGPoint d = 1;
  }
  HGSynchronizer::~HGSynchronizer(&lock);
}

void sub_1B744BC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void CachedImageInfo::Init(CachedImageInfo *this, BOOL a2, CGSize a3)
{
  CGFloat height = a3.height;
  CGFloat width = a3.width;
  locdouble k = this->_lock;
  char v8 = 0;
  HGSynchronizable::Lock(lock);
  if (!this->cached)
  {
    this->imageExists = a2;
    this->size.CGFloat width = width;
    this->size.CGFloat height = height;
    this->cacheCGPoint d = 1;
  }
  HGSynchronizer::~HGSynchronizer(&lock);
}

void sub_1B744BDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744BFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744C080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  __double2 v10 = v9;

  a9.super_class = (Class)PVInputBitmapCache;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B744C34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744C420(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B744C574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744C6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B744CA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B744CE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B744D2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744D5C4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B744D758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744D97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B744DC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1B744F83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&STACK[0x448]);
  _Unwind_Resume(a1);
}

void sub_1B7450154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74503B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74504E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7450688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::vector<HGRef<HGBitmap>>::__init_with_size[abi:ne180100]<HGRef<HGBitmap>*,HGRef<HGBitmap>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1B7450904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  char v11 = a4;
  int8x16_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  int8x16_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    id v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      *uint64_t v4 = *v6;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        uint64_t v4 = v12;
      }
      ++v6;
      int8x16_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B74509D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t **)result[1];
  uint64_t v1 = (uint64_t **)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
      uint64_t result = (uint64_t *)std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100](v5, --v3);
    while (v3 != v4);
  }
  return result;
}

uint64_t std::vector<HGRef<HGBitmap>>::__assign_with_size[abi:ne180100]<HGRef<HGBitmap>*,HGRef<HGBitmap>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    std::vector<HGRef<HGBitmap>>::__vdeallocate((uint64_t **)a1);
    if (a4 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<double>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3;
  if (v14 < a4)
  {
    double v15 = &a2[v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HGRef<HGBitmap> *,HGRef<HGBitmap> *,HGRef<HGBitmap> *>((uint64_t)&v19, a2, v15, v9);
    uint64_t result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>(v8, v15, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HGRef<HGBitmap> *,HGRef<HGBitmap> *,HGRef<HGBitmap> *>((uint64_t)&v20, a2, a3, v9);
  double v17 = v16;
  uint64_t v18 = *(uint64_t **)(a1 + 8);
  if (v18 != v16)
  {
    do
      uint64_t result = std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100](v8, --v18);
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_1B7450BBC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B7450BC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<HGRef<HGBitmap>>::__vdeallocate(uint64_t **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
        std::allocator<HGRef<HGBitmap>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), --v3);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HGRef<HGBitmap> *,HGRef<HGBitmap> *,HGRef<HGBitmap> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v7 = *a4;
      uint64_t v8 = *v5;
      if (*a4 != *v5)
      {
        if (v7)
        {
          (*(void (**)(void))(*(void *)v7 + 24))(*a4);
          uint64_t v8 = *v5;
        }
        *a4 = v8;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
        }
      }
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1B7450DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7450E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7450FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74511A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7451298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7451414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1B74514FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1B74531F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (STACK[0x520]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x520] + 24))(STACK[0x520]);
  }
  if (STACK[0x5B8]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x5B8] + 24))(STACK[0x5B8]);
  }

  if (*v59) {
    (*(void (**)(void))(*(void *)*v59 + 24))(*v59);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&STACK[0x7F0]);
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::GetFrameDataPixelBuffer(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v13 = a2;
  uint64_t v7 = *(void **)(a1 + 80);
  id v6 = (void *)(a1 + 80);
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= (unint64_t)v13;
    if (v9 >= (unint64_t)v13) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = v5 + 1;
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 != v6 && v8[4] <= (unint64_t)v13)
  {
    uint64_t v12 = v8[5];
    *a3 = v12;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    }
  }
  else
  {
LABEL_12:
    HGCVBitmap::create(0, 1, 0, a3);
  }
}

void sub_1B74539B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::GetInputSize(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)(a1 + 32);
  id v6 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  unint64_t v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    _CF = v10 >= (unint64_t)v5;
    if (v10 >= (unint64_t)v5) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (_CF) {
      unint64_t v9 = v6;
    }
    id v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 != v7 && v9[4] <= (unint64_t)v5)
  {
    long long v17 = *(_OWORD *)(v9 + 7);
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 5);
    *(_OWORD *)(a3 + 16) = v17;
  }
  else
  {
LABEL_12:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a3 + 16) = _Q0;
  }
}

void coloredDotHGNode(double a1, double a2, double a3, double a4)
{
  HGRectMakeWithCGRect(*(CGRect *)&a1);
  uint64_t v4 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
  HGSolidColor::HGSolidColor(v4);
}

void sub_1B7453BB8(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B7453CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7453E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7453FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74541E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74544F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B745490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1B7455134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 24))(a19);
  }

  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  uint64_t v25 = *(void *)(v23 - 72);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }

  if (*v19) {
    (*(void (**)(void))(*(void *)*v19 + 24))(*v19);
  }
  _Unwind_Resume(a1);
}

void sub_1B74555DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7455760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7455874(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74559A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7455BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1B7455D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t PVNumbersAreEqualAsBooleans(void *a1, void *a2)
{
  id v3 = a2;
  LODWORD(aHGRenderQueue::CancelAllRenderJobs(*this, 1) = [a1 BOOLValue];
  int v4 = [v3 BOOLValue];

  return a1 ^ v4 ^ 1;
}

BOOL PVNumbersAreEqualAsDoubles(void *a1, void *a2)
{
  id v3 = a2;
  [a1 doubleValue];
  double v5 = v4;
  [v3 doubleValue];
  double v7 = v6;

  return vabdd_f64(v5, v7) < 0.0001;
}

BOOL PVNumbersAreEqualAsIntegers(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1 integerValue];
  uint64_t v5 = [v3 integerValue];

  return v4 == v5;
}

BOOL PVValuesAreEqualAsCGSizes(void *a1, void *a2)
{
  id v3 = a2;
  [a1 CGSizeValue];
  double v5 = v4;
  double v7 = v6;
  [v3 CGSizeValue];
  double v9 = v8;
  double v11 = v10;

  return v7 == v11 && v5 == v9;
}

void sub_1B7456054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B745616C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7456270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B7456318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCVPixelBufferImageBufferImpl;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B745656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 24))(a17);
  }

  _Unwind_Resume(a1);
}

void sub_1B7456778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }

  _Unwind_Resume(a1);
}

CGFloat CGAffineTransformFromPVAnimInfo@<D0>(CGFloat *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1DAB8];
  long long v5 = *MEMORY[0x1E4F1DAB8];
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a2 + 16) = v6;
  long long v7 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)&v16.CGPoint a = v5;
  *(_OWORD *)&v16.CGPoint c = v6;
  *(_OWORD *)&v16.tCGFloat x = v7;
  CGAffineTransformTranslate((CGAffineTransform *)a2, &v16, a1[3], a1[4]);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v14.CGPoint a = *(_OWORD *)a2;
  *(_OWORD *)&v14.CGPoint c = v8;
  *(_OWORD *)&v14.tCGFloat x = *(_OWORD *)(a2 + 32);
  CGAffineTransformScale(&v15, &v14, a1[5], a1[5]);
  long long v9 = *(_OWORD *)&v15.c;
  *(_OWORD *)a2 = *(_OWORD *)&v15.a;
  *(_OWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v15.tx;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v13.CGPoint a = *(_OWORD *)a2;
  *(_OWORD *)&v13.CGPoint c = v10;
  *(_OWORD *)&v13.tCGFloat x = *(_OWORD *)(a2 + 32);
  CGAffineTransformRotate(&v15, &v13, a1[6] * 3.14159265 / 180.0);
  long long v11 = *(_OWORD *)&v15.c;
  *(_OWORD *)a2 = *(_OWORD *)&v15.a;
  *(_OWORD *)(a2 + 16) = v11;
  CGFloat result = v15.tx;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v15.tx;
  return result;
}

CGFloat CGAffineTransformFromPointWithPVAnimInfo@<D0>(PVTransformAnimationInfo *a1@<X0>, CGPoint a2@<0:D0, 8:D1>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)&a1->time.epoch;
  *(_OWORD *)&v6.time.CMTimeValue value = *(_OWORD *)&a1->time.value;
  *(_OWORD *)&v6.time.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v6.translation.CGFloat y = *(_OWORD *)&a1->translation.y;
  v6.rotatiodouble n = a1->rotation;
  double v4 = 1.0;
  *(void *)&long long v3 = 1.0;
  return CGAffineTransformFromPointWithPVAnimInfo(&v6, a2, *(CGSize *)((char *)&v3 - 8), a3);
}

CGFloat CGAffineTransformFromPointWithPVAnimInfo@<D0>(PVTransformAnimationInfo *a1@<X0>, CGPoint a2@<0:D0, 8:D1>, CGSize a3@<0:D2, 8:D3>, uint64_t a4@<X8>)
{
  double height = a3.height;
  double width = a3.width;
  double y = a2.y;
  double x = a2.x;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  CGAffineTransformMakeTranslation((CGAffineTransform *)a4, -a2.x, -a2.y);
  long long v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&t1.CGPoint a = *(_OWORD *)a4;
  *(_OWORD *)&t1.CGPoint c = v10;
  *(_OWORD *)&t1.tdouble x = *(_OWORD *)(a4 + 32);
  CGAffineTransformMakeRotation(&t2, a1->rotation * 3.14159265 / 180.0);
  CGAffineTransformConcat(&v23, &t1, &t2);
  long long v11 = *(_OWORD *)&v23.c;
  *(_OWORD *)a4 = *(_OWORD *)&v23.a;
  *(_OWORD *)(a4 + 16) = v11;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v23.tx;
  long long v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v20.CGPoint a = *(_OWORD *)a4;
  *(_OWORD *)&v20.CGPoint c = v12;
  *(_OWORD *)&v20.tdouble x = *(_OWORD *)(a4 + 32);
  CGAffineTransformMakeScale(&v19, a1->scale, a1->scale);
  CGAffineTransformConcat(&v23, &v20, &v19);
  long long v13 = *(_OWORD *)&v23.c;
  *(_OWORD *)a4 = *(_OWORD *)&v23.a;
  *(_OWORD *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v23.tx;
  long long v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v18.CGPoint a = *(_OWORD *)a4;
  *(_OWORD *)&v18.CGPoint c = v14;
  *(_OWORD *)&v18.tdouble x = *(_OWORD *)(a4 + 32);
  CGAffineTransformMakeTranslation(&v17, x + width * a1->translation.x, y + height * a1->translation.y);
  CGAffineTransformConcat(&v23, &v18, &v17);
  long long v15 = *(_OWORD *)&v23.c;
  *(_OWORD *)a4 = *(_OWORD *)&v23.a;
  *(_OWORD *)(a4 + 16) = v15;
  CGFloat result = v23.tx;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v23.tx;
  return result;
}

double PVTransformAnimationInfoIdentity@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v2;
  double result = 1.0;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E733D0;
  return result;
}

BOOL PVTransformAnimationInfoIsIdentity(double *a1)
{
  BOOL result = 0;
  double v3 = a1[3];
  if (v3 > -0.0000001 && v3 < 0.0000001)
  {
    BOOL result = 0;
    double v4 = a1[4];
    if (v4 > -0.0000001 && v4 < 0.0000001)
    {
      if (fabs(a1[5] + -1.0) >= 0.0001)
      {
        return 0;
      }
      else
      {
        double v5 = a1[6];
        return v5 < 0.0000001 && v5 > -0.0000001;
      }
    }
  }
  return result;
}

void PVTransformAnimationInfoForLiveCapture(uint64_t a1@<X8>, CGFloat a2@<D2>, CGFloat a3@<D3>, CGFloat a4@<D4>, CGFloat a5@<D5>, double a6@<D6>)
{
  uint64_t v12 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  uint64_t v13 = *(void *)(v12 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E733D0;
  v18.origin.double x = a2;
  v18.origin.double y = a3;
  v18.size.double width = a4;
  v18.size.double height = a5;
  double v14 = -CGRectGetMinX(v18);
  *(double *)(a1 + 24) = v14;
  v19.origin.double x = a2;
  v19.origin.double y = a3;
  v19.size.double width = a4;
  v19.size.double height = a5;
  double v15 = -CGRectGetMinY(v19);
  *(double *)(a1 + 32) = v15;
  v20.origin.double x = a2;
  v20.origin.double y = a3;
  v20.size.double width = a4;
  v20.size.double height = a5;
  double Width = CGRectGetWidth(v20);
  if ((int)Width != (int)a6)
  {
    double v17 = a6 / Width;
    *(double *)(a1 + 24) = v17 * v14;
    *(double *)(a1 + 32) = v17 * v15;
    *(double *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = v17;
  }
}

float64x2_t PVTransformAnimationInfoForPlayback@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, float64_t a8@<D6>, float64_t a9@<D7>)
{
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  uint64_t v15 = *(void *)(v14 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E733D0;
  if (a2 > a3) {
    double v16 = a2;
  }
  else {
    double v16 = a3;
  }
  float64_t v39 = v16;
  if (a2 > a3) {
    double v17 = a9 / a3;
  }
  else {
    double v17 = a8 / a2;
  }
  v43.origin.double x = a4;
  v43.origin.double y = a5;
  v43.size.double width = a6;
  v43.size.double height = a7;
  double v37 = a8 / CGRectGetWidth(v43);
  *(double *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = v37 / v17;
  CGAffineTransformMakeScale(&v42, v37, v37);
  if (a2 >= a3) {
    double v18 = a3;
  }
  else {
    double v18 = a2;
  }
  float64_t v38 = v18;
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v34 = vmulq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v42.a, a2), vmulq_n_f64(*(float64x2_t *)&v42.c, a3)), _Q1);
  float64x2_t v36 = _Q1;
  CGFloat v24 = a4;
  _Q1.f64[0] = a5;
  CGFloat v25 = a6;
  CGFloat v26 = a7;
  CGFloat MinX = CGRectGetMinX(*(CGRect *)((char *)&_Q1 - 8));
  v44.origin.double x = a4;
  v44.origin.double y = a5;
  v44.size.double width = a6;
  v44.size.double height = a7;
  CGFloat MinY = CGRectGetMinY(v44);
  v28.f64[0] = MinX;
  v28.f64[1] = MinY;
  v29.f64[0] = v39;
  v29.f64[1] = v38;
  v30.f64[0] = a8;
  v30.f64[1] = a9;
  float64x2_t result = vdivq_f64(vsubq_f64(vsubq_f64(vsubq_f64(v34, vmulq_n_f64(v28, v37)), vmulq_f64(v29, v36)), vmulq_f64(vsubq_f64(v30, v29), v36)), v30);
  *(float64x2_t *)(a1 + 24) = result;
  return result;
}

uint64_t pv_buffer_size_for_string_representation(PVTransformAnimationInfo *a1, int a2)
{
  long long v2 = *(_OWORD *)&a1->time.epoch;
  *(_OWORD *)&v4.time.CMTimeValue value = *(_OWORD *)&a1->time.value;
  *(_OWORD *)&v4.time.CMTimeEpoch epoch = v2;
  *(_OWORD *)&v4.translation.double y = *(_OWORD *)&a1->translation.y;
  v4.rotatiodouble n = a1->rotation;
  return pv_get_string_representation(&v4, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(PVTransformAnimationInfo *a1, char *a2, size_t a3, int a4)
{
  long long v8 = (void *)MEMORY[0x1BA9C0A20]();
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = (CMTime)a1->time;
  long long v10 = (id) CMTimeCopyDescription(v9, &time);
  uint64_t v11 = snprintf(a2, a3, "time: %s\ntranslation:\n    x: %.*f\n    y: %.*f\nscale: %.*f\nrotation: %.*f° (%.*f)", (const char *)[(__CFString *)v10 UTF8String], a4, a1->translation.x, a4, a1->translation.y, a4, a1->scale, a4, a1->rotation, a4, a1->rotation * 3.14159265 / 180.0);

  return v11;
}

void sub_1B7456F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSStringFromPVTransformAnimationInfo(uint64_t a1, int a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v12.time.CMTimeValue value = *(_OWORD *)a1;
  *(_OWORD *)&v12.time.CMTimeEpoch epoch = v4;
  *(_OWORD *)&v12.translation.double y = *(_OWORD *)(a1 + 32);
  v12.rotatiodouble n = *(double *)(a1 + 48);
  int string_representation = pv_get_string_representation(&v12, 0, 0, a2);
  PVTransformAnimationInfo v6 = (char *)malloc_type_calloc(string_representation + 1, 1uLL, 0x100004077774924uLL);
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v11.time.CMTimeValue value = *(_OWORD *)a1;
  *(_OWORD *)&v11.time.CMTimeEpoch epoch = v7;
  *(_OWORD *)&v11.translation.double y = *(_OWORD *)(a1 + 32);
  v11.rotatiodouble n = *(double *)(a1 + 48);
  unsigned int v8 = pv_get_string_representation(&v11, v6, string_representation + 1, a2);
  CFAllocatorRef v9 = 0;
  if ((v8 & 0x80000000) != 0
    || (int)v8 > string_representation
    || (CFAllocatorRef v9 = (void *)[[NSString alloc] initWithBytesNoCopy:v6 length:v8 encoding:4 freeWhenDone:1]) == 0)
  {
    free(v6);
  }

  return v9;
}

void sub_1B74576F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74578C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7457994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7457A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7457FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B7458288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74583DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745851C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74585F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74586D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74588B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74589B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7458A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7458D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7458FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7459178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1B74591FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7459400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74595EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7459780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B745986C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7459AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7459C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OZChannelDouble::OZChannelDouble(OZChannelDouble *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelDouble_FactoryBase = (OZFactory *)getOZChannelDouble_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelDouble_FactoryBase, a2, a3, a4, a5, a6, a7);
  *(void *)this = &unk_1F1100CF0;
  *((void *)this + 2) = &unk_1F1101050;
  OZChannelDoubleInfo = (OZChannelDouble *)OZChannelDouble::createOZChannelDoubleInfo(v15);
  if (a7)
  {
    uint64_t v17 = *((void *)this + 17);
  }
  else
  {
    uint64_t v17 = OZChannelDouble::_OZChannelDoubleInfo;
    *((void *)this + 17) = OZChannelDouble::_OZChannelDoubleInfo;
  }
  *((void *)this + 16) = v17;
  OZChannelDouble::createOZChannelDoubleImpl(OZChannelDoubleInfo);
  if (a6)
  {
    uint64_t v18 = *((void *)this + 15);
  }
  else
  {
    uint64_t v18 = OZChannelDouble::_OZChannelDoubleImpl;
    *((void *)this + 15) = OZChannelDouble::_OZChannelDoubleImpl;
  }
  *((void *)this + 14) = v18;
}

void sub_1B7459DB8(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelDouble::createOZChannelDoubleInfo(OZChannelDouble *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelDouble::createOZChannelDoubleInfo(void)::_OZChannelDoubleInfo_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZChannelDouble::createOZChannelDoubleInfo(void)::_OZChannelDoubleInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelDouble::createOZChannelDoubleInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelDouble::_OZChannelDoubleInfo;
}

uint64_t OZChannelDouble::createOZChannelDoubleImpl(OZChannelDouble *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelDouble::createOZChannelDoubleImpl(void)::_OZChannelDoubleImpl_once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZChannelDouble::createOZChannelDoubleImpl(void)::_OZChannelDoubleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelDouble::createOZChannelDoubleImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelDouble::_OZChannelDoubleImpl;
}

void std::__call_once_param<std::tuple<OZChannelDouble::createOZChannelDoubleInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelDouble::_OZChannelDoubleInfo) {
    operator new();
  }
}

void sub_1B7459EF8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelDoubleInfo::OZChannelDoubleInfo(OZChannelDoubleInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F1089258;
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = &unk_1F1089278;
}

void sub_1B7459FAC(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleInfo::~OZChannelDoubleInfo(OZChannelDoubleInfo *this)
{
  PCSingleton::~PCSingleton((OZChannelDoubleInfo *)((char *)this + 80));

  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
}

{
  uint64_t vars8;

  PCSingleton::~PCSingleton((OZChannelDoubleInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelDoubleInfo::~OZChannelDoubleInfo(OZChannelDoubleInfo *this)
{
  uint64_t v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);

  OZChannelInfo::~OZChannelInfo(v1);
}

{
  OZChannelInfo *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelDouble::createOZChannelDoubleImpl(void)::{lambda(void)#1} &&>>()
{
}

void OZChannelDouble::createOZChannelDoubleImpl(void)::{lambda(void)#1}::operator()()
{
  if (!OZChannelDouble::_OZChannelDoubleImpl) {
    operator new();
  }
}

void sub_1B745A1B0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelDoubleImpl::~OZChannelDoubleImpl(OZChannelDoubleImpl *this)
{
  PCSingleton::~PCSingleton((OZChannelDoubleImpl *)((char *)this + 40));

  OZChannelImpl::~OZChannelImpl((OZChannelImpl *)this);
}

{
  uint64_t vars8;

  PCSingleton::~PCSingleton((OZChannelDoubleImpl *)((char *)this + 40));
  OZChannelImpl::~OZChannelImpl((OZChannelImpl *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelDoubleImpl::~OZChannelDoubleImpl(OZChannelDoubleImpl *this)
{
  uint64_t v1 = (OZChannelImpl *)((char *)this - 40);
  PCSingleton::~PCSingleton(this);

  OZChannelImpl::~OZChannelImpl(v1);
}

{
  OZChannelImpl *v1;
  uint64_t vars8;

  uint64_t v1 = (OZChannelImpl *)((char *)this - 40);
  PCSingleton::~PCSingleton(this);
  OZChannelImpl::~OZChannelImpl(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZCurveDouble::OZCurveDouble(OZCurveDouble *this, double a2)
{
}

void sub_1B745A390(_Unwind_Exception *a1)
{
  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveDoubleSplineState::getInstance(OZCurveDoubleSplineState *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCurveDoubleSplineState::_instanceOnce, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZCurveDoubleSplineState::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveDoubleSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveDoubleSplineState::_instance;
}

void OZCurveDouble::~OZCurveDouble(OZCurve *this)
{
  OZCurve::~OZCurve(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PCSerializer::readSignificantWhiteSpace(PCSerializer *this)
{
  return 0;
}

void OZCurveDouble::getCurveWorkingCopy(OZCurveDouble *this)
{
}

void sub_1B745A4C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void OZCurveDouble::cloneCurve(OZCurveDouble *this)
{
}

void sub_1B745A54C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::supportsAssignmentOperator(OZCurve *this)
{
  return 1;
}

uint64_t OZCurve::isCurveBoolean(OZCurve *this)
{
  return 0;
}

void std::__call_once_param<std::tuple<OZCurveDoubleSplineState::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B745A5F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C401D9FA3FDLL);
  _Unwind_Resume(a1);
}

void OZCurveDoubleSplineState::~OZCurveDoubleSplineState(OZCurveDoubleSplineState *this)
{
  PCSingleton::~PCSingleton(this);

  JUMPOUT(0x1BA9BFBA0);
}

void sub_1B745A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  PVTransformAnimationInfo v12 = v11;

  for (uint64_t i = 40; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

uint64_t pv_buffer_size_for_string_representation(simd_quatd a1, long long *a2, uint64_t a3)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return pv_buffer_size_for_string_representation(v5, a3);
}

uint64_t pv_get_string_representation(simd_quatd a1, char *a2, char *a3, size_t a4, uint64_t a5)
{
  long long v5 = *((_OWORD *)a2 + 1);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return pv_get_string_representation(v7, a3, a4, a5);
}

void sub_1B745AF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745B048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745B120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745B1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B745BD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HGObject::operator delete(v20);
  (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  if (*v17) {
    (*(void (**)(void))(*(void *)*v17 + 24))(*v17);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a17);
  _Unwind_Resume(a1);
}

void sub_1B745C194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745C1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745C2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B745C40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B745C7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
  }

  _Unwind_Resume(a1);
}

void sub_1B745C998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745CA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745CABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B745D61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::SetNode(uint64_t **a1, void *a2, uint64_t *a3)
{
  id v8 = a2;
  CFAllocatorRef v9 = &v8;
  long long v5 = std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(a1, (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
  uint64_t v6 = v5[5];
  uint64_t v7 = *a3;
  if (v6 != *a3)
  {
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      uint64_t v7 = *a3;
    }
    v5[5] = v7;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
  }
}

void sub_1B745DB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::SetFrameDataPixelBuffer(uint64_t a1, void *a2, uint64_t *a3)
{
  id v8 = a2;
  CFAllocatorRef v9 = &v8;
  long long v5 = std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 72), (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
  uint64_t v6 = v5[5];
  uint64_t v7 = *a3;
  if (v6 != *a3)
  {
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      uint64_t v7 = *a3;
    }
    v5[5] = v7;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
  }
}

void sub_1B745DC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__n128 PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::SetInputSize(uint64_t a1, void *a2, long long *a3)
{
  id v8 = a2;
  CFAllocatorRef v9 = &v8;
  long long v5 = std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
  long long v6 = *a3;
  *(_OWORD *)(v5 + 7) = a3[1];
  *(_OWORD *)(v5 + 5) = v6;

  return result;
}

void sub_1B745DCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B745E7A0(_Unwind_Exception *a1)
{
  *(void *)(v5 + 8) = v1;

  uint64_t v8 = *(void *)(v6 - 136);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  uint64_t v9 = *(void *)(v6 - 128);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  _Unwind_Resume(a1);
}

void sub_1B745EC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745EDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B745EE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::~PVInputHGNodeMap(void **a1)
{
  return a1;
}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGCVBitmap>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGCVBitmap>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  long long v3 = *(void **)a1;
}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGNode>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGNode>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  long long v3 = *(void **)a1;
}

uint64_t *std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    PVTransformAnimationInfo v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    v12[4] = (uint64_t)**a4;
    v12[5] = 0;
    char v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGNode>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    PVTransformAnimationInfo v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    v12[4] = (uint64_t)**a4;
    v12[5] = 0;
    char v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGCVBitmap>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (char *)operator new(0x48uLL);
    id v12 = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 4) = v12;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 56) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1B745F610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B745F708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B745F804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B745F8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVFrameStatsDescription::GetStringForLabels(void *a1@<X8>, int a2@<W1>)
{
  if (a2 == 1)
  {
    PVFrameStatsDescription::GetStringForLabelsJSON(a1);
  }
  else
  {
    if (a2) {
      uint64_t v2 = "";
    }
    else {
      uint64_t v2 = " Num |  FrameTime | Playback | RendPasses | WaitToBuildGraph | SetupInputs | BuildGraph | WaitToRender | Setu"
    }
           "pDest | DeferredBitmaps | ShaderCompile | RenderTime | FinishReq | TotalTime | TimeSinceLastStart | fTimeDiff |";
    std::string::basic_string[abi:ne180100]<0>(a1, v2);
  }
}

void PVFrameStatsDescription::GetStringForLabelsJSON(void *a1@<X8>)
{
  long long v3 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"Num", @"FrameTime", @"Playback", @"RendPasses", @"WaitToBuildGraph", @"SetupInputs", @"BuildGraph", @"WaitToRender", @"SetupDest", @"DeferredBitmaps", @"ShaderCompile", @"RenderTime", @"FinishReq", @"TotalTime", @"TimeSinceLastStart", @"fTimeDiff", 0);
  id v7 = 0;
  long long v4 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v3 options:4 error:&v7];
  id v5 = v7;
  if (v4)
  {
    id v6 = (id) [[NSString alloc] initWithData:v4 encoding:4];
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v6 UTF8String]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1B745FBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVFrameStatsDescription::GetStringForStats(PVPerfStats::FrameStats *a1@<X2>, PVPerfStats::FrameStats *a2@<X3>, PVFrameStatsDescription *a3@<X0>, int a4@<W1>, void *a5@<X8>)
{
  if (a4 == 2)
  {
    PVFrameStatsDescription::GetStringForStatsPMR(a3, a1, a1);
  }
  else if (a4 == 1)
  {
    PVFrameStatsDescription::GetStringForStatsJSON(a3, a1, a2);
  }
  else if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(a5, "");
  }
  else
  {
    PVFrameStatsDescription::GetStringForStatsTEXT(a3, a1, a2);
  }
}

uint64_t PVFrameStatsDescription::GetStringForStatsTEXT(PVFrameStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v42);
  uint64_t v5 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v5 - 24)) = 4;
  *(void *)((char *)&v43[2] + *(void *)(v5 - 24)) = 0;
  id v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" | ", 3);
  uint64_t v7 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v7 - 24)) = 10;
  *(void *)((char *)&v43[2] + *(void *)(v7 - 24)) = 3;
  CMTime time = *(CMTime *)((char *)a2 + 8);
  CMTimeGetSeconds(&time);
  unint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" | ", 3);
  uint64_t v9 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v9 - 24)) = 8;
  *(void *)((char *)&v43[2] + *(void *)(v9 - 24)) = 0;
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" | ", 3);
  uint64_t v11 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v11 - 24)) = 10;
  *(void *)((char *)&v43[2] + *(void *)(v11 - 24)) = 0;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 0xAu);
  id v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" | ", 3);
  uint64_t v13 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v13 - 24)) = 16;
  *(void *)((char *)&v43[2] + *(void *)(v13 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 0);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" | ", 3);
  uint64_t v15 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v15 - 24)) = 11;
  *(void *)((char *)&v43[2] + *(void *)(v15 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 1u);
  double v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" | ", 3);
  uint64_t v17 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v17 - 24)) = 10;
  *(void *)((char *)&v43[2] + *(void *)(v17 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 2u);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" | ", 3);
  uint64_t v19 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v19 - 24)) = 12;
  *(void *)((char *)&v43[2] + *(void *)(v19 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 3u);
  CGRect v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" | ", 3);
  uint64_t v21 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v21 - 24)) = 9;
  *(void *)((char *)&v43[2] + *(void *)(v21 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 4u);
  float64x2_t v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" | ", 3);
  uint64_t v23 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v23 - 24)) = 15;
  *(void *)((char *)&v43[2] + *(void *)(v23 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 5u);
  CGFloat v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" | ", 3);
  uint64_t v25 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v25 - 24)) = 13;
  *(void *)((char *)&v43[2] + *(void *)(v25 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 6u);
  uint64_t v26 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" | ", 3);
  uint64_t v27 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v27 - 24)) = 10;
  *(void *)((char *)&v43[2] + *(void *)(v27 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 7u);
  float64x2_t v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" | ", 3);
  uint64_t v29 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v29 - 24)) = 9;
  *(void *)((char *)&v43[2] + *(void *)(v29 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 8u);
  float64x2_t v30 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" | ", 3);
  uint64_t v31 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(void *)(v43[0] - 24)) = *(_DWORD *)((unsigned char *)&v43[1] + *(void *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v43[3] + *(void *)(v31 - 24)) = 9;
  *(void *)((char *)&v43[2] + *(void *)(v31 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 9u);
  float64x2_t v32 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" | ", 3);
  if (a3)
  {
    CMTime v40 = *(CMTime *)((char *)a2 + 8);
    CMTimeGetSeconds(&v40);
    CMTime v39 = *(CMTime *)((char *)a3 + 8);
    CMTimeGetSeconds(&v39);
  }
  uint64_t v33 = v43[0];
  *(void *)((char *)&v43[3] + *(void *)(v43[0] - 24)) = 18;
  *(void *)((char *)&v43[2] + *(void *)(v33 - 24)) = 3;
  float64x2_t v34 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" | ", 3);
  uint64_t v35 = v43[0];
  *(void *)((char *)&v43[3] + *(void *)(v43[0] - 24)) = 9;
  *(void *)((char *)&v43[2] + *(void *)(v35 - 24)) = 0;
  float64x2_t v36 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" |", 2);
  std::stringbuf::str();
  v42[0] = *MEMORY[0x1E4FBA408];
  uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v42 + *(void *)(v42[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v43[0] = v37;
  v43[1] = MEMORY[0x1E4FBA470] + 16;
  if (v44 < 0) {
    operator delete((void *)v43[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BA9BFAB0](&v45);
}

void sub_1B7460760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PVFrameStatsDescription::GetStringForStatsJSON(PVFrameStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v91);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"[", 1);
  uint64_t v5 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v5 - 24)) = 0;
  id v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  uint64_t v7 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v7 - 24)) = 3;
  CMTime time = *(CMTime *)((char *)a2 + 8);
  double Seconds = CMTimeGetSeconds(&time);
  formatValue(Seconds, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v12 - 24)) = 0;
  double v13 = 0.0;
  if (*((unsigned char *)a2 + 56)) {
    double v13 = 1.0;
  }
  formatValue(v13, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &__p;
  }
  else {
    uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v17 - 24)) = 0;
  ValueForIndedouble x = PVPerfStats::FrameStats::GetValueForIndex(a2, 0xAu);
  formatValue((double)(int)ValueForIndex, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &__p;
  }
  else {
    uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v22 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v22 - 24)) = 3;
  double v23 = PVPerfStats::FrameStats::GetValueForIndex(a2, 0);
  formatValue(v23 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CGFloat v24 = &__p;
  }
  else {
    CGFloat v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v24, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v27 - 24)) = 3;
  double v28 = PVPerfStats::FrameStats::GetValueForIndex(a2, 1u);
  formatValue(v28 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &__p;
  }
  else {
    uint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v29, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v32 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v32 - 24)) = 3;
  double v33 = PVPerfStats::FrameStats::GetValueForIndex(a2, 2u);
  formatValue(v33 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float64x2_t v34 = &__p;
  }
  else {
    float64x2_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
  }
  float64x2_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v34, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v37 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v37 - 24)) = 3;
  double v38 = PVPerfStats::FrameStats::GetValueForIndex(a2, 3u);
  formatValue(v38 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CMTime v39 = &__p;
  }
  else {
    CMTime v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
  }
  int8x16_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v39, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v42 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v42 - 24)) = 3;
  double v43 = PVPerfStats::FrameStats::GetValueForIndex(a2, 4u);
  formatValue(v43 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v44 = &__p;
  }
  else {
    char v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
  }
  float64x2_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v44, v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v47 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v47 - 24)) = 3;
  double v48 = PVPerfStats::FrameStats::GetValueForIndex(a2, 5u);
  formatValue(v48 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float64x2_t v49 = &__p;
  }
  else {
    float64x2_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v50 = __p.__r_.__value_.__l.__size_;
  }
  int8x16_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v49, v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v52 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v52 - 24)) = 3;
  double v53 = PVPerfStats::FrameStats::GetValueForIndex(a2, 6u);
  formatValue(v53 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float64x2_t v54 = &__p;
  }
  else {
    float64x2_t v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v55 = __p.__r_.__value_.__l.__size_;
  }
  float64x2_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v54, v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v57 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v57 - 24)) = 3;
  double v58 = PVPerfStats::FrameStats::GetValueForIndex(a2, 7u);
  formatValue(v58 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float64x2_t v59 = &__p;
  }
  else {
    float64x2_t v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v60 = __p.__r_.__value_.__l.__size_;
  }
  float64x2_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v59, v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v62 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v62 - 24)) = 3;
  double v63 = PVPerfStats::FrameStats::GetValueForIndex(a2, 8u);
  formatValue(v63 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float64x2_t v64 = &__p;
  }
  else {
    float64x2_t v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v65 = __p.__r_.__value_.__l.__size_;
  }
  int64x2_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v64, v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v67 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(void *)(v92[0] - 24)) = *(_DWORD *)((unsigned char *)&v92[1] + *(void *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v92[2] + *(void *)(v67 - 24)) = 3;
  double v68 = PVPerfStats::FrameStats::GetValueForIndex(a2, 9u);
  formatValue(v68 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v69 = &__p;
  }
  else {
    long long v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v70 = __p.__r_.__value_.__l.__size_;
  }
  int8x16_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v69, v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a3) {
      goto LABEL_107;
    }
  }
  else if (a3)
  {
LABEL_107:
    double v72 = *((double *)a2 + 4);
    double v73 = *((double *)a3 + 4);
    CMTime v88 = *(CMTime *)((char *)a2 + 8);
    double v74 = CMTimeGetSeconds(&v88);
    CMTime v87 = *(CMTime *)((char *)a3 + 8);
    Float64 v75 = CMTimeGetSeconds(&v87);
    float v76 = (v72 - v73) * 1000.0;
    float v77 = v74 - v75;
    double v78 = v76;
    double v79 = v77;
    goto LABEL_110;
  }
  double v78 = 0.0;
  double v79 = 0.0;
LABEL_110:
  *(void *)((char *)&v92[2] + *(void *)(v92[0] - 24)) = 3;
  formatValue(v78, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v80 = &__p;
  }
  else {
    double v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v81 = __p.__r_.__value_.__l.__size_;
  }
  double v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v80, v81);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)((char *)&v92[2] + *(void *)(v92[0] - 24)) = 3;
  formatValue(v79, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v83 = &__p;
  }
  else {
    double v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v84 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v83, v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"]", 1);
  std::stringbuf::str();
  v91[0] = *MEMORY[0x1E4FBA408];
  uint64_t v85 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v91 + *(void *)(v91[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v92[0] = v85;
  v92[1] = MEMORY[0x1E4FBA470] + 16;
  if (v93 < 0) {
    operator delete((void *)v92[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BA9BFAB0](&v94);
}

void sub_1B74614E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void PVFrameStatsDescription::GetStringForStatsPMR(PVFrameStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v32[2] = xmmword_1E6169518;
  v32[3] = *(_OWORD *)&off_1E6169528;
  v32[4] = xmmword_1E6169538;
  double v33 = @"Frame Time Delta";
  v32[0] = xmmword_1E61694F8;
  v32[1] = *(_OWORD *)&off_1E6169508;
  v30[2] = xmmword_1E6169570;
  v30[3] = *(_OWORD *)&off_1E6169580;
  v30[4] = xmmword_1E6169590;
  uint64_t v31 = @"Difference in elapsed time between current and previous frame";
  v30[0] = xmmword_1E6169550;
  v30[1] = *(_OWORD *)&off_1E6169560;
  id v25 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v25 setDateFormat:@"yyyy-MM-dd 'at' HH:mm:ss"];
  long long v4 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v5 = [v25 stringFromDate:v4];

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
  for (uint64_t i = 0; i != 11; ++i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"<Measurement ", 13);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"key=\"", 5);
    unint64_t v8 = (const char *)[*((id *)v32 + i) UTF8String];
    size_t v9 = strlen(v8);
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"value=\"", 7);
    PVPerfStats::FrameStats::GetValueForIndex(a2, i);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\" ", 2);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"comment=\"", 9);
    double v13 = (const char *)[*((id *)v30 + i) UTF8String];
    size_t v14 = strlen(v13);
    std::string::size_type v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" for frame ", 11);
    double v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" ", 2);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"timestamp=\"", 11);
    id v18 = v5;
    uint64_t v19 = (const char *)[v18 UTF8String];
    size_t v20 = strlen(v19);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"/>\n", 4);
  }
  std::stringbuf::str();
  v26[0] = *MEMORY[0x1E4FBA408];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v26 + *(void *)(v26[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v27[0] = v22;
  v27[1] = MEMORY[0x1E4FBA470] + 16;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9BFAB0](&v29);

  for (uint64_t j = 80; j != -8; j -= 8)
  for (uint64_t k = 80; k != -8; k -= 8)
}

void sub_1B7461990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a12);

  for (uint64_t i = 80; i != -8; i -= 8)
  for (uint64_t j = 80; j != -8; j -= 8)

  _Unwind_Resume(a1);
}

std::string *formatValue@<X0>(double __val@<D0>, std::string *retstr@<X8>)
{
  return std::to_string(retstr, __val);
}

void PVLivePlayerStatsDescription::GetStringForLabels(void *a1@<X8>, int a2@<W1>)
{
  if (a2 == 1)
  {
    PVLivePlayerStatsDescription::GetStringForLabelsJSON(a1);
  }
  else
  {
    if (a2) {
      uint64_t v2 = "";
    }
    else {
      uint64_t v2 = " Num | Get Sources | Build Render Request | Run Render Request | Complete Render Request | Total Time";
    }
    std::string::basic_string[abi:ne180100]<0>(a1, v2);
  }
}

void PVLivePlayerStatsDescription::GetStringForLabelsJSON(void *a1@<X8>)
{
  long long v3 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"Num", @"Get Sources", @"Build Render Request", @"Run Render Request", @"Complete Render Request", @"Total Time", 0);
  id v7 = 0;
  long long v4 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v3 options:4 error:&v7];
  id v5 = v7;
  if (v4)
  {
    id v6 = (id) [[NSString alloc] initWithData:v4 encoding:4];
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v6 UTF8String]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1B7461B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVLivePlayerStatsDescription::GetStringForStats(PVPerfStats::FrameStats *a1@<X2>, PVLivePlayerStatsDescription *a2@<X0>, int a3@<W1>, void *a4@<X8>)
{
  if (a3 == 2)
  {
    PVLivePlayerStatsDescription::GetStringForStatsPMR(a2, a1, a1);
  }
  else if (a3 == 1)
  {
    PVLivePlayerStatsDescription::GetStringForStatsJSON(a2, a1, a1);
  }
  else if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
  else
  {
    PVLivePlayerStatsDescription::GetStringForStatsTEXT(a2, a1, a1);
  }
}

uint64_t PVLivePlayerStatsDescription::GetStringForStatsTEXT(PVLivePlayerStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  uint64_t v4 = v18[0];
  *(void *)((char *)&v18[3] + *(void *)(v18[0] - 24)) = 4;
  *(void *)((char *)&v18[2] + *(void *)(v4 - 24)) = 0;
  id v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" | ", 3);
  uint64_t v6 = v18[0];
  *(void *)((char *)&v18[3] + *(void *)(v18[0] - 24)) = 11;
  *(void *)((char *)&v18[2] + *(void *)(v6 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 0);
  id v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" | ", 3);
  uint64_t v8 = v18[0];
  *(void *)((char *)&v18[3] + *(void *)(v18[0] - 24)) = 20;
  *(void *)((char *)&v18[2] + *(void *)(v8 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 1u);
  size_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" | ", 3);
  uint64_t v10 = v18[0];
  *(void *)((char *)&v18[3] + *(void *)(v18[0] - 24)) = 18;
  *(void *)((char *)&v18[2] + *(void *)(v10 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 2u);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" | ", 3);
  uint64_t v12 = v18[0];
  *(void *)((char *)&v18[3] + *(void *)(v18[0] - 24)) = 23;
  *(void *)((char *)&v18[2] + *(void *)(v12 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 3u);
  double v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" | ", 3);
  uint64_t v14 = v18[0];
  *(void *)((char *)&v18[3] + *(void *)(v18[0] - 24)) = 10;
  *(void *)((char *)&v18[2] + *(void *)(v14 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 4u);
  std::ostream::operator<<();
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v15;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BA9BFAB0](&v20);
}

void sub_1B7462050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PVLivePlayerStatsDescription::GetStringForStatsJSON(PVLivePlayerStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"[", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  for (unsigned int i = 0; i != 10; ++i)
  {
    ValueForIndedouble x = PVPerfStats::FrameStats::GetValueForIndex(a2, i);
    formatValue(ValueForIndex * 1000.0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  double v10 = PVPerfStats::FrameStats::GetValueForIndex(a2, 0xAu);
  formatValue(v10 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &__p;
  }
  else {
    uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
  }
  double v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BA9BFAB0](&v20);
}

void sub_1B74622F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void PVLivePlayerStatsDescription::GetStringForStatsPMR(PVLivePlayerStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v32[0] = xmmword_1E61695A8;
  v32[1] = *(_OWORD *)&off_1E61695B8;
  double v33 = @"Total time";
  v30[0] = xmmword_1E61695D0;
  v30[1] = *(_OWORD *)off_1E61695E0;
  uint64_t v31 = @"Total elapsed time";
  id v25 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v25 setDateFormat:@"yyyy-MM-dd 'at' HH:mm:ss"];
  uint64_t v4 = [MEMORY[0x1E4F1C9C8] date];
  id v5 = [v25 stringFromDate:v4];

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
  for (uint64_t i = 0; i != 11; ++i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"<Measurement ", 13);
    id v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"key=\"", 5);
    uint64_t v8 = (const char *)[*((id *)v32 + i) UTF8String];
    size_t v9 = strlen(v8);
    double v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"value=\"", 7);
    PVPerfStats::FrameStats::GetValueForIndex(a2, i);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\" ", 2);
    std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"comment=\"", 9);
    double v13 = (const char *)[*((id *)v30 + i) UTF8String];
    size_t v14 = strlen(v13);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" for frame ", 11);
    double v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" ", 2);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"timestamp=\"", 11);
    id v18 = v5;
    char v19 = (const char *)[v18 UTF8String];
    size_t v20 = strlen(v19);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"/>\n", 4);
  }
  std::stringbuf::str();
  v26[0] = *MEMORY[0x1E4FBA408];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v26 + *(void *)(v26[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v27[0] = v22;
  v27[1] = MEMORY[0x1E4FBA470] + 16;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9BFAB0](&v29);

  for (uint64_t j = 32; j != -8; j -= 8)
  for (uint64_t k = 32; k != -8; k -= 8)
}

void sub_1B7462714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);

  for (uint64_t i = 32; i != -8; i -= 8)
  for (uint64_t j = 32; j != -8; j -= 8)

  _Unwind_Resume(a1);
}

uint64_t PVFrameStatsDescription::NumStats(PVFrameStatsDescription *this)
{
  return 11;
}

uint64_t PVLivePlayerStatsDescription::NumStats(PVLivePlayerStatsDescription *this)
{
  return 5;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1BA9BF760](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      double v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1BA9BF770](v13);
  return a1;
}

void sub_1B74628EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1BA9BF770](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B74628CCLL);
}

void sub_1B7462940(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      double v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1B7462AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__CGPoint b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_1B7462C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void PVIGHGNodeCacheKey::PVIGHGNodeCacheKey(PVIGHGNodeCacheKey *this, unint64_t a2, CMTime *a3)
{
  this->var0 = a2;
  CMTimeEpoch epoch = a3->epoch;
  *(_OWORD *)&this->var1.var0 = *(_OWORD *)&a3->value;
  this->var1.var3 = epoch;
  this->var2 = 0;
}

void PVIGHGNodeCacheKey::PVIGHGNodeCacheKey(PVIGHGNodeCacheKey *this, const PVIGHGNodeCacheKey *a2)
{
  this->var0 = a2->var0;
  long long v2 = *(_OWORD *)&a2->var1.var0;
  this->var1.var3 = a2->var1.var3;
  *(_OWORD *)&this->var1.var0 = v2;
  this->var2 = a2->var2;
}

BOOL PVIGHGNodeCacheKey::operator<(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return *(void *)a1 < *(void *)a2;
  }
  CMTime time1 = *(CMTime *)(a1 + 8);
  CMTime v3 = *(CMTime *)(a2 + 8);
  return CMTimeCompare(&time1, &v3) >> 31;
}

void PVInstructionGraphContext::PVInstructionGraphContext(PVInstructionGraphContext *this, PVVideoCompositingContext *a2)
{
  CMTime v3 = a2;
  HGObject::HGObject((HGObject *)this);
  *(void *)this = &unk_1F1089978;
  *((void *)this + 2) = v3;
  HGDotGraph::HGDotGraph((HGDotGraph *)((char *)this + 32));
  operator new();
}

void sub_1B74634B0(_Unwind_Exception *a1)
{
  HGDotGraph::~HGDotGraph(v3);

  HGObject::~HGObject((HGObject *)v1);
  _Unwind_Resume(a1);
}

void PVInstructionGraphContext::~PVInstructionGraphContext(PVInstructionGraphContext *this)
{
  *(void *)this = &unk_1F1089978;
  PVInputHGNodeMap<PVIGHGNodeCacheKey>::Clear(*((void *)this + 3));
  long long v2 = (void **)*((void *)this + 3);
  if (v2)
  {
    CMTime v3 = PVInputHGNodeMap<PVIGHGNodeCacheKey>::~PVInputHGNodeMap(v2);
    MEMORY[0x1BA9BFBA0](v3, 0x1020C400405154DLL);
  }
  HGDotGraph::end((HGDotGraph *)((char *)this + 32));
  HGDotGraph::~HGDotGraph((HGDotGraph *)((char *)this + 32));

  HGObject::~HGObject((HGObject *)this);
}

void PVInputHGNodeMap<PVIGHGNodeCacheKey>::Clear(uint64_t a1)
{
  long long v2 = (void *)(a1 + 8);
  CMTime v3 = *(void **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    do
    {
      uint64_t v4 = v3[9];
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      }
      void v3[9] = 0;
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          CMTime v3 = v6;
        }
        while (!v7);
      }
      CMTime v3 = v6;
    }
    while (v6 != v2);
  }
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v2;
  size_t v8 = *(void **)(a1 + 72);
  int v9 = (void *)(a1 + 80);
  if (v8 != (void *)(a1 + 80))
  {
    do
    {
      uint64_t v10 = v8[9];
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
      }
      v8[9] = 0;
      uint64_t v11 = (void *)v8[1];
      if (v11)
      {
        do
        {
          int64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int64_t v12 = (void *)v8[2];
          BOOL v7 = *v12 == (void)v8;
          size_t v8 = v12;
        }
        while (!v7);
      }
      size_t v8 = v12;
    }
    while (v12 != v9);
  }
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(a1 + 72, *(void **)(a1 + 80));
  *(void *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = v9;
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a1 + 32) = 0;
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 56) = 0;
  uint64_t v14 = *(void **)(a1 + 104);
  double v13 = (void *)(a1 + 104);
  *(v13 - 5) = 0;
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v13;
  *double v13 = 0;
  v13[1] = 0;
}

uint64_t PVInstructionGraphContext::WorkingColorSpace(PVInstructionGraphContext *this)
{
  return [*((id *)this + 2) workingColorSpace];
}

uint64_t PVInstructionGraphContext::OutputColorSpace(PVInstructionGraphContext *this)
{
  return [*((id *)this + 2) outputColorSpace];
}

uint64_t PVInstructionGraphContext::WorkingColorSpaceConformIntent(PVInstructionGraphContext *this)
{
  return [*((id *)this + 2) workingColorSpaceConformIntent];
}

uint64_t PVInstructionGraphContext::HGNodeCache(PVInstructionGraphContext *this)
{
  return *((void *)this + 3);
}

uint64_t PVInstructionGraphContext::DotGraph(PVInstructionGraphContext *this)
{
  return (uint64_t)this + 32;
}

uint64_t PVInstructionGraphContext::AddContextDotNode(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 4);
  uint64_t result = HGDotGraph::on((HGDotGraph *)(a1 + 4));
  if (result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v33);
    (*((void (**)(void **__return_ptr, id *))*a1 + 10))(__p, a1);
    if ((v32 & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    if ((v32 & 0x80u) == 0) {
      uint64_t v7 = v32;
    }
    else {
      uint64_t v7 = (uint64_t)__p[1];
    }
    size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
    if ((char)v32 < 0) {
      operator delete(__p[0]);
    }
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Working CS: ", 12);
    uint64_t v10 = [a1[2] workingColorSpace];
    id v11 = [v10 name];
    int64_t v12 = (const char *)[v11 UTF8String];
    size_t v13 = strlen(v12);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);

    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Output  CS: ", 12);
    double v16 = [a1[2] outputColorSpace];
    id v17 = [v16 name];
    char v18 = (const char *)[v17 UTF8String];
    size_t v19 = strlen(v18);
    size_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);

    (*((void (**)(id *))*a1 + 5))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Size: [", 7);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" x ", 3);
    uint64_t v22 = (void *)std::ostream::operator<<();
    double v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Scale: ", 7);
    (*((void (**)(id *))*a1 + 6))(a1);
    CGFloat v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"HighQuality: ", 13);
    int v25 = (*((uint64_t (**)(id *))*a1 + 8))(a1);
    if (v25) {
      uint64_t v26 = "yes\n";
    }
    else {
      uint64_t v26 = "no\n";
    }
    if (v25) {
      uint64_t v27 = 4;
    }
    else {
      uint64_t v27 = 3;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v26, v27);
    if (*(char *)(a2 + 23) < 0) {
      a2 = *(void *)a2;
    }
    size_t v28 = strlen((const char *)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, a2, v28);
    std::stringbuf::str();
    if ((v32 & 0x80u) == 0) {
      uint64_t v29 = __p;
    }
    else {
      uint64_t v29 = (void **)__p[0];
    }
    HGDotGraph::node(v4, 0, (uint64_t)v29, 1);
    if ((char)v32 < 0) {
      operator delete(__p[0]);
    }
    v33[0] = *MEMORY[0x1E4FBA408];
    uint64_t v30 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v33 + *(void *)(v33[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v34[0] = v30;
    v34[1] = MEMORY[0x1E4FBA470] + 16;
    if (v35 < 0) {
      operator delete((void *)v34[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x1BA9BFAB0](&v36);
  }
  return result;
}

void sub_1B7463BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t PVInstructionGraphContext::DotTreeLogLevel(PVInstructionGraphContext *this)
{
  return [*((id *)this + 2) instructionGraphDotTreeLevel];
}

void PVInstructionGraphContext::DotGraphFileName(PVInstructionGraphContext *this@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v4, atomic_fetch_add(&PVInstructionGraphContext::DotGraphFileName(void)::sAtomicCount, 1uLL) % 3);
  CMTime v3 = std::string::insert(&v4, 0, "PVInstructionGraph.");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B7463CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PVInstructionGraphContext::BeginDotGraph(PVInstructionGraphContext *this)
{
  {
    *(void *)PVInstructionGraphContext::BeginDotGraph(void)::dirStr = 0;
    *(void *)&PVInstructionGraphContext::BeginDotGraph(void)::dirStr[8] = 0;
    *(void *)&PVInstructionGraphContext::BeginDotGraph(void)::dirStr[16] = 0;
    __cxa_atexit(MEMORY[0x1E4FBA210], PVInstructionGraphContext::BeginDotGraph(void)::dirStr, &dword_1B73F3000);
  }
  if (PVInstructionGraphContext::BeginDotGraph(void)::onceToken != -1) {
    dispatch_once(&PVInstructionGraphContext::BeginDotGraph(void)::onceToken, &__block_literal_global_10);
  }
  PCImage::setIsPremultiplied((uint64_t)this + 32, (int)[*((id *)this + 2) instructionGraphDotTreeLevel] > 0);
  if (PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23] >= 0) {
    size_t v2 = PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23];
  }
  else {
    size_t v2 = *(void *)&PVInstructionGraphContext::BeginDotGraph(void)::dirStr[8];
  }
  CMTime v3 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v2 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    CMTime v3 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v2)
  {
    if (PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23] >= 0) {
      std::string v4 = PVInstructionGraphContext::BeginDotGraph(void)::dirStr;
    }
    else {
      std::string v4 = *(char **)PVInstructionGraphContext::BeginDotGraph(void)::dirStr;
    }
    memmove(v3, v4, v2);
  }
  *(_WORD *)((char *)&v3->__r_.__value_.__l.__data_ + v2) = 47;
  (*(void (**)(void **__return_ptr, PVInstructionGraphContext *))(*(void *)this + 88))(__p, this);
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v6 = v13;
  }
  else {
    std::string::size_type v6 = (std::string::size_type)__p[1];
  }
  uint64_t v7 = std::string::append(&v14, (const std::string::value_type *)v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = std::string::append(&v15, ".dot");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v17 = v9->__r_.__value_.__r.__words[2];
  long long v16 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v17 >= 0) {
    id v11 = (const char *)&v16;
  }
  else {
    id v11 = (const char *)v16;
  }
  HGDotGraph::begin((HGDotGraph *)((char *)this + 32), v11);
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
}

void sub_1B7463EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(exception_object);
}

double ___ZN25PVInstructionGraphContext13BeginDotGraphEv_block_invoke(PVRenderManager *a1)
{
  PVRenderManager::DotGraphLoggingDirectory(a1, &v2);
  if (PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23] < 0) {
    operator delete(*(void **)PVInstructionGraphContext::BeginDotGraph(void)::dirStr);
  }
  double result = *(double *)&v2.__r_.__value_.__l.__data_;
  *(std::string *)PVInstructionGraphContext::BeginDotGraph(void)::dirStr = v2;
  return result;
}

void PVAVFInstructionGraphContext::PVAVFInstructionGraphContext(PVAVFInstructionGraphContext *this, PVVideoCompositingContext *a2, AVVideoCompositionRenderContext *a3)
{
  uint64_t v5 = a3;
  PVInstructionGraphContext::PVInstructionGraphContext((PVInstructionGraphContext *)this, a2);
}

void sub_1B7464028(_Unwind_Exception *a1)
{
  PVInstructionGraphContext::~PVInstructionGraphContext((PVInstructionGraphContext *)v2);
  _Unwind_Resume(a1);
}

uint64_t PVAVFInstructionGraphContext::RenderSize(id *this)
{
  return [this[15] size];
}

uint64_t PVAVFInstructionGraphContext::RenderScale(id *this)
{
  return [this[15] renderScale];
}

double PVAVFInstructionGraphContext::RenderTransform@<D0>(PVAVFInstructionGraphContext *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    [v2 renderTransform];
  }
  else
  {
    double result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t PVAVFInstructionGraphContext::HighQualityRendering(id *this)
{
  if (*((unsigned char *)this + 128)) {
    return 0;
  }
  else {
    return [this[15] highQualityRendering];
  }
}

void PVAVFInstructionGraphContext::AnimationFrameDuration(id *this@<X0>, void *a2@<X8>)
{
  CMTime v3 = [this[15] videoComposition];
  id v4 = v3;
  if (v3)
  {
    [v3 frameDuration];
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B74640FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *PVAVFInstructionGraphContext::DotGraphLabel@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "AVF Compositor Context");
}

void PVAVFInstructionGraphContext::DotGraphFileName(PVInstructionGraphContext *this@<X0>, std::string *a2@<X8>)
{
  PVInstructionGraphContext::DotGraphFileName(this, &v4);
  CMTime v3 = std::string::append(&v4, ".AVFCustomCompositor");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B7464188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PVRendererInstructionGraphContext::PVRendererInstructionGraphContext(PVRendererInstructionGraphContext *this, PVVideoCompositingContext *a2, CGSize a3, uint64_t a4, CMTime *a5)
{
}

void sub_1B7464224(_Unwind_Exception *a1)
{
  PVInstructionGraphContext::~PVInstructionGraphContext(v1);
  _Unwind_Resume(a1);
}

double PVRendererInstructionGraphContext::RenderSize(PVRendererInstructionGraphContext *this)
{
  return *((double *)this + 15);
}

float PVRendererInstructionGraphContext::RenderScale(PVRendererInstructionGraphContext *this)
{
  return 1.0;
}

__n128 PVRendererInstructionGraphContext::RenderTransform@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (__n128 *)MEMORY[0x1E4F1DAB8];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = v2[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t PVRendererInstructionGraphContext::HighQualityRendering(PVRendererInstructionGraphContext *this)
{
  return *((unsigned __int8 *)this + 136);
}

__n128 PVRendererInstructionGraphContext::AnimationFrameDuration@<Q0>(PVRendererInstructionGraphContext *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 140);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)((char *)this + 156);
  return result;
}

void *PVRendererInstructionGraphContext::DotGraphLabel@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "PVRenderer Context");
}

void PVRendererInstructionGraphContext::DotGraphFileName(PVInstructionGraphContext *this@<X0>, std::string *a2@<X8>)
{
  PVInstructionGraphContext::DotGraphFileName(this, &v4);
  long long v3 = std::string::append(&v4, ".PVRenderer");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B74642FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PVAVFInstructionGraphContext::~PVAVFInstructionGraphContext(id *this)
{
  PVInstructionGraphContext::~PVInstructionGraphContext((PVInstructionGraphContext *)this);
}

{
  void *v2;
  uint64_t vars8;

  PVInstructionGraphContext::~PVInstructionGraphContext((PVInstructionGraphContext *)this);

  HGObject::operator delete(v2);
}

void PVRendererInstructionGraphContext::~PVRendererInstructionGraphContext(PVInstructionGraphContext *this)
{
  PVInstructionGraphContext::~PVInstructionGraphContext(this);

  HGObject::operator delete(v1);
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGNode>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGCVBitmap>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGCVBitmap>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  long long v3 = *(void **)(a1 + 32);
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void **PVInputHGNodeMap<PVIGHGNodeCacheKey>::~PVInputHGNodeMap(void **a1)
{
  return a1;
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    std::string::size_type v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1B7464758(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_1B7464A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7464E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74652C4(_Unwind_Exception *a1)
{
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B7465640(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1B746568C()
{
  JUMPOUT(0x1B7465684);
}

void sub_1B7465698()
{
  JUMPOUT(0x1B7465684);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_1B74659DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7465AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7465D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7465E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7465F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7466070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746624C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1B74664F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7466614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7467950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1B7468C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1B7468E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PVRenderManager::INSTANCE@<X0>(PVRenderManager *this@<X0>, void *a2@<X8>)
{
  {
    PVRenderManager::INSTANCE(void)::s_rdouble m = 0;
    __cxa_atexit((void (*)(void *))HGRef<PVRenderManager>::~HGRef, &PVRenderManager::INSTANCE(void)::s_rm, &dword_1B73F3000);
  }
  if (PVRenderManager::INSTANCE(void)::onceToken != -1) {
    dispatch_once(&PVRenderManager::INSTANCE(void)::onceToken, &__block_literal_global_11);
  }
  uint64_t result = PVRenderManager::INSTANCE(void)::s_rm;
  *a2 = PVRenderManager::INSTANCE(void)::s_rm;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v4();
  }
  return result;
}

uint64_t *HGRef<PVRenderManager>::~HGRef(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return a1;
}

void ___ZN15PVRenderManager8INSTANCEEv_block_invoke()
{
  uint64_t v0 = (PVRenderManager *)HGObject::operator new(0xB0uLL);
  PVRenderManager::PVRenderManager(v0);
}

void sub_1B74690C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void PVRenderManager::DotGraphLoggingDirectory(PVRenderManager *this@<X0>, std::string *a2@<X8>)
{
  {
    std::string::basic_string[abi:ne180100]<0>(&PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, "/var/tmp");
    __cxa_atexit(MEMORY[0x1E4FBA210], &PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, &dword_1B73F3000);
  }
  if (PVRenderManager::DotGraphLoggingDirectory(void)::onceToken != -1) {
    dispatch_once(&PVRenderManager::DotGraphLoggingDirectory(void)::onceToken, &__block_literal_global_3);
  }
  if (byte_1EB9A08FF < 0)
  {
    long long v3 = PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory;
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v3, *((std::string::size_type *)&v3 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory;
    a2->__r_.__value_.__r.__words[2] = unk_1EB9A08F8;
  }
}

void sub_1B746920C(_Unwind_Exception *a1)
{
}

void ___ZN15PVRenderManager24DotGraphLoggingDirectoryEv_block_invoke()
{
  NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v3 objectAtIndex:0];

  id v4 = [v0 stringByAppendingString:@"/"];

  uint64_t v1 = [MEMORY[0x1E4F28CB8] defaultManager];
  if ([v1 isWritableFileAtPath:v4])
  {
    MEMORY[0x1BA9BF660](&PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, [v4 UTF8String]);
  }
  else
  {
    NSTemporaryDirectory();
    id v2 = objc_claimAutoreleasedReturnValue();
    MEMORY[0x1BA9BF660](&PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, [v2 UTF8String]);
  }
}

void sub_1B7469314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void PVRenderManager::PVRenderManager(PVRenderManager *this)
{
  HGObject::HGObject((HGObject *)this);
  *(void *)uint64_t v1 = &unk_1F1089B70;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v1 + 24;
  *(void *)(v1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 32) = v1 + 24;
  *(void *)(v1 + 64) = v1 + 72;
  *(void *)(v1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 104) = 850045863;
  *(_DWORD *)(v1 + 172) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 153) = 0u;
  +[PVEnvironment Initialize];
  HGGLGetCurrentContext();
  if (PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v3))
  {
    v2.var0 = v3.var0;
    HGGLContext::Share();
  }
  atomic_store(1u, HGLogger::_enabled);
  PVPerfStats::BeginLogging(0);
  operator new();
}

void sub_1B7469A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,PCSharedCount a26,PCSharedCount a27,uint64_t a28,char *a29,std::__shared_weak_count *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 24))(a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  a29 = &a31;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  if (*(char *)(v39 - 129) < 0) {
    operator delete(*(void **)(v39 - 152));
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)(v39 - 120));
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)(v39 - 104));
  std::mutex::~mutex(a9);
  std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(a10, *(void **)(v36 + 72));
  uint64_t v41 = *(void *)(v36 + 48);
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
  }
  std::__list_imp<HGRef<HGRenderContext>>::clear(v35);
  uint64_t v42 = *(void *)(v36 + 16);
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
  }
  HGObject::~HGObject((HGObject *)v36);
  _Unwind_Resume(a1);
}

uint64_t PVRenderManager::InitGLPoolingPolicy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = +[PVDeviceCharacteristics actualMemory];
  int v4 = +[PVEnvironment PV_TEXTURE_POOL_SIZE_MB];
  +[PVEnvironment PV_TEXTURE_POOL_FINISH_SIZE_RATIO];
  float v6 = v5;
  uint64_t v7 = (MultiGPUPoolingPolicy *)HGObject::operator new(0x30uLL);
  MultiGPUPoolingPolicy::MultiGPUPoolingPolicy(v7);
  float v8 = (float)(unint64_t)((uint64_t)v4 << 20) / (float)v3;
  MultiGPUPoolingPolicy::setMaxPoolSizeRatio((uint64_t)v7, v8);
  MultiGPUPoolingPolicy::setMaxQueueSizeRatio((uint64_t)v7, v6 * v8);
  MultiGPUPoolingPolicy::setMaxUnusedSizeRatio((uint64_t)v7, v8);
  MultiGPUPoolingPolicy::setMaxTotalSizeRatio((uint64_t)v7, 1.0);
  uint64_t v9 = *a2;
  id v11 = v7;
  if (v7) {
    (*(void (**)(MultiGPUPoolingPolicy *))(*(void *)v7 + 16))(v7);
  }
  HGGPURenderContext::SetGLTexturePoolingPolicy(v9, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  if (v11) {
    uint64_t result = (*(uint64_t (**)(MultiGPUPoolingPolicy *))(*(void *)v11 + 24))(v11);
  }
  if (v7) {
    return (*(uint64_t (**)(MultiGPUPoolingPolicy *))(*(void *)v7 + 24))(v7);
  }
  return result;
}

void sub_1B7469F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PVRenderManager::InitGLPaddingPolicy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (ClusteredPaddingPolicy *)HGObject::operator new(0x38uLL);
  ClusteredPaddingPolicy::ClusteredPaddingPolicy(v3);
  unsigned int v4 = +[PVEnvironment PV_TEXTURE_CLUSTER_PADDING_REMEMBRANCE];
  unsigned int v5 = +[PVEnvironment PV_TEXTURE_CLUSTER_PADDING_CUSHIONING];
  unsigned int v6 = +[PVEnvironment PV_TEXTURE_CLUSTER_PADDING_CLUMPING];
  *((_DWORD *)v3 + 1pthread_cond_init((pthread_cond_t *)this, 0) = v4;
  *((_DWORD *)v3 + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = v5;
  *((_DWORD *)v3 + 12) = v6;
  uint64_t v7 = *a2;
  uint64_t v9 = v3;
  (*(void (**)(ClusteredPaddingPolicy *))(*(void *)v3 + 16))(v3);
  HGGPURenderContext::SetGLTexturePaddingPolicy(v7, (void **)&v9);
  if (v9) {
    (*(void (**)(ClusteredPaddingPolicy *))(*(void *)v9 + 24))(v9);
  }
  return (*(uint64_t (**)(ClusteredPaddingPolicy *))(*(void *)v3 + 24))(v3);
}

void sub_1B746A0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void PVRenderManager::InitMetalTexturePoolPolicy(PVRenderManager *this)
{
  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice((HGMetalDeviceInfo *)this);
  if (MainDevice)
  {
    DeviceResources = HGGPUResources::getDeviceResources(MainDevice, v3);
    unsigned int v5 = (uint64_t *)*((void *)DeviceResources + 5);
    *(void *)&long long v6 = -1;
    *((void *)&v6 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
    *(void *)size_t v28 = -1;
    uint64_t v32 = -1;
    *((void *)&v30 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
    long long v31 = v6;
    long long v29 = v6;
    long long v24 = xmmword_1B7E73860;
    long long v25 = v6;
    long long v26 = xmmword_1B7E73870;
    *((void *)&v27 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
    *(void *)&long long v27 = 314572800;
    *(_OWORD *)&v28[8] = xmmword_1B7E73870;
    *(void *)&v28[24] = 314572800;
    *(void *)&long long v30 = 750000000;
    HGGPUResources::setupGroupTotalUsagePolicies((uint64_t)DeviceResources, (uint64_t)&v24);
    uint64_t v7 = +[PVEffectResources utObserver];

    if (v7)
    {
      long long v20 = v29;
      long long v21 = v30;
      long long v22 = v31;
      uint64_t v23 = v32;
      long long v16 = v26;
      long long v17 = v27;
      long long v18 = *(_OWORD *)v28;
      long long v19 = *(_OWORD *)&v28[16];
      long long v14 = v24;
      long long v15 = v25;
      float v8 = +[PVEffectResources utObserver];
      float64x2_t v12[6] = v20;
      v12[7] = v21;
      v12[8] = v22;
      uint64_t v13 = v23;
      double v12[2] = v16;
      v12[3] = v17;
      v12[4] = v18;
      v12[5] = v19;
      v12[0] = v14;
      v12[1] = v15;
      [v8 setPoolingPolicy:v12];
    }
    uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1089BC0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1089C10;
    uint64_t v10 = v9 + 1;
    id v11 = v9;
    HGMetalBufferPool::setAllocationPolicy(v5, (uint64_t *)&v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  PVRenderManager::UpdateMetalTexturePoolingPolicy(this);
}

void sub_1B746A300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVRenderManager::~PVRenderManager(PVRenderManager *this)
{
  *(void *)this = &unk_1F1089B70;
  HGRenderQueue::CancelAllRenderJobs(*((HGRenderQueue **)this + 2), 1);
  HGRenderQueue::Drain(*((HGRenderQueue **)this + 2));
  HGRenderQueue::Shutdown(*((HGRenderQueue **)this + 2));
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  *((void *)this + 2) = 0;
  for (uint64_t i = *((void *)this + 4); (PVRenderManager *)i != (PVRenderManager *)((char *)this + 24); uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    *(void *)(i + 16) = 0;
  }
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    *((void *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  std::__list_imp<HGRef<HGRenderContext>>::clear((uint64_t *)this + 3);
  uint64_t v8 = *((void *)this + 2);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }

  HGObject::~HGObject((HGObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  PVRenderManager::~PVRenderManager(this);

  HGObject::operator delete(v1);
}

void PVRenderManager::UpdateMetalTexturePoolingPolicy(PVRenderManager *this)
{
  *(void *)&v36[32] = -1;
  *(void *)&long long v2 = -1;
  *((void *)&v2 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
  *(_OWORD *)uint64_t v36 = v2;
  *(_OWORD *)&v36[16] = v2;
  long long v34 = v2;
  long long v35 = v2;
  long long v32 = v2;
  long long v33 = v2;
  long long v30 = v2;
  long long v31 = v2;
  uint64_t v3 = (std::mutex *)((char *)this + 104);
  long long v29 = v2;
  std::mutex::lock((std::mutex *)((char *)this + 104));
  if (*((unsigned char *)this + 168))
  {
    *(void *)&long long v30 = -1;
    *((void *)&v30 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
    *((void *)&v32 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
    *(void *)&long long v33 = -1;
    *(void *)&long long v35 = -1;
    *((void *)&v35 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
    *(void *)&long long v4 = -1;
    *((void *)&v4 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
    *(_OWORD *)&v36[8] = v4;
    *(_OWORD *)&v36[24] = v4;
    *(void *)&long long v29 = 10;
    uint64_t v5 = 64;
    uint64_t v6 = 52428800;
    long long v7 = xmmword_1B7E73880;
    uint64_t v8 = 209715200;
  }
  else
  {
    if (*((_DWORD *)this + 43) == 1)
    {
      *((void *)&v30 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *((void *)&v32 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *(void *)&long long v33 = -1;
      *(void *)&long long v35 = -1;
      *((void *)&v35 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *(void *)&long long v10 = -1;
      *((void *)&v10 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *(_OWORD *)&v36[8] = v10;
      *(_OWORD *)&v36[24] = v10;
      uint64_t v5 = 64;
      long long v7 = xmmword_1B7E73890;
      uint64_t v8 = 209715200;
      uint64_t v6 = 209715200;
    }
    else
    {
      *((void *)&v30 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *((void *)&v32 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *(void *)&long long v33 = -1;
      *(void *)&long long v35 = -1;
      *((void *)&v35 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *(void *)&long long v9 = -1;
      *((void *)&v9 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -1;
      *(_OWORD *)&v36[8] = v9;
      *(_OWORD *)&v36[24] = v9;
      uint64_t v5 = 128;
      long long v7 = xmmword_1B7E73870;
      uint64_t v8 = 314572800;
      uint64_t v6 = 314572800;
    }
    *(void *)&long long v30 = -1;
    *(void *)&long long v29 = v5;
  }
  *((void *)&v29 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v8;
  long long v31 = v7;
  *(void *)&long long v32 = v6;
  *((void *)&v33 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7;
  *(void *)&long long v34 = v5;
  *((void *)&v34 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v8;
  *(void *)uint64_t v36 = v7;
  std::mutex::unlock(v3);
  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice(v11);
  if (MainDevice)
  {
    DeviceResources = HGGPUResources::getDeviceResources(MainDevice, v13);
    HGGPUResources::setupGroupTotalUsagePolicies((uint64_t)DeviceResources, (uint64_t)&v29);
    long long v15 = +[PVEffectResources utObserver];

    if (v15)
    {
      long long v25 = v35;
      long long v26 = *(_OWORD *)v36;
      long long v27 = *(_OWORD *)&v36[16];
      uint64_t v28 = *(void *)&v36[32];
      long long v21 = v31;
      long long v22 = v32;
      long long v23 = v33;
      long long v24 = v34;
      long long v19 = v29;
      long long v20 = v30;
      long long v16 = +[PVEffectResources utObserver];
      float64x2_t v17[6] = v25;
      v17[7] = v26;
      v17[8] = v27;
      uint64_t v18 = v28;
      void v17[2] = v21;
      v17[3] = v22;
      v17[4] = v23;
      v17[5] = v24;
      v17[0] = v19;
      v17[1] = v20;
      [v16 setPoolingPolicy:v17];
    }
  }
}

void sub_1B746A704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PVRenderManager::EnqueueRenderJob(uint64_t a1, HGRenderJob **a2)
{
  return HGRenderQueue::EnqueueRenderJob(*(HGRenderQueue **)(a1 + 16), *a2);
}

uint64_t PVRenderManager::CancelRenderJob(uint64_t a1, HGRenderJob **a2)
{
  return HGRenderQueue::CancelRenderJob(*(HGRenderQueue **)(a1 + 16), *a2);
}

uint64_t PVRenderManager::CancelAllRenderJobs(PVRenderManager *this, int a2)
{
  return HGRenderQueue::CancelAllRenderJobs(*((HGRenderQueue **)this + 2), a2);
}

void PVRenderManager::Shutdown(PVRenderManager *this)
{
  HGRenderQueue::Shutdown(*((HGRenderQueue **)this + 2));

  PVPerfStats::EndLogging(v1);
}

HGSynchronizable *PVRenderManager::SetMinRenderPriority(PVRenderManager *this, int a2)
{
  if (a2) {
    int v2 = 5;
  }
  else {
    int v2 = 0;
  }
  return HGRenderQueue::SetMinJobExecPriority(*((HGRenderQueue **)this + 2), v2);
}

HGSynchronizable *PVRenderManager::Pause(PVRenderManager *this)
{
  return HGRenderQueue::Pause(*((HGRenderQueue **)this + 2));
}

HGSynchronizable *PVRenderManager::Resume(PVRenderManager *this)
{
  return HGRenderQueue::Restart(*((HGRenderQueue **)this + 2));
}

void PVRenderManager::WaitForCommandBuffersToComplete(PVRenderManager *this)
{
  HGGLGetCurrentContext();
  if (PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v6)) {
    HGGLContext::Share();
  }
  int v2 = (char *)this + 24;
  for (uint64_t i = *((void *)this + 4); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    long long v4 = *(HGGPURenderContext **)(i + 16);
    if (v4) {
      (*(void (**)(void))(*(void *)v4 + 16))(*(void *)(i + 16));
    }
    if (HGRenderContext::GetType(v4) == 1)
    {
      GPUuint64_t Renderer = (HGGPURenderer *)HGGPURenderContext::GetGPURenderer(v4);
      HGGPURenderer::FinishMetalCommandBuffer(GPURenderer);
    }
    if (v4) {
      (*(void (**)(HGGPURenderContext *))(*(void *)v4 + 24))(v4);
    }
  }
  PCSharedCount::PCSharedCount(&v6);
}

void sub_1B746A8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, uint64_t a11, PCSharedCount a12)
{
}

uint64_t PVRenderManager::GetInteractiveMode(PVRenderManager *this)
{
  int v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  uint64_t v3 = *((unsigned __int8 *)this + 168);
  std::mutex::unlock(v2);
  return v3;
}

void PVRenderManager::SetInteractiveMode(PVRenderManager *this, int a2)
{
  long long v4 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  int v5 = *((unsigned __int8 *)this + 168);
  *((unsigned char *)this + 168) = a2;
  std::mutex::unlock(v4);
  if (v5 != a2)
  {
    PVRenderManager::UpdateMetalTexturePoolingPolicy(this);
  }
}

uint64_t PVRenderManager::GetMemoryEnvironment(PVRenderManager *this)
{
  int v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  uint64_t v3 = *((unsigned int *)this + 43);
  std::mutex::unlock(v2);
  return v3;
}

void PVRenderManager::updateMemoryEnvironment(uint64_t a1, int a2)
{
  long long v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 172) = a2;
  std::mutex::unlock(v4);
  if (v5 != a2)
  {
    PVRenderManager::UpdateMetalTexturePoolingPolicy((PVRenderManager *)a1);
  }
}

void PVRenderManager::SetupTextureFactories(PVRenderManager *this, float a2)
{
  uint64_t v13 = (HGSynchronizable *)*((void *)this + 7);
  char v14 = 0;
  HGSynchronizable::Lock(v13);
  int v4 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = v4 + 1;
  if (!v4)
  {
    uint64_t v5 = *((void *)this + 4);
    if ((PVRenderManager *)v5 == (PVRenderManager *)((char *)this + 24))
    {
LABEL_17:
      HGGLContext::context((uint64_t *)&v10, *((HGGLContext **)this + 6));
      HGGLContext::Create();
    }
    while (1)
    {
      PCSharedCount v6 = *(HGRenderContext **)(v5 + 16);
      if (v6) {
        (*(void (**)(void))(*(void *)v6 + 16))(*(void *)(v5 + 16));
      }
      if (HGRenderContext::GetType(v6) != 1) {
        goto LABEL_14;
      }
      v12.var0 = (PC_Sp_counted_base *)v6;
      HGGPURenderContext::GetGLContext((HGGLContext **)v6, (HGGLContextPtr *)&v11);
      long long v7 = HGObject::operator new(0x20uLL);
      v15.var0 = v11.var0;
      HGCVGLTextureFactory::HGCVGLTextureFactory(v7, &v15, a2);
      PCSharedCount::PCSharedCount(&v15);
      v15.var0 = (PC_Sp_counted_base *)&v12;
      uint64_t v8 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>((uint64_t **)this + 8, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15);
      long long v9 = (void *)v8[5];
      if (v9 != v7) {
        break;
      }
      if (v7) {
        goto LABEL_12;
      }
LABEL_13:
      PCSharedCount::PCSharedCount(&v11);
LABEL_14:
      if (v6) {
        (*(void (**)(HGRenderContext *))(*(void *)v6 + 24))(v6);
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if ((PVRenderManager *)v5 == (PVRenderManager *)((char *)this + 24)) {
        goto LABEL_17;
      }
    }
    if (v9) {
      (*(void (**)(void *))(*(void *)v9 + 24))(v9);
    }
    v8[5] = (uint64_t)v7;
    if (!v7) {
      goto LABEL_13;
    }
    (*(void (**)(void *))(*(void *)v7 + 16))(v7);
LABEL_12:
    (*(void (**)(void *))(*(void *)v7 + 24))(v7);
    goto LABEL_13;
  }
  HGSynchronizer::~HGSynchronizer(&v13);
}

void sub_1B746AD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, PCSharedCount a11, PCSharedCount a12, HGSynchronizable *a13, uint64_t a14, uint64_t a15, PCSharedCount a16)
{
  PCSharedCount::PCSharedCount((PCSharedCount *)&a9);
  HGObject::operator delete(v16);
  PCSharedCount::PCSharedCount(&a12);
  if (a16.var0) {
    (*(void (**)(PC_Sp_counted_base *))(*(void *)a16.var0 + 24))(a16.var0);
  }
  HGSynchronizer::~HGSynchronizer(&a13);
  _Unwind_Resume(a1);
}

void PVRenderManager::TearDownTextureFactories(PVRenderManager *this)
{
  uint64_t v3 = (HGSynchronizable *)*((void *)this + 7);
  char v4 = 0;
  HGSynchronizable::Lock(v3);
  int v2 = *((_DWORD *)this + 24) - 1;
  *((_DWORD *)this + 24) = v2;
  if (!v2)
  {
    std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
    *((void *)this + 8) = (char *)this + 72;
    *((void *)this + 9) = 0;
    *((void *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0;
    (*(void (**)(void))(**((void **)this + 11) + 24))(*((void *)this + 11));
    *((void *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    PVRenderManager::FreeTexturePools(this);
  }
  HGSynchronizer::~HGSynchronizer(&v3);
}

void sub_1B746AF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void PVRenderManager::FreeTexturePools(PVRenderManager *this)
{
  HGGLGetCurrentContext();
  if (PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v12)) {
    HGGLContext::Share();
  }
  int v2 = (char *)this + 24;
  for (uint64_t i = *((void *)this + 4); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    char v4 = *(HGRenderContext **)(i + 16);
    if (v4) {
      (*(void (**)(void))(*(void *)v4 + 16))(*(void *)(i + 16));
    }
    if (HGRenderContext::GetType(v4) == 1)
    {
      uint64_t Renderer = HGRenderContext::GetRenderer(v4);
      PCSharedCount v6 = (HGGPURenderer *)Renderer;
      long long v7 = *(HGTextureManager **)(Renderer + 1472);
      if (v7)
      {
        HGTextureManager::finishDeleteTextureQueue(*(HGTextureManager **)(Renderer + 1472));
        HGTextureManager::emptyTexturePool(v7);
      }
      MetalContext = (PCICCTransferFunctionLUT *)HGGPURenderer::GetMetalContext(v6);
      if (MetalContext)
      {
        LUTEnCGPoint d = (HGGPUResources *)PCICCTransferFunctionLUT::getLUTEnd(MetalContext);
        DeviceResources = HGGPUResources::getDeviceResources(LUTEnd, v10);
        if (DeviceResources) {
          HGGPUResources::flushFreeObjects(DeviceResources);
        }
      }
    }
    if (v4) {
      (*(void (**)(HGRenderContext *))(*(void *)v4 + 24))(v4);
    }
  }
  PCSharedCount::PCSharedCount(&v12);
}

void sub_1B746B0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, uint64_t a11, PCSharedCount a12)
{
}

void PVRenderManager::FlushTextureFactories(PVRenderManager *this)
{
  uint64_t v8 = (HGSynchronizable *)*((void *)this + 7);
  char v9 = 0;
  HGSynchronizable::Lock(v8);
  int v2 = (PVRenderManager *)*((void *)this + 8);
  if (v2 != (PVRenderManager *)((char *)this + 72))
  {
    do
    {
      uint64_t v3 = (CVOpenGLESTextureCacheRef *)*((void *)v2 + 5);
      if (v3)
      {
        (*((void (**)(void))*v3 + 2))(*((void *)v2 + 5));
        CVOpenGLESTextureCacheFlush(v3[3], 0);
        (*((void (**)(CVOpenGLESTextureCacheRef *))*v3 + 3))(v3);
      }
      char v4 = (PVRenderManager *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          char v4 = *(PVRenderManager **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (PVRenderManager *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          int v2 = v5;
        }
        while (!v6);
      }
      int v2 = v5;
    }
    while (v5 != (PVRenderManager *)((char *)this + 72));
  }
  uint64_t v7 = *((void *)this + 11);
  if (v7) {
    CVOpenGLESTextureCacheFlush(*(CVOpenGLESTextureCacheRef *)(v7 + 24), 0);
  }
  HGSynchronizer::~HGSynchronizer(&v8);
}

void sub_1B746B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void PVRenderManager::ForceFlushRendererResources(PVRenderManager *this)
{
  uint64_t v1 = (char *)this + 24;
  for (uint64_t i = *((void *)this + 4); (char *)i != v1; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = *(HGRenderContext **)(i + 16);
    if (v3) {
      (*(void (**)(void))(*(void *)v3 + 16))(*(void *)(i + 16));
    }
    this = (PVRenderManager *)HGRenderContext::GetType(v3);
    if (this == 1)
    {
      uint64_t Renderer = (OZChannelBase *)HGRenderContext::GetRenderer(v3);
      this = (PVRenderManager *)OZChannelBase::setRangeName(Renderer, v5);
    }
    if (v3) {
      this = (PVRenderManager *)(*(uint64_t (**)(HGRenderContext *))(*(void *)v3 + 24))(v3);
    }
  }

  HGGPUResources::forceResetAllCVTextureCaches((HGGPUResources *)this);
}

void sub_1B746B384(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void PVRenderManager::SetCVTextureCacheMaximumTextureAge(PVRenderManager *this, float a2)
{
  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice((HGMetalDeviceInfo *)this);
  if (MainDevice)
  {
    DeviceResources = (std::mutex *)HGGPUResources::getDeviceResources(MainDevice, v4);
    HGGPUResources::setCVTextureCacheMaximumTextureAge((uint64_t)DeviceResources, a2);
    HGGPUResources::forceResetCVTextureCache(DeviceResources);
  }
}

float PVRenderManager::GetCVTextureCacheMaximumTextureAge(PVRenderManager *this)
{
  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice((HGMetalDeviceInfo *)this);
  if (MainDevice) {
    return *((float *)HGGPUResources::getDeviceResources(MainDevice, v2) + 34);
  }
  else {
    return 1.0;
  }
}

uint64_t PVRenderManager::GetRenderQueue@<X0>(PVRenderManager *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 2);
  *a2 = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t PVRenderManager::GetRootContext@<X0>(PVRenderManager *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 6);
  *a2 = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void std::__list_imp<HGRef<HGRenderContext>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<HGRef<HGRenderContext>,0>(v3 + 2);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::__destroy_at[abi:ne180100]<HGRef<HGRenderContext>,0>(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<HGGPURenderContext const* const,HGRef<HGCVGLTextureFactory>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<HGGPURenderContext const* const,HGRef<HGCVGLTextureFactory>>,0>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void *std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__init_with_size[abi:ne180100]<std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>,std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B746B790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>,std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  long long v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>,std::shared_ptr<HGGPUComputeDevice const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>,std::shared_ptr<HGGPUComputeDevice const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>,std::shared_ptr<HGGPUComputeDevice const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>,std::shared_ptr<HGGPUComputeDevice const>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::__shared_ptr_emplace<PVMtlTexturePoolAllocationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1089BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PVMtlTexturePoolAllocationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1089BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__shared_ptr_emplace<PVMtlTexturePoolAllocationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void PVMtlTexturePoolAllocationPolicy::~PVMtlTexturePoolAllocationPolicy(PVMtlTexturePoolAllocationPolicy *this)
{
}

__n128 PVMtlTexturePoolAllocationPolicy::pad@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 32);
  __n128 result = *(__n128 *)(a1 + 16);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  int8x16_t v5 = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)a1, (uint64x2_t)vdupq_n_s64(0x10uLL)), (int8x16_t)vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)a1, v4), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFC0)), vdupq_n_s64(0x40uLL)), *(int8x16_t *)a1);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v2;
  *(int8x16_t *)a2 = v5;
  return result;
}

uint64_t *std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  std::string::size_type v7 = a1 + 1;
  std::string::size_type v6 = a1[1];
  char v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        std::string::size_type v6 = *v9;
        char v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      std::string::size_type v6 = v9[1];
      if (!v6)
      {
        char v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    PCSharedCount v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    char v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<HGGPURenderContext const* const,HGRef<HGCVGLTextureFactory>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1B746BC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746C344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746C630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B746C760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746C808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B746C90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746CA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746CAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746CEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  PVInputHGNodeMap<unsigned int>::~PVInputHGNodeMap((void **)va);
  if (*v15) {
    (*(void (**)(void))(*(void *)*v15 + 24))(*v15);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v16 - 96));
  _Unwind_Resume(a1);
}

void sub_1B746D12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746D27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746D54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746D6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746ECE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746ED84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746EE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746EE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746EF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746EFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746F068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B746F0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

double PVGetMemUsageStats@<D0>(uint64_t a1@<X8>)
{
  host_t v2 = MEMORY[0x1BA9C0890]();
  mach_msg_type_number_t host_info_outCnt = 15;
  vm_size_t v16 = 0;
  host_page_size(v2, &v16);
  if (host_statistics(v2, 2, host_info_out, &host_info_outCnt)) {
    NSLog(&cfstr_FailedToFetchV.isa);
  }
  vm_size_t v3 = v16;
  uint64_t v4 = host_info_out[0];
  vm_size_t v5 = v16 * host_info_out[1];
  uint64_t v6 = host_info_out[3];
  vm_size_t v7 = v16 * host_info_out[2];
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  vm_size_t v8 = v3 * v6;
  vm_size_t v9 = v3 * v4;
  vm_size_t v10 = v7 + v5 + v8;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = v10;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v9 + v10;
  mach_msg_type_number_t task_info_outCnt = 40;
  if (!task_info(*MEMORY[0x1E4F14960], 0x12u, &task_info_out, &task_info_outCnt))
  {
    double result = *(double *)&v14;
    *(_OWORD *)a1 = v14;
  }
  return result;
}

id PVGetMemUsageString(void *a1)
{
  uint64_t v1 = a1;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  PVGetMemUsageStats((uint64_t)&v14);
  host_t v2 = &stru_1F119C770;
  if (v1) {
    host_t v2 = v1;
  }
  vm_size_t v3 = v2;
  uint64_t v4 = [(__CFString *)v3 stringByAppendingFormat:@" Memory Usage:"];

  vm_size_t v5 = objc_msgSend(v4, "stringByAppendingFormat:", @"\n\tTask Resident Memory:     %lu", *((void *)&v14 + 1) >> 20);

  uint64_t v6 = objc_msgSend(v5, "stringByAppendingFormat:", @"\n\tTask Virtual Memory:      %lu", (unint64_t)v14 >> 20);

  vm_size_t v7 = objc_msgSend(v6, "stringByAppendingFormat:", @"\n\tSystem Active Memory:     %lu", (unint64_t)v15 >> 20);

  vm_size_t v8 = objc_msgSend(v7, "stringByAppendingFormat:", @"\n\tSystem InActive Memory:   %lu", *((void *)&v15 + 1) >> 20);

  vm_size_t v9 = objc_msgSend(v8, "stringByAppendingFormat:", @"\n\tSystem Wired Memory:      %lu", (unint64_t)v16 >> 20);

  vm_size_t v10 = objc_msgSend(v9, "stringByAppendingFormat:", @"\n\tSystem Total Used Memory: %lu", *((void *)&v16 + 1) >> 20);

  unint64_t v11 = objc_msgSend(v10, "stringByAppendingFormat:", @"\n\tSystem Free Memory:       %lu", (unint64_t)v17 >> 20);

  PCSharedCount v12 = objc_msgSend(v11, "stringByAppendingFormat:", @"\n\tSystem Total Memory:      %lu", *((void *)&v17 + 1) >> 20);

  return v12;
}

void sub_1B746F440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746F54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B746FFA4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  uint64_t v6 = *(void *)(v4 - 96);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  uint64_t v7 = *(void *)(v4 - 88);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  _Unwind_Resume(a1);
}

id NSStringFromSIMDFloat3x3(uint64_t a1, simd_float3x3 a2)
{
  int v3 = pv_buffer_size_for_string_representation(a2, a1);
  uint64_t v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  unsigned int string_representation = pv_get_string_representation(a2, v4, v3, a1);
  uint64_t v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (uint64_t v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDDouble3x3(long long *a1, uint64_t a2, double a3, double a4, __n128 a5)
{
  long long v7 = a1[3];
  long long v21 = a1[2];
  long long v22 = v7;
  long long v8 = a1[5];
  long long v23 = a1[4];
  long long v24 = v8;
  long long v9 = a1[1];
  long long v19 = *a1;
  long long v20 = v9;
  int v10 = pv_buffer_size_for_string_representation(&v19, a2, *(double *)&v19, *(double *)&v9, a5);
  unint64_t v11 = malloc_type_calloc(v10, 1uLL, 0x100004077774924uLL);
  long long v12 = a1[3];
  long long v21 = a1[2];
  long long v22 = v12;
  long long v13 = a1[5];
  long long v23 = a1[4];
  long long v24 = v13;
  long long v14 = a1[1];
  long long v19 = *a1;
  long long v20 = v14;
  unsigned int string_representation = pv_get_string_representation(&v19, (uint64_t)v11, v10, a2, *(double *)&v19, *(double *)&v14, v15);
  long long v17 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v10
    || (long long v17 = (void *)[[NSString alloc] initWithBytesNoCopy:v11 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v11);
  }

  return v17;
}

id NSStringFromSIMDFloat4x4(uint64_t a1, simd_float4x4 a2)
{
  int v3 = pv_buffer_size_for_string_representation(a2, a1);
  uint64_t v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  unsigned int string_representation = pv_get_string_representation(a2, v4, v3, a1);
  uint64_t v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (uint64_t v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDDouble4x4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 64);
  long long v22 = v4;
  long long v5 = *(_OWORD *)(a1 + 112);
  long long v23 = *(_OWORD *)(a1 + 96);
  long long v24 = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  int64x2_t v17 = *(int64x2_t *)a1;
  long long v18 = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v19 = *(_OWORD *)(a1 + 32);
  long long v20 = v7;
  int v8 = pv_buffer_size_for_string_representation(&v17, a2);
  long long v9 = malloc_type_calloc(v8, 1uLL, 0x100004077774924uLL);
  long long v10 = *(_OWORD *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 64);
  long long v22 = v10;
  long long v11 = *(_OWORD *)(a1 + 112);
  long long v23 = *(_OWORD *)(a1 + 96);
  long long v24 = v11;
  long long v12 = *(_OWORD *)(a1 + 16);
  int64x2_t v17 = *(int64x2_t *)a1;
  long long v18 = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v19 = *(_OWORD *)(a1 + 32);
  long long v20 = v13;
  unsigned int string_representation = pv_get_string_representation(&v17, (uint64_t)v9, v8, a2);
  __n128 v15 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v8
    || (__n128 v15 = (void *)[[NSString alloc] initWithBytesNoCopy:v9 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v9);
  }

  return v15;
}

id NSStringFromSIMDQuatF(unsigned int a1, simd_quatf a2)
{
  int v3 = pv_buffer_size_for_string_representation(a2, a1);
  long long v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  simd_quatf v5 = a2;
  unsigned int string_representation = pv_get_string_representation(v5, v4, v3, a1);
  long long v7 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (long long v7 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v7;
}

id NSStringFromSIMDQuatD(long long *a1, uint64_t a2)
{
  *(_OWORD *)&v12.vector.f64[2] = a1[1];
  long long v9 = *a1;
  *(_OWORD *)v12.vector.f64 = v9;
  long long v10 = *(_OWORD *)&v12.vector.f64[2];
  int v4 = pv_buffer_size_for_string_representation(v12, &v9, a2);
  simd_quatf v5 = (char *)malloc_type_calloc(v4, 1uLL, 0x100004077774924uLL);
  *(_OWORD *)&v13.vector.f64[2] = a1[1];
  long long v9 = *a1;
  *(_OWORD *)v13.vector.f64 = v9;
  long long v10 = *(_OWORD *)&v13.vector.f64[2];
  unsigned int string_representation = pv_get_string_representation(v13, (char *)&v9, v5, v4, a2);
  long long v7 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v4
    || (long long v7 = (void *)[[NSString alloc] initWithBytesNoCopy:v5 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v5);
  }

  return v7;
}

id NSStringFromSIMDFloat2(uint64_t a1, __n128 a2)
{
  unint64_t v3 = a2.n128_u64[0];
  int v4 = pv_buffer_size_for_string_representation(a1, a2);
  simd_quatf v5 = (char *)malloc_type_calloc(v4, 1uLL, 0x100004077774924uLL);
  v6.n128_u64[0] = v3;
  unsigned int string_representation = pv_get_string_representation(v5, v4, a1, v6);
  int v8 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v4
    || (int v8 = (void *)[[NSString alloc] initWithBytesNoCopy:v5 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v5);
  }

  return v8;
}

id NSStringFromSIMDFloat3(uint64_t a1, __n128 a2)
{
  int v3 = pv_buffer_size_for_string_representation(a1, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  unsigned int string_representation = pv_get_string_representation(v4, v3, a1, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDFloat4(uint64_t a1, __n128 a2)
{
  int v3 = pv_buffer_size_for_string_representation(a1, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  unsigned int string_representation = pv_get_string_representation(v4, v3, a1, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDFloat8(long long *a1, uint64_t a2)
{
  long long v8 = a1[1];
  v11[0] = *a1;
  long long v9 = v11[0];
  v11[1] = v8;
  int v3 = pv_buffer_size_for_string_representation(v11, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v10[0] = v9;
  v10[1] = v8;
  unsigned int string_representation = pv_get_string_representation(v10, v4, v3, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDFloat16(long long *a1, uint64_t a2)
{
  long long v10 = a1[1];
  long long v11 = *a1;
  long long v8 = a1[3];
  long long v14 = a1[2];
  long long v9 = v14;
  long long v15 = v8;
  v13[0] = v11;
  v13[1] = v10;
  int v3 = pv_buffer_size_for_string_representation(v13, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  double v12[2] = v9;
  v12[3] = v8;
  v12[0] = v11;
  v12[1] = v10;
  unsigned int string_representation = pv_get_string_representation(v12, v4, v3, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDDouble2(uint64_t a1, __n128 a2)
{
  int v3 = pv_buffer_size_for_string_representation(a1, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  unsigned int string_representation = pv_get_string_representation(v4, v3, a1, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDDouble3(int8x16_t *a1, uint64_t a2)
{
  int8x16_t v8 = a1[1];
  v11[0] = *a1;
  int8x16_t v9 = v11[0];
  v11[1] = v8;
  int v3 = pv_buffer_size_for_string_representation(v11, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v10[0] = v9;
  v10[1] = v8;
  unsigned int string_representation = pv_get_string_representation(v10, v4, v3, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDDouble4(long long *a1, uint64_t a2)
{
  long long v8 = a1[1];
  v11[0] = *a1;
  long long v9 = v11[0];
  v11[1] = v8;
  int v3 = pv_buffer_size_for_string_representation(v11, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v10[0] = v9;
  v10[1] = v8;
  unsigned int string_representation = pv_get_string_representation(v10, v4, v3, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

id NSStringFromSIMDDouble8(long long *a1, uint64_t a2)
{
  long long v10 = a1[1];
  long long v11 = *a1;
  long long v8 = a1[3];
  long long v14 = a1[2];
  long long v9 = v14;
  long long v15 = v8;
  v13[0] = v11;
  v13[1] = v10;
  int v3 = pv_buffer_size_for_string_representation(v13, a2);
  int v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  double v12[2] = v9;
  v12[3] = v8;
  v12[0] = v11;
  v12[1] = v10;
  unsigned int string_representation = pv_get_string_representation(v12, v4, v3, a2);
  __n128 v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (__n128 v6 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v4);
  }

  return v6;
}

void sub_1B7471210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  MEMORY[0x1BA9BFBA0](v12, 0x10E1C409BAC03F7);

  _Unwind_Resume(a1);
}

void sub_1B747140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1B7471540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7471614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74716C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74717A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7471864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7471940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74719F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7471AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7471BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7471CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7471E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7471F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74720F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74722A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__73(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1B747246C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B747260C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__77(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__78(uint64_t a1)
{
}

void sub_1B7472798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74728D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B7472A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7472B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1B7472D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7472DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7472E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7472F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7472FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7473348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74734B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7473644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74736F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B747391C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747398C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74739F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7473DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74741E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74746A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74747A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74748F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74749C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7474F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7475188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74752A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7475450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B7475740(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B7475864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7475964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747601C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 24))(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 24))(a25);
  }
  if (a26) {
    (*(void (**)(uint64_t))(*(void *)a26 + 24))(a26);
  }
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 24))(a27);
  }

  _Unwind_Resume(a1);
}

uint64_t pv_buffer_size_for_string_representation(float a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(float a1, char *a2, size_t a3, uint64_t a4)
{
  if (a1 > -0.00001 && a1 < 0.00001 || (float v4 = fabsf(a1), v5 = "%.*e", v4 <= 1000000.0) && v4 >= 0.00001) {
    simd_quatf v5 = "%.*f";
  }
  return snprintf(a2, a3, v5, a4, a1);
}

uint64_t pv_buffer_size_for_string_representation(double a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(double a1, char *a2, size_t a3, uint64_t a4)
{
  if (a1 > -0.0000001 && a1 < 0.0000001 || (double v4 = fabs(a1), v5 = "%.*e", v4 <= 999999.0) && v4 >= 0.00001) {
    simd_quatf v5 = "%.*f";
  }
  return snprintf(a2, a3, v5, a4, *(void *)&a1);
}

uint64_t pv_buffer_size_for_string_representation(uint64_t a1, __n128 a2)
{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

uint64_t pv_get_string_representation(char *a1, size_t a2, uint64_t a3, __n128 a4)
{
  size_t v5 = a2;
  if (!a1) {
    a2 = 0;
  }
  int string_representation = pv_get_string_representation(a4.n128_f32[0], a1, a2, a3);
  int v8 = string_representation;
  size_t v9 = v5 - string_representation;
  uint64_t v10 = string_representation;
  if (a1) {
    long long v11 = &a1[string_representation];
  }
  else {
    long long v11 = 0;
  }
  if (a1) {
    size_t v12 = v9;
  }
  else {
    size_t v12 = 0;
  }
  int v13 = snprintf(v11, v12, ", ", *(_OWORD *)&a4);
  uint64_t v14 = v10 + v13;
  size_t v15 = v5 - v14;
  long long v16 = &a1[v14];
  if (a1) {
    int64x2_t v17 = v16;
  }
  else {
    int64x2_t v17 = 0;
  }
  if (a1) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = 0;
  }
  return pv_get_string_representation(v21, v17, v18, a3) + v13 + v8;
}

{
  size_t v5;
  int string_representation;
  int v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;

  size_t v5 = a2;
  if (!a1) {
    a2 = 0;
  }
  int string_representation = pv_get_string_representation(a4.n128_f64[0], a1, a2, a3);
  int v8 = string_representation;
  size_t v9 = v5 - string_representation;
  uint64_t v10 = string_representation;
  if (a1) {
    long long v11 = &a1[string_representation];
  }
  else {
    long long v11 = 0;
  }
  if (a1) {
    size_t v12 = v9;
  }
  else {
    size_t v12 = 0;
  }
  int v13 = snprintf(v11, v12, ", ", a4.n128_u64[0]);
  uint64_t v14 = v10 + v13;
  size_t v15 = v5 - v14;
  long long v16 = &a1[v14];
  if (a1) {
    int64x2_t v17 = v16;
  }
  else {
    int64x2_t v17 = 0;
  }
  if (a1) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = 0;
  }
  return pv_get_string_representation(a4.n128_f64[1], v17, v18, a3) + v13 + v8;
}

{
  size_t v5;
  int string_representation;
  uint64_t v8;
  uint64_t v9;
  int i;
  uint64_t v11;
  char *v12;
  size_t v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  __n128 v19;
  __n128 v20;

  size_t v5 = a2;
  if (!a1) {
    a2 = 0;
  }
  long long v19 = a4;
  int string_representation = pv_get_string_representation(a4.n128_f32[0], a1, a2, a3);
  LODWORD(v8) = string_representation;
  size_t v9 = 0;
  for (uint64_t i = 1; i != 3; ++i)
  {
    long long v11 = v9 + string_representation;
    if (a1) {
      size_t v12 = &a1[v11];
    }
    else {
      size_t v12 = 0;
    }
    if (a1) {
      int v13 = v5 - v11;
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = snprintf(v12, v13, ", ", *(_OWORD *)&v19, *(_OWORD *)&v20);
    size_t v9 = v11 + v14;
    size_t v15 = v14 + v8;
    long long v20 = v19;
    if (a1) {
      long long v16 = &a1[v9];
    }
    else {
      long long v16 = 0;
    }
    if (a1) {
      int64x2_t v17 = v5 - v9;
    }
    else {
      int64x2_t v17 = 0;
    }
    int string_representation = pv_get_string_representation(*(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))), v16, v17, a3);
    int v8 = (string_representation + v15);
  }
  return v8;
}

{
  size_t v5;
  int string_representation;
  uint64_t v8;
  uint64_t v9;
  int i;
  uint64_t v11;
  char *v12;
  size_t v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  __n128 v19;
  __n128 v20;

  size_t v5 = a2;
  if (!a1) {
    a2 = 0;
  }
  long long v19 = a4;
  int string_representation = pv_get_string_representation(a4.n128_f32[0], a1, a2, a3);
  LODWORD(v8) = string_representation;
  size_t v9 = 0;
  for (uint64_t i = 1; i != 4; ++i)
  {
    long long v11 = v9 + string_representation;
    if (a1) {
      size_t v12 = &a1[v11];
    }
    else {
      size_t v12 = 0;
    }
    if (a1) {
      int v13 = v5 - v11;
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = snprintf(v12, v13, ", ", *(_OWORD *)&v19, *(_OWORD *)&v20);
    size_t v9 = v11 + v14;
    size_t v15 = v14 + v8;
    long long v20 = v19;
    if (a1) {
      long long v16 = &a1[v9];
    }
    else {
      long long v16 = 0;
    }
    if (a1) {
      int64x2_t v17 = v5 - v9;
    }
    else {
      int64x2_t v17 = 0;
    }
    int string_representation = pv_get_string_representation(*(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))), v16, v17, a3);
    int v8 = (string_representation + v15);
  }
  return v8;
}

uint64_t pv_buffer_size_for_string_representation(int8x16_t *a1, uint64_t a2)
{
  int8x16_t v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return pv_get_string_representation(v4, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(int8x16_t *a1, char *a2, size_t a3, uint64_t a4)
{
  int8x16_t v7 = *a1;
  int8x16_t v23 = a1[1];
  uint64_t v24 = a1->i64[0];
  int8x16_t v22 = vextq_s8(v7, v7, 8uLL);
  if (a2) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = 0;
  }
  int string_representation = pv_get_string_representation(*(double *)v7.i64, a2, v8, a4);
  LODWORD(v1pthread_cond_init((pthread_cond_t *)this, 0) = string_representation;
  uint64_t v11 = 0;
  int v12 = 1;
  *(void *)&long long v13 = v24;
  *((void *)&v13 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v22.i64[0];
  long long v25 = v13;
  do
  {
    uint64_t v14 = v11 + string_representation;
    if (a2) {
      size_t v15 = &a2[v14];
    }
    else {
      size_t v15 = 0;
    }
    if (a2) {
      size_t v16 = a3 - v14;
    }
    else {
      size_t v16 = 0;
    }
    int v17 = snprintf(v15, v16, ", ", *(_OWORD *)&v22);
    uint64_t v11 = v14 + v17;
    int v18 = v17 + v10;
    v26[0] = v25;
    v26[1] = v23;
    if (a2) {
      long long v19 = &a2[v11];
    }
    else {
      long long v19 = 0;
    }
    if (a2) {
      size_t v20 = a3 - v11;
    }
    else {
      size_t v20 = 0;
    }
    int string_representation = pv_get_string_representation(*((double *)v26 + (v12 & 3)), v19, v20, a4);
    uint64_t v10 = (string_representation + v18);
    ++v12;
  }
  while (v12 != 3);
  return v10;
}

uint64_t pv_buffer_size_for_string_representation(long long *a1, uint64_t a2)
{
  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return pv_get_string_representation(v4, 0, 0, a2) + 1;
}

{
  long long v2;
  long long v4[2];

  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return pv_get_string_representation(v4, 0, 0, a2) + 1;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v6[4];

  long long v2 = *a1;
  long long v3 = a1[1];
  double v4 = a1[3];
  int8x16_t v6[2] = a1[2];
  v6[3] = v4;
  v6[0] = v2;
  v6[1] = v3;
  return pv_get_string_representation(v6, 0, 0, a2) + 1;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v6[4];

  long long v2 = *a1;
  long long v3 = a1[1];
  double v4 = a1[3];
  int8x16_t v6[2] = a1[2];
  v6[3] = v4;
  v6[0] = v2;
  v6[1] = v3;
  return pv_get_string_representation(v6, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(long long *a1, char *a2, size_t a3, uint64_t a4)
{
  if (a2) {
    size_t v7 = a3;
  }
  else {
    size_t v7 = 0;
  }
  long long v20 = *a1;
  long long v21 = a1[1];
  int string_representation = pv_get_string_representation(*(double *)a1, a2, v7, a4);
  LODWORD(v9) = string_representation;
  uint64_t v10 = 0;
  for (int i = 1; i != 4; ++i)
  {
    uint64_t v12 = v10 + string_representation;
    if (a2) {
      long long v13 = &a2[v12];
    }
    else {
      long long v13 = 0;
    }
    if (a2) {
      size_t v14 = a3 - v12;
    }
    else {
      size_t v14 = 0;
    }
    int v15 = snprintf(v13, v14, ", ", v20, v21, v22, v23);
    uint64_t v10 = v12 + v15;
    int v16 = v15 + v9;
    long long v22 = v20;
    long long v23 = v21;
    if (a2) {
      int v17 = &a2[v10];
    }
    else {
      int v17 = 0;
    }
    if (a2) {
      size_t v18 = a3 - v10;
    }
    else {
      size_t v18 = 0;
    }
    int string_representation = pv_get_string_representation(*((double *)&v22 + (i & 3)), v17, v18, a4);
    uint64_t v9 = (string_representation + v16);
  }
  return v9;
}

{
  size_t v7;
  int string_representation;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  size_t v18;
  long long v20;
  long long v21;
  long long v22;
  long long v23;

  if (a2) {
    size_t v7 = a3;
  }
  else {
    size_t v7 = 0;
  }
  long long v20 = *a1;
  long long v21 = a1[1];
  int string_representation = pv_get_string_representation(COERCE_FLOAT(*a1), a2, v7, a4);
  LODWORD(v9) = string_representation;
  uint64_t v10 = 0;
  for (int i = 1; i != 8; ++i)
  {
    uint64_t v12 = v10 + string_representation;
    if (a2) {
      long long v13 = &a2[v12];
    }
    else {
      long long v13 = 0;
    }
    if (a2) {
      size_t v14 = a3 - v12;
    }
    else {
      size_t v14 = 0;
    }
    int v15 = snprintf(v13, v14, ", ", v20, v21, v22, v23);
    uint64_t v10 = v12 + v15;
    int v16 = v15 + v9;
    long long v22 = v20;
    long long v23 = v21;
    if (a2) {
      int v17 = &a2[v10];
    }
    else {
      int v17 = 0;
    }
    if (a2) {
      size_t v18 = a3 - v10;
    }
    else {
      size_t v18 = 0;
    }
    int string_representation = pv_get_string_representation(*((float *)&v22 + (i & 7)), v17, v18, a4);
    uint64_t v9 = (string_representation + v16);
  }
  return v9;
}

{
  size_t v7;
  int string_representation;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  size_t v18;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  _OWORD v24[4];

  long long v22 = a1[2];
  long long v23 = a1[3];
  if (a2) {
    size_t v7 = a3;
  }
  else {
    size_t v7 = 0;
  }
  long long v20 = *a1;
  long long v21 = a1[1];
  int string_representation = pv_get_string_representation(*(double *)a1, a2, v7, a4);
  LODWORD(v9) = string_representation;
  uint64_t v10 = 0;
  for (int i = 1; i != 8; ++i)
  {
    uint64_t v12 = v10 + string_representation;
    if (a2) {
      long long v13 = &a2[v12];
    }
    else {
      long long v13 = 0;
    }
    if (a2) {
      size_t v14 = a3 - v12;
    }
    else {
      size_t v14 = 0;
    }
    int v15 = snprintf(v13, v14, ", ", v20, v21);
    uint64_t v10 = v12 + v15;
    int v16 = v15 + v9;
    v24[0] = v20;
    v24[1] = v21;
    long long v24[2] = v22;
    v24[3] = v23;
    if (a2) {
      int v17 = &a2[v10];
    }
    else {
      int v17 = 0;
    }
    if (a2) {
      size_t v18 = a3 - v10;
    }
    else {
      size_t v18 = 0;
    }
    int string_representation = pv_get_string_representation(*((double *)v24 + (i & 7)), v17, v18, a4);
    uint64_t v9 = (string_representation + v16);
  }
  return v9;
}

{
  size_t v7;
  int string_representation;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  size_t v18;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  _OWORD v24[4];

  long long v22 = a1[2];
  long long v23 = a1[3];
  if (a2) {
    size_t v7 = a3;
  }
  else {
    size_t v7 = 0;
  }
  long long v20 = *a1;
  long long v21 = a1[1];
  int string_representation = pv_get_string_representation(COERCE_FLOAT(*a1), a2, v7, a4);
  LODWORD(v9) = string_representation;
  uint64_t v10 = 0;
  for (int i = 1; i != 16; ++i)
  {
    uint64_t v12 = v10 + string_representation;
    if (a2) {
      long long v13 = &a2[v12];
    }
    else {
      long long v13 = 0;
    }
    if (a2) {
      size_t v14 = a3 - v12;
    }
    else {
      size_t v14 = 0;
    }
    int v15 = snprintf(v13, v14, ", ", v20, v21);
    uint64_t v10 = v12 + v15;
    int v16 = v15 + v9;
    v24[0] = v20;
    v24[1] = v21;
    long long v24[2] = v22;
    v24[3] = v23;
    if (a2) {
      int v17 = &a2[v10];
    }
    else {
      int v17 = 0;
    }
    if (a2) {
      size_t v18 = a3 - v10;
    }
    else {
      size_t v18 = 0;
    }
    int string_representation = pv_get_string_representation(*((float *)v24 + (i & 0xF)), v17, v18, a4);
    uint64_t v9 = (string_representation + v16);
  }
  return v9;
}

void sub_1B7476E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7477268(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1B74774A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVRenderer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B7477668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7477820(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1B7477A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7477CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (*v10) {
    (*(void (**)(void))(*(void *)*v10 + 24))(*v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7478068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B747829C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74783F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74784A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74787A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 24))(a6);
  }
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<HGRef<PVCVPixelBufferPool>>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void PVCVPixelBufferPool::PVCVPixelBufferPool(PVCVPixelBufferPool *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  HGObject::HGObject(this);
  *(void *)uint64_t v8 = &unk_1F1089C60;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  uint64_t v9 = (void *)MEMORY[0x1E4F24D20];
  *(_DWORD *)(v8 + 32) = a4;
  v16[0] = MEMORY[0x1E4F1CC08];
  uint64_t v10 = *MEMORY[0x1E4F24D70];
  v15[0] = *v9;
  v15[1] = v10;
  uint64_t v11 = [NSNumber numberWithUnsignedInt:a4];
  v16[1] = v11;
  v15[2] = *MEMORY[0x1E4F24E10];
  uint64_t v12 = [NSNumber numberWithUnsignedLong:a2];
  void v16[2] = v12;
  float v15[3] = *MEMORY[0x1E4F24D08];
  long long v13 = [NSNumber numberWithUnsignedLong:a3];
  v16[3] = v13;
  CFDictionaryRef v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:4];

  if (CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v14, (CVPixelBufferPoolRef *)this + 5))
  {
    NSLog(&cfstr_UnableToCreate.isa);
    *((void *)this + 5) = 0;
  }
}

void sub_1B7478B74(_Unwind_Exception *a1)
{
  size_t v5 = v4;

  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

void PVCVPixelBufferPool::~PVCVPixelBufferPool(PVCVPixelBufferPool *this)
{
  PVCVPixelBufferPool::~PVCVPixelBufferPool(this);

  HGObject::operator delete(v1);
}

{
  __CVPixelBufferPool *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1089C60;
  uint64_t v2 = (__CVPixelBufferPool *)*((void *)this + 5);
  if (v2) {
    CVPixelBufferPoolRelease(v2);
  }

  HGObject::~HGObject(this);
}

uint64_t std::vector<HGRef<PVCVPixelBufferPool>>::__push_back_slow_path<HGRef<PVCVPixelBufferPool> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  int v16 = v11;
  int v17 = &v10[8 * v9];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v11 = v16;
  }
  int v16 = v11 + 8;
  std::vector<HGRef<PVCVPixelBufferPool>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<HGRef<PVCVPixelBufferPool>>::~__split_buffer(v15);
  return v13;
}

void sub_1B7478D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<HGRef<PVCVPixelBufferPool>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<HGRef<PVCVPixelBufferPool>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v11 = *(void *)(v9 - 8);
      v9 -= 8;
      uint64_t v10 = v11;
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t v7 = *((void *)&v17 + 1);
      }
      v7 -= 8;
      *((void *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B7478E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(uint64_t **)(result[2] + 8);
  uint64_t v2 = *(uint64_t **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
      uint64_t result = (uint64_t *)std::allocator<HGRef<PVCVPixelBufferPool>>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<HGRef<PVCVPixelBufferPool>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<HGRef<PVCVPixelBufferPool>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 8;
      uint64_t result = std::allocator<HGRef<PVCVPixelBufferPool>>::destroy[abi:ne180100](v4, (uint64_t *)(v1 - 8));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<HGRef<PVCVPixelBufferPool>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<HGRef<PVCVPixelBufferPool>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B74790BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7479178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7479250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74792EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7479844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v38 = *(void *)(v36 - 144);
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  if (*v35) {
    (*(void (**)(void))(*(void *)*v35 + 24))(*v35);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a35);
  _Unwind_Resume(a1);
}

void sub_1B7479A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7479AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7479B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7479CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7479E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747AAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  if (STACK[0x258]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x258] + 24))(STACK[0x258]);
  }

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v17 - 128));
  _Unwind_Resume(a1);
}

void sub_1B747AF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747B200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747B490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747B670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747B6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVEffect;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B747B82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747BCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747BD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747BDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747BE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747BE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747BF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C06C(_Unwind_Exception *a1)
{
}

void sub_1B747C10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747C160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747C4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747C5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1B747C714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747C914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747CB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B747CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747CC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVLogError(void *a1, void *a2, void *a3)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (a3)
  {
    uint64_t v8 = *MEMORY[0x1E4F28568];
    v9[0] = v5;
    uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
    *a3 = [MEMORY[0x1E4F28C58] errorWithDomain:v6 code:-1 userInfo:v7];
  }
}

void sub_1B747CE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747D0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B747DA3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B747DEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747E0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747E210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<HGRef<HGBitmap>>::__push_back_slow_path<HGRef<HGBitmap> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  long long v16 = v11;
  uint64_t v17 = &v10[8 * v9];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v11 = v16;
  }
  long long v16 = v11 + 8;
  std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer(v15);
  return v13;
}

void sub_1B747E490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B747E8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);

  _Unwind_Resume(a1);
}

void sub_1B747ECB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747EDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747EF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747EF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747F068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B747F12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747F208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B747F36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B747F490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747F544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747F664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  _Unwind_Resume(a1);
}

void sub_1B747F76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747F8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1B747FABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B747FBD8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B747FC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747FDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B747FF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748004C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7480090()
{
}

id CreatePVLPThrottlingControlParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = +[PVLivePlayerThrottlingControlParameters CreateControllerParameters:a1 :a2 :a3];

  return v3;
}

void sub_1B7480358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  if (v19)
  {
  }
  if (v17)
  {
  }
  if (v14)
  {
  }
  _Unwind_Resume(a1);
}

void sub_1B74804AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7480554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7480660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7480734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7480868(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B74809C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B7480A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7480BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B7480CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7480F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVLivePlayerThrottlingControlParameters * {__strong}>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVLivePlayerThrottlingControlParameters * {__strong}>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVLivePlayerThrottlingControlParameters * {__strong}>>>::__erase_unique<PVSPI_OSThermalPressureLevel>(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v22 = *(a2 - 1);
          int v23 = *v11;
          if (v22 < *v11)
          {
            *uint64_t v11 = v22;
            *(a2 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v23;
          }
          break;
        case 3uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          __n128 result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,PVSPI_OSThermalPressureLevel *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v17 - 1, v17, &v11[v16 + 1]);
      int v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) >= *v11)
    {
      __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(v11, a2);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    long long v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v11, v19);
    uint64_t v11 = v19 + 1;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  uint64_t v24 = v11 + 1;
  BOOL v26 = v11 == a2 || v24 == a2;
  if (a5)
  {
    if (!v26)
    {
      uint64_t v27 = 0;
      uint64_t v28 = v11;
      do
      {
        int v30 = *v28;
        int v29 = v28[1];
        uint64_t v28 = v24;
        if (v29 < v30)
        {
          uint64_t v31 = v27;
          while (1)
          {
            *(int *)((char *)v11 + v31 + 4) = v30;
            if (!v31) {
              break;
            }
            int v30 = *(int *)((char *)v11 + v31 - 4);
            v31 -= 4;
            if (v29 >= v30)
            {
              long long v32 = (int *)((char *)v11 + v31 + 4);
              goto LABEL_50;
            }
          }
          long long v32 = v11;
LABEL_50:
          int *v32 = v29;
        }
        uint64_t v24 = v28 + 1;
        v27 += 4;
      }
      while (v28 + 1 != a2);
    }
  }
  else if (!v26)
  {
    do
    {
      int v34 = *v10;
      int v33 = v10[1];
      uint64_t v10 = v24;
      if (v33 < v34)
      {
        do
        {
          *uint64_t v24 = v34;
          int v34 = *(v24 - 2);
          --v24;
        }
        while (v33 < v34);
        *uint64_t v24 = v33;
      }
      uint64_t v24 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  int v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    int v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    int v5 = a1 + 1;
    do
    {
      int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      int v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    int v7 = *v3;
    int v8 = *a2;
    do
    {
      *int v3 = v8;
      *a2 = v7;
      do
      {
        int v9 = v3[1];
        ++v3;
        int v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        int v10 = *--a2;
        int v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(int *a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  do
    int v4 = a1[++v2];
  while (v4 < v3);
  int v5 = &a1[v2];
  int v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      int v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      int v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    int v9 = *a2;
    int v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *int v10 = v9;
      *uint64_t v11 = v4;
      do
      {
        int v12 = v10[1];
        ++v10;
        int v4 = v12;
      }
      while (v12 < v3);
      do
      {
        int v13 = *--v11;
        int v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    int v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *int v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          unint64_t v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a2, a3);
  int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a2, a3, a4);
  int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      int v14 = v6;
      do
      {
        int v15 = *v14;
        if (*v14 < *a1)
        {
          *int v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        int v18 = *a1;
        long long v19 = a1;
        do
        {
          char v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            int v22 = *v20;
            uint64_t v17 = v21;
          }
          else
          {
            int v22 = *v20;
            int v23 = v20[1];
            if (*v20 <= v23) {
              int v22 = v20[1];
            }
            if (*v20 >= v23) {
              uint64_t v17 = v21;
            }
            else {
              ++v20;
            }
          }
          *long long v19 = v22;
          long long v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *char v20 = v18;
        }
        else
        {
          *char v20 = *v6;
          *int v6 = v18;
          uint64_t v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            unint64_t v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            BOOL v26 = &a1[v25];
            int v27 = *v26;
            int v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *char v20 = v27;
                char v20 = v26;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                BOOL v26 = &a1[v25];
                int v27 = *v26;
              }
              while (*v26 < v28);
              *char v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        int v10 = *v8;
      }
      else
      {
        int v10 = *v8;
        int v11 = v8[1];
        if (*v8 <= v11) {
          int v10 = v8[1];
        }
        if (*v8 < v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      int v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 4 * v13);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v10 = *v8;
            uint64_t v7 = v13;
          }
          else
          {
            int v10 = *v8;
            int v14 = v8[1];
            if (*v8 <= v14) {
              int v10 = v8[1];
            }
            if (*v8 >= v14) {
              uint64_t v7 = v13;
            }
            else {
              ++v8;
            }
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

void sub_1B7481E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74820A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7482170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7482708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7482864(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40BBCAB520);
  _Unwind_Resume(a1);
}

void sub_1B7482B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v9 - 48));
  a9.super_class = (Class)PVVideoCompositing;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B7482D48(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1B7482FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7483138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1B7483384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748396C(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void *)(v5 - 128);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }

  _Unwind_Resume(a1);
}

void sub_1B7483AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void sub_1B7483CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

uint64_t __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1BA9C0C60](*(void *)(a2 + 40));
  *(void *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = result;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_1B7484274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);

  _Unwind_Resume(a1);
}

void sub_1B7484360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74844B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B7484554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B7484844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7484904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7484AD4(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void sub_1B7484CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PVCameraPreviewRequest;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B7484EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HGRenderNode *PVCameraPreviewRenderNode::PVCameraPreviewRenderNode(HGRenderNode *a1, void *a2)
{
  id v3 = a2;
  HGRenderNode::HGRenderNode(a1);
  *(void *)a1 = &unk_1F1089CF0;
  *((void *)a1 + 26) = MEMORY[0x1BA9C0C60](v3);

  return a1;
}

void sub_1B74850C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVCameraPreviewRenderNode::Notify(PVCameraPreviewRenderNode *this, HGRenderNode *a2)
{
  uint64_t v2 = this;
  id v3 = (void *)MEMORY[0x1BA9C0A20](this, a2);
  if (HGRenderNode::GetState(v2) == 9)
  {
    uint64_t Renderer = (const void *)HGRenderNode::GetRenderer(v2);
    if (Renderer) {
    else
    }
      unint64_t v5 = 0;
    uint64_t v6 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v2);
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 104))(v5, v6);
    if (v2) {
    uint64_t v8 = [PVRenderedTexture alloc];
    }
    uint64_t v12 = v7;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
    uint64_t v9 = [(PVRenderedTexture *)v8 initWithHGGLTexture:&v12];
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
    }
    uint64_t v10 = MEMORY[0x1BA9C0C60](*((void *)v2 + 26));
    int v11 = (void *)v10;
    if (v10) {
      (*(void (**)(uint64_t, PVRenderedTexture *))(v10 + 16))(v10, v9);
    }

    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    }
  }
}

void sub_1B74852DC(_Unwind_Exception *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

void PVCameraPreviewGraphBuildJob::PVCameraPreviewGraphBuildJob(HGRenderJob *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  HGRenderJob::HGRenderJob(a1);
}

void sub_1B7485424(_Unwind_Exception *a1)
{
  HGRenderJob::~HGRenderJob(v3);

  _Unwind_Resume(a1);
}

void PVCameraPreviewGraphBuildJob::~PVCameraPreviewGraphBuildJob(id *this)
{
  *this = &unk_1F1089D40;

  id v2 = this[44];
  if (v2) {
    (*(void (**)(id))(*(void *)v2 + 24))(v2);
  }

  HGRenderJob::~HGRenderJob((HGRenderJob *)this);
}

{
  void *v1;
  uint64_t vars8;

  PVCameraPreviewGraphBuildJob::~PVCameraPreviewGraphBuildJob(this);

  HGObject::operator delete(v1);
}

void PVCameraPreviewGraphBuildJob::NewRenderNode(PVCameraPreviewGraphBuildJob *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  id v3 = (void *)*((void *)this + 45);
  if (v3)
  {
    [v3 time];
    id v3 = (void *)*((void *)this + 45);
  }
  [v3 effects];
  objc_claimAutoreleasedReturnValue();
  unint64_t v4 = (opaqueCMSampleBuffer *)[*((id *)this + 45) sampleBuffer];
  uint64_t v5 = *((void *)this + 44);
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 16))(*((void *)this + 44));
  }
  uint64_t v12 = (HGRenderJob *)this;
  ImageBuffer = CMSampleBufferGetImageBuffer(v4);
  unsigned int Width = CVPixelBufferGetWidth(ImageBuffer);
  unsigned int Height = CVPixelBufferGetHeight(ImageBuffer);
  HGRectMake4i(0, 0, Width, Height);
  uint64_t Renderer = (const void *)HGRenderJob::GetRenderer(v12);
  if (Renderer)
  {
    if (v10) {
      (*(void (**)(void *))(*(void *)v10 + 16))(v10);
    }
  }
  int v11 = (PVInstructionGraphContext *)HGObject::operator new(0x88uLL);
  PVInstructionGraphContext::PVInstructionGraphContext(v11, *((PVVideoCompositingContext **)v12 + 47));
}

void sub_1B7485EC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void PVCameraPreviewGraphBuildJob::Notify(HGRenderJob *this, HGRenderJob *a2)
{
  id v3 = (void *)MEMORY[0x1BA9C0A20](this, a2);
  int State = HGRenderJob::GetState(this);
  if (this)
  {
    if (State == 4)
    {
      if (v5) {
        PVCameraPreviewGraphBuildJob::NewRenderNode(v5, &v6);
      }
    }
  }
}

void sub_1B74864B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

void sub_1B7486670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1B7486708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PVCameraPreviewRenderer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B748693C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }

  _Unwind_Resume(a1);
}

void PVCameraPreviewRenderNode::~PVCameraPreviewRenderNode(id *this)
{
  HGRenderNode::~HGRenderNode((HGRenderNode *)this);
}

{
  void *v2;
  uint64_t vars8;

  HGRenderNode::~HGRenderNode((HGRenderNode *)this);

  HGObject::operator delete(v2);
}

void PVPreviewInstructionGraphContext::~PVPreviewInstructionGraphContext(PVInstructionGraphContext *this)
{
  PVInstructionGraphContext::~PVInstructionGraphContext(this);

  HGObject::operator delete(v1);
}

double PVPreviewInstructionGraphContext::RenderSize(PVPreviewInstructionGraphContext *this)
{
  return *((double *)this + 15);
}

float PVPreviewInstructionGraphContext::RenderScale(PVPreviewInstructionGraphContext *this)
{
  return 1.0;
}

__n128 PVPreviewInstructionGraphContext::RenderTransform@<Q0>(uint64_t a1@<X8>)
{
  id v2 = (__n128 *)MEMORY[0x1E4F1DAB8];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = v2[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t PVPreviewInstructionGraphContext::HighQualityRendering(PVPreviewInstructionGraphContext *this)
{
  return 0;
}

CMTime *PVPreviewInstructionGraphContext::AnimationFrameDuration@<X0>(CMTime *a1@<X8>)
{
  return CMTimeMake(a1, 1, 30);
}

void *PVPreviewInstructionGraphContext::DotGraphLabel@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Camera Renderer Context");
}

void sub_1B7486BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7486CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7487120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1B74871D4()
{
}

void sub_1B74871DC()
{
}

void sub_1B748CD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748D248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748D5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B748D780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1B748D974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748DB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748DE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  for (uint64_t i = 8; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_1B748DF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748E274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748E598(_Unwind_Exception *a1)
{
}

void sub_1B748E6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748E778(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B748E9F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748EA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B748EB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B748ECF0(_Unwind_Exception *exception_object)
{
}

void sub_1B748EFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVMotionEffect;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B748F088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748F10C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B748F4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B748F944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748FBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B748FCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7490144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74901C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7490294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B7490344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B74904A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7492B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,uint64_t a47,void *a48)
{
  int8x16_t v51 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v51;
    operator delete(v51);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x330], (void *)STACK[0x338]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x348], (void *)STACK[0x350]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x360], (void *)STACK[0x368]);
  std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy((uint64_t)&STACK[0x378], (void *)STACK[0x380]);

  if (*a45) {
    (*(void (**)(void))(*(void *)*a45 + 24))(*a45);
  }
  _Unwind_Resume(a1);
}

__n128 PVInputHGNodeMap<unsigned int>::GetPixelTransform@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v3 = a1 + 56;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    long long v11 = *(_OWORD *)(v6 + 120);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v6 + 104);
    *(_OWORD *)(a3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v11;
    long long v12 = *(_OWORD *)(v6 + 152);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(v6 + 136);
    *(_OWORD *)(a3 + 112) = v12;
    long long v13 = *(_OWORD *)(v6 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(a3 + 16) = v13;
    __n128 result = *(__n128 *)(v6 + 72);
    long long v14 = *(_OWORD *)(v6 + 88);
    *(__n128 *)(a3 + 32) = result;
    *(_OWORD *)(a3 + 48) = v14;
  }
  else
  {
LABEL_12:
    *(void *)(a3 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
    *(void *)(a3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
    *(void *)(a3 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
    *(void *)a3 = 0x3FF0000000000000;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
  }
  return result;
}

void sub_1B7493598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74937A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74942D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }

  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }

  _Unwind_Resume(a1);
}

void sub_1B74950D4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v3);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }

  _Unwind_Resume(a1);
}

void sub_1B74953E4()
{
}

void sub_1B74955E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7495878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v12);

  _Unwind_Resume(a1);
}

void sub_1B7495CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);

  _Unwind_Resume(a1);
}

void sub_1B749612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B74962AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);

  _Unwind_Resume(a1);
}

void sub_1B7496518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7496614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_1B7496828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7496B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  PCString::~PCString(&a18);

  _Unwind_Resume(a1);
}

void sub_1B7497104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  _Unwind_Resume(a1);
}

void sub_1B749733C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7497830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  _Unwind_Resume(a1);
}

void sub_1B7497998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

void sub_1B7497A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

void sub_1B7497BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B7497CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7497DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2145(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B7498024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7498330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74985A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74986F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74987F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7498AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7498C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7498D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7498F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7499098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74991FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B7499370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B749957C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74996D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);

  _Unwind_Resume(a1);
}

void sub_1B74997D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B7499990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B7499A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B7499BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B7499D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B7499DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749A100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749A170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749A260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749A388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749A46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id a49)
{
  OZARFrameInfo::~OZARFrameInfo(&a49);
  _Unwind_Resume(a1);
}

void sub_1B749AAD8()
{
}

void sub_1B749AAE4()
{
}

void sub_1B749AAF0()
{
}

void sub_1B749AAFC()
{
}

void sub_1B749AB08()
{
  JUMPOUT(0x1B749AAB8);
}

void sub_1B749AB28()
{
}

void sub_1B749AB38()
{
}

void sub_1B749AB48()
{
}

void OZARFrameInfo::~OZARFrameInfo(id *this)
{
}

void PVMotionDocumentInfo::~PVMotionDocumentInfo(PVMotionDocumentInfo *this)
{
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*((void *)this + 21), *(void **)(v2 + 8));
    MEMORY[0x1BA9BFBA0](v2, 0x1020C4062D53EE8);
    *((void *)this + 2HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
  }
}

CGColorSpace **PCCFRef<CGColorSpace *>::operator=(CGColorSpace **a1, CGColorSpace **a2)
{
  long long v3 = *a1;
  uint64_t v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      PCCFRefTraits<CGColorSpace *>::release(v3);
      uint64_t v4 = *a2;
    }
    *a1 = v4;
    if (*a2) {
      PCCFRefTraits<CGColorSpace *>::retain(v4);
    }
  }
  return a1;
}

uint64_t *std::map<unsigned int,HGRef<HGNode>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned int,HGRef<HGNode>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,HGRef<HGNode>>,std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *> *,long>>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B749AE54(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,HGRef<HGNode>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,HGRef<HGNode>>,std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,HGRef<HGNode>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      unsigned int v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unsigned int v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,HGRef<HGNode>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__construct_node<std::pair<unsigned int const,HGRef<HGNode>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    BOOL v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__construct_node<std::pair<unsigned int const,HGRef<HGNode>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  uint64_t result = *(void *)(a2 + 8);
  *((void *)v6 + 5) = result;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B749B1BC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned int,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B749B214(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      unsigned int v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unsigned int v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  unsigned int v6 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unsigned int v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    BOOL v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::map<unsigned int,PCRect<double>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<unsigned int,PCRect<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCRect<double>>,std::__tree_node<std::__value_type<unsigned int,PCRect<double>>,void *> *,long>>>((_OWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B749B528(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<unsigned int,PCRect<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCRect<double>>,std::__tree_node<std::__value_type<unsigned int,PCRect<double>>,void *> *,long>>>(_OWORD *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = (uint64_t *)result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCRect<double>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      unsigned int v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unsigned int v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCRect<double>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6 = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x48uLL);
    long long v9 = *(_OWORD *)(a4 + 16);
    long long v7[2] = *(_OWORD *)a4;
    void v7[3] = v9;
    *((void *)v7 + 8) = *(void *)(a4 + 32);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::map<unsigned int,PCMatrix44Tmpl<double>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<unsigned int,PCMatrix44Tmpl<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__tree_node<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,void *> *,long>>>((_OWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B749B69C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<unsigned int,PCMatrix44Tmpl<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__tree_node<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,void *> *,long>>>(_OWORD *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = (uint64_t *)result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCMatrix44Tmpl<double>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      unsigned int v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unsigned int v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCMatrix44Tmpl<double>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6 = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(a1, a2, &v15, &v14, a3);
  unsigned int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0xA8uLL);
    long long v9 = *(_OWORD *)(a4 + 112);
    int64x2_t v7[8] = *(_OWORD *)(a4 + 96);
    v7[9] = v9;
    *((void *)v7 + 2pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a4 + 128);
    long long v10 = *(_OWORD *)(a4 + 48);
    void v7[4] = *(_OWORD *)(a4 + 32);
    v7[5] = v10;
    long long v11 = *(_OWORD *)(a4 + 80);
    v7[6] = *(_OWORD *)(a4 + 64);
    v7[7] = v11;
    long long v12 = *(_OWORD *)(a4 + 16);
    long long v7[2] = *(_OWORD *)a4;
    void v7[3] = v12;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v15, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    unsigned int v6 = *result;
    unsigned int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    long long v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      BOOL v8 = (uint64_t *)v6[1];
    }
    else {
      BOOL v8 = v6;
    }
    uint64_t v14 = result;
    unsigned int v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      unsigned int v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__node_insert_multi(v5, (uint64_t)v8);
          BOOL v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            unsigned int v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          long long v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              long long v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          long long v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_multi<std::pair<unsigned int const,unsigned int> const&>(v5, (void *)((char *)a2 + 28));
      long long v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B749B940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  long long v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_multi<std::pair<unsigned int const,unsigned int> const&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  uint64_t v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  unsigned int v6 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        unsigned int v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= v5) {
          break;
        }
        unsigned int v7 = (uint64_t *)*v7;
        BOOL v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unsigned int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    BOOL v8 = v6 + 1;
  }
  else
  {
    BOOL v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void sub_1B749C1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749C71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749CE5C(_Unwind_Exception *a1)
{
}

PVNCLCTriplet *MakePVNCLCTriplet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = [[PVNCLCTriplet alloc] initWithColorPrimaryStr:a1 hgColorPrimary:a2 transferFunctionStr:a3 hgTransformFunction:a4 ycbcrMatrixStr:a5 hgYCbCrMatrix:a6];

  return v6;
}

void sub_1B749D018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749D488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CGColorSpaceRef makeColorSpaceFromNCLC(const __CFString *a1, const __CFString *a2, const __CFString *a3)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  long long v3 = (void *)*MEMORY[0x1E4F24BC8];
  keys[0] = *(void **)MEMORY[0x1E4F24A90];
  keys[1] = v3;
  keys[2] = *(void **)MEMORY[0x1E4F24C18];
  values[0] = (void *)a1;
  values[1] = (void *)a2;
  values[2] = (void *)a3;
  CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CGColorSpaceRef ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v6);
  PCCFRef<__CFDictionary const*>::~PCCFRef((const void **)&v6);
  return ColorSpaceFromAttachments;
}

void sub_1B749D55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_1B749D5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749D684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

const void **PCCFRef<__CFDictionary const*>::~PCCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1B749D948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749D9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ApplyTransformToYUVConform(void *a1, void *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v6);
  (*(void (**)(HGXForm *, void))(*(void *)v6 + 576))(v6, *a2);
  unsigned int v7 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v7);
  (*(void (**)(HGTransform *))(*(void *)v7 + 56))(v7);
  (*(void (**)(void, unsigned char *))(*(void *)*a2 + 40))(*a2, v17);
  (*(void (**)(HGTransform *, unsigned char *))(*(void *)v7 + 64))(v7, v17);
  BOOL v8 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v8);
  (*(void (**)(HGXForm *, HGTransform *))(*(void *)v8 + 576))(v8, v7);
  uint64_t v9 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 128))(*a1, 0);
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 128))(*a1, 1);
  uint64_t v11 = v10;
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  uint64_t v13 = !v12;
  if (!v12)
  {
    (*(void (**)(HGXForm *, void, uint64_t))(*(void *)v6 + 120))(v6, 0, v9);
    (*(void (**)(HGXForm *, void, uint64_t))(*(void *)v8 + 120))(v8, 0, v11);
    if (a3)
    {
      +[PVEnvironment PVExportPrefilterValue];
      (*(void (**)(HGXForm *, void))(*(void *)v6 + 592))(v6, 0);
      +[PVEnvironment PVExportPrefilterValue];
      float v15 = v14;
    }
    else
    {
      float v15 = 0.0;
      (*(void (**)(HGXForm *, void, double))(*(void *)v6 + 592))(v6, 0, 0.0);
    }
    (*(void (**)(HGXForm *, void, float))(*(void *)v8 + 592))(v8, 0, v15);
    (*(void (**)(void, void, HGXForm *))(*(void *)*a1 + 120))(*a1, 0, v6);
    (*(void (**)(void, uint64_t, HGXForm *))(*(void *)*a1 + 120))(*a1, 1, v8);
  }
  (*(void (**)(HGXForm *))(*(void *)v8 + 24))(v8);
  (*(void (**)(HGTransform *))(*(void *)v7 + 24))(v7);
  (*(void (**)(HGXForm *))(*(void *)v6 + 24))(v6);
  return v13;
}

void sub_1B749DE00(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HGXFormForHGTransform@<X0>(const void **a1@<X0>, void *a2@<X1>, int a3@<W2>, HGXForm **a4@<X8>)
{
  BOOL v8 = (HGXForm *)*a1;
  *a4 = v8;
  if (v8) {
    (*(void (**)(HGXForm *))(*(void *)v8 + 16))(v8);
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 224))();
  if (!result)
  {
    uint64_t v10 = (uint64_t *)*a1;
    if (!v10)
    {
      uint64_t v13 = 0;
      goto LABEL_12;
    }
    (*(void (**)(uint64_t *))(*v10 + 16))(v10);
    uint64_t v11 = *v10;
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t *, void))(v11 + 128))(v10, 0);
      uint64_t v13 = (uint64_t *)v12;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      }
      float v14 = *(void (**)(uint64_t *))(*v10 + 24);
      if (v10 == v13)
      {
        v14(v10);
      }
      else
      {
        v14(v10);
        if (!v13)
        {
          uint64_t v10 = 0;
          goto LABEL_12;
        }
        uint64_t v10 = v13;
      }
    }
    uint64_t v18 = *v10;
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t *, void))(v18 + 128))(v10, 0);
      uint64_t v13 = (uint64_t *)v19;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
      }
      uint64_t v20 = *(void (**)(uint64_t *))(*v10 + 24);
      if (v10 == v13)
      {
        v20(v10);
      }
      else
      {
        v20(v10);
        uint64_t v10 = v13;
        if (!v13)
        {
LABEL_12:
          char v15 = 1;
          if (a3) {
            goto LABEL_13;
          }
          goto LABEL_24;
        }
      }
    }
    char v15 = 0;
    if (a3)
    {
LABEL_13:
      +[PVEnvironment PVExportPrefilterValue];
      BOOL v17 = v16 <= 0.0;
      if (!v13) {
        goto LABEL_35;
      }
      goto LABEL_25;
    }
LABEL_24:
    BOOL v17 = 1;
    if (!v13)
    {
LABEL_35:
      int v23 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v23);
      (*(void (**)(HGXForm *, void))(*(void *)v23 + 576))(v23, *a2);
      uint64_t v24 = *a4;
      (*(void (**)(HGXForm *, void, HGXForm *))(*(void *)v23 + 120))(v23, 0, *a4);
      v25.n128_u64[0] = 0;
      if (a3) {
        +[PVEnvironment PVExportPrefilterValue];
      }
      (*(void (**)(HGXForm *, void, __n128))(*(void *)v23 + 592))(v23, 0, v25);
      if (v24 != v23)
      {
        if (v24) {
          (*(void (**)(HGXForm *))(*(void *)v24 + 24))(v24);
        }
        *a4 = v23;
        (*(void (**)(HGXForm *))(*(void *)v23 + 16))(v23);
      }
      uint64_t result = (*(uint64_t (**)(HGXForm *))(*(void *)v23 + 24))(v23);
LABEL_42:
      if ((v15 & 1) == 0) {
        return (*(uint64_t (**)(uint64_t *))(*v10 + 24))(v10);
      }
      return result;
    }
LABEL_25:
    if (v17)
    {
      int v27 = v10;
      if ((v15 & 1) == 0) {
        (*(void (**)(uint64_t *))(*v10 + 16))(v10);
      }
      uint64_t v21 = *a2;
      uint64_t v26 = v21;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
      }
      char v22 = ApplyTransformToYUVConform(&v27, &v26, a3);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
      }
      uint64_t result = (uint64_t)v27;
      if (v27) {
        uint64_t result = (*(uint64_t (**)(uint64_t *))(*v27 + 24))(v27);
      }
      if (v22) {
        goto LABEL_42;
      }
    }
    goto LABEL_35;
  }
  return result;
}

void sub_1B749E47C(_Unwind_Exception *a1)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t HGTransformForSIMDFloat4x4@<X0>(simd_float4x4 a1@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, HGTransform **a2@<X8>)
{
  simd_float4x4 v5 = a1;
  uint64_t v3 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v3);
  *a2 = v3;
  return (*(uint64_t (**)(HGTransform *, simd_float4x4 *))(*(void *)v3 + 80))(v3, &v5);
}

void sub_1B749E6AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGTransformForSIMDDouble4x4@<X0>(uint64_t a1@<X0>, HGTransform **a2@<X8>)
{
  uint64_t v4 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGTransform *, uint64_t))(*(void *)v4 + 88))(v4, a1);
}

void sub_1B749E760(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

const void **HGXFormForSIMDFloat4x4@<X0>(const void **result@<X0>, int a2@<W1>, HGXForm **a3@<X8>, simd_float4x4 a4@<0:Q0, 16:Q1, 32:Q2, 48:Q3>)
{
  uint64_t v4 = result;
  float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[1], *(float32x4_t *)(MEMORY[0x1E4F149A0] + 16))), (int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[0], *MEMORY[0x1E4F149A0]))), vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[2], *(float32x4_t *)(MEMORY[0x1E4F149A0] + 32))), (int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[3], *(float32x4_t *)(MEMORY[0x1E4F149A0] + 48)))))) & 0x80000000) != 0)
  {
    *a3 = (HGXForm *)*result;
    *uint64_t result = 0;
  }
  else
  {
    HGTransformForSIMDFloat4x4(a4, &v12);
    BOOL v8 = *v4;
    uint64_t v11 = v8;
    if (v8) {
      (*(void (**)(const void *))(*(void *)v8 + 16))(v8);
    }
    uint64_t v9 = v12;
    uint64_t v10 = v12;
    if (v12) {
      (*(void (**)(HGTransform *))(*(void *)v12 + 16))(v12);
    }
    uint64_t result = (const void **)HGXFormForHGTransform(&v11, &v10, a2, a3);
    if (v9) {
      uint64_t result = (const void **)(*(uint64_t (**)(HGTransform *))(*(void *)v9 + 24))(v9);
    }
    if (v8) {
      uint64_t result = (const void **)(*(uint64_t (**)(const void *))(*(void *)v8 + 24))(v8);
    }
    if (v9) {
      return (const void **)(*(uint64_t (**)(HGTransform *))(*(void *)v9 + 24))(v9);
    }
  }
  return result;
}

void sub_1B749E958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HGXFormForCGAffineTransform@<X0>(HGXForm **a1@<X0>, _OWORD *a2@<X1>, int a3@<W2>, HGXForm **a4@<X8>)
{
  long long v8 = a2[1];
  *(_OWORD *)&v17.CGPoint a = *a2;
  *(_OWORD *)&v17.CGPoint c = v8;
  *(_OWORD *)&v17.tdouble x = a2[2];
  uint64_t result = CGAffineTransformIsIdentity(&v17);
  if (result)
  {
    *a4 = *a1;
    *a1 = 0;
  }
  else
  {
    long long v10 = a2[1];
    long long v11 = a2[2];
    v18[0] = *a2;
    v18[1] = 0u;
    float64x2_t v18[2] = v10;
    memset(&v18[3], 0, 32);
    v18[5] = xmmword_1B7E733D0;
    v18[6] = v11;
    v18[7] = xmmword_1B7E733E0;
    HGTransformForSIMDDouble4x4((uint64_t)v18, &v16);
    uint64_t v12 = *a1;
    char v15 = v12;
    if (v12) {
      (*(void (**)(HGXForm *))(*(void *)v12 + 16))(v12);
    }
    uint64_t v13 = v16;
    float v14 = v16;
    if (v16) {
      (*(void (**)(HGTransform *))(*(void *)v16 + 16))(v16);
    }
    uint64_t result = HGXFormForHGTransform((const void **)&v15, &v14, a3, a4);
    if (v13) {
      uint64_t result = (*(uint64_t (**)(HGTransform *))(*(void *)v13 + 24))(v13);
    }
    if (v12) {
      uint64_t result = (*(uint64_t (**)(HGXForm *))(*(void *)v12 + 24))(v12);
    }
    if (v13) {
      return (*(uint64_t (**)(HGTransform *))(*(void *)v13 + 24))(v13);
    }
  }
  return result;
}

void sub_1B749EBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  _Unwind_Resume(exception_object);
}

void HGXFormForScaleAroundPoint(void *a1@<X0>, HGXForm **a2@<X8>, float64x2_t a3@<Q0>, double a4@<D1>, float64x2_t a5@<Q2>)
{
  HGTransform::HGTransform((HGTransform *)v12);
  HGTransform::LoadIdentity((HGTransform *)v12);
  HGTransform::Translate((HGTransform *)v12, -a3.f64[0], -a3.f64[1], 0.0);
  HGTransform::Scale((HGTransform *)v12, a4, a4, 1.0);
  float64x2_t v8 = vaddq_f64(a3, a5);
  HGTransform::Translate((HGTransform *)v12, v8.f64[0], v8.f64[1], 0.0);
  uint64_t v9 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v9);
  *a2 = v9;
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v9 + 576))(v9, v12);
  (*(void (**)(HGXForm *, void, void))(*(void *)v9 + 120))(v9, 0, *a1);
  HGTransform::~HGTransform((HGTransform *)v12);
}

void sub_1B749ED8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  HGObject::operator delete(v13);
  HGTransform::~HGTransform((HGTransform *)&a13);
  _Unwind_Resume(a1);
}

uint64_t HGRectMakeWithCGRect(CGRect a1)
{
  CGFloat height = a1.size.height;
  CGFloat width = a1.size.width;
  CGFloat y = a1.origin.y;
  CGFloat x = a1.origin.x;
  float MinX = CGRectGetMinX(a1);
  v12.origin.CGFloat x = x;
  v12.origin.CGFloat y = y;
  v12.size.CGFloat width = width;
  v12.size.CGFloat height = height;
  float MinY = CGRectGetMinY(v12);
  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  float MaxX = CGRectGetMaxX(v13);
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  float MaxY = CGRectGetMaxY(v14);

  return HGRectMake4f(v8, MinX, MinY, MaxX, MaxY);
}

void sub_1B749EF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749EF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749F028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSStringFromPVTransformInfo(long long *a1, uint64_t a2)
{
  long long v4 = a1[5];
  long long v21 = a1[4];
  long long v22 = v4;
  long long v5 = a1[7];
  long long v23 = a1[6];
  long long v24 = v5;
  long long v6 = a1[1];
  long long v17 = *a1;
  long long v18 = v6;
  long long v7 = a1[3];
  long long v19 = a1[2];
  long long v20 = v7;
  int v8 = pv_buffer_size_for_string_representation(&v17, a2);
  uint64_t v9 = (char *)malloc_type_calloc(v8, 1uLL, 0x100004077774924uLL);
  long long v10 = a1[5];
  long long v21 = a1[4];
  long long v22 = v10;
  long long v11 = a1[7];
  long long v23 = a1[6];
  long long v24 = v11;
  long long v12 = a1[1];
  long long v17 = *a1;
  long long v18 = v12;
  long long v13 = a1[3];
  long long v19 = a1[2];
  long long v20 = v13;
  unsigned int string_representation = pv_get_string_representation((uint64_t)&v17, v9, v8, a2);
  char v15 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v8
    || (char v15 = (void *)[[NSString alloc] initWithBytesNoCopy:v9 length:string_representation encoding:4 freeWhenDone:1]) == 0)
  {
    free(v9);
  }

  return v15;
}

void sub_1B749F2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749F360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749F4C0(_Unwind_Exception *a1)
{
  long long v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B749F5B4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B749F620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749F6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749F7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749F93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749FC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B749FDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B749FF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74A0204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1B74A04B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1B74A05A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74A06D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74A0790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A0934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  objc_sync_exit(v12);

  _Unwind_Resume(a1);
}

void sub_1B74A0A60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

id std::vector<objc_class * {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      CGRect v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    }
    else {
      CGRect v14 = 0;
    }
    char v15 = &v14[8 * v10];
    float v16 = &v14[8 * v13];
    long long v24 = v16;
    *(void *)char v15 = *a2;
    uint64_t v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    long long v18 = *a1;
    long long v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)long long v17 = 0;
        *((void *)v15 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v23.i64[1];
      float v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    long long v21 = a1[2];
    a1[2] = v16;
    long long v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)std::__split_buffer<objc_class * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)long long v7 = result;
    uint64_t v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_1B74A0CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1B74A0DA0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B74A0E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A0E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A0ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A0F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A10C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A12E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74A139C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A169C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A19E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A1FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74A20E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  float v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1B74A21E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char *std::vector<objc_class * {__strong}>::__init_with_size[abi:ne180100]<objc_class * {__strong}*,objc_class * {__strong}*>(char *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    id result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    long long v7 = (char **)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      id result = v8;
      *v7++ = result;
    }
    *((void *)v6 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7;
  }
  return result;
}

void sub_1B74A2388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<objc_class * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<objc_class * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double pv_simd_matrix_convert_projection(int a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  if (a1 != a2)
  {
    if (a2 == 1)
    {
      unint64_t v7 = 0;
      __n128 v9 = a3;
      __n128 v10 = a4;
      __n128 v11 = a5;
      __n128 v12 = a6;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      do
      {
        *(long long *)((char *)&v13 + v7) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B7E736B0, COERCE_FLOAT(*(_OWORD *)((char *)&v9 + v7))), (float32x4_t)xmmword_1B7E736C0, (float32x2_t)v9.n128_u64[v7 / 8], 1), (float32x4_t)xmmword_1B7E73B40, *(float32x4_t *)((char *)&v9 + v7), 2), (float32x4_t)xmmword_1B7E73B50, *(float32x4_t *)((char *)&v9 + v7), 3);
        v7 += 16;
      }
      while (v7 != 64);
      goto LABEL_9;
    }
    if (!a2)
    {
      unint64_t v6 = 0;
      __n128 v9 = a3;
      __n128 v10 = a4;
      __n128 v11 = a5;
      __n128 v12 = a6;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      do
      {
        *(long long *)((char *)&v13 + v6) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B7E736B0, COERCE_FLOAT(*(_OWORD *)((char *)&v9 + v6))), (float32x4_t)xmmword_1B7E736C0, (float32x2_t)v9.n128_u64[v6 / 8], 1), (float32x4_t)xmmword_1B7E73B60, *(float32x4_t *)((char *)&v9 + v6), 2), (float32x4_t)xmmword_1B7E73B70, *(float32x4_t *)((char *)&v9 + v6), 3);
        v6 += 16;
      }
      while (v6 != 64);
LABEL_9:
      a3.n128_u64[0] = v13;
    }
  }
  return a3.n128_f64[0];
}

_OWORD *pv_simd_matrix_convert_projection@<X0>(_OWORD *result@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  if (a2 == a3)
  {
    long long v4 = result[5];
    a4[4] = result[4];
    a4[5] = v4;
    long long v5 = result[7];
    a4[6] = result[6];
    a4[7] = v5;
    long long v6 = result[1];
    *a4 = *result;
    a4[1] = v6;
    long long v7 = result[3];
    a4[2] = result[2];
    a4[3] = v7;
  }
  else if (a3 == 1)
  {
    uint64_t v12 = 0;
    long long vars0 = *result;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    a4[6] = 0u;
    a4[7] = 0u;
    do
    {
      float64x2_t v14 = *(float64x2_t *)((char *)&vars0 + v12 * 16);
      float64x2_t v13 = *(float64x2_t *)((char *)&vars0 + v12 * 16 + 16);
      long long v15 = (float64x2_t *)&a4[v12];
      *long long v15 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1B7E733D0, v14.f64[0]), (float64x2_t)xmmword_1B7E733E0, v14, 1), (float64x2_t)0, v13.f64[0]), (float64x2_t)0, v13, 1);
      v15[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v14.f64[0]), (float64x2_t)0, v14, 1), (float64x2_t)xmmword_1B7E73B80, v13.f64[0]), (float64x2_t)xmmword_1B7E73B90, v13, 1);
      v12 += 2;
    }
    while (v12 != 8);
  }
  else if (!a3)
  {
    uint64_t v8 = 0;
    long long vars0 = *result;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    a4[6] = 0u;
    a4[7] = 0u;
    do
    {
      float64x2_t v10 = *(float64x2_t *)((char *)&vars0 + v8 * 16);
      float64x2_t v9 = *(float64x2_t *)((char *)&vars0 + v8 * 16 + 16);
      __n128 v11 = (float64x2_t *)&a4[v8];
      *__n128 v11 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1B7E733D0, v10.f64[0]), (float64x2_t)xmmword_1B7E733E0, v10, 1), (float64x2_t)0, v9.f64[0]), (float64x2_t)0, v9, 1);
      v11[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v10.f64[0]), (float64x2_t)0, v10, 1), (float64x2_t)xmmword_1B7E73450, v9.f64[0]), (float64x2_t)xmmword_1B7E73BA0, v9, 1);
      v8 += 2;
    }
    while (v8 != 8);
  }
  return result;
}

__n128 pv_simd_matrix_convert_proj_handedness@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 64);
  *(float64x2_t *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = vnegq_f64(*(float64x2_t *)(a1 + 80));
  long long v3 = *(_OWORD *)(a1 + 112);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v2;
  *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v4;
  return result;
}

float pv_simd_matrix_make_orthographic(int a1, float a2, float a3)
{
  float result = 0.00001;
  if (a1 == 1)
  {
    float result = (float)(1.0 / (float)(a3 - a2)) + (float)(1.0 / (float)(a3 - a2));
    __asm { FMOV            V3.4S, #1.0 }
  }
  else if (!a1)
  {
    float result = (float)(1.0 / (float)(a3 - a2)) + (float)(1.0 / (float)(a3 - a2));
    __asm { FMOV            V3.4S, #1.0 }
  }
  return result;
}

uint64_t pv_simd_matrix_make_orthographic@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>, float64_t a5@<D2>, float64_t a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  BOOL v8 = a8 > -0.0000001;
  if (a8 >= 0.0000001) {
    BOOL v8 = 0;
  }
  if (result == 1)
  {
    v25.f64[0] = a4;
    v25.f64[1] = a5;
    v26.f64[0] = a3;
    v26.f64[1] = a6;
    float64x2_t v27 = vsubq_f64(v25, v26);
    v25.f64[0] = a3;
    v26.f64[0] = a4;
    float64x2_t v28 = vaddq_f64(v25, v26);
    __asm { FMOV            V1.2D, #1.0 }
    float64x2_t v29 = vdivq_f64(_Q1, v27);
    v27.f64[0] = v29.f64[0] + v29.f64[0];
    float64_t v30 = v29.f64[1] + v29.f64[1];
    float64x2_t v20 = vmulq_f64(v29, vnegq_f64(v28));
    long long v21 = 0uLL;
    long long v22 = *(unint64_t *)&v27.f64[0];
    *(void *)&long long v23 = 0;
    *((float64_t *)&v23 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v30;
    if (v8)
    {
      double v24 = -0.99999976;
      goto LABEL_9;
    }
    *(double *)&unint64_t v33 = 1.0 / (a7 - a8);
    _Q1.f64[0] = *(double *)&v33 * a7;
    *(_OWORD *)a2 = v22;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_OWORD *)(a2 + 32) = v23;
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v33;
  }
  else
  {
    if (result) {
      return result;
    }
    v9.f64[0] = a4;
    v9.f64[1] = a5;
    v10.f64[0] = a3;
    v10.f64[1] = a6;
    float64x2_t v11 = vsubq_f64(v9, v10);
    v9.f64[0] = a3;
    v10.f64[0] = a4;
    float64x2_t v12 = vaddq_f64(v9, v10);
    __asm { FMOV            V1.2D, #1.0 }
    float64x2_t v18 = vdivq_f64(_Q1, v11);
    v11.f64[0] = v18.f64[0] + v18.f64[0];
    float64_t v19 = v18.f64[1] + v18.f64[1];
    float64x2_t v20 = vmulq_f64(v18, vnegq_f64(v12));
    long long v21 = 0uLL;
    long long v22 = *(unint64_t *)&v11.f64[0];
    *(void *)&long long v23 = 0;
    *((float64_t *)&v23 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v19;
    if (v8)
    {
      double v24 = -1.99999976;
LABEL_9:
      *(_OWORD *)a2 = v22;
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v23;
      *(_OWORD *)(a2 + 48) = v21;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E73BB0;
      *(float64x2_t *)(a2 + 96) = v20;
      *(double *)(a2 + 112) = a7 * v24;
      *(void *)(a2 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
      return result;
    }
    double v31 = a7 + a8;
    double v32 = 1.0 / (a7 - a8);
    _Q1.f64[0] = v31 * v32;
    *(_OWORD *)a2 = v22;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_OWORD *)(a2 + 32) = v23;
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = COERCE_UNSIGNED_INT64(v32 + v32);
  }
  *(float64x2_t *)(a2 + 96) = v20;
  *(float64x2_t *)(a2 + 112) = _Q1;
  return result;
}

__n128 pv_simd_matrix_make_projection_infinite@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  if (!a2)
  {
    double v4 = -1.99999976;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    double v4 = -0.99999976;
LABEL_5:
    *(void *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0xBFEFFFFF7F26A6B3;
    *(double *)(a1 + 112) = v4 * a4;
  }
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v5;
  long long v6 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 112) = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v9;
  return result;
}

void pv_simd_matrix_make_perspective(unsigned int a1, float a2)
{
  if (a1 <= 1) {
    tanf(a2 * 0.5);
  }
}

void pv_simd_matrix_make_perspective(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  BOOL v10 = a6 < 0.0000001 && a6 > -0.0000001;
  if (a1 == 1)
  {
    long double v16 = 1.0 / tan(a3 * 0.5);
    long long v12 = 0uLL;
    *((void *)&v13 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    *(double *)&long long v13 = v16 / a4;
    *(void *)&long long v14 = 0;
    *((long double *)&v14 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v16;
    if (v10)
    {
      double v15 = -0.99999976;
      goto LABEL_10;
    }
    *((void *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    *(double *)&long long v17 = a5 * a6 / (a5 - a6);
    double v18 = a6 / (a5 - a6);
  }
  else
  {
    if (a1) {
      return;
    }
    long double v11 = 1.0 / tan(a3 * 0.5);
    long long v12 = 0uLL;
    *((void *)&v13 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    *(double *)&long long v13 = v11 / a4;
    *(void *)&long long v14 = 0;
    *((long double *)&v14 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v11;
    if (v10)
    {
      double v15 = -1.99999976;
LABEL_10:
      *(_OWORD *)a2 = v13;
      *(_OWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 32) = v14;
      *(_OWORD *)(a2 + 48) = v12;
      *(_OWORD *)(a2 + 64) = v12;
      *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E73BC0;
      *(_OWORD *)(a2 + 96) = v12;
      *(double *)(a2 + 112) = a5 * v15;
      *(void *)(a2 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0;
      return;
    }
    *((void *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    *(double *)&long long v17 = (a6 + a6) * a5 / (a5 - a6);
    double v18 = (a5 + a6) / (a5 - a6);
  }
  __asm { FMOV            V4.2D, #-1.0 }
  *(double *)&_Q4 = v18;
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = _Q4;
  *(_OWORD *)(a2 + 96) = v12;
  *(_OWORD *)(a2 + 112) = v17;
}

float pv_simd_matrix_make_perspective(int a1, float a2, float a3, double a4, double a5, float a6)
{
  float result = 0.00001;
  if (a1 == 1)
  {
    float result = (float)(a6 + a6) / (float)(a3 - a2);
    __asm { FMOV            V2.4S, #-1.0 }
  }
  else if (!a1)
  {
    float result = (float)(a6 + a6) / (float)(a3 - a2);
    __asm { FMOV            V2.4S, #-1.0 }
  }
  return result;
}

uint64_t pv_simd_matrix_make_perspective@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  BOOL v8 = a8 > -0.0000001;
  if (a8 >= 0.0000001) {
    BOOL v8 = 0;
  }
  if (result == 1)
  {
    double v19 = a3 + a4;
    double v20 = a4 - a3;
    *(double *)&long long v17 = v19 / v20;
    double v21 = a5 + a6;
    double v22 = a5 - a6;
    double v23 = (a7 + a7) / (a5 - a6);
    *((void *)&v14 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    *(double *)&long long v14 = (a7 + a7) / v20;
    *(void *)&long long v15 = 0;
    *((double *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v23;
    long long v16 = 0uLL;
    *((double *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v21 / v22;
    if (v8)
    {
      double v18 = -0.99999976;
      goto LABEL_9;
    }
    __asm { FMOV            V6.2D, #-1.0 }
    double v31 = a7 * a8;
    double v32 = a7 - a8;
    double v29 = v31 / v32;
    double v30 = a8 / v32;
  }
  else
  {
    if (result) {
      return result;
    }
    double v9 = a3 + a4;
    double v10 = a4 - a3;
    *(double *)&long long v17 = v9 / v10;
    double v11 = a5 + a6;
    double v12 = a5 - a6;
    double v13 = (a7 + a7) / (a5 - a6);
    *((void *)&v14 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    *(double *)&long long v14 = (a7 + a7) / v10;
    *(void *)&long long v15 = 0;
    *((double *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v13;
    long long v16 = 0uLL;
    *((double *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v11 / v12;
    if (v8)
    {
      double v18 = -1.99999976;
LABEL_9:
      *(_OWORD *)a2 = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)(a2 + 32) = v15;
      *(_OWORD *)(a2 + 48) = v16;
      *(_OWORD *)(a2 + 64) = v17;
      *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E73BC0;
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
      *(double *)(a2 + 112) = a7 * v18;
      *(void *)(a2 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0;
      return result;
    }
    __asm { FMOV            V6.2D, #-1.0 }
    double v29 = (a8 + a8) * a7 / (a7 - a8);
    double v30 = (a7 + a8) / (a7 - a8);
  }
  *(double *)&_Q6 = v30;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = _Q6;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 112) = *(unint64_t *)&v29;
  return result;
}

void pv_simd_matrix_make_perspective(int a1, int a2, int a3, int a4, float a5, double a6, float32x2_t a7, float32x2_t a8, double a9)
{
  if (a4 == 1)
  {
    pv_adjust_intrinsics(a1, a2, a3, a5, a6, a7, a8, a9);
    __asm { FMOV            V3.2S, #1.0 }
  }
  else if (!a4)
  {
    pv_adjust_intrinsics(a1, a2, a3, a5, a6, a7, a8, a9);
    __asm { FMOV            V3.2S, #1.0 }
  }
}

float pv_adjust_intrinsics(int a1, int a2, int a3, float a4, double a5, float32x2_t a6, float32x2_t a7, double a8)
{
  float32x2_t v8 = vadd_f32(a6, (float32x2_t)0x3F0000003F000000);
  float32x2_t v9 = vsub_f32(a7, v8);
  v10.i32[0] = 0;
  v10.i32[1] = HIDWORD(a5);
  if (a3 == 1)
  {
    switch(a1)
    {
      case 0:
        goto LABEL_30;
      case 1:
        if (a2 == 2) {
          goto LABEL_26;
        }
LABEL_10:
        if (a2 == 3) {
          goto LABEL_33;
        }
        if (a2 == 4) {
          goto LABEL_34;
        }
        goto LABEL_30;
      case 2:
        if (a2 == 1) {
          goto LABEL_26;
        }
LABEL_20:
        if (a2 == 3) {
          goto LABEL_34;
        }
        if (a2 == 4) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 3:
        if (a2 == 1) {
          goto LABEL_34;
        }
        if (a2 == 2)
        {
LABEL_33:
          int8x8_t v19 = vext_s8(v10, (int8x8_t)LODWORD(a4), 4uLL);
          float32x2_t v8 = (float32x2_t)vzip1_s32(vdup_lane_s32((int32x2_t)vsub_f32(a7, v9), 1), (int32x2_t)v8);
          goto LABEL_35;
        }
LABEL_25:
        if (a2 != 4) {
          goto LABEL_30;
        }
        goto LABEL_26;
      case 4:
        if (a2 == 1) {
          goto LABEL_33;
        }
        if (a2 == 2)
        {
LABEL_34:
          int8x8_t v19 = vext_s8(v10, (int8x8_t)LODWORD(a4), 4uLL);
          float32x2_t v8 = (float32x2_t)vext_s8((int8x8_t)v9, (int8x8_t)v9, 4uLL);
LABEL_35:
          LODWORD(v12) = 0;
          HIDWORD(v12) = v19.i32[1];
          a4 = *(float *)v19.i32;
          __asm { FMOV            V2.4S, #1.0 }
          double v18 = *(double *)&v8;
          a7 = (float32x2_t)vrev64_s32((int32x2_t)a7);
          return pv_adjust_intrinsics_for_viewport(COERCE_DOUBLE((unint64_t)LODWORD(a4)), v12, v18, *(double *)&a7, a8, *(double *)&v8, *(double *)&v9);
        }
LABEL_29:
        if (a2 == 3) {
          goto LABEL_26;
        }
LABEL_30:
        v8.i32[1] = v9.i32[1];
        int v11 = HIDWORD(a5);
        break;
      default:
        goto LABEL_26;
    }
  }
  else
  {
    if (!a3)
    {
      switch(a1)
      {
        case 0:
          goto LABEL_30;
        case 1:
          if (a2 == 2) {
            break;
          }
          goto LABEL_20;
        case 2:
          if (a2 != 1) {
            goto LABEL_10;
          }
          break;
        case 3:
          if (a2 == 1) {
            goto LABEL_33;
          }
          if (a2 == 2) {
            goto LABEL_34;
          }
          goto LABEL_25;
        case 4:
          if (a2 == 1) {
            goto LABEL_34;
          }
          if (a2 == 2) {
            goto LABEL_33;
          }
          goto LABEL_29;
        default:
          break;
      }
    }
LABEL_26:
    int v11 = HIDWORD(a5);
    v8.i32[1] = v9.i32[1];
    float32x2_t v8 = vsub_f32(a7, v8);
  }
  LODWORD(v12) = 0;
  HIDWORD(v12) = v11;
  __asm { FMOV            V2.4S, #1.0 }
  double v18 = *(double *)&v8;
  return pv_adjust_intrinsics_for_viewport(COERCE_DOUBLE((unint64_t)LODWORD(a4)), v12, v18, *(double *)&a7, a8, *(double *)&v8, *(double *)&v9);
}

double pv_principal_point_from_intrinsics(simd_float3x3 a1)
{
  return *(double *)a1.columns[2].i64;
}

double pv_focal_length_from_intrinsics(simd_float3x3 a1)
{
  a1.columns[0].i32[1] = a1.columns[1].i32[1];
  return *(double *)a1.columns[0].i64;
}

void pv_simd_matrix_make_perspective(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>, int8x16_t a7@<Q0>, float64x2_t a8@<Q1>, double a9@<D2>, double a10@<D3>)
{
  double v13 = a8.f64[1];
  BOOL v14 = a10 < 0.0000001 && a10 > -0.0000001;
  if (a5 == 1)
  {
    float64x2_t v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v27 = *(_OWORD *)(a1 + 48);
    long long v38 = *(_OWORD *)(a1 + 32);
    long long v39 = v27;
    long long v28 = *(_OWORD *)(a1 + 80);
    long long v40 = *(_OWORD *)(a1 + 64);
    long long v41 = v28;
    long long v29 = *(_OWORD *)(a1 + 16);
    float64x2_t v36 = *(float64x2_t *)a1;
    long long v37 = v29;
    pv_adjust_intrinsics(&v36, a2, a3, a4, &v42, a7, a8);
    __asm { FMOV            V1.2D, #1.0 }
    float64x2_t v23 = vsubq_f64(_Q1, vdivq_f64(vaddq_f64(v46, v46), a8));
    *((void *)&v24 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    *(double *)&long long v24 = (*(double *)&v42 + *(double *)&v42) / a8.f64[0];
    *(void *)&long long v25 = 0;
    *((double *)&v25 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (*((double *)&v44 + 1) + *((double *)&v44 + 1)) / v13;
    if (v14)
    {
      double v26 = -0.99999976;
      goto LABEL_10;
    }
    double v31 = a9 - a10;
    __asm { FMOV            V5.2D, #-1.0 }
    *(double *)&_Q5 = a10 / (a9 - a10);
    double v33 = a9 * a10;
LABEL_13:
    *(float64x2_t *)(a6 + 64) = v23;
    *(_OWORD *)(a6 + 8pthread_cond_init((pthread_cond_t *)this, 0) = _Q5;
    *(void *)(a6 + 96) = 0;
    *(void *)(a6 + 104) = 0;
    *(_OWORD *)(a6 + 112) = COERCE_UNSIGNED_INT64(v33 / v31);
    goto LABEL_14;
  }
  if (a5) {
    return;
  }
  float64x2_t v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v15 = *(_OWORD *)(a1 + 48);
  long long v38 = *(_OWORD *)(a1 + 32);
  long long v39 = v15;
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v40 = *(_OWORD *)(a1 + 64);
  long long v41 = v16;
  long long v17 = *(_OWORD *)(a1 + 16);
  float64x2_t v36 = *(float64x2_t *)a1;
  long long v37 = v17;
  pv_adjust_intrinsics(&v36, a2, a3, a4, &v42, a7, a8);
  __asm { FMOV            V1.2D, #1.0 }
  float64x2_t v23 = vsubq_f64(_Q1, vdivq_f64(vaddq_f64(v46, v46), a8));
  *((void *)&v24 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
  *(double *)&long long v24 = (*(double *)&v42 + *(double *)&v42) / a8.f64[0];
  *(void *)&long long v25 = 0;
  *((double *)&v25 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (*((double *)&v44 + 1) + *((double *)&v44 + 1)) / v13;
  if (!v14)
  {
    double v31 = a9 - a10;
    __asm { FMOV            V5.2D, #-1.0 }
    *(double *)&_Q5 = (a9 + a10) / (a9 - a10);
    double v33 = (a10 + a10) * a9;
    goto LABEL_13;
  }
  double v26 = -1.99999976;
LABEL_10:
  *(float64x2_t *)(a6 + 64) = v23;
  *(_OWORD *)(a6 + 8pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E73BC0;
  *(void *)(a6 + 96) = 0;
  *(void *)(a6 + 104) = 0;
  *(double *)(a6 + 112) = a9 * v26;
  *(void *)(a6 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0;
LABEL_14:
  *(_OWORD *)a6 = v24;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = v25;
  *(_OWORD *)(a6 + 48) = 0u;
}

double pv_adjust_intrinsics@<D0>(float64x2_t *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _OWORD *a5@<X8>, int8x16_t a6@<Q0>, float64x2_t a7@<Q1>)
{
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v12 = vaddq_f64(a1[4], _Q3);
  int8x16_t v13 = (int8x16_t)vsubq_f64((float64x2_t)a6, v12);
  v14.i64[0] = 0;
  v14.i64[1] = *(void *)&a1[2].f64[1];
  unint64_t v15 = vextq_s8(v14, v14, 8uLL).u64[0];
  if (a4 == 1)
  {
    switch(a2)
    {
      case 0:
        goto LABEL_30;
      case 1:
        if (a3 == 2) {
          goto LABEL_26;
        }
LABEL_10:
        if (a3 == 3) {
          goto LABEL_32;
        }
        if (a3 == 4) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2:
        if (a3 == 1) {
          goto LABEL_26;
        }
LABEL_20:
        if (a3 == 3) {
          goto LABEL_33;
        }
        if (a3 == 4) {
          goto LABEL_32;
        }
        goto LABEL_30;
      case 3:
        if (a3 == 1) {
          goto LABEL_33;
        }
        if (a3 == 2)
        {
LABEL_32:
          float64_t v21 = a1->f64[0];
          float64x2_t v12 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)vsubq_f64((float64x2_t)a6, (float64x2_t)v13), 1), (int64x2_t)v12);
          goto LABEL_34;
        }
LABEL_25:
        if (a3 != 4) {
          goto LABEL_30;
        }
        goto LABEL_26;
      case 4:
        if (a3 == 1) {
          goto LABEL_32;
        }
        if (a3 == 2)
        {
LABEL_33:
          float64_t v21 = a1->f64[0];
          float64x2_t v12 = (float64x2_t)vextq_s8(v13, v13, 8uLL);
LABEL_34:
          long long v18 = v15;
          long long v17 = 0uLL;
          *(void *)&long long v19 = 0;
          *((float64_t *)&v19 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v21;
          __asm { FMOV            V3.2D, #1.0 }
          a6 = vextq_s8(a6, a6, 8uLL);
          goto LABEL_35;
        }
LABEL_29:
        if (a3 == 3) {
          goto LABEL_26;
        }
LABEL_30:
        *(void *)&v12.f64[1] = v13.i64[1];
        unint64_t v16 = v15;
        break;
      default:
        goto LABEL_26;
    }
  }
  else
  {
    if (!a4)
    {
      switch(a2)
      {
        case 0:
          goto LABEL_30;
        case 1:
          if (a3 == 2) {
            break;
          }
          goto LABEL_20;
        case 2:
          if (a3 != 1) {
            goto LABEL_10;
          }
          break;
        case 3:
          if (a3 == 1) {
            goto LABEL_32;
          }
          if (a3 == 2) {
            goto LABEL_33;
          }
          goto LABEL_25;
        case 4:
          if (a3 == 1) {
            goto LABEL_33;
          }
          if (a3 == 2) {
            goto LABEL_32;
          }
          goto LABEL_29;
        default:
          break;
      }
    }
LABEL_26:
    unint64_t v16 = v15;
    *(void *)&v12.f64[1] = v13.i64[1];
    float64x2_t v12 = vsubq_f64((float64x2_t)a6, v12);
  }
  long long v17 = 0uLL;
  long long v18 = *(unint64_t *)&a1->f64[0];
  *(void *)&long long v19 = 0;
  *((void *)&v19 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v16;
  __asm { FMOV            V3.2D, #1.0 }
LABEL_35:
  v23[0] = v18;
  v23[1] = v17;
  _OWORD v23[2] = v19;
  v23[3] = v17;
  v23[4] = v12;
  v23[5] = _Q3;
  *(void *)&double result = pv_adjust_intrinsics_for_viewport((uint64_t)v23, a5, (float64x2_t)a6, a7).n128_u64[0];
  return result;
}

__n128 pv_principal_point_from_intrinsics(__n128 *a1)
{
  return a1[4];
}

__n128 pv_focal_length_from_intrinsics(uint64_t a1)
{
  return *(__n128 *)a1;
}

double pv_near_plane_lrtb(float a1, float a2, float a3)
{
  float v5 = tanf(a1 * 0.5);
  *(float *)&double v6 = -(float)((float)(v5 * a3) * a2);
  *((float *)&v6 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)(v5 * a3) * a2;
  return v6;
}

double pv_near_plane_lrtb@<D0>(double a1@<D0>, double a2@<D1>, double a3@<D2>, _OWORD *a4@<X8>)
{
  *(double *)&long long v6 = tan(a1 * 0.5) * a3;
  double result = -*(double *)&v6;
  *(double *)&long long v8 = -(*(double *)&v6 * a2);
  *((double *)&v8 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *(double *)&v6 * a2;
  *((double *)&v6 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = -*(double *)&v6;
  *a4 = v8;
  a4[1] = v6;
  return result;
}

BOOL pv_simd_matrix_project(int a1, int a2, int a3, _OWORD *a4, float32x4_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float32x4_t a17, float32x2_t a18)
{
  uint64_t v18 = 0;
  v33[0] = a6;
  v33[1] = a7;
  void v33[2] = a8;
  v33[3] = a9;
  float32x4_t v34 = 0u;
  float32x4_t v35 = 0u;
  float32x4_t v36 = 0u;
  float32x4_t v37 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v34 + v18 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a14, COERCE_FLOAT(v33[v18])), a15, *(float32x2_t *)&v33[v18], 1), a16, (float32x4_t)v33[v18], 2), a17, (float32x4_t)v33[v18], 3);
    ++v18;
  }
  while (v18 != 4);
  float32x4_t v19 = vaddq_f32(v37, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, a5.f32[0]), v35, *(float32x2_t *)a5.f32, 1), v36, a5, 2));
  float v20 = v19.f32[3];
  if (v19.f32[3] != 0.0)
  {
    int8x16_t v21 = (int8x16_t)vdivq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3));
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)v27.i8 = vmul_f32(vadd_f32(*(float32x2_t *)v21.i8, _D1), (float32x2_t)0x3F0000003F000000);
    v27.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
    if (a1)
    {
      if (!a2) {
        goto LABEL_6;
      }
    }
    else
    {
      v31.i64[0] = v27.i64[0];
      *(float *)&v31.i32[2] = (float)(*(float *)&v21.i32[2] + 1.0) * 0.5;
      v31.i32[3] = v27.i32[3];
      int8x16_t v27 = v31;
      if (!a2)
      {
LABEL_6:
        if (!a3)
        {
LABEL_8:
          *(float32x2_t *)&long long v29 = vmul_f32(*(float32x2_t *)v27.i8, a18);
          *((void *)&v29 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = vextq_s8(v27, v27, 8uLL).u64[0];
          *a4 = v29;
          return v20 != 0.0;
        }
LABEL_7:
        v28.i32[0] = v27.i32[0];
        *(float *)&v28.i32[1] = 1.0 - *(float *)&v27.i32[1];
        v28.i64[1] = v27.i64[1];
        int8x16_t v27 = v28;
        goto LABEL_8;
      }
    }
    *(float *)v32.i32 = 1.0 - *(float *)v27.i32;
    v32.i32[1] = v27.i32[1];
    v32.i64[1] = v27.i64[1];
    int8x16_t v27 = v32;
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  return v20 != 0.0;
}

float32x2_t pv_ndc_to_viewport(int a1, int a2, int a3, float32x2_t a4, float32x2_t a5)
{
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v10 = vmul_f32(vadd_f32(a4, _D2), (float32x2_t)0x3F0000003F000000);
  if (a1)
  {
    if (!a2) {
      goto LABEL_3;
    }
LABEL_7:
    v13.f32[0] = 1.0 - v10.f32[0];
    v13.i32[1] = v10.i32[1];
    float32x2_t v10 = v13;
    if (!a3) {
      return vmul_f32(v10, a5);
    }
    goto LABEL_4;
  }
  if (a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (a3)
  {
LABEL_4:
    v11.i32[0] = v10.i32[0];
    v11.f32[1] = 1.0 - v10.f32[1];
    float32x2_t v10 = v11;
  }
  return vmul_f32(v10, a5);
}

BOOL pv_simd_matrix_project(float64x2_t *a1, long long *a2, float64x2_t *a3, int a4, int a5, int a6, float64x2_t *a7, float64x2_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29)
{
  uint64_t v29 = 0;
  float64x2_t v31 = *a1;
  float64x2_t v30 = a1[1];
  float64x2_t v33 = *a3;
  float64x2_t v32 = a3[1];
  float64x2_t v35 = a3[2];
  float64x2_t v34 = a3[3];
  float64x2_t v37 = a3[4];
  float64x2_t v36 = a3[5];
  float64x2_t v39 = a3[6];
  float64x2_t v38 = a3[7];
  long long v40 = a2[5];
  a26 = a2[4];
  a27 = v40;
  long long v41 = a2[7];
  a28 = a2[6];
  a29 = v41;
  long long v42 = a2[1];
  a22 = *a2;
  a23 = v42;
  long long v43 = a2[3];
  a24 = a2[2];
  a25 = v43;
  float64x2_t v65 = 0u;
  float64x2_t vars0 = 0u;
  do
  {
    float64x2_t v45 = *(float64x2_t *)((char *)&a22 + v29);
    float64x2_t v44 = *(float64x2_t *)((char *)&a22 + v29 + 16);
    float64x2_t v46 = (float64x2_t *)((char *)&v65 + v29);
    *float64x2_t v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v45.f64[0]), v35, v45, 1), v37, v44.f64[0]), v39, v44, 1);
    v46[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, v45.f64[0]), v34, v45, 1), v36, v44.f64[0]), v38, v44, 1);
    v29 += 32;
  }
  while (v29 != 128);
  int32x4_t v47 = 0u;
  float64x2_t v48 = vaddq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vars0, v31.f64[0]), (float64x2_t)0, v31, 1), (float64x2_t)0, v30.f64[0]));
  double v49 = v48.f64[1];
  if (v48.f64[1] != 0.0)
  {
    v47.i32[0] = 0;
    float64x2_t v50 = vaddq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v65, v31.f64[0]), (float64x2_t)0, v31, 1), (float64x2_t)0, v30.f64[0]));
    float64x2_t v51 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v48, 1);
    int8x16_t v52 = (int8x16_t)vdivq_f64(v48, v51);
    float64x2_t v53 = vdivq_f64(v50, v51);
    __asm { FMOV            V2.2D, #1.0 }
    float64x2_t v59 = vaddq_f64(v53, _Q2);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v61 = vmulq_f64(v59, _Q2);
    LODWORD(_Q2.f64[0]) = a4;
    v48.f64[0] = (*(double *)v52.i64 + 1.0) * 0.5;
    *(void *)&v48.f64[0] = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q2, v47), 0), (int8x16_t)v48, v52).u64[0];
    v62.f64[0] = v48.f64[0];
    *(void *)&v62.f64[1] = v52.i64[1];
    if (a5)
    {
      v63.f64[0] = 1.0 - v61.f64[0];
      v63.f64[1] = v61.f64[1];
      *(void *)&v48.f64[1] = v52.i64[1];
      float64x2_t v61 = v63;
      float64x2_t v62 = v48;
    }
    if (a6) {
      v61.f64[1] = 1.0 - v61.f64[1];
    }
    *a7 = vmulq_f64(v61, a8);
    a7[1] = v62;
  }
  return v49 != 0.0;
}

float64x2_t pv_ndc_to_viewport@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, float64x2_t *a5@<X8>, float64x2_t a6@<Q0>, int32x4_t a7@<Q2>)
{
  a7.i32[0] = 0;
  int8x16_t v7 = *(int8x16_t *)(a1 + 16);
  __asm { FMOV            V3.2D, #1.0 }
  float64x2_t v13 = vaddq_f64(*(float64x2_t *)a1, _Q3);
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v14 = vmulq_f64(v13, _Q3);
  LODWORD(_Q3.f64[0]) = a2;
  int8x16_t v15 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q3, a7), 0);
  _Q3.f64[0] = (*(double *)v7.i64 + 1.0) * 0.5;
  *(void *)&_Q3.f64[0] = vbslq_s8(v15, (int8x16_t)_Q3, v7).u64[0];
  v17.f64[0] = _Q3.f64[0];
  v17.f64[1] = *(float64_t *)(a1 + 24);
  if (a3)
  {
    v18.f64[0] = 1.0 - v14.f64[0];
    v18.f64[1] = v14.f64[1];
    _Q3.f64[1] = *(float64_t *)(a1 + 24);
    float64x2_t v14 = v18;
    float64x2_t v17 = _Q3;
  }
  if (a4) {
    v14.f64[1] = 1.0 - v14.f64[1];
  }
  float64x2_t result = vmulq_f64(v14, a6);
  *a5 = result;
  a5[1] = v17;
  return result;
}

BOOL pv_simd_matrix_unproject(int a1, int a2, int a3, float32x4_t *a4, int8x16_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float32x4_t a17, float32x2_t a18)
{
  *(float32x2_t *)v21.i8 = vdiv_f32(*(float32x2_t *)a5.i8, a18);
  unint64_t v20 = vextq_s8(a5, a5, 8uLL).u64[0];
  *(float *)v18.i32 = 1.0 - *(float *)v21.i32;
  v18.i32[1] = v21.i32[1];
  v21.i64[1] = v20;
  v18.i32[2] = a5.i32[2];
  if (a2) {
    unsigned int v22 = -1;
  }
  else {
    unsigned int v22 = 0;
  }
  int8x16_t v23 = vbslq_s8((int8x16_t)vdupq_n_s32(v22), v18, v21);
  int8x16_t v24 = v23;
  v24.i32[3] = HIDWORD(v20);
  if (a3)
  {
    v25.i32[0] = v23.i32[0];
    *(float *)&v25.i32[1] = 1.0 - *(float *)&v23.i32[1];
    v25.i64[1] = __PAIR64__(v24.u32[3], v23.u32[2]);
    int8x16_t v24 = v25;
  }
  __asm { FMOV            V6.2S, #-1.0 }
  *(float32x2_t *)v31.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), _D6);
  v31.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
  float32x4_t v32 = v31;
  v32.i32[3] = v24.i32[3];
  if (a1)
  {
    float32x4_t v36 = v32;
  }
  else
  {
    v31.f32[2] = (float)(*(float *)&v24.i32[2] + *(float *)&v24.i32[2]) + -1.0;
    v31.i32[3] = v24.i32[3];
    float32x4_t v36 = v31;
  }
  uint64_t v33 = 0;
  v37[0] = a6;
  v37[1] = a7;
  _OWORD v37[2] = a8;
  v37[3] = a9;
  memset(&v38, 0, sizeof(v38));
  do
  {
    v38.columns[v33] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a14, COERCE_FLOAT(v37[v33])), a15, *(float32x2_t *)&v37[v33], 1), a16, (float32x4_t)v37[v33], 2), a17, (float32x4_t)v37[v33], 3);
    ++v33;
  }
  while (v33 != 4);
  simd_float4x4 v39 = __invert_f4(v38);
  float32x4_t v34 = vaddq_f32((float32x4_t)v39.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v39.columns[0], v36.f32[0]), (float32x4_t)v39.columns[1], *(float32x2_t *)v36.f32, 1), (float32x4_t)v39.columns[2], v36, 2));
  if (v34.f32[3] != 0.0) {
    *a4 = vdivq_f32(v34, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 3));
  }
  return v34.f32[3] != 0.0;
}

double pv_viewport_to_ndc(int a1, int a2, int a3, int8x16_t a4, float32x2_t a5, double a6, double a7, int8x16_t a8)
{
  *(float32x2_t *)v8.i8 = vdiv_f32(*(float32x2_t *)a4.i8, a5);
  *(float *)a8.i32 = 1.0 - *(float *)v8.i32;
  a8.i32[1] = v8.i32[1];
  v8.i64[1] = vextq_s8(a4, a4, 8uLL).u64[0];
  a8.i32[2] = a4.i32[2];
  if (a2) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 0;
  }
  unint64_t v10 = vbslq_s8((int8x16_t)vdupq_n_s32(v9), a8, v8).u64[0];
  float32x2_t v11 = (float32x2_t)v10;
  if (a3)
  {
    v12.i32[0] = v10;
    v12.f32[1] = 1.0 - *((float *)&v10 + 1);
    float32x2_t v11 = v12;
  }
  __asm { FMOV            V2.2S, #-1.0 }
  double v18 = COERCE_DOUBLE(vadd_f32(vadd_f32(v11, v11), _D2));
  double result = v18;
  if (!a1) {
    return v18;
  }
  return result;
}

BOOL pv_simd_matrix_unproject(uint64_t a1, long long *a2, float64x2_t *a3, int a4, int a5, int a6, float64x2_t *a7, float64x2_t a8, uint64_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, float64x2_t a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33)
{
  int8x16_t v34 = (int8x16_t)vdivq_f64(*(float64x2_t *)a1, a8);
  *(double *)v35.i64 = 1.0 - *(double *)v34.i64;
  v35.i64[1] = v34.i64[1];
  int8x16_t v36 = *(int8x16_t *)(a1 + 16);
  if (a5) {
    unint64_t v37 = -1;
  }
  else {
    unint64_t v37 = 0;
  }
  float64x2_t v38 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v37), v35, v34);
  if (a6) {
    v38.f64[1] = 1.0 - v38.f64[1];
  }
  uint64_t v39 = 0;
  __asm { FMOV            V2.2D, #-1.0 }
  float64x2_t v46 = *a3;
  float64x2_t v45 = a3[1];
  int8x16_t v47 = (int8x16_t)vaddq_f64(vaddq_f64(v38, v38), _Q2);
  float64x2_t v49 = a3[2];
  float64x2_t v48 = a3[3];
  float64x2_t v51 = a3[4];
  float64x2_t v50 = a3[5];
  float64x2_t v53 = a3[6];
  float64x2_t v52 = a3[7];
  long long v54 = a2[5];
  a30 = a2[4];
  a31 = v54;
  long long v55 = a2[7];
  a32 = a2[6];
  a33 = v55;
  long long v56 = a2[1];
  a26 = *a2;
  a27 = v56;
  long long v57 = a2[3];
  a28 = a2[2];
  a29 = v57;
  a24 = 0u;
  a25 = 0u;
  a22 = 0u;
  a23 = 0u;
  a20 = 0u;
  a21 = 0u;
  a18 = 0u;
  a19 = 0u;
  do
  {
    float64x2_t v59 = *(float64x2_t *)((char *)&a26 + v39);
    float64x2_t v58 = *(float64x2_t *)((char *)&a26 + v39 + 16);
    std::string::size_type v60 = (float64x2_t *)((char *)&a18 + v39);
    *std::string::size_type v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v59.f64[0]), v49, v59, 1), v51, v58.f64[0]), v53, v58, 1);
    v60[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v59.f64[0]), v48, v59, 1), v50, v58.f64[0]), v52, v58, 1);
    v39 += 32;
  }
  while (v39 != 128);
  LODWORD(v45.f64[0]) = 0;
  LODWORD(v46.f64[0]) = a4;
  int8x16_t v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, (int32x4_t)v45), 0);
  _Q2.f64[0] = *(double *)v36.i64 + *(double *)v36.i64 + -1.0;
  int8x16_t vars0 = vbslq_s8(v61, (int8x16_t)_Q2, v36);
  float64x2_t v65 = (float64x2_t)vbslq_s8(v61, v47, v47);
  a30 = a22;
  a31 = a23;
  a32 = a24;
  a33 = a25;
  a26 = a18;
  a27 = a19;
  a28 = a20;
  a29 = a21;
  __invert_d4();
  float64x2_t v62 = vaddq_f64(a17, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a11, v65.f64[0]), a13, v65, 1), a15, *(double *)vars0.i64));
  if (v62.f64[1] != 0.0)
  {
    float64x2_t v63 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v62, 1);
    *a7 = vdivq_f64(vaddq_f64(a16, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a10, v65.f64[0]), a12, v65, 1), a14, *(double *)vars0.i64)), v63);
    a7[1] = vdivq_f64(v62, v63);
  }
  return v62.f64[1] != 0.0;
}

int8x16_t pv_viewport_to_ndc@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, float64x2_t a6@<Q0>, int32x4_t a7@<Q2>)
{
  int8x16_t v7 = (int8x16_t)vdivq_f64(*(float64x2_t *)a1, a6);
  a7.i64[0] = 1.0;
  *(double *)v8.i64 = 1.0 - *(double *)v7.i64;
  v8.i64[1] = v7.i64[1];
  int8x16_t v9 = *(int8x16_t *)(a1 + 16);
  if (a3) {
    unint64_t v10 = -1;
  }
  else {
    unint64_t v10 = 0;
  }
  float64x2_t v11 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v10), v8, v7);
  if (a4)
  {
    *(double *)a7.i64 = 1.0 - v11.f64[1];
    v11.f64[1] = 1.0 - v11.f64[1];
  }
  a7.i32[0] = 0;
  __asm { FMOV            V3.2D, #-1.0 }
  float64x2_t v17 = vaddq_f64(vaddq_f64(v11, v11), _Q3);
  LODWORD(_Q3.f64[0]) = a2;
  int8x16_t v18 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q3, a7), 0);
  _Q3.f64[0] = *(double *)v9.i64 + *(double *)v9.i64 + -1.0;
  int8x16_t result = vbslq_s8(v18, (int8x16_t)_Q3, v9);
  *(float64x2_t *)a5 = v17;
  *(int8x16_t *)(a5 + 16) = result;
  return result;
}

BOOL pv_simd_matrix_unproject_to_plane(int a1, int a2, int a3, int a4, float32x4_t *a5, int8x16_t a6, simd_float4 a7, simd_float4 a8, simd_float4 a9, float32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, simd_float4 a14, simd_float4 a15, simd_float4 a16, simd_float4 a17, float32x4_t a18, float32x2_t a19)
{
  v45.columns[0] = a14;
  v45.columns[1] = a15;
  v45.columns[2] = a16;
  v45.columns[3] = a17;
  simd_float4x4 v46 = __invert_f4(v45);
  *(uint64_t *)((char *)v42.i64 + 4) = 0;
  v42.i32[0] = 0;
  BOOL v28 = pv_simd_matrix_unproject(a2, a3, a4, &v42, a6, (__n128)v46.columns[0], (__n128)v46.columns[1], (__n128)v46.columns[2], (__n128)v46.columns[3], v24, v25, v26, v27, (float32x4_t)v46.columns[1], (float32x4_t)v46.columns[2], (float32x4_t)v46.columns[3], a18, a19);
  if (v28)
  {
    v47.columns[0] = a7;
    v47.columns[1] = a8;
    v47.columns[2] = a9;
    v47.columns[3] = (simd_float4)a10;
    *(double *)v43.columns[0].i64 = pv_simd_matrix_get_rotation_matrix(v47);
    float32x4_t v29 = PVAxesFloat[a1];
    float32x4_t v30 = vmulq_n_f32((float32x4_t)v43.columns[0], v29.f32[0]);
    v43.columns[0].i32[3] = 0;
    float32x4_t v31 = vmlaq_lane_f32(v30, (float32x4_t)v43.columns[1], *(float32x2_t *)v29.f32, 1);
    v43.columns[1].i32[3] = 0;
    float32x4_t v32 = vmlaq_laneq_f32(v31, (float32x4_t)v43.columns[2], v29, 2);
    v43.columns[2].i32[3] = 0;
    float32x4_t v33 = vmulq_f32(a10, v32);
    float32x4_t v34 = vmulq_f32(v42, v32);
    float32x4_t v41 = vsubq_f32(vmulq_n_f32(v42, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)))).f32[0]), a10);
    simd_float3x3 v44 = __invert_f3(v43);
    *a5 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v44.columns[0], v41.f32[0]), (float32x4_t)v44.columns[1], *(float32x2_t *)v41.f32, 1), (float32x4_t)v44.columns[2], v41, 2);
  }
  return v28;
}

#error "1B74A424C: call analysis failed (funcsize=141)"

float32x2_t pv_fov_from_projection(simd_float4x4 a1)
{
  float v3 = a1.columns[1].f32[1];
  float v4 = atanf(1.0 / a1.columns[0].f32[0]);
  float v1 = atanf(1.0 / v3);
  return vadd_f32((float32x2_t)__PAIR64__(LODWORD(v1), LODWORD(v4)), (float32x2_t)__PAIR64__(LODWORD(v1), LODWORD(v4)));
}

long double pv_fov_from_projection(double *a1)
{
  long double v2 = atan(1.0 / *a1);
  long double v4 = v2 + v2;
  atan(1.0 / a1[5]);
  return v4;
}

float32x2_t pv_fov_from_intrinsics(float a1, double a2, double a3, double a4)
{
  float v6 = *((float *)&a4 + 1);
  float v7 = *((float *)&a2 + 1);
  float v8 = atanf(*(float *)&a4 / (float)(a1 + a1));
  float v4 = atanf(v6 / (float)(v7 + v7));
  return vadd_f32((float32x2_t)__PAIR64__(LODWORD(v4), LODWORD(v8)), (float32x2_t)__PAIR64__(LODWORD(v4), LODWORD(v8)));
}

float pv_fov_for_focal_length_and_side(float a1, float a2)
{
  float v2 = atanf(a2 / (float)(a1 + a1));
  return v2 + v2;
}

long double pv_fov_from_intrinsics(double *a1, __n128 a2)
{
  double v5 = a2.n128_f64[1];
  long double v3 = atan(a2.n128_f64[0] / (*a1 + *a1));
  long double v6 = v3 + v3;
  atan(v5 / (a1[5] + a1[5]));
  return v6;
}

long double pv_fov_for_focal_length_and_side(double a1, double a2)
{
  long double v2 = atan(a2 / (a1 + a1));
  return v2 + v2;
}

__n64 pv_near_far_planes_from_projection(int a1, double a2, double a3, __n128 a4, __n128 a5)
{
  if (a1 == 1)
  {
    result.n64_f32[0] = a5.n128_f32[2] / a4.n128_f32[2];
    result.n64_f32[1] = (float)-a5.n128_f32[2] / (float)(-1.0 - a4.n128_f32[2]);
  }
  else
  {
    result.n64_u64[0] = 0;
    if (!a1)
    {
      result.n64_f32[0] = (float)((float)(-1.0 - a4.n128_f32[2])
                                * (float)((float)(a5.n128_f32[2] * -2.0)
                                        / (float)(-2.0 - (float)(a4.n128_f32[2] + a4.n128_f32[2]))))
                        / (float)(1.0 - a4.n128_f32[2]);
      result.n64_f32[1] = (float)(a5.n128_f32[2] * -2.0) / (float)(-2.0 - (float)(a4.n128_f32[2] + a4.n128_f32[2]));
    }
  }
  return result;
}

double pv_near_far_planes_from_projection(uint64_t a1, int a2)
{
  double v2 = *(double *)(a1 + 80);
  double v3 = *(double *)(a1 + 112);
  if (a2 == 1) {
    return v3 / v2;
  }
  double result = 0.0;
  if (!a2) {
    return (-1.0 - v2) * (v3 * -2.0 / (-2.0 - (v2 + v2))) / (1.0 - v2);
  }
  return result;
}

float pv_focal_length_for_fov_and_side(float a1, float a2)
{
  return (float)(a2 * 0.5) / tanf(a1 * 0.5);
}

long double pv_focal_length_for_fov_and_side(double a1, double a2)
{
  return a2 * 0.5 / tan(a1 * 0.5);
}

float pv_side_length_for_fov_and_distance(float a1, float a2)
{
  float v3 = tanf(a1 * 0.5);
  float v4 = fabsf(a2);
  return (float)(v4 * v3) + (float)(v4 * v3);
}

long double pv_side_length_for_fov_and_distance(double a1, double a2)
{
  long double v3 = tan(a1 * 0.5);
  double v4 = fabs(a2);
  return v4 * v3 + v4 * v3;
}

float32x2_t pv_principal_point_from_resolution(float32x2_t a1)
{
  return vadd_f32(vmul_f32(a1, (float32x2_t)0x3F0000003F000000), (float32x2_t)0xBF000000BF000000);
}

double pv_principal_point_from_resolution(float64x2_t a1)
{
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v6 = vmulq_f64(a1, _Q1);
  __asm { FMOV            V1.2D, #-0.5 }
  *(void *)&double result = *(_OWORD *)&vaddq_f64(v6, _Q1);
  return result;
}

float32x2_t pv_resolution_from_principal_point(float32x2_t a1)
{
  float32x2_t v1 = vadd_f32(a1, (float32x2_t)0x3F0000003F000000);
  return vadd_f32(v1, v1);
}

double pv_resolution_from_principal_point(float64x2_t a1)
{
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v6 = vaddq_f64(a1, _Q1);
  *(void *)&double result = *(_OWORD *)&vaddq_f64(v6, v6);
  return result;
}

void pv_intrinsics_from_focal_length_and_principal_point()
{
  __asm { FMOV            V2.4S, #1.0 }
}

__n128 pv_intrinsics_from_focal_length_and_principal_point@<Q0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  *(void *)&long long v3 = 0;
  *((void *)&v3 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = a2.n128_u64[1];
  *(_OWORD *)a1 = a2.n128_u64[0];
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a1 + 64) = a3;
  *(__n128 *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = result;
  return result;
}

void pv_intrinsics_from_focal_length_and_resolution()
{
  __asm { FMOV            V2.4S, #1.0 }
}

float64x2_t pv_intrinsics_from_focal_length_and_resolution@<Q0>(uint64_t a1@<X8>, __n128 a2@<Q0>, float64x2_t a3@<Q1>)
{
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v8 = vmulq_f64(a3, _Q2);
  __asm { FMOV            V2.2D, #-0.5 }
  unint64_t v10 = a2.n128_u64[0];
  *(void *)&long long v11 = 0;
  *((void *)&v11 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = a2.n128_u64[1];
  float64x2_t result = vaddq_f64(v8, _Q2);
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(float64x2_t *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = _Q1;
  return result;
}

float pv_intrinsics_from_fov_side_and_resolution(float a1, float a2)
{
  float result = (float)(a2 * 0.5) / tanf(a1 * 0.5);
  __asm { FMOV            V2.4S, #1.0 }
  return result;
}

float64x2_t pv_intrinsics_from_fov_side_and_resolution@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, float64x2_t a4@<Q2>)
{
  double v5 = a3 * 0.5;
  long double v6 = tan(a2 * 0.5);
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V2.2D, #-0.5
  }
  *(double *)&unint64_t v13 = v5 / v6;
  *(void *)&long long v14 = 0;
  *((double *)&v14 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v5 / v6;
  float64x2_t result = vaddq_f64(vmulq_f64(a4, _Q1), _Q2);
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(float64x2_t *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = _Q1;
  return result;
}

void pv_adjust_intrinsics_origin_to_lower_left()
{
  __asm { FMOV            V2.4S, #1.0 }
}

float pv_adjust_intrinsics_by_cardinal_angle(int a1, int32x2_t a2, double a3)
{
  a2.i32[1] = HIDWORD(a3);
  double v3 = COERCE_DOUBLE(vrev64_s32(a2));
  if (a1 == 1) {
    *(double *)&int32x2_t v4 = v3;
  }
  else {
    int32x2_t v4 = a2;
  }
  if (a1 != 2) {
    a2 = v4;
  }
  __asm { FMOV            V2.4S, #1.0 }
  if (_ZF) {
    double v10 = v3;
  }
  else {
    double v10 = *(double *)&a2;
  }
  return *(float *)&v10;
}

float pv_adjust_intrinsics_for_viewport(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  char v7 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v9 = i;
    double v19 = a4;
    float v10 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v7 & 1)));
    double v18 = a5;
    if (vabds_f32(v10, *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v7 & 1)))) >= 0.0001) {
      break;
    }
    char v7 = 1;
    if ((v9 & 1) == 0) {
      return *(float *)&a1;
    }
  }
  HIDWORD(aHGRenderQueue::CancelAllRenderJobs(*this, 1) = HIDWORD(a2);
  if ((float)(*(float *)&a5 / *((float *)&a5 + 1)) >= (float)(*(float *)&a4 / *((float *)&a4 + 1)))
  {
    float32x2_t v11 = (float32x2_t)vdup_lane_s32((int32x2_t)vdiv_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a4), 0);
  }
  else
  {
    *(float *)&a7 = *((float *)&a5 + 1) / *((float *)&a4 + 1);
    float32x2_t v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
  }
  LODWORD(aHGRenderQueue::CancelAllRenderJobs(*this, 1) = vmul_f32(*(float32x2_t *)&a1, v11).u32[0];
  __asm { FMOV            V2.4S, #1.0 }
  return *(float *)&a1;
}

__n128 pv_adjust_intrinsics_origin_to_lower_left@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v8 = vaddq_f64(a1[4], _Q2);
  float64x2_t v9 = vsubq_f64(a3, v8);
  v8.f64[1] = v9.f64[1];
  v9.f64[0] = a1->f64[0];
  _Q2.f64[0] = 0.0;
  _Q2.f64[1] = a1[2].f64[1];
  *(float64x2_t *)a2 = v9;
  *(_OWORD *)(a2 + 16) = 0u;
  *(float64x2_t *)(a2 + 32) = _Q2;
  *(_OWORD *)(a2 + 48) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(float64x2_t *)(a2 + 64) = v8;
  *(__n128 *)(a2 + 8pthread_cond_init((pthread_cond_t *)this, 0) = result;
  return result;
}

__n128 pv_adjust_intrinsics_by_cardinal_angle@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>)
{
  float64x2_t v4 = *(float64x2_t *)(a1 + 64);
  *(void *)&v5.f64[0] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u64[0];
  int8x16_t v6 = *(int8x16_t *)a1;
  v6.i64[1] = *(void *)(a1 + 40);
  switch(a2)
  {
    case 3:
      int8x16_t v6 = vextq_s8(v6, v6, 8uLL);
      v7.f64[0] = a4.f64[1] - v5.f64[0];
      v7.f64[1] = *(float64_t *)(a1 + 64);
      float64x2_t v4 = v7;
      break;
    case 2:
      v4.f64[1] = v5.f64[0];
      float64x2_t v4 = vsubq_f64(a4, v4);
      break;
    case 1:
      int8x16_t v6 = vextq_s8(v6, v6, 8uLL);
      v5.f64[1] = a4.f64[0] - v4.f64[0];
      float64x2_t v4 = v5;
      break;
  }
  *(void *)&long long v8 = 0;
  *((void *)&v8 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v6.i64[1];
  *(_OWORD *)a3 = v6.u64[0];
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 48) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(float64x2_t *)(a3 + 64) = v4;
  *(__n128 *)(a3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = result;
  return result;
}

__n128 pv_adjust_intrinsics_for_viewport@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q1>)
{
  char v4 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v6 = i;
    float64x2_t v23 = a3;
    double v7 = *(double *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
    float64x2_t v22 = a4;
    if (vabdd_f64(v7, *(double *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)))) >= 0.0001) {
      break;
    }
    char v4 = 1;
    if ((v6 & 1) == 0)
    {
      long long v8 = *(_OWORD *)(a1 + 48);
      a2[2] = *(_OWORD *)(a1 + 32);
      a2[3] = v8;
      long long v9 = *(_OWORD *)(a1 + 80);
      a2[4] = *(_OWORD *)(a1 + 64);
      a2[5] = v9;
      __n128 result = *(__n128 *)a1;
      long long v11 = *(_OWORD *)(a1 + 16);
      *a2 = *(_OWORD *)a1;
      a2[1] = v11;
      return result;
    }
  }
  float64x2_t v12 = *(float64x2_t *)a1;
  float64x2_t v13 = *(float64x2_t *)(a1 + 64);
  if (a4.f64[0] / a4.f64[1] >= a3.f64[0] / a3.f64[1])
  {
    a3.f64[0] = vdivq_f64(a4, a3).f64[0];
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3.f64[0], 0);
    float64x2_t v15 = vmulq_n_f64(v13, a3.f64[0]);
    v15.f64[1] = v15.f64[1] + (a3.f64[1] * a3.f64[0] - a4.f64[1]) * -0.5;
  }
  else
  {
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a4.f64[1] / a3.f64[1]), 0);
    float64x2_t v15 = vmulq_n_f64(v13, a4.f64[1] / a3.f64[1]);
    v15.f64[0] = v15.f64[0] + (a3.f64[0] * (a4.f64[1] / a3.f64[1]) - a4.f64[0]) * -0.5;
  }
  v12.f64[1] = *(float64_t *)(a1 + 40);
  float64x2_t v16 = vmulq_f64(v12, v14);
  *(void *)&long long v17 = 0;
  *((void *)&v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *(void *)&v16.f64[1];
  *a2 = *(unint64_t *)&v16.f64[0];
  a2[1] = 0u;
  a2[2] = v17;
  a2[3] = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  a2[4] = v15;
  a2[5] = result;
  return result;
}

double pv_adjust_transform_orientation(int a1, unsigned int a2, int a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  if (a3 == 1)
  {
    switch(a1)
    {
      case 1:
        if (a2 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D70;
        break;
      case 2:
        if (a2 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D98;
        break;
      case 3:
        if (a2 > 4) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73DE8;
        break;
      case 4:
        if (a2 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73DC0;
        break;
      default:
        goto LABEL_22;
    }
  }
  else
  {
    if (a3)
    {
LABEL_22:
      uint64_t v8 = 0;
      goto LABEL_23;
    }
    switch(a1)
    {
      case 1:
        if (a2 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73CD0;
        break;
      case 2:
        if (a2 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73CF8;
        break;
      case 3:
        if (a2 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D48;
        break;
      case 4:
        if (a2 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D20;
        break;
      default:
        goto LABEL_22;
    }
  }
  uint64_t v8 = v7[a2];
LABEL_23:
  float32x2_t v9 = vrsqrte_f32((float32x2_t)1065353216);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v9, v9)));
  float32x4_t v25 = vmulq_n_f32((float32x4_t)xmmword_1B7E736D0, vmul_f32(v10, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v10, v10))).f32[0]);
  __float2 v11 = __sincosf_stret(PVCardinalAnglesFloat[v8]);
  uint64_t v12 = 0;
  float32x4_t v13 = v25;
  float v14 = vmulq_f32(v13, v13).f32[0];
  float v15 = (float)(1.0 - v11.__cosval) * vmuls_lane_f32(v13.f32[0], *(float32x2_t *)v13.f32, 1);
  float v16 = vmuls_lane_f32(v11.__sinval, v25, 2);
  float v17 = (float)(1.0 - v11.__cosval) * vmuls_lane_f32(v13.f32[0], v13, 2);
  float v18 = vmuls_lane_f32(v11.__sinval, *(float32x2_t *)v25.f32, 1);
  float v19 = (float)(1.0 - v11.__cosval) * vmuls_lane_f32(v25.f32[1], v25, 2);
  v13.f32[0] = v19 - (float)(v11.__sinval * v25.f32[0]);
  *(float *)&unsigned int v20 = (float)(v11.__sinval * v25.f32[0]) + v19;
  *(float *)&long long v21 = v11.__cosval + (float)((float)(1.0 - v11.__cosval) * v14);
  *((float *)&v21 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v16 + v15;
  *((void *)&v21 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = COERCE_UNSIGNED_INT(v17 - v18);
  *(float *)&long long v22 = v15 - v16;
  *((float *)&v22 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v11.__cosval
                       + (float)((float)(1.0 - v11.__cosval) * vmuls_lane_f32(v25.f32[1], *(float32x2_t *)v25.f32, 1));
  *((void *)&v22 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v20;
  HIDWORD(v23) = 0;
  *(float *)&long long v23 = v18 + v17;
  DWORD1(v23) = v13.i32[0];
  *((float *)&v23 + 2) = v11.__cosval + (float)((float)(1.0 - v11.__cosval) * vmuls_lane_f32(v25.f32[2], v25, 2));
  v30[0] = v21;
  v30[1] = v22;
  _OWORD v30[2] = v23;
  v30[3] = xmmword_1B7E734D0;
  memset(v31, 0, sizeof(v31));
  do
  {
    v31[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, COERCE_FLOAT(v30[v12])), a5, *(float32x2_t *)&v30[v12], 1), a6, (float32x4_t)v30[v12], 2), a7, (float32x4_t)v30[v12], 3);
    ++v12;
  }
  while (v12 != 4);
  return *(double *)v31;
}

void pv_adjust_transform_orientation(float64x2_t *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  if (a4 == 1)
  {
    switch(a2)
    {
      case 1:
        if (a3 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D70;
        break;
      case 2:
        if (a3 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D98;
        break;
      case 3:
        if (a3 > 4) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73DE8;
        break;
      case 4:
        if (a3 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73DC0;
        break;
      default:
        goto LABEL_22;
    }
  }
  else
  {
    if (a4)
    {
LABEL_22:
      uint64_t v8 = 0;
      goto LABEL_23;
    }
    switch(a2)
    {
      case 1:
        if (a3 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73CD0;
        break;
      case 2:
        if (a3 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73CF8;
        break;
      case 3:
        if (a3 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D48;
        break;
      case 4:
        if (a3 >= 5) {
          goto LABEL_22;
        }
        double v7 = &unk_1B7E73D20;
        break;
      default:
        goto LABEL_22;
    }
  }
  uint64_t v8 = v7[a3];
LABEL_23:
  __double2 v9 = __sincos_stret(PVCardinalAnglesDouble[v8]);
  uint64_t v10 = 0;
  double v11 = (1.0 - v9.__cosval) * 0.0;
  double v12 = v11 - v9.__sinval * 0.0;
  *(double *)&long long v13 = v9.__cosval + v11;
  *(double *)&long long v14 = v11 - v9.__sinval;
  *((double *)&v14 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v9.__cosval + v11;
  *((double *)&v13 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v9.__sinval + v11;
  *(double *)&long long v15 = v9.__sinval * 0.0 + v11;
  *((double *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v12;
  float64x2_t v17 = *a1;
  float64x2_t v16 = a1[1];
  float64x2_t v19 = a1[2];
  float64x2_t v18 = a1[3];
  float64x2_t v21 = a1[4];
  float64x2_t v20 = a1[5];
  float64x2_t v23 = a1[6];
  float64x2_t v22 = a1[7];
  v27[0] = v13;
  v27[1] = *(unint64_t *)&v12;
  v27[2] = v14;
  v27[3] = (unint64_t)v15;
  v27[4] = v15;
  v27[5] = COERCE_UNSIGNED_INT64(v9.__cosval + 1.0 - v9.__cosval);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  long long v30 = xmmword_1B7E733E0;
  *a5 = 0u;
  a5[1] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[6] = 0u;
  a5[7] = 0u;
  do
  {
    float64x2_t v25 = (float64x2_t)v27[v10];
    float64x2_t v24 = (float64x2_t)v27[v10 + 1];
    uint64_t v26 = (float64x2_t *)&a5[v10];
    *uint64_t v26 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v25.f64[0]), v19, v25, 1), v21, v24.f64[0]), v23, v24, 1);
    v26[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v25.f64[0]), v18, v25, 1), v20, v24.f64[0]), v22, v24, 1);
    v10 += 2;
  }
  while (v10 != 8);
}

float pv_projected_pixels_per_unit(int a1, _DWORD *a2, float32x4_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, simd_float4 a14, simd_float4 a15, float32x4_t a16, float32x2_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _Q1.i64[1] = a24;
  long long v35 = 0uLL;
  __asm { FMOV            V1.2S, #1.0 }
  if (pv_projected_screen_aligned_bounding_rect_around_point(a1, 0, 0, &v35, a3, _Q1, a4, a5, a6, a7, a10, a11, a12, a13, a14, a15, a14, a15, a16,
         a17))
  {
    float result = *((float *)&v35 + 3);
    *a2 = HIDWORD(v35);
  }
  return result;
}

BOOL pv_projected_screen_aligned_bounding_rect_around_point(int a1, int a2, int a3, _OWORD *a4, float32x4_t a5, float32x4_t a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, simd_float4 a15, simd_float4 a16, simd_float4 a17, simd_float4 a18, float32x4_t a19, float32x2_t a20)
{
  *(__n128 *)&v50[32] = a9;
  *(__n128 *)&v50[48] = a10;
  *(__n128 *)float64x2_t v50 = a7;
  *(__n128 *)&v50[16] = a8;
  v76.columns[2] = a17;
  v76.columns[3] = a18;
  *(float32x2_t *)a6.f32 = vmul_f32(*(float32x2_t *)a6.f32, (float32x2_t)0x3F0000003F000000);
  *(float *)&unint64_t v24 = -a6.f32[0];
  float32x4_t v25 = (float32x4_t)COERCE_UNSIGNED_INT(-a6.f32[0]);
  HIDWORD(v24) = a6.i32[1];
  a6.i32[2] = 0;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  float32x4_t v26 = vaddq_f32(a5, a6);
  a6.f32[1] = -a6.f32[1];
  v25.f32[1] = a6.f32[1];
  v68[0] = vaddq_f32(a5, v25);
  v68[1] = vaddq_f32(a5, a6);
  v68[2] = v26;
  v68[3] = vaddq_f32(a5, (float32x4_t)v24);
  v76.columns[0] = a15;
  v76.columns[1] = a16;
  simd_float4x4 v77 = __invert_f4(v76);
  uint64_t v27 = 0;
  long long v64 = *(_OWORD *)v50;
  long long v65 = *(_OWORD *)&v50[16];
  long long v66 = *(_OWORD *)&v50[32];
  long long v67 = *(_OWORD *)&v50[48];
  __n128 v69 = 0u;
  __n128 v70 = 0u;
  __n128 v71 = 0u;
  __n128 v72 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v69 + v27) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v77.columns[0], COERCE_FLOAT(*(long long *)((char *)&v64 + v27))), (float32x4_t)v77.columns[1], *(float32x2_t *)((char *)&v64 + v27), 1), (float32x4_t)v77.columns[2], *(float32x4_t *)((char *)&v64 + v27), 2), (float32x4_t)v77.columns[3], *(float32x4_t *)((char *)&v64 + v27), 3);
    v27 += 16;
  }
  while (v27 != 64);
  __n128 v62 = v70;
  __n128 v63 = v69;
  __n128 v60 = v72;
  __n128 v61 = v71;
  *(double *)v28.i64 = pv_simd_matrix_get_rotation_matrix(*(simd_float4x4 *)v50);
  v28.i32[3] = 0;
  v29.i32[3] = 0;
  simd_float3 v52 = v29;
  simd_float3 v53 = v28;
  v30.i32[3] = 0;
  simd_float3 v51 = v30;
  v78.columns[0] = a15;
  v78.columns[1] = a16;
  v78.columns[2] = a17;
  v78.columns[3] = a18;
  *(double *)&long long v31 = pv_simd_matrix_get_rotation_matrix(v78);
  HIDWORD(v3HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
  HIDWORD(v32) = 0;
  long long v56 = v32;
  long long v58 = v31;
  HIDWORD(v33) = 0;
  long long v54 = v33;
  v74.columns[1] = v52;
  v74.columns[0] = v53;
  v74.columns[2] = v51;
  simd_float3x3 v75 = __invert_f3(v74);
  uint64_t v41 = 0;
  long long v64 = v58;
  long long v65 = v56;
  long long v66 = v54;
  __n128 v69 = 0u;
  __n128 v70 = 0u;
  __n128 v71 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v69 + v4HGRenderQueue::CancelAllRenderJobs(*this, 1) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v75.columns[0], COERCE_FLOAT(*(long long *)((char *)&v64 + v41))), (float32x4_t)v75.columns[1], *(float32x2_t *)((char *)&v64 + v41), 1), (float32x4_t)v75.columns[2], *(float32x4_t *)((char *)&v64 + v41), 2);
    v41 += 16;
  }
  while (v41 != 48);
  unint64_t v42 = 0;
  BOOL v43 = 0;
  float32x4_t v57 = (float32x4_t)v70;
  float32x4_t v59 = (float32x4_t)v69;
  float32x4_t v55 = (float32x4_t)v71;
  while (1)
  {
    float32x4_t v44 = (float32x4_t)v68[v42];
    DWORD2(v64) = 0;
    *(void *)&long long v64 = 0;
    if (!pv_simd_matrix_project(a1, a2, a3, &v64, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, v44.f32[0]), v57, *(float32x2_t *)v44.f32, 1), v55, v44, 2), v63, v62, v61, v60, v34, v35, v36, v37, v38, v39, v40, a19, a20))break; {
    v69.n128_u64[v42] = v64;
    }
    BOOL v43 = v42++ > 2;
    if (v42 == 4)
    {
      uint64_t v45 = 0;
      *(int32x2_t *)&long long v46 = vdup_n_s32(0x7F7FFFFFu);
      float32x2_t v47 = (float32x2_t)0x80000000800000;
      do
      {
        float32x2_t v48 = (float32x2_t)v69.n128_u64[v45];
        float32x2_t v47 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v48, v47), (int8x8_t)v48, (int8x8_t)v47);
        *(int8x8_t *)&long long v46 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v46, v48), (int8x8_t)v48, *(int8x8_t *)&v46);
        ++v45;
      }
      while (v45 != 4);
      *((float32x2_t *)&v46 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = vsub_f32(v47, *(float32x2_t *)&v46);
      *a4 = v46;
      return 1;
    }
  }
  return v43;
}

#error "1B74A5524: call analysis failed (funcsize=51)"

#error "1B74A58E8: call analysis failed (funcsize=276)"

BOOL pv_projected_bounding_box_around_point(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, double a15, float32x4_t a16, float32x4_t a17, float32x2_t a18, uint64_t a19, uint64_t a20,int a21,__int32 a22)
{
  uint64_t v26 = 0;
  v27.i32[3] = a22;
  *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)0x3F0000003F000000);
  v29.i64[1] = 0;
  v29.f32[0] = -v27.f32[0];
  float32x4_t v28 = (float32x4_t)COERCE_UNSIGNED_INT(-v27.f32[0]);
  v29.i32[1] = v27.i32[1];
  v27.i32[2] = 0;
  float32x4_t v30 = vaddq_f32(a9, v27);
  v27.f32[1] = -v27.f32[1];
  v28.f32[1] = v27.f32[1];
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  v52[0] = vaddq_f32(a9, v28);
  v52[1] = vaddq_f32(a9, v27);
  float64x2_t v52[2] = v30;
  v52[3] = vaddq_f32(a9, (float32x4_t)v29.u64[0]);
  float v31 = vmuls_lane_f32(0.5, a10, 2);
  a9.f32[0] = a9.f32[2] + v31;
  float v32 = a9.f32[2] - v31;
  do
  {
    float32x4_t v33 = (float32x4_t)v52[v26];
    uint64_t v34 = &v51[v26];
    float32x4_t v35 = v33;
    v35.i32[2] = a9.i32[0];
    float32x4_t *v34 = v35;
    v33.f32[2] = v32;
    v34[4] = v33;
    ++v26;
  }
  while (v26 != 4);
  *(void *)((char *)v52 + 4) = 0;
  LODWORD(v52[0]) = 0;
  BOOL v40 = pv_simd_matrix_project(a1, a2, a3, v52, v51[0], a11, a12, a13, a14, a5, a6, a7, a8, v29, v30, a16, a17, a18);
  BOOL result = 0;
  if (v40)
  {
    uint64_t v45 = 0;
    while (1)
    {
      *(_OWORD *)(a4 + 16 * v45) = v52[0];
      if (v45 == 7) {
        break;
      }
      float32x4_t v46 = v51[v45 + 1];
      *(void *)((char *)v52 + 4) = 0;
      LODWORD(v52[0]) = 0;
      ++v45;
      if (!pv_simd_matrix_project(a1, a2, a3, v52, v46, a11, a12, a13, a14, v36, v37, v38, v39, v41, v42, v43, a17, a18))return (unint64_t)(v45 - 1) > 6; {
    }
      }
    return 1;
  }
  return result;
}

BOOL pv_projected_bounding_box_around_point(float64x2_t *a1, float64x2_t *a2, long long *a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, float64x2_t a9)
{
  float64x2_t v42 = a9;
  uint64_t v15 = 0;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  float64x2_t v16 = *a1;
  float64x2_t v27 = a1[1];
  double v17 = a2[1].f64[0];
  __asm { FMOV            V4.2D, #0.5 }
  float64x2_t v23 = vmulq_f64(*a2, _Q4);
  _Q4.f64[0] = -v23.f64[0];
  v24.f64[0] = -v23.f64[0];
  v24.f64[1] = -v23.f64[1];
  float64x2_t v49 = vaddq_f64(*a1, v24);
  float64x2_t v50 = vaddq_f64(v27, (float64x2_t)0);
  _Q4.f64[1] = v23.f64[1];
  float64x2_t v25 = vaddq_f64(v16, v23);
  v23.f64[1] = -v23.f64[1];
  float64x2_t v51 = vaddq_f64(v16, v23);
  float64x2_t v52 = v50;
  float64x2_t v53 = v25;
  float64x2_t v54 = v50;
  float64x2_t v26 = vaddq_f64(v16, _Q4);
  float64x2_t v55 = v26;
  float64x2_t v56 = v50;
  v26.f64[0] = v27.f64[0] + v17 * 0.5;
  v27.f64[0] = v27.f64[0] - v17 * 0.5;
  do
  {
    long long v28 = *(long long *)((char *)&v49 + v15 * 16);
    float32x4_t v29 = &v48[v15];
    long long *v29 = v28;
    v29[1] = (__int128)v26;
    v29[8] = v28;
    v29[9] = (__int128)v27;
    v15 += 2;
  }
  while (v15 != 8);
  unint64_t v30 = 0;
  BOOL v31 = 0;
  while (1)
  {
    float v32 = &v48[2 * v30];
    long long v33 = *v32;
    long long v34 = v32[1];
    *(void *)&long long v47 = 0;
    float64x2_t v46 = 0uLL;
    long long v44 = v33;
    long long v45 = v34;
    long long v35 = a3[5];
    float64x2_t v53 = (float64x2_t)a3[4];
    float64x2_t v54 = (float64x2_t)v35;
    long long v36 = a3[7];
    float64x2_t v55 = (float64x2_t)a3[6];
    float64x2_t v56 = (float64x2_t)v36;
    float64x2_t v37 = (float64x2_t)a3[1];
    float64x2_t v49 = (float64x2_t)*a3;
    float64x2_t v50 = v37;
    long long v38 = a3[3];
    float64x2_t v51 = (float64x2_t)a3[2];
    float64x2_t v52 = (float64x2_t)v38;
    if (!pv_simd_matrix_project((float64x2_t *)&v44, (long long *)&v49, &v43, a5, a6, a7, &v46, v42, a8, *(uint64_t *)&v42.f64[0], *(uint64_t *)&v42.f64[1], *(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *(void *)(a4 + 48), *(void *)(a4 + 56),
            *(void *)(a4 + 64),
            *(void *)(a4 + 72),
            *(_OWORD *)(a4 + 80),
            *(_OWORD *)(a4 + 96),
            *(_OWORD *)(a4 + 112),
            v33,
            v45,
            0,
            v47,
            v48[0]))
      break;
    long long v39 = v47;
    unint64_t v40 = a8 + 32 * v30;
    *(float64x2_t *)unint64_t v40 = v46;
    *(_OWORD *)(v40 + 16) = v39;
    BOOL v31 = v30++ > 6;
    if (v30 == 8) {
      return 1;
    }
  }
  return v31;
}

BOOL pv_projected_bounding_rect_around_point(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x2_t a10, float32x4_t a11, __n128 a12, __n128 a13, __n128 a14, float32x4_t a15, float32x2_t a16)
{
  __n128 v22 = (__n128)a11;
  *(float32x2_t *)a11.f32 = vmul_f32(a10, (float32x2_t)0x3F0000003F000000);
  *(float *)&unint64_t v23 = -a11.f32[0];
  float32x4_t v24 = (float32x4_t)COERCE_UNSIGNED_INT(-a11.f32[0]);
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  HIDWORD(v23) = a11.i32[1];
  a11.i32[2] = 0;
  float32x4_t v25 = vaddq_f32(a9, a11);
  a11.f32[1] = -a11.f32[1];
  v24.f32[1] = a11.f32[1];
  float32x4_t v42 = vaddq_f32(a9, v24);
  v43[0] = vaddq_f32(a9, a11);
  v43[1] = v25;
  _OWORD v43[2] = vaddq_f32(a9, (float32x4_t)v23);
  *(void *)((char *)&v41 + 4) = 0;
  LODWORD(v4HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
  __n128 v37 = v22;
  __n128 v39 = a13;
  __n128 v40 = a14;
  BOOL v30 = pv_simd_matrix_project(a1, a2, a3, &v41, v42, v22, a12, a13, a14, a5, a6, a7, a8, v25, (float32x4_t)a14, (float32x4_t)a13, a15, a16);
  BOOL result = 0;
  if (v30)
  {
    uint64_t v35 = 0;
    while (1)
    {
      *(_OWORD *)(a4 + 16 * v35) = v41;
      if (v35 == 3) {
        break;
      }
      float32x4_t v36 = (float32x4_t)v43[v35];
      *(void *)((char *)&v41 + 4) = 0;
      LODWORD(v4HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
      ++v35;
      if (!pv_simd_matrix_project(a1, a2, a3, &v41, v36, v37, a12, v39, v40, v26, v27, v28, v29, v31, v32, v33, a15, a16))return (unint64_t)(v35 - 1) > 2; {
    }
      }
    return 1;
  }
  return result;
}

BOOL pv_projected_bounding_rect_around_point(float64x2_t *a1, long long *a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10)
{
  float64x2_t v36 = a10;
  unint64_t v16 = 0;
  BOOL v17 = 0;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  float64x2_t v18 = *a1;
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v24 = vmulq_f64(a9, _Q3);
  _Q3.f64[0] = -v24.f64[0];
  v25.f64[0] = -v24.f64[0];
  v25.f64[1] = -v24.f64[1];
  float64x2_t v26 = vaddq_f64(a1[1], (float64x2_t)0);
  v46[0] = vaddq_f64(v25, *a1);
  v46[1] = v26;
  float64x2_t v27 = vaddq_f64(v24, v18);
  _Q3.f64[1] = v24.f64[1];
  v24.f64[1] = -v24.f64[1];
  float64x2_t v46[2] = vaddq_f64(v24, v18);
  v46[3] = v26;
  v46[4] = v27;
  v46[5] = v26;
  v46[6] = vaddq_f64(_Q3, v18);
  v46[7] = v26;
  while (1)
  {
    uint64_t v28 = (float64x2_t *)&v46[2 * v16];
    float64x2_t v29 = *v28;
    float64x2_t v30 = v28[1];
    *(void *)&long long v45 = 0;
    float64x2_t v44 = 0uLL;
    v43[0] = v29;
    v43[1] = v30;
    long long v31 = a2[5];
    long long v39 = a2[4];
    long long v40 = v31;
    long long v32 = a2[7];
    long long v41 = a2[6];
    long long v42 = v32;
    if (!pv_simd_matrix_project(v43, &v38, &v37, a4, a5, a6, &v44, v36, a8, *(uint64_t *)&v36.f64[0], *(uint64_t *)&v36.f64[1], *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 56),
            *(void *)(a3 + 64),
            *(void *)(a3 + 72),
            *(_OWORD *)(a3 + 80),
            *(_OWORD *)(a3 + 96),
            *(_OWORD *)(a3 + 112),
            *a2,
            a2[1],
            a2[2],
            a2[3],
            v39))
      break;
    long long v33 = v45;
    uint64_t v34 = a7 + 32 * v16;
    *(float64x2_t *)uint64_t v34 = v44;
    *(_OWORD *)(v34 + 16) = v33;
    BOOL v17 = v16++ > 2;
    if (v16 == 4) {
      return 1;
    }
  }
  return v17;
}

void pv_convert_homography_coordinates(simd_float3x3 a1, CGRect a2, CGRect a3)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  if (!CGRectEqualToRect(a2, a3))
  {
    *(float *)&unsigned int v15 = a3.size.width / width;
    float v16 = a3.size.height / height;
    v26.columns[2].f32[0] = a3.origin.x - x * *(float *)&v15;
    v26.columns[0] = (simd_float3)v15;
    float v17 = a3.origin.y - y * v16;
    v26.columns[1].i32[0] = 0;
    v26.columns[1].i64[1] = 0;
    v26.columns[1].f32[1] = v16;
    v26.columns[2].f32[1] = v17;
    v26.columns[2].i64[1] = COERCE_UNSIGNED_INT(1.0);
    float32x4_t v20 = (float32x4_t)v26.columns[1].u64[0];
    float32x4_t v21 = (float32x4_t)v15;
    float32x4_t v22 = (float32x4_t)v26.columns[2];
    simd_float3x3 v27 = __invert_f3(v26);
    uint64_t v18 = 0;
    simd_float3x3 v24 = v27;
    memset(&v25, 0, sizeof(v25));
    do
    {
      v25.columns[v18] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a1.columns[0], COERCE_FLOAT(*(_OWORD *)&v24.columns[v18])), (float32x4_t)a1.columns[1], *(float32x2_t *)v24.columns[v18].f32, 1), (float32x4_t)a1.columns[2], (float32x4_t)v24.columns[v18], 2);
      ++v18;
    }
    while (v18 != 3);
    uint64_t v19 = 0;
    simd_float3x3 v24 = v25;
    memset(&v25, 0, sizeof(v25));
    do
    {
      v25.columns[v19] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)&v24.columns[v19])), v20, *(float32x2_t *)v24.columns[v19].f32, 1), v22, (float32x4_t)v24.columns[v19], 2);
      ++v19;
    }
    while (v19 != 3);
    pv_simd_normalize(v25);
  }
}

void pv_convert_homography_coordinates(_OWORD *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  if (CGRectEqualToRect(*(CGRect *)&a3, *(CGRect *)&a7))
  {
    long long v20 = a1[3];
    a2[2] = a1[2];
    a2[3] = v20;
    long long v21 = a1[5];
    a2[4] = a1[4];
    a2[5] = v21;
    long long v22 = a1[1];
    *a2 = *a1;
    a2[1] = v22;
  }
  else
  {
    *(double *)v23.i64 = a7 - a3 * (a9 / a5);
    v24.i64[0] = 0;
    *(double *)&v24.i64[1] = a10 / a6;
    *(double *)&v23.i64[1] = a8 - a4 * (a10 / a6);
    long long v63 = COERCE_UNSIGNED_INT64(a9 / a5);
    long long v64 = 0u;
    int8x16_t v48 = v24;
    int8x16_t v65 = v24;
    long long v66 = 0u;
    __asm { FMOV            V0.2D, #1.0; simd_double3x3 }
    float64x2_t v47 = _Q0;
    int8x16_t v67 = v23;
    float64x2_t v68 = _Q0;
    int8x16_t v49 = v23;
    __invert_d3();
    uint64_t v30 = 0;
    int8x16_t v34 = *(int8x16_t *)a1;
    float64x2_t v31 = *((float64x2_t *)a1 + 1);
    int8x16_t v35 = *((int8x16_t *)a1 + 2);
    float64x2_t v32 = *((float64x2_t *)a1 + 3);
    int8x16_t v36 = *((int8x16_t *)a1 + 4);
    float64x2_t v33 = *((float64x2_t *)a1 + 5);
    int8x16_t v65 = v52;
    long long v66 = v53;
    int8x16_t v67 = v54;
    float64x2_t v68 = v55;
    long long v63 = v50;
    long long v64 = v51;
    long long v56 = 0u;
    long long v57 = 0u;
    int8x16_t v58 = 0u;
    long long v59 = 0u;
    int8x16_t v60 = 0u;
    float64x2_t v61 = 0u;
    v34.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
    v35.i64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
    v36.i64[1] = vextq_s8(v36, v36, 8uLL).u64[0];
    do
    {
      float64x2_t v38 = *(float64x2_t *)((char *)&v63 + v30);
      float64x2_t v37 = *(float64x2_t *)((char *)&v63 + v30 + 16);
      long long v39 = (float64x2_t *)((char *)&v56 + v30);
      float64x2_t *v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34, v38.f64[0]), (float64x2_t)v35, v38, 1), (float64x2_t)v36, v37.f64[0]);
      v39[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v31, v38), v32, v38, 1), v37, v33);
      v30 += 32;
    }
    while (v30 != 96);
    uint64_t v40 = 0;
    int8x16_t v65 = v58;
    long long v66 = v59;
    int8x16_t v67 = v60;
    float64x2_t v68 = v61;
    long long v63 = v56;
    long long v64 = v57;
    memset(v62, 0, sizeof(v62));
    int8x16_t v42 = v48;
    int8x16_t v41 = (int8x16_t)COERCE_UNSIGNED_INT64(a9 / a5);
    int8x16_t v43 = v49;
    v41.i64[1] = vextq_s8(v41, v41, 8uLL).u64[0];
    v42.i64[1] = vextq_s8(v42, v42, 8uLL).u64[0];
    v43.i64[1] = vextq_s8(v43, v43, 8uLL).u64[0];
    do
    {
      float64x2_t v45 = *(float64x2_t *)((char *)&v63 + v40 * 16);
      float64x2_t v44 = *(float64x2_t *)((char *)&v63 + v40 * 16 + 16);
      float64x2_t v46 = (float64x2_t *)&v62[v40];
      *float64x2_t v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v41, v45.f64[0]), (float64x2_t)v42, v45, 1), (float64x2_t)v43, v44.f64[0]);
      v46[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64((float64x2_t)0, v45), (float64x2_t)0, v45, 1), v44, v47);
      v40 += 2;
    }
    while (v40 != 6);
    pv_simd_normalize((uint64_t)v62, a2, v44);
  }
}

void sub_1B74A6838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A69B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A6B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A6C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A6DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A6F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A7108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A7720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  _Unwind_Resume(a1);
}

void sub_1B74A79FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1B74A7C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B74A7DC8(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B74A7E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A7EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A7FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t getDefaultsIntValue(NSDictionary *a1, NSString *a2, uint64_t a3)
{
  char v4 = [(NSDictionary *)a1 objectForKey:a2];
  float64x2_t v5 = v4;
  if (v4) {
    a3 = [v4 intValue];
  }

  return a3;
}

void sub_1B74A80B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getDefaultsBoolValue(NSDictionary *a1, NSString *a2, uint64_t a3)
{
  char v4 = [(NSDictionary *)a1 objectForKey:a2];
  float64x2_t v5 = v4;
  if (v4) {
    a3 = [v4 BOOLValue];
  }

  return a3;
}

void sub_1B74A810C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A821C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74A83EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A8464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A84DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A8558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A85EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A87DC(_Unwind_Exception *a1)
{
  char v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B74A8BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74A911C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A93DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74A9458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1B74A94E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1B74A9564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1B74A9678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_1B74A9718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  uint64_t v11 = v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1B74A9CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74A9F7C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B74AA0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AA16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCMSampleBuffer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B74AA3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AA4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AA5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AA6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AA824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AA8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AA9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AAAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AABFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AACB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74AADC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void sub_1B74AB324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AB62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MakePVCameraFrameMetadata(AVCaptureDevicePosition a1, CMQuaternion a2, double a3, UIInterfaceOrientation a4, AVCaptureVideoOrientation a5)
{
  return +[PVCameraFrameMetadata frameMetadata:::::](PVCameraFrameMetadata, "frameMetadata:::::", a1, a4, a5, a2.x, a2.y, a2.z, a2.w, a3);
}

PVCameraFrameMetadata *MakePVCameraFrameMetadata(AVCaptureDevicePosition a1, CMQuaternion a2, double a3, UIInterfaceOrientation a4, double a5)
{
  return +[PVCameraFrameMetadata frameMetadataWithAngle:::::](PVCameraFrameMetadata, "frameMetadataWithAngle:::::", a1, a4, a2.x, a2.y, a2.z, a2.w, a3, a5);
}

void sub_1B74AB7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AB88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AB8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74ABAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MakePVFaceDetectionFull(uint64_t a1, uint64_t a2, double a3, uint64_t a4, double a5, CGRect a6, AVCaptureVideoOrientation a7, CMTime *a8, AVMetadataFaceObject *a9)
{
  CMTime v11 = *a8;
  __double2 v9 = +[PVFaceDetection faceDetection:::::::::](PVFaceDetection, "faceDetection:::::::::", a1, a2, a4, a7, &v11, a9, a3, a5, a6.origin.x, a6.origin.y, a6.size.width, a6.size.height);

  return v9;
}

id MakePVFaceDetectionFull(uint64_t a1, uint64_t a2, double a3, uint64_t a4, double a5, CGRect a6, double a7, CMTime *a8, AVMetadataFaceObject *a9)
{
  CMTime v11 = *a8;
  __double2 v9 = +[PVFaceDetection faceDetectionWithAngle:::::::::](PVFaceDetection, "faceDetectionWithAngle:::::::::", a1, a2, a4, &v11, a9, a3, a5, a6.origin.x, a6.origin.y, a6.size.width, a6.size.height, a7);

  return v9;
}

id MakePVFaceDetection(AVMetadataFaceObject *a1, AVCaptureVideoOrientation a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [(AVMetadataFaceObject *)v3 faceID];
  uint64_t v5 = [(AVMetadataFaceObject *)v3 hasRollAngle];
  [(AVMetadataFaceObject *)v3 rollAngle];
  double v7 = v6;
  uint64_t v8 = [(AVMetadataFaceObject *)v3 hasYawAngle];
  [(AVMetadataFaceObject *)v3 yawAngle];
  double v10 = v9;
  [(AVMetadataFaceObject *)v3 bounds];
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  if (v3)
  {
    [(AVMetadataFaceObject *)v3 time];
  }
  else
  {
    long long v21 = 0uLL;
    uint64_t v22 = 0;
  }
  long long v23 = v21;
  uint64_t v24 = v22;
  uint64_t v19 = +[PVFaceDetection faceDetection:::::::::](PVFaceDetection, "faceDetection:::::::::", v4, v5, v8, a2, &v23, v3, v7, v10, v12, v14, v16, v18);

  return v19;
}

void sub_1B74ABE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MakePVFaceDetection(AVMetadataFaceObject *a1, double a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [(AVMetadataFaceObject *)v3 faceID];
  uint64_t v5 = [(AVMetadataFaceObject *)v3 hasRollAngle];
  [(AVMetadataFaceObject *)v3 rollAngle];
  double v7 = v6;
  uint64_t v8 = [(AVMetadataFaceObject *)v3 hasYawAngle];
  [(AVMetadataFaceObject *)v3 yawAngle];
  double v10 = v9;
  [(AVMetadataFaceObject *)v3 bounds];
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  if (v3)
  {
    [(AVMetadataFaceObject *)v3 time];
  }
  else
  {
    long long v21 = 0uLL;
    uint64_t v22 = 0;
  }
  long long v23 = v21;
  uint64_t v24 = v22;
  uint64_t v19 = +[PVFaceDetection faceDetectionWithAngle:::::::::](PVFaceDetection, "faceDetectionWithAngle:::::::::", v4, v5, v8, &v23, v3, v7, v10, v12, v14, v16, v18, a2);

  return v19;
}

void sub_1B74ABF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AC300(_Unwind_Exception *a1)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1B74AC460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)PVLivePlayer;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void sub_1B74AC798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AC86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74ACA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1B74ACE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74ACFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AD590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74AD7E8(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);

  _Unwind_Resume(a1);
}

void sub_1B74AD918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74ADA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74ADC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74ADE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AE268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__19(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B74AE50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74AE814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_1B74AEAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t __copy_helper_block_ea8_40c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 40);
  *(void *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

PVPerfStats *std::unique_ptr<PVPerfStats>::reset[abi:ne180100](PVPerfStats **a1, PVPerfStats *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PVPerfStats::~PVPerfStats(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void PVRenderLinkJob::PVRenderLinkJob(PVRenderLinkJob *this, PVLivePlayer *a2, CMTime *a3, double a4, PVTaskToken *a5)
{
  double v9 = a2;
  double v10 = a5;
  HGUserJob::HGUserJob((HGUserJob *)this);
  *(void *)this = &unk_1F108A178;
  double v11 = v9;
  *((void *)this + 9) = v11;
  CMTimeEpoch epoch = a3->epoch;
  *((_OWORD *)this + 5) = *(_OWORD *)&a3->value;
  *((void *)this + 12) = epoch;
  *((double *)this + 13) = a4;
  double v13 = v10;
  *((void *)this + 14) = v13;
  PVPerfStats::FrameStats::FrameStats((uint64_t)this + 120);
  HGUserJob::SetQueueID((uint64_t)this, 0);
  HGUserJob::SetPriority((uint64_t)this, 5);
  HGUserJob::SetNotifyFunc((uint64_t)this, (void (*)(HGUserJob *))PVRenderLinkJob::PVPlayerQueueNotificationFunction);
}

void sub_1B74AF4D0(_Unwind_Exception *a1)
{
  HGUserJob::~HGUserJob((HGUserJob *)v2);
  _Unwind_Resume(a1);
}

void PVRenderLinkJob::PVPlayerQueueNotificationFunction(PVRenderLinkJob *this, HGUserJob *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1BA9C0A20](this, a2);
  if (this)
  {
    if (v4)
    {
      uint64_t v5 = (PVRenderLinkJob *)v4;
      if (HGGLBlendingInfo::GetRGBOperation(v4) == 3
        || HGGLBlendingInfo::GetRGBOperation((HGGLBlendingInfo *)v5) == 4)
      {
        PVRenderLinkJob::HandleJob(v5);
      }
    }
  }
}

void PVRenderLinkJob::~PVRenderLinkJob(PVRenderLinkJob *this)
{
  *(void *)this = &unk_1F108A178;
  double v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }

  HGUserJob::~HGUserJob((HGUserJob *)this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F108A178;
  double v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }

  HGUserJob::~HGUserJob((HGUserJob *)this);

  HGObject::operator delete(v3);
}

uint64_t PVRenderLinkJob::HandleJob(PVRenderLinkJob *this)
{
  if (this) {
    (*(void (**)(PVRenderLinkJob *))(*(void *)this + 16))(this);
  }
  double v2 = (void *)*((void *)this + 9);
  uint64_t v4 = this;
  (*(void (**)(PVRenderLinkJob *))(*(void *)this + 16))(this);
  [v2 handleRenderLinkJob:&v4];
  if (v4) {
    (*(void (**)(PVRenderLinkJob *))(*(void *)v4 + 24))(v4);
  }
  return (*(uint64_t (**)(PVRenderLinkJob *))(*(void *)this + 24))(this);
}

void sub_1B74AF7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B74AF8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGObject::operator delete(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  HGTransform::~HGTransform((HGTransform *)&a9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  uint64_t v14 = *(void *)(v12 - 96);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = *(void *)(v12 - 88);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  _Unwind_Resume(a1);
}

void sub_1B74B0760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B07C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B087C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B0A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B0C00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B74B0C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B0D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4pthread_cond_init((pthread_cond_t *)this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void sub_1B74B122C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B74B12B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B16F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74B183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74B19B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1B74B1AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B74B1BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B74B1C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74B1D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B74B1E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B74B2CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74B3218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1B74B36FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v11);
  (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (*v10) {
    (*(void (**)(void))(*(void *)*v10 + 24))(*v10);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void HMaskAlpha::HMaskAlpha(HMaskAlpha *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  HgcMaskAlpha::HgcMaskAlpha(this);
}

void sub_1B74B3918(_Unwind_Exception *a1)
{
  HgcMaskAlpha::~HgcMaskAlpha(v1);
  _Unwind_Resume(a1);
}

uint64_t HMaskAlpha::GetDOD(HMaskAlpha *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  unsigned int v6 = *((_DWORD *)this + 104);
  if (!v6) {
    return *(void *)&a4.var0;
  }
  uint64_t v7 = HGRectMake4i(-v6, -v6, v6, v6);

  return HGRectGrow(v5, v4, v7);
}

char *HMaskAlpha::RenderPageMetal(HGNode *this, HGPage *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v20, this, a2);
  (*(void (**)(void, void))(**(void **)a2 + 144))(*(void *)a2, 0);
  uint64_t v4 = (const char *)(*(uint64_t (**)(HGNode *))(*(void *)this + 48))(this);
  snprintf(__str, 0x100uLL, "%s::RenderPageMetal( [%d %d %d %d])", v4, *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 6), *((_DWORD *)a2 + 7));
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v19, "gpu", 1, __str);
  Buffer = HGGPURenderer::CreateBuffer(*(void *)a2, *((HGRect *)a2 + 1), 7, 1, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
  unsigned int v6 = (const void *)(*(uint64_t (**)(void, void, HGNode *))(**(void **)a2 + 368))(*(void *)a2, *((void *)this + 8), this);
  if (v6
  {
    uint64_t v8 = v7;
    uint64_t v9 = (char *)(*(uint64_t (**)(HGNode *))(*(void *)this + 48))(this);
    std::string::basic_string[abi:ne180100]<0>(&__p, v9);
    HGMetalHandler::SetDebugLabel(v8, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    HGMetalHandler::BindBuffer((HGMetalHandler *)v8, (HGBitmap *)Buffer);
    for (uint64_t i = 0; i != 8; ++i)
    {
      uint64_t v12 = (HGBitmap *)*((void *)a2 + i + 21);
      if (v12) {
        __n128 v10 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, i, v12);
      }
    }
    (*(void (**)(HGNode *, HGPage *, void, std::string *, __n128))(*(void *)this + 488))(this, a2, 0, v8, v10);
    if (HGNode::IsInPlaceHardwareBlendingEnabled(this))
    {
      HGMetalHandler::EnableBlending((uint64_t)v8);
      uint64_t v14 = (const HGBlendingInfo *)(*(uint64_t (**)(HGNode *))(*(void *)this + 256))(this);
      __n128 v15 = HGMetalHandler::SetBlendingInfo((HGMetalHandler *)v8, v14);
      double v16 = (__n128 *)(*(uint64_t (**)(HGNode *, __n128))(*(void *)this + 272))(this, v15);
      __n128 v13 = HGMetalHandler::SetBlendingColor((__n128 *)v8, v16);
    }
    (*(void (**)(std::string *, void, void, uint64_t, __n128))(v8->__r_.__value_.__r.__words[0] + 192))(v8, *((void *)a2 + 2), *((void *)a2 + 3), 8, v13);
    (*(void (**)(HGNode *, HGPage *, void, std::string *))(*(void *)this + 496))(this, a2, 0, v8);
    HGMetalHandler::BindBuffer((HGMetalHandler *)v8, 0);
  }
  else
  {
    HGGPURenderer::CopyMetal(*(HGGPURenderer **)a2, (HGBitmap *)Buffer, *((HGRect *)a2 + 1), *((HGBitmap **)a2 + 21));
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v19);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v20);
  return Buffer;
}

void sub_1B74B3D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,HGPage *a22)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a20);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&a22);
  _Unwind_Resume(a1);
}

void HMaskAlpha::~HMaskAlpha(HGNode *this)
{
  HgcMaskAlpha::~HgcMaskAlpha(this);

  HGObject::operator delete(v1);
}

void HGMPSImageEDT::HGMPSImageEDT(HGMPSImageEDT *this, __int16 a2)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v3 = &unk_1F108A470;
  *(void *)(v3 + 408) = 0;
  *(_WORD *)(v3 + 416) = a2;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v3 + 16) & 0xFFFFF9FF | 0x400;
}

void HGMPSImageEDT::~HGMPSImageEDT(HGNode *this)
{
  *(void *)this = &unk_1F108A470;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HGMPSImageEDT::~HGMPSImageEDT(this);

  HGObject::operator delete(v1);
}

uint64_t HGMPSImageEDT::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

unint64_t HGMPSImageEDT::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int v6 = *(__int16 *)(a1 + 416);
    unsigned int v4 = a4 - v6;
    uint64_t v5 = (HIDWORD(a4) - v6);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HGMPSImageEDT::RenderTile(HGNode *this, HGTile *a2)
{
  unsigned int v52 = HGNode::RenderTile(this, a2);
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t v5 = *(int *)a2;
  uint64_t v6 = (*((_DWORD *)a2 + 2) - v5);
  int v50 = *((_DWORD *)a2 + 3) - v4;
  uint64_t v49 = *((int *)a2 + 22);
  uint64_t v7 = *((int *)a2 + 6);
  uint64_t v8 = *((void *)a2 + 10);
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v11 = *((int *)a2 + 52);
  uint64_t v10 = *((int *)a2 + 53);
  uint64_t v13 = *((int *)a2 + 54);
  uint64_t v12 = *((int *)a2 + 55);
  uint64_t v51 = v7;
  uint64_t v14 = (char *)malloc_type_malloc(16 * (v50 + 2 * *((__int16 *)this + 208)) * (int)v7, 0x1000040451B5BE8uLL);
  int v16 = *((__int16 *)this + 208);
  unsigned __int16 v17 = *((_WORD *)this + 208);
  uint64_t v18 = -(uint64_t)(__int16)v17;
  if (v50 + v16 <= (int)v18)
  {
    uint64_t v21 = v51;
  }
  else
  {
    uint64_t v19 = v8 - 16 * *((__int16 *)this + 208) * (uint64_t)(int)v49;
    long long v20 = v14;
    uint64_t v21 = v51;
    do
    {
      if (v18 + v4 > v10 && v18 + v4 < v12 && (int)v6 >= 1)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v5;
        uint64_t v26 = v19;
        do
        {
          if (*(float *)(v8 + 16 * (v24 + v18 * v49)) == 1.0)
          {
            *(_OWORD *)&v20[16 * v24] = xmmword_1B7E734D0;
          }
          else
          {
            int v27 = *((__int16 *)this + 208);
            if (v27 >= 1)
            {
              uint64_t v28 = -(uint64_t)*((unsigned __int16 *)this + 208);
              int v29 = -*((unsigned __int16 *)this + 208);
              int v30 = (int)(float)((v13 - v11) * (v13 - v11) + (v12 - v10) * (v12 - v10));
              do
              {
                if (v25 + v28 > v11 && v25 + v28 < v13)
                {
                  if (*(float *)(v26 + 16 * v28) == 1.0)
                  {
                    int v32 = v29 >= 0 ? v29 : -v29;
                    if (v32 < v30) {
                      int v30 = v32;
                    }
                  }
                  *(float *)v15.i32 = (float)v30;
                  int32x4_t v15 = vdupq_lane_s32(*(int32x2_t *)v15.i8, 0);
                  v15.i32[3] = 1.0;
                  *(int32x4_t *)&v20[16 * v24] = v15;
                  LOWORD(v27) = *((_WORD *)this + 208);
                }
                ++v28;
                ++v29;
              }
              while (v28 < (__int16)v27);
            }
          }
          ++v24;
          v26 += 16;
          ++v25;
        }
        while (v24 != v6);
        unsigned __int16 v17 = *((_WORD *)this + 208);
      }
      v20 += 16 * v51;
      ++v18;
      v19 += 16 * v49;
    }
    while (v18 < v50 + (__int16)v17);
    int v16 = (__int16)v17;
  }
  if (v50 >= 1)
  {
    int v33 = 0;
    int8x16_t v34 = &v14[16 * v16 * (int)v21];
    uint64_t v35 = 16 * v21;
    unsigned __int16 v36 = v17;
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v37 = 0;
        float64x2_t v38 = v34;
        do
        {
          if (v37 + v5 > v11 && v37 + v5 < v13 && (__int16)v36 >= 1)
          {
            uint64_t v41 = -(uint64_t)v36;
            int8x16_t v42 = (float32x4_t *)&v38[-16 * v21 * v36];
            float v43 = (float)((v13 - v11) * (v13 - v11) + (v12 - v10) * (v12 - v10));
            int v44 = -v36;
            do
            {
              if (v4 + v44 > (int)v10 && v4 + v44 < (int)v12)
              {
                int32x2_t v46 = (int32x2_t)vmulq_f32(*v42, *v42).u64[0];
                *(float *)v46.i32 = *(float *)v46.i32 + (float)(v44 * v44);
                if (*(float *)v46.i32 < v43) {
                  float v43 = *(float *)v46.i32;
                }
                *(float *)v46.i32 = sqrtf(v43);
                int32x4_t v47 = vdupq_lane_s32(v46, 0);
                v47.i32[3] = 1.0;
                *(int32x4_t *)(v9 + 16 * v37) = v47;
                unsigned __int16 v17 = *((_WORD *)this + 208);
              }
              ++v41;
              ++v44;
              int8x16_t v42 = (float32x4_t *)((char *)v42 + v35);
              unsigned __int16 v36 = v17;
            }
            while (v41 < (__int16)v17);
          }
          ++v37;
          v38 += 16;
        }
        while (v37 != v6);
      }
      v9 += 16 * v21;
      ++v33;
      ++v4;
      v34 += v35;
    }
    while (v33 != v50);
  }
  free(v14);
  return v52;
}

char *HGMPSImageEDT::RenderPageMetal(HGNode *this, HGRect *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v27, this, (HGPage *)a2);
  int v4 = (const char *)(*(uint64_t (**)(HGNode *))(*(void *)this + 48))(this);
  snprintf(__str, 0x100uLL, "%s::RenderPageMetal( [%d %d %d %d])", v4, a2[1].var0, a2[1].var1, a2[1].var2, a2[1].var3);
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v26, "gpu", 1, __str);
  Buffer = HGGPURenderer::CreateBuffer(*(void *)&a2->var0, a2[1], a2[2].var0, 1, (*((_DWORD *)this + 4) >> 12) & 1, 1);
  if (!*((void *)this + 51))
  {
    uint64_t v6 = *(void *)&a2[10].var2;
    uint64_t v7 = HGGPURenderer::CreateBuffer(*(void *)&a2->var0, *(HGRect *)(v6 + 20), 7, 1, (*((_DWORD *)this + 4) >> 12) & 1, 1, 1);
    uint64_t v8 = (char *)*((void *)this + 51);
    if (v8 == v7)
    {
      if (v7) {
        (*(void (**)(char *))(*(void *)v7 + 24))(v7);
      }
    }
    else
    {
      if (v8) {
        (*(void (**)(char *))(*(void *)v8 + 24))(v8);
      }
      *((void *)this + 5HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7;
    }
    uint64_t v9 = HGGPURenderer::CreateBuffer(*(void *)&a2->var0, *(HGRect *)(v6 + 20), 7, 1, (*((_DWORD *)this + 4) >> 12) & 1, 1);
    uint64_t v10 = *(HGGPURenderer **)&a2->var0;
    Storage = (HGBitmap *)HGBitmap::GetStorage((HGBitmap *)v9);
    HGGPURenderer::CopyMetal(v10, Storage, *(HGRect *)(v6 + 20), (HGBitmap *)v6);
    HGGPURenderer::FlushMetalCommandBuffer(*(HGGPURenderer **)&a2->var0);
    uint64_t MetalContext = HGGPURenderer::GetMetalContext(*(HGGPURenderer **)&a2->var0);
    uint64_t v13 = (void *)[*(id *)(MetalContext + 32) commandBuffer];
    [v13 setLabel:@"MPS EuclideanDistanceTransform Buffer"];
    uint64_t v14 = *(HGMetalTexture ***)&a2->var0;
    int32x4_t v15 = (HGBitmap *)HGBitmap::GetStorage(*((HGBitmap **)this + 51));
    int v16 = HGGPURenderer::ConvertToMetalTexture(v14, v15);
    unsigned __int16 v17 = *(HGMetalTexture ***)&a2->var0;
    uint64_t v18 = (HGBitmap *)HGBitmap::GetStorage((HGBitmap *)v9);
    uint64_t v19 = HGGPURenderer::ConvertToMetalTexture(v17, v18);
    long long v20 = (void *)[objc_alloc(MEMORY[0x1E4F35580]) initWithDevice:*(void *)(*(void *)(MetalContext + 16) + 16)];
    [v20 encodeToCommandBuffer:v13 sourceTexture:*((void *)v19 + 18) destinationTexture:*((void *)v16 + 18)];

    [v13 commit];
    [v13 waitUntilScheduled];
    (*(void (**)(HGBitmap *))(*(void *)v19 + 24))(v19);
    (*(void (**)(HGBitmap *))(*(void *)v16 + 24))(v16);
    if (v9) {
      (*(void (**)(char *))(*(void *)v9 + 24))(v9);
    }
  }
  uint64_t v21 = *(HGGPURenderer **)&a2->var0;
  uint64_t v23 = *(void *)&a2[1].var0;
  uint64_t v22 = *(void *)&a2[1].var2;
  uint64_t v24 = (HGBitmap *)HGBitmap::GetStorage(*((HGBitmap **)this + 51));
  *(void *)&v30.var0 = v23;
  *(void *)&v30.var2 = v22;
  HGGPURenderer::BufferCopyMetal(v21, (HGBuffer *)Buffer, v30, v24);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v26);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v27);
  return Buffer;
}

void sub_1B74B457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74B4DEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B74B7154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  HGObject::operator delete(v40);
  (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  }
  (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
  HGTransform::~HGTransform((HGTransform *)&a33);
  if (STACK[0x250]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x250] + 24))(STACK[0x250]);
  }
  if (STACK[0x258]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x258] + 24))(STACK[0x258]);
  }
  _Unwind_Resume(a1);
}

void HColorAndGradientStroke::~HColorAndGradientStroke(HGNode *this)
{
  HgcColorAndGradientStroke::~HgcColorAndGradientStroke(this);

  HGObject::operator delete(v1);
}

uint64_t HColorAndGradientStroke::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

void HOutlineGradientStroke::~HOutlineGradientStroke(HGNode *this)
{
  HgcOutlineGradientStroke::~HgcOutlineGradientStroke(this);

  HGObject::operator delete(v1);
}

void sub_1B74B8380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

uint64_t HConcentricPolygonsGradient::GetROI(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0;
  }
  else {
    return -1;
  }
}

void HConcentricPolygonsGradient::~HConcentricPolygonsGradient(HGNode *this)
{
  HgcConcentricPolygonsGradient::~HgcConcentricPolygonsGradient(this);

  HGObject::operator delete(v1);
}

HGNode *HPixellate::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  (*(void (**)(HGNode *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 5, v5);
  if (v6 == 1.0) {
    return HGRenderer::GetInput(a2, this, 0);
  }
  else {
    return (HGNode *)HgcPixellate::GetOutput((HgcPixellate *)this, a2);
  }
}

unint64_t HPixellate::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0x8000000080000000;
  }
  else {
    return a4;
  }
}

unint64_t HPixellate::GetROI(HPixellate *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    float var0 = (float)a4.var0;
    float var1 = (float)a4.var1;
    (*(void (**)(HPixellate *, void, float *))(*(void *)this + 104))(this, 0, &v32);
    float v25 = v33;
    float v26 = v32;
    float v29 = v34;
    float v30 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v32);
    float v9 = v32;
    float v10 = v33;
    float v21 = v34;
    float v22 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v32);
    float v23 = v33;
    float v24 = v32;
    float v27 = v34;
    float v28 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v32);
    float v11 = v32;
    float v12 = v33;
    float v20 = v34;
    float v31 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(void *)this + 104))(this, 4, &v32);
    float v14 = v32;
    float v13 = v33;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(void *)this + 104))(this, 5, &v32);
    float v15 = (double)(int)vcvtms_s32_f32((float)((float)(v30+ (float)((float)((float)(v26 * var0) + (float)(v25 * var1)) + (float)(v29 * 0.0)))- v14)* v32)+ 0.5;
    float v16 = (double)(int)vcvtms_s32_f32((float)((float)(v22+ (float)((float)((float)(v9 * var0) + (float)(v10 * var1)) + (float)(v21 * 0.0)))- v13)* v32)+ 0.5;
    float v17 = v14 + (float)(v33 * v15);
    float v18 = v13 + (float)(v33 * v16);
    unsigned int v4 = (int)(float)(floorf(v28 + (float)((float)(v27 * 0.0) + (float)((float)(v24 * v17) + (float)(v23 * v18)))) + -1.0);
    uint64_t v5 = (int)(float)(floorf(v31+ (float)((float)(v20 * 0.0) + (float)((float)(v11 * v17) + (float)(v12 * v18))))+ -1.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void HPixellate::~HPixellate(HGNode *this)
{
  HgcPixellate::~HgcPixellate(this);

  HGObject::operator delete(v1);
}

void sub_1B74B8F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  uint64_t v12 = *(void *)(v10 - 80);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1B74BA01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

unint64_t HiOSLightTunnel::GetDOD()
{
  return 0x8000000080000000;
}

uint64_t HiOSLightTunnel::GetROI(HiOSLightTunnel *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  (*(void (**)(HiOSLightTunnel *, void, _DWORD *))(*(void *)this + 104))(this, 0, v106);
  float v7 = *(float *)v106;
  float v6 = *(float *)&v106[1];
  float v8 = *(float *)&v106[2];
  float v9 = *(float *)&v106[3];
  *(void *)&v108.float var0 = v5;
  *(void *)&v108.var2 = v4;
  double v10 = CGRectFromHGRect(v108);
  double v14 = v13;
  float v15 = v10;
  float v16 = v11;
  float v17 = (float)(v16 - v6) * (float)(v16 - v6);
  float v18 = v11 + v12;
  float v19 = v10 + v13;
  float v20 = (float)(v19 - v7) * (float)(v19 - v7);
  BOOL v25 = sqrtf(v17 + v20) <= v8;
  *(float *)&double v13 = (float)(v15 - v7) * (float)(v15 - v7);
  float v21 = (float)(v18 - v6) * (float)(v18 - v6);
  float v22 = sqrtf(*(float *)&v13 + v21);
  float v23 = sqrtf(*(float *)&v13 + v17);
  float v24 = sqrtf(v20 + v21);
  BOOL v25 = v25 && v24 <= v8;
  if (!v25 || v22 > v8 || v23 > v8)
  {
    if (fabsf(v9) >= 0.0001) {
      return HGRectMake4i(vcvtmd_s64_f64(v7 - v8), vcvtmd_s64_f64(v6 - v8), vcvtpd_s64_f64(v7 + v8), vcvtpd_s64_f64(v6 + v8));
    }
    CGFloat v53 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat v57 = *MEMORY[0x1E4F1DB20];
    CGFloat v28 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    r1CGPoint a = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    v104.f32[0] = v10;
    v104.f32[1] = v11;
    unint64_t v101 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    float v102 = v8;
    float v103 = v9;
    float v47 = v11 + v12;
    float v48 = v19;
    CGFloat v64 = v11;
    CGFloat v65 = v10;
    CGFloat v46 = v14;
    CGFloat v63 = v12;
    lightTunnel(&v104, (float32x2_t *)&v101, &v105);
    v128.origin.CGFloat x = v105.f32[0];
    v128.origin.CGFloat y = v105.f32[1];
    v128.size.CGFloat width = 0.0;
    v128.size.CGFloat height = 0.0;
    v109.origin.CGFloat y = v53;
    v109.origin.CGFloat x = v57;
    v109.size.CGFloat width = r1a;
    v109.size.CGFloat height = v28;
    CGRect v110 = CGRectUnion(v109, v128);
    CGFloat y = v110.origin.y;
    CGFloat x = v110.origin.x;
    r1CGPoint b = v110.size.width;
    CGFloat height = v110.size.height;
    float v45 = v15;
    unint64_t v99 = __PAIR64__(LODWORD(v18), LODWORD(v15));
    unint64_t v96 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    float v97 = v8;
    float v98 = v9;
    lightTunnel((float32x2_t *)&v99, (float32x2_t *)&v96, &v100);
    v129.origin.CGFloat x = v100.f32[0];
    v129.origin.CGFloat y = v100.f32[1];
    v129.size.CGFloat width = 0.0;
    v129.size.CGFloat height = 0.0;
    v111.origin.CGFloat y = y;
    v111.origin.CGFloat x = x;
    v111.size.CGFloat width = r1b;
    v111.size.CGFloat height = height;
    CGRect v112 = CGRectUnion(v111, v129);
    CGFloat v55 = v112.origin.y;
    CGFloat v59 = v112.origin.x;
    CGFloat width = v112.size.width;
    CGFloat v31 = v112.size.height;
    unint64_t v94 = __PAIR64__(LODWORD(v16), LODWORD(v48));
    float v44 = v16;
    unint64_t v91 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    float v92 = v8;
    float v93 = v9;
    lightTunnel((float32x2_t *)&v94, (float32x2_t *)&v91, &v95);
    v130.origin.CGFloat x = v95.f32[0];
    v130.origin.CGFloat y = v95.f32[1];
    v130.size.CGFloat width = 0.0;
    v130.size.CGFloat height = 0.0;
    v113.origin.CGFloat y = v55;
    v113.origin.CGFloat x = v59;
    v113.size.CGFloat width = width;
    v113.size.CGFloat height = v31;
    CGRect v114 = CGRectUnion(v113, v130);
    CGFloat v60 = v114.origin.x;
    CGFloat v32 = v114.origin.y;
    CGFloat v33 = v114.size.width;
    CGFloat v34 = v114.size.height;
    unint64_t v89 = __PAIR64__(LODWORD(v47), LODWORD(v48));
    unint64_t v86 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    float v87 = v8;
    float v88 = v9;
    lightTunnel((float32x2_t *)&v89, (float32x2_t *)&v86, &v90);
    v131.origin.CGFloat x = v90.f32[0];
    v131.origin.CGFloat y = v90.f32[1];
    v131.size.CGFloat width = 0.0;
    v131.size.CGFloat height = 0.0;
    v115.origin.CGFloat x = v60;
    v115.origin.CGFloat y = v32;
    v115.size.CGFloat width = v33;
    v115.size.CGFloat height = v34;
    CGRect v116 = CGRectUnion(v115, v131);
    CGFloat r1 = v116.origin.y;
    CGFloat v56 = v116.origin.x;
    CGFloat v61 = v116.size.width;
    CGFloat v49 = v116.size.height;
    v116.origin.CGFloat y = v64;
    v116.origin.CGFloat x = v65;
    v116.size.CGFloat width = v46;
    v116.size.CGFloat height = v63;
    if (CGRectGetMinX(v116) < v7)
    {
      v117.origin.CGFloat x = v65;
      v117.origin.CGFloat y = v64;
      v117.size.CGFloat width = v46;
      v117.size.CGFloat height = v63;
      if (CGRectGetMaxX(v117) > v7)
      {
        unint64_t v84 = __PAIR64__(LODWORD(v44), LODWORD(v7));
        unint64_t v81 = __PAIR64__(LODWORD(v6), LODWORD(v7));
        float v82 = v8;
        float v83 = v9;
        lightTunnel((float32x2_t *)&v84, (float32x2_t *)&v81, &v85);
        v132.origin.CGFloat x = v85.f32[0];
        v132.origin.CGFloat y = v85.f32[1];
        v132.size.CGFloat width = 0.0;
        v132.size.CGFloat height = 0.0;
        v118.origin.CGFloat y = r1;
        v118.origin.CGFloat x = v56;
        v118.size.CGFloat width = v61;
        v118.size.CGFloat height = v49;
        CGRect v119 = CGRectUnion(v118, v132);
        CGFloat v35 = v119.origin.x;
        CGFloat v36 = v119.origin.y;
        CGFloat v62 = v119.size.width;
        CGFloat v37 = v119.size.height;
        unint64_t v79 = __PAIR64__(LODWORD(v47), LODWORD(v7));
        unint64_t v76 = __PAIR64__(LODWORD(v6), LODWORD(v7));
        float v77 = v8;
        float v78 = v9;
        lightTunnel((float32x2_t *)&v79, (float32x2_t *)&v76, &v80);
        v133.origin.CGFloat x = v80.f32[0];
        v133.origin.CGFloat y = v80.f32[1];
        v133.size.CGFloat width = 0.0;
        v133.size.CGFloat height = 0.0;
        v120.origin.CGFloat x = v35;
        v120.origin.CGFloat y = v36;
        v120.size.CGFloat width = v62;
        v120.size.CGFloat height = v37;
        CGRect v121 = CGRectUnion(v120, v133);
        CGFloat r1 = v121.origin.y;
        CGFloat v56 = v121.origin.x;
        CGFloat v61 = v121.size.width;
        CGFloat v49 = v121.size.height;
      }
    }
    v122.origin.CGFloat x = v65;
    v122.origin.CGFloat y = v64;
    v122.size.CGFloat width = v46;
    v122.size.CGFloat height = v63;
    if (CGRectGetMinY(v122) >= v6
      || (v123.origin.CGFloat x = v65,
          v123.origin.CGFloat y = v64,
          v123.size.CGFloat width = v46,
          v123.size.CGFloat height = v63,
          CGRectGetMaxY(v123) <= v6))
    {
      v127.origin.CGFloat x = v56;
      v127.size.CGFloat width = v61;
      v127.size.CGFloat height = v49;
      v127.origin.CGFloat y = r1;
    }
    else
    {
      unint64_t v74 = __PAIR64__(LODWORD(v6), LODWORD(v45));
      unint64_t v71 = __PAIR64__(LODWORD(v6), LODWORD(v7));
      float v72 = v8;
      float v73 = v9;
      lightTunnel((float32x2_t *)&v74, (float32x2_t *)&v71, &v75);
      v134.origin.CGFloat x = v75.f32[0];
      v134.origin.CGFloat y = v75.f32[1];
      v134.size.CGFloat width = 0.0;
      v134.size.CGFloat height = 0.0;
      v124.origin.CGFloat y = r1;
      v124.origin.CGFloat x = v56;
      v124.size.CGFloat width = v61;
      v124.size.CGFloat height = v49;
      CGRect v125 = CGRectUnion(v124, v134);
      CGFloat v38 = v125.origin.x;
      CGFloat v39 = v125.origin.y;
      CGFloat v40 = v125.size.width;
      CGFloat v41 = v125.size.height;
      unint64_t v69 = __PAIR64__(LODWORD(v6), LODWORD(v48));
      unint64_t v66 = __PAIR64__(LODWORD(v6), LODWORD(v7));
      float v67 = v8;
      float v68 = v9;
      lightTunnel((float32x2_t *)&v69, (float32x2_t *)&v66, &v70);
      v135.origin.CGFloat x = v70.f32[0];
      v135.origin.CGFloat y = v70.f32[1];
      v135.size.CGFloat width = 0.0;
      v135.size.CGFloat height = 0.0;
      v126.origin.CGFloat x = v38;
      v126.origin.CGFloat y = v39;
      v126.size.CGFloat width = v40;
      v126.size.CGFloat height = v41;
      CGRect v127 = CGRectUnion(v126, v135);
    }
    return HGRectFromCGRect(v127);
  }
  return v5;
}

float32x2_t lightTunnel@<D0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  float v4 = a2[1].f32[1];
  float32x2_t v5 = *a2;
  float32x2_t v6 = *a1;
  float32x2_t v7 = vsub_f32(*a1, *a2);
  float v16 = a2[1].f32[0] * (float)(1.0 / sqrtf(vaddv_f32(vmul_f32(v7, v7))));
  float v8 = logf(v16);
  __float2 v9 = __sincosf_stret(v4 * v8);
  float32x2_t v10 = vmul_n_f32(v7, v9.__cosval);
  float32x2_t v11 = vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)v7), v9.__sinval);
  v12.i32[0] = vadd_f32(v10, v11).u32[0];
  v12.i32[1] = vsub_f32(v10, v11).i32[1];
  float32x2_t v13 = vadd_f32(v5, vmul_n_f32(v12, v16));
  float v14 = 0.0;
  if (v16 >= 1.0) {
    float v14 = 1.0;
  }
  float32x2_t result = vadd_f32(vmul_n_f32(v13, v14), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v6), 1.0 - v14)));
  *a3 = result;
  return result;
}

void HiOSLightTunnel::~HiOSLightTunnel(HGNode *this)
{
  HgciOSLightTunnel::~HgciOSLightTunnel(this);

  HGObject::operator delete(v1);
}

unint64_t HPoke::GetDOD(HPoke *this, HGRenderer *a2, int a3, HGRect a4)
{
  void (**v21[4])(int8x16_t *__return_ptr, void, long long *);
  long long v22;
  long long v23;
  float64x2_t v24;
  HGRect v25;
  long long v26;
  long long v27;
  float32x2_t v28;
  float v29;
  float v30;
  uint64_t v31;

  CGFloat v31 = *MEMORY[0x1E4F143B8];
  BOOL v25 = a4;
  if (a3)
  {
    float v4 = &HGRectNull;
    return *(void *)v4;
  }
  (*(void (**)(HPoke *, void, float32x2_t *))(*(void *)this + 104))(this, 0, &v28);
  float v24 = vcvtq_f64_f32(v28);
  double v7 = (float)(1.0 / v29);
  double v8 = v30;
  if (fabs(v30 + -1.0) < 0.0000001 && v7 > -0.0000001 && v7 < 0.0000001)
  {
    float v4 = &HGRectInfinite;
    return *(void *)v4;
  }
  Interval::pixelToFloat(&v25.var0, (double *)&v22);
  *(void *)&float v26 = v22;
  *((void *)&v26 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v23;
  *(double *)&float v27 = *((double *)&v22 + 1) - *(double *)&v22;
  *((double *)&v27 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((double *)&v23 + 1) - *(double *)&v23;
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)this + 68, (double *)&v26, (uint64_t)&v26))
  {
    double v9 = *(double *)&v26;
    double v10 = *(double *)&v26 + *(double *)&v27;
    if (v9 > v9 + *(double *)&v27) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    unint64_t v11 = *((void *)&v26 + 1);
    double v12 = *((double *)&v26 + 1) + *((double *)&v27 + 1);
    if (*((double *)&v26 + 1) > *((double *)&v26 + 1) + *((double *)&v27 + 1)) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
  }
  else
  {
    double v10 = INFINITY;
    double v9 = -INFINITY;
    unint64_t v11 = 0xFFF0000000000000;
    double v12 = INFINITY;
  }
  *(double *)&float v22 = v9;
  *((double *)&v22 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v10;
  *(void *)&float v23 = v11;
  *((double *)&v23 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v12;
  operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>((double *)&v22, v24.f64, (double *)&v26);
  float v22 = v26;
  float v23 = v27;
  v21[0] = (void (**)(int8x16_t *__return_ptr, void, long long *))&unk_1F108B568;
  v21[1] = *(void (***)(int8x16_t *__return_ptr, void, long long *))&v7;
  void v21[2] = *(void (***)(int8x16_t *__return_ptr, void, long long *))&v8;
  *(double *)&v21[3] = sqrt(v7) * v8;
  float v26 = 0uLL;
  Interval::eightPointDOD((uint64_t)&v22, (uint64_t)&v26, v21, (uint64_t)v20);
  operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>(v20, v24.f64, v17);
  *(double *)&float v26 = v17[0];
  *((double *)&v26 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v18;
  *(double *)&float v27 = v17[1] - v17[0];
  *((double *)&v27 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v19 - v18;
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)this + 52, (double *)&v26, (uint64_t)&v26))
  {
    double v13 = *(double *)&v26;
    double v14 = *(double *)&v26 + *(double *)&v27;
    if (v13 > v13 + *(double *)&v27) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    double v15 = *((double *)&v26 + 1);
    double v16 = *((double *)&v26 + 1) + *((double *)&v27 + 1);
    if (*((double *)&v26 + 1) > *((double *)&v26 + 1) + *((double *)&v27 + 1)) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
  }
  else
  {
    double v14 = INFINITY;
    double v13 = -INFINITY;
    double v15 = -INFINITY;
    double v16 = INFINITY;
  }
  v20[0] = v13;
  v20[1] = v14;
  v20[2] = v15;
  v20[3] = v16;
  return Interval::floatToPixel(v20);
}

double operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = *a2 - *a1;
  double v8 = a1[1] - *a2;
  fesetround(v6);
  int v9 = fegetround();
  fesetround(0x400000);
  double v10 = a2[1];
  double v11 = v10 - a1[2];
  double v12 = a1[3] - v10;
  fesetround(v9);
  double result = -v11;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v11;
  a3[3] = v12;
  return result;
}

double operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = -*a2 - *a1;
  double v8 = *a2 + a1[1];
  fesetround(v6);
  int v9 = fegetround();
  fesetround(0x400000);
  double v10 = a2[1];
  double v11 = -v10 - a1[2];
  double v12 = v10 + a1[3];
  fesetround(v9);
  double result = -v11;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v11;
  a3[3] = v12;
  return result;
}

unint64_t HPoke::GetROI(HPoke *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var1 = a4.var1;
    int var3 = a4.var3;
    (*(void (**)(HPoke *, void, float *))(*(void *)this + 104))(this, 0, v124);
    double v11 = v124[0];
    double v12 = v124[1];
    float v13 = (float)var0;
    if ((float)var0 <= (float)var2)
    {
      double v18 = *((double *)this + 81);
      double v122 = v18 * (double)var1;
      double v120 = *((double *)this + 83);
      double v19 = *((double *)this + 69);
      double v119 = v19 * (double)var1;
      double v117 = *((double *)this + 71);
      double v20 = *((double *)this + 73);
      double v21 = *((double *)this + 75);
      double v22 = v125;
      double v23 = *((double *)this + 64);
      double v24 = *((double *)this + 65);
      double v25 = *((double *)this + 67);
      double v26 = *((double *)this + 52);
      double v27 = *((double *)this + 53);
      double v28 = *((double *)this + 55);
      double v29 = *((double *)this + 56);
      double v30 = *((double *)this + 57);
      double v31 = *((double *)this + 59);
      double v32 = v126;
      double v113 = v18 * (double)var3;
      double v115 = v20 * (double)var1;
      double v111 = v20 * (double)var3;
      double v112 = v19 * (double)var3;
      double v16 = -3.40282347e38;
      double v17 = 3.40282347e38;
      double v14 = 3.40282347e38;
      double v15 = -3.40282347e38;
      do
      {
        double v33 = *((double *)this + 80) * v13;
        double v34 = *((double *)this + 68) * v13;
        double v35 = v120 + v33 + v122;
        double v36 = *((double *)this + 72) * v13;
        double v37 = (v21 + v36 + v115) / v35;
        double v38 = (v117 + v34 + v119) / v35 - v11;
        double v39 = v37 - v12;
        float v40 = sqrt(v38 * v38 + v39 * v39) * v22;
        double v41 = sqrt(v40 + 0.00001);
        double v42 = v38 / v41 + v11;
        double v43 = v39 / v41 + v12;
        double v44 = v23 * v42 + v24 * v43;
        double v45 = v26 * v42 + v27 * v43;
        double v46 = (v31 + v29 * v42 + v30 * v43) / (v25 + v44);
        double v47 = ((v28 + v45) / (v25 + v44) - v13) * v32 + v13;
        double v48 = (v46 - (double)var1) * v32 + (double)var1;
        double v49 = v120 + v33 + v113;
        if (v47 < v14) {
          double v14 = v47;
        }
        double v50 = (v21 + v36 + v111) / v49;
        double v51 = (v117 + v34 + v112) / v49 - v11;
        double v52 = v50 - v12;
        double v53 = sqrt(v51 * v51 + v52 * v52) * v22;
        if (v48 < v17) {
          double v17 = v48;
        }
        float v54 = v53;
        double v55 = sqrt(v54 + 0.00001);
        double v56 = v51 / v55 + v11;
        double v57 = v52 / v55 + v12;
        if (v47 > v15) {
          double v15 = v47;
        }
        double v58 = v23 * v56 + v24 * v57;
        if (v48 > v16) {
          double v16 = v48;
        }
        double v59 = v26 * v56 + v27 * v57;
        double v60 = ((v28 + v59) / (v25 + v58) - v13) * v32 + v13;
        double v61 = ((v31 + v29 * v56 + v30 * v57) / (v25 + v58) - (double)var3) * v32 + (double)var3;
        if (v60 < v14) {
          double v14 = ((v28 + v59) / (v25 + v58) - v13) * v32 + v13;
        }
        if (v61 < v17) {
          double v17 = v61;
        }
        if (v60 > v15) {
          double v15 = ((v28 + v59) / (v25 + v58) - v13) * v32 + v13;
        }
        if (v61 > v16) {
          double v16 = v61;
        }
        float v13 = v13 + 1.0;
      }
      while (v13 <= (float)var2);
    }
    else
    {
      double v14 = 3.40282347e38;
      double v15 = -3.40282347e38;
      double v16 = -3.40282347e38;
      double v17 = 3.40282347e38;
    }
    float v62 = (float)var1;
    float v63 = (float)var3;
    if ((float)var1 <= (float)var3)
    {
      double v64 = *((double *)this + 80);
      double v123 = v64 * (double)var0;
      double v121 = *((double *)this + 83);
      double v65 = *((double *)this + 68);
      double v118 = *((double *)this + 71);
      double v66 = *((double *)this + 72);
      double v67 = *((double *)this + 75);
      double v68 = v125;
      double v69 = *((double *)this + 64);
      double v70 = *((double *)this + 65);
      double v71 = *((double *)this + 67);
      double v72 = *((double *)this + 52);
      double v73 = *((double *)this + 53);
      double v74 = *((double *)this + 55);
      double v75 = *((double *)this + 56);
      double v76 = *((double *)this + 57);
      double v77 = *((double *)this + 59);
      double v78 = v126;
      double v114 = v64 * (double)var2;
      double v116 = (double)var2;
      do
      {
        double v79 = *((double *)this + 81) * v62;
        double v80 = *((double *)this + 69) * v62;
        double v81 = v121 + v123 + v79;
        double v82 = *((double *)this + 73) * v62;
        double v83 = (v118 + v65 * (double)var0 + v80) / v81 - v11;
        double v84 = (v67 + v66 * (double)var0 + v82) / v81 - v12;
        float v85 = sqrt(v83 * v83 + v84 * v84) * v68;
        double v86 = sqrt(v85 + 0.00001);
        double v87 = v83 / v86;
        double v88 = v84 / v86;
        double v89 = v87 + v11;
        double v90 = v88 + v12;
        double v91 = v69 * (v87 + v11) + v70 * v90;
        float v92 = v63;
        double v93 = ((v74 + v72 * v89 + v73 * v90) / (v71 + v91) - (double)var0) * v78 + (double)var0;
        double v94 = ((v77 + v75 * v89 + v76 * v90) / (v71 + v91) - v62) * v78 + v62;
        double v95 = v121 + v114 + v79;
        double v96 = (v118 + v65 * (double)var2 + v80) / v95;
        if (v93 < v14) {
          double v14 = v93;
        }
        double v97 = v96 - v11;
        double v98 = (v67 + v66 * (double)var2 + v82) / v95 - v12;
        double v99 = sqrt(v97 * v97 + v98 * v98) * v68;
        if (v94 < v17) {
          double v17 = v94;
        }
        float v100 = v99;
        double v101 = sqrt(v100 + 0.00001);
        double v102 = v97 / v101 + v11;
        double v103 = v98 / v101 + v12;
        if (v93 > v15) {
          double v15 = v93;
        }
        double v104 = v69 * v102 + v70 * v103;
        if (v94 > v16) {
          double v16 = v94;
        }
        double v105 = v71 + v104;
        double v106 = (v74 + v72 * v102 + v73 * v103) / (v71 + v104);
        double v107 = ((v77 + v75 * v102 + v76 * v103) / v105 - v62) * v78 + v62;
        double v108 = v106 - v116;
        float v63 = v92;
        double v109 = v108 * v78 + v116;
        if (v109 < v14) {
          double v14 = v109;
        }
        if (v107 < v17) {
          double v17 = v107;
        }
        if (v109 > v15) {
          double v15 = v109;
        }
        if (v107 > v16) {
          double v16 = v107;
        }
        float v62 = v62 + 1.0;
      }
      while (v62 <= v92);
    }
    unsigned int v4 = (int)(v14 + -2.0);
    uint64_t v5 = (int)(v17 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HPoke::setPixelTransform(uint64_t a1, double *a2)
{
  uint64_t v3 = a1 + 416;
  if ((double *)(a1 + 416) != a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        *(double *)(v3 + i * 8) = v5[i];
      ++v4;
      v3 += 32;
      v5 += 4;
    }
    while (v4 != 4);
  }
  PCMatrix44Tmpl<double>::planarInverseZ(a1 + 544, a2, 0.0);
  float v7 = *(double *)(a1 + 544);
  float v8 = *(double *)(a1 + 552);
  float v9 = *(double *)(a1 + 568);
  (*(void (**)(uint64_t, uint64_t, float, float, double, float))(*(void *)a1 + 96))(a1, 1, v7, v8, 0.0, v9);
  float v10 = *(double *)(a1 + 576);
  float v11 = *(double *)(a1 + 584);
  float v12 = *(double *)(a1 + 600);
  (*(void (**)(uint64_t, uint64_t, float, float, double, float))(*(void *)a1 + 96))(a1, 2, v10, v11, 0.0, v12);
  float v13 = *(double *)(a1 + 640);
  float v14 = *(double *)(a1 + 648);
  float v15 = *(double *)(a1 + 664);
  (*(void (**)(uint64_t, uint64_t, float, float, double, float))(*(void *)a1 + 96))(a1, 3, v13, v14, 0.0, v15);
  float v16 = *(double *)(a1 + 416);
  float v17 = *(double *)(a1 + 424);
  float v18 = *(double *)(a1 + 440);
  (*(void (**)(uint64_t, uint64_t, float, float, double, float))(*(void *)a1 + 96))(a1, 4, v16, v17, 0.0, v18);
  float v19 = *(double *)(a1 + 448);
  float v20 = *(double *)(a1 + 456);
  float v21 = *(double *)(a1 + 472);
  (*(void (**)(uint64_t, uint64_t, float, float, double, float))(*(void *)a1 + 96))(a1, 5, v19, v20, 0.0, v21);
  v22.n128_u64[0] = *(void *)(a1 + 512);
  v22.n128_f32[0] = v22.n128_f64[0];
  v23.n128_u64[0] = *(void *)(a1 + 520);
  v23.n128_f32[0] = v23.n128_f64[0];
  v24.n128_f32[0] = *(double *)(a1 + 536);
  double v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);
  v26.n128_u64[0] = 0;

  return v25(a1, 6, v22, v23, v26, v24);
}

void HPoke::~HPoke(HGNode *this)
{
  HgcPoke::~HgcPoke(this);

  HGObject::operator delete(v1);
}

BOOL PCMatrix44Tmpl<double>::transformRect<double>(double *a1, double *a2, uint64_t a3)
{
  v26[8] = *(double *)MEMORY[0x1E4F143B8];
  double v4 = a2[2];
  if (v4 < 0.0 || (double v5 = a2[3], v5 < 0.0))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a3 + 16) = _Q0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v8 = 0;
    BOOL v9 = 0;
    double v10 = a2[1];
    v26[0] = *a2;
    v26[1] = v10 + v5;
    _OWORD v26[2] = v4 + v26[0];
    _OWORD v26[3] = v10 + v5;
    v26[4] = v4 + v26[0];
    v26[5] = v10;
    v26[6] = v26[0];
    v26[7] = v10;
    float64x2_t v24 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v25 = _Q0;
    uint64_t v16 = -4;
    float v17 = (float64x2_t *)v26;
    do
    {
      float64x2_t v22 = 0u;
      long long v23 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(a1, v17->f64, v22.f64);
      BOOL v18 = *((double *)&v23 + 1) <= 0.0;
      if (*((double *)&v23 + 1) > 0.0)
      {
        if (v8) {
          return v7;
        }
      }
      else if (*((double *)&v23 + 1) >= 0.0 || v9)
      {
        return v7;
      }
      BOOL v9 = *((double *)&v23 + 1) > 0.0;
      *float v17 = vmulq_n_f64(v22, 1.0 / *((double *)&v23 + 1));
      PCRect<double>::operator|=(&v24, v17);
      BOOL v7 = (unint64_t)(v16 + 4) > 2;
      ++v17;
      BOOL v8 = v18;
    }
    while (!__CFADD__(v16++, 1));
    long long v19 = v25;
    *(float64x2_t *)a3 = v24;
    *(_OWORD *)(a3 + 16) = v19;
  }
  return 1;
}

double *PCMatrix44Tmpl<double>::transform<double>(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  *a3 = a1[3] + *a2 * *a1 + v4 * a1[1];
  a3[1] = a1[7] + v3 * a1[4] + v4 * a1[5];
  a3[2] = a1[11] + v3 * a1[8] + v4 * a1[9];
  a3[3] = a1[15] + v3 * a1[12] + v4 * a1[13];
  return a3;
}

{
  double v3;
  double v4;
  double v5;

  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a1[15] + *a2 * a1[12] + v4 * a1[13];
  *a3 = (a1[3] + *a2 * *a1 + v4 * a1[1]) / v5;
  a3[1] = (a1[7] + v3 * a1[4] + v4 * a1[5]) / v5;
  return a3;
}

{
  double v3;
  double v4;
  double v5;

  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  *a3 = a1[3] + *a2 * *a1 + v4 * a1[1] + v5 * a1[2];
  a3[1] = a1[7] + v3 * a1[4] + v4 * a1[5] + v5 * a1[6];
  a3[2] = a1[11] + v3 * a1[8] + v4 * a1[9] + v5 * a1[10];
  a3[3] = a1[15] + v3 * a1[12] + v4 * a1[13] + v5 * a1[14];
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;

  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  int v6 = a2[3];
  *a3 = *a2 * *a1 + v4 * a1[1] + v5 * a1[2] + v6 * a1[3];
  a3[1] = v3 * a1[4] + v4 * a1[5] + v5 * a1[6] + v6 * a1[7];
  a3[2] = v3 * a1[8] + v4 * a1[9] + v5 * a1[10] + v6 * a1[11];
  a3[3] = v3 * a1[12] + v4 * a1[13] + v5 * a1[14] + v6 * a1[15];
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;

  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  int v6 = a1[15] + *a2 * a1[12] + v4 * a1[13] + v5 * a1[14];
  *a3 = (a1[3] + *a2 * *a1 + v4 * a1[1] + v5 * a1[2]) / v6;
  a3[1] = (a1[7] + v3 * a1[4] + v4 * a1[5] + v5 * a1[6]) / v6;
  a3[2] = (a1[11] + v3 * a1[8] + v4 * a1[9] + v5 * a1[10]) / v6;
  return a3;
}

float64x2_t PCRect<double>::operator|=(float64x2_t *a1, float64x2_t *a2)
{
  v2.f64[0] = a1[1].f64[0];
  if (v2.f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    float64x2_t v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a1, *a2), *(int8x16_t *)a2, *(int8x16_t *)a1);
    v2.f64[1] = a1[1].f64[1];
    float64x2_t v5 = vaddq_f64(*a1, v2);
    float64x2_t result = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a2, v5), *(int8x16_t *)a2, (int8x16_t)v5), v4);
    *a1 = v4;
    a1[1] = result;
  }
  else
  {
    float64x2_t result = *a2;
    *a1 = *a2;
    a1[1].f64[0] = 0.0;
    a1[1].f64[1] = 0.0;
  }
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;

  result.f64[0] = a1[1].f64[0];
  if (result.f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    float64x2_t v4 = a2[1];
    if (v4.f64[0] >= 0.0 && v4.f64[1] >= 0.0)
    {
      float64x2_t v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a1, *a2), *(int8x16_t *)a2, *(int8x16_t *)a1);
      result.f64[1] = a1[1].f64[1];
      int v6 = vaddq_f64(*a1, result);
      BOOL v7 = vaddq_f64(*a2, v4);
      float64x2_t result = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), (int8x16_t)v7, (int8x16_t)v6), v5);
      *a1 = v5;
      a1[1] = result;
    }
  }
  else
  {
    float64x2_t result = *a2;
    double v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
  }
  return result;
}

void boost::numeric::interval_lib::exception_create_empty::operator()()
{
  exceptiodouble n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1BA9BF5D0](exception, "boost::interval: empty interval created");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1B74BB824(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void PokeDistortion::operator()(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  if (fabs(*(double *)(a1 + 16) + -1.0) >= 0.0000001)
  {
    Interval::normalized(a2->f64, v12.f64);
    double v9 = *(double *)(a1 + 24);
    double v10 = 1.0 - *(double *)(a1 + 16);
    double v11 = sqrt(v9 * v9 + v10 * 4.0 * sqrt(a2->f64[0] * a2->f64[0] + a2->f64[1] * a2->f64[1]));
    float64x2_t v8 = vmulq_n_f64(v12, (v11 - v9) / (v10 + v10) * ((v11 - v9) / (v10 + v10)));
  }
  else
  {
    int v6 = (const double *)(a1 + 8);
    float64x2_t v7 = vld1q_dup_f64(v6);
    float64x2_t v8 = vdivq_f64(vmulq_n_f64(*a2, sqrt(vaddvq_f64(vmulq_f64(*a2, *a2)))), v7);
  }
  *a3 = v8;
}

BOOL PCMatrix44Tmpl<double>::planarInverseZ(uint64_t a1, double *a2, double a3)
{
  double v4 = a2[4];
  double v3 = a2[5];
  double v5 = a2[15];
  double v6 = a2[7];
  double v8 = a2[12];
  double v7 = a2[13];
  double v9 = v3 * v5 - v7 * v6;
  double v10 = a2[3];
  double v11 = v6 * v8 - v5 * v4;
  double v13 = *a2;
  double v12 = a2[1];
  double v14 = v7 * v4 - v3 * v8;
  double v15 = v10 * v14 + v9 * *a2 + v12 * v11;
  BOOL v16 = fabs(v15) >= a3 && v15 != 0.0;
  if (v16)
  {
    *(double *)a1 = v9 * (1.0 / v15);
    *(double *)(a1 + 8) = (v7 * v10 - v5 * v12) * (1.0 / v15);
    *(double *)(a1 + 24) = (v6 * v12 - v3 * v10) * (1.0 / v15);
    *(double *)(a1 + 32) = v11 * (1.0 / v15);
    *(double *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = (v5 * v13 - v10 * v8) * (1.0 / v15);
    *(double *)(a1 + 56) = (v10 * v4 - v6 * v13) * (1.0 / v15);
    *(double *)(a1 + 96) = v14 * (1.0 / v15);
    *(double *)(a1 + 104) = (v12 * v8 - v7 * v13) * (1.0 / v15);
    *(double *)(a1 + 12pthread_cond_init((pthread_cond_t *)this, 0) = (v3 * v13 - v12 * v4) * (1.0 / v15);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  }
  return v16;
}

unint64_t HHalftone::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0x8000000080000000;
  }
  else {
    return a4;
  }
}

uint64_t HHalftone::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

void HHalftone::~HHalftone(HGNode *this)
{
  HgcHalftone::~HgcHalftone(this);

  HGObject::operator delete(v1);
}

void sub_1B74BC08C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HPoke::HPoke(HPoke *this)
{
}

void sub_1B74BD084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

unint64_t HSlicedTile::GetDOD(HSlicedTile *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    (*(void (**)(HSlicedTile *, uint64_t, float *, void, void))(*(void *)this + 104))(this, 5, &v61, *(void *)&a4.var0, *(void *)&a4.var2);
    float v51 = v62;
    float v52 = v61;
    float v57 = v64;
    float v58 = v63;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 6, &v61);
    float v47 = v61;
    float v48 = v62;
    float v54 = v64;
    float v55 = v63;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 7, &v61);
    float v46 = v61;
    float v53 = v62;
    float v56 = v63;
    float v60 = v64;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 8, &v61);
    float v45 = v62;
    float v49 = v61;
    float v50 = v63;
    float v59 = v64;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 12, &v61);
    float v43 = v61;
    float v44 = v62;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 10, &v61);
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 9, &v61);
    float v7 = v61;
    float v8 = v62;
    (*(void (**)(HSlicedTile *, void, float *))(*(void *)this + 104))(this, 0, &v61);
    float v9 = v61;
    float v10 = v62;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v61);
    float v11 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v61);
    float v12 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v61);
    float v13 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 4, &v61);
    float v14 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(void *)this + 104))(this, 13, &v61);
    float v15 = 0.5 - v61;
    if (v11 <= (float)(0.5 - v61)) {
      float v16 = v11;
    }
    else {
      float v16 = 0.5 - v61;
    }
    if (v13 <= v15) {
      float v15 = v13;
    }
    float v17 = v61 + -0.5;
    if (v12 >= (float)(v61 + -0.5)) {
      float v18 = v12;
    }
    else {
      float v18 = v61 + -0.5;
    }
    if (v14 >= v17) {
      float v17 = v14;
    }
    float v19 = (float)*((int *)this + 104);
    float v20 = (float)*((int *)this + 105);
    float v21 = (float)(v46
                * (float)((float)(v57 + (float)((float)(v58 * 0.0) + (float)((float)(v52 * v19) + (float)(v51 * v20))))
                        / v7))
        - (float)(v18 - (float)(v9 * v18));
    float v22 = (float)(v45
                * (float)((float)(v54 + (float)((float)(v55 * 0.0) + (float)((float)(v47 * v19) + (float)(v48 * v20))))
                        / v8))
        - (float)(v17 - (float)(v10 * v17));
    float v23 = v43;
    if (v9 > v61) {
      float v23 = 1.0;
    }
    float v24 = v23 * v21;
    float v25 = v44;
    if (v10 > v61) {
      float v25 = 1.0;
    }
    float v26 = v52 * (float)(v7 * v24);
    float v27 = v48 * (float)(v8 * (float)(v25 * v22));
    float v28 = (float)(v46 * v26) + (float)(v53 * v27);
    float v29 = (float)*((int *)this + 106);
    float v30 = (float)(v49 * v26) + (float)(v45 * v27);
    float v31 = (float)*((int *)this + 107);
    float v32 = v52
        * (float)(v7
                * (float)(v23
                        * (float)((float)((float)(v9 * v16) - v16)
                                + (float)(v46
                                        * (float)((float)(v57
                                                        + (float)((float)(v58 * 0.0)
                                                                + (float)((float)(v52 * v29) + (float)(v51 * v31))))
                                                / v7)))));
    float v33 = v48
        * (float)(v8
                * (float)(v25
                        * (float)((float)((float)(v10 * v15) - v15)
                                + (float)(v45
                                        * (float)((float)(v54
                                                        + (float)((float)(v55 * 0.0)
                                                                + (float)((float)(v47 * v29) + (float)(v48 * v31))))
                                                / v8)))));
    unint64_t v4 = HGRectMake4i(vcvtmd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + v28)) + -1.0 + 0.0000001), vcvtmd_s64_f64((float)(v59 + (float)((float)(v50 * 0.0) + v30)) + -1.0 + 0.0000001), vcvtpd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + (float)((float)(v46 * v32) + (float)(v53 * v33)))) + 1.0), vcvtpd_s64_f64((float)(v59 + (float)((float)(v50 * 0.0) + (float)((float)(v49 * v32) + (float)(v45 * v33)))) + 1.0));
    unint64_t v5 = HIDWORD(v4);
    if ((v4 - 0x7FFFFFFF) < 3
      || v34 == 0x7FFFFFFF
      || v34 < -2147483646
      || (HIDWORD(v4) - 0x7FFFFFFF) < 3
      || v35 == 0x7FFFFFFF
      || v35 < -2147483646)
    {
      LODWORD(v4) = 0;
      LODWORD(v5) = 0;
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

HGRect *HSlicedTile::setInputRect(HGRect *this, HGRect a2)
{
  this[26] = a2;
  return this;
}

unint64_t HSlicedTile::GetROI(HSlicedTile *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var3 = a4.var3;
    int var1 = a4.var1;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 5, &v52);
    long long v51 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 6, &v52);
    long long v50 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 7, &v52);
    long long v49 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 8, &v52);
    long long v48 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 12, &v52);
    uint64_t v47 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 10, &v52);
    float v37 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 9, &v52);
    uint64_t v46 = v52;
    (*(void (**)(HSlicedTile *, void, long long *))(*(void *)this + 104))(this, 0, &v52);
    uint64_t v45 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 1, &v52);
    float v11 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 2, &v52);
    float v12 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 3, &v52);
    float v13 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 4, &v52);
    float v14 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, long long *))(*(void *)this + 104))(this, 13, &v52);
    if (v11 <= (float)(0.5 - *(float *)&v52)) {
      float v15 = v11;
    }
    else {
      float v15 = 0.5 - *(float *)&v52;
    }
    if (v13 <= (float)(0.5 - *(float *)&v52)) {
      float v16 = v13;
    }
    else {
      float v16 = 0.5 - *(float *)&v52;
    }
    if (v12 >= (float)(*(float *)&v52 + -0.5)) {
      float v17 = v12;
    }
    else {
      float v17 = *(float *)&v52 + -0.5;
    }
    float v18 = (float)var0;
    float v19 = (float)var1;
    if (v14 < (float)(*(float *)&v52 + -0.5)) {
      float v14 = *(float *)&v52 + -0.5;
    }
    float v20 = (float)var2;
    float v21 = (float)var3;
    float v38 = v16;
    float v39 = v15;
    float v22 = v17;
    if (v18 <= (float)var2)
    {
      float v25 = -2147500000.0;
      float v26 = 2147500000.0;
      float v23 = 2147500000.0;
      float v24 = -2147500000.0;
      do
      {
        *(float *)&long long v52 = v18;
        *((float *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)var1;
        *((void *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F80000000000000;
        float v42 = v18;
        float v43 = v21;
        uint64_t v44 = 0x3F80000000000000;
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v15, v17, v16, v14, &v42);
        if (v40 < v23) {
          float v23 = v40;
        }
        if (v41 < v26) {
          float v26 = v41;
        }
        if (v40 > v24) {
          float v24 = v40;
        }
        if (v41 > v25) {
          float v25 = v41;
        }
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v39, v22, v38, v14, (float *)&v52);
        float v16 = v38;
        float v15 = v39;
        if (v40 < v23) {
          float v23 = v40;
        }
        if (v41 < v26) {
          float v26 = v41;
        }
        if (v40 > v24) {
          float v24 = v40;
        }
        float v17 = v22;
        if (v41 > v25) {
          float v25 = v41;
        }
        float v21 = (float)var3;
        float v20 = (float)var2;
        float v18 = v18 + 1.0;
      }
      while (v18 <= (float)var2);
    }
    else
    {
      float v23 = 2147500000.0;
      float v24 = -2147500000.0;
      float v25 = -2147500000.0;
      float v26 = 2147500000.0;
    }
    if (v19 <= v21)
    {
      do
      {
        *(float *)&long long v52 = (float)var0;
        *((float *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v19;
        *((void *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F80000000000000;
        float v42 = v20;
        float v43 = v19;
        uint64_t v44 = 0x3F80000000000000;
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v15, v17, v16, v14, (float *)&v52);
        if (v40 >= v23) {
          float v27 = v23;
        }
        else {
          float v27 = v40;
        }
        if (v41 < v26) {
          float v26 = v41;
        }
        if (v40 > v24) {
          float v24 = v40;
        }
        if (v41 > v25) {
          float v25 = v41;
        }
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v39, v22, v38, v14, &v42);
        float v16 = v38;
        float v15 = v39;
        if (v40 >= v27) {
          float v23 = v27;
        }
        else {
          float v23 = v40;
        }
        if (v41 < v26) {
          float v26 = v41;
        }
        if (v40 > v24) {
          float v24 = v40;
        }
        float v17 = v22;
        if (v41 > v25) {
          float v25 = v41;
        }
        float v19 = v19 + 1.0;
        float v20 = (float)var2;
      }
      while (v19 <= (float)var3);
    }
    unint64_t v4 = HGRectMake4i(vcvtms_s32_f32(v23 + 0.00001), vcvtms_s32_f32(v26 + 0.00001), vcvtps_s32_f32(v24), vcvtps_s32_f32(v25));
    unint64_t v5 = HIDWORD(v4);
    if ((v4 - 0x7FFFFFFF) < 3
      || v28 == 0x7FFFFFFF
      || v28 < -2147483646
      || (HIDWORD(v4) - 0x7FFFFFFF) < 3
      || v29 == 0x7FFFFFFF
      || v29 < -2147483646)
    {
      LODWORD(v4) = 0;
      LODWORD(v5) = 0;
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

double calculateROI@<D0>(char a1@<W0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, float *a7@<X6>, float *a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, float a13@<S3>, float *a14)
{
  float v14 = a14[1];
  float v15 = a14[2];
  float v16 = a14[3];
  float v17 = (float)((float)((float)(*a14 * *a3) + (float)(v14 * a3[1])) + (float)(v15 * a3[2])) + (float)(v16 * a3[3]);
  float v18 = a4[1];
  float v19 = (float)((float)((float)(*a14 * *a4) + (float)(v14 * v18)) + (float)(v15 * a4[2])) + (float)(v16 * a4[3]);
  float v20 = a7[1];
  float v21 = (float)((float)(v17 / *a7) * *a5) / *a8;
  float v22 = v19 / v20;
  float v23 = a6[1];
  float v24 = (float)(v22 * v23) / a8[1];
  float v26 = *a2;
  float v25 = a2[1];
  float v27 = *a2 * a10;
  float v28 = v25 * a12;
  if (v21 >= v27)
  {
    float v30 = v21 - (float)(v27 - a10);
  }
  else
  {
    float v29 = v26 * a11;
    if (v21 <= (float)(v26 * a11))
    {
      float v30 = v21 + (float)(a11 - v29);
    }
    else
    {
      float v30 = 0.0;
      if (v21 < v27)
      {
        if (v21 >= v29) {
          float v31 = v21;
        }
        else {
          float v31 = v26 * a11;
        }
        if (v31 > v27) {
          float v31 = *a2 * a10;
        }
        float v32 = (float)(v26 * (float)((float)(v31 - v29) / (float)(v27 - v29))) + 0.0;
        float v33 = v32 - floorf(v32 + 0.00001);
        float v34 = v26 * 0.5;
        if ((a1 & 1) != 0 || (float)(v34 - floorf(v34 + 0.00001)) != 0.0) {
          float v33 = (float)((float)(v33 - v34) + -0.5) - floorf((float)((float)(v33 - v34) + -0.5) + 0.00001);
        }
        if (v33 < 0.0) {
          float v33 = 0.0;
        }
        if (v33 > 1.0) {
          float v33 = 1.0;
        }
        float v30 = (float)((float)(a10 - a11) * v33) + a11;
      }
    }
  }
  if (v24 >= v28)
  {
    float v36 = v24 - (float)(v28 - a12);
  }
  else
  {
    float v35 = v25 * a13;
    if (v24 <= (float)(v25 * a13))
    {
      float v36 = v24 + (float)(a13 - v35);
    }
    else
    {
      float v36 = 0.0;
      if (v24 < v28)
      {
        if (v24 >= v35) {
          float v37 = v24;
        }
        else {
          float v37 = v25 * a13;
        }
        if (v37 > v28) {
          float v37 = v25 * a12;
        }
        float v38 = (float)((float)(v25 * (float)((float)(v37 - v35) / (float)(v28 - v35))) + 0.0)
            - floorf((float)((float)(v25 * (float)((float)(v37 - v35) / (float)(v28 - v35))) + 0.0) + 0.00001);
        float v39 = v25 * 0.5;
        if ((a1 & 1) != 0 || (float)(v39 - floorf(v39 + 0.00001)) != 0.0) {
          float v38 = (float)((float)(v38 - v39) + -0.5) - floorf((float)((float)(v38 - v39) + -0.5) + 0.00001);
        }
        if (v38 < 0.0) {
          float v38 = 0.0;
        }
        if (v38 > 1.0) {
          float v38 = 1.0;
        }
        float v36 = (float)((float)(a12 - a13) * v38) + a13;
      }
    }
  }
  float v40 = *a3 * (float)(*a7 * v30);
  float v41 = v18 * (float)(v20 * v36);
  float v42 = a5[3] + (float)((float)(a5[2] * 0.0) + (float)((float)(*a5 * v40) + (float)(a5[1] * v41)));
  float v43 = (float)(v23 * v41) + (float)(v40 * *a6);
  float v44 = a6[3];
  float v45 = a6[2] * 0.0;
  *(float *)a9 = v42;
  *(float *)(a9 + 4) = v44 + (float)(v43 + v45);
  double result = 0.0078125;
  *(void *)(a9 + 8) = 0x3F80000000000000;
  return result;
}

void HSlicedTile::~HSlicedTile(HGNode *this)
{
  HgcSlicedTile::~HgcSlicedTile(this);

  HGObject::operator delete(v1);
}

uint64_t HEquirectToSinusoidal::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HEquirectToSinusoidal::GetROI(HEquirectToSinusoidal *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 0;
  }
  int var2 = a4.var2;
  int var0 = a4.var0;
  int var3 = a4.var3;
  int var1 = a4.var1;
  (*(void (**)(HEquirectToSinusoidal *, void, float *))(*(void *)this + 104))(this, 0, v80);
  float v10 = v80[1];
  float v72 = v80[0];
  uint64_t v79 = *(void *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(void *)this + 104))(this, 1, v80);
  float v70 = v80[0];
  uint64_t v78 = *(void *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(void *)this + 104))(this, 2, v80);
  long long v77 = *(_OWORD *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(void *)this + 104))(this, 3, v80);
  long long v76 = *(_OWORD *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(void *)this + 104))(this, 4, v80);
  float v11 = v80[2];
  uint64_t v69 = *(void *)v80;
  float v71 = v80[3];
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(void *)this + 104))(this, 5, v80);
  float v12 = v80[1];
  float v13 = v80[0];
  float v15 = v80[3];
  float v14 = v80[2];
  float v16 = (float)var1;
  if ((float)var1 <= (float)var3)
  {
    float v62 = v80[2];
    uint64_t v63 = *(void *)v80;
    float v64 = v11;
    float v66 = v80[3];
    float v21 = -3.4028e38;
    float v22 = 3.4028e38;
    float v18 = 3.4028e38;
    float v20 = -3.4028e38;
    do
    {
      float v74 = (float)var0;
      float v75 = v16;
      processPoint(&v74, (float *)&v79, (float *)&v78, (float *)&v77, (float *)&v76, v80);
      v73[0] = (float)var2;
      v73[1] = v16;
      processPoint(v73, (float *)&v79, (float *)&v78, (float *)&v77, (float *)&v76, &v74);
      float v24 = v80[1];
      float v23 = v80[0];
      if (v18 >= v80[0]) {
        float v25 = v80[0];
      }
      else {
        float v25 = v18;
      }
      if (v22 >= v80[1]) {
        float v26 = v80[1];
      }
      else {
        float v26 = v22;
      }
      if (v20 > v80[0]) {
        float v23 = v20;
      }
      if (v21 > v80[1]) {
        float v24 = v21;
      }
      if (v25 >= v74) {
        float v18 = v74;
      }
      else {
        float v18 = v25;
      }
      if (v26 >= v75) {
        float v22 = v75;
      }
      else {
        float v22 = v26;
      }
      if (v23 <= v74) {
        float v20 = v74;
      }
      else {
        float v20 = v23;
      }
      if (v24 <= v75) {
        float v21 = v75;
      }
      else {
        float v21 = v24;
      }
      float v16 = v16 + 1.0;
    }
    while (v16 <= (float)var3);
    double v19 = v21;
    double v17 = v22;
    float v15 = v66;
    float v12 = *((float *)&v63 + 1);
    float v11 = v64;
    float v14 = v62;
    float v13 = *(float *)&v63;
  }
  else
  {
    double v17 = 3.40282347e38;
    float v18 = 3.4028e38;
    double v19 = -3.40282347e38;
    float v20 = -3.4028e38;
  }
  float v27 = floor(v18 / 6.28318531);
  float v28 = floor(v20 / 6.28318531);
  float v29 = v28 - v27;
  float v30 = 6.2832;
  float v31 = 0.0;
  if (v29 == 0.0)
  {
    float v32 = v18;
    float v65 = v11;
    float v67 = v15;
    float v33 = v12;
    float v68 = v10;
    float v34 = v13;
    float v35 = v14;
    float v36 = fmodf(v32, 6.2832);
    float v31 = v36 >= 0.0 ? v36 : v36 + 6.2832;
    float v30 = fmodf(v20, 6.2832);
    float v14 = v35;
    float v13 = v34;
    float v15 = v67;
    float v10 = v68;
    float v12 = v33;
    float v11 = v65;
    if (v30 < 0.0) {
      float v30 = v30 + 6.2832;
    }
  }
  double v37 = v72 * 0.5;
  float v38 = (float)(v31 / v70) - v37;
  float v39 = (float)(v30 / v70) - v37;
  double v40 = v10 * 0.5;
  float v41 = v19 - v40;
  *(float *)&double v40 = v17 - v40;
  float v42 = *(float *)&v69 * v38;
  float v43 = *((float *)&v69 + 1) * *(float *)&v40;
  float v44 = v71
      + (float)((float)(v11 * 0.0)
              + (float)((float)(*((float *)&v69 + 1) * *(float *)&v40) + (float)(*(float *)&v69 * v38)));
  float v45 = v13 * v38;
  *(float *)&double v40 = v12 * *(float *)&v40;
  float v46 = v14 * 0.0;
  float v47 = v15 + (float)(v46 + (float)(*(float *)&v40 + v45));
  float v48 = *(float *)&v69 * v39;
  float v49 = v71 + (float)((float)(v11 * 0.0) + (float)(v43 + (float)(*(float *)&v69 * v39)));
  float v50 = v13 * v39;
  float v51 = v15 + (float)(v46 + (float)(*(float *)&v40 + v50));
  float v52 = *((float *)&v69 + 1) * v41;
  float v53 = v71 + (float)((float)(v11 * 0.0) + (float)((float)(*((float *)&v69 + 1) * v41) + v42));
  float v54 = v12 * v41;
  float v55 = v15 + (float)(v46 + (float)(v54 + v45));
  float v56 = v71 + (float)((float)(v11 * 0.0) + (float)(v52 + v48));
  float v57 = v15 + (float)(v46 + (float)(v54 + v50));
  if (v47 >= v51) {
    float v58 = v51;
  }
  else {
    float v58 = v47;
  }
  if (v47 > v51) {
    float v51 = v47;
  }
  if (v44 >= v49) {
    float v59 = v49;
  }
  else {
    float v59 = v44;
  }
  if (v44 > v49) {
    float v49 = v44;
  }
  if (v59 >= v53) {
    float v60 = v53;
  }
  else {
    float v60 = v59;
  }
  if (v58 >= v55) {
    float v58 = v55;
  }
  if (v60 >= v56) {
    float v60 = v71 + (float)((float)(v11 * 0.0) + (float)(v52 + v48));
  }
  if (v58 >= v57) {
    float v58 = v57;
  }
  if (v49 > v53) {
    float v53 = v49;
  }
  if (v51 > v55) {
    float v55 = v51;
  }
  if (v53 <= v56) {
    float v61 = v71 + (float)((float)(v11 * 0.0) + (float)(v52 + v48));
  }
  else {
    float v61 = v53;
  }
  if (v55 > v57) {
    float v57 = v55;
  }
  return HGRectMake4i((int)(float)(floorf(v60) + -1.0), (int)(float)(floorf(v58) + -1.0), (int)(float)(ceilf(v61) + 1.0), (int)(float)(ceilf(v57) + 1.0));
}

float processPoint@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X8>)
{
  float v7 = a1[1];
  float v8 = (float)(a4[3] + (float)((float)((float)(*a1 * *a4) + (float)(v7 * a4[1])) + (float)(a4[2] * 0.0)))
     + (float)(*a2 * 0.5);
  float v9 = (float)(a5[3] + (float)((float)((float)(*a1 * *a5) + (float)(v7 * a5[1])) + (float)(a5[2] * 0.0)))
     + (float)(a2[1] * 0.5);
  a6[1] = v9;
  float v10 = (float)(v9 * a3[1]) + -1.57079633;
  float v11 = (float)(v8 * *a3) + -3.14159265;
  float v12 = cosf(v10);
  if (v12 == 0.0) {
    float v12 = 1.0;
  }
  float result = (float)(v11 / v12) + 3.14159265;
  *a6 = result;
  return result;
}

void HEquirectToSinusoidal::~HEquirectToSinusoidal(HGNode *this)
{
  HgcEquirectToSinusoidal::~HgcEquirectToSinusoidal(this);

  HGObject::operator delete(v1);
}

uint64_t HBadTVNoise::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 1) {
    return a4;
  }
  else {
    return 0;
  }
}

uint64_t HBadTVNoise::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ((a3 - 1) > 1)
  {
    if (a3)
    {
      unint64_t v14 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t ROI = HgcBadTVNoise::GetROI(this, a2, 0, a4);
      unsigned int v12 = ROI;
      unint64_t v14 = v16;
      unint64_t v13 = HIDWORD(ROI);
    }
  }
  else
  {
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 10, v24);
    float v7 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 8, v24);
    float v8 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 13, v24);
    float v9 = *(float *)v24;
    (*(void (**)(HGNode *, void, _OWORD *))(*(void *)this + 104))(this, 0, v23);
    v24[0] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[1] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 1, v23);
    long long v24[2] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[3] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 2, v23);
    v24[4] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[5] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 3, v23);
    v24[6] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[7] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 4, &v19);
    v23[0] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[1] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 5, &v19);
    _OWORD v23[2] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[3] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 6, &v19);
    v23[4] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[5] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 7, &v19);
    _OWORD v23[6] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[7] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    double v19 = (double)(int)v5;
    double v20 = (double)SHIDWORD(v5);
    double v21 = (double)((int)v4 - (int)v5);
    double v22 = (double)(HIDWORD(v4) - HIDWORD(v5));
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v23, &v19, (uint64_t)&v19);
    double v10 = v19 + v21 + v7 + v9;
    double v11 = v20 + v22 + v8 + 1.9;
    double v19 = v19 - v7 - v9 + -1.0;
    double v20 = v20 + v8 + -1.0;
    double v21 = v10 - v19;
    double v22 = v11 - v20;
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v24, &v19, (uint64_t)&v19);
    unsigned int v12 = (int)v19;
    unint64_t v13 = (int)v20;
    unint64_t v14 = (int)(v19 + v21) | ((unint64_t)(int)(v20 + v22) << 32);
  }
  uint64_t v17 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v12 | (v13 << 32), v14, v17);
}

void HBadTVNoise::~HBadTVNoise(HGNode *this)
{
  HgcBadTVNoise::~HgcBadTVNoise(this);

  HGObject::operator delete(v1);
}

void sub_1B74BEC10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C405284425BLL);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::_Private *anonymous namespace'::_Private::_Private(_anonymous_namespace_::_Private *this)
{
  return this;
}

void sub_1B74BEC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)uint64_t v10 = &unk_1F108BF78;
  *(void *)(v10 + 32) = &unk_1F108BFB8;
  a10 = (void **)(v10 + 56);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B74BEF64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C405284425BLL);
  _Unwind_Resume(a1);
}

void sub_1B74BF974(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C405284425BLL);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(void *)unint64_t v14 = &unk_1F108BF48;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    void v16[2] = v14 + 24;
    std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(void *)unint64_t v7 = &unk_1F108BF48;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void v16[5];

  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(void *)unint64_t v14 = &unk_1F108BF48;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    void v16[2] = v14 + 24;
    std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(void *)unint64_t v7 = &unk_1F108BF48;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_1B74BFAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B74C03A4(_Unwind_Exception *a1)
{
  *(void *)(v3 - 136) = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 136));
  *(void *)(v3 - 136) = v1;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_1B74C050C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cc::curve::aspline::hue_t<double>::~hue_t(uint64_t a1)
{
  *(void *)a1 = &unk_1F108BF78;
  *(void *)(a1 + 32) = &unk_1F108BFB8;
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_1F108BF78;
  *(void *)(a1 + 32) = &unk_1F108BFB8;
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1BA9BFBA0](a1, 0x10A1C400ED7C394);
}

uint64_t *anonymous namespace'::NewCurve@<X0>(void *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1F108BF78;
  a1[4] = &unk_1F108BFB8;
  a1[5] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[6] = &unk_1F108C0A0;
  a1[10] = &unk_1F108C0C8;
  a1[11] = cc::curve::aspline::bezier_t<double,true>::evalPeriodic;
  a1[12] = 0;
  uint64_t result = std::vector<cc::point_t<double,false,false>>::resize(a1 + 7, 4uLL);
  uint64_t v4 = a1[1];
  if (v4 == a1[2]) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 16);
  }
  unint64_t v6 = (void *)a1[7];
  v6[1] = 0;
  int8x16_t v6[2] = v5;
  void v6[4] = 0x3FD5566CF41F212DLL;
  v6[5] = v5;
  v6[7] = 0x3FE554C985F06F6ALL;
  v6[8] = v5;
  v6[10] = 0x3FF0000000000000;
  v6[11] = v5;
  return result;
}

void sub_1B74C07A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v14 = v13;
  *unint64_t v10 = v11;
  _OWORD v10[4] = v12;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v14;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cc::point_t<double,false,false>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cc::point_t<double,false,false> const*>,std::__wrap_iter<cc::point_t<double,false,false> const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 24;
  uint64_t v7 = *a1 + 24 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  uint64_t v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 3)) < a5)
  {
    unint64_t v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - v5) >> 3);
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v5) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    _OWORD v30[4] = v11;
    if (v17) {
      float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v11, v17);
    }
    else {
      float v18 = 0;
    }
    float v24 = &v18[24 * v6];
    v30[0] = v18;
    v30[1] = v24;
    v30[3] = &v18[24 * v17];
    uint64_t v25 = &v24[24 * a5];
    float v26 = (long long *)(a3 + 8);
    float v27 = v24;
    do
    {
      *(void *)float v27 = &unk_1F108BF48;
      long long v28 = *v26;
      float v26 = (long long *)((char *)v26 + 24);
      *(_OWORD *)(v27 + 8) = v28;
      v24 += 24;
      v27 += 24;
    }
    while (v27 != v25);
    _OWORD v30[2] = v25;
    uint64_t v7 = std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(a1, v30, v7);
    std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v30);
    return v7;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v7) >> 3)) >= a5)
  {
    uint64_t v19 = a3 + 24 * a5;
LABEL_18:
    std::vector<cc::point_t<double,false,false>>::__move_range((uint64_t)a1, v7, v14, v7 + 24 * a5);
    if (v19 != a3)
    {
      float v23 = (_OWORD *)(v5 + 24 * v6 + 8);
      do
      {
        *float v23 = *(_OWORD *)(a3 + 8);
        float v23 = (_OWORD *)((char *)v23 + 24);
        a3 += 24;
      }
      while (a3 != v19);
    }
    return v7;
  }
  uint64_t v19 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
  uint64_t v20 = *(void *)(v11 - 8);
  if (v19 != a4)
  {
    uint64_t v21 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
    uint64_t v22 = *(void *)(v11 - 8);
    do
    {
      *(void *)uint64_t v22 = &unk_1F108BF48;
      *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
      v21 += 24;
      v20 += 24;
      v22 += 24;
    }
    while (v21 != a4);
  }
  a1[1] = v20;
  if ((uint64_t)(v14 - v7) >= 1) {
    goto LABEL_18;
  }
  return v7;
}

void sub_1B74C0A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::vector<cc::point_t<double,false,false>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - a4;
  unint64_t v6 = a2 + v4 - a4;
  if (v6 >= a3)
  {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = v7;
    do
    {
      *(void *)uint64_t v8 = &unk_1F108BF48;
      __n128 result = *(__n128 *)(v6 + 8);
      *(__n128 *)(v8 + 8) = result;
      v6 += 24;
      v8 += 24;
      v7 += 24;
    }
    while (v6 < a3);
  }
  *(void *)(a1 + 8) = v8;
  if (v4 != a4)
  {
    unint64_t v10 = (__n128 *)(v4 - 16);
    uint64_t v11 = 8 * (v5 >> 3);
    do
    {
      __n128 result = *(__n128 *)(a2 - 16 + v11);
      *unint64_t v10 = result;
      unint64_t v10 = (__n128 *)((char *)v10 - 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = result - 24;
    uint64_t v8 = a3;
    uint64_t v6 = a2[1];
    do
    {
      *(void *)(v6 - 24) = &unk_1F108BF48;
      v6 -= 24;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(v8 - 16);
      v7 -= 24;
      v8 -= 24;
    }
    while (v8 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[2];
  if (v9 != a3)
  {
    uint64_t v11 = a2[2];
    do
    {
      *(void *)uint64_t v10 = &unk_1F108BF48;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(a3 + 8);
      a3 += 24;
      v10 += 24;
      v11 += 24;
    }
    while (a3 != v9);
  }
  a2[2] = v10;
  uint64_t v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void cc::point_t<double,false,false>::~point_t()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 24);
    *(void *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::vector<cc::point_t<double,false,false>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<cc::point_t<double,false,false>>::__append(result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = v3 - 24;
      uint64_t v9 = (uint64_t (***)(void))(v3 - 24);
      uint64_t v10 = (uint64_t (***)(void))(v3 - 24);
      do
      {
        uint64_t v11 = *v10;
        v10 -= 3;
        uint64_t result = (uint64_t *)(*v11)(v9);
        v8 -= 24;
        BOOL v12 = v9 == (uint64_t (***)(void))v7;
        uint64_t v9 = v10;
      }
      while (!v12);
    }
    v2[1] = v7;
  }
  return result;
}

uint64_t std::vector<cc::point_t<double,false,false>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      uint64_t v14 = *(void *)(result - 8);
      do
      {
        v7[1] = 0;
        long long v7[2] = 0;
        *uint64_t v7 = &unk_1F108BF48;
        v7 += 3;
        v14 += 24;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    _OWORD v18[4] = result;
    if (v11) {
      BOOL v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(result, v11);
    }
    else {
      BOOL v12 = 0;
    }
    unint64_t v15 = &v12[24 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[24 * v11];
    unint64_t v16 = &v15[24 * a2];
    unint64_t v17 = v15;
    do
    {
      *((void *)v17 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
      *((void *)v17 + 2) = 0;
      *(void *)unint64_t v17 = &unk_1F108BF48;
      v17 += 24;
      v15 += 24;
    }
    while (v17 != v16);
    float64x2_t v18[2] = v16;
    std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1B74C0EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 != *result)
  {
    uint64_t v5 = v4 - 24;
    do
    {
      *(void *)(v4 - 24) = &unk_1F108BF48;
      v4 -= 24;
      *(_OWORD *)(v4 + 8) = *(_OWORD *)(v3 - 16);
      v5 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void cc::curve::aspline::hue_t<double>::insertPointIsolation(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  double v9 = 1.0;
  if (a3 <= 1.0) {
    double v9 = a3;
  }
  if (a3 >= 0.0) {
    double v10 = v9;
  }
  else {
    double v10 = 0.0;
  }
  double v105 = v10;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v11 = (uint64_t *)(a1 + 8);
  if (v12 == v13)
  {
LABEL_19:
    double v21 = (*(double (**)(uint64_t, double *))(*(void *)a1 + 24))(a1, &v105) - *(double *)(a1 + 40);
    double v106 = &unk_1F108BF48;
    uint64_t v107 = *(void *)&v105;
    double v108 = v21;
    std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](a2, (uint64_t)&v106);
    double v22 = v105;
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
  }
  else
  {
    double v14 = v10 - a5;
    double v15 = v10 + a5;
    double v16 = v10 - v10;
    if (v10 - v10 < 0.0) {
      double v16 = -(v10 - v10);
    }
    uint64_t v17 = *(void *)(a1 + 8);
    while (1)
    {
      double v18 = *(double *)(v17 + 8);
      if (v18 > v14 && v18 < v15) {
        break;
      }
      if (v18 >= 0.0)
      {
        double v20 = v18 - v10;
        if (v20 < 0.0) {
          double v20 = -v20;
        }
        if (v20 <= v16) {
          break;
        }
      }
      v17 += 24;
      if (v17 == v13) {
        goto LABEL_19;
      }
    }
    double v22 = v10;
  }
  double v23 = fmod(v22 - a4, 1.0);
  if (v23 < 0.0) {
    double v23 = v23 + 1.0;
  }
  double v105 = v23;
  if (v12 == v13)
  {
LABEL_41:
    double v31 = (*(double (**)(uint64_t, double *))(*(void *)a1 + 24))(a1, &v105) - *(double *)(a1 + 40);
    double v106 = &unk_1F108BF48;
    uint64_t v107 = *(void *)&v105;
    double v108 = v31;
    std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](a2, (uint64_t)&v106);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
  }
  else
  {
    double v24 = v10 + 1.0;
    if (v23 <= v10) {
      double v24 = v10;
    }
    double v25 = v23 - v24;
    if (v23 - v24 < 0.0) {
      double v25 = -(v23 - v24);
    }
    uint64_t v26 = v12;
    while (1)
    {
      double v27 = *(double *)(v26 + 8);
      if (v27 > v23 - a5 && v27 < v23 + a5) {
        break;
      }
      if (v27 >= 0.0)
      {
        double v29 = v27 - v24;
        if (v27 - v24 < 0.0) {
          double v29 = -(v27 - v24);
        }
        if (v29 <= v25)
        {
          double v30 = v27 - v23;
          if (v30 < 0.0) {
            double v30 = -v30;
          }
          if (v30 <= v25) {
            break;
          }
        }
      }
      v26 += 24;
      if (v26 == v13) {
        goto LABEL_41;
      }
    }
  }
  double v32 = fmod(v10 + a4, 1.0);
  if (v32 < 0.0) {
    double v32 = v32 + 1.0;
  }
  double v105 = v32;
  if (v12 == v13)
  {
LABEL_61:
    double v39 = (*(double (**)(uint64_t, double *))(*(void *)a1 + 24))(a1, &v105) - *(double *)(a1 + 40);
    double v106 = &unk_1F108BF48;
    uint64_t v107 = *(void *)&v105;
    double v108 = v39;
    std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](a2, (uint64_t)&v106);
  }
  else
  {
    double v33 = v10 + -1.0;
    if (v32 >= v10) {
      double v33 = v10;
    }
    double v34 = v32 - v33;
    if (v32 - v33 < 0.0) {
      double v34 = -(v32 - v33);
    }
    while (1)
    {
      double v35 = *(double *)(v12 + 8);
      if (v35 > v32 - a5 && v35 < v32 + a5) {
        break;
      }
      if (v35 >= 0.0)
      {
        double v37 = v35 - v33;
        if (v35 - v33 < 0.0) {
          double v37 = -(v35 - v33);
        }
        if (v37 <= v34)
        {
          double v38 = v35 - v32;
          if (v38 < 0.0) {
            double v38 = -v38;
          }
          if (v38 <= v34) {
            break;
          }
        }
      }
      v12 += 24;
      if (v12 == v13) {
        goto LABEL_61;
      }
    }
  }
  for (unint64_t i = *a2; i != a2[1]; i += 24)
  {
    float v41 = *(void **)(a1 + 8);
    float v42 = *(void **)(a1 + 16);
    if (v41 == v42)
    {
LABEL_68:
      std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v11, i);
    }
    else
    {
      uint64_t v43 = *(void *)(a1 + 8);
      while (*(double *)(v43 + 8) < *(double *)(i + 8))
      {
        v43 += 24;
        v41 += 3;
        if ((void *)v43 == v42) {
          goto LABEL_68;
        }
      }
      std::vector<cc::point_t<double,false,false>>::insert(v11, v41, i);
    }
  }
  uint64_t v44 = *(void *)(a1 + 8);
  uint64_t v45 = *(void *)(a1 + 16);
  uint64_t v46 = v45 - v44;
  unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((v45 - v44) >> 3);
  if (v47 <= 1)
  {
    std::vector<cc::point_t<double,false,false>>::resize((uint64_t *)(a1 + 56), 4uLL);
    uint64_t v48 = *(void *)(a1 + 8);
    if (v48 == *(void *)(a1 + 16)) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)(v48 + 16);
    }
    double v104 = *(void **)(a1 + 56);
    v104[1] = 0;
    v104[2] = v49;
    v104[4] = 0x3FD5566CF41F212DLL;
    v104[5] = v49;
    v104[7] = 0x3FE554C985F06F6ALL;
    v104[8] = v49;
    v104[10] = 0x3FF0000000000000;
    v104[11] = v49;
    return;
  }
  if (v47 > 0x5555555555555554) {
    return;
  }
  if (v45 == v44) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = -1;
  }
  uint64_t v51 = v45 + 24 * v50;
  float v52 = (void *)(a1 + 56);
  uint64_t v107 = 0;
  double v108 = 0.0;
  double v106 = &unk_1F108BF48;
  std::vector<cc::point_t<double,false,false>>::resize((uint64_t *)(a1 + 56), 3 * v47 + 1);
  uint64_t v53 = *(void *)(a1 + 8);
  if (v53 != v45)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = *v52 + 32;
    while (1)
    {
      uint64_t v57 = v53 + v55;
      if (v53 + v55 == v51)
      {
        double v59 = *(double *)(v53 + 16);
        double v60 = *(double *)(v53 + 8) + 1.0;
        v61.f64[0] = v60;
        v61.f64[1] = v59;
        uint64_t v58 = v53;
      }
      else
      {
        uint64_t v58 = v57 + 24;
        double v60 = *(double *)(v57 + 32);
        double v59 = *(double *)(v57 + 40);
        v61.f64[0] = v60;
        v61.f64[1] = v59;
      }
      uint64_t v62 = v53 + v55;
      double v63 = v60 - *(double *)(v53 + v55 + 8);
      if (v63 < 0.0) {
        double v63 = -v63;
      }
      uint64_t v107 = *(void *)&v63;
      double v64 = v59 - *(double *)(v62 + 16);
      if (v64 < 0.0) {
        double v64 = -v64;
      }
      double v108 = v64;
      double v65 = -v63;
      if (v63 >= 0.0) {
        double v65 = v63;
      }
      *(_OWORD *)(v56 - 24) = *(_OWORD *)(v62 + 8);
      uint64_t v66 = v62 - 24;
      if (!v55) {
        uint64_t v66 = v51;
      }
      double v67 = *(double *)(v66 + 8);
      double v68 = *(double *)(v66 + 16);
      if (!v55) {
        double v67 = v67 + -1.0;
      }
      double v69 = v61.f64[0] - v67;
      double v70 = -v69;
      if (v69 >= 0.0) {
        double v70 = v69;
      }
      double v71 = (v61.f64[1] - v68) / v69;
      if (v70 < 0.00000011920929) {
        double v71 = 0.0;
      }
      double v108 = v71;
      uint64_t v107 = 0x3FF0000000000000;
      double v72 = *(double *)(v62 + 16);
      int v73 = v68 - v72 >= 0.0;
      int v74 = v61.f64[1] - v72 < 0.0;
      if (v74 != v73)
      {
        double v108 = 0.0;
        double v71 = 0.0;
      }
      v75.f64[0] = v65 * 0.3334;
      int v76 = v74 ^ v73;
      double v77 = v75.f64[0] * v71 + *(double *)(v62 + 16);
      *(double *)uint64_t v56 = v75.f64[0] + *(double *)(v62 + 8);
      *(double *)(v56 + 8) = v77;
      if (v54-- == 0) {
        int v76 = 0;
      }
      if (v76 == 1) {
        *(double *)(v56 - 4pthread_cond_init((pthread_cond_t *)this, 0) = v77;
      }
      if (v57 == v51) {
        goto LABEL_108;
      }
      if (v46 != 48) {
        break;
      }
      double v79 = *(double *)(v62 + 8);
      double v80 = *(double *)(v62 + 16);
LABEL_111:
      double v79 = v79 + 1.0;
LABEL_112:
      double v83 = v79 - *(double *)(v62 + 8);
      double v84 = v80 - *(double *)(v62 + 16);
      double v85 = -v83;
      if (v83 >= 0.0) {
        double v85 = v83;
      }
      double v86 = v84 / v83;
      if (v85 < 0.00000011920929) {
        double v86 = 0.0;
      }
      double v108 = v86;
      uint64_t v107 = 0x3FF0000000000000;
      v75.f64[1] = v75.f64[0] * v86;
      *(float64x2_t *)(v56 + 24) = vsubq_f64(v61, v75);
      v55 += 24;
      v56 += 72;
      if (v53 + v55 == v45) {
        goto LABEL_117;
      }
    }
    if (v57 == v51 - 24)
    {
LABEL_108:
      BOOL v81 = v57 != v51;
      uint64_t v82 = v53 + 24 * (v57 == v51);
    }
    else
    {
      BOOL v81 = 0;
      uint64_t v82 = v58 + 24;
    }
    double v79 = *(double *)(v82 + 8);
    double v80 = *(double *)(v82 + 16);
    if (!v81 && v57 != v51) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }
LABEL_117:
  uint64_t v87 = *(void *)(a1 + 64);
  uint64_t v88 = *(void *)(v53 + 16);
  *(double *)(v87 - 16) = *(double *)(v53 + 8) + 1.0;
  *(void *)(v87 - 8) = v88;
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v53) >> 3) >= 3 && v53 != v45)
  {
    uint64_t v90 = 0;
    double v91 = (double *)(*v52 + 64);
    do
    {
      uint64_t v92 = v53 + v90;
      if (v53 + v90 == v51) {
        uint64_t v93 = v53;
      }
      else {
        uint64_t v93 = v53 + v90 + 24;
      }
      double v94 = *(double *)(v93 + 8);
      double v95 = *(double *)(v93 + 16);
      double v96 = 1.0;
      if (v53 + v90 == v51) {
        double v94 = v94 + 1.0;
      }
      double v97 = v94 - *(double *)(v92 + 8);
      if (v97 < 0.0) {
        double v97 = -v97;
      }
      uint64_t v107 = *(void *)&v97;
      double v98 = v95 - *(double *)(v92 + 16);
      if (v98 < 0.0) {
        double v98 = -v98;
      }
      double v108 = v98;
      if (v98 > 0.00000011920929)
      {
        double v96 = 0.0;
        if (v97 > 0.00000011920929)
        {
          double v99 = v98 / v97 * -3.0 + 1.0;
          if (v99 >= 0.0)
          {
            double v96 = 1.0;
            if (v99 <= 1.0) {
              double v96 = v99;
            }
          }
        }
      }
      double v100 = v96 * *(v91 - 6);
      double v101 = 1.0 - v96;
      *(v91 - 3) = v100 + (1.0 - v96) * *(v91 - 3);
      double v102 = v96 * v91[3];
      *double v91 = v102 + v101 * *v91;
      if (v92 != v51) {
        v91[6] = v102 + v101 * v91[6];
      }
      uint64_t v103 = v53 + v90;
      if (v53 + v90 != v53) {
        *(v91 - 9) = v100 + v101 * *(v91 - 9);
      }
      v90 += 24;
      v91 += 9;
    }
    while (v103 + 24 != v45);
  }
}

double cc::curve::aspline::hue_t<double>::evaluate(uint64_t a1)
{
  uint64_t v2 = *(double (**)(void *))(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = (void *)(a1 + (v3 >> 1) + 48);
  if (v3) {
    uint64_t v2 = *(double (**)(void *))(*v4 + v2);
  }
  return v2(v4) + *(double *)(a1 + 40);
}

BOOL cc::curve::aspline::hue_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  if (a3)
  {
    double v10 = a2;
    uint64_t v11 = a1 + 80;
    unint64_t v12 = (unint64_t)&a2[a3];
    float v13 = a7 - a6;
    double v14 = v13;
    double v15 = a6;
    double v16 = (float)(1.0 / v13);
    double v17 = (float)((float)-a6 / v13);
    double v18 = 0.0;
    double v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      double v27 = 0.0;
      double v26 = v18 * v14 + v15;
      double v20 = (*(double (**)(uint64_t, double *))(*(void *)v11 + 16))(v11, &v26);
      double v27 = v20;
      if (a5)
      {
        a5(&v27);
        double v20 = v27;
      }
      double v21 = v20 * v16 + v17;
      double v22 = v21 * 65535.0;
      if (v21 > 1.0) {
        double v22 = 65535.0;
      }
      BOOL v23 = v21 < 0.0;
      double v24 = 0.0;
      if (!v23) {
        double v24 = v22;
      }
      *v10++ = (int)v24;
      double v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4) {
      *double v10 = *(v10 - 1);
    }
  }
  return a3 != 0;
}

uint64_t cc::curve::aspline::hue_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(void *)(a2 + 16)) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      memmove(0, *(const void **)(a2 + 8), 0);
      *(void *)(a2 + 24) = 1024;
      MEMORY[0x1BA9BFB70](v7, 0x1000C80BDFB0063);
    }
    else
    {
      *(void *)(a2 + 24) = 1024;
    }
    operator new[]();
  }
  *(void *)(a2 + 16) = 1024;
  uint64_t v8 = *(void *)(a2 + 8);
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a1 + 80)
                                                                                             + 24);
  uint64_t v10 = a1 + 80;

  return v9(v10, v8, 1024, a3, a4, a5, a6);
}

void non-virtual thunk to'cc::curve::aspline::hue_t<double>::~hue_t(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F108BF78;
  *(void *)a1 = &unk_1F108BFB8;
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t non-virtual thunk to'cc::curve::aspline::hue_t<double>::~hue_t(uint64_t a1)
{
  uint64_t v2 = a1 - 32;
  *(void *)(a1 - 32) = &unk_1F108BF78;
  *(void *)a1 = &unk_1F108BFB8;
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1BA9BFBA0](v2, 0x10A1C400ED7C394);
}

double non-virtual thunk to'cc::curve::aspline::hue_t<double>::evaluate(uint64_t a1)
{
  uint64_t v2 = *(double (**)(void *))(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = (void *)(a1 + (v3 >> 1) + 16);
  if (v3) {
    uint64_t v2 = *(double (**)(void *))(*v4 + v2);
  }
  return v2(v4) + *(double *)(a1 + 8);
}

BOOL non-virtual thunk to'cc::curve::aspline::hue_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  if (a3)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a1 + 48;
    unint64_t v12 = (unint64_t)&a2[a3];
    float v13 = a7 - a6;
    double v14 = v13;
    double v15 = a6;
    double v16 = (float)(1.0 / v13);
    double v17 = (float)((float)-a6 / v13);
    double v18 = 0.0;
    double v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      double v27 = 0.0;
      double v26 = v18 * v14 + v15;
      double v20 = (*(double (**)(uint64_t, double *))(*(void *)v11 + 16))(v11, &v26);
      double v27 = v20;
      if (a5)
      {
        a5(&v27);
        double v20 = v27;
      }
      double v21 = v20 * v16 + v17;
      double v22 = v21 * 65535.0;
      if (v21 > 1.0) {
        double v22 = 65535.0;
      }
      BOOL v23 = v21 < 0.0;
      double v24 = 0.0;
      if (!v23) {
        double v24 = v22;
      }
      *v10++ = (int)v24;
      double v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4) {
      *uint64_t v10 = *(v10 - 1);
    }
  }
  return a3 != 0;
}

uint64_t non-virtual thunk to'cc::curve::aspline::hue_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(void *)(a2 + 16)) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      memmove(0, *(const void **)(a2 + 8), 0);
      *(void *)(a2 + 24) = 1024;
      MEMORY[0x1BA9BFB70](v7, 0x1000C80BDFB0063);
    }
    else
    {
      *(void *)(a2 + 24) = 1024;
    }
    operator new[]();
  }
  *(void *)(a2 + 16) = 1024;
  uint64_t v8 = *(void *)(a2 + 8);
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a1 + 48)
                                                                                             + 24);
  uint64_t v10 = a1 + 48;

  return v9(v10, v8, 1024, a3, a4, a5, a6);
}

void std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 24;
      uint64_t v7 = v4 - 24;
      uint64_t v8 = v4 - 24;
      do
      {
        double v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL cc::curve::evaluator_1d_t<double,1024u>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  if (a3)
  {
    BOOL v10 = a2;
    unint64_t v12 = (unint64_t)&a2[a3];
    float v13 = a7 - a6;
    double v14 = v13;
    double v15 = a6;
    double v16 = (float)(1.0 / v13);
    double v17 = (float)((float)-a6 / v13);
    double v18 = 0.0;
    double v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      double v27 = 0.0;
      double v26 = v18 * v14 + v15;
      double v20 = (*(double (**)(uint64_t, double *))(*(void *)a1 + 16))(a1, &v26);
      double v27 = v20;
      if (a5)
      {
        a5(&v27);
        double v20 = v27;
      }
      double v21 = v20 * v16 + v17;
      double v22 = v21 * 65535.0;
      if (v21 > 1.0) {
        double v22 = 65535.0;
      }
      BOOL v23 = v21 < 0.0;
      double v24 = 0.0;
      if (!v23) {
        double v24 = v22;
      }
      *v10++ = (int)v24;
      double v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4) {
      *BOOL v10 = *(v10 - 1);
    }
  }
  return a3 != 0;
}

uint64_t cc::curve::evaluator_1d_t<double,1024u>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(void *)(a2 + 16)) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      memmove(0, *(const void **)(a2 + 8), 0);
      *(void *)(a2 + 24) = 1024;
      MEMORY[0x1BA9BFB70](v7, 0x1000C80BDFB0063);
    }
    else
    {
      *(void *)(a2 + 24) = 1024;
    }
    operator new[]();
  }
  *(void *)(a2 + 16) = 1024;
  uint64_t v8 = *(void *)(a2 + 8);
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)a1 + 24);

  return v9(a1, v8, 1024, a3, a4, a5, a6);
}

double cc::curve::aspline::bezier_t<double,true>::evalPeriodic(uint64_t a1, double *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  uint64_t v3 = *(double **)(a1 + 16);
  double result = 0.0;
  if (0xAAAAAAAAAAAAAAABLL * (v3 - v2) < 4) {
    return result;
  }
  double v5 = *a2;
  if (v3 == v2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = -1;
  }
  double v7 = v2[1];
  double v8 = v3[3 * v6 + 1];
  double v9 = v8 - (v7 - v5);
  if (v7 <= v5) {
    double v9 = *a2;
  }
  if (v8 >= v5) {
    double result = v9;
  }
  else {
    double result = v7 + v5 - v8;
  }
  if (result < v7)
  {
    double v10 = v2[2];
    double v11 = v2[4] - v7;
    if (v11 != 0.0)
    {
      double v12 = v2[5] - v10;
LABEL_17:
      double v13 = v12 / v11;
      return v10 + (result - v7) * v13;
    }
    goto LABEL_18;
  }
  double v7 = *(v3 - 2);
  if (result > v7)
  {
    double v10 = *(v3 - 1);
    double v11 = v7 - *(v3 - 5);
    if (v11 != 0.0)
    {
      double v12 = v10 - *(v3 - 4);
      goto LABEL_17;
    }
LABEL_18:
    double v13 = 0.0;
    return v10 + (result - v7) * v13;
  }
  double v14 = v3 - 3;
  while (v2 != v14)
  {
    double v15 = v2[1];
    if (result >= v15)
    {
      double v16 = v2[10];
      if (result <= v16)
      {
        double v17 = v2[4];
        double v18 = v2[7] * 3.0;
        double v19 = v16 + v17 * 3.0 - v15 - v18;
        double v20 = v15 * 3.0 + v17 * -6.0 + v18;
        double v21 = v17 * 3.0 - v15 * 3.0;
        double v22 = 0.0;
        while (1)
        {
          double v23 = v22 * (v22 * v22);
          double v24 = v15 + v22 * v21 + v22 * v22 * v20 + v23 * v19;
          if (v24 >= result) {
            break;
          }
          double v22 = v22 + 0.05;
          if (v22 >= 1.05) {
            return result;
          }
        }
        double v25 = v22 + -0.05;
        double v26 = v25 * (v25 * v25);
        double v27 = v15 + (v22 + -0.05) * v21 + v25 * v25 * v20 + v26 * v19;
        double v28 = v2[2];
        double v29 = v2[5];
        double v30 = v2[8] * 3.0;
        double v31 = v2[11] + v29 * 3.0 - v28 - v30;
        double v32 = v28 * 3.0 + v29 * -6.0 + v30;
        double v33 = v29 * 3.0 - v28 * 3.0;
        double v34 = v28 + (v22 + -0.05) * v33 + v25 * v25 * v32 + v26 * v31;
        double v35 = v28 + v22 * v33 + v22 * v22 * v32 + v23 * v31;
        double v36 = v24 - v27;
        if (v24 - v27 >= 0.0) {
          double v37 = v24 - v27;
        }
        else {
          double v37 = -(v24 - v27);
        }
        double v38 = 0.0;
        if (v37 >= 0.00000011920929) {
          double v38 = (result - v27) / v36;
        }
        return v35 * v38 + v34 * (1.0 - v38);
      }
    }
    v2 += 9;
  }
  return result;
}

uint64_t cc::curve::aspline::bezier_t<double,true>::~bezier_t(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1BA9BFBA0](a1, 0xA1C40D2948F72);
}

uint64_t cc::curve::aspline::bezier_t<double,true>::evaluate(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *))(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)(a1 + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void non-virtual thunk to'cc::curve::aspline::bezier_t<double,true>::~bezier_t(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t non-virtual thunk to'cc::curve::aspline::bezier_t<double,true>::~bezier_t(uint64_t a1)
{
  uint64_t v1 = a1 - 32;
  uint64_t v3 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1BA9BFBA0](v1, 0xA1C40D2948F72);
}

uint64_t non-virtual thunk to'cc::curve::aspline::bezier_t<double,true>::evaluate(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *))(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)(a1 + (v2 >> 1) - 32);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

unint64_t std::vector<cc::point_t<double,false,false>>::insert(uint64_t *a1, void *a2, unint64_t a3)
{
  unint64_t v4 = (unint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  int64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    double v35 = a1 + 2;
    if (v14) {
      double v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a1 + 2), v14);
    }
    else {
      double v15 = 0;
    }
    double v16 = &v15[8 * (v8 >> 3)];
    double v31 = v15;
    double v32 = v16;
    uint64_t v33 = (uint64_t)v16;
    double v34 = &v15[24 * v14];
    if (v9 == v14)
    {
      if (v8 < 1)
      {
        if (v7 == v4) {
          unint64_t v18 = 1;
        }
        else {
          unint64_t v18 = 0x5555555555555556 * (v8 >> 3);
        }
        v36[4] = v11;
        double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v11, v18);
        double v21 = v32;
        uint64_t v22 = v33;
        uint64_t v23 = (uint64_t)&v19[24 * (v18 >> 2)];
        if ((char *)v33 != v32)
        {
          uint64_t v23 = (uint64_t)&v19[24 * (v18 >> 2) + v33 - (void)v32];
          double v24 = &v19[24 * (v18 >> 2)];
          double v25 = (long long *)(v32 + 8);
          double v26 = v24;
          do
          {
            *(void *)double v26 = &unk_1F108BF48;
            long long v27 = *v25;
            double v25 = (long long *)((char *)v25 + 24);
            *(_OWORD *)(v26 + 8) = v27;
            v24 += 24;
            v26 += 24;
          }
          while (v26 != (char *)v23);
        }
        double v28 = v31;
        double v29 = v34;
        double v31 = v19;
        double v32 = &v19[24 * (v18 >> 2)];
        v36[0] = v28;
        v36[1] = v21;
        uint64_t v33 = v23;
        double v34 = &v19[24 * v20];
        v36[2] = v22;
        v36[3] = v29;
        std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v36);
        double v16 = (char *)v33;
      }
      else
      {
        uint64_t v17 = v9 + 2;
        if (v9 >= -1) {
          uint64_t v17 = v9 + 1;
        }
        v16 -= 24 * (v17 >> 1);
        double v32 = v16;
      }
    }
    *(void *)double v16 = &unk_1F108BF48;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)(a3 + 8);
    uint64_t v33 = (uint64_t)(v16 + 24);
    unint64_t v4 = std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(a1, &v31, v4);
    std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v31);
  }
  else if (a2 == (void *)v6)
  {
    *a2 = &unk_1F108BF48;
    *(_OWORD *)(v7 + 8 * (v8 >> 3) + 8) = *(_OWORD *)(a3 + 8);
    a1[1] = (uint64_t)(a2 + 3);
  }
  else
  {
    std::vector<cc::point_t<double,false,false>>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 3));
    if (v4 <= a3) {
      a3 += 24 * (a1[1] > a3);
    }
    *(_OWORD *)(v7 + 8 * (v8 >> 3) + 8) = *(_OWORD *)(a3 + 8);
  }
  return v4;
}

void sub_1B74C29F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

HgcConvolvePass8tapPoint *HConvolvePass8TapPoint::GetOutput(HConvolvePass8TapPoint *this, HGRenderer *a2)
{
  (*(void (**)(HConvolvePass8TapPoint *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32);

  return HgcConvolvePass8tapPoint::GetOutput(this, a2);
}

void HConvolvePass8TapPoint::~HConvolvePass8TapPoint(HGNode *this)
{
  HgcConvolvePass8tapPoint::~HgcConvolvePass8tapPoint(this);

  HGObject::operator delete(v1);
}

void sub_1B74C2FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B74C3504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void HDirectionalBlur::HDirectionalBlur(HDirectionalBlur *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v2 = &unk_1F108C3C0;
  uint64_t v3 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v3);
  *((void *)this + 5HGRenderQueue::CancelAllRenderJobs(*this, 1) = v3;
  unint64_t v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *((void *)this + 52) = v4;
}

void sub_1B74C3634(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  HGObject::operator delete(v3);
  uint64_t v5 = *(void *)(v1 + 408);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HDirectionalBlur::~HDirectionalBlur(HGNode *this)
{
  *(void *)this = &unk_1F108C3C0;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HDirectionalBlur::~HDirectionalBlur(this);

  HGObject::operator delete(v1);
}

uint64_t HDirectionalBlur::init(HDirectionalBlur *this, float a2, float a3, float a4, float a5)
{
  __float2 v9 = __sincosf_stret(a3);
  v11[0] = a2 * (float)(v9.__cosval * a4);
  v11[1] = a2 * (float)(v9.__sinval * a5);
  return HDirectionalBlur::init((uint64_t)this, v11);
}

uint64_t HDirectionalBlur::init(uint64_t a1, double *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 408);
  if (v4) {
    (*(void (**)(void))(*(void *)v4 + 16))(*(void *)(a1 + 408));
  }
  double v6 = *a2;
  double v5 = a2[1];
  float v7 = atan(v5 / *a2);
  float v8 = v7 + 6.28318531;
  if (v7 >= 0.0) {
    float v8 = v7;
  }
  if (v8 >= 3.14159265)
  {
    float v9 = v8 + -3.14159265;
    float v10 = v9;
  }
  else
  {
    float v10 = v8;
  }
  double v11 = v10;
  BOOL v12 = v10 <= 2.35619449 && v10 >= 0.785398163;
  if (v12)
  {
    float v13 = 1.57079633 - v11;
  }
  else if (v11 <= 1.57079633)
  {
    float v13 = v10;
  }
  else
  {
    float v14 = v11 + -3.14159265;
    float v13 = v14;
  }
  double v15 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v15);
  (*(void (**)(HGXForm *, void, uint64_t))(*(void *)v15 + 120))(v15, 0, v4);
  HGTransform::HGTransform((HGTransform *)v31);
  float v16 = -v13;
  v32[0] = 1.0;
  if (v12)
  {
    double v17 = tanf(v16);
    double v18 = 0.0;
  }
  else
  {
    double v18 = tanf(v16);
    double v17 = 0.0;
  }
  v32[1] = v18;
  _OWORD v32[2] = 0.0;
  v32[3] = 0.0;
  v32[4] = v17;
  _OWORD v32[5] = 1.0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v38 = 0x3FF0000000000000;
  MatrixCGPoint d = HGTransform::LoadMatrixd((HGTransform *)v31, v32);
  (*(void (**)(HGXForm *, unsigned char *, double))(*(void *)v15 + 576))(v15, v31, Matrixd);
  double v20 = sin(3.14159265 - (v16 + 1.57079633));
  double v21 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
  HGaussianBlur::HGaussianBlur(v21);
  (*(void (**)(HGaussianBlur *, void, HGXForm *))(*(void *)v21 + 120))(v21, 0, v15);
  float v22 = sqrt(v5 * v5 + v6 * v6);
  float v23 = fabs(v20) * v22;
  float v24 = 1.0;
  if (v12) {
    float v25 = 0.0;
  }
  else {
    float v25 = 1.0;
  }
  if (!v12) {
    float v24 = 0.0;
  }
  HGaussianBlur::init(v21, v23, v25, v24, 0, 0, 0);
  uint64_t v26 = 1;
  if (v12) {
    uint64_t v26 = 4;
  }
  v32[v26] = -v32[v26];
  long long v27 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v27);
  (*(void (**)(HGXForm *, void, HGaussianBlur *))(*(void *)v27 + 120))(v27, 0, v21);
  HGTransform::HGTransform((HGTransform *)v30);
  double v28 = HGTransform::LoadMatrixd((HGTransform *)v30, v32);
  (*(void (**)(HGXForm *, unsigned char *, double))(*(void *)v27 + 576))(v27, v30, v28);
  (*(void (**)(void, void, HGXForm *))(**(void **)(a1 + 416) + 120))(*(void *)(a1 + 416), 0, v27);
  HGTransform::~HGTransform((HGTransform *)v30);
  (*(void (**)(HGXForm *))(*(void *)v27 + 24))(v27);
  (*(void (**)(HGaussianBlur *))(*(void *)v21 + 24))(v21);
  HGTransform::~HGTransform((HGTransform *)v31);
  uint64_t result = (*(uint64_t (**)(HGXForm *))(*(void *)v15 + 24))(v15);
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return result;
}

void sub_1B74C3C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HDirectionalBlur::GetOutput(HDirectionalBlur *this, HGRenderer *a2)
{
  uint64_t v3 = *((void *)this + 51);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, void, HGNode *))(*(void *)v3 + 120))(v3, 0, Input);
  return *((void *)this + 52);
}

void sub_1B74C40B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B74C562C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HiOSTwirl::GetDOD(HiOSTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  (*(void (**)(HiOSTwirl *, void, float *))(*(void *)this + 104))(this, 0, v17);
  double v6 = (float)(v17[0] - (float)(1.0 / v18));
  double v7 = (float)(v17[1] - (float)(1.0 / v18));
  double v8 = (float)(1.0 / v18) + (float)(1.0 / v18);
  *(void *)&v20.int var0 = v5;
  *(void *)&v20.int var2 = v4;
  double v9 = CGRectFromHGRect(v20);
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  v21.origin.CGFloat x = v6;
  v21.origin.CGFloat y = v7;
  v21.size.CGFloat width = v8;
  v21.size.CGFloat height = v8;
  v24.origin.CGFloat x = v9;
  v24.origin.CGFloat y = v11;
  v24.size.CGFloat width = v13;
  v24.size.CGFloat height = v15;
  if (CGRectIntersectsRect(v21, v24))
  {
    v22.origin.CGFloat x = v9;
    v22.origin.CGFloat y = v11;
    v22.size.CGFloat width = v13;
    v22.size.CGFloat height = v15;
    v25.origin.CGFloat x = v6;
    v25.origin.CGFloat y = v7;
    v25.size.CGFloat width = v8;
    v25.size.CGFloat height = v8;
    CGRect v23 = CGRectUnion(v22, v25);
    return HGRectFromCGRect(v23);
  }
  return v5;
}

uint64_t HiOSTwirl::GetROI(HiOSTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  double v6 = CGRectFromHGRect(a4);
  rect1.origin.double y = v7;
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  (*(void (**)(HiOSTwirl *, void, CGSize *))(*(void *)this + 104))(this, 0, &rect1.size);
  float v12 = *((float *)&rect1.size.height + 1);
  float v13 = 1.0 / *(float *)&rect1.size.height;
  float v29 = *(float *)&rect1.size.width;
  double v14 = (float)(*(float *)&rect1.size.width - (float)(1.0 / *(float *)&rect1.size.height));
  float v28 = *((float *)&rect1.size.width + 1);
  double v15 = (float)(*((float *)&rect1.size.width + 1) - (float)(1.0 / *(float *)&rect1.size.height));
  double v16 = (float)(1.0 / *(float *)&rect1.size.height) + (float)(1.0 / *(float *)&rect1.size.height);
  v38.origin.CGFloat x = v6;
  v38.origin.double y = rect1.origin.y;
  v38.size.CGFloat width = v9;
  v38.size.CGFloat height = v11;
  v48.origin.CGFloat x = v14;
  v48.origin.double y = v15;
  v48.size.CGFloat width = v16;
  v48.size.CGFloat height = v16;
  CGRect v39 = CGRectIntersection(v38, v48);
  if (!CGRectIsEmpty(v39))
  {
    v40.origin.CGFloat x = v6;
    v40.origin.double y = rect1.origin.y;
    v40.size.CGFloat width = v9;
    v40.size.CGFloat height = v11;
    v49.origin.CGFloat x = v14;
    v49.origin.double y = v15;
    v49.size.CGFloat width = v16;
    v49.size.CGFloat height = v16;
    if (!CGRectContainsRect(v40, v49))
    {
      if (v13 >= 500.0)
      {
        double v17 = v29;
        v43.origin.CGFloat x = v6;
        v43.origin.double y = rect1.origin.y;
        v43.size.CGFloat width = v9;
        v43.size.CGFloat height = v11;
        CGRect v44 = CGRectIntegral(v43);
        CGFloat x = v44.origin.x;
        CGFloat width = v44.size.width;
        rect1.origin.CGFloat x = v44.origin.y;
        CGFloat v19 = v44.size.width;
        CGFloat height = v44.size.height;
        v44.CGSize size = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
        rect1.CGSize size = (CGSize)*MEMORY[0x1E4F1DB20];
        CGSize size = v44.size;
        float v21 = 1.0 / v13;
        v44.size.CGFloat width = v19;
        rect1.origin.double y = CGRectGetMinX(v44);
        v45.origin.CGFloat x = x;
        v45.origin.double y = rect1.origin.x;
        v45.size.CGFloat width = v19;
        v45.size.CGFloat height = height;
        CGFloat v22 = height;
        double MaxX = CGRectGetMaxX(v45);
        v46.origin.CGFloat x = x;
        v46.origin.double y = rect1.origin.x;
        v46.size.CGFloat width = v19;
        v46.size.CGFloat height = v22;
        double MinY = CGRectGetMinY(v46);
        v47.origin.CGFloat x = x;
        v47.size.CGFloat width = width;
        v47.origin.double y = rect1.origin.x;
        v47.size.CGFloat height = v22;
        double MaxY = CGRectGetMaxY(v47);
        if (rect1.origin.y <= MaxX)
        {
          double y = rect1.origin.y;
          do
          {
            v34.CGFloat x = v17;
            v34.double y = v28;
            twirlTracePoint(y, MinY, v34, v21, v12, (CGRect *)&rect1.size);
            v35.CGFloat x = v17;
            v35.double y = v28;
            twirlTracePoint(y, MaxY, v35, v21, v12, (CGRect *)&rect1.size);
            double y = y + 1.0;
          }
          while (y <= MaxX);
        }
        for (; MinY <= MaxY; double MinY = MinY + 1.0)
        {
          v36.CGFloat x = v17;
          v36.double y = v28;
          twirlTracePoint(rect1.origin.y, MinY, v36, v21, v12, (CGRect *)&rect1.size);
          v37.CGFloat x = v17;
          v37.double y = v28;
          twirlTracePoint(MaxX, MinY, v37, v21, v12, (CGRect *)&rect1.size);
        }
        v42.origin.CGFloat x = rect1.size.width;
        v42.origin.double y = rect1.size.height;
        v42.CGSize size = size;
      }
      else
      {
        v41.origin.CGFloat x = v6;
        v41.origin.double y = rect1.origin.y;
        v41.size.CGFloat width = v9;
        v41.size.CGFloat height = v11;
        v50.origin.CGFloat x = v14;
        v50.origin.double y = v15;
        v50.size.CGFloat width = v16;
        v50.size.CGFloat height = v16;
        CGRect v42 = CGRectUnion(v41, v50);
      }
      return HGRectFromCGRect(v42);
    }
  }
  return v4;
}

void twirlTracePoint(double a1, double a2, CGPoint a3, float a4, float a5, CGRect *a6)
{
  double v7 = a2;
  double v8 = a1;
  double v9 = a1 - a3.x;
  double v10 = a2 - a3.y;
  float v11 = v9 * v9 + v10 * v10;
  float v12 = fminf(sqrtf(v11) * a4, 1.0);
  if (v12 < 1.0)
  {
    double y = a3.y;
    double x = a3.x;
    float v15 = (3.0 - ((float)(1.0 - v12) + (float)(1.0 - v12))) * (float)(1.0 - v12) * (float)(1.0 - v12);
    __float2 v16 = __sincosf_stret(v15 * a5);
    float v17 = v9 * v16.__cosval + v10 * v16.__sinval;
    float v18 = v10 * v16.__cosval - v9 * v16.__sinval;
    double v8 = x + v17;
    double v7 = y + v18;
  }
  v19.double x = v8;
  v19.double y = v7;
  if (!CGRectContainsPoint(*a6, v19))
  {
    v20.size.CGFloat width = 0.0;
    v20.size.CGFloat height = 0.0;
    v20.origin.double x = v8;
    v20.origin.double y = v7;
    *a6 = CGRectUnion(*a6, v20);
  }
}

void HiOSTwirl::~HiOSTwirl(HGNode *this)
{
  HgciOSTwirl::~HgciOSTwirl(this);

  HGObject::operator delete(v1);
}

void HPrism::HPrism(HPrism *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v2 = &unk_1F108C890;
  uint64_t v3 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v3);
  *((void *)this + 5HGRenderQueue::CancelAllRenderJobs(*this, 1) = v3;
  uint64_t v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *((void *)this + 52) = v4;
}

void sub_1B74C60FC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  HGObject::operator delete(v3);
  uint64_t v5 = *(void *)(v1 + 408);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HPrism::~HPrism(HGNode *this)
{
  *(void *)this = &unk_1F108C890;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HPrism::~HPrism(this);

  HGObject::operator delete(v1);
}

uint64_t HPrism::init(uint64_t a1, double *a2)
{
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = (HDirectionalBlur *)HGObject::operator new(0x1B0uLL);
  HDirectionalBlur::HDirectionalBlur(v6);
  HDirectionalBlur::init((uint64_t)v6, a2);
  (*(void (**)(HDirectionalBlur *, void, void))(*(void *)v6 + 120))(v6, 0, *(void *)(a1 + 408));
  double v7 = (HgcPrism *)HGObject::operator new(0x1A0uLL);
  HgcPrism::HgcPrism(v7);
  HGTransform::HGTransform((HGTransform *)v12);
  *(float *)&double v4 = v4 + v4;
  *(float *)&double v5 = v5 + v5;
  HGTransform::Translate((HGTransform *)v12, *(float *)&v4, *(float *)&v5, 0.0);
  double v8 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v8);
  (*(void (**)(HGXForm *, void, HDirectionalBlur *))(*(void *)v8 + 120))(v8, 0, v6);
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v8 + 576))(v8, v12);
  (*(void (**)(HGXForm *, uint64_t))(*(void *)v8 + 160))(v8, 1);
  (*(void (**)(HgcPrism *, void, HGXForm *))(*(void *)v7 + 120))(v7, 0, v8);
  (*(void (**)(HgcPrism *, uint64_t, HDirectionalBlur *))(*(void *)v7 + 120))(v7, 1, v6);
  HGTransform::HGTransform((HGTransform *)v11);
  HGTransform::Translate((HGTransform *)v11, (float)-*(float *)&v4, (float)-*(float *)&v5, 0.0);
  double v9 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v9);
  (*(void (**)(HGXForm *, void, HDirectionalBlur *))(*(void *)v9 + 120))(v9, 0, v6);
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v9 + 576))(v9, v11);
  (*(void (**)(HGXForm *, uint64_t))(*(void *)v9 + 160))(v9, 1);
  (*(void (**)(HgcPrism *, uint64_t, HGXForm *))(*(void *)v7 + 120))(v7, 2, v9);
  (*(void (**)(void, void, HgcPrism *))(**(void **)(a1 + 416) + 120))(*(void *)(a1 + 416), 0, v7);
  (*(void (**)(HGXForm *))(*(void *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)v11);
  (*(void (**)(HGXForm *))(*(void *)v8 + 24))(v8);
  HGTransform::~HGTransform((HGTransform *)v12);
  (*(void (**)(HgcPrism *))(*(void *)v7 + 24))(v7);
  return (*(uint64_t (**)(HDirectionalBlur *))(*(void *)v6 + 24))(v6);
}

void sub_1B74C6614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  HGObject::operator delete(v30);
  HGTransform::~HGTransform((HGTransform *)&a9);
  (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  HGTransform::~HGTransform((HGTransform *)&a27);
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  _Unwind_Resume(a1);
}

uint64_t HPrism::GetOutput(HPrism *this, HGRenderer *a2)
{
  uint64_t v3 = *((void *)this + 51);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, void, HGNode *))(*(void *)v3 + 120))(v3, 0, Input);
  return *((void *)this + 52);
}

void HSoftFocus::HSoftFocus(HSoftFocus *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v2 = &unk_1F108CAF8;
  uint64_t v3 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v3);
  *((void *)this + 5HGRenderQueue::CancelAllRenderJobs(*this, 1) = v3;
  double v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *((void *)this + 52) = v4;
}

void sub_1B74C683C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  HGObject::operator delete(v3);
  uint64_t v5 = *(void *)(v1 + 408);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HSoftFocus::~HSoftFocus(HGNode *this)
{
  *(void *)this = &unk_1F108CAF8;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HSoftFocus::~HSoftFocus(this);

  HGObject::operator delete(v1);
}

uint64_t HSoftFocus::init(HSoftFocus *this, float a2, float a3, float a4, float a5, char a6)
{
  float v12 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
  HGaussianBlur::HGaussianBlur(v12);
  HGaussianBlur::init(v12, a2, a4, a5, a6, 0, 0);
  (*(void (**)(HGaussianBlur *, void, void))(*(void *)v12 + 120))(v12, 0, *((void *)this + 51));
  float v13 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
  HGLegacyBlend::HGLegacyBlend(v13);
  (*(void (**)(HGLegacyBlend *, void, float, double, double, double))(*(void *)v13 + 96))(v13, 0, 8.0, 0.0, 0.0, 0.0);
  (*(void (**)(HGLegacyBlend *, uint64_t, float, double, double, double))(*(void *)v13 + 96))(v13, 1, a3, 0.0, 0.0, 0.0);
  (*(void (**)(HGLegacyBlend *, uint64_t, HGaussianBlur *))(*(void *)v13 + 120))(v13, 1, v12);
  (*(void (**)(HGLegacyBlend *, void, void))(*(void *)v13 + 120))(v13, 0, *((void *)this + 51));
  (*(void (**)(void, void, HGLegacyBlend *))(**((void **)this + 52) + 120))(*((void *)this + 52), 0, v13);
  (*(void (**)(HGLegacyBlend *))(*(void *)v13 + 24))(v13);
  return (*(uint64_t (**)(HGaussianBlur *))(*(void *)v12 + 24))(v12);
}

void sub_1B74C6BB4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HSoftFocus::GetOutput(HSoftFocus *this, HGRenderer *a2)
{
  uint64_t v3 = *((void *)this + 51);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, void, HGNode *))(*(void *)v3 + 120))(v3, 0, Input);
  return *((void *)this + 52);
}

uint64_t *HZoomBlur::makeZoom@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
}

uint64_t *anonymous namespace'::doMakeZoom@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  double v6 = result;
  *a2 = 0;
  if (a3 == 0.0)
  {
    uint64_t v8 = *result;
    if (*result)
    {
      *a2 = v8;
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    }
    return result;
  }
  float v12 = a3 * a3;
  float v13 = 1.0833;
  if (v12 <= 1.0833)
  {
    int v15 = 1;
  }
  else
  {
    float v14 = 1.0;
    int v15 = 1;
    do
    {
      float v16 = v13;
      float v14 = v14 * 4.0;
      float v13 = v13 + v14;
      ++v15;
    }
    while (v12 > v13);
    float v12 = v12 - v16;
    float v13 = v13 - v16;
  }
  float v17 = v12 / v13;
  int v18 = 0;
  uint64_t v19 = 0;
  CGRect v20 = 0;
  float v21 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  do
  {
    uint64_t v22 = (uint64_t)v20;
    if (v18)
    {
      if ((HgcZoomBlur *)v19 != v20)
      {
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
        }
        if (v20)
        {
          uint64_t v19 = (uint64_t)v20;
          (*(void (**)(HgcZoomBlur *))(*(void *)v20 + 16))(v20);
        }
        else
        {
          uint64_t v19 = 0;
        }
      }
    }
    else
    {
      if (v19 == *v6) {
        goto LABEL_23;
      }
      if (!v19)
      {
        uint64_t v19 = *v6;
        if (!*v6) {
          goto LABEL_23;
        }
LABEL_22:
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        goto LABEL_23;
      }
      (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
      uint64_t v19 = *v6;
      if (*v6) {
        goto LABEL_22;
      }
    }
LABEL_23:
    if (v21 != v20)
    {
      if (v21) {
        (*(void (**)(HgcZoomBlur *))(*(void *)v21 + 24))(v21);
      }
      if (v20) {
        (*(void (**)(HgcZoomBlur *))(*(void *)v20 + 16))(v20);
      }
    }
    float v23 = powf(a6, (float)(1 << v18));
    CGRect v20 = (HgcZoomBlur *)HGObject::operator new(0x1B0uLL);
    HgcZoomBlur::HgcZoomBlur(v20);
    (*(void (**)(HgcZoomBlur *, void, float, float, double, double))(*(void *)v20 + 96))(v20, 0, a4, a5, 0.0, 0.0);
    (*(void (**)(HgcZoomBlur *, uint64_t, float, float, float, float))(*(void *)v20 + 96))(v20, 1, v23, v23 * v23, v23 * (float)(v23 * v23), (float)(v23 * v23) * (float)(v23 * v23));
    (*(void (**)(HgcZoomBlur *, void, uint64_t))(*(void *)v20 + 120))(v20, 0, v19);
    if ((HgcZoomBlur *)v22 == v20)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
      CGRect v20 = (HgcZoomBlur *)v22;
    }
    else if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
    }
    (*(void (**)(HgcZoomBlur *, uint64_t, uint64_t))(*(void *)v20 + 136))(v20, 0xFFFFFFFFLL, 2);
    ++v18;
    float v21 = (HgcZoomBlur *)v22;
  }
  while (v15 != v18);
  uint64_t v25 = v19;
  uint64_t v26 = v20;
  uint64_t v27 = v22;
  if (v22) {
  else
  }
  if (v24) {
    *a2 = v24;
  }
  if (!v19
    || (result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19), (CGRect v20 = v26) != 0))
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(HgcZoomBlur *))(*(void *)v20 + 24))(v20);
  }
  if (v22) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 24))(v22);
  }
  return result;
}

void sub_1B74C7190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = v14;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    uint64_t v16 = a11;
  }
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  if (*v12) {
    (*(void (**)(void))(*(void *)*v12 + 24))(*v12);
  }
  _Unwind_Resume(exception_object);
}

float HZoomBlur::getOutputWidthAndHeight(HZoomBlur *this, unsigned int a2, void *a3, float a4, float a5, float a6, unint64_t *a7, unint64_t *a8)
{
}

float anonymous namespace'::computeOutputWidthAndHeight(_anonymous_namespace_ *this, unsigned int a2, void *a3, float a4, float a5, float a6, unint64_t *a7, unint64_t *a8, float a9)
{
  unsigned int v12 = this;
  if (a5 < 0.0) {
    a5 = -a5;
  }
  float v13 = a5 + (float)(this >> 1);
  if (a6 < 0.0) {
    a6 = -a6;
  }
  float v14 = a6 + (float)(a2 >> 1);
  *a3 = (unint64_t)(float)((float)((float)((float)(v13 / Scale) - v13) + (float)((float)(v13 / Scale) - v13))
                                + (float)v12);
  float result = (float)((float)((float)(v14 / Scale) - v14) + (float)((float)(v14 / Scale) - v14)) + (float)a2;
  *a7 = (unint64_t)result;
  return result;
}

uint64_t anonymous namespace'::blurLerp@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>, float a4@<S0>)
{
  if (fabsf(a4) >= 0.00001)
  {
    if (fabsf(a4 + -1.0) >= 0.00001)
    {
      double v10 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
      HGLegacyBlend::HGLegacyBlend(v10);
      (*(void (**)(HGLegacyBlend *, void, uint64_t))(*(void *)v10 + 120))(v10, 0, *a2);
      (*(void (**)(HGLegacyBlend *, uint64_t, uint64_t))(*(void *)v10 + 120))(v10, 1, *a1);
      (*(void (**)(HGLegacyBlend *, void, float, double, double, double))(*(void *)v10 + 96))(v10, 0, 8.0, 0.0, 0.0, 0.0);
      uint64_t result = (*(uint64_t (**)(HGLegacyBlend *, uint64_t, float, double, double, double))(*(void *)v10 + 96))(v10, 1, a4, 0.0, 0.0, 0.0);
      *a3 = v10;
      return result;
    }
    uint64_t result = *a1;
  }
  else
  {
    uint64_t result = *a2;
  }
  *a3 = result;
  if (result)
  {
    double v9 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v9();
  }
  return result;
}

void sub_1B74C75B0(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float anonymous namespace'::findScale(_anonymous_namespace_ *this, float a2, float a3)
{
  float v4 = a2 * a2;
  float v5 = 1.0833;
  if (v4 <= 1.0833)
  {
    float v12 = v4 / 1.0833;
    float v10 = (float)(a3 * a3) * (float)(a3 * a3);
    float v13 = v10;
  }
  else
  {
    float v6 = 1.0;
    int v7 = -1;
    do
    {
      float v8 = v5;
      float v6 = v6 * 4.0;
      float v5 = v5 + v6;
      ++v7;
    }
    while (v4 > v5);
    float v9 = v4 - v8;
    float v10 = (float)(a3 * a3) * (float)(a3 * a3);
    int v11 = -1;
    float v12 = v9 / (float)(v5 - v8);
    do
    {
      float v13 = v10;
      float v14 = powf(a3, (float)(1 << (v11 + 2)));
      float v10 = v13 * (float)((float)(v14 * v14) * (float)(v14 * v14));
      ++v11;
    }
    while (v7 != v11);
  }
  return (float)(v12 * v10) + (float)((float)(1.0 - v12) * v13);
}

void HStyleTransfer_GPUImpl::HStyleTransfer_GPUImpl(HStyleTransfer_GPUImpl *this, EspressoImage2Image *a2)
{
  HGNode::HGNode((HGNode *)this);
  *float v4 = &unk_1F108CD60;
  v4[51] = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)this + 4) & 0xFFFFF9FF | 0x400;
  (*(void (**)(HStyleTransfer_GPUImpl *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
  (*(void (**)(HStyleTransfer_GPUImpl *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 2);
  *((void *)this + 5HGRenderQueue::CancelAllRenderJobs(*this, 1) = a2;
}

void sub_1B74C77C8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HStyleTransfer_GPUImpl::~HStyleTransfer_GPUImpl(id *this)
{
  *this = &unk_1F108CD60;

  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;
  uint64_t vars8;

  HStyleTransfer_GPUImpl::~HStyleTransfer_GPUImpl(this);

  HGObject::operator delete(v1);
}

uint64_t HStyleTransfer_GPUImpl::RenderPageMetal(HStyleTransfer_GPUImpl *this, HGPage *a2)
{
  return HStyleTransfer_GPUImpl::_renderPage((uint64_t)this, (uint64_t)a2, 1);
}

uint64_t HStyleTransfer_GPUImpl::_renderPage(uint64_t a1, uint64_t a2, int a3)
{
  float v6 = *(HGRenderer **)a2;
  [*(id *)(HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a2) + 32) commandBuffer];
  if (*(void *)(a1 + 408) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v6, *(HGRect *)(a2 + 36), *(unsigned int *)(a2 + 32), a3, 0, 0);
    Input = HGRenderer::GetInput(v6, (HGNode *)a1, 0);
    NodeBitmap = HGGPURenderer::GetNodeBitmap(v6, Input, *(HGRect *)(a2 + 36), (HGBuffer *)Buffer, 1u);
    if (NodeBitmap != (HGBitmap *)Buffer) {
      HGGPURenderer::CopyBitmapIntoBuffer((uint64_t)v6, (HGBuffer *)Buffer, *(HGRect *)(a2 + 36), NodeBitmap);
    }
    (*(void (**)(HGBitmap *))(*(void *)NodeBitmap + 24))(NodeBitmap);
    (*(void (**)(HGRenderer *, void))(*(void *)v6 + 144))(v6, 0);
    HGGPURenderer::FlushMetalCommandBuffer(v6);
    float v10 = HGGPURenderer::CreateBuffer(*(void *)a2, *(HGRect *)(a2 + 16), *(unsigned int *)(a2 + 32), a3, (*(_DWORD *)(a1 + 16) >> 12) & 1, 0, 1);
    v12[5] = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v6, (HGBitmap *)v10);
    long long v12[4] = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v6, (HGBitmap *)Buffer);
    (*(void (**)(char *))(*(void *)Buffer + 24))(Buffer);
    v12[0] = 0;
    v12[1] = v12;
    double v12[2] = 0x2020000000;
    v12[3] = 0;
    operator new();
  }

  return HGNode::RenderPage((HGNode *)a1, (HGRect *)a2);
}

void sub_1B74C7D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  *(void *)(v17 + 8) = v18;
  _Block_object_dispose(va, 8);
  uint64_t v21 = *(void *)(v19 - 112);
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
  }
  uint64_t v22 = *(void *)(v19 - 104);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  }
  _Unwind_Resume(a1);
}

void ___ZN22HStyleTransfer_GPUImpl11_renderPageEP6HGPage14HGGPURenderAPI_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    float v4 = *(void ***)(v2 + 24);
    std::vector<HGRef<HGMetalTexture>>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1BA9BFBA0](v3, 0x20C40960023A9);
  }
}

void HStyleTransfer_GPU::HStyleTransfer_GPU(HStyleTransfer_GPU *this, EspressoImage2Image *a2)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v3 = &unk_1F108CFB0;
  float v4 = (HStyleTransfer_GPUImpl **)(v3 + 408);
  *(void *)(v3 + 408) = 0;
  *(void *)(v3 + 416) = 0;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v3 + 16) & 0xFFFFF9FF | 0x400;
  float v5 = (HStyleTransfer_GPUImpl *)HGObject::operator new(0x1A0uLL);
  HStyleTransfer_GPUImpl::HStyleTransfer_GPUImpl(v5, a2);
  float v6 = *v4;
  if (*v4 == v5)
  {
    if (v5) {
      (*(void (**)(HStyleTransfer_GPUImpl *))(*(void *)v5 + 24))(v5);
    }
  }
  else
  {
    if (v6) {
      (*(void (**)(HStyleTransfer_GPUImpl *))(*(void *)v6 + 24))(v6);
    }
    *float v4 = v5;
  }
}

void sub_1B74C7F24(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v6 = *(void *)(v1 + 416);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  if (*v3) {
    (*(void (**)(void))(*(void *)*v3 + 24))(*v3);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

HGXForm *HStyleTransfer_GPU::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  float v8 = fminf(1920.0 / (float)(v6 - DOD), 1.0);
  float v9 = fminf(1920.0 / (float)(v7 - HIDWORD(DOD)), 1.0);
  HGTransform::HGTransform((HGTransform *)v16);
  HGTransform::Scale((HGTransform *)v16, v8, v9, 1.0);
  HGTransform::HGTransform((HGTransform *)v15);
  HGTransform::Scale((HGTransform *)v15, (float)(1.0 / v8), (float)(1.0 / v9), 1.0);
  float v10 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v10);
  (*(void (**)(HGXForm *, void, HGNode *))(*(void *)v10 + 120))(v10, 0, Input);
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v10 + 576))(v10, v16);
  (*(void (**)(HGXForm *, uint64_t, float))(*(void *)v10 + 592))(v10, 6, 1.0);
  (*(void (**)(void, void, HGXForm *))(**((void **)this + 51) + 120))(*((void *)this + 51), 0, v10);
  int v11 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v11);
  (*(void (**)(HGXForm *, void, void))(*(void *)v11 + 120))(v11, 0, *((void *)this + 51));
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v11 + 576))(v11, v15);
  float v12 = (HGXForm *)*((void *)this + 52);
  float v13 = v11;
  if (v12 != v11)
  {
    if (v12) {
      (*(void (**)(HGXForm *))(*(void *)v12 + 24))(v12);
    }
    *((void *)this + 52) = v11;
    (*(void (**)(HGXForm *))(*(void *)v11 + 16))(v11);
    float v13 = (HGXForm *)*((void *)this + 52);
  }
  (*(void (**)(HGXForm *))(*(void *)v11 + 24))(v11);
  (*(void (**)(HGXForm *))(*(void *)v10 + 24))(v10);
  HGTransform::~HGTransform((HGTransform *)v15);
  HGTransform::~HGTransform((HGTransform *)v16);
  return v13;
}

void sub_1B74C82EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  HGObject::operator delete(v28);
  (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  HGTransform::~HGTransform((HGTransform *)&a9);
  HGTransform::~HGTransform((HGTransform *)&a27);
  _Unwind_Resume(a1);
}

void HStyleTransfer_GPU::~HStyleTransfer_GPU(HGNode *this)
{
  *(void *)this = &unk_1F108CFB0;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F108CFB0;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v4);
}

void ___ZN12_GLOBAL__N_111InitStaticsEv_block_invoke()
{
}

uint64_t std::allocator<HGRef<HGMetalTexture>>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void std::vector<HGRef<HGMetalTexture>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<HGRef<HGMetalTexture>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B74C9490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  HGObject::operator delete(v35);
  (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  uint64_t v38 = *(void *)(v36 - 168);
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  _Unwind_Resume(a1);
}

unint64_t HSharpen::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0x8000000080000000;
  }
  else {
    return a4;
  }
}

uint64_t HSharpen::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

void HSharpen::~HSharpen(HGNode *this)
{
  HgcSharpen::~HgcSharpen(this);

  HGObject::operator delete(v1);
}

void sub_1B74CA638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double PCMatrix44Tmpl<double>::rightTranslate(double *a1, double result, double a3, double a4)
{
  if (result != 0.0)
  {
    double v4 = a1[4];
    a1[3] = a1[3] + *a1 * result;
    double v5 = v4 * result;
    double v6 = a1[8];
    a1[7] = a1[7] + v5;
    double v7 = v6 * result;
    double v8 = a1[12];
    a1[11] = a1[11] + v7;
    uint64_t result = a1[15] + v8 * result;
    a1[15] = result;
  }
  if (a3 != 0.0)
  {
    a1[3] = a1[3] + a1[1] * a3;
    a1[7] = a1[7] + a1[5] * a3;
    a1[11] = a1[11] + a1[9] * a3;
    uint64_t result = a1[15] + a1[13] * a3;
    a1[15] = result;
  }
  if (a4 != 0.0)
  {
    a1[3] = a1[3] + a1[2] * a4;
    a1[7] = a1[7] + a1[6] * a4;
    a1[11] = a1[11] + a1[10] * a4;
    uint64_t result = a1[15] + a1[14] * a4;
    a1[15] = result;
  }
  return result;
}

void sub_1B74CB698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  _Unwind_Resume(a1);
}

void HGradientRadial::HGradientRadial(HGradientRadial *this)
{
}

void sub_1B74CB934(_Unwind_Exception *a1)
{
  HgcGradientRadial::~HgcGradientRadial(v1);
  _Unwind_Resume(a1);
}

void HGradientRadial::~HGradientRadial(HGNode *this)
{
  HgcGradientRadial::~HgcGradientRadial(this);

  HGObject::operator delete(v1);
}

uint64_t HGradientRadial::GetROI(HGradientRadial *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  (*(void (**)(HGradientRadial *, uint64_t, unsigned char *, void, void))(*(void *)this + 104))(this, 1, v6, *(void *)&a4.var0, *(void *)&a4.var2);
  uint64_t result = HGRectMake4i(0, 0, (int)v7, 1u);
  if (a3) {
    return 0;
  }
  return result;
}

uint64_t HSoftGradient::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = &HGRectInfinite;
  if (a3) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

uint64_t HSoftGradient::GetROI()
{
  return 0;
}

void HSoftGradient::~HSoftGradient(HGNode *this)
{
  HgcSoftGradient::~HgcSoftGradient(this);

  HGObject::operator delete(v1);
}

void sub_1B74CC2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(a1);
}

void sub_1B74CD09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 24))(a13);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74CE184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74CED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1B74CFF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74D1364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74D19BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  uint64_t v11 = *(void *)(v9 - 24);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  _Unwind_Resume(exception_object);
}

double PCMatrix44Tmpl<double>::setRotationFromQuaternion(uint64_t a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = a2[2];
  double v5 = a2[3];
  double v6 = v2 * v2 + v3 * v3 + v4 * v4 + v5 * v5;
  double v7 = 2.0 / v6;
  BOOL v8 = v6 <= 0.0;
  double v9 = 0.0;
  if (!v8) {
    double v9 = v7;
  }
  double v10 = v3 * v9;
  double v11 = v4 * v9;
  double v12 = v5 * v9;
  double v13 = v2 * v10;
  double v14 = v2 * v11;
  double v15 = v2 * v12;
  double v16 = v3 * v10;
  double v17 = v3 * v11;
  double v18 = v3 * v12;
  double v19 = v4 * v11;
  double v20 = v4 * v12;
  double v21 = v5 * v12;
  *(double *)a1 = 1.0 - (v19 + v21);
  *(double *)(a1 + 8) = v17 - v15;
  *(double *)(a1 + 16) = v18 + v14;
  *(void *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = v17 + v15;
  *(double *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 1.0 - (v16 + v21);
  *(double *)(a1 + 48) = v20 - v13;
  *(void *)(a1 + 56) = 0;
  *(double *)(a1 + 64) = v18 - v14;
  *(double *)(a1 + 72) = v20 + v13;
  *(double *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 1.0 - (v16 + v19);
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
  return result;
}

void sub_1B74D3494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  HGTransform::~HGTransform((HGTransform *)va);
  (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (a8) {
    (*(void (**)(uint64_t))(*(void *)a8 + 24))(a8);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  _Unwind_Resume(a1);
}

double PCQuat<double>::transform<double>(double *a1, double *a2)
{
  double v2 = a2[1];
  double v4 = *a1;
  double v3 = a1[1];
  double v5 = a1[2];
  double v6 = a1[3];
  double v7 = a2[2];
  double v8 = v3 * *a2 + v5 * v2 + v6 * v7;
  double v9 = v8 + v8;
  double v10 = v4 * (v4 + v4) + -1.0;
  double v11 = (v4 + v4) * (v5 * v7 - v2 * v6) + v3 * v9 + *a2 * v10;
  double v12 = (v4 + v4) * (*a2 * v6 - v3 * v7) + v5 * v9 + v2 * v10;
  double v13 = (v3 * v2 - *a2 * v5) * (v4 + v4) + v6 * v9 + v7 * v10;
  double v14 = v4 * v4 + v3 * v3 + v5 * v5 + v6 * v6;
  *a2 = v11 / v14;
  a2[1] = v12 / v14;
  double result = v13 / v14;
  a2[2] = result;
  return result;
}

void sub_1B74D4030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  uint64_t v12 = *(void *)(v10 - 40);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  _Unwind_Resume(exception_object);
}

void HWideScreen::HWideScreen(HWideScreen *this)
{
}

void HWideScreen::~HWideScreen(HGNode *this)
{
  HgcWideScreen::~HgcWideScreen(this);

  HGObject::operator delete(v1);
}

uint64_t HWideScreen::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

unint64_t HWideScreen::GetROI(HWideScreen *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)&a4.var2;
    uint64_t v7 = *(void *)&a4.var0;
    (*(void (**)(HWideScreen *, uint64_t, float *))(*(void *)this + 104))(this, 3, v35);
    float v9 = v35[0];
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 4, v34);
    long long v10 = *(_OWORD *)v34;
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 5, v34);
    unsigned long long v11 = *(_OWORD *)v34;
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 6, v34);
    unsigned long long v12 = *(_OWORD *)v34;
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 7, v34);
    *(void *)&long long v13 = *((void *)&v10 + 1);
    *(void *)&long long v14 = v11 >> 64;
    *((void *)&v13 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v11;
    *(void *)&long long v15 = v12 >> 64;
    *((void *)&v14 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v12;
    uint64_t v16 = v34[1];
    *((void *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v34[0];
    v34[0] = v10;
    *(_OWORD *)&v34[1] = v13;
    *(_OWORD *)&v34[3] = v14;
    *(_OWORD *)&v34[5] = v15;
    v34[7] = v16;
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 8, v33);
    long long v17 = *(_OWORD *)v33;
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 9, v33);
    long long v18 = *(_OWORD *)v33;
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 10, v33);
    unsigned long long v19 = *(_OWORD *)v33;
    (*(void (**)(HWideScreen *, uint64_t, void *))(*(void *)this + 104))(this, 11, v33);
    *(void *)&long long v20 = *((void *)&v18 + 1);
    *(void *)&long long v21 = v19 >> 64;
    *((void *)&v20 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v19;
    uint64_t v22 = v33[1];
    *((void *)&v21 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v33[0];
    *(_OWORD *)&v33[1] = *(long long *)((char *)&v17 + 8);
    *(_OWORD *)&v33[3] = v20;
    *(_OWORD *)&v33[5] = v21;
    v33[7] = v22;
    v32.f32[0] = (float)(int)v7;
    v32.f32[1] = (float)SHIDWORD(v7);
    v32.i64[1] = 0x3F80000000000000;
    v33[0] = v17;
    v31.f32[0] = (float)(int)v6;
    v31.f32[1] = (float)SHIDWORD(v7);
    v31.i64[1] = 0x3F80000000000000;
    v30.f32[0] = (float)(int)v6;
    v30.f32[1] = (float)SHIDWORD(v6);
    v30.i64[1] = 0x3F80000000000000;
    *(float *)&long long v29 = (float)(int)v7;
    *((float *)&v29 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)SHIDWORD(v6);
    *((void *)&v29 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F80000000000000;
    float32x4_t v32 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, v32.f32, v32.f32);
    v23.i32[1] = v32.i32[1];
    v23.i32[0] = *(_DWORD *)((unint64_t)&v32 | 0xC);
    v32.f32[0] = v32.f32[0] / *(float *)v23.i32;
    *(float32x2_t *)&v32.i32[1] = vdiv_f32(*(float32x2_t *)&v32.i32[1], (float32x2_t)vdup_lane_s32(v23, 0));
    *(float *)((unint64_t)&v32 | 0xC) = *(float *)v23.i32 / *(float *)v23.i32;
    float32x4_t v31 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, v31.f32, v31.f32);
    v24.i32[1] = v31.i32[1];
    v24.i32[0] = *(_DWORD *)((unint64_t)&v31 | 0xC);
    v31.f32[0] = v31.f32[0] / *(float *)v24.i32;
    *(float32x2_t *)&v31.i32[1] = vdiv_f32(*(float32x2_t *)&v31.i32[1], (float32x2_t)vdup_lane_s32(v24, 0));
    *(float *)((unint64_t)&v31 | 0xC) = *(float *)v24.i32 / *(float *)v24.i32;
    float32x4_t v30 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, v30.f32, v30.f32);
    v25.i32[1] = v30.i32[1];
    v25.i32[0] = *(_DWORD *)((unint64_t)&v30 | 0xC);
    v30.f32[0] = v30.f32[0] / *(float *)v25.i32;
    *(float32x2_t *)&v30.i32[1] = vdiv_f32(*(float32x2_t *)&v30.i32[1], (float32x2_t)vdup_lane_s32(v25, 0));
    *(float *)((unint64_t)&v30 | 0xC) = *(float *)v25.i32 / *(float *)v25.i32;
    long long v29 = *(_OWORD *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, (float *)&v29, (float *)&v29);
    v32.f32[1] = v32.f32[1] - v9;
    v31.f32[1] = v31.f32[1] - v9;
    v30.f32[1] = v30.f32[1] - v9;
    *(float *)&long long v29 = *(float *)&v29 / *((float *)&v29 + 3);
    *((float *)&v29 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)(*((float *)&v29 + 1) / *((float *)&v29 + 3)) - v9;
    *((float *)&v29 + 2) = *((float *)&v29 + 2) / *((float *)&v29 + 3);
    *((float *)&v29 + 3) = *((float *)&v29 + 3) / *((float *)&v29 + 3);
    float32x4_t v32 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, v32.f32, v32.f32);
    float32x4_t v32 = vdivq_f32(v32, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3));
    float32x4_t v31 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, v31.f32, v31.f32);
    float32x4_t v31 = vdivq_f32(v31, (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3));
    float32x4_t v30 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, v30.f32, v30.f32);
    float32x4_t v30 = vdivq_f32(v30, (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3));
    long long v29 = *(_OWORD *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, (float *)&v29, (float *)&v29);
    if (v32.f32[0] >= v31.f32[0]) {
      float v26 = v31.f32[0];
    }
    else {
      float v26 = v32.f32[0];
    }
    if (v32.f32[1] >= v31.f32[1]) {
      float v27 = v31.f32[1];
    }
    else {
      float v27 = v32.f32[1];
    }
    if (v26 >= v30.f32[0]) {
      float v26 = v30.f32[0];
    }
    if (v27 >= v30.f32[1]) {
      float v27 = v30.f32[1];
    }
    if (v26 >= (float)(*(float *)&v29 / *((float *)&v29 + 3))) {
      float v26 = *(float *)&v29 / *((float *)&v29 + 3);
    }
    if (v27 >= (float)(*((float *)&v29 + 1) / *((float *)&v29 + 3))) {
      float v27 = *((float *)&v29 + 1) / *((float *)&v29 + 3);
    }
    unsigned int v4 = (int)(v26 + -1.0);
    uint64_t v5 = (int)(v27 + -1.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

float *PCMatrix44Tmpl<float>::transform<float>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = a2[3];
  *a3 = (float)((float)((float)(*a2 * *a1) + (float)(v4 * a1[1])) + (float)(v5 * a1[2])) + (float)(v6 * a1[3]);
  a3[1] = (float)((float)((float)(v3 * a1[4]) + (float)(v4 * a1[5])) + (float)(v5 * a1[6])) + (float)(v6 * a1[7]);
  a3[2] = (float)((float)((float)(v3 * a1[8]) + (float)(v4 * a1[9])) + (float)(v5 * a1[10])) + (float)(v6 * a1[11]);
  a3[3] = (float)((float)((float)(v3 * a1[12]) + (float)(v4 * a1[13])) + (float)(v5 * a1[14])) + (float)(v6 * a1[15]);
  return a3;
}

void sub_1B74D4F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74D5B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void HGradientColorize::HGradientColorize(HGradientColorize *this)
{
}

void sub_1B74D5C5C(_Unwind_Exception *a1)
{
  HgcGradientColorize::~HgcGradientColorize(v1);
  _Unwind_Resume(a1);
}

void HGradientColorize::~HGradientColorize(HGNode *this)
{
  HgcGradientColorize::~HgcGradientColorize(this);

  HGObject::operator delete(v1);
}

uint64_t HGradientColorize::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

unint64_t HGradientColorize::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
  {
    LODWORD(a4) = 0;
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = a4 & 0xFFFFFFFF00000000;
  }
  return v4 | a4;
}

void sub_1B74D6BA0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B74D76A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 24))(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74D7EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  HGObject::operator delete(v40);
  HGTransform::~HGTransform((HGTransform *)&a11);
  (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 24))(a38);
  }
  (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  uint64_t v43 = *(void *)(v41 - 168);
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t FracturedUtils::getModeNameStrings(FracturedUtils *this)
{
  uint64_t result = FracturedUtils::getModeNameStrings(void)::s_modeNames;
  if (!FracturedUtils::getModeNameStrings(void)::s_modeNames)
  {
    uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", @"Shatter", @"Blast", @"Crumble", @"Swipe", @"Vortex", @"Flip", @"Whirl", @"Shutters", @"Evaporate", @"Explode", @"Pulverize", @"Twirl", @"Spread", @"Rotate", @"Blocks", @"Bars", @"Cube",
               0);
    FracturedUtils::getModeNameStrings(void)::s_modeNames = result;
  }
  return result;
}

uint64_t FracturedUtils::getShapeNameStrings(FracturedUtils *this)
{
  uint64_t result = FracturedUtils::getShapeNameStrings(void)::s_shapeNames;
  if (!FracturedUtils::getShapeNameStrings(void)::s_shapeNames)
  {
    uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", @"Point", @"Triangle", @"Quad", @"Circle", @"Glass", @"Brick", @"Glass2", 0);
    FracturedUtils::getShapeNameStrings(void)::s_shapeNames = result;
  }
  return result;
}

uint64_t FracturedUtils::getAnimationTypeStrings(FracturedUtils *this)
{
  uint64_t result = FracturedUtils::getAnimationTypeStrings(void)::s_animationNames;
  if (!FracturedUtils::getAnimationTypeStrings(void)::s_animationNames)
  {
    uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", @"Explode", @"Reassemble", @"Implode", 0);
    FracturedUtils::getAnimationTypeStrings(void)::s_animationNames = result;
  }
  return result;
}

uint64_t FracturedUtils::properties(FracturedUtils *this)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v2 = [NSNumber numberWithBool:0];
  uint64_t v3 = [NSNumber numberWithBool:1];
  return objc_msgSend(v1, "dictionaryWithObjectsAndKeys:", v2, @"MayRemapTime", v3, @"SupportsHeliumRendering", objc_msgSend(NSNumber, "numberWithInt:", 1), @"PixelTransformSupport", 0);
}

uint64_t FracturedUtils::addParameters(void *a1, void *a2, int a3, uint64_t a4)
{
  double v8 = (void *)[a2 apiForProtocol:&unk_1F121A238];
  uint64_t v9 = [a2 apiForProtocol:&unk_1F121E208];
  uint64_t v10 = (void *)[MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    return 0;
  }
  if (*(unsigned char *)a4) {
    return 1;
  }
  long long v13 = v10;
  int v14 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v10, "localizedStringForKey:value:table:", @"Fractured::Density", 0, 0), 1, 0, *(float *)(a4 + 4), 1.0, 100.0, 1.0, 100.0, 1.0);
  int v15 = v14 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::DensityScaleStart", 0, 0), 13, 0, *(float *)(a4 + 32), 0.00999999978, 2.0, 0.00999999978, 2.0, 0.00999999978);
  int v16 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::DensityScaleEnd", 0, 0), 14, 0, *(float *)(a4 + 36), 0.00999999978, 2.0, 0.00999999978, 2.0, 0.00999999978);
  int v17 = v15 & v16 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::Extrude", 0, 0), 8, 0, *(float *)(a4 + 20), 0.0, 3.0, 0.0, 3.0, 0.1);
  long long v18 = (FracturedUtils *)[v13 localizedStringForKey:@"Fractured::Mode" value:0 table:0];
  LODWORD(v18) = [v8 addPopupMenuWithName:v18 parmId:2 defaultValue:*(unsigned int *)(a4 + 12) menuEntries:FracturedUtils::getModeNameStrings(v18) parmFlags:0];
  unsigned long long v19 = (FracturedUtils *)[v13 localizedStringForKey:@"Fractured::AnimationType" value:0 table:0];
  LODWORD(v18) = v18 & [v8 addPopupMenuWithName:v19 parmId:22 defaultValue:*(unsigned int *)(a4 + 128) menuEntries:FracturedUtils::getAnimationTypeStrings(v19) parmFlags:0];
  LODWORD(v19) = v17 & v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::Randomize", 0, 0), 3, *(unsigned __int8 *)(a4 + 8), 0);
  LODWORD(v18) = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::FragmentAspect", 0, 0), 28, 0, *(float *)(a4 + 148), 0.5, 2.0, 0.5, 2.0, 0.01);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::Delay", 0, 0), 21, 0, *(float *)(a4 + 124), 0.0, 1.0, 0.0, 1.0, 0.01);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::Lighting", 0, 0), 5, *(unsigned __int8 *)(a4 + 17), 0);
  LODWORD(v19) = v19 & v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::Fog", 0, 0), 6, *(unsigned __int8 *)(a4 + 18), 0);
  LODWORD(v18) = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::FogIntensity", 0, 0), 18, 0, *(float *)(a4 + 112), 0.0, 2.0, 0.0, 2.0, 0.01);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::Specular", 0, 0), 16, *(unsigned __int8 *)(a4 + 72), 0);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::SpecularColor", 0, 0), 17, 0, *(double *)(a4 + 80), *(double *)(a4 + 88), *(double *)(a4 + 96));
  LODWORD(v18) = v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::Transparency", 0, 0), 7, *(unsigned __int8 *)(a4 + 19), 0);
  int v20 = v19 & v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::DoubleSided", 0, 0), 4, *(unsigned __int8 *)(a4 + 16), 0);
  LODWORD(v18) = objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:defaultAlpha:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::BackfaceColor", 0, 0), 15, 0, *(double *)(a4 + 40), *(double *)(a4 + 48), *(double *)(a4 + 56), *(double *)(a4 + 64));
  long long v21 = (FracturedUtils *)[v13 localizedStringForKey:@"Fractured::FaceShape" value:0 table:0];
  LODWORD(v18) = v18 & [v8 addPopupMenuWithName:v21 parmId:12 defaultValue:*(unsigned int *)(a4 + 28) menuEntries:FracturedUtils::getShapeNameStrings(v21) parmFlags:0];
  int v22 = v20 & v18 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::ReassemblePoint", 0, 0), 10, 0, *(float *)(a4 + 24), 0.0, 1.0, 0.0, 1.0, 0.01);
  if (a3) {
    int v23 = objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::ReassembleNegateClipBTime", 0, 0), 27, *(unsigned __int8 *)(a4 + 144), 0);
  }
  else {
    int v23 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::OutputExpansion", 0, 0), 19, 0, *(float *)(a4 + 116), 1.0, 10.0, 1.0, 3.0, 0.1);
  }
  int v24 = v23 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::DissolveInOut", 0, 0), 23, *(unsigned __int8 *)(a4 + 132), 0);
  uint64_t v12 = v22 & v24 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", @"Fractured::DissolvePoint", 0, 0), 24, 0, *(float *)(a4 + 136), 0.0, 1.0, 0.0, 1.0, 0.01);
  if (a3)
  {
    LODWORD(v25) = *(_DWORD *)(a4 + 140);
    [a1 addEaseParametersWithDefault:0 andFlags:v25];
  }
  return v12;
}

HGFractured::Effect **FracturedUtils::_findReadyEffect(uint64_t a1)
{
  uint64_t v1 = *(HGFractured::Effect ****)a1;
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    return 0;
  }
  while (HGFractured::Effect::GetState(**v1))
  {
    if (++v1 == *(HGFractured::Effect ****)(a1 + 8)) {
      return 0;
    }
  }
  return *v1;
}

uint64_t FracturedUtils::_erasePurgableItemsInPool(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((unint64_t)(v1 - *(void *)result) >= 0x29)
  {
    uint64_t v2 = (void *)result;
    do
    {
      uint64_t v3 = *(void *)(v1 - 8);
      [*(id *)(v3 + 8) timeIntervalSinceNow];
      double v5 = v4;
      uint64_t result = HGFractured::Effect::GetState(*(HGFractured::Effect **)v3);
      if (result) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = v5 < -60.0;
      }
      if (!v6) {
        break;
      }
      uint64_t v7 = v2[1];
      uint64_t result = *(void *)(v7 - 8);
      if (result)
      {
        FracturedUtils::FracturedFXPoolItem::~FracturedFXPoolItem((id *)result);
        uint64_t result = MEMORY[0x1BA9BFBA0]();
        uint64_t v7 = v2[1];
      }
      uint64_t v1 = v7 - 8;
      v2[1] = v1;
    }
    while ((unint64_t)(v1 - *v2) > 0x28);
  }
  return result;
}

uint64_t FracturedUtils::getReadyEffect(void *a1, void *a2)
{
  [a2 lock];
  ReadyEffect = (uint64_t *)FracturedUtils::_findReadyEffect((uint64_t)a1);
  if (!ReadyEffect) {
    operator new();
  }
  HGFractured::Effect::SetState(*ReadyEffect, 1);
  FracturedUtils::FracturedFXPoolItem::UpdateLastUsedTime((FracturedUtils::FracturedFXPoolItem *)ReadyEffect);
  if (a1[1] - *a1 >= 0x49uLL) {
    FracturedUtils::_erasePurgableItemsInPool((uint64_t)a1);
  }
  [a2 unlock];
  return *ReadyEffect;
}

void sub_1B74D8D94(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  MEMORY[0x1BA9BFBA0](v1, 0xA0C40AFF93C70);
  _Unwind_Resume(a1);
}

uint64_t FracturedUtils::renderOutput(void *a1, void *a2, HGFractured::Effect *a3, uint64_t a4, void *a5, void *a6, void *a7, double *a8, float a9, char a10)
{
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  double v16 = *a8;
  int v17 = (void *)[a2 apiForProtocol:&unk_1F121A608];
  double v255 = 0.0;
  double v256 = 0.0;
  double v254 = 0.0;
  double v253 = 0.0;
  double v252 = 0.0;
  double v251 = 0.0;
  double v250 = 0.0;
  double v249 = 0.0;
  *(void *)v248 = 0;
  int v247 = 0;
  __int16 v246 = 0;
  __int16 v245 = 0;
  double v244 = 0.0;
  if (*(unsigned char *)a4)
  {
    double v18 = *(float *)(a4 + 4);
    float v19 = *(float *)(a4 + 36);
    double v255 = *(float *)(a4 + 32);
    double v256 = v18;
    double v254 = v19;
    float v20 = *(float *)(a4 + 24);
    double v21 = *(float *)(a4 + 20);
    double v253 = v21;
    v248[1] = *(_DWORD *)(a4 + 12);
    int v247 = *(_DWORD *)(a4 + 128);
    double v22 = 1.0;
    if (*(unsigned char *)(a4 + 8)) {
      double v23 = 1.0;
    }
    else {
      double v23 = 0.0;
    }
    double v161 = v23;
    double v249 = *(float *)(a4 + 148);
    double v251 = *(float *)(a4 + 124);
    if (*(unsigned char *)(a4 + 16)) {
      double v24 = 1.0;
    }
    else {
      double v24 = 0.0;
    }
    if (*(unsigned char *)(a4 + 17)) {
      double v25 = 1.0;
    }
    else {
      double v25 = 0.0;
    }
    if (!*(unsigned char *)(a4 + 18)) {
      double v22 = 0.0;
    }
    double v158 = v22;
    int v26 = *(unsigned __int8 *)(a4 + 72);
    LOBYTE(v246) = *(unsigned char *)(a4 + 72);
    long long v27 = *(_OWORD *)(a4 + 96);
    long long v257 = *(_OWORD *)(a4 + 80);
    long long v258 = v27;
    double v244 = *(float *)(a4 + 112);
    HIBYTE(v246) = *(unsigned char *)(a4 + 19);
    v248[0] = *(_DWORD *)(a4 + 28);
    double v252 = v20;
    LOBYTE(v245) = *(unsigned char *)(a4 + 144);
    long long v28 = *(_OWORD *)(a4 + 56);
    long long v259 = *(_OWORD *)(a4 + 40);
    *(_OWORD *)v260 = v28;
    HIBYTE(v245) = *(unsigned char *)(a4 + 132);
    double v250 = *(float *)(a4 + 136);
  }
  else
  {
    long long v29 = v17;
    [v17 getFloatValue:&v256 fromParm:1 atFxTime:*(void *)&v16];
    [v29 getFloatValue:&v255 fromParm:13 atFxTime:*(void *)&v16];
    [v29 getFloatValue:&v254 fromParm:14 atFxTime:*(void *)&v16];
    [v29 getFloatValue:&v253 fromParm:8 atFxTime:*(void *)&v16];
    [v29 getIntValue:&v248[1] fromParm:2 atFxTime:*(void *)&v16];
    [v29 getIntValue:&v247 fromParm:22 atFxTime:*(void *)&v16];
    LOBYTE(v236[0]) = 0;
    [v29 getBoolValue:v236 fromParm:3 atFxTime:*(void *)&v16];
    double v30 = 1.0;
    if (!LOBYTE(v236[0])) {
      double v30 = 0.0;
    }
    double v161 = v30;
    [v29 getFloatValue:&v249 fromParm:28 atFxTime:*(void *)&v16];
    [v29 getFloatValue:&v251 fromParm:21 atFxTime:*(void *)&v16];
    [v29 getBoolValue:v236 fromParm:4 atFxTime:*(void *)&v16];
    double v25 = 1.0;
    if (LOBYTE(v236[0])) {
      double v24 = 1.0;
    }
    else {
      double v24 = 0.0;
    }
    [v29 getBoolValue:v236 fromParm:5 atFxTime:*(void *)&v16];
    if (!LOBYTE(v236[0])) {
      double v25 = 0.0;
    }
    [v29 getBoolValue:v236 fromParm:6 atFxTime:*(void *)&v16];
    double v31 = 1.0;
    if (!LOBYTE(v236[0])) {
      double v31 = 0.0;
    }
    double v158 = v31;
    [v29 getBoolValue:&v246 fromParm:16 atFxTime:*(void *)&v16];
    [v29 getRedValue:&v257 greenValue:(char *)&v257 + 8 blueValue:&v258 fromParm:17 atFxTime:*(void *)&v16];
    [v29 getFloatValue:&v244 fromParm:18 atFxTime:*(void *)&v16];
    [v29 getBoolValue:(char *)&v246 + 1 fromParm:7 atFxTime:*(void *)&v16];
    [v29 getIntValue:v248 fromParm:12 atFxTime:*(void *)&v16];
    [v29 getFloatValue:&v252 fromParm:10 atFxTime:*(void *)&v16];
    [v29 getBoolValue:&v245 fromParm:27 atFxTime:*(void *)&v16];
    [v29 getRedValue:&v259 greenValue:(char *)&v259 + 8 blueValue:v260 alphaValue:&v260[1] fromParm:15 atFxTime:*(void *)&v16];
    [v29 getBoolValue:(char *)&v245 + 1 fromParm:23 atFxTime:*(void *)&v16];
    [v29 getFloatValue:&v250 fromParm:24 atFxTime:*(void *)&v16];
    double v21 = v253;
    int v26 = v246;
  }
  double v253 = v21 / 100.0;
  if (v26)
  {
    double v32 = 128.0;
  }
  else
  {
    long long v257 = 0uLL;
    double v32 = 1.0;
    *(void *)&long long v258 = 0;
  }
  *((double *)&v258 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v32;
  if (a10) {
    double v252 = v252 * 0.5 + 0.5;
  }
  BOOL v33 = 0;
  BOOL v34 = v247 == 2;
  double v168 = 0.0;
  if ((v248[1] - 5) >= 2 && v248[1] != 11)
  {
    BOOL v33 = v248[1] == 7 || v247 == 1;
    double v168 = v24;
  }
  int v159 = v247;
  BOOL v163 = v33;
  [a5 bounds];
  double v169 = v35;
  double v37 = v36;
  v243[0] = v38;
  v243[1] = v39;
  v243[2] = v35;
  v243[3] = v36;
  if (a1)
  {
    [a1 getPixelTransformForImage:a5];
    [a1 getInversePixelTransformForImage:a5];
  }
  else
  {
    long long v242 = 0u;
    long long v241 = 0u;
    long long v240 = 0u;
    long long v239 = 0u;
    long long v238 = 0u;
    long long v237 = 0u;
    memset(v236, 0, sizeof(v236));
    memset(v235, 0, sizeof(v235));
  }
  v233[1] = 0;
  v233[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v234 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v236, v243, (uint64_t)v233);
  long long v45 = v234;
  double v166 = *((double *)&v237 + 1);
  if ((a10 & 1) == 0)
  {
    CGRect v46 = (void *)[a2 apiForProtocol:&unk_1F121DE28];
    [v46 durationFxTimeForEffect:v231];
    [v46 frameDuration:v230];
    double v47 = *a8 - *(float *)&FracturedUtils::_frameTimeOffset;
    if (v47 < 0.0) {
      double v47 = 0.0;
    }
    double v48 = *(double *)v230 * v47 / *(double *)v231;
    if (v48 > 1.0) {
      double v48 = 1.0;
    }
    a9 = fmax(v48, 0.0);
    *(float *)&int v49 = *a8;
    FracturedUtils::_lastFrameTime = v49;
  }
  CGRect v50 = (HGFractured *)HGObject::operator new(0x1C0uLL);
  HGFractured::HGFractured(v50);
  uint64_t v51 = a6;
  if (a10)
  {
    *(void *)&v231[0] = 0;
    [a1 convertTimeFraction:v231 toLocal:0 andDerivative:*(void *)&v16 atTime:a9];
    a9 = *(double *)v231;
  }
  if (a6)
  {
    [a6 heliumRef];
    if (a1)
    {
LABEL_48:
      [a1 getPixelTransformForImage:a6];
      [a1 getInversePixelTransformForImage:a6];
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v232 = 0;
    if (a1) {
      goto LABEL_48;
    }
  }
  memset(v231, 0, sizeof(v231));
  memset(v230, 0, sizeof(v230));
LABEL_51:
  [a6 bounds];
  double v54 = v53;
  double v55 = v52;
  double v56 = v53 * 0.5;
  double v57 = 1.0;
  uint64_t v219 = 0;
  if (v166 < 0.0) {
    double v57 = -1.0;
  }
  long long v218 = 0x3FF0000000000000uLL;
  double v220 = v56;
  double v167 = v57;
  long long v221 = xmmword_1B7E733E0;
  uint64_t v222 = 0;
  double v223 = v57 * (v52 * 0.5);
  uint64_t v225 = 0;
  uint64_t v224 = 0;
  long long v227 = 0u;
  long long v228 = 0u;
  uint64_t v226 = 0x3FF0000000000000;
  uint64_t v229 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)v231, &v218, (uint64_t)v211);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v211, v230, (uint64_t)&v212);
  FxSupport::makeHeliumXForm((double *)&v212, &v232, 1, 0, &v198);
  uint64_t v58 = v198;
  if (v232 == (void)v198)
  {
    if (v232) {
      (*(void (**)(void))(*(void *)v232 + 24))();
    }
  }
  else
  {
    if (v232)
    {
      (*(void (**)(void))(*(void *)v232 + 24))();
      uint64_t v58 = v198;
    }
    uint64_t v232 = v58;
  }
  double v59 = a9;
  uint64_t v210 = 0;
  double v160 = v25;
  if (!a10)
  {
    (*(void (**)(HGFractured *, void, uint64_t))(*(void *)v50 + 120))(v50, 0, v232);
    if (v168 != 0.0) {
      (*(void (**)(HGFractured *, uint64_t, uint64_t, double))(*(void *)v50 + 120))(v50, 1, v232, v168);
    }
    if (v163)
    {
      int v61 = 0;
      float v62 = v252 * 0.5;
      double v63 = v252 - v252 * v59;
      if (v252 * v59 < v62) {
        double v63 = v252 * v59;
      }
      double v59 = v63 + v63;
    }
    else
    {
      int v61 = 0;
      if (v159 == 2) {
        double v59 = 1.0 - v59;
      }
    }
    goto LABEL_128;
  }
  if (a7)
  {
    [a7 heliumRef];
    uint64_t v60 = v212;
    if (v210 == (void)v212)
    {
      if ((void)v212) {
        (*(void (**)(void))(*(void *)v212 + 24))();
      }
    }
    else
    {
      if (v210)
      {
        (*(void (**)(uint64_t))(*(void *)v210 + 24))(v210);
        uint64_t v60 = v212;
      }
      uint64_t v210 = v60;
    }
  }
  if (a1)
  {
    [a1 getPixelTransformForImage:a7];
    [a1 getInversePixelTransformForImage:a7];
  }
  else
  {
    long long v216 = 0u;
    memset(v217, 0, sizeof(v217));
    long long v214 = 0u;
    long long v215 = 0u;
    long long v212 = 0u;
    long long v213 = 0u;
    memset(v211, 0, sizeof(v211));
  }
  [a7 bounds];
  double v65 = v64;
  double v67 = v66;
  uint64_t v199 = 0;
  long long v198 = 0x3FF0000000000000uLL;
  double v200 = v64 * 0.5;
  long long v201 = xmmword_1B7E733E0;
  uint64_t v202 = 0;
  double v203 = v167 * (v66 * 0.5);
  uint64_t v205 = 0;
  uint64_t v204 = 0;
  long long v207 = 0u;
  long long v208 = 0u;
  uint64_t v206 = 0x3FF0000000000000;
  uint64_t v209 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v212, &v198, (uint64_t)&v174);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v174, v211, (uint64_t)&v186);
  FxSupport::makeHeliumXForm((double *)&v186, &v210, 1, 0, v172);
  uint64_t v68 = v172[0];
  if (v210 == v172[0])
  {
    if (v210) {
      (*(void (**)(void))(*(void *)v210 + 24))();
    }
  }
  else
  {
    if (v210)
    {
      (*(void (**)(void))(*(void *)v210 + 24))();
      uint64_t v68 = v172[0];
    }
    uint64_t v210 = v68;
  }
  uint64_t v187 = 0;
  long long v186 = 0x3FF0000000000000uLL;
  double v188 = (v169 - v54) * 0.5;
  long long v189 = xmmword_1B7E733E0;
  uint64_t v190 = 0;
  double v191 = v167 * ((v37 - v55) * 0.5);
  uint64_t v193 = 0;
  uint64_t v192 = 0;
  long long v195 = 0u;
  long long v196 = 0u;
  uint64_t v194 = 0x3FF0000000000000;
  uint64_t v197 = 0x3FF0000000000000;
  uint64_t v175 = 0;
  long long v174 = 0x3FF0000000000000uLL;
  double v176 = (v169 - v65) * 0.5;
  long long v177 = xmmword_1B7E733E0;
  uint64_t v178 = 0;
  double v179 = v167 * ((v37 - v67) * 0.5);
  uint64_t v180 = 0;
  uint64_t v181 = 0;
  long long v184 = 0u;
  long long v183 = 0u;
  uint64_t v182 = 0x3FF0000000000000;
  uint64_t v185 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)v231, &v186, (uint64_t)v171);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v171, v230, (uint64_t)v172);
  FxSupport::makeHeliumXForm((double *)v172, &v232, 1, 0, &v173);
  uint64_t v69 = v173;
  if (v232 == v173)
  {
    if (v232) {
      (*(void (**)(void))(*(void *)v232 + 24))();
    }
  }
  else
  {
    if (v232)
    {
      (*(void (**)(void))(*(void *)v232 + 24))();
      uint64_t v69 = v173;
    }
    uint64_t v232 = v69;
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v212, &v174, (uint64_t)v171);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v171, v211, (uint64_t)v172);
  FxSupport::makeHeliumXForm((double *)v172, &v210, 1, 0, &v173);
  uint64_t v70 = v173;
  if (v210 == v173)
  {
    if (v210) {
      (*(void (**)(void))(*(void *)v210 + 24))();
    }
  }
  else
  {
    if (v210)
    {
      (*(void (**)(void))(*(void *)v210 + 24))();
      uint64_t v70 = v173;
    }
    uint64_t v210 = v70;
  }
  if ([a1 isFrontGap])
  {
    double v71 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v71);
  }
  if ([a1 isEndGap])
  {
    double v72 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v72);
  }
  if (!v163)
  {
    uint64_t v78 = v232;
    if (!v34) {
      goto LABEL_122;
    }
    double v59 = 1.0 - v59;
    uint64_t v232 = 0;
    if (v210)
    {
      uint64_t v232 = v210;
      uint64_t v210 = 0;
      if (!v78) {
        goto LABEL_122;
      }
    }
    else if (!v78)
    {
      goto LABEL_122;
    }
    uint64_t v210 = v78;
LABEL_122:
    (*(void (**)(HGFractured *, void))(*(void *)v50 + 120))(v50, 0);
    v79.n128_f64[0] = v168;
    if (v168 != 0.0) {
      (*(void (**)(HGFractured *, uint64_t, uint64_t, double))(*(void *)v50 + 120))(v50, 1, v232, v168);
    }
    if ((v248[1] - 5) > 8) {
      uint64_t v80 = 2;
    }
    else {
      uint64_t v80 = dword_1B7E74680[v248[1] - 5];
    }
    (*(void (**)(HGFractured *, uint64_t, uint64_t, __n128))(*(void *)v50 + 120))(v50, v80, v210, v79);
    int v61 = 0;
LABEL_128:
    double v77 = 0.0;
    goto LABEL_129;
  }
  double v73 = 1.0;
  double v74 = 1.0 - v252;
  if (v252 <= v59) {
    double v75 = 1.0;
  }
  else {
    double v75 = v59 / v252;
  }
  if (v74 < v59) {
    double v73 = 1.0 - (v59 - v74) / (1.0 - v74);
  }
  if (v248[1] == 7 || v248[1] == 16 || (_BYTE)v245) {
    double v73 = -v73;
  }
  (*(void (**)(HGFractured *, void, uint64_t))(*(void *)v50 + 120))(v50, 0, v232);
  double v76 = pow(fabs(v73), 1.04999995);
  if (v73 >= 0.0) {
    double v77 = v76;
  }
  else {
    double v77 = -v76;
  }
  double v59 = pow(v75, 0.949999988);
  int v61 = 1;
  (*(void (**)(HGFractured *, uint64_t, uint64_t))(*(void *)v50 + 120))(v50, 1, v210);
LABEL_129:
  float v81 = *(double *)&v45;
  double v165 = v37;
  if (v81 == 0.0 || (float v82 = *((double *)&v45 + 1), v82 == 0.0))
  {
    double v85 = 0.0;
    int v86 = v248[1];
    goto LABEL_146;
  }
  if (v248[0] == 4)
  {
    float v83 = 50.0;
    float v84 = 100.0;
  }
  else
  {
    if (v248[0] != 6)
    {
      float v141 = v256 / 100.0 * 0.6;
      float v142 = v54 * (float)((float)(v141 * v141) * 0.5) + 2.0;
      float v143 = v249 * (v55 * v142 / v54);
      float v88 = 1.0;
      float v144 = v55;
      float v89 = fminf(fmaxf(v143, 1.0), v144);
      if (v248[1] != 13)
      {
        if (v248[1] == 16 || (v145 = v54, float v88 = fminf(fmaxf(v142, 1.0), v145), v248[1] == 15)) {
          float v89 = 1.0;
        }
      }
      goto LABEL_137;
    }
    float v83 = 40.0;
    float v84 = 50.0;
  }
  float v87 = v256 / 100.0;
  float v88 = (float)(v84 * v87) + 1.0;
  float v89 = v249 * (float)(v83 * v87) + 1.0;
LABEL_137:
  HGFractured::Effect::SetOriginPoint((uint64_t)a3, -*(float *)(a4 + 152), -*(float *)(a4 + 156));
  HGFractured::Effect::SetImpulse((uint64_t)a3, *(float *)(a4 + 160), *(float *)(a4 + 164));
  float v90 = *(double *)&v45;
  float v91 = *((float *)&v45 + 2);
  if ((a10 & 1) == 0)
  {
    float v90 = (float)(unint64_t)[v51 width];
    float v91 = (float)(unint64_t)[v51 height];
  }
  uint64_t v92 = HGRectMake4i(0, 0, (int)v81, (int)v82);
  uint64_t v94 = v93;
  *(void *)&v262.int var0 = v92;
  *(void *)&v262.int var2 = v94;
  HGFractured::Effect::SetRect((uint64_t)a3, v262);
  uint64_t v95 = HGRectMake4i(0, 0, (int)v90, (int)v91);
  uint64_t v97 = v96;
  *(void *)&v263.int var0 = v95;
  *(void *)&v263.int var2 = v97;
  HGFractured::Effect::SetImageRect((uint64_t)a3, v263);
  HGFractured::Effect::SetSubdivide(a3, v88, v89);
  int v86 = v248[1];
  char v98 = (v248[1] != 11) & ~vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v248[1]), (int32x4_t)xmmword_1B7E74670)));
  if ((v248[1] & 0xFFFFFFF7) == 4) {
    char v98 = 0;
  }
  if (v158 == 0.0) {
    char v98 = 0;
  }
  if ((v98 & 1) != 0 || (double v85 = 0.0, v248[1] == 14)) {
    double v85 = v244 * (float)(fmaxf(v88, v89) * 5.0);
  }
LABEL_146:
  unsigned int v99 = v86 - 5;
  double v100 = 0.0;
  if (((0x47u >> v99) & 1) == 0) {
    double v100 = v161;
  }
  if (v99 >= 7) {
    double v101 = v161;
  }
  else {
    double v101 = v100;
  }
  float v102 = v251;
  HGFractured::Effect::SetDelay((uint64_t)a3, v102);
  HGFractured::Effect::SetMode((uint64_t)a3, v248[1]);
  float v103 = v253;
  HGFractured::Effect::SetExtrude((uint64_t)a3, v103);
  HGFractured::Effect::SetDual((uint64_t)a3, v61, v168 != 0.0);
  HGFractured::Effect::SetLeftHand((uint64_t)a3, v166 < 0.0);
  float v104 = v255;
  float v105 = v254;
  HGFractured::Effect::SetScale((uint64_t)a3, v104, v105);
  float v106 = v101;
  if (v248[0] > 6u)
  {
    HGFractured::Effect::SetShape((uint64_t)a3, 4, v106);
    NSLog(&cfstr_WarningFractur.isa);
  }
  else
  {
    HGFractured::Effect::SetShape((uint64_t)a3, dword_1B7E746A4[v248[0]], v106);
  }
  double v107 = fabs(v59);
  if (v107 == 1.0) {
    float v108 = 0.0;
  }
  else {
    float v108 = 1.0;
  }
  double v109 = fabs(v77);
  if (v109 == 1.0) {
    float v110 = 0.0;
  }
  else {
    float v110 = 1.0;
  }
  if (HIBYTE(v246))
  {
    double v111 = v160;
    if (v248[1] <= 0x10u)
    {
      if (((1 << SLOBYTE(v248[1])) & 0x1F71F) != 0)
      {
        float v112 = v107;
        float v113 = fminf(fmaxf(v112, 0.0), 1.0);
        float v108 = 1.0 - (float)((float)(v113 * v113) * (float)(3.0 - (float)(v113 + v113)));
        float v114 = v109;
        float v115 = fminf(fmaxf(v114, 0.0), 1.0);
        float v110 = 1.0 - (float)((float)(v115 * v115) * (float)(3.0 - (float)(v115 + v115)));
      }
      else if (((1 << SLOBYTE(v248[1])) & 0x840) != 0)
      {
        float v146 = v107;
        float v147 = v146 + -0.5;
        if (v59 >= 0.5) {
          float v148 = v147 + v147;
        }
        else {
          float v148 = v147 * -2.0;
        }
        float v149 = fminf(fmaxf(v148, 0.0), 1.0);
        float v108 = (float)((float)((float)(v149 * v149) * (float)(3.0 - (float)(v149 + v149))) * 0.5) + 0.5;
        float v150 = v109;
        float v151 = v150 + -0.5;
        if (v77 >= 0.5) {
          float v152 = v151 + v151;
        }
        else {
          float v152 = v151 * -2.0;
        }
        float v153 = fminf(fmaxf(v152, 0.0), 1.0);
        float v110 = (float)((float)((float)(v153 * v153) * (float)(3.0 - (float)(v153 + v153))) * 0.5) + 0.5;
      }
    }
  }
  else
  {
    double v111 = v160;
  }
  (*(void (**)(HGFractured *, uint64_t))(*(void *)v50 + 576))(v50, 8);
  HGFractured::SetEffect((uint64_t)v50, (uint64_t)a3);
  HGFractured::SetLighting((uint64_t)v50, v111 != 0.0);
  float v116 = v59;
  float v117 = v77;
  (*(void (**)(HGFractured *, void, float, float, float, float))(*(void *)v50 + 96))(v50, 0, v116, v108, v117, v110);
  float v118 = *(double *)&v259;
  float v119 = *((double *)&v259 + 1);
  float v120 = v260[0];
  float v121 = v260[1];
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(void *)v50 + 96))(v50, 1, v118, v119, v120, v121);
  (*(void (**)(HGFractured *, uint64_t, double, double, double, double))(*(void *)v50 + 96))(v50, 2, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(HGFractured *, uint64_t, double, double, float, float))(*(void *)v50 + 96))(v50, 4, 0.0, 0.0, 1.0, 1.0);
  float v122 = *(double *)&v257;
  float v123 = *((double *)&v257 + 1);
  float v124 = *(double *)&v258;
  float v125 = *((double *)&v258 + 1);
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(void *)v50 + 96))(v50, 5, v122, v123, v124, v125);
  float v126 = v85;
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(void *)v50 + 96))(v50, 6, -1.0, 1.0, 1.0, v126);
  *(void *)&long long v186 = v50;
  (*(void (**)(HGFractured *))(*(void *)v50 + 16))(v50);
  if (HIBYTE(v245))
  {
    double v127 = v250;
    CGRect v128 = (void *)[a2 apiForProtocol:&unk_1F1219DF0];
    if (v128)
    {
      [v128 blendingGamma];
      float v130 = v129;
    }
    else
    {
      float v130 = 1.0;
    }
    float v131 = v127;
    double v132 = v131;
    if (v59 >= v131)
    {
      if (a10)
      {
        if (v61) {
          double v134 = v59;
        }
        else {
          double v134 = v77;
        }
        uint64_t v135 = v210;
        if (v210) {
          (*(void (**)(uint64_t))(*(void *)v210 + 16))(v210);
        }
        float v136 = 1.0 - v127;
        float v137 = v134;
        if (v137 > v136)
        {
          float v138 = (float)(1.0 - v137) / (float)(1.0 - v136);
          if (v61) {
            float v139 = 1.0 - v138;
          }
          else {
            float v139 = v138;
          }
          float64x2_t v140 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
          HGHWBlendFlipped::HGHWBlendFlipped(v140);
          (*(void (**)(HGHWBlendFlipped *, void, uint64_t))(*(void *)v140 + 120))(v140, 0, v135);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, void))(*(void *)v140 + 120))(v140, 1, v186);
          (*(void (**)(HGHWBlendFlipped *, void, float, double, double, double))(*(void *)v140 + 96))(v140, 0, 8.0, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, double, double, double))(*(void *)v140 + 96))(v140, 1, v139, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, double, double, double))(*(void *)v140 + 96))(v140, 5, v130, 0.0, 0.0, 0.0);
          if ((HGHWBlendFlipped *)v186 != v140)
          {
            if ((void)v186) {
              (*(void (**)(void))(*(void *)v186 + 24))();
            }
            *(void *)&long long v186 = v140;
            (*(void (**)(HGHWBlendFlipped *))(*(void *)v140 + 16))(v140);
          }
          (*(void (**)(HGHWBlendFlipped *))(*(void *)v140 + 24))(v140);
        }
        if (v135) {
          (*(void (**)(uint64_t))(*(void *)v135 + 24))(v135);
        }
      }
    }
    else
    {
      uint64_t v133 = v232;
      if (v232) {
        (*(void (**)(uint64_t))(*(void *)v232 + 16))(v232);
      }
      if ((a10 & 1) == 0)
      {
        *(void *)&long long v213 = 0;
        long long v212 = 0x3FF0000000000000uLL;
        *((double *)&v213 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v169 * 0.5;
        long long v214 = xmmword_1B7E733E0;
        *(void *)&long long v215 = 0;
        *((double *)&v215 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v165 * 0.5 * v167;
        long long v216 = 0uLL;
        memset((char *)v217 + 8, 0, 32);
        *(void *)&v217[0] = 0x3FF0000000000000;
        *((void *)&v217[2] + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3FF0000000000000;
        PCMatrix44Tmpl<double>::operator*((uint64_t)v236, &v212, (uint64_t)&v198);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v198, v235, (uint64_t)v211);
        if (v51) {
          [v51 heliumRef];
        }
        else {
          v172[0] = 0;
        }
        FxSupport::makeHeliumXForm((double *)v211, v172, 1, 0, &v174);
        if (v133 == (void)v174)
        {
          if (v133) {
            (*(void (**)(uint64_t))(*(void *)v133 + 24))(v133);
          }
        }
        else
        {
          if (v133) {
            (*(void (**)(uint64_t))(*(void *)v133 + 24))(v133);
          }
          uint64_t v133 = v174;
          *(void *)&long long v174 = 0;
        }
        if (v172[0]) {
          (*(void (**)(uint64_t))(*(void *)v172[0] + 24))(v172[0]);
        }
      }
      int64x2_t v154 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
      HGHWBlendFlipped::HGHWBlendFlipped(v154);
      (*(void (**)(HGHWBlendFlipped *, void, uint64_t))(*(void *)v154 + 120))(v154, 0, v133);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, void))(*(void *)v154 + 120))(v154, 1, v186);
      (*(void (**)(HGHWBlendFlipped *, void, float, double, double, double))(*(void *)v154 + 96))(v154, 0, 8.0, 0.0, 0.0, 0.0);
      float v155 = 1.0 - v59 / v132;
      (*(void (**)(HGHWBlendFlipped *, uint64_t, float, double, double, double))(*(void *)v154 + 96))(v154, 1, v155, 0.0, 0.0, 0.0);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, float, double, double, double))(*(void *)v154 + 96))(v154, 5, v130, 0.0, 0.0, 0.0);
      if ((HGHWBlendFlipped *)v186 != v154)
      {
        if ((void)v186) {
          (*(void (**)(void))(*(void *)v186 + 24))();
        }
        *(void *)&long long v186 = v154;
        (*(void (**)(HGHWBlendFlipped *))(*(void *)v154 + 16))(v154);
      }
      (*(void (**)(HGHWBlendFlipped *))(*(void *)v154 + 24))(v154);
      if (v133) {
        (*(void (**)(uint64_t))(*(void *)v133 + 24))(v133);
      }
    }
  }
  *(void *)&long long v213 = 0;
  long long v212 = 0x3FF0000000000000uLL;
  *((double *)&v213 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v169 * -0.5;
  long long v214 = xmmword_1B7E733E0;
  *(void *)&long long v215 = 0;
  *((double *)&v215 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v165 * -0.5 * v167;
  long long v216 = 0uLL;
  memset((char *)v217 + 8, 0, 32);
  *(void *)&v217[0] = 0x3FF0000000000000;
  *((void *)&v217[2] + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)v236, &v212, (uint64_t)&v198);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v198, v235, (uint64_t)v211);
  FxSupport::makeHeliumXForm((double *)v211, (uint64_t *)&v186, 1, 0, &v174);
  uint64_t v156 = v174;
  if ((void)v186 == (void)v174)
  {
    if ((void)v186) {
      (*(void (**)(void))(*(void *)v186 + 24))();
    }
  }
  else
  {
    if ((void)v186)
    {
      (*(void (**)(void))(*(void *)v186 + 24))();
      uint64_t v156 = v174;
    }
    *(void *)&long long v186 = v156;
  }
  [a5 setHeliumRef:&v186];
  if ((void)v186) {
    (*(void (**)(void))(*(void *)v186 + 24))(v186);
  }
  if (v210) {
    (*(void (**)(uint64_t))(*(void *)v210 + 24))(v210);
  }
  if (v232) {
    (*(void (**)(uint64_t))(*(void *)v232 + 24))(v232);
  }
  (*(void (**)(HGFractured *))(*(void *)v50 + 24))(v50);
  return 1;
}

void sub_1B74DAE00(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t PCMatrix44Tmpl<double>::operator*@<X0>(uint64_t result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  *(void *)(a3 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
  *(void *)(a3 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
  *(void *)(a3 + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  double v4 = *((double *)a2 + 15);
  long long v5 = *(long long *)((char *)a2 + 88);
  long long v6 = *(long long *)((char *)a2 + 56);
  long long v7 = *(long long *)((char *)a2 + 24);
  long long v9 = a2[6];
  long long v8 = a2[7];
  long long v11 = a2[4];
  long long v10 = a2[5];
  long long v13 = a2[2];
  long long v12 = a2[3];
  long long v15 = *a2;
  long long v14 = a2[1];
  long long v16 = *(long long *)((char *)a2 + 104);
  long long v17 = *(long long *)((char *)a2 + 72);
  long long v18 = *(long long *)((char *)a2 + 40);
  long long v19 = *(long long *)((char *)a2 + 8);
  do
  {
    float v20 = (const double *)(result + v3);
    float64x2x4_t v22 = vld4q_f64(v20);
    v23.val[0] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v15), vmulq_n_f64(v22.val[1], *(double *)&v13)), vmulq_n_f64(v22.val[2], *(double *)&v11)), vmulq_n_f64(v22.val[3], *(double *)&v9));
    v23.val[1] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v19), vmulq_n_f64(v22.val[1], *(double *)&v18)), vmulq_n_f64(v22.val[2], *(double *)&v17)), vmulq_n_f64(v22.val[3], *(double *)&v16));
    v23.val[2] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v14), vmulq_n_f64(v22.val[1], *(double *)&v12)), vmulq_n_f64(v22.val[2], *(double *)&v10)), vmulq_n_f64(v22.val[3], *(double *)&v8));
    v23.val[3] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v7), vmulq_n_f64(v22.val[1], *(double *)&v6)), vmulq_n_f64(v22.val[2], *(double *)&v5)), vmulq_n_f64(v22.val[3], v4));
    double v21 = (double *)(a3 + v3);
    vst4q_f64(v21, v23);
    v3 += 64;
  }
  while (v3 != 128);
  return result;
}

void sub_1B74DB940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void FracturedUtils::FracturedFXPoolItem::~FracturedFXPoolItem(id *this)
{
  id v2 = *this;
  if (v2) {
    (*(void (**)(id))(*(void *)v2 + 24))(v2);
  }
}

id FracturedUtils::FracturedFXPoolItem::UpdateLastUsedTime(FracturedUtils::FracturedFXPoolItem *this)
{
  id v2 = (void *)*((void *)this + 1);
  if (v2) {

  }
  id result = (id)[MEMORY[0x1E4F1C9C8] date];
  *((void *)this + HGRenderQueue::CancelAllRenderJobs(*this, 1) = result;
  return result;
}

__n128 FracturedUtils::FracturedParams::FracturedParams(FracturedUtils::FracturedParams *this)
{
  *(unsigned char *)this = 0;
  *((_DWORD *)this + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 1114636288;
  *((unsigned char *)this + 8) = 1;
  *(void *)((char *)this + 12) = 0x101010100000001;
  *(void *)((char *)this + 2pthread_cond_init((pthread_cond_t *)this, 0) = 0x3F80000000000000;
  *((_DWORD *)this + 7) = 2;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 4) = _D0;
  *((unsigned char *)this + 72) = 1;
  *((void *)this + 14) = _D0;
  *((unsigned char *)this + 12pthread_cond_init((pthread_cond_t *)this, 0) = 1;
  *(void *)((char *)this + 124) = 0x13F800000;
  *((unsigned char *)this + 132) = 0;
  *((void *)this + 17) = 1036831949;
  *((unsigned char *)this + 144) = 0;
  *((_DWORD *)this + 37) = 1065353216;
  *((void *)this + 19) = 0;
  *((void *)this + 2pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)((char *)this + 4pthread_cond_init((pthread_cond_t *)this, 0) = _Q0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B7E73B90;
  __asm { FMOV            V0.2D, #1.0 }
  *((__n128 *)this + 5) = result;
  *((__n128 *)this + 6) = result;
  return result;
}

void sub_1B74DCBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  RandMersenne::~RandMersenne((RandMersenne *)&a9);
  long long v11 = *(void **)(v9 - 136);
  if (v11)
  {
    *(void *)(v9 - 128) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void sub_1B74DDF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B74DE474(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

double PAEKeyerDrawAlpha::renderPieEdgeSegment_GL@<D0>(void *a1@<X1>, void *a2@<X2>, float *a3@<X3>, char ***a4@<X4>, double *a5@<X8>)
{
  HGGLNode::hglBegin(*a4, 5);
  if ((int)((a1[1] - *a1) >> 3) < 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      if (!v11)
      {
        v10.n128_u64[0] = 0;
        HGGLNode::hglColor4f((HGGLNode *)*a4, v10, 0.0, 0.0, 1.0);
        HGGLNode::hglVertex2f((float32x4_t **)*a4, *a3 * 256.0, a3[1] * 256.0);
      }
      v10.n128_u64[0] = 0;
      HGGLNode::hglColor4f((HGGLNode *)*a4, v10, 0.0, 0.0, 1.0);
      HGGLNode::hglVertex2f((float32x4_t **)*a4, *(float *)(*a2 + v11) * 256.0, *(float *)(*a2 + v11 + 4) * 256.0);
      v13.n128_u32[0] = 1.0;
      HGGLNode::hglColor4f((HGGLNode *)*a4, v13, 1.0, 1.0, 1.0);
      HGGLNode::hglVertex2f((float32x4_t **)*a4, *(float *)(*a1 + v11) * 256.0, *(float *)(*a1 + v11 + 4) * 256.0);
      ++v12;
      v11 += 8;
    }
    while (v12 < (int)((a1[1] - *a1) >> 3));
  }
  v10.n128_u64[0] = 0;
  HGGLNode::hglColor4f((HGGLNode *)*a4, v10, 0.0, 0.0, 1.0);
  HGGLNode::hglVertex2f((float32x4_t **)*a4, *(float *)(*a2 + 8 * v12) * 256.0, *(float *)(*a2 + 8 * v12 + 4) * 256.0);
  HGGLNode::hglEnd((HGRasterizer **)*a4);
  double result = *(double *)(*a2 + 8 * v12);
  *a5 = result;
  return result;
}

void PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X5>, float32x2_t *a6@<X6>, float32x2_t *a7@<X7>, double *a8@<X8>, __n128 a9@<Q0>, float a10@<S1>, float32x2_t *a11, float *a12, OMPie *a13, float32x2_t **a14, int a15, char ***a16)
{
  float v20 = a9.n128_f32[0];
  float64x2x4_t v22 = 0;
  std::string __p = 0;
  uint64_t v94 = 0;
  a9.n128_u64[0] = 0;
  v95[0] = 0;
  do
  {
    __n128 v86 = a9;
    if (a15 == 2)
    {
      float32x2_t v23 = vadd_f32(*a2, vmul_n_f32(vsub_f32(*a4, *a2), a9.n128_f32[0]));
      if ((unint64_t)v22 >= v95[0])
      {
        double v24 = (float32x2_t *)__p;
        uint64_t v38 = ((char *)v22 - (unsigned char *)__p) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v95[0] - (void)__p;
        if ((uint64_t)(v95[0] - (void)__p) >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v39;
        }
        if (v28)
        {
          long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v28);
          double v24 = (float32x2_t *)__p;
          float64x2x4_t v22 = v94;
        }
        else
        {
          long long v29 = 0;
        }
        CGRect v44 = &v29[8 * v38];
        *(float32x2_t *)CGRect v44 = v23;
        double v37 = (float32x2_t *)(v44 + 8);
        while (v22 != v24)
        {
          __int32 v45 = v22[-1].i32[0];
          --v22;
          *((_DWORD *)v44 - 2) = v45;
          v44 -= 8;
          *((_DWORD *)v44 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v22->i32[1];
        }
        goto LABEL_51;
      }
LABEL_24:
      *float64x2x4_t v22 = v23;
      double v37 = v22 + 1;
LABEL_53:
      uint64_t v94 = v37;
      float64x2x4_t v22 = v37;
      a9 = v86;
      goto LABEL_65;
    }
    if (a15 != 1)
    {
      if (!a15)
      {
        float32x2_t v23 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a1, *a3), a9.n128_f32[0]));
        if ((unint64_t)v22 >= v95[0])
        {
          double v24 = (float32x2_t *)__p;
          uint64_t v25 = ((char *)v22 - (unsigned char *)__p) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v95[0] - (void)__p;
          if ((uint64_t)(v95[0] - (void)__p) >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v28);
            double v24 = (float32x2_t *)__p;
            float64x2x4_t v22 = v94;
          }
          else
          {
            long long v29 = 0;
          }
          CGRect v44 = &v29[8 * v25];
          *(float32x2_t *)CGRect v44 = v23;
          double v37 = (float32x2_t *)(v44 + 8);
          while (v22 != v24)
          {
            __int32 v46 = v22[-1].i32[0];
            --v22;
            *((_DWORD *)v44 - 2) = v46;
            v44 -= 8;
            *((_DWORD *)v44 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v22->i32[1];
          }
LABEL_51:
          std::string __p = v44;
          uint64_t v94 = v37;
          v95[0] = &v29[8 * v28];
          if (v24) {
            operator delete(v24);
          }
          goto LABEL_53;
        }
        goto LABEL_24;
      }
      OMPie::getArcIn(a13, 1.0 - a9.n128_f32[0], (float *)&v90);
      double v30 = v94;
      if ((unint64_t)v94 < v95[0]) {
        goto LABEL_26;
      }
      double v31 = (float32x2_t *)__p;
      uint64_t v41 = ((char *)v94 - (unsigned char *)__p) >> 3;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = v95[0] - (void)__p;
      if ((uint64_t)(v95[0] - (void)__p) >> 2 > v42) {
        unint64_t v42 = v43 >> 2;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v42;
      }
      if (v35)
      {
        double v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v35);
        double v31 = (float32x2_t *)__p;
        double v30 = v94;
      }
      else
      {
        double v36 = 0;
      }
      double v47 = (void **)&v36[8 * v41];
      void *v47 = v90;
      double v48 = v47;
      while (v30 != v31)
      {
        __int32 v50 = v30[-1].i32[0];
        --v30;
        *((_DWORD *)v48-- - 2) = v50;
        *((_DWORD *)v48 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v30->i32[1];
      }
LABEL_62:
      float64x2x4_t v22 = (float32x2_t *)(v47 + 1);
      std::string __p = v48;
      uint64_t v94 = (float32x2_t *)(v47 + 1);
      v95[0] = &v36[8 * v35];
      if (v31) {
        operator delete(v31);
      }
      goto LABEL_64;
    }
    OMPie::getArcOut((float32x2_t **)a13, a9.n128_f32[0], (float32x2_t *)&v90);
    double v30 = v94;
    if ((unint64_t)v94 >= v95[0])
    {
      double v31 = (float32x2_t *)__p;
      uint64_t v32 = ((char *)v94 - (unsigned char *)__p) >> 3;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v95[0] - (void)__p;
      if ((uint64_t)(v95[0] - (void)__p) >> 2 > v33) {
        unint64_t v33 = v34 >> 2;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        double v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v35);
        double v31 = (float32x2_t *)__p;
        double v30 = v94;
      }
      else
      {
        double v36 = 0;
      }
      double v47 = (void **)&v36[8 * v32];
      void *v47 = v90;
      double v48 = v47;
      while (v30 != v31)
      {
        __int32 v49 = v30[-1].i32[0];
        --v30;
        *((_DWORD *)v48-- - 2) = v49;
        *((_DWORD *)v48 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v30->i32[1];
      }
      goto LABEL_62;
    }
LABEL_26:
    float32x2_t *v30 = (float32x2_t)v90;
    float64x2x4_t v22 = v30 + 1;
LABEL_64:
    a9 = v86;
    uint64_t v94 = v22;
LABEL_65:
    a9.n128_f32[0] = a9.n128_f32[0] + v20;
  }
  while (a9.n128_f32[0] <= 1.0001);
  float v90 = 0;
  float v91 = 0;
  uint64_t v92 = 0;
  if (a10 < 0.9999)
  {
    uint64_t v51 = 0;
    a9.n128_f32[0] = a10;
    do
    {
      __n128 v87 = a9;
      if (a15 == 2)
      {
        float32x2_t v52 = vadd_f32(*a6, vmul_n_f32(vsub_f32(*a11, *a6), a9.n128_f32[0]));
        if (v51 >= v92)
        {
          double v53 = (float32x2_t *)v90;
          uint64_t v67 = ((char *)v51 - (unsigned char *)v90) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v69 = (char *)v92 - (unsigned char *)v90;
          if (((char *)v92 - (unsigned char *)v90) >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v68;
          }
          if (v57)
          {
            uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v57);
            double v53 = (float32x2_t *)v90;
            uint64_t v51 = v91;
          }
          else
          {
            uint64_t v58 = 0;
          }
          double v73 = &v58[8 * v67];
          *(float32x2_t *)double v73 = v52;
          double v66 = (float32x2_t *)(v73 + 8);
          while (v51 != v53)
          {
            __int32 v74 = v51[-1].i32[0];
            --v51;
            *((_DWORD *)v73 - 2) = v74;
            v73 -= 8;
            *((_DWORD *)v73 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v51->i32[1];
          }
          goto LABEL_117;
        }
      }
      else
      {
        if (a15 == 1)
        {
          OMPie::getArcOut(a14, a9.n128_f32[0], &v89);
          double v59 = v91;
          if (v91 < v92) {
            goto LABEL_92;
          }
          uint64_t v60 = (float32x2_t *)v90;
          uint64_t v61 = ((char *)v91 - (unsigned char *)v90) >> 3;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v63 = (char *)v92 - (unsigned char *)v90;
          if (((char *)v92 - (unsigned char *)v90) >> 2 > v62) {
            unint64_t v62 = v63 >> 2;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            double v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v64);
            uint64_t v60 = (float32x2_t *)v90;
            double v59 = v91;
          }
          else
          {
            double v65 = 0;
          }
          double v76 = (float32x2_t *)&v65[8 * v61];
          *double v76 = v89;
          double v77 = v76;
          while (v59 != v60)
          {
            __int32 v78 = v59[-1].i32[0];
            --v59;
            v77[-1].i32[0] = v78;
            --v77;
            v77->i32[1] = v59->i32[1];
          }
          goto LABEL_128;
        }
        if (a15)
        {
          OMPie::getArcIn((OMPie *)a14, 1.0 - a9.n128_f32[0], (float *)&v89);
          double v59 = v91;
          if (v91 < v92)
          {
LABEL_92:
            *double v59 = v89;
            uint64_t v51 = v59 + 1;
LABEL_130:
            a9 = v87;
            float v91 = v51;
            goto LABEL_131;
          }
          uint64_t v60 = (float32x2_t *)v90;
          uint64_t v70 = ((char *)v91 - (unsigned char *)v90) >> 3;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v72 = (char *)v92 - (unsigned char *)v90;
          if (((char *)v92 - (unsigned char *)v90) >> 2 > v71) {
            unint64_t v71 = v72 >> 2;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v71;
          }
          if (v64)
          {
            double v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v64);
            uint64_t v60 = (float32x2_t *)v90;
            double v59 = v91;
          }
          else
          {
            double v65 = 0;
          }
          double v76 = (float32x2_t *)&v65[8 * v70];
          *double v76 = v89;
          double v77 = v76;
          while (v59 != v60)
          {
            __int32 v79 = v59[-1].i32[0];
            --v59;
            v77[-1].i32[0] = v79;
            --v77;
            v77->i32[1] = v59->i32[1];
          }
LABEL_128:
          uint64_t v51 = v76 + 1;
          float v90 = v77;
          float v91 = v76 + 1;
          uint64_t v92 = (float32x2_t *)&v65[8 * v64];
          if (v60) {
            operator delete(v60);
          }
          goto LABEL_130;
        }
        float32x2_t v52 = vadd_f32(*a7, vmul_n_f32(vsub_f32(*a5, *a7), a9.n128_f32[0]));
        if (v51 >= v92)
        {
          double v53 = (float32x2_t *)v90;
          uint64_t v54 = ((char *)v51 - (unsigned char *)v90) >> 3;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = (char *)v92 - (unsigned char *)v90;
          if (((char *)v92 - (unsigned char *)v90) >> 2 > v55) {
            unint64_t v55 = v56 >> 2;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v57);
            double v53 = (float32x2_t *)v90;
            uint64_t v51 = v91;
          }
          else
          {
            uint64_t v58 = 0;
          }
          double v73 = &v58[8 * v54];
          *(float32x2_t *)double v73 = v52;
          double v66 = (float32x2_t *)(v73 + 8);
          while (v51 != v53)
          {
            __int32 v75 = v51[-1].i32[0];
            --v51;
            *((_DWORD *)v73 - 2) = v75;
            v73 -= 8;
            *((_DWORD *)v73 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v51->i32[1];
          }
LABEL_117:
          float v90 = v73;
          float v91 = v66;
          uint64_t v92 = (float32x2_t *)&v58[8 * v57];
          if (v53) {
            operator delete(v53);
          }
          goto LABEL_119;
        }
      }
      *uint64_t v51 = v52;
      double v66 = v51 + 1;
LABEL_119:
      float v91 = v66;
      uint64_t v51 = v66;
      a9 = v87;
LABEL_131:
      a9.n128_f32[0] = a9.n128_f32[0] + a10;
    }
    while (a9.n128_f32[0] < 0.9999);
  }
  uint64_t v80 = *a16;
  float v88 = v80;
  if (v80) {
    (*((void (**)(char **))*v80 + 2))(v80);
  }
  double v81 = PAEKeyerDrawAlpha::renderPieEdgeSegment_GL(&__p, &v90, a12, &v88, a8);
  if (v80) {
    (*((void (**)(char **, double))*v80 + 3))(v80, v81);
  }
  if (v90)
  {
    float v91 = (float32x2_t *)v90;
    operator delete(v90);
  }
  if (__p)
  {
    uint64_t v94 = (float32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_1B74DEE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X5>, float32x2_t *a6@<X6>, float32x2_t *a7@<X7>, double *a8@<X8>, __n128 a9@<Q0>, float a10@<S1>, float *a11, OMPie *a12, float32x2_t **a13, int a14, char ***a15)
{
  float v19 = a9.n128_f32[0];
  double v21 = 0;
  std::string __p = 0;
  uint64_t v93 = 0;
  a9.n128_u64[0] = 0;
  v94[0] = 0;
  do
  {
    __n128 v85 = a9;
    if (a14 == 2)
    {
      float32x2_t v22 = vadd_f32(*a2, vmul_n_f32(vsub_f32(*a4, *a2), a9.n128_f32[0]));
      if ((unint64_t)v21 >= v94[0])
      {
        float32x2_t v23 = (float32x2_t *)__p;
        uint64_t v37 = ((char *)v21 - (unsigned char *)__p) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v94[0] - (void)__p;
        if ((uint64_t)(v94[0] - (void)__p) >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v38;
        }
        if (v27)
        {
          unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v27);
          float32x2_t v23 = (float32x2_t *)__p;
          double v21 = v93;
        }
        else
        {
          unint64_t v28 = 0;
        }
        uint64_t v43 = &v28[8 * v37];
        *(float32x2_t *)uint64_t v43 = v22;
        double v36 = (float32x2_t *)(v43 + 8);
        while (v21 != v23)
        {
          __int32 v44 = v21[-1].i32[0];
          --v21;
          *((_DWORD *)v43 - 2) = v44;
          v43 -= 8;
          *((_DWORD *)v43 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v21->i32[1];
        }
        goto LABEL_51;
      }
LABEL_24:
      *double v21 = v22;
      double v36 = v21 + 1;
LABEL_53:
      uint64_t v93 = v36;
      double v21 = v36;
      a9 = v85;
      goto LABEL_65;
    }
    if (a14 != 1)
    {
      if (!a14)
      {
        float32x2_t v22 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a1, *a3), a9.n128_f32[0]));
        if ((unint64_t)v21 >= v94[0])
        {
          float32x2_t v23 = (float32x2_t *)__p;
          uint64_t v24 = ((char *)v21 - (unsigned char *)__p) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v94[0] - (void)__p;
          if ((uint64_t)(v94[0] - (void)__p) >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v27);
            float32x2_t v23 = (float32x2_t *)__p;
            double v21 = v93;
          }
          else
          {
            unint64_t v28 = 0;
          }
          uint64_t v43 = &v28[8 * v24];
          *(float32x2_t *)uint64_t v43 = v22;
          double v36 = (float32x2_t *)(v43 + 8);
          while (v21 != v23)
          {
            __int32 v45 = v21[-1].i32[0];
            --v21;
            *((_DWORD *)v43 - 2) = v45;
            v43 -= 8;
            *((_DWORD *)v43 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v21->i32[1];
          }
LABEL_51:
          std::string __p = v43;
          uint64_t v93 = v36;
          v94[0] = &v28[8 * v27];
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_53;
        }
        goto LABEL_24;
      }
      OMPie::getArcIn(a12, 1.0 - a9.n128_f32[0], (float *)&v89);
      long long v29 = v93;
      if ((unint64_t)v93 < v94[0]) {
        goto LABEL_26;
      }
      double v30 = (float32x2_t *)__p;
      uint64_t v40 = ((char *)v93 - (unsigned char *)__p) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = v94[0] - (void)__p;
      if ((uint64_t)(v94[0] - (void)__p) >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v41;
      }
      if (v34)
      {
        unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v34);
        double v30 = (float32x2_t *)__p;
        long long v29 = v93;
      }
      else
      {
        unint64_t v35 = 0;
      }
      __int32 v46 = (void **)&v35[8 * v40];
      *__int32 v46 = v89;
      double v47 = v46;
      while (v29 != v30)
      {
        __int32 v49 = v29[-1].i32[0];
        --v29;
        *((_DWORD *)v47-- - 2) = v49;
        *((_DWORD *)v47 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v29->i32[1];
      }
LABEL_62:
      double v21 = (float32x2_t *)(v46 + 1);
      std::string __p = v47;
      uint64_t v93 = (float32x2_t *)(v46 + 1);
      v94[0] = &v35[8 * v34];
      if (v30) {
        operator delete(v30);
      }
      goto LABEL_64;
    }
    OMPie::getArcOut((float32x2_t **)a12, a9.n128_f32[0], (float32x2_t *)&v89);
    long long v29 = v93;
    if ((unint64_t)v93 >= v94[0])
    {
      double v30 = (float32x2_t *)__p;
      uint64_t v31 = ((char *)v93 - (unsigned char *)__p) >> 3;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = v94[0] - (void)__p;
      if ((uint64_t)(v94[0] - (void)__p) >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v34);
        double v30 = (float32x2_t *)__p;
        long long v29 = v93;
      }
      else
      {
        unint64_t v35 = 0;
      }
      __int32 v46 = (void **)&v35[8 * v31];
      *__int32 v46 = v89;
      double v47 = v46;
      while (v29 != v30)
      {
        __int32 v48 = v29[-1].i32[0];
        --v29;
        *((_DWORD *)v47-- - 2) = v48;
        *((_DWORD *)v47 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v29->i32[1];
      }
      goto LABEL_62;
    }
LABEL_26:
    float32x2_t *v29 = (float32x2_t)v89;
    double v21 = v29 + 1;
LABEL_64:
    a9 = v85;
    uint64_t v93 = v21;
LABEL_65:
    a9.n128_f32[0] = a9.n128_f32[0] + v19;
  }
  while (a9.n128_f32[0] <= 1.0001);
  float32x2_t v89 = 0;
  float v90 = 0;
  float v91 = 0;
  if (a10 < 0.9999)
  {
    __int32 v50 = 0;
    a9.n128_f32[0] = a10;
    do
    {
      __n128 v86 = a9;
      if (a14 == 2)
      {
        float32x2_t v51 = vadd_f32(*a7, vmul_n_f32(vsub_f32(*a5, *a7), a9.n128_f32[0]));
        if (v50 >= v91)
        {
          float32x2_t v52 = (float32x2_t *)v89;
          uint64_t v59 = ((char *)v50 - (unsigned char *)v89) >> 3;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v61 = (char *)v91 - (unsigned char *)v89;
          if (((char *)v91 - (unsigned char *)v89) >> 2 > v60) {
            unint64_t v60 = v61 >> 2;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v60;
          }
          if (v56)
          {
            unint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v56);
            float32x2_t v52 = (float32x2_t *)v89;
            __int32 v50 = v90;
          }
          else
          {
            unint64_t v57 = 0;
          }
          uint64_t v72 = &v57[8 * v59];
          *(float32x2_t *)uint64_t v72 = v51;
          unint64_t v62 = (float32x2_t *)(v72 + 8);
          while (v50 != v52)
          {
            __int32 v73 = v50[-1].i32[0];
            --v50;
            *((_DWORD *)v72 - 2) = v73;
            v72 -= 8;
            *((_DWORD *)v72 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v50->i32[1];
          }
          goto LABEL_121;
        }
      }
      else
      {
        if (a14 == 1)
        {
          OMPie::getArcOut(a13, a9.n128_f32[0], &v88);
          uint64_t v58 = v90;
          if (v90 >= v91)
          {
            double v66 = (float32x2_t *)v89;
            uint64_t v67 = ((char *)v90 - (unsigned char *)v89) >> 3;
            unint64_t v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v69 = (char *)v91 - (unsigned char *)v89;
            if (((char *)v91 - (unsigned char *)v89) >> 2 > v68) {
              unint64_t v68 = v69 >> 2;
            }
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v68;
            }
            if (v70)
            {
              unint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v70);
              double v66 = (float32x2_t *)v89;
              uint64_t v58 = v90;
            }
            else
            {
              unint64_t v71 = 0;
            }
            double v76 = (float32x2_t *)&v71[8 * v67];
            *double v76 = v88;
            double v77 = v76;
            while (v58 != v66)
            {
              __int32 v78 = v58[-1].i32[0];
              --v58;
              v77[-1].i32[0] = v78;
              --v77;
              v77->i32[1] = v58->i32[1];
            }
            __int32 v50 = v76 + 1;
            float32x2_t v89 = v77;
            float v90 = v76 + 1;
            float v91 = (float32x2_t *)&v71[8 * v70];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            v90->i32[0] = v88.i32[0];
            v58->i32[1] = v88.i32[1];
            __int32 v50 = v58 + 1;
          }
          a9 = v86;
          float v90 = v50;
          goto LABEL_131;
        }
        if (a14)
        {
          float32x2_t v51 = vadd_f32(*a7, vmul_n_f32(vsub_f32(*a5, *a7), 1.0 - a10));
          if (v50 >= v91)
          {
            float32x2_t v52 = (float32x2_t *)v89;
            uint64_t v63 = ((char *)v50 - (unsigned char *)v89) >> 3;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v65 = (char *)v91 - (unsigned char *)v89;
            if (((char *)v91 - (unsigned char *)v89) >> 2 > v64) {
              unint64_t v64 = v65 >> 2;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v64;
            }
            if (v56)
            {
              unint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v56);
              float32x2_t v52 = (float32x2_t *)v89;
              __int32 v50 = v90;
            }
            else
            {
              unint64_t v57 = 0;
            }
            uint64_t v72 = &v57[8 * v63];
            *(float32x2_t *)uint64_t v72 = v51;
            unint64_t v62 = (float32x2_t *)(v72 + 8);
            while (v50 != v52)
            {
              __int32 v75 = v50[-1].i32[0];
              --v50;
              *((_DWORD *)v72 - 2) = v75;
              v72 -= 8;
              *((_DWORD *)v72 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v50->i32[1];
            }
            goto LABEL_121;
          }
        }
        else
        {
          float32x2_t v51 = vadd_f32(*a5, vmul_n_f32(vsub_f32(*a6, *a5), a9.n128_f32[0]));
          if (v50 >= v91)
          {
            float32x2_t v52 = (float32x2_t *)v89;
            uint64_t v53 = ((char *)v50 - (unsigned char *)v89) >> 3;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v55 = (char *)v91 - (unsigned char *)v89;
            if (((char *)v91 - (unsigned char *)v89) >> 2 > v54) {
              unint64_t v54 = v55 >> 2;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              unint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v56);
              float32x2_t v52 = (float32x2_t *)v89;
              __int32 v50 = v90;
            }
            else
            {
              unint64_t v57 = 0;
            }
            uint64_t v72 = &v57[8 * v53];
            *(float32x2_t *)uint64_t v72 = v51;
            unint64_t v62 = (float32x2_t *)(v72 + 8);
            while (v50 != v52)
            {
              __int32 v74 = v50[-1].i32[0];
              --v50;
              *((_DWORD *)v72 - 2) = v74;
              v72 -= 8;
              *((_DWORD *)v72 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v50->i32[1];
            }
LABEL_121:
            float32x2_t v89 = v72;
            float v90 = v62;
            float v91 = (float32x2_t *)&v57[8 * v56];
            if (v52) {
              operator delete(v52);
            }
            goto LABEL_123;
          }
        }
      }
      float32x2_t *v50 = v51;
      unint64_t v62 = v50 + 1;
LABEL_123:
      float v90 = v62;
      __int32 v50 = v62;
      a9 = v86;
LABEL_131:
      a9.n128_f32[0] = a9.n128_f32[0] + a10;
    }
    while (a9.n128_f32[0] < 0.9999);
  }
  __int32 v79 = *a15;
  __n128 v87 = v79;
  if (v79) {
    (*((void (**)(char **))*v79 + 2))(v79);
  }
  double v80 = PAEKeyerDrawAlpha::renderPieEdgeSegment_GL(&__p, &v89, a11, &v87, a8);
  if (v79) {
    (*((void (**)(char **, double))*v79 + 3))(v79, v80);
  }
  if (v89)
  {
    float v90 = (float32x2_t *)v89;
    operator delete(v89);
  }
  if (__p)
  {
    uint64_t v93 = (float32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_1B74DF6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X5>, float32x2_t *a6@<X6>, float *a7@<X7>, double *a8@<X8>, __n128 a9@<Q0>, float a10@<S1>, float32x2_t **a11, float32x2_t **a12, int a13, char ***a14)
{
  float v17 = a9.n128_f32[0];
  float v19 = 0;
  std::string __p = 0;
  float v84 = 0;
  v85[0] = 0;
  a9.n128_u64[0] = 0;
  do
  {
    __n128 v76 = a9;
    if (a13 != 1)
    {
      if (a13)
      {
        float32x2_t v20 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a1, *a3), a9.n128_f32[0]));
        if ((unint64_t)v19 >= v85[0])
        {
          double v21 = (float32x2_t *)__p;
          uint64_t v29 = ((char *)v19 - (unsigned char *)__p) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v85[0] - (void)__p;
          if ((uint64_t)(v85[0] - (void)__p) >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v30;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v85, v25);
            double v21 = (float32x2_t *)__p;
            float v19 = (float32x2_t *)v84;
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v38 = &v26[8 * v29];
          *(float32x2_t *)unint64_t v38 = v20;
          unint64_t v28 = (float32x2_t *)(v38 + 8);
          while (v19 != v21)
          {
            __int32 v40 = v19[-1].i32[0];
            --v19;
            *((_DWORD *)v38 - 2) = v40;
            v38 -= 8;
            *((_DWORD *)v38 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v19->i32[1];
          }
          goto LABEL_41;
        }
      }
      else
      {
        float32x2_t v20 = vadd_f32(*a1, vmul_n_f32(vsub_f32(*a2, *a1), a9.n128_f32[0]));
        if ((unint64_t)v19 >= v85[0])
        {
          double v21 = (float32x2_t *)__p;
          uint64_t v22 = ((char *)v19 - (unsigned char *)__p) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v85[0] - (void)__p;
          if ((uint64_t)(v85[0] - (void)__p) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v85, v25);
            double v21 = (float32x2_t *)__p;
            float v19 = (float32x2_t *)v84;
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v38 = &v26[8 * v22];
          *(float32x2_t *)unint64_t v38 = v20;
          unint64_t v28 = (float32x2_t *)(v38 + 8);
          while (v19 != v21)
          {
            __int32 v39 = v19[-1].i32[0];
            --v19;
            *((_DWORD *)v38 - 2) = v39;
            v38 -= 8;
            *((_DWORD *)v38 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v19->i32[1];
          }
LABEL_41:
          std::string __p = v38;
          float v84 = (char *)v28;
          v85[0] = &v26[8 * v25];
          if (v21) {
            operator delete(v21);
          }
          goto LABEL_43;
        }
      }
      *float v19 = v20;
      unint64_t v28 = v19 + 1;
LABEL_43:
      float v84 = (char *)v28;
      float v19 = v28;
      a9 = v76;
      goto LABEL_51;
    }
    OMPie::getArcOut(a11, a9.n128_f32[0], (float32x2_t *)&v80);
    unint64_t v27 = (float32x2_t *)v84;
    if ((unint64_t)v84 >= v85[0])
    {
      unint64_t v32 = (float32x2_t *)__p;
      uint64_t v33 = (v84 - (unsigned char *)__p) >> 3;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v85[0] - (void)__p;
      if ((uint64_t)(v85[0] - (void)__p) >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v85, v36);
        unint64_t v32 = (float32x2_t *)__p;
        unint64_t v27 = (float32x2_t *)v84;
      }
      else
      {
        uint64_t v37 = 0;
      }
      unint64_t v41 = (void **)&v37[8 * v33];
      *unint64_t v41 = v80;
      uint64_t v42 = v41;
      while (v27 != v32)
      {
        __int32 v43 = v27[-1].i32[0];
        --v27;
        *((_DWORD *)v42-- - 2) = v43;
        *((_DWORD *)v42 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v27->i32[1];
      }
      float v19 = (float32x2_t *)(v41 + 1);
      std::string __p = v42;
      float v84 = (char *)(v41 + 1);
      v85[0] = &v37[8 * v36];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(_DWORD *)float v84 = v80;
      v27->i32[1] = HIDWORD(v80);
      float v19 = v27 + 1;
    }
    a9 = v76;
    float v84 = (char *)v19;
LABEL_51:
    a9.n128_f32[0] = a9.n128_f32[0] + v17;
  }
  while (a9.n128_f32[0] <= 1.0001);
  double v80 = 0;
  double v81 = 0;
  float v82 = 0;
  if (a10 < 0.9999)
  {
    __int32 v44 = 0;
    a9.n128_f32[0] = a10;
    do
    {
      __n128 v77 = a9;
      if (a13 == 1)
      {
        OMPie::getArcOut(a12, a9.n128_f32[0], &v79);
        float32x2_t v52 = v81;
        if (v81 >= v82)
        {
          unint64_t v57 = (float32x2_t *)v80;
          uint64_t v58 = ((char *)v81 - (unsigned char *)v80) >> 3;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v60 = (char *)v82 - (unsigned char *)v80;
          if (((char *)v82 - (unsigned char *)v80) >> 2 > v59) {
            unint64_t v59 = v60 >> 2;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            unint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v82, v61);
            unint64_t v57 = (float32x2_t *)v80;
            float32x2_t v52 = v81;
          }
          else
          {
            unint64_t v62 = 0;
          }
          double v66 = (float32x2_t *)&v62[8 * v58];
          *double v66 = v79;
          uint64_t v67 = v66;
          while (v52 != v57)
          {
            __int32 v68 = v52[-1].i32[0];
            --v52;
            v67[-1].i32[0] = v68;
            --v67;
            v67->i32[1] = v52->i32[1];
          }
          __int32 v44 = v66 + 1;
          double v80 = v67;
          double v81 = v66 + 1;
          float v82 = (float32x2_t *)&v62[8 * v61];
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          v81->i32[0] = v79.i32[0];
          v52->i32[1] = v79.i32[1];
          __int32 v44 = v52 + 1;
        }
        a9 = v77;
        double v81 = v44;
        goto LABEL_103;
      }
      if (a13)
      {
        float32x2_t v45 = vadd_f32(*a6, vmul_n_f32(vsub_f32(*a4, *a6), a9.n128_f32[0]));
        if (v44 >= v82)
        {
          __int32 v46 = (float32x2_t *)v80;
          uint64_t v54 = ((char *)v44 - (unsigned char *)v80) >> 3;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = (char *)v82 - (unsigned char *)v80;
          if (((char *)v82 - (unsigned char *)v80) >> 2 > v55) {
            unint64_t v55 = v56 >> 2;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v55;
          }
          if (v50)
          {
            float32x2_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v82, v50);
            __int32 v46 = (float32x2_t *)v80;
            __int32 v44 = v81;
          }
          else
          {
            float32x2_t v51 = 0;
          }
          uint64_t v63 = &v51[8 * v54];
          *(float32x2_t *)uint64_t v63 = v45;
          uint64_t v53 = (float32x2_t *)(v63 + 8);
          while (v44 != v46)
          {
            __int32 v65 = v44[-1].i32[0];
            --v44;
            *((_DWORD *)v63 - 2) = v65;
            v63 -= 8;
            *((_DWORD *)v63 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v44->i32[1];
          }
          goto LABEL_93;
        }
      }
      else
      {
        float32x2_t v45 = vadd_f32(*a4, vmul_n_f32(vsub_f32(*a5, *a4), a9.n128_f32[0]));
        if (v44 >= v82)
        {
          __int32 v46 = (float32x2_t *)v80;
          uint64_t v47 = ((char *)v44 - (unsigned char *)v80) >> 3;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v49 = (char *)v82 - (unsigned char *)v80;
          if (((char *)v82 - (unsigned char *)v80) >> 2 > v48) {
            unint64_t v48 = v49 >> 2;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            float32x2_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v82, v50);
            __int32 v46 = (float32x2_t *)v80;
            __int32 v44 = v81;
          }
          else
          {
            float32x2_t v51 = 0;
          }
          uint64_t v63 = &v51[8 * v47];
          *(float32x2_t *)uint64_t v63 = v45;
          uint64_t v53 = (float32x2_t *)(v63 + 8);
          while (v44 != v46)
          {
            __int32 v64 = v44[-1].i32[0];
            --v44;
            *((_DWORD *)v63 - 2) = v64;
            v63 -= 8;
            *((_DWORD *)v63 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v44->i32[1];
          }
LABEL_93:
          double v80 = v63;
          double v81 = v53;
          float v82 = (float32x2_t *)&v51[8 * v50];
          if (v46) {
            operator delete(v46);
          }
          goto LABEL_95;
        }
      }
      *__int32 v44 = v45;
      uint64_t v53 = v44 + 1;
LABEL_95:
      double v81 = v53;
      __int32 v44 = v53;
      a9 = v77;
LABEL_103:
      a9.n128_f32[0] = a9.n128_f32[0] + a10;
    }
    while (a9.n128_f32[0] < 0.9999);
  }
  uint64_t v69 = *a14;
  __int32 v78 = v69;
  if (v69) {
    (*((void (**)(char **))*v69 + 2))(v69);
  }
  double v70 = PAEKeyerDrawAlpha::renderPieEdgeSegment_GL(&__p, &v80, a7, &v78, a8);
  if (v69) {
    (*((void (**)(char **, double))*v69 + 3))(v69, v70);
  }
  if (v80)
  {
    double v81 = (float32x2_t *)v80;
    operator delete(v80);
  }
  if (__p)
  {
    float v84 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B74DFDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void PAEKeyerDrawAlpha::drawAlpha_in_HGGLNode(uint64_t a1, uint64_t a2, HGGLNode **a3)
{
  long long v5 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  OMPie::computeArc(v5, v6, v7);
  long long v8 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  OMPie::computeArc(v8, v9, v10);
  Vec2f v175 = **(Vec2f **)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2) + 40);
  float32x2_t v145 = *(float32x2_t *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2) + 40) + 8);
  float32x2_t v174 = v145;
  Vec2f v173 = *(Vec2f *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2) + 40) + 16);
  uint64_t v11 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2) + 40);
  float v13 = *(float *)(v11 + 24);
  float v12 = *(float *)(v11 + 28);
  unint64_t v172 = __PAIR64__(LODWORD(v12), LODWORD(v13));
  uint64_t v14 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2) + 40);
  float v15 = *(float *)(v14 + 32);
  float v16 = *(float *)(v14 + 36);
  unint64_t v171 = __PAIR64__(LODWORD(v16), LODWORD(v15));
  float32x2_t v170 = **(float32x2_t **)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2) + 40);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  long long v18 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 112);
  float32x2_t v19 = *(float32x2_t *)(*(void *)(v17 + 40) + 8);
  float32x2_t v169 = v19;
  float32x2_t v20 = *(float32x2_t *)(*(void *)(v18(a2) + 40) + 16);
  float32x2_t v168 = v20;
  float32x2_t v167 = *(float32x2_t *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2) + 40) + 24);
  float32x2_t v166 = *(float32x2_t *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2) + 40) + 32);
  double v21 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  BOOL isQuadActive = OMPie::isQuadActive(v21);
  unint64_t v23 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  BOOL v24 = OMPie::isQuadActive(v23);
  int v26 = !v24;
  if (!isQuadActive || (v26 & 1) != 0)
  {
    if ((isQuadActive | v26) != 1) {
      return;
    }
    BOOL v67 = !isQuadActive || v24;
    v25.n128_u32[0] = 1.0;
    HGGLNode::hglColor4f(*a3, v25, 1.0, 1.0, 1.0);
    HGGLNode::hglBegin((char **)*a3, 5);
    if (v67)
    {
      float v68 = vmuls_lane_f32(256.0, v145, 1);
      float v69 = 0.0;
      do
      {
        double v70 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
        OMPie::getArcOut(v70, v69, (float32x2_t *)&v159);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, *(float *)&v159 * 256.0, *((float *)&v159 + 1) * 256.0);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, 256.0 * v145.f32[0], v68);
        float v69 = v69 + 0.02;
      }
      while (v69 <= 1.0);
      HGGLNode::hglEnd((HGRasterizer **)*a3);
      unint64_t v71 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
      OMPie::getArcOut(v71, 0.01, (float32x2_t *)&v159);
      Vec2f v175 = (Vec2f)v159;
      uint64_t v72 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
      OMPie::getArcOut(v72, 0.99, (float32x2_t *)&v159);
      float32x2_t v73 = vsub_f32((float32x2_t)v175, v145);
      int32x2_t v74 = (int32x2_t)vmul_f32(v73, v73);
      *(float *)v74.i32 = sqrtf(vaddv_f32((float32x2_t)v74));
      float32x2_t v75 = vmul_n_f32(vdiv_f32(v73, (float32x2_t)vdup_lane_s32(v74, 0)), *(float *)v74.i32);
      float32x2_t v76 = (float32x2_t)vdup_n_s32(0x3F75C28Fu);
      Vec2f v175 = (Vec2f)vadd_f32(v145, vmul_f32(v75, v76));
      float32x2_t v77 = vsub_f32(*(float32x2_t *)&v159, v145);
      int32x2_t v78 = (int32x2_t)vmul_f32(v77, v77);
      *(float *)v78.i32 = sqrtf(vaddv_f32((float32x2_t)v78));
      Vec2f v173 = (Vec2f)vadd_f32(v145, vmul_f32(vmul_n_f32(vdiv_f32(v77, (float32x2_t)vdup_lane_s32(v78, 0)), *(float *)v78.i32), v76));
      float32x2_t v79 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
      OMPie::getArcOut(v79, 0.5, &v165);
      float v80 = sqrtf((float)((float)(v145.f32[0] - v165.f32[0]) * (float)(v145.f32[0] - v165.f32[0]))+ (float)((float)(v145.f32[1] - v165.f32[1]) * (float)(v145.f32[1] - v165.f32[1])));
      float v81 = (float)(v145.f32[0] - v165.f32[0]) / v80;
      float v82 = (float)(v145.f32[1] - v165.f32[1]) / v80;
      float v83 = sqrtf((float)((float)(v165.f32[0] - v145.f32[0]) * (float)(v165.f32[0] - v145.f32[0]))+ (float)((float)(v165.f32[1] - v145.f32[1]) * (float)(v165.f32[1] - v145.f32[1])));
      float v84 = v165.f32[0] + (float)((float)(v83 * v81) * 0.96);
      float v85 = v165.f32[1] + (float)((float)(v83 * v82) * 0.96);
      v174.f32[0] = v84;
      v174.f32[1] = v85;
      uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
      int v87 = *(_DWORD *)(v86 + 32);
      long long v88 = *(_OWORD *)(v86 + 16);
      long long v159 = *(_OWORD *)v86;
      long long v160 = v88;
      int v161 = v87;
      BOOL v163 = 0;
      uint64_t v164 = 0;
      std::string __p = 0;
      std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>((char *)&__p, *(_DWORD **)(v86 + 40), *(_DWORD **)(v86 + 48), (uint64_t)(*(void *)(v86 + 48) - *(void *)(v86 + 40)) >> 3);
      float32x2_t v89 = (Vec2f *)__p;
      *(Vec2f *)std::string __p = v175;
      v89[1].var0[0] = v84;
      v89[1].var0[1] = v85;
      float64x2_t v89[2] = v173;
      OMPie::computeArc((OMPie *)&v159, v90, v91);
      float32x2_t v158 = vadd_f32(v20, vmul_f32(vsub_f32(v19, v20), (float32x2_t)vdup_n_s32(0x3F7B2B79u)));
      uint64_t v92 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      uint64_t v94 = *a3;
      float v148 = (char **)v94;
      if (v94) {
        __n128 v93 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v94 + 16))(v94);
      }
      v93.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(&v174, (float32x2_t *)&v175, (float32x2_t *)&v173, &v169, &v170, &v168, (float *)&v158, (double *)&v149, v93, 0.018868, (float32x2_t **)&v159, v92, 0, &v148);
      float32x2_t v158 = v149;
      if (v94) {
        (*(void (**)(HGGLNode *))(*(void *)v94 + 24))(v94);
      }
      uint64_t v95 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      uint64_t v97 = *a3;
      float v147 = (char **)v97;
      if (v97) {
        __n128 v96 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v97 + 16))(v97);
      }
      v96.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(&v174, (float32x2_t *)&v175, (float32x2_t *)&v173, &v169, &v170, &v168, (float *)&v158, (double *)&v149, v96, 0.018868, (float32x2_t **)&v159, v95, 1, &v147);
      float32x2_t v158 = v149;
      if (v97) {
        (*(void (**)(HGGLNode *))(*(void *)v97 + 24))(v97);
      }
      char v98 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      double v100 = *a3;
      float v146 = (char **)v100;
      if (v100) {
        __n128 v99 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v100 + 16))(v100);
      }
      v99.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(&v174, (float32x2_t *)&v175, (float32x2_t *)&v173, &v169, &v170, &v168, (float *)&v158, (double *)&v149, v99, 0.018868, (float32x2_t **)&v159, v98, 2, &v146);
      float32x2_t v158 = v149;
      if (v100) {
        (*(void (**)(HGGLNode *))(*(void *)v100 + 24))(v100);
      }
    }
    else
    {
      float v144 = v16;
      float32x2_t v139 = v19;
      float v101 = 0.0;
      do
      {
        float v102 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
        OMPie::getArcIn(v102, v101, (float *)&v159);
        float v103 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
        OMPie::getArcOut(v103, v101, &v165);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, v165.f32[0] * 256.0, v165.f32[1] * 256.0);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, *(float *)&v159 * 256.0, *((float *)&v159 + 1) * 256.0);
        float v101 = v101 + 0.02;
      }
      while (v101 <= 1.0);
      HGGLNode::hglEnd((HGRasterizer **)*a3);
      *(void *)&long long v159 = 1065353216;
      float v106 = OMUtil::angle((OMUtil *)&v159, &v175, v104);
      if ((float)((float)(*(float *)&v159 * v175.var0[1]) - (float)(*((float *)&v159 + 1) * v175.var0[0])) >= 0.0) {
        float v107 = v106;
      }
      else {
        float v107 = 6.2832 - v106;
      }
      *(void *)&long long v159 = 1065353216;
      float v108 = OMUtil::angle((OMUtil *)&v159, &v173, v105);
      float v109 = v173.var0[0];
      float v110 = v173.var0[1];
      if ((float)((float)(*(float *)&v159 * v173.var0[1]) - (float)(*((float *)&v159 + 1) * v173.var0[0])) < 0.0) {
        float v108 = 6.2832 - v108;
      }
      float v141 = v108;
      float v111 = sqrtf((float)(v175.var0[0] * v175.var0[0]) + (float)(v175.var0[1] * v175.var0[1])) * 0.99;
      __float2 v112 = __sincosf_stret(v107 + 0.01);
      v175.var0[0] = v112.__cosval * v111;
      v175.var0[1] = v112.__sinval * v111;
      float v113 = sqrtf((float)(v13 * v13) + (float)(v12 * v12)) * 1.01;
      float v114 = v113 * v112.__cosval;
      float v115 = v113 * v112.__sinval;
      *(float *)&unint64_t v172 = v113 * v112.__cosval;
      *((float *)&v172 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v113 * v112.__sinval;
      float v116 = sqrtf((float)(v109 * v109) + (float)(v110 * v110)) * 0.99;
      __float2 v117 = __sincosf_stret(v141 + -0.01);
      v173.var0[0] = v116 * v117.__cosval;
      v173.var0[1] = v116 * v117.__sinval;
      float v118 = sqrtf((float)(v15 * v15) + (float)(v144 * v144)) * 1.01;
      float v119 = v118 * v117.__cosval;
      float v120 = v118 * v117.__sinval;
      *(float *)&unint64_t v171 = v118 * v117.__cosval;
      *((float *)&v171 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v118 * v117.__sinval;
      uint64_t v121 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
      int v122 = *(_DWORD *)(v121 + 32);
      long long v123 = *(_OWORD *)(v121 + 16);
      long long v159 = *(_OWORD *)v121;
      long long v160 = v123;
      int v161 = v122;
      BOOL v163 = 0;
      uint64_t v164 = 0;
      std::string __p = 0;
      std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>((char *)&__p, *(_DWORD **)(v121 + 40), *(_DWORD **)(v121 + 48), (uint64_t)(*(void *)(v121 + 48) - *(void *)(v121 + 40)) >> 3);
      float v124 = (Vec2f *)__p;
      *(Vec2f *)std::string __p = v175;
      v124[3].var0[0] = v114;
      v124[3].var0[1] = v115;
      float v124[2] = v173;
      v124[4].var0[0] = v119;
      v124[4].var0[1] = v120;
      OMPie::computeArc((OMPie *)&v159, v125, v126);
      float32x2_t v165 = vadd_f32(v20, vmul_f32(vsub_f32(v139, v20), (float32x2_t)vdup_n_s32(0x3F7B2B79u)));
      double v127 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      float v129 = *a3;
      float v153 = (char **)v129;
      if (v129) {
        __n128 v128 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v129 + 16))(v129);
      }
      v128.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v128, 0.018868, (float *)&v165, (OMPie *)&v159, v127, 0, &v153);
      float32x2_t v165 = v158;
      if (v129) {
        (*(void (**)(HGGLNode *))(*(void *)v129 + 24))(v129);
      }
      float v130 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      double v132 = *a3;
      float v152 = (char **)v132;
      if (v132) {
        __n128 v131 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v132 + 16))(v132);
      }
      v131.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v131, 0.018868, (float *)&v165, (OMPie *)&v159, v130, 1, &v152);
      float32x2_t v165 = v158;
      if (v132) {
        (*(void (**)(HGGLNode *))(*(void *)v132 + 24))(v132);
      }
      uint64_t v133 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      uint64_t v135 = *a3;
      float v151 = (char **)v135;
      if (v135) {
        __n128 v134 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v135 + 16))(v135);
      }
      v134.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v134, 0.018868, (float *)&v165, (OMPie *)&v159, v133, 2, &v151);
      float32x2_t v165 = v158;
      if (v135) {
        (*(void (**)(HGGLNode *))(*(void *)v135 + 24))(v135);
      }
      float v136 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      float v138 = *a3;
      float v150 = (char **)v138;
      if (v138) {
        __n128 v137 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v138 + 16))(v138);
      }
      v137.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v137, 0.018868, (float *)&v165, (OMPie *)&v159, v136, 3, &v150);
      float32x2_t v165 = v158;
      if (v138) {
        (*(void (**)(HGGLNode *))(*(void *)v138 + 24))(v138);
      }
    }
  }
  else
  {
    float v140 = v13;
    float v142 = v12;
    float v143 = v16;
    v25.n128_u32[0] = 1.0;
    HGGLNode::hglColor4f(*a3, v25, 1.0, 1.0, 1.0);
    HGGLNode::hglBegin((char **)*a3, 5);
    float v27 = 0.0;
    do
    {
      unint64_t v28 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
      OMPie::getArcIn(v28, v27, (float *)&v159);
      uint64_t v29 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
      OMPie::getArcOut(v29, v27, &v165);
      HGGLNode::hglVertex2f((float32x4_t **)*a3, v165.f32[0] * 256.0, v165.f32[1] * 256.0);
      HGGLNode::hglVertex2f((float32x4_t **)*a3, *(float *)&v159 * 256.0, *((float *)&v159 + 1) * 256.0);
      float v27 = v27 + 0.02;
    }
    while (v27 <= 1.0);
    HGGLNode::hglEnd((HGRasterizer **)*a3);
    *(void *)&long long v159 = 1065353216;
    float v32 = OMUtil::angle((OMUtil *)&v159, &v175, v30);
    if ((float)((float)(*(float *)&v159 * v175.var0[1]) - (float)(*((float *)&v159 + 1) * v175.var0[0])) >= 0.0) {
      float v33 = v32;
    }
    else {
      float v33 = 6.2832 - v32;
    }
    *(void *)&long long v159 = 1065353216;
    float v34 = OMUtil::angle((OMUtil *)&v159, &v173, v31);
    float v35 = v173.var0[0];
    float v36 = v173.var0[1];
    if ((float)((float)(*(float *)&v159 * v173.var0[1]) - (float)(*((float *)&v159 + 1) * v173.var0[0])) >= 0.0) {
      float v37 = v34;
    }
    else {
      float v37 = 6.2832 - v34;
    }
    float v38 = sqrtf((float)(v175.var0[0] * v175.var0[0]) + (float)(v175.var0[1] * v175.var0[1])) * 0.99;
    __float2 v39 = __sincosf_stret(v33 + 0.01);
    v175.var0[0] = v39.__cosval * v38;
    v175.var0[1] = v39.__sinval * v38;
    float v40 = sqrtf((float)(v140 * v140) + (float)(v142 * v142)) * 1.01;
    float v41 = v40 * v39.__cosval;
    float v42 = v40 * v39.__sinval;
    *(float *)&unint64_t v172 = v40 * v39.__cosval;
    *((float *)&v172 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v40 * v39.__sinval;
    float v43 = sqrtf((float)(v35 * v35) + (float)(v36 * v36)) * 0.99;
    __float2 v44 = __sincosf_stret(v37 + -0.01);
    v173.var0[0] = v43 * v44.__cosval;
    v173.var0[1] = v43 * v44.__sinval;
    float v45 = sqrtf((float)(v15 * v15) + (float)(v143 * v143)) * 1.01;
    float v46 = v45 * v44.__cosval;
    float v47 = v45 * v44.__sinval;
    *(float *)&unint64_t v171 = v45 * v44.__cosval;
    *((float *)&v171 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v45 * v44.__sinval;
    uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
    int v49 = *(_DWORD *)(v48 + 32);
    long long v50 = *(_OWORD *)(v48 + 16);
    long long v159 = *(_OWORD *)v48;
    long long v160 = v50;
    int v161 = v49;
    BOOL v163 = 0;
    uint64_t v164 = 0;
    std::string __p = 0;
    std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>((char *)&__p, *(_DWORD **)(v48 + 40), *(_DWORD **)(v48 + 48), (uint64_t)(*(void *)(v48 + 48) - *(void *)(v48 + 40)) >> 3);
    float32x2_t v51 = (Vec2f *)__p;
    *(Vec2f *)std::string __p = v175;
    v51[3].var0[0] = v41;
    v51[3].var0[1] = v42;
    v51[2] = v173;
    v51[4].var0[0] = v46;
    v51[4].var0[1] = v47;
    OMPie::computeArc((OMPie *)&v159, v52, v53);
    uint64_t v54 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    OMPie::getArcIn(v54, 0.018868, (float *)&v165);
    unint64_t v55 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    unint64_t v57 = *a3;
    float64x2_t v157 = (char **)v57;
    if (v57) {
      __n128 v56 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v57 + 16))(v57);
    }
    v56.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v56, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v55, 0, &v157);
    float32x2_t v165 = v158;
    if (v57) {
      (*(void (**)(HGGLNode *))(*(void *)v57 + 24))(v57);
    }
    uint64_t v58 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    uint64_t v60 = *a3;
    uint64_t v156 = (char **)v60;
    if (v60) {
      __n128 v59 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v60 + 16))(v60);
    }
    v59.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v59, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v58, 1, &v156);
    float32x2_t v165 = v158;
    if (v60) {
      (*(void (**)(HGGLNode *))(*(void *)v60 + 24))(v60);
    }
    unint64_t v61 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    uint64_t v63 = *a3;
    float v155 = (char **)v63;
    if (v63) {
      __n128 v62 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v63 + 16))(v63);
    }
    v62.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v62, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v61, 2, &v155);
    float32x2_t v165 = v158;
    if (v63) {
      (*(void (**)(HGGLNode *))(*(void *)v63 + 24))(v63);
    }
    __int32 v64 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    double v66 = *a3;
    int64x2_t v154 = (char **)v66;
    if (v66) {
      __n128 v65 = ((__n128 (*)(HGGLNode *))*(void *)(*(void *)v66 + 16))(v66);
    }
    v65.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v65, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v64, 3, &v154);
    float32x2_t v165 = v158;
    if (v66) {
      (*(void (**)(HGGLNode *))(*(void *)v66 + 24))(v66);
    }
  }
  if (__p)
  {
    BOOL v163 = __p;
    operator delete(__p);
  }
}

void sub_1B74E13D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float OMUtil::angle(OMUtil *this, const Vec2f *a2, const Vec2f *a3)
{
  float v3 = (float)((float)(*(float *)this * a2->var0[0]) + (float)(*((float *)this + 1) * a2->var0[1]))
     / (float)(sqrtf((float)(*(float *)this * *(float *)this) + (float)(*((float *)this + 1) * *((float *)this + 1)))
             * sqrtf((float)(a2->var0[0] * a2->var0[0]) + (float)(a2->var0[1] * a2->var0[1])));
  float v4 = 1.0;
  if (v3 <= 1.0) {
    float v4 = v3;
  }
  if (v3 >= -1.0) {
    return acosf(v4);
  }
  else {
    return acosf(-1.0);
  }
}

char *std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>(char *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    long long v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *long long v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((void *)v6 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7;
  }
  return result;
}

void sub_1B74E1764(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HBlackHole::setPixelTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 416;
  if (a1 + 416 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v4 + i) = *(void *)(v6 + i);
      ++v5;
      v4 += 32;
      v6 += 32;
    }
    while (v5 != 4);
  }
  float v8 = *(double *)a2;
  float v9 = *(double *)(a2 + 8);
  float v10 = *(double *)(a2 + 16);
  float v11 = *(double *)(a2 + 24);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 5, v8, v9, v10, v11);
  float v12 = *(double *)(a2 + 32);
  float v13 = *(double *)(a2 + 40);
  float v14 = *(double *)(a2 + 48);
  float v15 = *(double *)(a2 + 56);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 6, v12, v13, v14, v15);
  v16.n128_u64[0] = *(void *)(a2 + 96);
  v17.n128_u64[0] = *(void *)(a2 + 104);
  v16.n128_f32[0] = v16.n128_f64[0];
  v17.n128_f32[0] = v17.n128_f64[0];
  v18.n128_u64[0] = *(void *)(a2 + 112);
  v19.n128_u64[0] = *(void *)(a2 + 120);
  v18.n128_f32[0] = v18.n128_f64[0];
  v19.n128_f32[0] = v19.n128_f64[0];
  float32x2_t v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);

  return v20(a1, 7, v16, v17, v18, v19);
}

uint64_t HBlackHole::setInversePixelTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 544;
  if (a1 + 544 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v4 + i) = *(void *)(v6 + i);
      ++v5;
      v4 += 32;
      v6 += 32;
    }
    while (v5 != 4);
  }
  float v8 = *(double *)a2;
  float v9 = *(double *)(a2 + 8);
  float v10 = *(double *)(a2 + 16);
  float v11 = *(double *)(a2 + 24);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 2, v8, v9, v10, v11);
  float v12 = *(double *)(a2 + 32);
  float v13 = *(double *)(a2 + 40);
  float v14 = *(double *)(a2 + 48);
  float v15 = *(double *)(a2 + 56);
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 3, v12, v13, v14, v15);
  v16.n128_u64[0] = *(void *)(a2 + 96);
  v17.n128_u64[0] = *(void *)(a2 + 104);
  v16.n128_f32[0] = v16.n128_f64[0];
  v17.n128_f32[0] = v17.n128_f64[0];
  v18.n128_u64[0] = *(void *)(a2 + 112);
  v19.n128_u64[0] = *(void *)(a2 + 120);
  v18.n128_f32[0] = v18.n128_f64[0];
  v19.n128_f32[0] = v19.n128_f64[0];
  float32x2_t v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);

  return v20(a1, 4, v16, v17, v18, v19);
}

uint64_t HBlackHole::RenderTile(HBlackHole *this, HGTile *a2)
{
  if (*((void *)a2 + 10))
  {
    return HgcBlackHole::RenderTile(this, a2);
  }
  else
  {
    int v3 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
    if (v3 >= 1)
    {
      uint64_t v4 = (char *)*((void *)a2 + 2);
      size_t v5 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      uint64_t v6 = 16 * *((int *)a2 + 6);
      do
      {
        bzero(v4, v5);
        v4 += v6;
        --v3;
      }
      while (v3);
    }
    return 0;
  }
}

unint64_t HBlackHole::GetDOD(HBlackHole *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)&a4.var2;
    uint64_t v7 = *(void *)&a4.var0;
    float v8 = (double *)this;
    (*(void (**)(HBlackHole *, void, float64x2_t *))(*(void *)this + 104))(this, 0, v31);
    float v18 = *((float *)v31[0].f64 + 1);
    float v19 = *(float *)v31[0].f64;
    (*(void (**)(double *, uint64_t, float64x2_t *))(*(void *)v8 + 104))(v8, 1, v31);
    float v9 = *(float *)v31[0].f64;
    float v10 = *(float *)&v31[0].f64[1];
    v31[0] = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v31[1] = _Q0;
    __n128 v16 = v8 + 52;
    v8 += 68;
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v29.f64[0] = (double)(int)v7;
    v29.f64[1] = (double)SHIDWORD(v7);
    unionBlackHolePoint(v31, v16, v8, &v30, &v29, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v28.f64[0] = (double)(int)v6;
    v28.f64[1] = (double)SHIDWORD(v7);
    unionBlackHolePoint(v31, v16, v8, &v30, &v28, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v27.f64[0] = (double)(int)v6;
    v27.f64[1] = (double)SHIDWORD(v6);
    unionBlackHolePoint(v31, v16, v8, &v30, &v27, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v26.f64[0] = (double)(int)v7;
    v26.f64[1] = (double)SHIDWORD(v6);
    unionBlackHolePoint(v31, v16, v8, &v30, &v26, v10, v9);
    float v24 = v19;
    float v25 = v18;
    PCMatrix44Tmpl<double>::transform<float>(v16, &v24, (uint64_t)&v24);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v23.f64[0] = v24;
    v23.f64[1] = (double)SHIDWORD(v6);
    unionBlackHolePoint(v31, v16, v8, &v30, &v23, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v22.f64[0] = v24;
    v22.f64[1] = (double)SHIDWORD(v7);
    unionBlackHolePoint(v31, v16, v8, &v30, &v22, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v21.f64[0] = (double)(int)v7;
    v21.f64[1] = v25;
    unionBlackHolePoint(v31, v16, v8, &v30, &v21, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v20.f64[0] = (double)(int)v6;
    v20.f64[1] = v25;
    unionBlackHolePoint(v31, v16, v8, &v30, &v20, v10, v9);
    unsigned int v4 = vcvtmd_s64_f64(v31[0].f64[0] + 0.5);
    LODWORD(v5) = vcvtmd_s64_f64(v31[0].f64[1] + 0.5);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void unionBlackHolePoint(float64x2_t *a1, double *a2, double *a3, float64x2_t *a4, float64x2_t *a5, float a6, float a7)
{
  *a5 = vdivq_f64(*a5, (float64x2_t)vdupq_lane_s64(COERCE__INT64(a6), 0));
  PCMatrix44Tmpl<double>::transform<double>(a3, a5->f64, a5->f64);
  float64x2_t v12 = vsubq_f64(*a5, *a4);
  double v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)));
  if (v13 <= a7) {
    float64x2_t v14 = *a4;
  }
  else {
    float64x2_t v14 = vsubq_f64(*a5, vdivq_f64(vmulq_n_f64(v12, a7), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0)));
  }
  *a5 = v14;
  float64x2_t v15 = 0uLL;
  PCMatrix44Tmpl<double>::transform<double>(a2, a5->f64, v15.f64);
  PCRect<double>::operator|=(a1, &v15);
}

int8x16_t HBlackHole::TransformPoint@<Q0>(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X3>, float64x2_t *a5@<X4>, uint64_t a6@<X8>, float a7@<S0>, float a8@<S1>, float a9@<S2>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 544), a2, (double *)a6);
  float64x2_t v17 = vsubq_f64(*(float64x2_t *)a6, *a3);
  double v18 = sqrt(vaddvq_f64(vmulq_f64(v17, v17)));
  if (v18 <= -0.000000100000001 || v18 >= 0.000000100000001) {
    float64x2_t v17 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0));
  }
  double v19 = v18 / a8;
  double v20 = 1.0;
  if (v19 <= 1.0) {
    double v20 = v18 / a8;
  }
  BOOL v21 = v19 < 0.0;
  double v22 = 0.0;
  if (!v21) {
    double v22 = v20;
  }
  float v23 = v22 * a7;
  *(float64x2_t *)a6 = vaddq_f64(*a3, vmulq_n_f64(v17, v18 + v23));
  long long v27 = 0uLL;
  PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 416), (double *)a6, (double *)&v27);
  *(_OWORD *)a6 = v27;
  int8x16_t v24 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)a6, a9);
  int8x16_t v25 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v24, *a4), v24, *(int8x16_t *)a4);
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f64(*a5, (float64x2_t)v25), v25, *(int8x16_t *)a5);
  *(int8x16_t *)a6 = result;
  return result;
}

unint64_t HBlackHole::GetROI(HBlackHole *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int var1 = a4.var1;
  int var3 = a4.var3;
  if (a3)
  {
    if (a3 == 1)
    {
      (*(void (**)(HBlackHole *, uint64_t, long long *))(*(void *)this + 104))(this, 1, &v54);
      LODWORD(v9) = (int)(float)(int)v5 - 1;
      unint64_t v10 = ((int)(float)var1 - 1);
    }
    else
    {
      LODWORD(v9) = 0;
      unint64_t v10 = 0;
    }
  }
  else
  {
    (*(void (**)(HBlackHole *, void, long long *))(*(void *)this + 104))(this, 0, &v54);
    uint64_t v11 = v54;
    (*(void (**)(HBlackHole *, uint64_t, long long *))(*(void *)this + 104))(this, 1, &v54);
    uint64_t v12 = v54;
    float v13 = *((float *)&v54 + 2);
    (*(void (**)(HBlackHole *, uint64_t, long long *))(*(void *)this + 104))(this, 8, &v54);
    uint64_t v14 = v54;
    (*(void (**)(HBlackHole *, uint64_t, long long *))(*(void *)this + 104))(this, 9, &v54);
    float v15 = *((float *)&v54 + 1);
    float v16 = *(float *)&v54;
    float v42 = v13;
    if ((int)v5 - 2 <= (int)v4 + 2)
    {
      int v18 = var3 + 2;
      int v17 = var1 - 2;
      uint64_t v40 = v54;
      int v20 = v5 - 5;
      double v19 = -3.40282347e38;
      double v43 = 3.40282347e38;
      double v45 = 3.40282347e38;
      double v48 = -3.40282347e38;
      double v21 = *(float *)&v54;
      double v22 = *((float *)&v54 + 1);
      do
      {
        *(double *)&long long v54 = (double)(v20 + 3);
        *((double *)&v54 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (double)(var3 + 2);
        *(double *)&long long v53 = *(double *)&v54;
        *((double *)&v53 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (double)v17;
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        double v23 = v43;
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v21;
        v49.f64[1] = v22;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v54, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        long long v54 = v52;
        if (*(double *)&v52 < v43) {
          double v23 = *(double *)&v54;
        }
        if (*((double *)&v52 + 1) >= v45) {
          double v24 = v45;
        }
        else {
          double v24 = *((double *)&v54 + 1);
        }
        double v46 = v24;
        if (*(double *)&v52 <= v19) {
          double v25 = v19;
        }
        else {
          double v25 = *(double *)&v52;
        }
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        if (*((double *)&v52 + 1) <= v48) {
          double v26 = v48;
        }
        else {
          double v26 = *((double *)&v52 + 1);
        }
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v21;
        v49.f64[1] = v22;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v53, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        long long v53 = v52;
        if (*(double *)&v52 >= v23) {
          double v27 = v23;
        }
        else {
          double v27 = *(double *)&v52;
        }
        double v28 = v46;
        if (*((double *)&v52 + 1) < v46) {
          double v28 = *((double *)&v52 + 1);
        }
        double v43 = v27;
        double v45 = v28;
        if (*(double *)&v52 <= v25) {
          double v19 = v25;
        }
        else {
          double v19 = *(double *)&v52;
        }
        if (*((double *)&v52 + 1) <= v26) {
          double v29 = v26;
        }
        else {
          double v29 = *((double *)&v52 + 1);
        }
        double v48 = v29;
        ++v20;
      }
      while (v4 != v20);
      float v15 = *((float *)&v40 + 1);
      float v16 = *(float *)&v40;
    }
    else
    {
      int v17 = var1 - 2;
      int v18 = var3 + 2;
      double v19 = -3.40282347e38;
      double v45 = 3.40282347e38;
      double v48 = -3.40282347e38;
      double v43 = 3.40282347e38;
    }
    if (v17 <= v18)
    {
      int v31 = var3 + 3;
      double v41 = v15;
      double v30 = v19;
      double v32 = v16;
      do
      {
        *(double *)&long long v54 = (double)((int)v5 - 2);
        *((double *)&v54 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (double)v17;
        *(double *)&long long v53 = (double)((int)v4 + 2);
        *((double *)&v53 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (double)v17;
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v32;
        v49.f64[1] = v41;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v54, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        long long v54 = v52;
        if (*(double *)&v52 >= v43) {
          double v33 = v43;
        }
        else {
          double v33 = *(double *)&v54;
        }
        double v34 = v45;
        if (*((double *)&v52 + 1) < v45) {
          double v34 = *((double *)&v54 + 1);
        }
        double v44 = v33;
        double v47 = v34;
        if (*(double *)&v52 > v30) {
          double v30 = *(double *)&v52;
        }
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        if (*((double *)&v52 + 1) <= v48) {
          double v35 = v48;
        }
        else {
          double v35 = *((double *)&v52 + 1);
        }
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v32;
        v49.f64[1] = v41;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v53, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        long long v53 = v52;
        if (*(double *)&v52 >= v44) {
          double v36 = v44;
        }
        else {
          double v36 = *(double *)&v52;
        }
        double v37 = v47;
        if (*((double *)&v52 + 1) < v47) {
          double v37 = *((double *)&v52 + 1);
        }
        double v43 = v36;
        double v45 = v37;
        if (*(double *)&v52 > v30) {
          double v30 = *(double *)&v52;
        }
        if (*((double *)&v52 + 1) <= v35) {
          double v38 = v35;
        }
        else {
          double v38 = *((double *)&v52 + 1);
        }
        double v48 = v38;
        ++v17;
      }
      while (v31 != v17);
    }
    else
    {
      double v30 = v19;
    }
    unint64_t v9 = HGRectUnion((int)(v43 + -2.0) | ((unint64_t)(int)(v45 + -2.0) << 32), (int)(v30 + 2.0) | ((unint64_t)(int)(v48 + 2.0) << 32), v5, v4);
    unint64_t v10 = HIDWORD(v9);
  }
  return v9 | (v10 << 32);
}

uint64_t HBlackHole::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v7 = v6;
  (*(void (**)(HGNode *, uint64_t, float, float, double, double))(*(void *)this + 96))(this, 8, (float)(int)DOD, (float)SHIDWORD(DOD), 0.0, 0.0);
  (*(void (**)(HGNode *, uint64_t, float, float, double, double))(*(void *)this + 96))(this, 9, (float)(int)v7, (float)SHIDWORD(v7), 0.0, 0.0);
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2)) {
    (*(void (**)(HGNode *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
  }

  return HgcBlackHole::GetOutput((HgcBlackHole *)this, a2);
}

void HBlackHole::~HBlackHole(HGNode *this)
{
  HgcBlackHole::~HgcBlackHole(this);

  HGObject::operator delete(v1);
}

uint64_t PCMatrix44Tmpl<double>::transform<float>(double *a1, float *a2, uint64_t a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  float v5 = a1[15] + a1[12] * v3 + a1[13] * v4;
  double v6 = v5;
  float v7 = (a1[3] + *a1 * v3 + a1[1] * v4) / v6;
  *(float *)&double v3 = (a1[7] + a1[4] * v3 + a1[5] * v4) / v6;
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 4) = LODWORD(v3);
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;

  double v3 = *a2;
  double v4 = a2[1];
  float v5 = a2[2];
  double v6 = a2[3];
  float v7 = *a1 * v3 + a1[1] * v4 + a1[2] * v5 + a1[3] * v6;
  float v8 = a1[4] * v3 + a1[5] * v4 + a1[6] * v5 + a1[7] * v6;
  *(float *)a3 = v7;
  *(float *)(a3 + 4) = v8;
  unint64_t v9 = a1[8] * v3 + a1[9] * v4 + a1[10] * v5 + a1[11] * v6;
  *(float *)&double v3 = a1[12] * v3 + a1[13] * v4 + a1[14] * v5 + a1[15] * v6;
  *(float *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = LODWORD(v3);
  return a3;
}

uint64_t HBulge::RenderTile(HBulge *this, float32x4_t **a2)
{
  if (a2[10])
  {
    return HgcBulge::RenderTile(this, a2);
  }
  else
  {
    int v3 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
    if (v3 >= 1)
    {
      double v4 = a2[2];
      size_t v5 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      uint64_t v6 = 16 * *((int *)a2 + 6);
      do
      {
        bzero(v4, v5);
        double v4 = (float32x4_t *)((char *)v4 + v6);
        --v3;
      }
      while (v3);
    }
    return 0;
  }
}

uint64_t HBulge::GetDOD(HBulge *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    (*(void (**)(HBulge *, void, float *, void, void))(*(void *)this + 104))(this, 0, &v9, *(void *)&a4.var0, *(void *)&a4.var2);
    float v6 = v9;
    float v5 = v10;
    (*(void (**)(HBulge *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v9);
    float v7 = v9;
    (*(void (**)(HBulge *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v9);
    *(void *)&a4.int var0 = HGRectMake4i(vcvtmd_s64_f64((float)(v6 - (float)(v9 / v7)) + 0.0000001), vcvtmd_s64_f64((float)(v5 - (float)(v10 / v7)) + 0.0000001), vcvtpd_s64_f64((float)(v6 - (float)(v9 / v7)) + (float)((float)(v9 / v7) + (float)(v9 / v7))), vcvtpd_s64_f64((float)(v5 - (float)(v10 / v7)) + (float)((float)(v10 / v7)+ (float)(v10 / v7))));
  }
  return *(void *)&a4.var0;
}

unint64_t HBulge::GetROI(HBulge *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var1 = a4.var1;
    int var3 = a4.var3;
    (*(void (**)(HBulge *, void, float *))(*(void *)this + 104))(this, 0, &v111);
    float v11 = v111;
    float v12 = v112;
    (*(void (**)(HBulge *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v111);
    float v13 = v111;
    float v14 = v112;
    (*(void (**)(HBulge *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v111);
    double v15 = v11;
    double v16 = v12;
    double v17 = v111;
    float v18 = (float)var0;
    double v19 = v112;
    BOOL v20 = v11 >= (float)var0;
    float v21 = (float)var2;
    if (v11 > (float)var2) {
      BOOL v20 = 0;
    }
    float v22 = (float)var1;
    float v23 = (float)var3;
    BOOL v24 = v12 >= (float)var1;
    if (v12 > (float)var3) {
      BOOL v24 = 0;
    }
    if (v18 <= v21)
    {
      double v29 = ((double)var1 - v16) / v19;
      float v30 = v29;
      double v31 = ((double)var3 - v16) / v19;
      float v32 = v31;
      double v33 = (v16 - v16) / v19;
      float v34 = v33;
      double v27 = -3.40282347e38;
      double v28 = 3.40282347e38;
      double v25 = 3.40282347e38;
      double v26 = -3.40282347e38;
      do
      {
        double v35 = (v18 - v15) / v17;
        float v36 = v35;
        float v37 = v36 * v36;
        float v38 = sqrtf((float)(v30 * v30) + (float)(v36 * v36));
        if (v36 == 0.0 && v30 == 0.0) {
          float v38 = 0.0;
        }
        float v39 = 1.0 - (float)(v13 * v38);
        float v40 = fmaxf(v39, 0.0);
        if (v39 >= 1.0) {
          float v41 = 1.0;
        }
        else {
          float v41 = v40;
        }
        float v42 = fmaxf(v41, 0.0);
        if (v41 >= 1.0) {
          float v43 = 1.0;
        }
        else {
          float v43 = v42;
        }
        float v44 = (3.0 - (v43 + v43)) * (float)(v43 * v43);
        double v45 = (float)((float)(v14 * v44) + 1.0);
        double v46 = v35 * v45 * v17 + v15;
        double v47 = v29 * v45 * v19 + v16;
        if (v46 < v25) {
          double v25 = v46;
        }
        if (v47 < v28) {
          double v28 = v47;
        }
        if (v46 > v26) {
          double v26 = v46;
        }
        if (v47 > v27) {
          double v27 = v47;
        }
        float v48 = sqrtf((float)(v32 * v32) + v37);
        if (v36 == 0.0 && v32 == 0.0) {
          float v48 = 0.0;
        }
        float v49 = 1.0 - (float)(v13 * v48);
        float v50 = fmaxf(v49, 0.0);
        if (v49 >= 1.0) {
          float v51 = 1.0;
        }
        else {
          float v51 = v50;
        }
        float v52 = fmaxf(v51, 0.0);
        if (v51 >= 1.0) {
          float v53 = 1.0;
        }
        else {
          float v53 = v52;
        }
        float v54 = (3.0 - (v53 + v53)) * (float)(v53 * v53);
        double v55 = (float)((float)(v14 * v54) + 1.0);
        double v56 = v35 * v55 * v17 + v15;
        double v57 = v31 * v55 * v19 + v16;
        if (v56 < v25) {
          double v25 = v56;
        }
        if (v57 < v28) {
          double v28 = v57;
        }
        if (v56 > v26) {
          double v26 = v56;
        }
        if (v57 > v27) {
          double v27 = v57;
        }
        if (v24)
        {
          BOOL v58 = v34 == 0.0 && v36 == 0.0;
          float v59 = sqrtf((float)(v34 * v34) + v37);
          if (v58) {
            float v59 = 0.0;
          }
          float v60 = 1.0 - (float)(v13 * v59);
          float v61 = fmaxf(v60, 0.0);
          if (v60 >= 1.0) {
            float v62 = 1.0;
          }
          else {
            float v62 = v61;
          }
          float v63 = fmaxf(v62, 0.0);
          if (v62 >= 1.0) {
            float v64 = 1.0;
          }
          else {
            float v64 = v63;
          }
          float v65 = (3.0 - (v64 + v64)) * (float)(v64 * v64);
          double v66 = (float)((float)(v14 * v65) + 1.0);
          double v67 = v35 * v66 * v17 + v15;
          double v68 = v33 * v66 * v19 + v16;
          if (v67 < v25) {
            double v25 = v67;
          }
          if (v68 < v28) {
            double v28 = v68;
          }
          if (v67 > v26) {
            double v26 = v67;
          }
          if (v68 > v27) {
            double v27 = v68;
          }
        }
        float v18 = v18 + 1.0;
      }
      while (v18 <= v21);
    }
    else
    {
      double v25 = 3.40282347e38;
      double v26 = -3.40282347e38;
      double v27 = -3.40282347e38;
      double v28 = 3.40282347e38;
    }
    if (v22 <= v23)
    {
      double v69 = ((double)var0 - v15) / v17;
      float v70 = v69;
      double v71 = ((double)var2 - v15) / v17;
      float v72 = v71;
      double v73 = (v15 - v15) / v17;
      float v74 = v73;
      do
      {
        double v75 = (v22 - v16) / v19;
        float v76 = v75;
        float v77 = v76 * v76;
        float v78 = sqrtf((float)(v70 * v70) + (float)(v76 * v76));
        if (v70 == 0.0 && v76 == 0.0) {
          float v78 = 0.0;
        }
        float v79 = 1.0 - (float)(v13 * v78);
        float v80 = fmaxf(v79, 0.0);
        if (v79 >= 1.0) {
          float v81 = 1.0;
        }
        else {
          float v81 = v80;
        }
        float v82 = fmaxf(v81, 0.0);
        if (v81 >= 1.0) {
          float v83 = 1.0;
        }
        else {
          float v83 = v82;
        }
        float v84 = (3.0 - (v83 + v83)) * (float)(v83 * v83);
        double v85 = (float)((float)(v14 * v84) + 1.0);
        double v86 = v69 * v85 * v17 + v15;
        double v87 = v75 * v85 * v19 + v16;
        if (v86 < v25) {
          double v25 = v86;
        }
        if (v87 < v28) {
          double v28 = v87;
        }
        if (v86 > v26) {
          double v26 = v86;
        }
        if (v87 > v27) {
          double v27 = v87;
        }
        float v88 = sqrtf((float)(v72 * v72) + v77);
        if (v72 == 0.0 && v76 == 0.0) {
          float v88 = 0.0;
        }
        float v89 = 1.0 - (float)(v13 * v88);
        float v90 = fmaxf(v89, 0.0);
        if (v89 >= 1.0) {
          float v91 = 1.0;
        }
        else {
          float v91 = v90;
        }
        float v92 = fmaxf(v91, 0.0);
        if (v91 >= 1.0) {
          float v93 = 1.0;
        }
        else {
          float v93 = v92;
        }
        float v94 = (3.0 - (v93 + v93)) * (float)(v93 * v93);
        double v95 = (float)((float)(v14 * v94) + 1.0);
        double v96 = v71 * v95 * v17 + v15;
        double v97 = v75 * v95 * v19 + v16;
        if (v96 < v25) {
          double v25 = v96;
        }
        if (v97 < v28) {
          double v28 = v97;
        }
        if (v96 > v26) {
          double v26 = v96;
        }
        if (v97 > v27) {
          double v27 = v97;
        }
        if (v20)
        {
          BOOL v98 = v76 == 0.0 && v74 == 0.0;
          float v99 = sqrtf((float)(v74 * v74) + v77);
          if (v98) {
            float v99 = 0.0;
          }
          float v100 = 1.0 - (float)(v13 * v99);
          float v101 = fmaxf(v100, 0.0);
          if (v100 >= 1.0) {
            float v102 = 1.0;
          }
          else {
            float v102 = v101;
          }
          float v103 = fmaxf(v102, 0.0);
          if (v102 >= 1.0) {
            float v104 = 1.0;
          }
          else {
            float v104 = v103;
          }
          float v105 = (3.0 - (v104 + v104)) * (float)(v104 * v104);
          double v106 = (float)((float)(v14 * v105) + 1.0);
          double v107 = v75 * v106;
          double v108 = v73 * v106 * v17 + v15;
          double v109 = v107 * v19 + v16;
          if (v108 < v25) {
            double v25 = v108;
          }
          if (v109 < v28) {
            double v28 = v109;
          }
          if (v108 > v26) {
            double v26 = v108;
          }
          if (v109 > v27) {
            double v27 = v109;
          }
        }
        float v22 = v22 + 1.0;
      }
      while (v22 <= v23);
    }
    unsigned int v4 = (int)(v25 + -2.0);
    uint64_t v5 = (int)(v28 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HBulge::GetOutput(HBulge *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2)) {
    (*(void (**)(HBulge *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
  }

  return HgcBulge::GetOutput(this, a2);
}

void HBulge::~HBulge(HGNode *this)
{
  HgcBulge::~HgcBulge(this);

  HGObject::operator delete(v1);
}

uint64_t HBumpMap::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

unint64_t HBumpMap::GetROI(HBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *(void *)&a4.var2;
  }
  if (a3) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = *(void *)&a4.var0;
  }
  if (a3 == 1)
  {
    uint64_t v7 = *(void *)&a4.var2;
    uint64_t v8 = *(void *)&a4.var0;
    (*(void (**)(HBumpMap *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 5, v49);
    float v9 = *(float *)v49;
    (*(void (**)(HBumpMap *, void, unsigned char *))(*(void *)this + 104))(this, 0, v49);
    if (v9 <= 1.0)
    {
      float v21 = vmuls_lane_f32(255.0, *(float32x2_t *)v49, 1);
      int v22 = vcvtms_s32_f32((float)(255.0 * *(float *)v49) + (float)(int)v8);
      int v23 = vcvtms_s32_f32(v21 + (float)SHIDWORD(v8));
      if (v22 >= (int)v8) {
        LODWORD(v6) = v8;
      }
      else {
        LODWORD(v6) = v22;
      }
      if (v23 >= SHIDWORD(v8)) {
        LODWORD(v2pthread_cond_init((pthread_cond_t *)this, 0) = HIDWORD(v8);
      }
      else {
        LODWORD(v2pthread_cond_init((pthread_cond_t *)this, 0) = v23;
      }
      int v24 = vcvtps_s32_f32((float)(255.0 * *(float *)v49) + (float)(int)v7);
      LODWORD(v1pthread_cond_init((pthread_cond_t *)this, 0) = vcvtps_s32_f32(v21 + (float)SHIDWORD(v7));
      if (v24 <= (int)v7) {
        int v24 = v7;
      }
      if ((int)v10 <= SHIDWORD(v7)) {
        unint64_t v25 = v7 & 0xFFFFFFFF00000000;
      }
      else {
        unint64_t v25 = v10 << 32;
      }
      unint64_t v5 = v25 & 0xFFFFFFFF00000000 | v24;
    }
    else
    {
      float32x2_t v36 = *(float32x2_t *)v49;
      (*(void (**)(HBumpMap *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 1, v49);
      long long v11 = *(_OWORD *)v49;
      (*(void (**)(HBumpMap *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 2, v49);
      long long v12 = *(_OWORD *)v49;
      (*(void (**)(HBumpMap *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 3, v49);
      *(_OWORD *)float v13 = *(_OWORD *)v49;
      (*(void (**)(HBumpMap *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 4, v49);
      *(_OWORD *)&unsigned char v13[16] = *(_OWORD *)v49;
      int v55 = 1065353216;
      int v52 = 1065353216;
      uint64_t v51 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      *(void *)float v49 = v11;
      *(_OWORD *)&v49[8] = *(long long *)((char *)&v11 + 8);
      uint64_t v50 = *((void *)&v12 + 1);
      *(float *)v48.i32 = (float)(int)v8;
      *(float *)&v48.i32[1] = (float)SHIDWORD(v8);
      v48.i64[1] = 0x3F80000000000000;
      *(float *)v47.i32 = (float)(int)v7;
      *(float *)&v47.i32[1] = (float)SHIDWORD(v7);
      v47.i64[1] = 0x3F80000000000000;
      PCMatrix44Tmpl<float>::transform<float>((float *)v49, (float *)v48.i32, (float *)v48.i32);
      PCMatrix44Tmpl<float>::transform<float>((float *)v49, (float *)v47.i32, (float *)v47.i32);
      int v14 = 0;
      int8x16_t v16 = v47;
      int8x16_t v15 = v48;
      float64x2_t v17 = vcvtq_f64_f32(v36);
      do
      {
        int8x16_t v18 = (int8x16_t)vmulq_n_f64(v17, (float)v14 * 255.0);
        *(float32x2_t *)v19.f32 = vcvt_f32_f64(vaddq_f64((float64x2_t)v18, vcvtq_f64_f32(*(float32x2_t *)v15.i8)));
        *(float32x2_t *)v18.i8 = vcvt_f32_f64(vaddq_f64((float64x2_t)v18, vcvtq_f64_f32(*(float32x2_t *)v16.i8)));
        v19.i64[1] = 0x3F80000000000000;
        int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v15, v19), (int8x16_t)v19, v15);
        v18.i64[1] = 0x3F80000000000000;
        int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v18, (float32x4_t)v16), v18, v16);
        ++v14;
      }
      while (v14 != 2);
      int8x16_t v45 = v16;
      int8x16_t v46 = v15;
      int v44 = 1065353216;
      int v41 = 1065353216;
      uint64_t v40 = 0;
      uint64_t v43 = 0;
      uint64_t v42 = 0;
      uint64_t v37 = *(void *)v13;
      long long v38 = *(_OWORD *)&v13[8];
      uint64_t v39 = *(void *)&v13[24];
      PCMatrix44Tmpl<float>::transform<float>((float *)&v37, (float *)v46.i32, (float *)v46.i32);
      PCMatrix44Tmpl<float>::transform<float>((float *)&v37, (float *)v45.i32, (float *)v45.i32);
      unint64_t v6 = HGRectMake4i(vcvtms_s32_f32(*(float *)v46.i32), vcvtms_s32_f32(*(float *)&v46.i32[1]), vcvtps_s32_f32(*(float *)v45.i32), vcvtps_s32_f32(*(float *)&v45.i32[1]));
      unint64_t v20 = HIDWORD(v6);
    }
  }
  else
  {
    unint64_t v20 = HIDWORD(v6);
  }
  uint64_t v26 = (v20 - 1);
  int v27 = v5 + 1;
  unint64_t v28 = ((v5 & 0xFFFFFFFF00000000) + 0x100000000) >> 32;
  if ((int)v6 < -2147483645
    || v27 == 0x7FFFFFFF
    || v27 < -2147483646
    || (int)v20 < -2147483645
    || v28 == 0x7FFFFFFF
    || (int)v28 < -2147483646)
  {
    return 0;
  }
  else
  {
    return (v6 - 1) | (unint64_t)(v26 << 32);
  }
}

uint64_t HBumpMap::GetOutput(HBumpMap *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2))
  {
    (*(void (**)(HBumpMap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 1, 2);
    (*(void (**)(HBumpMap *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
  }

  return HgcBumpMap::GetOutput(this, a2);
}

void HBumpMap::~HBumpMap(HGNode *this)
{
  HgcBumpMap::~HgcBumpMap(this);

  HGObject::operator delete(v1);
}

uint64_t HDisplace::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

double TransformPoint@<D0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, uint64_t a7@<X8>)
{
  float v7 = a1[1];
  float v8 = a1[2];
  float v9 = a1[3];
  float v10 = (float)((float)((float)((float)(*a1 * *a4) + (float)(v7 * a4[1])) + (float)(v8 * a4[2])) + (float)(v9 * a4[3]))
      + (float)(*a6 * 255.0);
  float v11 = (float)((float)((float)((float)(*a1 * *a5) + (float)(v7 * a5[1])) + (float)(v8 * a5[2])) + (float)(v9 * a5[3]))
      + (float)(a6[1] * 255.0);
  float v12 = (float)(a6[2] * 255.0) + 0.0;
  float v13 = (float)(a6[3] * 255.0) + 1.0;
  float v14 = (float)((float)((float)(v10 * *a2) + (float)(v11 * a2[1])) + (float)(v12 * a2[2])) + (float)(v13 * a2[3]);
  float v15 = (float)(v10 * *a3) + (float)(v11 * a3[1]);
  float v16 = v12 * a3[2];
  float v17 = v13 * a3[3];
  *(float *)a7 = v14;
  *(float *)(a7 + 4) = (float)(v15 + v16) + v17;
  double result = 0.0078125;
  *(void *)(a7 + 8) = 0x3F80000000000000;
  return result;
}

unint64_t HDisplace::GetROI(HDisplace *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int var1 = a4.var1;
  if (a3 == 1)
  {
    int var3 = a4.var3;
    (*(void (**)(HDisplace *, void, long long *))(*(void *)this + 104))(this, 0, &v26);
    long long v25 = v26;
    (*(void (**)(HDisplace *, uint64_t, long long *))(*(void *)this + 104))(this, 1, &v26);
    long long v24 = v26;
    (*(void (**)(HDisplace *, uint64_t, long long *))(*(void *)this + 104))(this, 2, &v26);
    long long v23 = v26;
    (*(void (**)(HDisplace *, uint64_t, long long *))(*(void *)this + 104))(this, 3, &v26);
    long long v22 = v26;
    (*(void (**)(HDisplace *, uint64_t, long long *))(*(void *)this + 104))(this, 4, &v26);
    long long v21 = v26;
    *(float *)&long long v20 = (float)(int)v5;
    *((float *)&v20 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)var1;
    *((void *)&v20 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F80000000000000;
    *(float *)&long long v19 = (float)(int)v4;
    *((float *)&v19 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)var3;
    *((void *)&v19 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F80000000000000;
    TransformPoint((float *)&v20, (float *)&v25, (float *)&v24, (float *)&v23, (float *)&v22, (float *)&v21, (uint64_t)&v18);
    long long v20 = v18;
    TransformPoint((float *)&v19, (float *)&v25, (float *)&v24, (float *)&v23, (float *)&v22, (float *)&v21, (uint64_t)&v18);
    long long v19 = v18;
    LODWORD(v9) = vcvtms_s32_f32(*(float *)&v20);
    LODWORD(v1pthread_cond_init((pthread_cond_t *)this, 0) = vcvtms_s32_f32(*((float *)&v20 + 1));
    LODWORD(v1HGRenderQueue::CancelAllRenderJobs(*this, 1) = vcvtps_s32_f32(*(float *)&v18);
    LODWORD(v12) = vcvtps_s32_f32(*((float *)&v18 + 1));
    unint64_t v13 = HGRectUnion(v9 | (v10 << 32), v11 | (v12 << 32), v5, v4);
    unint64_t v14 = HIDWORD(v13);
    unsigned int v15 = v13 - 1;
    unsigned int v16 = v14 - 1;
  }
  else
  {
    if (a3) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = a4.var0 - 1;
    }
    if (a3) {
      unsigned int v16 = 0;
    }
    else {
      unsigned int v16 = a4.var1 - 1;
    }
  }
  return v15 | ((unint64_t)v16 << 32);
}

void HDisplace::~HDisplace(HGNode *this)
{
  HgcDisplace::~HgcDisplace(this);

  HGObject::operator delete(v1);
}

unint64_t HFisheye::GetROI(float32x4_t *this, HGRenderer *a2, int a3, HGRect a4, double a5, double a6, __n128 a7)
{
  if (a3)
  {
    LODWORD(v7) = 0;
    LODWORD(v8) = 0;
  }
  else
  {
    *(float *)v10.i32 = (float)a4.var2;
    a7.n128_f32[0] = (float)a4.var1;
    float var3 = (float)a4.var3;
    float v96 = (float)a4.var3;
    float var2 = (float)a4.var2;
    float var0 = (float)a4.var0;
    if ((float)a4.var0 <= (float)a4.var2)
    {
      float32x4_t v92 = this[30];
      float32x4_t v94 = this[29];
      float32x4_t v98 = this[33];
      float32x4_t v90 = this[32];
      float v14 = this[31].f32[0];
      float32x4_t v13 = (float32x4_t)xmmword_1B7E74750;
      float32x4_t v12 = (float32x4_t)xmmword_1B7E74740;
      float32x4_t v15 = this[27];
      float32x4_t v86 = this[28];
      float32x4_t v88 = v15;
      v15.f32[0] = (float)a4.var0;
      __n128 v100 = a7;
      do
      {
        float32x4_t v102 = v12;
        float32x4_t v106 = v13;
        float32x4_t v83 = v15;
        v16.i64[0] = __PAIR64__(a7.n128_u32[0], v15.u32[0]);
        v15.f32[1] = var3;
        uint64_t v79 = v15.i64[0];
        v16.i64[1] = 0x3F80000000000000;
        int8x16_t v17 = (int8x16_t)vmulq_f32(v16, v94);
        *(float32x2_t *)v17.i8 = vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
        int8x16_t v18 = (int8x16_t)vmulq_f32(v16, v92);
        *(float32x2_t *)v18.i8 = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
        *(float32x2_t *)v18.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v18.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v18.i8));
        float32x4_t v75 = vsubq_f32((float32x4_t)v18, v98);
        int8x16_t v76 = (int8x16_t)vmulq_f32(v90, vmulq_f32(v75, v75));
        float v19 = sqrtf(vaddv_f32(*(float32x2_t *)v76.i8));
        *(float *)v20.i32 = powf(v19, v14) / v19;
        *(float32x2_t *)v21.f32 = vmul_f32(*(float32x2_t *)v75.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v20, 0));
        v21.i64[1] = 0x3F80000000000000;
        float32x4_t v22 = vaddq_f32(v98, v21);
        int8x16_t v23 = (int8x16_t)vmulq_f32(v88, v22);
        *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        int8x16_t v24 = (int8x16_t)vmulq_f32(v86, v22);
        *(float32x2_t *)v24.i8 = vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
        *(float32x2_t *)v24.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v24.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v24.i8));
        v24.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
        float32x4_t v103 = vminnmq_f32((float32x4_t)v24, v102);
        float32x4_t v107 = vmaxnmq_f32((float32x4_t)v24, v106);
        v23.i64[0] = v79;
        v23.i64[1] = 0x3F80000000000000;
        int8x16_t v25 = (int8x16_t)vmulq_f32((float32x4_t)v23, v94);
        *(float32x2_t *)v25.i8 = vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
        int8x16_t v26 = (int8x16_t)vmulq_f32((float32x4_t)v23, v92);
        *(float32x2_t *)v26.i8 = vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
        *(float32x2_t *)v25.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v26.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v26.i8));
        float32x4_t v77 = vsubq_f32((float32x4_t)v25, v98);
        int8x16_t v80 = (int8x16_t)vmulq_f32(v90, vmulq_f32(v77, v77));
        float v27 = sqrtf(vaddv_f32(*(float32x2_t *)v80.i8));
        float v28 = powf(v27, v14);
        float var3 = v96;
        *(float *)v29.i32 = v28 / v27;
        *(float32x2_t *)v30.f32 = vmul_f32(*(float32x2_t *)v77.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v29, 0));
        float32x4_t v15 = v83;
        v30.i64[1] = 0x3F80000000000000;
        float32x4_t v31 = vaddq_f32(v98, v30);
        int8x16_t v32 = (int8x16_t)vmulq_f32(v88, v31);
        int8x16_t v33 = (int8x16_t)vmulq_f32(v86, v31);
        int32x2_t v10 = (int32x2_t)vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
        *(float32x2_t *)v33.i8 = vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
        *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)vzip1_s32(v10, *(int32x2_t *)v33.i8), (float32x2_t)vzip2_s32(v10, *(int32x2_t *)v33.i8));
        a7 = v100;
        v33.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
        *(float *)v10.i32 = var2;
        float32x4_t v12 = vminnmq_f32((float32x4_t)v33, v103);
        v15.f32[0] = v83.f32[0] + 1.0;
        float32x4_t v13 = vmaxnmq_f32((float32x4_t)v33, v107);
      }
      while ((float)(v83.f32[0] + 1.0) <= var2);
    }
    else
    {
      float32x4_t v12 = (float32x4_t)xmmword_1B7E74740;
      float32x4_t v13 = (float32x4_t)xmmword_1B7E74750;
    }
    if (a7.n128_f32[0] <= var3)
    {
      float32x4_t v93 = this[30];
      float32x4_t v95 = this[29];
      float32x4_t v99 = this[33];
      float v34 = this[31].f32[0];
      float32x4_t v89 = this[27];
      float32x4_t v91 = this[32];
      float32x4_t v87 = this[28];
      do
      {
        float32x4_t v104 = v12;
        float32x4_t v108 = v13;
        __n128 v101 = a7;
        v35.i64[0] = __PAIR64__(a7.n128_u32[0], LODWORD(var0));
        v10.i32[1] = a7.n128_u32[0];
        int32x2_t v84 = v10;
        v35.i64[1] = 0x3F80000000000000;
        int8x16_t v36 = (int8x16_t)vmulq_f32(v35, v95);
        *(float32x2_t *)v36.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
        int8x16_t v37 = (int8x16_t)vmulq_f32(v35, v93);
        *(float32x2_t *)v37.i8 = vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
        *(float32x2_t *)v37.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v37.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v37.i8));
        float32x4_t v78 = vsubq_f32((float32x4_t)v37, v99);
        int8x16_t v81 = (int8x16_t)vmulq_f32(v91, vmulq_f32(v78, v78));
        float v38 = sqrtf(vaddv_f32(*(float32x2_t *)v81.i8));
        *(float *)v39.i32 = powf(v38, v34) / v38;
        *(float32x2_t *)v40.f32 = vmul_f32(*(float32x2_t *)v78.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v39, 0));
        v40.i64[1] = 0x3F80000000000000;
        float32x4_t v41 = vaddq_f32(v99, v40);
        int8x16_t v42 = (int8x16_t)vmulq_f32(v89, v41);
        *(float32x2_t *)v42.i8 = vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
        int8x16_t v43 = (int8x16_t)vmulq_f32(v87, v41);
        *(float32x2_t *)v43.i8 = vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
        *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v43.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v43.i8));
        v43.i64[1] = vextq_s8(v81, v81, 8uLL).u64[0];
        float32x4_t v105 = vminnmq_f32((float32x4_t)v43, v104);
        float32x4_t v109 = vmaxnmq_f32((float32x4_t)v43, v108);
        *(int32x2_t *)v42.i8 = v84;
        v42.i64[1] = 0x3F80000000000000;
        int8x16_t v44 = (int8x16_t)vmulq_f32((float32x4_t)v42, v95);
        *(float32x2_t *)v44.i8 = vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
        int8x16_t v45 = (int8x16_t)vmulq_f32((float32x4_t)v42, v93);
        *(float32x2_t *)v45.i8 = vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
        *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v44.i8, *(int32x2_t *)v45.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v44.i8, *(int32x2_t *)v45.i8));
        float32x4_t v82 = vsubq_f32((float32x4_t)v44, v99);
        int8x16_t v85 = (int8x16_t)vmulq_f32(v91, vmulq_f32(v82, v82));
        float v46 = sqrtf(vaddv_f32(*(float32x2_t *)v85.i8));
        *(float *)v47.i32 = powf(v46, v34) / v46;
        *(float32x2_t *)v48.f32 = vmul_f32(*(float32x2_t *)v82.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v47, 0));
        v48.i64[1] = 0x3F80000000000000;
        float32x4_t v49 = vaddq_f32(v99, v48);
        int8x16_t v50 = (int8x16_t)vmulq_f32(v89, v49);
        int8x16_t v51 = (int8x16_t)vmulq_f32(v87, v49);
        int32x2_t v10 = (int32x2_t)vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
        *(float32x2_t *)v51.i8 = vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
        *(float32x2_t *)v51.i8 = vadd_f32((float32x2_t)vzip1_s32(v10, *(int32x2_t *)v51.i8), (float32x2_t)vzip2_s32(v10, *(int32x2_t *)v51.i8));
        a7 = v101;
        v51.i64[1] = vextq_s8(v85, v85, 8uLL).u64[0];
        float32x4_t v12 = vminnmq_f32((float32x4_t)v51, v105);
        a7.n128_f32[0] = v101.n128_f32[0] + 1.0;
        *(float *)v10.i32 = var2;
        float32x4_t v13 = vmaxnmq_f32((float32x4_t)v51, v109);
      }
      while ((float)(v101.n128_f32[0] + 1.0) <= v96);
    }
    unint64_t v52 = (int)v12.f32[0];
    uint64_t v53 = (int)v12.f32[1];
    uint64_t v54 = (int)v13.f32[0];
    uint64_t v55 = (int)v13.f32[1];
    if ((v52 - 0x7FFFFFFF) < 3
      || v54 == 0x7FFFFFFF
      || (int)v54 < -2147483646
      || v53 == 0x7FFFFFFF
      || (int)v53 < -2147483646
      || v55 == 0x7FFFFFFF
      || (int)v55 < -2147483646)
    {
      LODWORD(v7) = 0;
      LODWORD(v8) = 0;
    }
    else
    {
      uint64_t v62 = v54 | (v55 << 32);
      if (v54 == v52)
      {
        uint64_t v63 = v52 | (v53 << 32);
        uint64_t v64 = HGRectMake4f(v53, 0.0, 0.0, 1.0, 0.0);
        unint64_t v52 = HGRectGrow(v63, v62, v64);
        uint64_t v62 = v65;
        uint64_t v53 = HIDWORD(v52);
      }
      if (v53 == HIDWORD(v62))
      {
        uint64_t v66 = v52 | (unint64_t)(v53 << 32);
        uint64_t v67 = HGRectMake4f(v53, 0.0, 0.0, 0.0, 1.0);
        unint64_t v52 = HGRectGrow(v66, v62, v67);
        uint64_t v62 = v68;
        uint64_t v53 = HIDWORD(v52);
      }
      unint64_t v7 = HGRectIntersection(v52 | (unint64_t)(v53 << 32), v62, this[26].i64[0], this[26].i64[1]);
      uint64_t v70 = v69;
      uint64_t v8 = HIDWORD(v7);
      if ((HIDWORD(v69) - HIDWORD(v7)) * (v69 - v7))
      {
        uint64_t v71 = HGRectMake4f(v8, -2.0, -2.0, 2.0, 2.0);
        unint64_t v72 = HGRectGrow(v7, v70, v71);
        LODWORD(v7) = v72;
        uint64_t v8 = HIDWORD(v72);
      }
    }
  }
  return v7 | ((unint64_t)v8 << 32);
}

uint64_t HFisheye::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v5 = &HGRectNull;
  }
  else
  {
    *(void *)(a1 + 416) = a4;
    *(void *)(a1 + 424) = a5;
    uint64_t v5 = &HGRectInfinite;
  }
  return *(void *)v5;
}

uint64_t HFisheye::RenderTile(float32x4_t *this, HGTile *a2)
{
  HGRect v59 = (HGRect)*((_OWORD *)a2 + 13);
  if (HGRect::IsNull(&v59))
  {
    uint64_t v5 = *((int *)a2 + 3);
    uint64_t v6 = *((int *)a2 + 1);
    if (v5 != v6)
    {
      uint64_t v7 = *((int *)a2 + 6);
      uint64_t v8 = (char *)*((void *)a2 + 2);
      size_t v9 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      uint64_t v10 = 16 * v7;
      uint64_t v11 = v6 - v5;
      do
      {
        bzero(v8, v9);
        v8 += v10;
      }
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    uint64_t v13 = HGTile::Renderer(a2);
    unsigned __int32 v14 = (*(uint64_t (**)(float32x4_t *, uint64_t))(this->i64[0] + 312))(this, v13);
    int32x2_t v15 = *(int32x2_t *)a2;
    int v51 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
    if (v51 >= 1)
    {
      unsigned __int32 v16 = v14;
      int v17 = 0;
      *(float32x2_t *)v18.f32 = vadd_f32(vcvt_f32_s32(v15), (float32x2_t)0x3F0000003F000000);
      v18.i64[1] = 0x3F80000000000000;
      int v19 = *((_DWORD *)a2 + 2) - v15.i32[0];
      uint64_t v20 = *((void *)a2 + 2);
      uint64_t v21 = 16 * *((int *)a2 + 6);
      v22.i64[1] = 0x3F80000000000000;
      v2.i32[0] = v14;
      v22.i64[0] = v14 | 0x3F80000000000000;
      int32x4_t v54 = (int32x4_t)v22;
      float32x4_t v52 = v18;
      float32x4_t v53 = v18;
      do
      {
        if (v19 >= 1)
        {
          uint64_t v23 = 0;
          float32x4_t v24 = v52;
          do
          {
            v22.i32[0] = 0;
            int8x8_t v25 = (int8x8_t)vdup_lane_s32(vceq_s32(v2, *(int32x2_t *)v22.f32), 0);
            float32x4_t v56 = v24;
            v26.i64[0] = v24.i64[0];
            v26.i64[1] = 0x3F80000000000000;
            int8x16_t v27 = (int8x16_t)vmulq_f32(v26, this[29]);
            *(float32x2_t *)v27.i8 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
            int8x16_t v28 = (int8x16_t)vmulq_f32(v26, this[30]);
            *(float32x2_t *)v28.i8 = vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
            *(float32x2_t *)v28.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v28.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v28.i8));
            float32x4_t v57 = vsubq_f32((float32x4_t)v28, this[33]);
            float32x4_t v58 = this[33];
            int8x16_t v55 = (int8x16_t)vmulq_f32(this[32], vmulq_f32(v57, v57));
            float v29 = sqrtf(vaddv_f32(*(float32x2_t *)v55.i8));
            float v30 = powf(v29, this[31].f32[0]);
            v31.i32[0] = 0;
            *(float *)v32.i32 = v30 / v29;
            *(float32x2_t *)v33.f32 = vmul_f32(*(float32x2_t *)v57.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v32, 0));
            v33.i64[1] = 0x3F80000000000000;
            float32x4_t v34 = vaddq_f32(v58, v33);
            int8x16_t v35 = (int8x16_t)vmulq_f32(this[27], v34);
            *(float32x2_t *)v35.i8 = vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
            int8x16_t v36 = (int8x16_t)vmulq_f32(this[28], v34);
            *(float32x2_t *)v36.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
            *(float32x2_t *)v36.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v36.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v36.i8));
            *(float32x2_t *)v35.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)0xBF000000BF000000);
            *(int8x8_t *)v35.i8 = vbsl_s8(v25, (int8x8_t)vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)0x3F0000003F000000), *(int8x8_t *)v35.i8);
            int8x16_t v37 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v54, v31), 0), *((int8x16_t *)a2 + 13), (int8x16_t)vaddq_s32(*((int32x4_t *)a2 + 13), (int32x4_t)xmmword_1B7E74760));
            *(int32x2_t *)v35.i8 = vadd_s32(vcltz_f32(*(float32x2_t *)v35.i8), vcvt_s32_f32(*(float32x2_t *)v35.i8));
            *(int32x2_t *)v38.i8 = vcgt_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v35.i8);
            v38.u64[1] = (unint64_t)vcge_s32(*(int32x2_t *)v35.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
            if ((vmaxvq_u32(v38) & 0x80000000) != 0)
            {
              float32x4_t v22 = 0uLL;
            }
            else
            {
              v36.i64[1] = vextq_s8(v55, v55, 8uLL).u64[0];
              uint64_t v39 = *((int *)a2 + 22);
              float32x4_t v40 = vsubq_f32((float32x4_t)v36, v53);
              uint64_t v41 = *((void *)a2 + 10);
              if (v16)
              {
                int32x4_t v42 = vaddq_s32(vcvtq_s32_f32(v40), vcltzq_f32(v40));
                float32x2_t v43 = (float32x2_t)vsubq_f32(v40, vcvtq_f32_s32(v42)).u64[0];
                int8x16_t v44 = (float32x4_t *)(v41 + 16 * (v42.i32[0] + v42.i32[1] * (int)v39));
                float32x4_t v45 = vaddq_f32(*v44, vmulq_n_f32(vsubq_f32(v44[1], *v44), v43.f32[0]));
                float32x4_t v22 = vaddq_f32(v45, vmulq_lane_f32(vsubq_f32(vaddq_f32(v44[v39], vmulq_n_f32(vsubq_f32(v44[(int)v39 + 1], v44[v39]), v43.f32[0])), v45), v43, 1));
              }
              else
              {
                v46.i64[0] = 0x3F0000003F000000;
                v46.i64[1] = 0x3F0000003F000000;
                float32x4_t v47 = vaddq_f32(v40, v46);
                int32x4_t v48 = vcvtq_s32_f32(v47);
                v47.i64[0] = vaddq_s32(v48, vcgtq_f32(vcvtq_f32_s32(v48), v47)).u64[0];
                float32x4_t v22 = *(float32x4_t *)(v41 + 16 * (v47.i32[0] + v47.i32[1] * (int)v39));
              }
            }
            float32x4_t v24 = v56;
            *(float32x4_t *)(v20 + v23) = v22;
            v24.f32[0] = v56.f32[0] + 1.0;
            v23 += 16;
          }
          while (16 * v19 != v23);
        }
        float32x4_t v49 = v52;
        v49.f32[1] = v52.f32[1] + 1.0;
        float32x4_t v52 = v49;
        ++v17;
        v20 += v21;
      }
      while (v17 != v51);
    }
  }
  return 0;
}

uint64_t HFisheye::SetParameter(HgcFisheye *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  *(void *)&long long v7 = __PAIR64__(LODWORD(a4), a3.n128_u32[0]);
  *((void *)&v7 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = __PAIR64__(LODWORD(a6), LODWORD(a5));
  switch((int)a2)
  {
    case 0:
      uint64_t v8 = (char *)this + 432;
      goto LABEL_9;
    case 1:
      uint64_t v8 = (char *)this + 448;
      goto LABEL_9;
    case 2:
      uint64_t v8 = (char *)this + 464;
      goto LABEL_9;
    case 3:
      uint64_t v8 = (char *)this + 480;
      goto LABEL_9;
    case 4:
      uint64_t v8 = (char *)this + 496;
      goto LABEL_9;
    case 5:
      uint64_t v8 = (char *)this + 512;
      goto LABEL_9;
    case 6:
      uint64_t v8 = (char *)this + 528;
LABEL_9:
      *(_OWORD *)uint64_t v8 = v7;
      break;
    default:
      return HgcFisheye::SetParameter(this, a2, a3, a4, a5, a6, a7);
  }
  return HgcFisheye::SetParameter(this, a2, a3, a4, a5, a6, a7);
}

void HFisheye::~HFisheye(HGNode *this)
{
  HgcFisheye::~HgcFisheye(this);

  HGObject::operator delete(v1);
}

void sub_1B74E4BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

void HFunHouse::HFunHouse(HFunHouse *this)
{
}

uint64_t HFunHouse::GetDOD(HFunHouse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v4 = HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
  uint64_t v8 = v7;
  if ((*(int (**)(HFunHouse *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v9 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v8, v9);
  }
  return v4;
}

unint64_t HFunHouse::GetROI(HFunHouse *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0x80000000;
    uint64_t v5 = 0x80000000;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var1 = a4.var1;
    int var3 = a4.var3;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(void *)this + 104))(this, 5, &v94);
    float v90 = v94;
    float v92 = v95;
    (*(void (**)(HFunHouse *, void, float *))(*(void *)this + 104))(this, 0, &v94);
    float v11 = v94;
    float v12 = v95;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v94);
    float v13 = v95;
    float v14 = v97;
    float v88 = v96;
    float v89 = v94;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v94);
    float v15 = v94;
    float v16 = v95;
    float v17 = v96;
    float v18 = v97;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v94);
    float v85 = v94;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(void *)this + 104))(this, 4, &v94);
    float v19 = v90 * 0.5;
    float v20 = (float)var0;
    float v21 = v92 * 0.5;
    float v87 = (float)var2;
    float v22 = -(float)(v90 * 0.5);
    float v23 = -(float)(v92 * 0.5);
    float v91 = v14;
    float v93 = v13;
    if ((float)var0 <= (float)var2)
    {
      float v30 = (float)((float)var1 - v12) / v95;
      float v31 = v13 * v30;
      float v32 = v14 * v30;
      double v33 = v85 + -1.0;
      float v34 = (float)((float)var3 - v12) / v95;
      float v35 = v13 * v34;
      float v36 = v14 * v34;
      float v27 = -3.4028e38;
      float v28 = 3.4028e38;
      float v25 = 3.4028e38;
      float v26 = -3.4028e38;
      do
      {
        float v37 = (float)(v20 - v11) / v94;
        float v38 = v89 * v37;
        float v39 = v31 + (float)(v89 * v37);
        float v40 = 1.0 - fabsf(v39);
        float v41 = 0.0;
        float v42 = 0.0;
        if (v40 >= 0.0)
        {
          float v42 = v40;
          if (v40 > 1.0) {
            float v42 = 1.0;
          }
        }
        float v43 = v88 * v37;
        float v44 = (3.0 - (v42 + v42)) * (float)(v42 * v42);
        float v45 = v33 * v44 + 1.0;
        float v46 = v39 * v45;
        float v47 = v11 + (float)(v94 * (float)((float)(v16 * (float)(v32 + v43)) + (float)(v15 * v46)));
        float v48 = v12 + (float)(v95 * (float)((float)(v18 * (float)(v32 + v43)) + (float)(v17 * v46)));
        if (v47 <= v22) {
          float v47 = v22;
        }
        if (v48 <= v23) {
          float v48 = v23;
        }
        if (v47 >= v19) {
          float v47 = v19;
        }
        if (v48 >= v21) {
          float v48 = v21;
        }
        if (v25 >= v47) {
          float v25 = v47;
        }
        if (v28 >= v48) {
          float v28 = v48;
        }
        if (v26 <= v47) {
          float v26 = v47;
        }
        if (v27 <= v48) {
          float v27 = v48;
        }
        float v49 = fabsf(v35 + v38);
        if ((float)(1.0 - v49) >= 0.0)
        {
          float v41 = 1.0 - v49;
          if ((float)(1.0 - v49) > 1.0) {
            float v41 = 1.0;
          }
        }
        float v50 = v36 + v43;
        float v51 = (3.0 - (v41 + v41)) * (float)(v41 * v41);
        float v52 = v33 * v51 + 1.0;
        float v53 = (float)(v35 + v38) * v52;
        float v54 = (float)(v16 * v50) + (float)(v15 * v53);
        float v55 = (float)(v18 * v50) + (float)(v17 * v53);
        float v56 = v11 + (float)(v94 * v54);
        float v57 = v12 + (float)(v95 * v55);
        if (v56 <= v22) {
          float v56 = v22;
        }
        if (v57 <= v23) {
          float v57 = v23;
        }
        if (v56 >= v19) {
          float v56 = v19;
        }
        if (v57 >= v21) {
          float v57 = v21;
        }
        if (v25 >= v56) {
          float v25 = v56;
        }
        if (v28 >= v57) {
          float v28 = v57;
        }
        if (v26 <= v56) {
          float v26 = v56;
        }
        if (v27 <= v57) {
          float v27 = v57;
        }
        float v20 = v20 + 1.0;
      }
      while (v20 <= v87);
      float v14 = v91;
      float v13 = v93;
      float v24 = (float)var3;
      float v29 = v85;
      float v20 = (float)var0;
    }
    else
    {
      float v24 = (float)var3;
      float v25 = 3.4028e38;
      float v26 = -3.4028e38;
      float v27 = -3.4028e38;
      float v28 = 3.4028e38;
      float v29 = v85;
    }
    float v58 = (float)(var1 + 1);
    if (v24 > v58)
    {
      float v59 = (float)(v20 - v11) / v94;
      float v86 = v89 * v59;
      float v60 = v88 * v59;
      double v61 = v29 + -1.0;
      float v62 = (float)(v87 - v11) / v94;
      float v63 = v89 * v62;
      float v64 = v88 * v62;
      do
      {
        float v65 = (float)(v58 - v12) / v95;
        float v66 = v13 * v65;
        float v67 = v86 + (float)(v13 * v65);
        float v68 = 1.0 - fabsf(v67);
        float v69 = 0.0;
        float v70 = 0.0;
        if (v68 >= 0.0)
        {
          float v70 = v68;
          if (v68 > 1.0) {
            float v70 = 1.0;
          }
        }
        float v71 = v14 * v65;
        float v72 = (3.0 - (v70 + v70)) * (float)(v70 * v70);
        float v73 = v61 * v72 + 1.0;
        float v74 = v67 * v73;
        float v75 = v11 + (float)(v94 * (float)((float)(v16 * (float)(v60 + v71)) + (float)(v15 * v74)));
        float v76 = v12 + (float)(v95 * (float)((float)(v18 * (float)(v60 + v71)) + (float)(v17 * v74)));
        if (v75 <= v22) {
          float v75 = v22;
        }
        if (v76 <= v23) {
          float v76 = v23;
        }
        if (v75 >= v19) {
          float v75 = v19;
        }
        if (v76 >= v21) {
          float v76 = v21;
        }
        if (v25 >= v75) {
          float v25 = v75;
        }
        if (v28 >= v76) {
          float v28 = v76;
        }
        if (v26 <= v75) {
          float v26 = v75;
        }
        if (v27 <= v76) {
          float v27 = v76;
        }
        float v77 = v63 + v66;
        float v78 = 1.0 - fabsf(v63 + v66);
        if (v78 >= 0.0)
        {
          float v69 = v78;
          if (v78 > 1.0) {
            float v69 = 1.0;
          }
        }
        float v79 = (3.0 - (v69 + v69)) * (float)(v69 * v69);
        float v80 = v61 * v79 + 1.0;
        float v81 = v77 * v80;
        float v82 = v11 + (float)(v94 * (float)((float)(v16 * (float)(v64 + v71)) + (float)(v15 * v81)));
        float v83 = v12 + (float)(v95 * (float)((float)(v18 * (float)(v64 + v71)) + (float)(v17 * v81)));
        if (v82 <= v22) {
          float v82 = v22;
        }
        if (v83 <= v23) {
          float v83 = v23;
        }
        if (v82 >= v19) {
          float v82 = v19;
        }
        if (v83 >= v21) {
          float v83 = v21;
        }
        if (v25 >= v82) {
          float v25 = v82;
        }
        if (v28 >= v83) {
          float v28 = v83;
        }
        if (v26 <= v82) {
          float v26 = v82;
        }
        if (v27 <= v83) {
          float v27 = v83;
        }
        float v58 = v58 + 1.0;
        float v14 = v91;
        float v13 = v93;
      }
      while (v58 < v24);
    }
    unsigned int v4 = (int)v25 - 3;
    uint64_t v5 = ((int)v28 - 3);
  }
  return v4 | (unint64_t)(v5 << 32);
}

__n128 HFunHouse::SetRect(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[26] = *a2;
  return result;
}

void HFunHouse::~HFunHouse(HGNode *this)
{
  HgcFunHouse::~HgcFunHouse(this);

  HGObject::operator delete(v1);
}

void HGradientLinear::HGradientLinear(HGradientLinear *this)
{
}

void sub_1B74E5568(_Unwind_Exception *a1)
{
  HgcGradientLinear::~HgcGradientLinear(v1);
  _Unwind_Resume(a1);
}

void HGradientLinear::~HGradientLinear(HGNode *this)
{
  HgcGradientLinear::~HgcGradientLinear(this);

  HGObject::operator delete(v1);
}

uint64_t HGradientLinear::GetROI(HGradientLinear *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  (*(void (**)(HGradientLinear *, uint64_t, float *, void, void))(*(void *)this + 104))(this, 2, v6, *(void *)&a4.var0, *(void *)&a4.var2);
  uint64_t result = HGRectMake4i(0, 0, (int)v6[0], 1u);
  if (a3) {
    return 0;
  }
  return result;
}

uint64_t HPageCurlBackground::GetDOD(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRect v53 = a4;
  if (a3) {
    return 0;
  }
  Effect_toPCRecti(&v53, (uint64_t)&v40);
  v6.i64[0] = SLODWORD(v40);
  v6.i64[1] = SHIDWORD(v40);
  float64x2_t v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SLODWORD(v41);
  v6.i64[1] = SHIDWORD(v41);
  v52[0] = v7;
  v52[1] = vcvtq_f64_s64(v6);
  uint64_t v51 = 0x3FF0000000000000;
  uint64_t v48 = 0x3FF0000000000000;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  v7.f64[0] = this[86];
  double v32 = this[87];
  float64_t v33 = v7.f64[0];
  float64_t v40 = v7.f64[0];
  double v41 = v32;
  v29.f64[0] = v7.f64[0];
  v29.f64[1] = -v32;
  double v44 = -v32;
  float64_t v45 = v7.f64[0];
  v7.f64[0] = -this[84];
  double v8 = -this[85];
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  PCMatrix44Tmpl<double>::rightTranslate(&v40, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v29, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v40, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v29, this + 52);
  float64x2_t v27 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v19 = _Q0;
  long long v28 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>(&v40, (double *)v52, (uint64_t)&v27);
  if (v27.f64[0] >= 0.0) {
    return *(void *)&v53.var0;
  }
  double v15 = this[88];
  double v16 = -v15;
  if (v27.f64[0] + *(double *)&v28 < -v15) {
    return 0;
  }
  float64x2_t v25 = 0uLL;
  long long v26 = v19;
  float64x2_t v23 = 0uLL;
  long long v24 = v19;
  if (v27.f64[0] + *(double *)&v28 >= 0.0)
  {
    float64x2_t v25 = v27;
    long long v26 = v28;
    if (v27.f64[0] < 0.0)
    {
      *(double *)&long long v26 = *(double *)&v26 - (0.0 - v27.f64[0]);
      v25.f64[0] = 0.0;
    }
  }
  if (v27.f64[0] <= 0.0)
  {
    float64x2_t v23 = v27;
    long long v24 = v28;
    double v17 = v27.f64[0];
    if (v27.f64[0] + *(double *)&v28 <= 0.0) {
      double v18 = *(double *)&v28;
    }
    else {
      double v18 = 0.0 - v27.f64[0];
    }
    if (v27.f64[0] >= v16) {
      double v16 = v15 * sin(v27.f64[0] / v15);
    }
    *(double *)&long long v24 = v18 - (v16 - v17);
    v23.f64[0] = v16;
  }
  PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v25.f64, (uint64_t)&v25);
  PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v23.f64, (uint64_t)&v23);
  operator|<double>(&v25, &v23, &v20);
  return HGRectMake4i((int)v20.f64[0], (int)v20.f64[1], (int)v21 + (int)v20.f64[0], (int)v22 + (int)v20.f64[1]);
}

float64x2_t *operator|<double>@<X0>(float64x2_t *result@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v3 = result[1];
  if (v3.f64[0] < 0.0 || v3.f64[1] < 0.0)
  {
    float64x2_t v8 = *a2;
    float64x2_t v9 = a2[1];
  }
  else
  {
    float64x2_t v4 = a2[1];
    if (v4.f64[0] >= 0.0 && v4.f64[1] >= 0.0)
    {
      float64x2_t v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*result, *a2), *(int8x16_t *)a2, *(int8x16_t *)result);
      float64x2_t v6 = vaddq_f64(*result, v3);
      float64x2_t v7 = vaddq_f64(*a2, v4);
      *a3 = v5;
      a3[1] = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), (int8x16_t)v7, (int8x16_t)v6), v5);
      return result;
    }
    float64x2_t v8 = *result;
    float64x2_t v9 = result[1];
  }
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t HPageCurlBackground::GetROI(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRect v77 = a4;
  if (a3) {
    return 0;
  }
  Effect_toPCRecti(&v77, (uint64_t)&v63);
  v6.i64[0] = SLODWORD(v63);
  v6.i64[1] = SHIDWORD(v63);
  float64x2_t v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SLODWORD(v64);
  v6.i64[1] = SHIDWORD(v64);
  float64x2_t v75 = v7;
  float64x2_t v76 = vcvtq_f64_s64(v6);
  uint64_t v74 = 0x3FF0000000000000;
  uint64_t v71 = 0x3FF0000000000000;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v62 = 0x3FF0000000000000;
  uint64_t v59 = 0x3FF0000000000000;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  v7.f64[0] = this[86];
  double v55 = this[87];
  float64_t v56 = v7.f64[0];
  float64_t v63 = v7.f64[0];
  double v64 = v55;
  v52.f64[0] = v7.f64[0];
  v52.f64[1] = -v55;
  double v67 = -v55;
  float64_t v68 = v7.f64[0];
  v7.f64[0] = -this[84];
  double v8 = -this[85];
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  PCMatrix44Tmpl<double>::rightTranslate(&v63, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v52, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v63, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v52, this + 52);
  float64x2_t v50 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v42 = _Q0;
  long long v51 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>(&v63, v75.f64, (uint64_t)&v50);
  if (v50.f64[0] < 0.0)
  {
    float64x2_t v48 = 0uLL;
    long long v49 = v42;
    float64x2_t v46 = 0uLL;
    long long v47 = v42;
    double v15 = v50.f64[0] + *(double *)&v51;
    if (v50.f64[0] + *(double *)&v51 >= 0.0)
    {
      float64x2_t v48 = v50;
      long long v49 = v51;
      if (v50.f64[0] < 0.0)
      {
        *(double *)&long long v49 = *(double *)&v49 - (0.0 - v50.f64[0]);
        v48.f64[0] = 0.0;
      }
    }
    if (v50.f64[0] > 0.0) {
      goto LABEL_37;
    }
    float64x2_t v46 = v50;
    long long v47 = v51;
    if (v50.f64[0] > v15) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    if (v50.f64[0] <= 0.0) {
      double v16 = v50.f64[0];
    }
    else {
      double v16 = 0.0;
    }
    if (v15 <= 0.0) {
      double v17 = v50.f64[0] + *(double *)&v51;
    }
    else {
      double v17 = 0.0;
    }
    if (this[88] == 0.0) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    int v23 = fegetround();
    fesetround(0x400000);
    double v24 = this[88];
    if (v24 >= 0.0)
    {
      double v25 = -v16;
      double v26 = v17 / v24;
    }
    else
    {
      double v25 = -v17;
      double v26 = v16 / v24;
    }
    double v27 = -v26;
    double v28 = v25 / v24;
    fesetround(v23);
    int v29 = fegetround();
    fesetround(0x400000);
    double v30 = v28 + -1.0;
    v43.f64[0] = 1.0 - v27;
    double v31 = 1.0 - v27;
    fesetround(v29);
    if (v28 + -1.0 <= 0.0)
    {
      double v32 = -v30;
    }
    else if (v31 <= 0.0)
    {
      double v32 = -v31;
      double v31 = v30;
    }
    else
    {
      if (v31 <= v30) {
        double v31 = v28 + -1.0;
      }
      double v32 = 0.0;
    }
    int v33 = fegetround();
    fesetround(0x400000);
    v43.f64[0] = 1.0 - v32;
    fesetround(v33);
    double v34 = asin(fmax(fmin(-(v31 + -1.0), 0.999), -0.999));
    double v35 = asin(fmax(fmin(1.0 - v32, 0.999), -0.999));
    if (v34 > v35) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    double v36 = v35;
    int v37 = fegetround();
    fesetround(0x400000);
    double v38 = this[88];
    if (v38 >= 0.0)
    {
      double v41 = 0.0;
      double v39 = 0.0;
      if (v38 == 0.0)
      {
LABEL_36:
        fesetround(v37);
        v46.f64[0] = v39;
        *(double *)&long long v47 = v41 - v39;
LABEL_37:
        PCMatrix44Tmpl<double>::transformRect<double>(v52.f64, v48.f64, (uint64_t)&v48);
        PCMatrix44Tmpl<double>::transformRect<double>(v52.f64, v46.f64, (uint64_t)&v46);
        operator|<double>(&v48, &v46, &v43);
        double v18 = v43.f64[0] + -2.0;
        double v19 = v43.f64[1] + -2.0;
        double v20 = 4.0;
        double v21 = v44;
        double v22 = v45;
        return HGRectMake4i((int)v18, (int)v19, (int)(v21 + v20) + (int)v18, (int)(v22 + v20) + (int)v19);
      }
      v43.f64[0] = v36 * v38;
      double v39 = -(v36 * v38);
      double v40 = v38 * -v34;
    }
    else
    {
      v43.f64[0] = v34 * v38;
      double v39 = -(v34 * v38);
      double v40 = -(v36 * v38);
    }
    v43.f64[0] = v40;
    double v41 = v40;
    goto LABEL_36;
  }
  double v18 = v75.f64[0] + -1.0;
  double v19 = v75.f64[1] + -1.0;
  double v20 = 2.0;
  double v22 = v76.f64[1];
  double v21 = v76.f64[0];
  return HGRectMake4i((int)v18, (int)v19, (int)(v21 + v20) + (int)v18, (int)(v22 + v20) + (int)v19);
}

uint64_t HPageCurlBackground::setPixelTransform(double *a1, double *a2)
{
  float64x2_t v3 = a1 + 52;
  if (a1 + 52 != a2)
  {
    uint64_t v4 = 0;
    float64x2_t v5 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v3[i] = v5[i];
      ++v4;
      v3 += 4;
      v5 += 4;
    }
    while (v4 != 4);
  }
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(a1 + 68), a2, 0.0);
  float v7 = a1[67];
  float v8 = a1[83];
  double v9 = v7;
  float v10 = a1[52] / v7;
  float v11 = a1[57] / v9;
  float v12 = a1[55] / v9;
  *(float *)&double v9 = a1[59] / v9;
  (*(void (**)(double *, void, float, float, float, float))(*(void *)a1 + 96))(a1, 0, v10, v11, v12, *(float *)&v9);
  v13.n128_f64[0] = a1[68] / v8;
  v13.n128_f32[0] = v13.n128_f64[0];
  v14.n128_f64[0] = a1[73] / v8;
  v14.n128_f32[0] = v14.n128_f64[0];
  v15.n128_f64[0] = a1[71] / v8;
  v15.n128_f32[0] = v15.n128_f64[0];
  v16.n128_f64[0] = a1[75] / v8;
  v16.n128_f32[0] = v16.n128_f64[0];
  double v17 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);

  return v17(a1, 1, v13, v14, v15, v16);
}

uint64_t HPageCurlBackground::setAxisPoint(_OWORD *a1, uint64_t a2)
{
  a1[42] = *(_OWORD *)a2;
  float v2 = *(double *)a2;
  float v3 = *(double *)(a2 + 8);
  return (*(uint64_t (**)(_OWORD *, uint64_t, float, float, double, double))(*(void *)a1 + 96))(a1, 2, v2, v3, 0.0, 0.0);
}

uint64_t HPageCurlBackground::setAxisDir(double *a1, double *a2)
{
  double v2 = a2[1];
  double v3 = sqrt(*a2 * *a2 + v2 * v2);
  double v4 = *a2 / v3;
  double v5 = v2 / v3;
  a1[86] = v4;
  a1[87] = v5;
  *(float *)&double v4 = v4;
  *(float *)&double v5 = v5;
  return (*(uint64_t (**)(double *, uint64_t, float, float, double, double))(*(void *)a1 + 96))(a1, 3, *(float *)&v4, *(float *)&v5, 0.0, 0.0);
}

uint64_t HPageCurlBackground::setHighlight(uint64_t a1, double *a2)
{
  float v2 = *a2;
  float v3 = a2[1];
  float v4 = a2[2];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, double))(*(void *)a1 + 96))(a1, 5, v2, v3, v4, 0.0);
}

uint64_t HPageCurlBackground::setBackColor(uint64_t a1, double *a2)
{
  float v2 = *a2;
  float v3 = a2[1];
  float v4 = a2[2];
  float v5 = a2[3];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 6, v2, v3, v4, v5);
}

uint64_t HPageCurlBackground::setRadius(HPageCurlBackground *this, double a2)
{
  *((double *)this + 88) = a2;
  float v2 = a2;
  return (*(uint64_t (**)(HPageCurlBackground *, uint64_t, float, double, double, double))(*(void *)this
                                                                                                  + 96))(this, 4, v2, 0.0, 0.0, 0.0);
}

uint64_t HPageCurlForeground::GetDOD(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRect v52 = a4;
  if (a3) {
    return 0;
  }
  Effect_toPCRecti(&v52, (uint64_t)&v40);
  v6.i64[0] = (int)v40;
  v6.i64[1] = SDWORD1(v40);
  float64x2_t v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SDWORD2(v40);
  v6.i64[1] = SHIDWORD(v40);
  v51[0] = v7;
  v51[1] = vcvtq_f64_s64(v6);
  uint64_t v50 = 0x3FF0000000000000;
  uint64_t v47 = 0x3FF0000000000000;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  v7.f64[0] = this[86];
  double v32 = this[87];
  float64_t v33 = v7.f64[0];
  *(float64_t *)&long long v40 = v7.f64[0];
  *((double *)&v40 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v32;
  v29.f64[0] = v7.f64[0];
  v29.f64[1] = -v32;
  double v43 = -v32;
  float64_t v44 = v7.f64[0];
  v7.f64[0] = -this[84];
  double v8 = -this[85];
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  PCMatrix44Tmpl<double>::rightTranslate((double *)&v40, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v29, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v40, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v29, this + 52);
  v24[0] = 0.0;
  float64x2_t v23 = (float64x2_t)0x3FF0000000000000uLL;
  v27.f64[0] = this[88] * -3.14159265 * 0.5;
  v27.f64[1] = 0.0;
  *(void *)&long long v28 = 0;
  PCMatrix44Tmpl<double>::leftReflect((uint64_t)&v40, v23.f64, v27.f64);
  float64x2_t v27 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v19 = _Q0;
  long long v28 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v40, (double *)v51, (uint64_t)&v27);
  if (v27.f64[0] >= 0.0)
  {
    float64x2_t v25 = 0uLL;
    long long v26 = v19;
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v29, &v40, (uint64_t)&v23);
    PCMatrix44Tmpl<double>::transformRect<double>(v23.f64, (double *)v51, (uint64_t)&v25);
    return HGRectMake4i((int)v25.f64[0], (int)v25.f64[1], (int)*(double *)&v26 + (int)v25.f64[0], (int)*((double *)&v26 + 1) + (int)v25.f64[1]);
  }
  else
  {
    double v15 = this[88];
    if (v27.f64[0] + *(double *)&v28 < v15 * -3.14159265 * 0.5) {
      return 0;
    }
    float64x2_t v23 = 0uLL;
    *(_OWORD *)double v24 = v19;
    float64x2_t v25 = 0uLL;
    long long v26 = v19;
    if (v27.f64[0] + *(double *)&v28 >= 0.0)
    {
      float64x2_t v23 = v27;
      *(_OWORD *)double v24 = v28;
      if (v27.f64[0] < 0.0)
      {
        v24[0] = v24[0] - (0.0 - v27.f64[0]);
        v23.f64[0] = 0.0;
      }
    }
    if (v27.f64[0] <= 0.0)
    {
      float64x2_t v25 = v27;
      long long v26 = v28;
      double v16 = v27.f64[0];
      if (v27.f64[0] + *(double *)&v28 <= 0.0) {
        double v17 = *(double *)&v28;
      }
      else {
        double v17 = 0.0 - v27.f64[0];
      }
      double v18 = -v15;
      if (v27.f64[0] >= -v15) {
        double v18 = v15 * sin(v27.f64[0] / v15);
      }
      *(double *)&long long v26 = v17 - (v18 - v16);
      v25.f64[0] = v18;
    }
    PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v23.f64, (uint64_t)&v23);
    PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v25.f64, (uint64_t)&v25);
    operator|<double>(&v23, &v25, &v20);
    return HGRectMake4i((int)(v20.f64[0] + -2.0), (int)(v20.f64[1] + -2.0), (int)(v21 + 4.0) + (int)(v20.f64[0] + -2.0), (int)(v22 + 4.0) + (int)(v20.f64[1] + -2.0));
  }
}

double PCMatrix44Tmpl<double>::leftReflect(uint64_t a1, double *a2, double *a3)
{
  uint64_t v14 = 0x3FF0000000000000;
  uint64_t v11 = 0x3FF0000000000000;
  uint64_t v8 = 0x3FF0000000000000;
  uint64_t v5 = 0x3FF0000000000000;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  PCMatrix44Tmpl<double>::setReflect((uint64_t)&v5, a2, a3);
  return PCMatrix44Tmpl<double>::leftMult(a1, (double *)&v5);
}

uint64_t HPageCurlForeground::GetROI(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRect v71 = a4;
  if (a3) {
    return 0;
  }
  Effect_toPCRecti(&v71, (uint64_t)&v59);
  v6.i64[0] = (int)v59;
  v6.i64[1] = SDWORD1(v59);
  float64x2_t v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SDWORD2(v59);
  v6.i64[1] = SHIDWORD(v59);
  v70[0] = v7;
  v70[1] = vcvtq_f64_s64(v6);
  uint64_t v69 = 0x3FF0000000000000;
  uint64_t v66 = 0x3FF0000000000000;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v58 = 0x3FF0000000000000;
  uint64_t v55 = 0x3FF0000000000000;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  v7.f64[0] = this[86];
  double v51 = this[87];
  float64_t v52 = v7.f64[0];
  *(float64_t *)&long long v59 = v7.f64[0];
  *((double *)&v59 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v51;
  v48.f64[0] = v7.f64[0];
  v48.f64[1] = -v51;
  double v62 = -v51;
  float64_t v63 = v7.f64[0];
  v7.f64[0] = -this[84];
  double v8 = -this[85];
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  PCMatrix44Tmpl<double>::rightTranslate((double *)&v59, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v48, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v59, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v48, this + 52);
  v43[0] = 0.0;
  float64x2_t v42 = (float64x2_t)0x3FF0000000000000uLL;
  v46.f64[0] = this[88] * -3.14159265 * 0.5;
  v46.f64[1] = 0.0;
  *(void *)&long long v47 = 0;
  PCMatrix44Tmpl<double>::rightReflect((uint64_t)&v48, v42.f64, v46.f64);
  float64x2_t v46 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v38 = _Q0;
  long long v47 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v59, (double *)v70, (uint64_t)&v46);
  if (v46.f64[0] >= 0.0)
  {
    float64x2_t v44 = 0uLL;
    long long v45 = v38;
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v48, &v59, (uint64_t)&v42);
    PCMatrix44Tmpl<double>::transformRect<double>(v42.f64, (double *)v70, (uint64_t)&v44);
    return HGRectMake4i((int)(v44.f64[0] + -2.0), (int)(v44.f64[1] + -2.0), (int)(*(double *)&v45 + 4.0) + (int)(v44.f64[0] + -2.0), (int)(*((double *)&v45 + 1) + 4.0) + (int)(v44.f64[1] + -2.0));
  }
  float64x2_t v42 = 0uLL;
  *(_OWORD *)double v43 = v38;
  float64x2_t v44 = 0uLL;
  long long v45 = v38;
  double v15 = v46.f64[0] + *(double *)&v47;
  if (v46.f64[0] + *(double *)&v47 >= 0.0)
  {
    float64x2_t v42 = v46;
    *(_OWORD *)double v43 = v47;
    if (v46.f64[0] < 0.0)
    {
      v43[0] = v43[0] - (0.0 - v46.f64[0]);
      v42.f64[0] = 0.0;
    }
  }
  if (v46.f64[0] <= 0.0)
  {
    float64x2_t v44 = v46;
    long long v45 = v47;
    if (v46.f64[0] > v15) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    if (v46.f64[0] <= 0.0) {
      double v16 = v46.f64[0];
    }
    else {
      double v16 = 0.0;
    }
    if (v15 <= 0.0) {
      double v17 = v46.f64[0] + *(double *)&v47;
    }
    else {
      double v17 = 0.0;
    }
    if (this[88] == 0.0) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    int v18 = fegetround();
    fesetround(0x400000);
    double v19 = this[88];
    if (v19 >= 0.0)
    {
      double v20 = -v16;
      double v21 = v17 / v19;
    }
    else
    {
      double v20 = -v17;
      double v21 = v16 / v19;
    }
    double v22 = -v21;
    double v23 = v20 / v19;
    fesetround(v18);
    int v24 = fegetround();
    fesetround(0x400000);
    double v25 = v23 + -1.0;
    v39.f64[0] = 1.0 - v22;
    double v26 = 1.0 - v22;
    fesetround(v24);
    if (v23 + -1.0 <= 0.0)
    {
      double v27 = -v25;
    }
    else if (v26 <= 0.0)
    {
      double v27 = -v26;
      double v26 = v25;
    }
    else
    {
      if (v26 <= v25) {
        double v26 = v23 + -1.0;
      }
      double v27 = 0.0;
    }
    int v28 = fegetround();
    fesetround(0x400000);
    v39.f64[0] = 1.0 - v27;
    fesetround(v28);
    double v29 = asin(fmax(fmin(-(v26 + -1.0), 0.999), 0.0));
    double v30 = asin(fmax(fmin(1.0 - v27, 0.999), 0.0));
    if (v29 > v30) {
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    double v31 = v30;
    int v32 = fegetround();
    fesetround(0x400000);
    double v33 = this[88];
    if (v33 >= 0.0)
    {
      double v36 = 0.0;
      double v37 = 0.0;
      if (v33 == 0.0)
      {
LABEL_36:
        fesetround(v32);
        v44.f64[0] = v37;
        *(double *)&long long v45 = v36 - v37;
        goto LABEL_37;
      }
      double v34 = -v29;
      double v35 = v31 * v33;
    }
    else
    {
      double v34 = -v31;
      double v35 = v29 * v33;
    }
    double v37 = -v35;
    v39.f64[0] = v33 * v34;
    double v36 = v33 * v34;
    goto LABEL_36;
  }
LABEL_37:
  PCMatrix44Tmpl<double>::transformRect<double>(v48.f64, v42.f64, (uint64_t)&v42);
  PCMatrix44Tmpl<double>::transformRect<double>(v48.f64, v44.f64, (uint64_t)&v44);
  operator|<double>(&v42, &v44, &v39);
  return HGRectMake4i((int)(v39.f64[0] + -2.0), (int)(v39.f64[1] + -2.0), (int)(v40 + 4.0) + (int)(v39.f64[0] + -2.0), (int)(v41 + 4.0) + (int)(v39.f64[1] + -2.0));
}

double PCMatrix44Tmpl<double>::rightReflect(uint64_t a1, double *a2, double *a3)
{
  uint64_t v14 = 0x3FF0000000000000;
  uint64_t v11 = 0x3FF0000000000000;
  uint64_t v8 = 0x3FF0000000000000;
  uint64_t v5 = 0x3FF0000000000000;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  PCMatrix44Tmpl<double>::setReflect((uint64_t)&v5, a2, a3);
  return PCMatrix44Tmpl<double>::rightMult(a1, (double *)&v5);
}

uint64_t HPageCurlForeground::setPixelTransform(double *a1, double *a2)
{
  float v3 = a1 + 52;
  if (a1 + 52 != a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v3[i] = v5[i];
      ++v4;
      v3 += 4;
      v5 += 4;
    }
    while (v4 != 4);
  }
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(a1 + 68), a2, 0.0);
  float v7 = a1[67];
  float v8 = a1[83];
  double v9 = v7;
  float v10 = a1[52] / v7;
  float v11 = a1[57] / v9;
  float v12 = a1[55] / v9;
  *(float *)&double v9 = a1[59] / v9;
  (*(void (**)(double *, void, float, float, float, float))(*(void *)a1 + 96))(a1, 0, v10, v11, v12, *(float *)&v9);
  v13.n128_f64[0] = a1[68] / v8;
  v13.n128_f32[0] = v13.n128_f64[0];
  v14.n128_f64[0] = a1[73] / v8;
  v14.n128_f32[0] = v14.n128_f64[0];
  v15.n128_f64[0] = a1[71] / v8;
  v15.n128_f32[0] = v15.n128_f64[0];
  v16.n128_f64[0] = a1[75] / v8;
  v16.n128_f32[0] = v16.n128_f64[0];
  double v17 = *(uint64_t (**)(double *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a1 + 96);

  return v17(a1, 1, v13, v14, v15, v16);
}

uint64_t HPageCurlForeground::setAxisPoint(_OWORD *a1, uint64_t a2)
{
  a1[42] = *(_OWORD *)a2;
  float v2 = *(double *)a2;
  float v3 = *(double *)(a2 + 8);
  return (*(uint64_t (**)(_OWORD *, uint64_t, float, float, double, double))(*(void *)a1 + 96))(a1, 2, v2, v3, 0.0, 0.0);
}

uint64_t HPageCurlForeground::setAxisDir(double *a1, double *a2)
{
  double v2 = a2[1];
  double v3 = sqrt(*a2 * *a2 + v2 * v2);
  double v4 = *a2 / v3;
  double v5 = v2 / v3;
  a1[86] = v4;
  a1[87] = v5;
  *(float *)&double v4 = v4;
  *(float *)&double v5 = v5;
  return (*(uint64_t (**)(double *, uint64_t, float, float, double, double))(*(void *)a1 + 96))(a1, 3, *(float *)&v4, *(float *)&v5, 0.0, 0.0);
}

uint64_t HPageCurlForeground::setHighlight(uint64_t a1, double *a2)
{
  float v2 = *a2;
  float v3 = a2[1];
  float v4 = a2[2];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, double))(*(void *)a1 + 96))(a1, 5, v2, v3, v4, 0.0);
}

uint64_t HPageCurlForeground::setBackColor(uint64_t a1, double *a2)
{
  float v2 = *a2;
  float v3 = a2[1];
  float v4 = a2[2];
  float v5 = a2[3];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 6, v2, v3, v4, v5);
}

uint64_t HPageCurlForeground::setRadius(HPageCurlForeground *this, double a2)
{
  *((double *)this + 88) = a2;
  float v2 = a2;
  return (*(uint64_t (**)(HPageCurlForeground *, uint64_t, float, double, double, double))(*(void *)this
                                                                                                  + 96))(this, 4, v2, 0.0, 0.0, 0.0);
}

void HPageCurlBackground::~HPageCurlBackground(HGNode *this)
{
  HgcPageCurlBackground::~HgcPageCurlBackground(this);

  HGObject::operator delete(v1);
}

void HPageCurlForeground::~HPageCurlForeground(HGNode *this)
{
  HgcPageCurlForeground::~HgcPageCurlForeground(this);

  HGObject::operator delete(v1);
}

double PCMatrix44Tmpl<double>::setReflect(uint64_t a1, double *a2, double *a3)
{
  double v4 = *a2;
  double v3 = a2[1];
  double v5 = a2[2];
  double v6 = sqrt(v4 * v4 + v3 * v3 + v5 * v5);
  if (v6 <= -0.000000100000001 || v6 >= 0.000000100000001)
  {
    double v4 = v4 / v6;
    double v3 = v3 / v6;
    double v5 = v5 / v6;
  }
  double v7 = v4 * *a3 + v3 * a3[1] + v5 * a3[2];
  *(double *)a1 = v4 * (v4 * -2.0) + 1.0;
  *(double *)(a1 + 8) = v3 * (v4 * -2.0);
  *(double *)(a1 + 32) = v3 * -2.0 * v4;
  *(double *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = v3 * (v3 * -2.0) + 1.0;
  *(double *)(a1 + 64) = v5 * -2.0 * v4;
  *(double *)(a1 + 72) = v5 * -2.0 * v3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 16) = v5 * (v4 * -2.0);
  *(double *)(a1 + 24) = -(v7 * (v4 * -2.0));
  *(double *)(a1 + 48) = v5 * (v3 * -2.0);
  *(double *)(a1 + 56) = -(v7 * (v3 * -2.0));
  *(double *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v5 * (v5 * -2.0) + 1.0;
  *(double *)(a1 + 88) = -(v7 * (v5 * -2.0));
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = xmmword_1B7E733E0;
  return result;
}

uint64_t HStyleTransfer_ANEImpl::HStyleTransfer_ANEImpl(uint64_t a1, void *a2, uint64_t *a3)
{
  HGNode::HGNode((HGNode *)a1);
  *double v6 = &unk_1F108F4F0;
  v6[51] = 0;
  v6[52] = 0;
  id v7 = a2;

  *(void *)(a1 + 408) = a2;
  uint64_t v8 = *(void *)(a1 + 416);
  uint64_t v9 = *a3;
  if (v8 != *a3)
  {
    if (v8)
    {
      (*(void (**)(void))(*(void *)v8 + 24))(*(void *)(a1 + 416));
      uint64_t v9 = *a3;
    }
    *(void *)(a1 + 416) = v9;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    }
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFF9FF | 0x400;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 136))(a1, 0, 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, 0xFFFFFFFFLL, 2);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 136))(a1, 0, 0x2000);
  return a1;
}

void sub_1B74E6EC0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 416);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANEImpl::~HStyleTransfer_ANEImpl(id *this)
{
  *this = &unk_1F108F4F0;

  id v2 = this[52];
  if (v2) {
    (*(void (**)(id))(*(void *)v2 + 24))(v2);
  }

  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;
  uint64_t vars8;

  HStyleTransfer_ANEImpl::~HStyleTransfer_ANEImpl(this);

  HGObject::operator delete(v1);
}

uint64_t HStyleTransfer_ANEImpl::GetDOD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t HStyleTransfer_ANEImpl::GetROI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t HStyleTransfer_ANEImpl::ScaleInputTextureToOutputBuffer(int a1, uint64_t a2, uint64_t a3, HGGPURenderer *this, int a5, void *a6)
{
  uint64_t v10 = *(void *)(a2 + 144);
  uint64_t MetalContext = HGGPURenderer::GetMetalContext(this);
  int v12 = *(_DWORD *)(a3 + 16);
  uint64_t v13 = *(void *)(*(void *)(MetalContext + 24) + 168);
  {
    std::string::basic_string[abi:ne180100]<0>(&ShaderString(void)::sShaderString, "          \n    //Metal1.0                                  \n    #include <metal_common>                     \n    #include <metal_graphics>                   \n    #include <metal_matrix>                     \n    #include <metal_geometric>                  \n    #include <metal_math>                       \n    #include <metal_texture>                    \n                                                \n    using namespace metal;                      \n"
      "                                                \n"
      "    struct RasterData                           \n"
      "    {                                           \n"
      "        float4 position  [[ position ]];        \n"
      "        float2 texCoord0 [[ user(texcoord0) ]]; \n"
      "    };                                          \n"
      "                                                \n"
      "    typedef struct                              \n"
      "    {                                           \n"
      "        vector_float2 position;                 \n"
      "        vector_float2 texCoords;                \n"
      "    } HSFANEVertexPos2Tex2;                     \n"
      "                                                \n"
      "    typedef struct                              \n"
      "    {                                           \n"
      "        HSFANEVertexPos2Tex2 vertices[4];       \n"
      "    } HSFANEQuad;                               \n"
      "                                                \n"
      "    vertex RasterData vertexFunc(uint vertexId [[vertex_id]], \n"
      "                                 constant HSFANEQuad &quad [[buffer(0)]], \n"
      "                                 constant float4x4 &mvp [[buffer(1)]]) \n"
      "    {                                           \n"
      "        RasterData out;                         \n"
      "                                                \n"
      "        float2 modelPositiodouble n = quad.vertices[vertexId].position; \n"
      "        out.positiodouble n = mvp * float4(modelPosition, 0, 1);  \n"
      "                                                \n"
      "        out.texCoord0 = quad.vertices[vertexId].texCoords; \n"
      "                                                \n"
      "        return out;                             \n"
      "    }                                           \n"
      "                                                \n"
      "    fragment half4 fragmentFunc(RasterData frag [[ stage_in ]], \n"
      "                                texture2d< half > texture0 [[ texture(0) ]]) \n"
      "    {                                                                       \n"
      "        constexpr sampler textureSampler (mag_filter::linear,               \n"
      "                                          min_filter::linear,               \n"
      "                                          address::mirrored_repeat);        \n"
      "                                                \n"
      "        half4 out;                             \n"
      "        out = texture0.sample(textureSampler, frag.texCoord0.xy);           \n"
      "                                                \n"
      "        // unpremul: This form is used to comply with HGC's DIVA optimization. \n"
      "        const half alphaThresholCGPoint d = 1e-6;                 \n"
      "        out.rgCGPoint b = out.rgb / max(out.a, alphaThreshold);   \n"
      "                                                \n"
      "        return out;                             \n"
      "    }                                           \n"
      "    \n");
    __cxa_atexit(MEMORY[0x1E4FBA210], &ShaderString(void)::sShaderString, &dword_1B73F3000);
  }
  if (byte_1E9EE48C7 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v35, (const std::string::value_type *)ShaderString(void)::sShaderString, *((std::string::size_type *)&ShaderString(void)::sShaderString + 1));
  }
  else
  {
    *(_OWORD *)double v35 = ShaderString(void)::sShaderString;
    *(void *)&long long v36 = unk_1E9EE48C0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HStyleTransfer_ANE");
  unint64_t v14 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v54, (uint64_t)__p);
  if (v40.i8[7] < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v54, "vertexFunc");
  FunctionWithSource = HGMetalFunctionCache::getFunctionWithSource(v13, &v54, v14, (uint64_t *)v35);
  std::string::basic_string[abi:ne180100]<0>(&v53, "fragmentFunc");
  __n128 v16 = HGMetalFunctionCache::getFunctionWithSource(v13, &v53, v14, (uint64_t *)v35);
  uint64_t v17 = 0;
  uint64_t v18 = *(void *)(*(void *)(MetalContext + 24) + 144);
  do
  {
    double v19 = &__p[v17];
    *(_DWORD *)double v19 = 0;
    v19[1] = 0;
    v19[2] = (void *)1;
    *((_DWORD *)v19 + 6) = 1;
    *(void **)((char *)v19 + 28) = 0;
    v17 += 6;
    *(void **)((char *)v19 + 33) = 0;
  }
  while (v17 != 48);
  char v47 = 0;
  double v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = v16;
  uint64_t v50 = 0;
  float64x2_t v48 = FunctionWithSource;
  int v46 = 1;
  LODWORD(__p[0]) = v12;
  RenderPipelineint State = HGMetalRenderPipelineStateCache::getRenderPipelineState(v18, (int *)__p);
  if (v50)
  {
    double v51 = v50;
    operator delete(v50);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v36) < 0) {
    operator delete(v35[0]);
  }
  double v21 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)this, (HGBitmap *)a3);
  uint64_t v22 = *((void *)v21 + 18);
  id v23 = objc_alloc_init(MEMORY[0x1E4F352D8]);
  [v23 setTexture:v22];
  [v23 setLoadAction:0];
  int v24 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
  objc_msgSend((id)objc_msgSend(v24, "colorAttachments"), "setObject:atIndexedSubscript:", v23, 0);
  double v25 = (void *)[a6 renderCommandEncoderWithDescriptor:v24];
  [v25 setLabel:@"ScaleInputTextureToOutputBuffer"];
  [v25 setRenderPipelineState:RenderPipelineState];
  int32x2_t v26 = vdup_n_s32(-2 * a5);
  __asm { FMOV            V1.2S, #-1.0 }
  int32x2_t v32 = (int32x2_t)vadd_f32(vdiv_f32(vcvt_f32_u32((uint32x2_t)vsub_s32(*(int32x2_t *)(a3 + 28), *(int32x2_t *)(a3 + 20))), vcvt_f32_u32((uint32x2_t)vadd_s32(vsub_s32(v26, *(int32x2_t *)(a3 + 20)), *(int32x2_t *)(a3 + 28)))), _D1);
  if (*(float *)v32.i32 <= *(float *)&v32.i32[1]) {
    v32.i32[0] = v32.i32[1];
  }
  *(float *)v32.i32 = *(float *)v32.i32 * 0.5;
  *(float *)v26.i32 = *(float *)v32.i32 + 1.0;
  __p[0] = (void *)0xBF8000003F800000;
  __p[1] = (void *)vdup_lane_s32(v26, 0);
  *(float *)v32.i32 = 0.0 - *(float *)v32.i32;
  float32x2_t v40 = _D1;
  unint64_t v41 = __PAIR64__(v26.u32[0], v32.u32[0]);
  __asm { FMOV            V1.2S, #1.0 }
  v26.i32[1] = v32.i32[0];
  uint64_t v42 = _D1;
  int32x2_t v43 = v26;
  uint64_t v44 = 0x3F800000BF800000;
  int32x2_t v45 = vdup_lane_s32(v32, 0);
  objc_msgSend(v25, "setVertexBytes:length:atIndex:", __p, 64, 0, v35[0], v35[1], (void)v36);
  *(_OWORD *)double v35 = xmmword_1B7E736B0;
  long long v36 = xmmword_1B7E736C0;
  long long v37 = xmmword_1B7E74810;
  long long v38 = xmmword_1B7E74820;
  [v25 setVertexBytes:v35 length:64 atIndex:1];
  [v25 setFragmentTexture:v10 atIndex:0];
  [v25 drawPrimitives:4 vertexStart:0 vertexCount:4];
  [v25 endEncoding];

  return (*(uint64_t (**)(HGBitmap *))(*(void *)v21 + 24))(v21);
}

void sub_1B74E73C4(_Unwind_Exception *a1)
{
}

HGBitmap *HStyleTransfer_ANEImpl::RenderPageMetal(HStyleTransfer_ANEImpl *this, HGPage *a2)
{
  return HStyleTransfer_ANEImpl::_renderPage((uint64_t)this, (uint64_t)a2, 1);
}

HGBitmap *HStyleTransfer_ANEImpl::_renderPage(uint64_t a1, uint64_t a2, int a3)
{
  double v5 = *(void **)(a1 + 408);
  if (v5)
  {
    id v7 = *(HGRenderer **)a2;
    uint64_t v8 = *(void *)(a2 + 36);
    uint64_t v9 = *(void *)(a2 + 44);
    uint64_t v38 = *(void *)(a2 + 60);
    contextCGPoint a = *(void **)(a2 + 52);
    float v10 = (float)(int)[v5 widthBig];
    int v11 = [*(id *)(a1 + 408) heightBig];
    uint64_t v13 = HGRectMake4f(v12, 0.0, 0.0, v10, (float)v11);
    uint64_t v41 = v14;
    uint64_t v42 = v13;
    float v15 = (float)(int)[*(id *)(a1 + 408) widthSmall];
    int v16 = [*(id *)(a1 + 408) heightSmall];
    uint64_t v18 = HGRectMake4f(v17, 0.0, 0.0, v15, (float)v16);
    uint64_t v20 = v19;
    Input = HGRenderer::GetInput(v7, (HGNode *)a1, 0);
    uint64_t v22 = HGRenderer::GetInput(v7, (HGNode *)a1, 1u);
    uint64_t v37 = v8;
    *(void *)&v49.int var0 = v8;
    *(void *)&v49.int var2 = v9;
    NodeMetalTexture = HGGPURenderer::GetNodeMetalTexture(v7, Input, v49, 0, 0);
    *(void *)&v50.int var2 = v38;
    *(void *)&v50.int var0 = contexta;
    int v24 = HGGPURenderer::GetNodeMetalTexture(v7, v22, v50, 0, 0);
    (*(void (**)(HGRenderer *, void))(*(void *)v7 + 144))(v7, 0);
    HGGPURenderer::FlushMetalCommandBuffer(v7);
    *(void *)&v47.int var2 = v41;
    *(void *)&v47.int var0 = v42;
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v7, v47, 24, a3, 1, 0);
    *(void *)&v48.int var0 = v18;
    *(void *)&v48.int var2 = v20;
    int32x2_t v26 = HGGPURenderer::CreateBuffer((uint64_t)v7, v48, 24, a3, 1, 0);
    double v27 = objc_msgSend(*(id *)(HGGPURenderer::GetMetalContext(v7) + 32), "commandBuffer", v37);
    int v28 = HStyleTransfer_ANEImpl::ScaleInputTextureToOutputBuffer((int)v27, (uint64_t)NodeMetalTexture, (uint64_t)Buffer, v7, 18, v27);
    HStyleTransfer_ANEImpl::ScaleInputTextureToOutputBuffer(v28, (uint64_t)v24, (uint64_t)v26, v7, 0, v27);
    [v27 commit];
    uint64_t v29 = MEMORY[0x1BA9C0A20]([v27 waitUntilCompleted]);
    CVBitmapStorage = HGCVBitmap::getCVBitmapStorage((HGBitmap *)Buffer, v30);
    double v33 = (__IOSurface *)objc_msgSend(*(id *)(a1 + 408), "executeSyncWithImage:smallImage:", *(void *)(CVBitmapStorage[16] + 24), *(void *)(*((void *)HGCVBitmap::getCVBitmapStorage((HGBitmap *)v26, v32) + 16) + 24));
    context = (void *)v29;
    if (v33)
    {
      double v34 = v33;
      IOSurfaceLock(v33, 1u, 0);
      [*(id *)(a1 + 408) widthBig];
      [*(id *)(a1 + 408) heightBig];
      HStyleTransfer_ANEImpl::InterleavePlanarSurface((id *)a1, v34, (HGBitmap *)Buffer);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "[HStyleTransfer_ANEImpl::_renderPage] NULL reultSurface from ANE Network");
    double v35 = HStyleTransfer_ANEImpl::_renderInputOnError((HGNode *)a1, a2, (char *)v45);
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    (*(void (**)(char *))(*(void *)Buffer + 24))(Buffer);
    (*(void (**)(char *))(*(void *)v26 + 24))(v26);
    (*(void (**)(HGBitmap *))(*(void *)NodeMetalTexture + 24))(NodeMetalTexture);
    (*(void (**)(HGBitmap *))(*(void *)v24 + 24))(v24);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "[HStyleTransfer_ANEImpl::_renderPage] NULL ane network.");
    double v35 = HStyleTransfer_ANEImpl::_renderInputOnError((HGNode *)a1, a2, (char *)__p);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
  }
  return v35;
}

void sub_1B74E7B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HStyleTransfer_ANEImpl::InterleavePlanarSurface(id *this, __IOSurface *a2, HGBitmap *a3)
{
  unint64_t v6 = (int)[this[51] widthBig];
  unint64_t v7 = (int)[this[51] heightBig];
  size_t BytesPerRow = IOSurfaceGetBytesPerRow(a2);
  BaseAddress = (char *)IOSurfaceGetBaseAddress(a2);
  uint64_t v11 = HGRectMake4f(v10, 0.0, 0.0, (float)v6, (float)v7);
  uint64_t v13 = v12;
  uint64_t v14 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v14, v11, v13, 5, BaseAddress, BytesPerRow);
  float v15 = (HGBitmap *)HGObject::operator new(0x80uLL);
  size_t v16 = BytesPerRow * v7;
  HGBitmap::HGBitmap(v15, v11, v13, 5, &BaseAddress[(BytesPerRow * v7) & 0xFFFFFFFFFFFFFFFELL], BytesPerRow);
  uint64_t v17 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v17, v11, v13, 5, &BaseAddress[2 * v16], BytesPerRow);
  uint64_t v18 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v18, v14);
  uint64_t v19 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v19, v15);
  uint64_t v20 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v20, v17);
  double v21 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v21, a3);
  uint64_t v22 = (HgcStyleTransferANEPost *)HGObject::operator new(0x1A0uLL);
  *((_OWORD *)v22 + 24) = 0u;
  *((_OWORD *)v22 + 25) = 0u;
  *((_OWORD *)v22 + 22) = 0u;
  *((_OWORD *)v22 + 23) = 0u;
  *((_OWORD *)v22 + 2pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *((_OWORD *)v22 + 2HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0u;
  *((_OWORD *)v22 + 18) = 0u;
  *((_OWORD *)v22 + 19) = 0u;
  *((_OWORD *)v22 + 16) = 0u;
  *((_OWORD *)v22 + 17) = 0u;
  *((_OWORD *)v22 + 14) = 0u;
  *((_OWORD *)v22 + 15) = 0u;
  *((_OWORD *)v22 + 12) = 0u;
  *((_OWORD *)v22 + 13) = 0u;
  *((_OWORD *)v22 + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *((_OWORD *)v22 + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0u;
  *((_OWORD *)v22 + 8) = 0u;
  *((_OWORD *)v22 + 9) = 0u;
  *((_OWORD *)v22 + 6) = 0u;
  *((_OWORD *)v22 + 7) = 0u;
  *((_OWORD *)v22 + 4) = 0u;
  *((_OWORD *)v22 + 5) = 0u;
  *((_OWORD *)v22 + 2) = 0u;
  *((_OWORD *)v22 + 3) = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  *((_OWORD *)v22 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0u;
  HgcStyleTransferANEPost::HgcStyleTransferANEPost(v22);
}

void sub_1B74E80D4(_Unwind_Exception *a1)
{
  HGObject::operator delete(v7);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t HStyleTransfer_ANE::RenderContext::Renderer(HStyleTransfer_ANE::RenderContext *this, HGGPURenderer *a2)
{
  uint64_t result = *((void *)this + 2);
  if (!result)
  {
    uint64_t v4 = (HGRenderer *)HGObject::operator new(0x5C8uLL);
    HGGPURenderer::GetCurrentContext(a2, (uint64_t *)&v5);
    HGGPURenderer::HGGPURenderer(v4, &v5.var0);
  }
  return result;
}

void sub_1B74E83B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::PCSharedCount(&a10);
  HGObject::operator delete(v10);
  _Unwind_Resume(a1);
}

HGBitmap *HStyleTransfer_ANEImpl::_renderInputOnError(HGNode *a1, uint64_t a2, char *a3)
{
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  HGLogger::warning((HGLogger *)"%s", (const char *)a2, a3, a3);
  PCSharedCount v5 = *(HGGPURenderer **)a2;
  Input = HGRenderer::GetInput(*(HGRenderer **)a2, a1, 0);
  HGRect v7 = *(HGRect *)(a2 + 36);

  return HGGPURenderer::GetNodeMetalTexture(v5, Input, v7, 0, 1u);
}

void HStyleTransfer_ANE::RenderContext::GetRetainedRenderContext(HGObject **a1@<X8>)
{
  if (HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken != -1) {
    dispatch_once(&HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken, &__block_literal_global_27);
  }
  HGRect v7 = (HGSynchronizable *)_sContextLock;
  char v8 = 0;
  HGSynchronizable::Lock((HGSynchronizable *)_sContextLock);
  int v3 = _sContextRefCount++;
  uint64_t v4 = (HGObject *)_sContext;
  if (v3) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = _sContext == 0;
  }
  if (v5)
  {
    uint64_t v4 = (HGObject *)HGObject::operator new(0x28uLL);
    HGObject::HGObject(v4);
    uint64_t v6 = (void (**)(void *))&unk_1F108F760;
    *(void *)uint64_t v4 = &unk_1F108F760;
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 4) = 0;
    *((void *)v4 + 2) = 0;
    _sContext = (uint64_t)v4;
    goto LABEL_10;
  }
  if (_sContext)
  {
    uint64_t v6 = *(void (***)(void *))_sContext;
LABEL_10:
    ((void (**)(HGObject *))v6)[2](v4);
  }
  *a1 = v4;
  HGSynchronizer::~HGSynchronizer(&v7);
}

void sub_1B74E8570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGObject::operator delete(v9);
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANE::RenderContext::ReleaseRenderContext(void *a1)
{
  if (HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken != -1) {
    dispatch_once(&HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken, &__block_literal_global_27);
  }
  uint64_t v4 = (HGSynchronizable *)_sContextLock;
  char v5 = 0;
  HGSynchronizable::Lock((HGSynchronizable *)_sContextLock);
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 24))(*a1);
    *a1 = 0;
    if (!--_sContextRefCount)
    {
      int v3 = *(OZChannelBase **)(_sContext + 16);
      if (v3) {
        OZChannelBase::setRangeName(v3, v2);
      }
    }
  }
  HGSynchronizer::~HGSynchronizer(&v4);
}

void sub_1B74E8658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
}

void ___ZN18HStyleTransfer_ANE13RenderContext11ContextLockEv_block_invoke()
{
}

void sub_1B74E86B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40BBCAB520);
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANE::RenderContext::~RenderContext(HStyleTransfer_ANE::RenderContext *this)
{
  *(void *)this = &unk_1F108F760;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  HGObject::~HGObject(this);
}

{
  void *v1;
  uint64_t vars8;

  HStyleTransfer_ANE::RenderContext::~RenderContext(this);

  HGObject::operator delete(v1);
}

HGNode *HStyleTransfer_ANE::HStyleTransfer_ANE(HGNode *a1, void *a2, uint64_t *a3)
{
  HGNode::HGNode(a1);
  *uint64_t v6 = &unk_1F108F798;
  HGRect v7 = (void **)(v6 + 51);
  v6[51] = 0;
  v6[52] = 0;
  char v8 = HGObject::operator new(0x1B0uLL);
  uint64_t v9 = *a3;
  uint64_t v12 = v9;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  HStyleTransfer_ANEImpl::HStyleTransfer_ANEImpl((uint64_t)v8, a2, &v12);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  uint64_t v10 = *v7;
  if (*v7 == v8)
  {
    if (v8) {
      (*(void (**)(void *))(*(void *)v8 + 24))(v8);
    }
  }
  else
  {
    if (v10) {
      (*(void (**)(void *))(*(void *)v10 + 24))(v10);
    }
    *HGRect v7 = v8;
  }
  return a1;
}

void sub_1B74E88DC(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v5 = *(void *)(v1 + 416);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  if (*v3) {
    (*(void (**)(void))(*(void *)*v3 + 24))(*v3);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

HGXForm *HStyleTransfer_ANE::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  float v5 = (double)(int)[*(id *)(*((void *)this + 51) + 408) widthBig] * 2.5;
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v8 = v6;
  unsigned int v9 = v6 - DOD;
  unsigned int v10 = HIDWORD(v6) - HIDWORD(DOD);
  if ((int)v6 - (int)DOD >= (HIDWORD(v6) - HIDWORD(DOD))) {
    unsigned int v11 = HIDWORD(v6) - HIDWORD(DOD);
  }
  else {
    unsigned int v11 = v6 - DOD;
  }
  if ((float)v11 <= v5) {
    float v12 = 1.0;
  }
  else {
    float v12 = v5 / (float)v11;
  }
  HGTransform::HGTransform((HGTransform *)v31);
  HGTransform::Scale(v13, v12, v12, 1.0);
  HGTransform::HGTransform((HGTransform *)v30);
  HGTransform::Scale((HGTransform *)v30, (float)(1.0 / v12), (float)(1.0 / v12), 1.0);
  int v14 = [*(id *)(*((void *)this + 51) + 408) widthSmall];
  int v15 = [*(id *)(*((void *)this + 51) + 408) heightSmall];
  HGTransform::HGTransform((HGTransform *)v29);
  float v16 = (float)v14 / (float)v9;
  float v17 = (float)v15 / (float)v10;
  HGTransform::Scale((HGTransform *)v29, v16, v17, 1.0);
  HGTransform::Translate((HGTransform *)v29, (float)(v16 * (float)-(int)DOD), (float)(v17 * (float)-HIDWORD(DOD)), 1.0);
  uint64_t v18 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v18);
  (*(void (**)(HGXForm *, void, HGNode *))(*(void *)v18 + 120))(v18, 0, Input);
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v18 + 576))(v18, v31);
  (*(void (**)(HGXForm *, uint64_t, float))(*(void *)v18 + 592))(v18, 6, 1.0);
  v19.i64[0] = DOD;
  v19.i64[1] = v8;
  v20.i64[0] = 0xFFFFFFFF00000000;
  v20.i64[1] = 0xFFFFFFFF00000000;
  int64x2_t v28 = vaddq_s64((int64x2_t)vbslq_s8(v20, v19, (int8x16_t)vaddq_s64((int64x2_t)v19, (int64x2_t)xmmword_1B7E74830)), (int64x2_t)xmmword_1B7E74840);
  double v21 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v21);
  (*(void (**)(HGTextureWrap *, void, HGXForm *))(*(void *)v21 + 120))(v21, 0, v18);
  HGTextureWrap::SetCropRect(v21, (const HGRect *)&v28);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v21, (const char *)1, v22);
  id v23 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v23);
  (*(void (**)(HGXForm *, void, HGNode *))(*(void *)v23 + 120))(v23, 0, Input);
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v23 + 576))(v23, v29);
  (*(void (**)(HGXForm *, uint64_t, float))(*(void *)v23 + 592))(v23, 6, 1.0);
  (*(void (**)(void, void, HGTextureWrap *))(**((void **)this + 51) + 120))(*((void *)this + 51), 0, v21);
  (*(void (**)(void, uint64_t, HGXForm *))(**((void **)this + 51) + 120))(*((void *)this + 51), 1, v23);
  int v24 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v24);
  (*(void (**)(HGXForm *, void, void))(*(void *)v24 + 120))(v24, 0, *((void *)this + 51));
  (*(void (**)(HGXForm *, unsigned char *))(*(void *)v24 + 576))(v24, v30);
  double v25 = (HGXForm *)*((void *)this + 52);
  int32x2_t v26 = v24;
  if (v25 != v24)
  {
    if (v25) {
      (*(void (**)(HGXForm *))(*(void *)v25 + 24))(v25);
    }
    *((void *)this + 52) = v24;
    (*(void (**)(HGXForm *))(*(void *)v24 + 16))(v24);
    int32x2_t v26 = (HGXForm *)*((void *)this + 52);
  }
  (*(void (**)(HGXForm *))(*(void *)v24 + 24))(v24);
  (*(void (**)(HGXForm *))(*(void *)v23 + 24))(v23);
  (*(void (**)(HGTextureWrap *))(*(void *)v21 + 24))(v21);
  (*(void (**)(HGXForm *))(*(void *)v18 + 24))(v18);
  HGTransform::~HGTransform((HGTransform *)v29);
  HGTransform::~HGTransform((HGTransform *)v30);
  HGTransform::~HGTransform((HGTransform *)v31);
  return v26;
}

void sub_1B74E8F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  HGObject::operator delete(v31);
  (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
  (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  HGTransform::~HGTransform((HGTransform *)&a11);
  HGTransform::~HGTransform((HGTransform *)&a29);
  HGTransform::~HGTransform((HGTransform *)(v33 - 240));
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANE::~HStyleTransfer_ANE(HGNode *this)
{
  *(void *)this = &unk_1F108F798;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F108F798;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v4);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void HStyleTransferANEPost::~HStyleTransferANEPost(HGNode *this)
{
  HgcStyleTransferANEPost::~HgcStyleTransferANEPost(this);

  HGObject::operator delete(v1);
}

const char *HStyleTransferANEPost::GetProgram(HStyleTransferANEPost *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) == 396048) {
    return "//Metal1.0     \n"
  }
           "//LEN=00000004a3\n"
           "fragment half4 fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
           "    const constant float4* hg_Params [[ buffer(0) ]],\n"
           "    texture2d< half > hg_Texture0 [[ texture(0) ]],\n"
           "    sampler hg_Sampler0 [[ sampler(0) ]],\n"
           "    texture2d< half > hg_Texture1 [[ texture(1) ]],\n"
           "    sampler hg_Sampler1 [[ sampler(1) ]],\n"
           "    texture2d< half > hg_Texture2 [[ texture(2) ]],\n"
           "    sampler hg_Sampler2 [[ sampler(2) ]],\n"
           "    texture2d< half > hg_Texture3 [[ texture(3) ]],\n"
           "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
           "{\n"
           "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    half4 r0, r1, r2;\n"
           "    half4 output;\n"
           "\n"
           "    r0.double x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
           "    r1.double x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
           "    r0.w = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy).w;\n"
           "    r2.double x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
           "    r2.z = r1.x;\n"
           "    r2.double y = r0.x;\n"
           "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
           "    r0.xyz = r0.xyz*r0.www;\n"
           "    output = r0;\n"
           "    return output;\n"
           "}\n"
           "//MD5=f54e0f3a:1c54dc8f:c23c4713:e89311f7\n"
           "//SIG=00000000:00000000:00000000:0000000f:0004:0001:0000:0000:0000:0000:001e:0000:0004:04:0:0:0\n";

  return HgcStyleTransferANEPost::GetProgram(this, a2);
}

uint64_t HGlassBlock::RenderTile(HGlassBlock *this, HGTile *a2)
{
  if (*((void *)a2 + 10))
  {
    return HgcGlassBlock::RenderTile(this, a2);
  }
  else
  {
    int v3 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
    if (v3 >= 1)
    {
      uint64_t v4 = (char *)*((void *)a2 + 2);
      size_t v5 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      uint64_t v6 = 16 * *((int *)a2 + 6);
      do
      {
        bzero(v4, v5);
        v4 += v6;
        --v3;
      }
      while (v3);
    }
    return 0;
  }
}

uint64_t HGlassBlock::GetDOD(HGlassBlock *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v4 = HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
  uint64_t v8 = v7;
  if ((*(int (**)(HGlassBlock *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v9 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v8, v9);
  }
  return v4;
}

unint64_t HGlassBlock::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v6 = 0x80000000;
    uint64_t v7 = 0x80000000;
    unint64_t v8 = 0x7FFFFFFF7FFFFFFFLL;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var1 = a4.var1;
    int var3 = a4.var3;
    (*(void (**)(HGNode *, void, _DWORD *))(*(void *)this + 104))(this, 0, v78);
    float v13 = *(float *)v78;
    float v14 = *(float *)&v78[1];
    (*(void (**)(HGNode *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v70);
    (*(void (**)(HGNode *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v74);
    float v15 = (float)var0;
    float v16 = (float)var2;
    if ((float)var0 <= (float)var2)
    {
      float v22 = (float)var1 - v14;
      float v23 = v73 * floorf(v22 * v71);
      float v24 = v22 - v23;
      float v25 = v23 * v75;
      float v26 = v23 * v77;
      float v17 = (float)var3;
      float v27 = (float)var3 - v14;
      float v28 = v73 * floorf(v27 * v71);
      float v29 = v27 - v28;
      float v30 = v28 * v75;
      float v31 = v28 * v77;
      float v20 = -3.4028e38;
      float v21 = 3.4028e38;
      float v32 = (float)var0;
      float v18 = 3.4028e38;
      float v19 = -3.4028e38;
      do
      {
        float v33 = v72 * floorf((float)(v32 - v13) * v70);
        float v34 = (float)(v32 - v13) - v33;
        float v35 = v33 * v74;
        float v36 = (float)(v33 * v74) + v25;
        float v37 = v33 * v76;
        float v38 = v13 + (float)(v34 + v36);
        float v39 = v14 + (float)(v24 + (float)(v37 + v26));
        if (v38 < v21) {
          float v21 = v38;
        }
        if (v20 < v38) {
          float v20 = v38;
        }
        if (v39 < v18) {
          float v18 = v14 + (float)(v24 + (float)(v37 + v26));
        }
        if (v19 < v39) {
          float v19 = v14 + (float)(v24 + (float)(v37 + v26));
        }
        float v40 = v13 + (float)(v34 + (float)(v35 + v30));
        float v41 = v14 + (float)(v29 + (float)(v37 + v31));
        if (v40 < v21) {
          float v21 = v40;
        }
        if (v20 < v40) {
          float v20 = v40;
        }
        if (v41 < v18) {
          float v18 = v41;
        }
        if (v19 < v41) {
          float v19 = v41;
        }
        float v32 = v32 + 1.0;
      }
      while (v32 <= v16);
    }
    else
    {
      float v17 = (float)var3;
      float v18 = 3.4028e38;
      float v19 = -3.4028e38;
      float v20 = -3.4028e38;
      float v21 = 3.4028e38;
    }
    float v42 = (float)(var1 + 1);
    if (v17 > v42)
    {
      float v43 = v72 * floorf((float)(v15 - v13) * v70);
      float v44 = (float)(v15 - v13) - v43;
      float v45 = v43 * v74;
      float v46 = v43 * v76;
      float v47 = v16 - v13;
      float v48 = v72 * floorf(v47 * v70);
      float v49 = v47 - v48;
      float v50 = v48 * v74;
      float v51 = v48 * v76;
      do
      {
        float v52 = v73 * floorf((float)(v42 - v14) * v71);
        float v53 = (float)(v42 - v14) - v52;
        float v54 = v52 * v75;
        float v55 = v45 + (float)(v52 * v75);
        float v56 = v52 * v77;
        float v57 = v13 + (float)(v44 + v55);
        float v58 = v14 + (float)(v53 + (float)(v46 + v56));
        if (v57 < v21) {
          float v21 = v57;
        }
        if (v20 < v57) {
          float v20 = v57;
        }
        if (v58 < v18) {
          float v18 = v14 + (float)(v53 + (float)(v46 + v56));
        }
        if (v19 < v58) {
          float v19 = v14 + (float)(v53 + (float)(v46 + v56));
        }
        float v59 = v13 + (float)(v49 + (float)(v50 + v54));
        float v60 = v14 + (float)(v53 + (float)(v51 + v56));
        if (v59 < v21) {
          float v21 = v59;
        }
        if (v20 < v59) {
          float v20 = v59;
        }
        if (v60 < v18) {
          float v18 = v60;
        }
        if (v19 < v60) {
          float v19 = v60;
        }
        float v42 = v42 + 1.0;
      }
      while (v42 < v17);
    }
    unsigned int v6 = (int)v21;
    uint64_t v7 = (int)v18;
    unint64_t v8 = (int)v20 | ((unint64_t)(int)v19 << 32);
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v64 = HGRectIntersection(v6 | (unint64_t)(v7 << 32), v8, DOD, v63);
  BOOL IsNull = HGRectIsNull(v64, v65);
  unsigned int v67 = HIDWORD(v64) - 2;
  if (IsNull)
  {
    unsigned int v67 = HIDWORD(v64);
    unsigned int v68 = v64;
  }
  else
  {
    unsigned int v68 = v64 - 2;
  }
  return v68 | ((unint64_t)v67 << 32);
}

uint64_t HGlassBlock::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v7 = v6;
  HgcGlassBlock::SetParameter((HgcGlassBlock *)this, 3, (float)(int)DOD, (float)SHIDWORD(DOD), 0.0, 0.0, v8);
  HgcGlassBlock::SetParameter((HgcGlassBlock *)this, 4, (float)(int)v7, (float)SHIDWORD(v7), 0.0, 0.0, v9);
  int v10 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 1);
  (*(void (**)(HGNode *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 1, v15);
  float v11 = v17;
  (*(void (**)(HGNode *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 2, v15);
  float v12 = v16;
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2))
  {
    float v13 = -v12;
    if (v12 >= 0.0) {
      float v13 = v12;
    }
    if (v13 > 0.16 || (float)(v11 / (float)v10) > 2.15) {
      (*(void (**)(HGNode *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
    }
  }
  return HgcGlassBlock::GetOutput((HgcGlassBlock *)this, a2);
}

void HGlassBlock::~HGlassBlock(HGNode *this)
{
  HgcGlassBlock::~HgcGlassBlock(this);

  HGObject::operator delete(v1);
}

void sub_1B74EABFC(_Unwind_Exception *a1)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B74EB7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  _Unwind_Resume(a1);
}

void sub_1B74EC4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
  HGTransform::~HGTransform((HGTransform *)&a19);
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 24))(a38);
  }
  (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
  (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
  if (a40) {
    (*(void (**)(uint64_t))(*(void *)a40 + 24))(a40);
  }
  (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
  HGTransform::~HGTransform((HGTransform *)&a41);
  uint64_t v46 = *(void *)(v44 - 160);
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 24))(v46);
  }
  _Unwind_Resume(a1);
}

void sub_1B74ECC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B74ED150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HAlphaKeyer::HAlphaKeyer(HAlphaKeyer *this)
{
}

void sub_1B74ED92C(_Unwind_Exception *a1)
{
  HgcAlphaKeyer::~HgcAlphaKeyer(v1);
  _Unwind_Resume(a1);
}

void HAlphaKeyer::~HAlphaKeyer(HGNode *this)
{
  HgcAlphaKeyer::~HgcAlphaKeyer(this);

  HGObject::operator delete(v1);
}

uint64_t HAlphaKeyer::GetROI(HAlphaKeyer *this, HGRenderer *a2, int a3, long long a4)
{
  if (a3 == 2)
  {
    if (*((unsigned char *)this + 416)) {
      unsigned int v4 = 2816;
    }
    else {
      unsigned int v4 = 256;
    }
    *(void *)&long long v15 = HGRectMake4i(0, 0, v4, 1u);
    *((void *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v5;
    uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    uint64_t v8 = v7;
    *(void *)&v16.int var0 = v6;
    *(void *)&v16.int var2 = v8;
    HGRect::Grow((HGRect *)&v15, v16);
  }
  else if (a3 == 1)
  {
    uint64_t v9 = HGRectMake4i(-*((_DWORD *)this + 105), -*((_DWORD *)this + 105), *((_DWORD *)this + 105), *((_DWORD *)this + 105));
    uint64_t v11 = v10;
    uint64_t v12 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    *(void *)&long long v15 = HGRectGrow(v9, v11, v12);
    *((void *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v13;
  }
  else if (a3)
  {
    return HGRectNull;
  }
  else
  {
    return a4;
  }
  return v15;
}

uint64_t HSinusoidalToEquirect::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HSinusoidalToEquirect::GetROI(HSinusoidalToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 0;
  }
  int var2 = a4.var2;
  int var0 = a4.var0;
  int var3 = a4.var3;
  int var1 = a4.var1;
  (*(void (**)(HSinusoidalToEquirect *, void, float *))(*(void *)this + 104))(this, 0, v35);
  uint64_t v34 = *(void *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(void *)this + 104))(this, 1, v35);
  uint64_t v33 = *(void *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(void *)this + 104))(this, 2, v35);
  long long v32 = *(_OWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(void *)this + 104))(this, 3, v35);
  long long v31 = *(_OWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(void *)this + 104))(this, 4, v35);
  long long v30 = *(_OWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(void *)this + 104))(this, 5, v35);
  float v10 = (float)var0;
  long long v29 = *(_OWORD *)v35;
  float v11 = (float)var1;
  float v12 = (float)var3;
  if ((float)var0 <= (float)var2)
  {
    float v15 = -3.4028e38;
    float v16 = 3.4028e38;
    float v13 = 3.4028e38;
    float v14 = -3.4028e38;
    do
    {
      float v27 = v10;
      float v28 = (float)var1;
      processPoint(&v27, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, v35);
      float v25 = v10;
      float v26 = (float)var3;
      processPoint(&v25, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, &v27);
      float v18 = v35[1];
      float v17 = v35[0];
      if (v13 >= v35[0]) {
        float v19 = v35[0];
      }
      else {
        float v19 = v13;
      }
      if (v16 >= v35[1]) {
        float v20 = v35[1];
      }
      else {
        float v20 = v16;
      }
      if (v14 > v35[0]) {
        float v17 = v14;
      }
      if (v15 > v35[1]) {
        float v18 = v15;
      }
      if (v19 >= v27) {
        float v13 = v27;
      }
      else {
        float v13 = v19;
      }
      if (v20 >= v28) {
        float v16 = v28;
      }
      else {
        float v16 = v20;
      }
      if (v17 <= v27) {
        float v14 = v27;
      }
      else {
        float v14 = v17;
      }
      if (v18 <= v28) {
        float v15 = v28;
      }
      else {
        float v15 = v18;
      }
      float v10 = v10 + 1.0;
    }
    while (v10 <= (float)var2);
  }
  else
  {
    float v13 = 3.4028e38;
    float v14 = -3.4028e38;
    float v15 = -3.4028e38;
    float v16 = 3.4028e38;
  }
  for (; v11 <= v12; float v11 = v11 + 1.0)
  {
    float v27 = (float)var0;
    float v28 = v11;
    processPoint(&v27, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, v35);
    float v25 = (float)var2;
    float v26 = v11;
    processPoint(&v25, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, &v27);
    float v22 = v35[1];
    float v21 = v35[0];
    if (v13 >= v35[0]) {
      float v23 = v35[0];
    }
    else {
      float v23 = v13;
    }
    if (v16 >= v35[1]) {
      float v24 = v35[1];
    }
    else {
      float v24 = v16;
    }
    if (v14 > v35[0]) {
      float v21 = v14;
    }
    if (v15 > v35[1]) {
      float v22 = v15;
    }
    if (v23 >= v27) {
      float v13 = v27;
    }
    else {
      float v13 = v23;
    }
    if (v24 >= v28) {
      float v16 = v28;
    }
    else {
      float v16 = v24;
    }
    if (v21 <= v27) {
      float v14 = v27;
    }
    else {
      float v14 = v21;
    }
    if (v22 <= v28) {
      float v15 = v28;
    }
    else {
      float v15 = v22;
    }
  }
  return HGRectMake4i((int)(float)(floorf(v13) + -1.0), (int)(float)(floorf(v16) + -1.0), (int)(float)(ceilf(v14) + 1.0), (int)(float)(ceilf(v15) + 1.0));
}

float processPoint@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, float *a7@<X6>, float *a8@<X8>)
{
  float v11 = a1[1];
  float v12 = *a2 * 0.5;
  float v13 = a2[1] * 0.5;
  float v14 = (float)(a5[3] + (float)((float)((float)(*a1 * *a5) + (float)(v11 * a5[1])) + (float)(a5[2] * 0.0))) + v13;
  float v15 = *a3;
  float v16 = (float)(a3[1] * v14) + -1.57079633;
  float v17 = (float)((float)((float)(a4[3]
                              + (float)((float)((float)(*a1 * *a4) + (float)(v11 * a4[1])) + (float)(a4[2] * 0.0)))
                      + v12)
              * *a3)
      + -3.14159265;
  float v18 = (float)(cosf(v16) * v17) + 3.14159265;
  float v19 = (float)(v18 / v15) - v12;
  float v20 = a6[3] + (float)((float)(a6[2] * 0.0) + (float)((float)((float)(v14 - v13) * a6[1]) + (float)(*a6 * v19)));
  float result = a7[3] + (float)((float)(a7[2] * 0.0) + (float)((float)((float)(v14 - v13) * a7[1]) + (float)(*a7 * v19)));
  *a8 = v20;
  a8[1] = result;
  return result;
}

void HSinusoidalToEquirect::~HSinusoidalToEquirect(HGNode *this)
{
  HgcSinusoidalToEquirect::~HgcSinusoidalToEquirect(this);

  HGObject::operator delete(v1);
}

void sub_1B74EFE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  HGObject::operator delete(v12);
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)va);
  if (STACK[0x210]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x210] + 24))(STACK[0x210]);
  }
  _Unwind_Resume(a1);
}

void HInsectEye_Base::HInsectEye_Base(HInsectEye_Base *this)
{
}

void HInsectEye_Base::~HInsectEye_Base(HGNode *this)
{
  HgcInsectEye::~HgcInsectEye(this);

  HGObject::operator delete(v1);
}

uint64_t HInsectEye_Base::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = &HGRectInfinite;
  if (a3) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

double HInsectEye_Base::GetROI(HInsectEye_Base *this, HGRenderer *a2, int a3, HGRect a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  if (a3 > 0) {
    return *(double *)&HGRectNull;
  }
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  (*(void (**)(HInsectEye_Base *, void, void *))(*(void *)this + 104))(this, 0, v15);
  uint64_t v8 = v15[0];
  (*(void (**)(HInsectEye_Base *, uint64_t, void *))(*(void *)this + 104))(this, 2, v15);
  float v9 = *(float *)v15;
  (*(void (**)(HInsectEye_Base *, uint64_t, void *))(*(void *)this + 104))(this, 6, v15);
  if (a3) {
    return *(double *)&HGRectNull;
  }
  double v11 = 1.0 - v9;
  if (v9 > 1.0) {
    double v11 = v9 + -1.0;
  }
  float v12 = v11;
  int32x2_t v13 = vcvt_s32_f32(vadd_f32(vmul_n_f32(vcvt_f32_s32((int32x2_t)__PAIR64__((int)(float)(*(float *)&v8 * v12) + (int)v4, (int)v5 - (int)(float)(*(float *)&v8 * v12))), *(float *)v15), (float32x2_t)0x40000000C0000000));
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(void *)&double result = vorrq_s8((int8x16_t)vshll_n_s32(vcvt_s32_f32(vadd_f32(vmul_n_f32(vcvt_f32_s32((int32x2_t)__PAIR64__((int)(float)(*((float *)&v8 + 1) * v12)+ HIDWORD(v4), HIDWORD(v5)- (int)(float)(*((float *)&v8 + 1) * v12))), *((float *)v15 + 1)), (float32x2_t)0x40000000C0000000)), 0x20uLL), v14).u64[0];
  return result;
}

uint64_t HInsectEye_Base::GetOutput(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 304))(a2)) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 136))(a1, 0, 2);
  }
  return a1;
}

void sub_1B74F09FC(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B74F1BD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

float *hsvtorgb(float a1, float a2, float a3, float *result, float *a5, float *a6)
{
  if (a2 >= 0.00001)
  {
    for (; a1 >= 6.0; a1 = a1 + -6.0)
      ;
    for (; a1 < 0.0; a1 = a1 + 6.0)
      ;
    if (a2 <= 1.0) {
      float v6 = a2;
    }
    else {
      float v6 = 1.0;
    }
    int v7 = (int)a1;
    float v8 = a1 - (float)(int)a1;
    float v9 = (float)(1.0 - v6) * a3;
    float v10 = (float)(1.0 - (float)(v6 * v8)) * a3;
    float v11 = (float)(1.0 - (float)(v6 * (float)(1.0 - v8))) * a3;
    switch(v7)
    {
      case 0:
        *double result = a3;
        *a5 = v11;
        goto LABEL_13;
      case 1:
        *double result = v10;
        *a5 = a3;
LABEL_13:
        *a6 = v9;
        return result;
      case 2:
        *double result = v9;
        *a5 = a3;
        *a6 = v11;
        return result;
      case 3:
        *double result = v9;
        *a5 = v10;
        goto LABEL_17;
      case 4:
        *double result = v11;
        *a5 = v9;
LABEL_17:
        *a6 = a3;
        break;
      case 5:
        *double result = a3;
        *a5 = v9;
        *a6 = v10;
        break;
      default:
        return result;
    }
  }
  else
  {
    *a6 = a3;
    *a5 = a3;
    *double result = a3;
  }
  return result;
}

void OMSamples::OMSamples(OMSamples *this)
{
  *(void *)this = &unk_1F1090658;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *((void *)this + 17) = 0;
  operator new();
}

void sub_1B74F21B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 120);
  std::vector<OMEdge>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 96);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&a10);
  int8x16_t v14 = *(void **)(v10 + 72);
  if (v14)
  {
    *(void *)(v10 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v14;
    operator delete(v14);
  }
  OMSamples::OMSamples(v12, v11, v10);
  _Unwind_Resume(a1);
}

void OMSamples::~OMSamples(OMSamples *this)
{
  OMSamples::~OMSamples(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(void *)this = &unk_1F1090658;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(void **)(v2 + 8);
  if (v3 != *(void **)v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
    uint64_t v3 = *(void **)v2;
    do
    {
      float v6 = v3[v4];
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v3 = *(void **)v2;
      }
      uint64_t v4 = v5++;
    }
    while (v4 < (uint64_t)(*(void *)(v2 + 8) - (void)v3) >> 3);
  }
  if (v3)
  {
    *(void *)(v2 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x1BA9BFBA0](v2, 0x80C40D6874129);
  uint64_t v10 = (void **)((char *)this + 120);
  std::vector<OMEdge>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 96);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
}

void std::vector<OMEdge>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      float v6 = v4 - 88;
      int v7 = v4 - 88;
      float v8 = v4 - 88;
      do
      {
        float v9 = *(void (***)(char *))v8;
        v8 -= 88;
        (*v9)(v7);
        v6 -= 88;
        BOOL v10 = v7 == v2;
        int v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<Vec3f>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<Vec3f>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      float v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void FxSupport::newHGRefWithInput<HGColorMatrix>()
{
  uint64_t v0 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
  HGColorMatrix::HGColorMatrix(v0);
}

void sub_1B74F2410(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x1555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  float v18 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  float v11 = &v10[12 * v4];
  std::string __p = v10;
  float v15 = v11;
  float v17 = &v10[12 * v9];
  *(_DWORD *)float v11 = *a2;
  *((_DWORD *)v11 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  float v16 = v11 + 12;
  std::vector<Vec3f>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    float v16 = &v15[(v16 - v15 - 12) % 0xCuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_1B74F26BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<Vec3f>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *double result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void OMSamples::OMSamples(void **a1, void **a2, uint64_t a3)
{
  int v5 = *a1;
  if (v5)
  {
    *(void *)(a3 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    *(void *)(a3 + 32) = v6;
    operator delete(v6);
  }
}

unint64_t HiOSKaleidoscope::GetDOD(HiOSKaleidoscope *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4 = *(void *)&a4.var2;
  unint64_t v5 = *(void *)&a4.var0;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long double v7 = *((double *)this + 52);
  double v8 = cos(v7);
  float v9 = 6.28318531 / (float)*((int *)this + 106);
  double v10 = v7 + v9;
  double v11 = sin(v10);
  if (!HGRectIsInfinite(v5, v4))
  {
    float v12 = v8;
    float v13 = v11;
    float v33 = v13;
    float v34 = v12;
    float v14 = cos(v10);
    float v15 = sin(v7);
    (*(void (**)(HiOSKaleidoscope *, void, float *))(*(void *)this + 104))(this, 0, &v38);
    float v17 = v38;
    float v16 = v39;
    float v18 = -v15;
    float v19 = -v14;
    float v20 = (double)SHIDWORD(v5) + (double)(HIDWORD(v4) - HIDWORD(v5));
    float v37 = v20;
    float v38 = (float)(int)v5;
    float v21 = (double)(int)v5 + (double)((int)v4 - (int)v5);
    float v35 = v20;
    float v36 = v21;
    float v32 = v18;
    float v22 = 0.0;
    if (ClipSegmentToHalfplane((float)(int)v5, v20, v21, v20, v17, v39, v18, v34, &v38, &v37, &v36, &v35)
      && ClipSegmentToHalfplane(v38, v37, v36, v35, v17, v16, v33, v19, &v38, &v37, &v36, &v35))
    {
      float v22 = fmaxf(sqrtf((float)((float)(v38 - v17) * (float)(v38 - v17)) + (float)((float)(v37 - v16) * (float)(v37 - v16))), 0.0);
      float v23 = sqrtf((float)((float)(v36 - v17) * (float)(v36 - v17)) + (float)((float)(v35 - v16) * (float)(v35 - v16)));
      if (v23 > v22) {
        float v22 = v23;
      }
    }
    float v37 = (double)SHIDWORD(v5) + (double)(HIDWORD(v4) - HIDWORD(v5));
    float v38 = (double)(int)v5 + (double)((int)v4 - (int)v5);
    float v35 = (float)SHIDWORD(v5);
    float v36 = v38;
    if (ClipSegmentToHalfplane(v21, v20, v21, (float)SHIDWORD(v5), v17, v16, v32, v34, &v38, &v37, &v36, &v35)
      && ClipSegmentToHalfplane(v38, v37, v36, v35, v17, v16, v33, v19, &v38, &v37, &v36, &v35))
    {
      float v24 = sqrtf((float)((float)(v38 - v17) * (float)(v38 - v17)) + (float)((float)(v37 - v16) * (float)(v37 - v16)));
      if (v24 > v22) {
        float v22 = v24;
      }
      float v25 = sqrtf((float)((float)(v36 - v17) * (float)(v36 - v17)) + (float)((float)(v35 - v16) * (float)(v35 - v16)));
      if (v25 > v22) {
        float v22 = v25;
      }
    }
    float v37 = (float)SHIDWORD(v5);
    float v38 = (double)(int)v5 + (double)((int)v4 - (int)v5);
    float v35 = (float)SHIDWORD(v5);
    float v36 = (float)(int)v5;
    if (ClipSegmentToHalfplane(v21, (float)SHIDWORD(v5), (float)(int)v5, (float)SHIDWORD(v5), v17, v16, v32, v34, &v38, &v37, &v36, &v35))
    {
      float v26 = v33;
      if (ClipSegmentToHalfplane(v38, v37, v36, v35, v17, v16, v33, v19, &v38, &v37, &v36, &v35))
      {
        float v27 = sqrtf((float)((float)(v38 - v17) * (float)(v38 - v17)) + (float)((float)(v37 - v16) * (float)(v37 - v16)));
        if (v27 > v22) {
          float v22 = v27;
        }
        float v28 = sqrtf((float)((float)(v36 - v17) * (float)(v36 - v17)) + (float)((float)(v35 - v16) * (float)(v35 - v16)));
        if (v28 > v22) {
          float v22 = v28;
        }
      }
    }
    else
    {
      float v26 = v33;
    }
    float v37 = (float)SHIDWORD(v5);
    float v38 = (float)(int)v5;
    float v35 = (double)SHIDWORD(v5) + (double)(HIDWORD(v4) - HIDWORD(v5));
    float v36 = (float)(int)v5;
    if (ClipSegmentToHalfplane((float)(int)v5, (float)SHIDWORD(v5), (float)(int)v5, v20, v17, v16, v32, v34, &v38, &v37, &v36, &v35)&& ClipSegmentToHalfplane(v38, v37, v36, v35, v17, v16, v26, v19, &v38, &v37, &v36, &v35))
    {
      float v29 = sqrtf((float)((float)(v38 - v17) * (float)(v38 - v17)) + (float)((float)(v37 - v16) * (float)(v37 - v16)));
      if (v29 > v22) {
        float v22 = v29;
      }
      float v30 = sqrtf((float)((float)(v36 - v17) * (float)(v36 - v17)) + (float)((float)(v35 - v16) * (float)(v35 - v16)));
      if (v30 > v22) {
        float v22 = v30;
      }
    }
    return HGRectMake4i(vcvtms_s32_f32(v17 - v22), vcvtms_s32_f32(v16 - v22), vcvtpd_s64_f64(v22 + v22 + floorf(v17 - v22)), vcvtpd_s64_f64(v22 + v22 + floorf(v16 - v22)));
  }
  return v5;
}

BOOL ClipSegmentToHalfplane(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12 = (float)((float)(a1 - a5) * a7) + (float)((float)(a2 - a6) * a8);
  float v13 = (float)((float)(a3 - a5) * a7) + (float)((float)(a4 - a6) * a8);
  BOOL v14 = v13 > 0.0 || v12 > 0.0;
  if (v14)
  {
    if (v12 <= 0.0 || v13 <= 0.0)
    {
      if (v12 <= 0.0)
      {
        float v16 = v13 / (float)(v13 - v12);
        a1 = (float)((float)(a1 - a3) * v16) + a3;
        a2 = (float)((float)(a2 - a4) * v16) + a4;
      }
      else
      {
        float v15 = v12 / (float)(v12 - v13);
        a3 = (float)((float)(a3 - a1) * v15) + a1;
        a4 = (float)((float)(a4 - a2) * v15) + a2;
      }
    }
    *a9 = a1;
    *a10 = a2;
    *a11 = a3;
    *a12 = a4;
  }
  return v14;
}

uint64_t HiOSKaleidoscope::GetROI(HiOSKaleidoscope *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var2 = a4.var2;
  int var0 = a4.var0;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int var1 = a4.var1;
  int var3 = a4.var3;
  double v9 = *((double *)this + 52);
  __double2 v10 = __sincos_stret(v9);
  float cosval = v10.__cosval;
  float sinval = v10.__sinval;
  float v13 = 6.28318531 / (float)*((int *)this + 106);
  double v14 = v13;
  __double2 v15 = __sincos_stret(v9 + v13);
  (*(void (**)(HiOSKaleidoscope *, void, float *))(*(void *)this + 104))(this, 0, &v43);
  float v16 = (double)var0 - v43;
  float v17 = (double)var1 + (double)(var3 - var1) - v44;
  float v18 = v16 * v16;
  float v19 = v17 * v17;
  float v20 = sqrtf(v18 + v19);
  float v21 = (double)var0 + (double)(var2 - var0) - v43;
  float v22 = v21 * v21;
  float v23 = sqrtf(v22 + v19);
  if (v23 <= v20) {
    float v23 = v20;
  }
  float v24 = (double)var1 - v44;
  float v25 = v24 * v24;
  float v26 = sqrtf(v18 + v25);
  if (v26 <= v23) {
    float v26 = v23;
  }
  float v27 = sqrtf(v22 + v25);
  if (v27 <= v26) {
    float v28 = v26;
  }
  else {
    float v28 = v27;
  }
  float v29 = v43 + (float)(v28 * cosval);
  float v30 = v44 + (float)(v28 * sinval);
  if (v29 >= v43)
  {
    float v31 = v43;
    float v32 = v43;
    if (v29 > v43)
    {
      float v31 = v43;
      float v32 = v43 + (float)(v28 * cosval);
    }
  }
  else
  {
    float v31 = v43 + (float)(v28 * cosval);
    float v32 = v43;
  }
  if (v30 >= v44)
  {
    float v35 = v44;
    float v36 = v44;
    if (v30 > v44)
    {
      float v35 = v44;
      float v36 = v44 + (float)(v28 * sinval);
    }
  }
  else
  {
    float v35 = v44 + (float)(v28 * sinval);
    float v36 = v44;
  }
  float v33 = v15.__cosval;
  float v37 = v43 + (float)(v28 * v33);
  float v34 = v15.__sinval;
  float v38 = v44 + (float)(v28 * v34);
  if (v37 >= v31)
  {
    if (v37 > v32) {
      goto LABEL_20;
    }
  }
  else
  {
    float v31 = v43 + (float)(v28 * v33);
  }
  float v37 = v32;
LABEL_20:
  if (v38 >= v35)
  {
    if (v38 > v36) {
      float v36 = v38;
    }
  }
  else
  {
    float v35 = v38;
  }
  double v39 = *((double *)this + 52);
  signed int v40 = vcvtmd_s64_f64(v39 / 1.57079633);
  signed int v41 = vcvtmd_s64_f64((v39 + v14) / 1.57079633);
  if (v40 < v41)
  {
    do
    {
      switch(++v40 & 3)
      {
        case 1:
          if ((float)(v44 + v28) > v36) {
            float v36 = v44 + v28;
          }
          break;
        case 2:
          if ((float)(v43 - v28) < v31) {
            float v31 = v43 - v28;
          }
          break;
        case 3:
          if ((float)(v44 - v28) < v35) {
            float v35 = v44 - v28;
          }
          break;
        default:
          if ((float)(v43 + v28) > v37) {
            float v37 = v43 + v28;
          }
          break;
      }
    }
    while (v41 != v40);
  }
  return HGRectMake4i(vcvtmd_s64_f64(v31 + -1.0), vcvtmd_s64_f64(v35 + -1.0), vcvtpd_s64_f64(floor(v31 + -1.0) + (float)(v37 - v31) + 2.0), vcvtpd_s64_f64(floor(v35 + -1.0) + (float)(v36 - v35) + 2.0));
}

void HiOSKaleidoscope::~HiOSKaleidoscope(HGNode *this)
{
  HgciOSKaleidoscope::~HgciOSKaleidoscope(this);

  HGObject::operator delete(v1);
}

void HMirror::HMirror(HMirror *this)
{
}

void HMirror::~HMirror(HGNode *this)
{
  HgcMirror::~HgcMirror(this);

  HGObject::operator delete(v1);
}

uint64_t HMirror::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = &HGRectInfinite;
  if (a3) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

unint64_t HMirror::GetROI(HMirror *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var1 = a4.var1;
    int var3 = a4.var3;
    (*(void (**)(HMirror *, void, _DWORD *))(*(void *)this + 104))(this, 0, v61);
    float v11 = *(float *)v61;
    float v12 = *(float *)&v61[1];
    (*(void (**)(HMirror *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v57);
    (*(void (**)(HMirror *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v53);
    if (var0 <= var2)
    {
      float v17 = (float)var1 - v12;
      float v18 = v17 * v58;
      float v19 = v17 * v60;
      float v20 = (float)var3 - v12;
      float v21 = v20 * v58;
      float v22 = v20 * v60;
      float v15 = -3.4028e38;
      float v16 = 3.4028e38;
      int v23 = var0;
      float v13 = 3.4028e38;
      float v14 = -3.4028e38;
      do
      {
        float v24 = (float)v23 - v11;
        float v25 = v24 * v57;
        float v26 = (float)(v24 * v57) + v18;
        float v27 = v24 * v59;
        float v28 = fabsf(v26);
        float v29 = v11 + (float)((float)(v28 * v53) + (float)((float)(v27 + v19) * v54));
        float v30 = v12 + (float)((float)(v28 * v55) + (float)((float)(v27 + v19) * v56));
        if (v13 >= v29) {
          float v13 = v29;
        }
        if (v16 >= v30) {
          float v16 = v30;
        }
        if (v14 <= v29) {
          float v14 = v29;
        }
        if (v15 <= v30) {
          float v15 = v30;
        }
        float v31 = v27 + v22;
        float v32 = fabsf(v25 + v21);
        float v33 = (float)(v32 * v53) + (float)(v31 * v54);
        float v34 = v12 + (float)((float)(v32 * v55) + (float)(v31 * v56));
        if (v13 >= (float)(v11 + v33)) {
          float v13 = v11 + v33;
        }
        if (v16 >= v34) {
          float v16 = v34;
        }
        if (v14 <= (float)(v11 + v33)) {
          float v14 = v11 + v33;
        }
        if (v15 <= v34) {
          float v15 = v34;
        }
        ++v23;
      }
      while (var2 + 1 != v23);
    }
    else
    {
      float v13 = 3.4028e38;
      float v14 = -3.4028e38;
      float v15 = -3.4028e38;
      float v16 = 3.4028e38;
    }
    if (var1 <= var3)
    {
      float v35 = (float)var0 - v11;
      float v36 = v35 * v57;
      float v37 = v35 * v59;
      float v38 = (float)var2 - v11;
      float v39 = v38 * v57;
      float v40 = v38 * v59;
      do
      {
        float v41 = (float)var1 - v12;
        float v42 = v41 * v58;
        float v43 = v36 + (float)(v41 * v58);
        float v44 = v41 * v60;
        float v45 = fabsf(v43);
        float v46 = v11 + (float)((float)(v45 * v53) + (float)((float)(v37 + v44) * v54));
        float v47 = v12 + (float)((float)(v45 * v55) + (float)((float)(v37 + v44) * v56));
        if (v13 >= v46) {
          float v13 = v46;
        }
        if (v16 >= v47) {
          float v16 = v47;
        }
        if (v14 <= v46) {
          float v14 = v46;
        }
        if (v15 <= v47) {
          float v15 = v47;
        }
        float v48 = v40 + v44;
        float v49 = fabsf(v39 + v42);
        float v50 = (float)(v49 * v53) + (float)(v48 * v54);
        float v51 = v12 + (float)((float)(v49 * v55) + (float)(v48 * v56));
        if (v13 >= (float)(v11 + v50)) {
          float v13 = v11 + v50;
        }
        if (v16 >= v51) {
          float v16 = v51;
        }
        if (v14 <= (float)(v11 + v50)) {
          float v14 = v11 + v50;
        }
        if (v15 <= v51) {
          float v15 = v51;
        }
        ++var1;
      }
      while (var3 + 1 != var1);
    }
    unsigned int v4 = (int)(float)(v13 + -2.0);
    uint64_t v5 = (int)(float)(v16 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HMirror::SetParameter(HgcMirror *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  long double v7 = (float *)((char *)this + 16 * (int)a2);
  v7[104] = a3;
  v7[105] = a4;
  v7[106] = a5;
  v7[107] = a6;
  return HgcMirror::SetParameter(this, a2, a3, a4, a5, a6, a7);
}

uint64_t HBadTV::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 1) {
    return a4;
  }
  else {
    return 0;
  }
}

uint64_t HBadTV::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a3 == 1)
  {
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 10, v24);
    float v7 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 8, v24);
    float v8 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 13, v24);
    float v9 = *(float *)v24;
    (*(void (**)(HGNode *, void, _OWORD *))(*(void *)this + 104))(this, 0, v23);
    v24[0] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[1] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 1, v23);
    long long v24[2] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[3] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 2, v23);
    v24[4] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[5] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(void *)this + 104))(this, 3, v23);
    v24[6] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[7] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 4, &v19);
    v23[0] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[1] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 5, &v19);
    _OWORD v23[2] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[3] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 6, &v19);
    v23[4] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[5] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(void *)this + 104))(this, 7, &v19);
    _OWORD v23[6] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[7] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    double v19 = (double)(int)v5;
    double v20 = (double)SHIDWORD(v5);
    double v21 = (double)((int)v4 - (int)v5);
    double v22 = (double)(HIDWORD(v4) - HIDWORD(v5));
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v23, &v19, (uint64_t)&v19);
    double v10 = v19 + v21 + v7 + v9;
    double v11 = v20 + v22 + v8 + 1.9;
    double v19 = v19 - v7 - v9 + -1.0;
    double v20 = v20 + v8 + -1.0;
    double v21 = v10 - v19;
    double v22 = v11 - v20;
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v24, &v19, (uint64_t)&v19);
    unsigned int v12 = (int)v19;
    unint64_t v13 = (int)v20;
    unint64_t v14 = (int)(v19 + v21) | ((unint64_t)(int)(v20 + v22) << 32);
  }
  else if (a3)
  {
    unint64_t v14 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t ROI = HgcBadTV::GetROI(this, a2, 0, a4);
    unsigned int v12 = ROI;
    unint64_t v14 = v16;
    unint64_t v13 = HIDWORD(ROI);
  }
  uint64_t v17 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v12 | (v13 << 32), v14, v17);
}

void HBadTV::~HBadTV(HGNode *this)
{
  HgcBadTV::~HgcBadTV(this);

  HGObject::operator delete(v1);
}

void sub_1B74F437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 24))(a19);
  }
  PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::~PCArray((uint64_t)&a36);
  if (a39) {
    (*(void (**)(uint64_t))(*(void *)a39 + 24))(a39);
  }
  _Unwind_Resume(a1);
}

uint64_t PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1090DC0;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F1090DC0;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

void PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::resize(uint64_t a1, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exceptiodouble n = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "PCArray::resize");
    PCException::PCException(exception, &v17);
    *(void *)exceptiodouble n = &unk_1F1199218;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    int v6 = *(_DWORD *)(a1 + 12);
    if (v6 <= a2)
    {
      if (v6 < a2) {
        bzero((void *)(*(void *)(a1 + 16) + 8 * v6), 8 * (~v6 + a2) + 8);
      }
    }
    else
    {
      uint64_t v7 = a2;
      do
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8 * v7);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
          int v6 = *(_DWORD *)(a1 + 12);
        }
        ++v7;
      }
      while (v7 < v6);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    int v9 = *(_DWORD *)(a1 + 12);
    if (a2 >= v9) {
      LODWORD(v1pthread_cond_init((pthread_cond_t *)this, 0) = *(_DWORD *)(a1 + 12);
    }
    else {
      LODWORD(v1pthread_cond_init((pthread_cond_t *)this, 0) = a2;
    }
    if ((int)v10 < 1)
    {
      LODWORD(v1pthread_cond_init((pthread_cond_t *)this, 0) = 0;
    }
    else
    {
      double v11 = 0;
      do
      {
        uint64_t v12 = *(void *)((char *)v11 + *(void *)(a1 + 16));
        *double v11 = v12;
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
          uint64_t v13 = *(void *)((char *)v11 + *(void *)(a1 + 16));
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
          }
        }
        ++v11;
      }
      while ((void *)(8 * v10) != v11);
      int v9 = *(_DWORD *)(a1 + 12);
    }
    if ((int)v10 < v9)
    {
      uint64_t v10 = v10;
      do
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 8 * v10);
        if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
          int v9 = *(_DWORD *)(a1 + 12);
        }
        ++v10;
      }
      while (v9 > (int)v10);
    }
    if ((int)v10 < a2) {
      bzero((void *)(8 * v10), 8 * (~v10 + a2) + 8);
    }
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15) {
      MEMORY[0x1BA9BFB70](v15, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B74F48F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void HBlackHole::HBlackHole(HBlackHole *this)
{
}

void sub_1B74F53B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74F6084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74F7198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  _Unwind_Resume(a1);
}

void sub_1B74F7DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  HGTransform::~HGTransform((HGTransform *)va);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  _Unwind_Resume(a1);
}

void sub_1B74F8584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74F8D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B74F97B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_1B74F9DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 24))(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74FB218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74FB4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<RGBA8Pixel>::push_back[abi:ne180100](void **a1, _DWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v8 = v14 + 4;
    PCString v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        int v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1B74FBD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74FC010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74FC49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B74FC670(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B74FCCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B74FD730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  if (a35) {
    (*(void (**)(uint64_t))(*(void *)a35 + 24))(a35);
  }
  _Unwind_Resume(a1);
}

void sub_1B74FE6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  if (a36) {
    (*(void (**)(uint64_t))(*(void *)a36 + 24))(a36);
  }
  _Unwind_Resume(a1);
}

void sub_1B74FF0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74FFC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1B74FFCCC()
{
  if (*v0) {
    (*(void (**)(void))(*(void *)*v0 + 24))(*v0);
  }
  JUMPOUT(0x1B74FFCC4);
}

void HRingLens::HRingLens(HRingLens *this)
{
}

void sub_1B7500530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B7500BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(a1);
}

void HSphere::HSphere(HSphere *this)
{
}

void sub_1B75015E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7501E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B7502114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  _Unwind_Resume(a1);
}

void sub_1B75028E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  if (a35) {
    (*(void (**)(uint64_t))(*(void *)a35 + 24))(a35);
  }
  _Unwind_Resume(a1);
}

void sub_1B75032C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  HGTransform::~HGTransform((HGTransform *)&a12);
  (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
  (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
  (*(void (**)(uint64_t))(*(void *)v31 + 24))(v31);
  HGTransform::~HGTransform((HGTransform *)&a30);
  (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  uint64_t v37 = *(void *)(v35 - 216);
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  _Unwind_Resume(a1);
}

void sub_1B750366C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B750415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::UploadCurveAndSetParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v9 = 0.0;
  PAEUpload1DCurve<double,1024u>(a1 + 32, a2, a3, 0, 0, 0.0, 1.0);
  if ((a4 & 0x80000000) == 0)
  {
    float v10 = *(double *)(a1 + 40);
    float v11 = *(double *)(a1 + 48);
    float v12 = *(double *)(a1 + 56);
    (*(void (**)(uint64_t, uint64_t, float, float, float, double))(*(void *)a2 + 96))(a2, a4, v10, v11, v12, 0.0);
  }
  uint64_t v13 = *(double **)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  double v15 = v13[1];
  double v16 = v13[2];
  double v17 = v13[4] - v15;
  if (v17 != 0.0) {
    float v9 = (v13[5] - v16) / v17;
  }
  float v18 = v15;
  float v19 = v16;
  float v20 = 0.0;
  (*(void (**)(uint64_t, uint64_t, float, float, float, double))(*(void *)a2 + 96))(a2, a5, v18, v19, v9, 0.0);
  v22.n128_u64[0] = *(void *)(v14 - 16);
  v23.n128_u64[0] = *(void *)(v14 - 8);
  v24.n128_f64[0] = v22.n128_f64[0] - *(double *)(v14 - 40);
  if (v24.n128_f64[0] != 0.0)
  {
    v24.n128_f64[0] = (v23.n128_f64[0] - *(double *)(v14 - 32)) / v24.n128_f64[0];
    float v20 = v24.n128_f64[0];
  }
  v22.n128_f32[0] = v22.n128_f64[0];
  v23.n128_f32[0] = v23.n128_f64[0];
  uint64_t v25 = *(uint64_t (**)(uint64_t, void, __n128, __n128, __n128, __n128))(*(void *)a2 + 96);
  v21.n128_u64[0] = 0;
  v24.n128_f32[0] = v20;

  return v25(a2, (a5 + 1), v22, v23, v24, v21);
}

void anonymous namespace'::HgColorCurves::~HgColorCurves(HGNode *this)
{
  HgcColorCurves::~HgcColorCurves(this);

  HGObject::operator delete(v1);
}

uint64_t anonymous namespace'::HgColorCurves::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t anonymous namespace'::HgColorCurves::GetROI(_anonymous_namespace_::HgColorCurves *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (!a3) {
    return *(void *)&a4.var0;
  }
  if (a3 > 4) {
    return 0;
  }
  return HGRectMake4i(0, 0, 0x400u, 1u);
}

uint64_t ___ZN12_GLOBAL__N_113PAEUseACEScctEv_block_invoke()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"PAEUseACEScct");
  return result;
}

uint64_t PAEUpload1DCurve<double,1024u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7)
{
  uint64_t v14 = HGRectMake4i(0, 0, 0x400u, 1u);
  uint64_t v16 = v15;
  double v17 = HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v17, v14, v16, 3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, float, float))(*(void *)a1 + 24))(a1, v17[10], 1024, a4, a5, a6, a7);
  PAEUploadBitmap((uint64_t)v17, a2, a3);
  float v18 = *(uint64_t (**)(void *))(*v17 + 24);

  return v18(v17);
}

void sub_1B7504A2C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B75053BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1B75055D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40AABB09D5);
  _Unwind_Resume(a1);
}

void sub_1B7505700(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40AABB09D5);
  _Unwind_Resume(a1);
}

uint64_t PAEKeyerOMKeyer2D::PAEKeyerOMKeyer2D(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_1F1114D48;
  *(void *)(a1 + 56) = 0;
  int v5 = 0;
  std::vector<float>::vector((void *)(a1 + 72), 0x100uLL, &v5);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 232) = a2;
  *(void *)a1 = &unk_1F10910C8;
  *(void *)(a1 + 24pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_DWORD *)(a1 + 264) = 0;
  OMUtilErf::setSigma((OMUtilErf **)(a1 + 96), 1.0, 0.0, 256);
  (*(void (**)(uint64_t, float, double))(*(void *)a1 + 152))(a1, 1.0, 0.0);
  return a1;
}

void sub_1B750590C(_Unwind_Exception *a1)
{
  OMKeyer2D::~OMKeyer2D(v1);
  _Unwind_Resume(a1);
}

void PAEKeyerOMKeyer2D::~PAEKeyerOMKeyer2D(id *this)
{
  PAEKeyerOMKeyer2D::~PAEKeyerOMKeyer2D(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *this = &unk_1F10910C8;

  OMKeyer2D::~OMKeyer2D((OMKeyer2D *)this);
}

uint64_t PAEKeyerOMKeyer2D::getKeyer2DSatSpline(id *this)
{
  return [this[31] getKeyer2DSatSpline];
}

uint64_t PAEKeyerOMKeyer2D::lumA(id *this)
{
  return [this[30] lumA];
}

uint64_t PAEKeyerOMKeyer2D::lumB(id *this)
{
  return [this[30] lumB];
}

uint64_t PAEKeyerOMKeyer2D::lumC(id *this)
{
  return [this[30] lumC];
}

uint64_t PAEKeyerOMKeyer2D::lumD(id *this)
{
  return [this[30] lumD];
}

uint64_t PAEKeyerOMKeyer2D::setLumA(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumA:");
}

uint64_t PAEKeyerOMKeyer2D::setLumB(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumB:");
}

uint64_t PAEKeyerOMKeyer2D::setLumC(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumC:");
}

uint64_t PAEKeyerOMKeyer2D::setLumD(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumD:");
}

uint64_t covariant return thunk to'PAEKeyerOMKeyer2D::getKeyer2DTolPie(id *this)
{
  return [this[31] getKeyer2DTolPie] + 8;
}

uint64_t PAEKeyerOMKeyer2D::getKeyer2DTolPie(id *this)
{
  return [this[31] getKeyer2DTolPie];
}

uint64_t covariant return thunk to'PAEKeyerOMKeyer2D::getKeyer2DSoftPie(id *this)
{
  return [this[31] getKeyer2DSoftPie] + 8;
}

uint64_t PAEKeyerOMKeyer2D::getKeyer2DSoftPie(id *this)
{
  return [this[31] getKeyer2DSoftPie];
}

float PAEKeyerOMKeyer2D::getSoftSigmaLuma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 64);
}

void PAEKeyerOMKeyer2D::setSoftSigmaLuma(PAEKeyerOMKeyer2D *this, float a2, float a3)
{
  *((float *)this + 64) = a2;
  *((float *)this + 66) = a3;
  OMUtilErf::setSigma((OMUtilErf **)this + 12, a2, a3, 256);
}

float PAEKeyerOMKeyer2D::getSoftSigmaChroma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 65);
}

void PAEKeyerOMKeyer2D::setSoftSigmaChroma(PAEKeyerOMKeyer2D *this, float a2, float a3)
{
  *((float *)this + 65) = a2;
  *((float *)this + 67) = a3;
  OMUtilErf::setSigma((OMUtilErf **)this + 15, a2, a3, 256);
}

float PAEKeyerOMKeyer2D::getSoftErodeLuma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 66);
}

float PAEKeyerOMKeyer2D::getSoftErodeChroma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 67);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B7505AA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B75063AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1B75064D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  JUMPOUT(0x1B75064CCLL);
}

void sub_1B7507240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B7507AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7508738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B750BE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 24))(a13);
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  _Unwind_Resume(a1);
}

void sub_1B750CE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1B750DCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 24))(a20);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 24))(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B750E148(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B750E244(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HRingLens::GetDOD(HRingLens *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  double v22 = 1.0;
  uint64_t v19 = 0x3FF0000000000000;
  double v16 = 1.0;
  double v13 = 1.0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v13, (double *)this + 53, 0.0);
  float v7 = *((float *)this + 104);
  double v8 = (float)-v7;
  uint64_t v4 = HGRectMake4i(vcvtmd_s64_f64((*(double *)&v15 + v13 * v8 + *(double *)&v14 * v8)/ (v22 + *((double *)&v20 + 1) * v8 + *(double *)&v21 * v8)), vcvtmd_s64_f64((*((double *)&v17 + 1) + *((double *)&v15 + 1) * v8 + v16 * v8)/ (v22 + *((double *)&v20 + 1) * v8 + *(double *)&v21 * v8)), vcvtpd_s64_f64((*(double *)&v15 + v13 * v7 + *(double *)&v14 * v7)/ (v22 + *((double *)&v20 + 1) * v7 + *(double *)&v21 * v7)), vcvtpd_s64_f64((*((double *)&v17 + 1) + *((double *)&v15 + 1) * v7 + v16 * v7)/ (v22 + *((double *)&v20 + 1) * v7 + *(double *)&v21 * v7)));
  uint64_t v10 = v9;
  if ((*(int (**)(HRingLens *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v11 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v10, v11);
  }
  return v4;
}

unint64_t HRingLens::GetROI(HRingLens *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var2 = a4.var2;
  int var0 = a4.var0;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t var1 = a4.var1;
  int var3 = a4.var3;
  if (a3 == 1)
  {
    (*(void (**)(HRingLens *, void, float32x2_t *))(*(void *)this + 104))(this, 0, &v71);
    float32x2_t v9 = v71;
    float32x2_t v10 = v72;
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 1, &v71);
    float32x2_t v11 = v71;
    float v12 = v72.f32[0];
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 3, &v71);
    float32x2_t v13 = v71;
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 4, &v71);
    float v66 = v71.f32[1];
    float v68 = v72.f32[0];
    float v69 = v71.f32[0];
    float v70 = v72.f32[1];
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 5, &v71);
    float v14 = (float)(int)var1;
    float v15 = (float)var0;
    float v16 = (float)var2;
    float32x2_t v17 = vneg_f32(v13);
    float v67 = (float)var3;
    if ((float)var0 <= (float)var2)
    {
      float v20 = v66;
      float v22 = v69;
      float v23 = (float)(v66 * v14) + v70;
      float v24 = v23 * v23;
      double v25 = v23;
      float v26 = (float)(v66 * (float)var3) + v70;
      float v27 = v26 * v26;
      float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      double v28 = v26;
      float32x2_t v19 = (float32x2_t)0x80000000800000;
      float v21 = v68;
      do
      {
        float v29 = v68 + (float)(v69 * v15);
        float v30 = v29 * v29;
        double v31 = (float)(v24 + (float)(v29 * v29));
        *(double *)&uint64_t v32 = sqrt(v31 + 0.000001);
        v33.f64[0] = v29;
        *(float *)&double v31 = v31 / *(double *)&v32;
        *(float *)&double v31 = fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v31), 1.0), 0.0);
        v34.f64[0] = v33.f64[0];
        v34.f64[1] = v25;
        float32x2_t v35 = vcvt_f32_f64(vdivq_f64(v34, (float64x2_t)vdupq_lane_s64(v32, 0)));
        double v36 = (float)(v27 + v30);
        v34.f64[0] = sqrt(v36 + 0.000001);
        v33.f64[1] = v28;
        *(float *)&double v36 = v36 / v34.f64[0];
        *(float *)&double v36 = v10.f32[1]
                       + (float)(v10.f32[0] * fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v36), 1.0), 0.0));
        float32x2_t v37 = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(v35, v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v31))* (float)(1.0/ (float)((float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v31))+ 1.0)* (float)(1.0- (float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v31))))))), 1.0), 0.0))));
        float32x2_t v38 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v37, v17), (int8x8_t)v37, (int8x8_t)v17);
        float32x2_t v39 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v38), (int8x8_t)v38, (int8x8_t)v13);
        *(float32x2_t *)&v33.f64[0] = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(vcvt_f32_f64(vdivq_f64(v33, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34.f64[0], 0))), v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)(*(float *)&v36* (float)(1.0/ (float)((float)(*(float *)&v36 + 1.0)* (float)(1.0 - *(float *)&v36))))), 1.0), 0.0))));
        float32x2_t v40 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v39), (int8x8_t)v19, (int8x8_t)v39);
        *(int8x8_t *)&v33.f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v33.f64[0], v17), *(int8x8_t *)&v33.f64[0], (int8x8_t)v17);
        *(int8x8_t *)&v33.f64[0] = vbsl_s8((int8x8_t)vcgt_f32(v13, *(float32x2_t *)&v33.f64[0]), *(int8x8_t *)&v33.f64[0], (int8x8_t)v13);
        float32x2_t v41 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v39, v18), (int8x8_t)v18, (int8x8_t)v39);
        float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v33.f64[0], v41), (int8x8_t)v41, *(int8x8_t *)&v33.f64[0]);
        float v15 = v15 + 1.0;
        float32x2_t v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v40, *(float32x2_t *)&v33.f64[0]), (int8x8_t)v40, *(int8x8_t *)&v33.f64[0]);
      }
      while (v15 <= v16);
    }
    else
    {
      float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      float32x2_t v19 = (float32x2_t)0x80000000800000;
      float v20 = v66;
      float v21 = v68;
      float v22 = v69;
    }
    if (v14 <= v67)
    {
      float v43 = v22;
      float v44 = (float)(v22 * (float)var0) + v21;
      float v45 = v44 * v44;
      double v46 = v44;
      float v47 = (float)(v43 * v16) + v21;
      float v48 = v47 * v47;
      double v49 = v47;
      do
      {
        float v50 = v70 + (float)(v20 * v14);
        double v51 = (float)(v45 + (float)(v50 * v50));
        *(double *)&uint64_t v52 = sqrt(v51 + 0.000001);
        v53.f64[0] = v46;
        v53.f64[1] = v50;
        *(float32x2_t *)&v53.f64[0] = vcvt_f32_f64(vdivq_f64(v53, (float64x2_t)vdupq_lane_s64(v52, 0)));
        *(float *)&double v51 = v51 / *(double *)&v52;
        *(float *)&double v51 = fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v51), 1.0), 0.0);
        double v54 = (float)(v48 + (float)(v50 * v50));
        *(double *)&uint64_t v55 = sqrt(v54 + 0.000001);
        v56.f64[0] = v49;
        v56.f64[1] = v50;
        *(float *)&double v54 = v54 / *(double *)&v55;
        *(float *)&double v54 = v10.f32[1]
                       + (float)(v10.f32[0] * fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v54), 1.0), 0.0));
        float32x2_t v57 = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(*(float32x2_t *)&v53.f64[0], v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v51))* (float)(1.0/ (float)((float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v51))+ 1.0)* (float)(1.0- (float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v51))))))), 1.0), 0.0))));
        float32x2_t v58 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v57, v17), (int8x8_t)v57, (int8x8_t)v17);
        float32x2_t v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v58), (int8x8_t)v58, (int8x8_t)v13);
        float32x2_t v60 = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(vcvt_f32_f64(vdivq_f64(v56, (float64x2_t)vdupq_lane_s64(v55, 0))), v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)(*(float *)&v54* (float)(1.0/ (float)((float)(*(float *)&v54 + 1.0) * (float)(1.0 - *(float *)&v54))))), 1.0), 0.0))));
        float32x2_t v61 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v59), (int8x8_t)v19, (int8x8_t)v59);
        float32x2_t v62 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v60, v17), (int8x8_t)v60, (int8x8_t)v17);
        float32x2_t v63 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v62), (int8x8_t)v62, (int8x8_t)v13);
        float32x2_t v64 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v59, v18), (int8x8_t)v18, (int8x8_t)v59);
        float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v63, v64), (int8x8_t)v64, (int8x8_t)v63);
        float v14 = v14 + 1.0;
        float32x2_t v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v61, v63), (int8x8_t)v61, (int8x8_t)v63);
      }
      while (v14 <= v67);
      float v42 = v18.f32[1];
    }
    else
    {
      float v42 = v18.f32[1];
    }
    int var0 = (int)v18.f32[0] - 2;
    uint64_t var1 = ((int)v42 - 2);
  }
  return var0 | (unint64_t)(var1 << 32);
}

uint64_t HRingLens::SetRadius(HRingLens *this, float a2, float a3)
{
  *((float *)this + 104) = a2;
  *((float *)this + 105) = a3;
  return (*(uint64_t (**)(HRingLens *, uint64_t))(*(void *)this + 96))(this, 2);
}

uint64_t HRingLens::SetOutputToImage(double *a1, double *a2)
{
  int v2 = a1 + 53;
  if (a1 + 53 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  float v6 = *a2;
  float v7 = a2[5];
  float v8 = a2[3];
  float v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 4, v6, v7, v8, v9);
}

uint64_t HRingLens::SetImageToInput(double *a1, double *a2)
{
  int v2 = a1 + 69;
  if (a1 + 69 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  float v6 = *a2;
  float v7 = a2[5];
  float v8 = a2[3];
  float v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 5, v6, v7, v8, v9);
}

void HRingLens::~HRingLens(HGNode *this)
{
  HgcRingLens::~HgcRingLens(this);

  HGObject::operator delete(v1);
}

uint64_t HRectToPolar::GetDOD(HRectToPolar *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
  }
}

unint64_t HRectToPolar::GetROI(HRectToPolar *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var3 = a4.var3;
    int var1 = a4.var1;
    (*(void (**)(HRectToPolar *, void, float *))(*(void *)this + 104))(this, 0, &v82);
    float v78 = v82;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v82);
    float v11 = v82;
    float v70 = v83;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v82);
    float v12 = v82;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(void *)this + 104))(this, 4, &v82);
    float v13 = v82;
    float v68 = v83;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(void *)this + 104))(this, 5, &v82);
    float v74 = v83;
    float v75 = v82;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(void *)this + 104))(this, 6, &v82);
    float v14 = v82;
    float v76 = v83;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v82);
    float v15 = v82;
    float v16 = (float)var1;
    float v17 = (float)var3;
    float v77 = v12;
    float v73 = v82;
    float v65 = (float)var3;
    float v71 = v11;
    float v69 = v13;
    float v60 = (float)var1;
    if ((float)var1 <= (float)var3)
    {
      float v63 = (float)((float)(v13 * (float)var0) + v14) - v11;
      float v66 = (float)var2;
      float v61 = (float)((float)(v13 * (float)var2) + v14) - v11;
      float v20 = -3.4028e38;
      float v21 = 3.4028e38;
      float v19 = 3.4028e38;
      float v79 = -3.4028e38;
      do
      {
        BOOL v22 = v15 != -1.0;
        float v23 = (float)(v76 + (float)(v68 * v16)) - v70;
        float v24 = atan2f(v63, v23);
        if (v24 < 0.0)
        {
          float v25 = v24 + 6.28318531;
          float v24 = v25;
        }
        float v26 = v78 * v24;
        if (v22 && (float)(v26 - v14) < 0.0) {
          float v26 = v77;
        }
        float v27 = v75 * (float)(v26 - v14);
        float v28 = v74 * (float)(sqrtf((float)(v63 * v63) + (float)(v23 * v23)) - v76);
        if (v19 >= v27) {
          float v19 = v27;
        }
        if (v21 >= v28) {
          float v21 = v28;
        }
        if (v79 > v27) {
          float v27 = v79;
        }
        float v80 = v27;
        if (v20 <= v28) {
          float v20 = v28;
        }
        float v29 = atan2f(v61, (float)(v76 + (float)(v68 * v16)) - v70);
        float v17 = (float)var3;
        float v15 = v73;
        if (v29 < 0.0)
        {
          float v30 = v29 + 6.28318531;
          float v29 = v30;
        }
        float v31 = v78 * v29;
        if (v22 && (float)(v31 - v14) < 0.0) {
          float v31 = v77;
        }
        float v32 = v75 * (float)(v31 - v14);
        float v33 = v74 * (float)(sqrtf((float)(v61 * v61) + (float)(v23 * v23)) - v76);
        if (v19 >= v32) {
          float v19 = v32;
        }
        if (v21 >= v33) {
          float v21 = v33;
        }
        if (v80 > v32) {
          float v32 = v80;
        }
        float v79 = v32;
        if (v20 <= v33) {
          float v20 = v33;
        }
        float v16 = v16 + 1.0;
      }
      while (v16 <= v65);
      float v18 = v66;
    }
    else
    {
      float v18 = (float)var2;
      float v19 = 3.4028e38;
      float v20 = -3.4028e38;
      float v79 = -3.4028e38;
      float v21 = 3.4028e38;
    }
    float v34 = (float)(var0 + 1);
    if (v18 > v34)
    {
      float v64 = (float)((float)(v68 * v60) + v76) - v70;
      float v62 = (float)((float)(v68 * v17) + v76) - v70;
      float v67 = v18;
      do
      {
        BOOL v35 = v15 != -1.0;
        float v36 = (float)(v14 + (float)(v69 * v34)) - v11;
        float v37 = atan2f(v36, v64);
        if (v37 < 0.0)
        {
          float v38 = v37 + 6.28318531;
          float v37 = v38;
        }
        float v39 = v78 * v37;
        if (v35 && (float)(v39 - v14) < 0.0) {
          float v39 = v77;
        }
        float v40 = v75 * (float)(v39 - v14);
        float v41 = v74 * (float)(sqrtf((float)(v64 * v64) + (float)(v36 * v36)) - v76);
        if (v19 >= v40) {
          float v19 = v40;
        }
        if (v21 >= v41) {
          float v21 = v41;
        }
        if (v79 > v40) {
          float v40 = v79;
        }
        float v81 = v40;
        if (v20 <= v41) {
          float v42 = v41;
        }
        else {
          float v42 = v20;
        }
        float v72 = v42;
        float v43 = atan2f((float)(v14 + (float)(v69 * v34)) - v11, v62);
        float v18 = v67;
        float v15 = v73;
        if (v43 < 0.0)
        {
          float v44 = v43 + 6.28318531;
          float v43 = v44;
        }
        float v45 = v78 * v43;
        if (v35 && (float)(v45 - v14) < 0.0) {
          float v45 = v77;
        }
        float v46 = v75 * (float)(v45 - v14);
        float v47 = v74 * (float)(sqrtf((float)(v62 * v62) + (float)(v36 * v36)) - v76);
        if (v19 >= v46) {
          float v19 = v46;
        }
        if (v21 >= v47) {
          float v21 = v47;
        }
        if (v81 > v46) {
          float v46 = v81;
        }
        float v79 = v46;
        if (v72 <= v47) {
          float v20 = v47;
        }
        else {
          float v20 = v72;
        }
        float v34 = v34 + 1.0;
      }
      while (v34 < v67);
    }
    float v48 = (float)(v11 - v14) / v69;
    if (v48 >= (float)var0 && v48 <= v18)
    {
      float v49 = (float)(v70 - v76) / v68;
      if (v49 >= v60 && v49 <= v65)
      {
        float v50 = (float)(v14 + (float)(v69 * v48)) - v11;
        float v51 = (float)(v76 + (float)(v68 * v49)) - v70;
        float v52 = v15;
        float v53 = atan2f((float)(v14 + (float)(v69 * v48)) - v71, v51);
        if (v53 < 0.0)
        {
          float v54 = v53 + 6.28318531;
          float v53 = v54;
        }
        float v55 = v78 * v53;
        if ((float)(v55 - v14) < 0.0 && v52 != -1.0) {
          float v55 = v77;
        }
        float v57 = v75 * (float)(v55 - v14);
        float v58 = v74 * (float)(sqrtf((float)(v50 * v50) + (float)(v51 * v51)) - v76);
        if (v19 >= v57) {
          float v19 = v57;
        }
        if (v21 >= v58) {
          float v21 = v58;
        }
      }
    }
    unsigned int v4 = (int)(float)((float)(v19 + -2.0) + -18.0);
    uint64_t v5 = (int)(float)(v21 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void HRectToPolar::~HRectToPolar(HGNode *this)
{
  HgcRectToPolar::~HgcRectToPolar(this);

  HGObject::operator delete(v1);
}

uint64_t HScrape::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = &HGRectInfinite;
  if (a3) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

float32x2_t HScrape::_TransformPoint@<D0>(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  float32x2_t v7 = vdiv_f32(vsub_f32(*a1, *a3), *a2);
  float v8 = vaddv_f32(vmul_f32(v7, *a4));
  float v9 = 0.0;
  if (v8 >= 0.0)
  {
    float v10 = -v8;
    if ((float)(v8 - a6) >= 0.0)
    {
      float v9 = a6 * 0.5 + v10;
    }
    else
    {
      float v11 = v8 * 0.5 * a7;
      float v9 = v10 * v11;
    }
  }
  float32x2_t result = vadd_f32(*a3, vmul_f32(*a2, vadd_f32(v7, vmul_n_f32(*a4, v9))));
  *a5 = result;
  return result;
}

unint64_t HScrape::GetROI(HScrape *this, HGRenderer *a2, int a3, HGRect a4)
{
  _OWORD v26[2] = *(float32x2_t *)MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var3 = a4.var3;
    int var1 = a4.var1;
    (*(void (**)(HScrape *, void, float32x2_t *))(*(void *)this + 104))(this, 0, v26);
    float32x2_t v25 = v26[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 1, v26);
    float32x2_t v24 = v26[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 2, v26);
    float v11 = v26[0].f32[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 3, v26);
    float v12 = v26[0].f32[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(void *)this + 104))(this, 4, v26);
    float32x2_t v23 = v26[0];
    v26[0].f32[0] = (float)var0;
    v26[0].f32[1] = (float)var1;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v22.f32[0] <= 3.4028e38) {
      float v13 = v22.f32[0];
    }
    else {
      float v13 = 3.4028e38;
    }
    if (v22.f32[1] <= 3.4028e38) {
      float v14 = v22.f32[1];
    }
    else {
      float v14 = 3.4028e38;
    }
    v26[0].f32[0] = (float)var0;
    v26[0].f32[1] = (float)var3;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v13 >= v22.f32[0]) {
      float v15 = v22.f32[0];
    }
    else {
      float v15 = v13;
    }
    if (v14 >= v22.f32[1]) {
      float v16 = v22.f32[1];
    }
    else {
      float v16 = v14;
    }
    v26[0].f32[0] = (float)var2;
    v26[0].f32[1] = (float)var3;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v15 >= v22.f32[0]) {
      float v17 = v22.f32[0];
    }
    else {
      float v17 = v15;
    }
    if (v16 >= v22.f32[1]) {
      float v18 = v22.f32[1];
    }
    else {
      float v18 = v16;
    }
    v26[0].f32[0] = (float)var2;
    v26[0].f32[1] = (float)var1;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v17 >= v22.f32[0]) {
      float v19 = v22.f32[0];
    }
    else {
      float v19 = v17;
    }
    if (v18 >= v22.f32[1]) {
      float v20 = v22.f32[1];
    }
    else {
      float v20 = v18;
    }
    unsigned int v4 = (int)(float)(v19 + -2.0);
    uint64_t v5 = (int)(float)(v20 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void HScrape::~HScrape(HGNode *this)
{
  HgcScrape::~HgcScrape(this);

  HGObject::operator delete(v1);
}

uint64_t HSphere::GetDOD(HSphere *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0x8000000080000000;
  }
  double v17 = 1.0;
  uint64_t v14 = 0x3FF0000000000000;
  double v11 = 1.0;
  double v8 = 1.0;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v8, (double *)this + 53, 0.0);
  float v6 = *((float *)this + 104);
  double v7 = (float)-v6;
  return HGRectMake4i((int)(floor((*(double *)&v10 + v8 * v7 + *(double *)&v9 * v7)/ (v17 + *((double *)&v15 + 1) * v7 + *(double *)&v16 * v7))+ -1.0), (int)(floor((*((double *)&v12 + 1) + *((double *)&v10 + 1) * v7 + v11 * v7)/ (v17 + *((double *)&v15 + 1) * v7 + *(double *)&v16 * v7))+ -1.0), (int)(ceil((*(double *)&v10 + v8 * v6 + *(double *)&v9 * v6)/ (v17 + *((double *)&v15 + 1) * v6 + *(double *)&v16 * v6))+ 1.0), (int)(ceil((*((double *)&v12 + 1) + *((double *)&v10 + 1) * v6 + v11 * v6)/ (v17 + *((double *)&v15 + 1) * v6 + *(double *)&v16 * v6))+ 1.0));
}

unint64_t HSphere::GetROI(HSphere *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var1 = a4.var1;
    int var3 = a4.var3;
    if (a4.var2 - a4.var0 < 1)
    {
      double v14 = -1.79769313e308;
      double v15 = 1.79769313e308;
      double v11 = 1.79769313e308;
      double v12 = -1.79769313e308;
    }
    else
    {
      double v11 = 1.79769313e308;
      double v12 = -1.79769313e308;
      int v13 = a4.var0;
      double v14 = -1.79769313e308;
      double v15 = 1.79769313e308;
      do
      {
        v25.double x = (double)v13;
        v25.double y = (double)var1;
        double v16 = HSphere::ConvertPoint(this, v25);
        if (v16 < v15) {
          double v15 = v16;
        }
        if (v14 < v16) {
          double v14 = v16;
        }
        if (v17 < v11) {
          double v11 = v17;
        }
        if (v12 < v17) {
          double v12 = v17;
        }
        v26.double x = (double)v13;
        v26.double y = (double)var3;
        double v18 = HSphere::ConvertPoint(this, v26);
        if (v18 < v15) {
          double v15 = v18;
        }
        if (v14 < v18) {
          double v14 = v18;
        }
        if (v19 < v11) {
          double v11 = v19;
        }
        if (v12 < v19) {
          double v12 = v19;
        }
        ++v13;
      }
      while (var2 != v13);
    }
    if (~var1 + var3 > 1)
    {
      do
      {
        ++var1;
        v27.double x = (double)var0;
        v27.double y = (double)var1;
        double v20 = HSphere::ConvertPoint(this, v27);
        if (v20 < v15) {
          double v15 = v20;
        }
        if (v14 < v20) {
          double v14 = v20;
        }
        if (v21 < v11) {
          double v11 = v21;
        }
        if (v12 < v21) {
          double v12 = v21;
        }
        v28.double x = (double)var2;
        v28.double y = (double)var1;
        double v22 = HSphere::ConvertPoint(this, v28);
        if (v22 < v15) {
          double v15 = v22;
        }
        if (v14 < v22) {
          double v14 = v22;
        }
        if (v23 < v11) {
          double v11 = v23;
        }
        if (v12 < v23) {
          double v12 = v23;
        }
      }
      while (var3 - 2 != var1);
    }
    unsigned int v4 = (int)(v15 + -1.0);
    uint64_t v5 = (int)(v11 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

double HSphere::ConvertPoint(HSphere *this, CGPoint a2)
{
  double v2 = a2.x * *((double *)this + 53) + *((double *)this + 56);
  CGFloat v3 = a2.y * *((double *)this + 58) + *((double *)this + 60);
  double v4 = sqrt(v2 * v2 + v3 * v3);
  double v5 = *((float *)this + 104);
  double v6 = 1.0 - v4 / v5;
  double v7 = 1.0 - sqrt(v6);
  if (v6 <= 0.0) {
    double v8 = 1.0;
  }
  else {
    double v8 = v7;
  }
  return *((double *)this + 72) + *((double *)this + 69) * (v2 / v4 * (v8 * v5));
}

uint64_t HSphere::SetRadius(HSphere *this, float a2)
{
  *((float *)this + 104) = a2;
  return (*(uint64_t (**)(HSphere *, void, float, float, double, double))(*(void *)this + 96))(this, 0, 1.0 / a2, a2, 0.0, 0.0);
}

uint64_t HSphere::SetOutputToImage(double *a1, double *a2)
{
  double v2 = a1 + 53;
  if (a1 + 53 != a2)
  {
    uint64_t v3 = 0;
    double v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  float v6 = *a2;
  float v7 = a2[5];
  float v8 = a2[3];
  float v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 1, v6, v7, v8, v9);
}

uint64_t HSphere::SetImageToInput(double *a1, double *a2)
{
  double v2 = a1 + 69;
  if (a1 + 69 != a2)
  {
    uint64_t v3 = 0;
    double v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  float v6 = *a2;
  float v7 = a2[5];
  float v8 = a2[3];
  float v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 2, v6, v7, v8, v9);
}

void HSphere::~HSphere(HGNode *this)
{
  HgcSphere::~HgcSphere(this);

  HGObject::operator delete(v1);
}

uint64_t HStarburst::GetDOD(HStarburst *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 > 1) {
    return 0;
  }
  else {
    return HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
  }
}

unint64_t HStarburst::GetROI(HStarburst *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a3 > 1)
  {
    unsigned int v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    (*(void (**)(HStarburst *, void, float *, void, void))(*(void *)this + 104))(this, 0, &v11, *(void *)&a4.var0, *(void *)&a4.var2);
    float v5 = v11;
    float v6 = v12;
    (*(void (**)(HStarburst *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v11);
    float v7 = v11;
    (*(void (**)(HStarburst *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v11);
    unsigned int v8 = vcvtms_s32_f32((float)(v5 - (float)((float)(1.0 / v7) / v11)) + -1.0);
    LODWORD(v9) = vcvtms_s32_f32((float)(v6 - (float)((float)(1.0 / v7) / v12)) + -1.0);
  }
  return v8 | (unint64_t)(v9 << 32);
}

uint64_t HStarburst::GetOutput(HStarburst *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2)) {
    (*(void (**)(HStarburst *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
  }

  return HgcStarburst::GetOutput(this, a2);
}

void HStarburst::~HStarburst(HGNode *this)
{
  HgcStarburst::~HgcStarburst(this);

  HGObject::operator delete(v1);
}

void sub_1B7510DF8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 160);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  uint64_t v5 = *(void *)(v2 - 144);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t HTarget::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = (long long *)(a1 + 424);
  if (a3) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

unint64_t HTarget::GetROI(HTarget *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var2 = a4.var2;
    int var0 = a4.var0;
    int var3 = a4.var3;
    int var1 = a4.var1;
    (*(void (**)(HTarget *, void, float *))(*(void *)this + 104))(this, 0, &v50);
    float v12 = v50;
    float v11 = v51;
    (*(void (**)(HTarget *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v50);
    float v13 = v50;
    float v14 = v51;
    (*(void (**)(HTarget *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v50);
    float v15 = v50;
    float v16 = v51;
    float v17 = v52;
    float v18 = v53;
    (*(void (**)(HTarget *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v50);
    float v19 = (double)var0 + 0.5 - v12;
    float v20 = (double)var1 + 0.5 - v11;
    float v21 = (double)var2 + -0.5 - v12;
    float v22 = (double)var3 + -0.5 - v11;
    float v23 = v15 * v19;
    float v24 = v15 * v21;
    float v25 = v16 * v20;
    float v26 = v16 * v22;
    if (v23 <= v24) {
      float v27 = v23;
    }
    else {
      float v27 = v24;
    }
    if (v23 <= v24) {
      float v28 = v24;
    }
    else {
      float v28 = v23;
    }
    if (v25 <= v26) {
      float v29 = v25;
    }
    else {
      float v29 = v26;
    }
    if (v25 <= v26) {
      float v30 = v26;
    }
    else {
      float v30 = v25;
    }
    float v31 = v27 * v27;
    float v32 = v29 * v29;
    float v33 = (float)(v27 * v27) + (float)(v29 * v29);
    if (v27 > 0.0 || v28 < 0.0 || v29 > 0.0 || (float v34 = 0.0, v30 < 0.0))
    {
      float v34 = 3.4028e38;
      if (v33 < 3.4028e38) {
        float v34 = v33;
      }
    }
    float v35 = fmaxf(v33, 0.0);
    float v36 = v28 * v28;
    if (v34 > (float)(v36 + v32)) {
      float v34 = v36 + v32;
    }
    if (v35 < (float)(v36 + v32)) {
      float v35 = v36 + v32;
    }
    float v37 = v30 * v30;
    if (v34 > (float)(v37 + v31)) {
      float v34 = v37 + v31;
    }
    if (v35 < (float)(v37 + v31)) {
      float v35 = v37 + v31;
    }
    if (v34 > (float)(v36 + v37)) {
      float v34 = v36 + v37;
    }
    if (v35 < (float)(v36 + v37)) {
      float v35 = v36 + v37;
    }
    if (v34 > v32) {
      float v34 = v32;
    }
    if (v35 >= v32) {
      float v32 = v35;
    }
    if (v34 <= v37) {
      float v38 = v34;
    }
    else {
      float v38 = v37;
    }
    if (v32 < v37) {
      float v32 = v37;
    }
    if (v38 <= v31) {
      float v39 = v38;
    }
    else {
      float v39 = v27 * v27;
    }
    if (v32 >= v31) {
      float v31 = v32;
    }
    if (v39 <= v36) {
      float v40 = v39;
    }
    else {
      float v40 = v36;
    }
    if (v31 < v36) {
      float v31 = v36;
    }
    float v41 = sqrtf(v40);
    float v42 = sqrtf(v31);
    float v43 = (float)(v13 * v17) * v41;
    float v44 = (float)(v14 * v18) * v41;
    float v45 = (float)(v13 * v17) * v42;
    float v46 = (float)(v14 * v18) * v42;
    if (v43 <= v45) {
      float v47 = v43;
    }
    else {
      float v47 = v45;
    }
    if (v44 <= v46) {
      float v48 = v44;
    }
    else {
      float v48 = v46;
    }
    unsigned int v4 = vcvtmd_s64_f64((float)((float)(v12 * v50) + v47) + -0.5);
    LODWORD(v5) = vcvtmd_s64_f64((float)((float)(v11 * v51) + v48) + -0.5);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HTarget::GetOutput(HTarget *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2))
  {
    if (!HGRectIsInfinite(*((void *)this + 53), *((void *)this + 54)))
    {
      float v4 = (float)((*((_DWORD *)this + 109) - *((_DWORD *)this + 107))
                 * (*((_DWORD *)this + 108) - *((_DWORD *)this + 106)));
      int v5 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 1);
      if ((float)((float)((float)v5 * 16.0) * (float)v5) <= v4) {
        (*(void (**)(HTarget *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
      }
    }
  }

  return HgcTarget::GetOutput(this, a2);
}

uint64_t HTarget::SetFrameSize(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 416) = a2;
  *(_DWORD *)(this + 42pthread_cond_init((pthread_cond_t *)this, 0) = a3;
  return this;
}

__n128 HTarget::SetCropRect(HTarget *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + 424) = *a2;
  return result;
}

void HTarget::~HTarget(HGNode *this)
{
  HgcTarget::~HgcTarget(this);

  HGObject::operator delete(v1);
}

void HTwirl::HTwirl(HTwirl *this)
{
}

void HTwirl::~HTwirl(HGNode *this)
{
  HgcTwirl::~HgcTwirl(this);

  HGObject::operator delete(v1);
}

uint64_t HTwirl::init(HTwirl *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  *((float *)this + 104) = a2;
  *((float *)this + 105) = a3;
  *((float *)this + 106) = a4;
  *((float *)this + 107) = a5;
  *((float *)this + 108) = a6;
  *((float *)this + 109) = a7;
  (*(void (**)(HTwirl *, void))(*(void *)this + 96))(this, 0);
  (*(void (**)(HTwirl *, uint64_t, float, float, double, double))(*(void *)this + 96))(this, 1, a4, a5, 0.0, 0.0);
  float v14 = *(uint64_t (**)(HTwirl *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)this + 96);
  v15.n128_f32[0] = a6;
  v16.n128_f32[0] = a7;

  v12.n128_f32[0] = 1.0 / a6;
  v13.n128_f32[0] = 1.0 / a7;
  return v14(this, 2, v15, v16, v12, v13);
}

uint64_t HTwirl::GetDOD(HTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  float v5 = *((float *)this + 106);
  return HGRectMake4i((int)(float)(*((float *)this + 104) - (float)(v5 / *((float *)this + 108))), (int)(float)(*((float *)this + 105) - (float)(v5 / *((float *)this + 109))), (int)(float)(*((float *)this + 104) + (float)(v5 / *((float *)this + 108))), (int)(float)(*((float *)this + 105) + (float)(v5 / *((float *)this + 109))));
}

unint64_t HTwirl::GetROI(HTwirl *this, HGRenderer *a2, int a3, HGRect a4, double a5, int32x2_t a6)
{
  if (a3) {
    return 0;
  }
  uint64_t v7 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  float v8 = *((float *)this + 104);
  float v9 = *((float *)this + 105);
  unint64_t v62 = __PAIR64__(LODWORD(v9), LODWORD(v8));
  a6.i32[0] = *((_DWORD *)this + 106);
  float v59 = *((float *)this + 107);
  int32x2_t v60 = a6;
  float v10 = *((float *)this + 108);
  float v11 = *((float *)this + 109);
  HGRect v63 = a4;
  uint64_t v12 = HGRectMake4i((int)(float)((float)(v8 - *(float *)a6.i32) / v10), (int)(float)((float)(v9 - *(float *)a6.i32) / v11), (int)(float)((float)(v8 + *(float *)a6.i32) / v10), (int)(float)((float)(v9 + *(float *)a6.i32) / v11));
  uint64_t v14 = HGRectUnion(v12, v13, v6, v7);
  if (!HGRectIsNull(v14, v15))
  {
    float v16 = (float)((float)((float)(int)v6 - v8) * v10) * (float)((float)((float)(int)v6 - v8) * v10);
    float v17 = (float)((float)((float)SHIDWORD(v6) - v9) * v11) * (float)((float)((float)SHIDWORD(v6) - v9) * v11);
    float v18 = v16 + v17;
    float v19 = (float)((float)((float)SHIDWORD(v7) - v9) * v11) * (float)((float)((float)SHIDWORD(v7) - v9) * v11);
    float v20 = (float)((float)((float)(int)v7 - v8) * v10) * (float)((float)((float)(int)v7 - v8) * v10);
    float v21 = v20 + v17;
    float v22 = v20 + v19;
    if ((float)(v16 + v17) >= (float)(v16 + v19)) {
      float v23 = v16 + v17;
    }
    else {
      float v23 = v16 + v19;
    }
    if (v21 >= v22) {
      float v24 = v20 + v17;
    }
    else {
      float v24 = v20 + v19;
    }
    if (v23 < v24) {
      float v23 = v24;
    }
    if (v22 < v21) {
      float v21 = v20 + v19;
    }
    if ((float)(v16 + v19) < v18) {
      float v18 = v16 + v19;
    }
    if (v21 < v18) {
      float v18 = v21;
    }
    if (v8 > (float)(int)v6)
    {
      float v25 = (float)((float)(v8 - v8) * v10) * (float)((float)(v8 - v8) * v10);
      float v26 = v25 + v17;
      float v27 = v25 + v19;
      if (v27 < v26) {
        float v26 = v27;
      }
      if (v26 >= v18) {
        float v26 = v18;
      }
      if (v8 < (float)(int)v7) {
        float v18 = v26;
      }
    }
    if (v9 > (float)SHIDWORD(v6))
    {
      float v28 = (float)((float)(v9 - v9) * v11) * (float)((float)(v9 - v9) * v11);
      float v29 = v16 + v28;
      float v30 = v20 + v28;
      if (v30 < v29) {
        float v29 = v30;
      }
      if (v29 >= v18) {
        float v29 = v18;
      }
      if (v9 < (float)SHIDWORD(v7)) {
        float v18 = v29;
      }
    }
    float32x2_t v31 = 0;
    if (*(float *)v60.i32 > 0.0)
    {
      float v32 = sqrtf(v23);
      v33.f32[0] = sqrtf(v18);
      v33.f32[1] = v32;
      float32x2_t v34 = vdiv_f32(v33, (float32x2_t)vdup_lane_s32(v60, 0));
      __asm { FMOV            V1.2S, #1.0 }
      float32x2_t v40 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v34, _D1), (int8x8_t)_D1, (int8x8_t)v34);
      float32x2_t v41 = vmul_f32(v40, v40);
      float32x2_t v42 = vmul_f32(v40, v41);
      __asm { FMOV            V3.2S, #-3.0 }
      float32x2_t v31 = vmul_n_f32(vadd_f32(vadd_f32(vmul_f32(v41, _D3), _D1), vadd_f32(v42, v42)), v59);
    }
    float32x2_t v61 = v31;
    uint64_t v46 = v45;
    uint64_t v49 = HGRectUnion(v44, v46, v47, v48);
    uint64_t v51 = v50;
    if (v61.f32[1] >= v61.f32[0]) {
      float v52 = v61.f32[0];
    }
    else {
      float v52 = v61.f32[1];
    }
    if (v61.f32[0] >= v61.f32[1]) {
      float v53 = v61.f32[0];
    }
    else {
      float v53 = v61.f32[1];
    }
    for (float i = v52 + 0.1; i < v53; float i = i + 0.1)
    {
      uint64_t v49 = HGRectUnion(v49, v51, v55, v56);
      uint64_t v51 = v57;
    }
    return (v49 & 0xFFFFFFFF00000000 | (v49 - 3)) - 0x300000000;
  }
  return v6;
}

uint64_t anonymous namespace'::rotateRectROI(int *a1, float *a2, float a3, float a4, float a5)
{
  float v8 = *a2;
  float v7 = a2[1];
  float v9 = (float)((float)*a1 - *a2) * a4;
  float v10 = (float)((float)a1[1] - v7) * a5;
  float v11 = (float)((float)a1[3] - v7) * a5;
  float v12 = (float)((float)a1[2] - *a2) * a4;
  __float2 v13 = __sincosf_stret(a3);
  float v14 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v10);
  float v15 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v9);
  float v16 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v11);
  float v17 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v9);
  float v18 = (float)(v13.__sinval * v10) + (float)(v13.__cosval * v12);
  float v19 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v12);
  float v20 = (float)(v13.__sinval * v11) + (float)(v13.__cosval * v12);
  float v21 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v12);
  if (v20 >= v18) {
    float v22 = (float)(v13.__sinval * v10) + (float)(v13.__cosval * v12);
  }
  else {
    float v22 = (float)(v13.__sinval * v11) + (float)(v13.__cosval * v12);
  }
  if (v16 >= v14) {
    float v23 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v10);
  }
  else {
    float v23 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v11);
  }
  if (v22 >= v23) {
    float v22 = v23;
  }
  if (v14 >= v16) {
    float v16 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v10);
  }
  if (v18 >= v20) {
    float v20 = (float)(v13.__sinval * v10) + (float)(v13.__cosval * v12);
  }
  if (v16 >= v20) {
    float v20 = v16;
  }
  if (v21 >= v19) {
    float v24 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v12);
  }
  else {
    float v24 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v12);
  }
  if (v17 >= v15) {
    float v25 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v9);
  }
  else {
    float v25 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v9);
  }
  if (v24 >= v25) {
    float v24 = v25;
  }
  if (v15 >= v17) {
    float v26 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v9);
  }
  else {
    float v26 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v9);
  }
  if (v19 >= v21) {
    float v21 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v12);
  }
  if (v26 >= v21) {
    float v21 = v26;
  }

  return HGRectMake4i((int)(float)(v8 + (float)(v22 / a4)), (int)(float)(v7 + (float)(v24 / a5)), (int)(float)(v8 + (float)(v20 / a4)), (int)(float)(v7 + (float)(v21 / a5)));
}

void sub_1B7512D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  HGObject::operator delete(v12);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  _Unwind_Resume(a1);
}

void HUnderwaterRefractV2::HUnderwaterRefractV2(HUnderwaterRefractV2 *this)
{
}

void HUnderwaterRefractV2::~HUnderwaterRefractV2(HGNode *this)
{
  HgcUnderwaterRefractV2::~HgcUnderwaterRefractV2(this);

  HGObject::operator delete(v1);
}

uint64_t HUnderwaterRefractV2::GetOutput(HUnderwaterRefractV2 *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2)) {
    (*(void (**)(HUnderwaterRefractV2 *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
  }

  return HgcUnderwaterRefractV2::GetOutput(this, a2);
}

uint64_t HUnderwaterRefractV2::SetMaxOffsets(uint64_t this, float a2, float a3)
{
  *(float *)(this + 416) = a2;
  *(float *)(this + 42pthread_cond_init((pthread_cond_t *)this, 0) = a3;
  return this;
}

uint64_t HUnderwaterRefractV2::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = &HGRectInfinite;
  if (a3 >= 2) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

unint64_t HUnderwaterRefractV2::GetROI(float32x2_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  int var0 = a4.var0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int var1 = a4.var1;
  if (a3)
  {
    if (a3 == 1) {
      unsigned int v7 = a4.var0;
    }
    else {
      unsigned int v7 = 0;
    }
    if (a3 == 1) {
      uint64_t v8 = a4.var1;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    (*(void (**)(float32x2_t *, uint64_t, long long *))(*(void *)this + 104))(this, 8, &v32);
    float32x2_t v10 = (float32x2_t)v32;
    int v29 = 1065353216;
    uint64_t v28 = 0;
    int v30 = 0;
    int v24 = 1065353216;
    uint64_t v23 = 0;
    int v25 = 0;
    (*(void (**)(float32x2_t *, uint64_t, long long *))(*(void *)this + 104))(this, 3, &v32);
    v27[0] = v32;
    (*(void (**)(float32x2_t *, uint64_t, long long *))(*(void *)this + 104))(this, 4, &v32);
    v27[1] = v32;
    (*(void (**)(float32x2_t *, uint64_t, long long *))(*(void *)this + 104))(this, 5, &v32);
    long long v31 = v32;
    (*(void (**)(float32x2_t *, void, long long *))(*(void *)this + 104))(this, 0, &v32);
    v22[0] = v32;
    (*(void (**)(float32x2_t *, uint64_t, long long *))(*(void *)this + 104))(this, 1, &v32);
    v22[1] = v32;
    (*(void (**)(float32x2_t *, uint64_t, long long *))(*(void *)this + 104))(this, 2, &v32);
    long long v26 = v32;
    *(float *)&long long v32 = (float)var0;
    *((float *)&v32 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)var1;
    *((void *)&v32 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F80000000000000;
    *(float *)&long long v21 = (float)(int)v4;
    *((float *)&v21 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)SHIDWORD(v4);
    *((void *)&v21 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F80000000000000;
    v20[0] = 0;
    v20[1] = 0;
    PCMatrix44Tmpl<float>::transform<float>((float *)v22, (float *)&v32, (float *)v20);
    float32x4_t v19 = 0uLL;
    PCMatrix44Tmpl<float>::transform<float>((float *)v22, (float *)&v21, v19.f32);
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)v16.f32 = vmul_f32(v10, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, this[52]), (int8x8_t)_D1, (int8x8_t)this[52]));
    v20[0] = vsub_f32(v20[0], *(float32x2_t *)v16.f32);
    float32x4_t v19 = vaddq_f32(v16, v19);
    long long v18 = 0uLL;
    PCMatrix44Tmpl<float>::transform<float>((float *)v27, (float *)v20, (float *)&v18);
    long long v32 = v18;
    long long v18 = 0uLL;
    PCMatrix44Tmpl<float>::transform<float>((float *)v27, v19.f32, (float *)&v18);
    long long v21 = v18;
    unsigned int v7 = (int)(floorf(*(float *)&v32) + -1.0);
    uint64_t v8 = (int)(floorf(*((float *)&v32 + 1)) + -1.0);
  }
  return v7 | (unint64_t)(v8 << 32);
}

void sub_1B7513BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(a1);
}

void HDroplet::HDroplet(HDroplet *this)
{
}

void sub_1B75148D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35) {
    (*(void (**)(uint64_t))(*(void *)a35 + 24))(a35);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  uint64_t v37 = *(void *)(v35 - 144);
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HWave::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

unint64_t HWave::GetROI(HWave *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    int var0 = a4.var0;
    int var1 = a4.var1;
    (*(void (**)(HWave *, void, float *))(*(void *)this + 104))(this, 0, &v13);
    float v9 = v13;
    (*(void (**)(HWave *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v13);
    if (v14 == 0.0) {
      int v10 = (int)(float)((float)var0 - v9);
    }
    else {
      int v10 = var0;
    }
    if (v14 == 0.0) {
      int v11 = var1;
    }
    else {
      int v11 = (int)(float)((float)var1 - v9);
    }
    unsigned int v4 = v10 - 1;
    uint64_t v5 = (v11 - 1);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HWave::GetOutput(HWave *this, HGRenderer *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2))
  {
    (*(void (**)(HWave *, void, float *))(*(void *)this + 104))(this, 0, v6);
    float v4 = v6[0];
    if ((float)(v4 / (float)(*(int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 1)) >= 0.5) {
      (*(void (**)(HWave *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
    }
  }
  return HgcWave::GetOutput(this, a2);
}

void HWave::~HWave(HGNode *this)
{
  HgcWave::~HgcWave(this);

  HGObject::operator delete(v1);
}

uint64_t HCheckerboard::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = &HGRectInfinite;
  if (a3) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

uint64_t HCheckerboard::GetROI()
{
  return 0;
}

void HCheckerboard::~HCheckerboard(HGNode *this)
{
  HgcCheckerboard::~HgcCheckerboard(this);

  HGObject::operator delete(v1);
}

uint64_t HStripes::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = &HGRectInfinite;
  if (a3) {
    uint64_t v3 = &HGRectNull;
  }
  return *(void *)v3;
}

uint64_t HStripes::GetROI()
{
  return 0;
}

void HStripes::~HStripes(HGNode *this)
{
  HgcStripes::~HgcStripes(this);

  HGObject::operator delete(v1);
}

uint64_t HiOSStretch::GetDOD(HiOSStretch *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CGFloat var0 = (double)a4.var0;
  CGFloat var1 = (double)a4.var1;
  CGFloat v6 = (double)(a4.var2 - a4.var0);
  CGFloat v7 = (double)(a4.var3 - a4.var1);
  (*(void (**)(HiOSStretch *, uint64_t, unsigned char *))(*(void *)this + 104))(this, 1, v9);
  v12.origin.double x = var0;
  v12.origin.double y = var1;
  v12.size.CGFloat width = v6;
  v12.size.CGFloat height = v7;
  CGRect v13 = CGRectInset(v12, (float)-v10, (float)-v10);
  return HGRectFromCGRect(v13);
}

uint64_t HiOSStretch::GetROI(HiOSStretch *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var0 = a4.var0;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int var1 = a4.var1;
  CGFloat v7 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat v31 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v34 = *(CGFloat *)MEMORY[0x1E4F1DB20];
  CGFloat v8 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  double v9 = (double)a4.var1;
  double v35 = (double)(a4.var2 - a4.var0);
  double v36 = (double)a4.var0;
  double v29 = (double)(a4.var3 - a4.var1);
  (*(void (**)(HiOSStretch *, void, float *))(*(void *)this + 104))(this, 0, &v55);
  float v10 = v55;
  float v11 = v56;
  float v37 = v55;
  (*(void (**)(HiOSStretch *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v55);
  float v38 = v56;
  v53.f32[0] = (float)var0;
  v53.f32[1] = (float)var1;
  v52[0] = v10;
  v52[1] = v11;
  float v28 = v57;
  v51[0] = v55;
  v51[1] = v56;
  float v12 = v55;
  _OWORD v51[2] = v57;
  v51[3] = v58;
  float v13 = v57;
  float v14 = v58;
  stretch(&v53, v52, v51, &v54);
  v68.origin.CGFloat x = v54.f32[0];
  v68.origin.CGFloat y = v54.f32[1];
  v68.size.CGFloat width = 0.0;
  v68.size.CGFloat height = 0.0;
  v60.origin.CGFloat y = v31;
  v60.origin.CGFloat x = v34;
  v60.size.CGFloat width = v7;
  v60.size.CGFloat height = v8;
  CGRect v61 = CGRectUnion(v60, v68);
  CGFloat x = v61.origin.x;
  CGFloat r1 = v61.origin.y;
  CGFloat width = v61.size.width;
  CGFloat height = v61.size.height;
  *(float *)&v61.origin.CGFloat x = v9 + v29;
  LODWORD(v34) = LODWORD(v61.origin.x);
  v49.f32[0] = (float)var0;
  v49.i32[1] = LODWORD(v61.origin.x);
  v48[0] = v37;
  v48[1] = v11;
  v47[0] = v12;
  float v27 = v12;
  v47[1] = v38;
  _OWORD v47[2] = v13;
  v47[3] = v14;
  stretch(&v49, v48, v47, &v50);
  v69.origin.CGFloat x = v50.f32[0];
  v69.origin.CGFloat y = v50.f32[1];
  v69.size.CGFloat width = 0.0;
  v69.size.CGFloat height = 0.0;
  v62.origin.CGFloat x = x;
  v62.origin.CGFloat y = r1;
  v62.size.CGFloat width = width;
  v62.size.CGFloat height = height;
  CGRect v63 = CGRectUnion(v62, v69);
  CGFloat y = v63.origin.y;
  CGFloat v33 = v63.origin.x;
  CGFloat v17 = v63.size.width;
  CGFloat v18 = v63.size.height;
  *(float *)&unsigned int v19 = v36 + v35;
  v45.i32[0] = v19;
  v45.f32[1] = (float)var1;
  v44[0] = v37;
  v44[1] = v11;
  v43[0] = v12;
  v43[1] = v38;
  float64x2_t v43[2] = v28;
  _OWORD v43[3] = v14;
  float v20 = v14;
  stretch(&v45, v44, v43, &v46);
  v70.origin.CGFloat x = v46.f32[0];
  v70.origin.CGFloat y = v46.f32[1];
  v70.size.CGFloat width = 0.0;
  v70.size.CGFloat height = 0.0;
  v64.origin.CGFloat y = y;
  v64.origin.CGFloat x = v33;
  v64.size.CGFloat width = v17;
  v64.size.CGFloat height = v18;
  CGRect v65 = CGRectUnion(v64, v70);
  CGFloat v21 = v65.origin.x;
  CGFloat v22 = v65.origin.y;
  CGFloat v23 = v65.size.width;
  CGFloat v24 = v65.size.height;
  unint64_t v41 = __PAIR64__(LODWORD(v34), v19);
  v40[0] = v37;
  v40[1] = v11;
  v39[0] = v27;
  v39[1] = v38;
  __n128 v39[2] = v28;
  v39[3] = v20;
  stretch((float32x2_t *)&v41, v40, v39, &v42);
  v71.origin.CGFloat x = v42.f32[0];
  v71.origin.CGFloat y = v42.f32[1];
  v71.size.CGFloat width = 0.0;
  v71.size.CGFloat height = 0.0;
  v66.origin.CGFloat x = v21;
  v66.origin.CGFloat y = v22;
  v66.size.CGFloat width = v23;
  v66.size.CGFloat height = v24;
  CGRect v67 = CGRectUnion(v66, v71);
  return HGRectFromCGRect(v67);
}

float32x2_t stretch@<D0>(float32x2_t *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float32x2_t *a4@<X8>)
{
  uint64_t v5 = a2 + 1;
  float32x2_t v22 = *a1;
  float v23 = a3[1];
  float32x2_t v6 = vld1_dup_f32(v5);
  float32x2_t v7 = vsub_f32(*a1, v6);
  float32x2_t v8 = vmul_n_f32(v7, a3[2]);
  float v20 = v8.f32[0];
  v7.f32[0] = COERCE_FLOAT(*a1) - *a2;
  float32x2_t v9 = vmul_n_f32(vabs_f32(v7), *a3);
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v15 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_f32(v9), (int8x8_t)_D2, vbic_s8((int8x8_t)vsub_f32(_D2, v9), (int8x8_t)vcgt_f32(v9, _D2)));
  __asm { FMOV            V2.2S, #3.0 }
  float32x2_t v17 = vmul_f32(v15, vmul_f32(v15, vsub_f32(_D2, vadd_f32(v15, v15))));
  float v21 = sinf(v8.f32[1]);
  v18.f32[0] = sinf(v20);
  v18.f32[1] = v21;
  float32x2_t result = vsub_f32(v22, vmul_f32(vmul_n_f32(v18, v23), v17));
  *a4 = result;
  return result;
}

void HiOSStretch::~HiOSStretch(HGNode *this)
{
  HgciOSStretch::~HgciOSStretch(this);

  HGObject::operator delete(v1);
}

void sub_1B7515B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  _Unwind_Resume(a1);
}

void sub_1B7516010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7516A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 24))(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B75171F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(a1);
}

void sub_1B7518378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7519088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HLevels::HLevels(HLevels *this)
{
}

void sub_1B7519280(_Unwind_Exception *a1)
{
  HgcLevels::~HgcLevels(v1);
  _Unwind_Resume(a1);
}

void HLevels::~HLevels(HGNode *this)
{
  HgcLevels::~HgcLevels(this);

  HGObject::operator delete(v1);
}

void sub_1B75194E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B75197A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HLumaKeyer::HLumaKeyer(HLumaKeyer *this)
{
}

void sub_1B7519B30(_Unwind_Exception *a1)
{
  HgcLumaKeyer::~HgcLumaKeyer(v1);
  _Unwind_Resume(a1);
}

void HLumaKeyer::~HLumaKeyer(HGNode *this)
{
  HgcLumaKeyer::~HgcLumaKeyer(this);

  HGObject::operator delete(v1);
}

uint64_t HLumaKeyer::GetROI(HLumaKeyer *this, HGRenderer *a2, int a3, long long a4)
{
  if (a3 == 1)
  {
    if (*((unsigned char *)this + 416)) {
      unsigned int v4 = 2816;
    }
    else {
      unsigned int v4 = 256;
    }
    *(void *)&long long v10 = HGRectMake4i(0, 0, v4, 1u);
    *((void *)&v10 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v5;
    uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    uint64_t v8 = v7;
    *(void *)&v11.int var0 = v6;
    *(void *)&v11.int var2 = v8;
    HGRect::Grow((HGRect *)&v10, v11);
  }
  else if (a3)
  {
    return HGRectNull;
  }
  else
  {
    return a4;
  }
  return v10;
}

FxMatrix44 *PAEInitSampling(_anonymous_namespace_::_Local *a1)
{
  if (!atomic_fetch_add((atomic_ullong *volatile)&result->_mat[0][2], 1uLL))
  {
    uint64_t v2 = result;

    float32x2_t result = objc_alloc_init(FxMatrix44);
    *(void *)&v2->_mat[0][1] = result;
  }
  return result;
}

uint64_t anonymous namespace'::_Local::Get(_anonymous_namespace_::_Local *this)
{
  {
    unsigned int v4 = &v2;
    uint64_t v3 = &v4;
  }
}

void PAEDisposeSampling(_anonymous_namespace_::_Local *a1)
{
  if (atomic_fetch_add((atomic_ullong *volatile)(v1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v2 = v1;

    *(void *)(v2 + 16) = 0;
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<anonymous namespace'::_Local::Get(void)::{lambda(void)#1} &&>>()
{
}

void sub_1B7519DAC(_Unwind_Exception *a1, const PCString *a2)
{
  uint64_t v5 = v4;
  OZChannelBase::setRangeName(v5, a2);
  uint64_t v8 = (void *)v2[16];
  if (v8)
  {
    v2[17] = v8;
    operator delete(v8);
  }
  OZChannelBase::setRangeName(v3, v7);
  float32x2_t v9 = (void *)v2[4];
  if (v9)
  {
    v2[5] = v9;
    operator delete(v9);
  }
  MEMORY[0x1BA9BFBA0](v2, 0x10A0C40FB59A684);
  _Unwind_Resume(a1);
}

void PCRecursiveMutex::~PCRecursiveMutex(PCRecursiveMutex *this)
{
  PCMutex::~PCMutex((PCMutex *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1B7519EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1B751ABD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B751BA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 24))(a29);
  }
  (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  uint64_t v33 = *(void *)(v31 - 248);
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
  }
  uint64_t v34 = *(void *)(v31 - 240);
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  }
  (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  uint64_t v35 = *(void *)(v31 - 208);
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  }
  uint64_t v36 = *(void *)(v31 - 200);
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  }
  _Unwind_Resume(a1);
}

void sub_1B751D230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(exception_object);
}

void HChannelMixer::HChannelMixer(HChannelMixer *this)
{
}

void sub_1B751D4A4(_Unwind_Exception *a1)
{
  HgcChannelMixer::~HgcChannelMixer(v1);
  _Unwind_Resume(a1);
}

void HChannelMixer::~HChannelMixer(HGNode *this)
{
  HgcChannelMixer::~HgcChannelMixer(this);

  HGObject::operator delete(v1);
}

void sub_1B751E488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B751ED98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C405997BE26);
  _Unwind_Resume(a1);
}

void sub_1B751F408(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C405997BE26);
  _Unwind_Resume(a1);
}

void OMPie::OMPie(OMPie *this)
{
  *((void *)this + 5) = 0;
  uint64_t v2 = (void **)((char *)this + 40);
  *((_DWORD *)this + 8) = 1;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  uint64_t v3 = (char **)((char *)this + 56);
  std::locale v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 56, 1uLL);
  uint64_t v5 = (_DWORD *)*((void *)this + 5);
  uint64_t v6 = (_DWORD *)*((void *)this + 6);
  uint64_t v8 = (char *)&v4[v7];
  *std::locale v4 = 0;
  float32x2_t v9 = (char *)(v4 + 1);
  long long v10 = v4;
  while (v6 != v5)
  {
    int v11 = *(v6 - 2);
    v6 -= 2;
    *((_DWORD *)v10-- - 2) = v11;
    *((_DWORD *)v10 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v6[1];
  }
  *((void *)this + 5) = v10;
  *((void *)this + 6) = v9;
  *((void *)this + 7) = v8;
  if (v5)
  {
    operator delete(v5);
    uint64_t v8 = *v3;
  }
  *((void *)this + 6) = v9;
  if (v9 >= v8)
  {
    float v13 = (char *)*v2;
    uint64_t v14 = (v9 - (unsigned char *)*v2) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v8 - v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      float32x2_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v17);
      float v13 = (char *)*((void *)this + 5);
      float32x2_t v9 = (char *)*((void *)this + 6);
    }
    else
    {
      float32x2_t v18 = 0;
    }
    unsigned int v19 = &v18[8 * v14];
    uint64_t v8 = &v18[8 * v17];
    *(void *)unsigned int v19 = 0;
    float v12 = v19 + 8;
    while (v9 != v13)
    {
      int v20 = *((_DWORD *)v9 - 2);
      v9 -= 8;
      *((_DWORD *)v19 - 2) = v20;
      v19 -= 8;
      *((_DWORD *)v19 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v9 + 1);
    }
    *((void *)this + 5) = v19;
    *((void *)this + 6) = v12;
    *((void *)this + 7) = v8;
    if (v13)
    {
      operator delete(v13);
      uint64_t v8 = *v3;
    }
  }
  else
  {
    v4[1] = 0;
    float v12 = (char *)(v4 + 2);
  }
  *((void *)this + 6) = v12;
  if (v12 >= v8)
  {
    float32x2_t v22 = *v2;
    uint64_t v23 = (v12 - (unsigned char *)*v2) >> 3;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v8 - v22;
    if (v25 >> 2 > v24) {
      unint64_t v24 = v25 >> 2;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      float v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v26);
      float32x2_t v22 = (unsigned char *)*((void *)this + 5);
      float v12 = (char *)*((void *)this + 6);
    }
    else
    {
      float v27 = 0;
    }
    float v28 = &v27[8 * v23];
    uint64_t v8 = &v27[8 * v26];
    *(void *)float v28 = 0;
    float v21 = v28 + 8;
    while (v12 != v22)
    {
      int v29 = *((_DWORD *)v12 - 2);
      v12 -= 8;
      *((_DWORD *)v28 - 2) = v29;
      v28 -= 8;
      *((_DWORD *)v28 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v12 + 1);
    }
    *((void *)this + 5) = v28;
    *((void *)this + 6) = v21;
    *((void *)this + 7) = v8;
    if (v22)
    {
      operator delete(v22);
      uint64_t v8 = *v3;
    }
  }
  else
  {
    *(void *)float v12 = 0;
    float v21 = v12 + 8;
  }
  *((void *)this + 6) = v21;
  if (v21 >= v8)
  {
    uint64_t v31 = *v2;
    uint64_t v32 = (v21 - (unsigned char *)*v2) >> 3;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v34 = v8 - v31;
    if (v34 >> 2 > v33) {
      unint64_t v33 = v34 >> 2;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v35);
      uint64_t v31 = (unsigned char *)*((void *)this + 5);
      float v21 = (char *)*((void *)this + 6);
    }
    else
    {
      uint64_t v36 = 0;
    }
    float v37 = &v36[8 * v32];
    uint64_t v8 = &v36[8 * v35];
    *(void *)float v37 = 0;
    uint64_t v30 = v37 + 8;
    while (v21 != v31)
    {
      int v38 = *((_DWORD *)v21 - 2);
      v21 -= 8;
      *((_DWORD *)v37 - 2) = v38;
      v37 -= 8;
      *((_DWORD *)v37 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v21 + 1);
    }
    *((void *)this + 5) = v37;
    *((void *)this + 6) = v30;
    *((void *)this + 7) = v8;
    if (v31)
    {
      operator delete(v31);
      uint64_t v8 = *v3;
    }
  }
  else
  {
    *(void *)float v21 = 0;
    uint64_t v30 = v21 + 8;
  }
  *((void *)this + 6) = v30;
  if (v30 >= v8)
  {
    float32x2_t v40 = (char *)*v2;
    uint64_t v41 = (v30 - (unsigned char *)*v2) >> 3;
    unint64_t v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v43 = v8 - v40;
    if (v43 >> 2 > v42) {
      unint64_t v42 = v43 >> 2;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      float32x2_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v44);
      float32x2_t v40 = (char *)*((void *)this + 5);
      uint64_t v30 = (char *)*((void *)this + 6);
    }
    else
    {
      float32x2_t v45 = 0;
    }
    float32x2_t v46 = &v45[8 * v41];
    uint64_t v47 = &v45[8 * v44];
    *(void *)float32x2_t v46 = 0;
    float v39 = v46 + 8;
    while (v30 != v40)
    {
      int v48 = *((_DWORD *)v30 - 2);
      v30 -= 8;
      *((_DWORD *)v46 - 2) = v48;
      v46 -= 8;
      *((_DWORD *)v46 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v30 + 1);
    }
    *((void *)this + 5) = v46;
    *((void *)this + 6) = v39;
    *((void *)this + 7) = v47;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    *(void *)uint64_t v30 = 0;
    float v39 = v30 + 8;
  }
  *((void *)this + 6) = v39;
}

void sub_1B75207FC(_Unwind_Exception *exception_object)
{
  std::locale v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void PAEKeyerPie::~PAEKeyerPie(PAEKeyerPie *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1BA9BFBA0);
}

void OMPie::OMPie(OMPie *this, int a2)
{
  *((void *)this + 5) = 0;
  uint64_t v3 = (void **)((char *)this + 40);
  *((_DWORD *)this + 8) = a2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::locale v4 = (char **)((char *)this + 56);
  uint64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 56, 1uLL);
  uint64_t v6 = (_DWORD *)*((void *)this + 5);
  uint64_t v7 = (_DWORD *)*((void *)this + 6);
  float32x2_t v9 = (char *)&v5[v8];
  *uint64_t v5 = 0;
  long long v10 = (char *)(v5 + 1);
  int v11 = v5;
  while (v7 != v6)
  {
    int v12 = *(v7 - 2);
    v7 -= 2;
    *((_DWORD *)v11-- - 2) = v12;
    *((_DWORD *)v11 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v7[1];
  }
  *((void *)this + 5) = v11;
  *((void *)this + 6) = v10;
  *((void *)this + 7) = v9;
  if (v6)
  {
    operator delete(v6);
    float32x2_t v9 = *v4;
  }
  *((void *)this + 6) = v10;
  if (v10 >= v9)
  {
    uint64_t v14 = (char *)*v3;
    uint64_t v15 = (v10 - (unsigned char *)*v3) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v9 - v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v18);
      uint64_t v14 = (char *)*((void *)this + 5);
      long long v10 = (char *)*((void *)this + 6);
    }
    else
    {
      unsigned int v19 = 0;
    }
    int v20 = &v19[8 * v15];
    float32x2_t v9 = &v19[8 * v18];
    *(void *)int v20 = 0;
    float v13 = v20 + 8;
    while (v10 != v14)
    {
      int v21 = *((_DWORD *)v10 - 2);
      v10 -= 8;
      *((_DWORD *)v20 - 2) = v21;
      v20 -= 8;
      *((_DWORD *)v20 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v10 + 1);
    }
    *((void *)this + 5) = v20;
    *((void *)this + 6) = v13;
    *((void *)this + 7) = v9;
    if (v14)
    {
      operator delete(v14);
      float32x2_t v9 = *v4;
    }
  }
  else
  {
    v5[1] = 0;
    float v13 = (char *)(v5 + 2);
  }
  *((void *)this + 6) = v13;
  if (v13 >= v9)
  {
    uint64_t v23 = *v3;
    uint64_t v24 = (v13 - (unsigned char *)*v3) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v9 - v23;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      float v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v27);
      uint64_t v23 = (unsigned char *)*((void *)this + 5);
      float v13 = (char *)*((void *)this + 6);
    }
    else
    {
      float v28 = 0;
    }
    int v29 = &v28[8 * v24];
    float32x2_t v9 = &v28[8 * v27];
    *(void *)int v29 = 0;
    float32x2_t v22 = v29 + 8;
    while (v13 != v23)
    {
      int v30 = *((_DWORD *)v13 - 2);
      v13 -= 8;
      *((_DWORD *)v29 - 2) = v30;
      v29 -= 8;
      *((_DWORD *)v29 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v13 + 1);
    }
    *((void *)this + 5) = v29;
    *((void *)this + 6) = v22;
    *((void *)this + 7) = v9;
    if (v23)
    {
      operator delete(v23);
      float32x2_t v9 = *v4;
    }
  }
  else
  {
    *(void *)float v13 = 0;
    float32x2_t v22 = v13 + 8;
  }
  *((void *)this + 6) = v22;
  if (v22 >= v9)
  {
    uint64_t v32 = *v3;
    uint64_t v33 = (v22 - (unsigned char *)*v3) >> 3;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = v9 - v32;
    if (v35 >> 2 > v34) {
      unint64_t v34 = v35 >> 2;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    if (v36)
    {
      float v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v36);
      uint64_t v32 = (unsigned char *)*((void *)this + 5);
      float32x2_t v22 = (char *)*((void *)this + 6);
    }
    else
    {
      float v37 = 0;
    }
    int v38 = &v37[8 * v33];
    float32x2_t v9 = &v37[8 * v36];
    *(void *)int v38 = 0;
    uint64_t v31 = v38 + 8;
    while (v22 != v32)
    {
      int v39 = *((_DWORD *)v22 - 2);
      v22 -= 8;
      *((_DWORD *)v38 - 2) = v39;
      v38 -= 8;
      *((_DWORD *)v38 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v22 + 1);
    }
    *((void *)this + 5) = v38;
    *((void *)this + 6) = v31;
    *((void *)this + 7) = v9;
    if (v32)
    {
      operator delete(v32);
      float32x2_t v9 = *v4;
    }
  }
  else
  {
    *(void *)float32x2_t v22 = 0;
    uint64_t v31 = v22 + 8;
  }
  *((void *)this + 6) = v31;
  if (v31 >= v9)
  {
    uint64_t v41 = (char *)*v3;
    uint64_t v42 = (v31 - (unsigned char *)*v3) >> 3;
    unint64_t v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = v9 - v41;
    if (v44 >> 2 > v43) {
      unint64_t v43 = v44 >> 2;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v43;
    }
    if (v45)
    {
      float32x2_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v45);
      uint64_t v41 = (char *)*((void *)this + 5);
      uint64_t v31 = (char *)*((void *)this + 6);
    }
    else
    {
      float32x2_t v46 = 0;
    }
    uint64_t v47 = &v46[8 * v42];
    int v48 = &v46[8 * v45];
    *(void *)uint64_t v47 = 0;
    float32x2_t v40 = v47 + 8;
    while (v31 != v41)
    {
      int v49 = *((_DWORD *)v31 - 2);
      v31 -= 8;
      *((_DWORD *)v47 - 2) = v49;
      v47 -= 8;
      *((_DWORD *)v47 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((_DWORD *)v31 + 1);
    }
    *((void *)this + 5) = v47;
    *((void *)this + 6) = v40;
    *((void *)this + 7) = v48;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *(void *)uint64_t v31 = 0;
    float32x2_t v40 = v31 + 8;
  }
  *((void *)this + 6) = v40;
}

void sub_1B7520C30(_Unwind_Exception *exception_object)
{
  std::locale v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

float OMColorUtil::getCbCrFromRGB@<S0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, float *a9@<X8>)
{
  OMColorUtil::getRGBToYCbCrMatrix(a2, a2, a3, a4, a5, a6, a7, a8, (Mat4f *)v14);
  float v11 = a1[1];
  float v12 = a1[2];
  float result = (float)((float)(*a1 * v14[8]) + (float)(v11 * v14[9])) + (float)(v12 * v14[10]);
  *a9 = (float)((float)(*a1 * v14[4]) + (float)(v11 * v14[5])) + (float)(v12 * v14[6]);
  a9[1] = result;
  return result;
}

void sub_1B7522044(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C401478D197);
  _Unwind_Resume(a1);
}

void sub_1B7524800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  HGObject::operator delete(v52);
  (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
  uint64_t v55 = *(void *)(v53 - 184);
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
  }
  uint64_t v56 = *(void *)(v53 - 176);
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 24))(v56);
  }
  uint64_t v57 = *(void *)(v53 - 168);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 24))(v57);
  }
  uint64_t v58 = *(void *)(v53 - 160);
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 24))(v58);
  }
  uint64_t v59 = *(void *)(v53 - 152);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
  }
  _Unwind_Resume(a1);
}

void HCopyAlpha::~HCopyAlpha(HGNode *this)
{
  HgcCopyAlpha::~HgcCopyAlpha(this);

  HGObject::operator delete(v1);
}

void sub_1B7525700(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1010C404946846FLL);
  _Unwind_Resume(a1);
}

void sub_1B75257E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1010C404946846FLL);
  _Unwind_Resume(a1);
}

void sub_1B752591C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1010C404946846FLL);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    enCGPoint d = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B7525C00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7526780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
  (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
  (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  (*(void (**)(uint64_t))(*(void *)a17 + 24))(a17);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  _Unwind_Resume(a1);
}

void sub_1B7526C10(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t anonymous namespace'::properties(_anonymous_namespace_ *this, objc_object *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v3 = [NSNumber numberWithBool:0];
  uint64_t v4 = [NSNumber numberWithBool:1];
  uint64_t v5 = [NSNumber numberWithUnsignedInteger:67584];
  uint64_t v6 = [NSNumber numberWithUnsignedInteger:591872];
  return objc_msgSend(v2, "dictionaryWithObjectsAndKeys:", v3, @"MayRemapTime", v4, @"SupportsHeliumRendering", v5, @"SDRWorkingSpace", v6, @"HDRWorkingSpace", objc_msgSend(NSNumber, "numberWithInt:", 3), @"PixelTransformSupport", 0);
}

uint64_t anonymous namespace'::addParameters(_anonymous_namespace_ *this, objc_object *a2, objc_object *a3, int a4)
{
  int v5 = (int)a3;
  uint64_t v7 = [(objc_object *)a2 apiForProtocol:&unk_1F121A238];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (void *)v7;
  float32x2_t v9 = (void *)[MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  int v10 = objc_msgSend(v8, "addAngleSliderWithName:parmId:defaultValue:parameterMin:parameterMax:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Angle", 0, 0), 2, 0, -18.0, -62.8318531, 62.8318531);
  int v11 = objc_msgSend(v8, "addAngleSliderWithName:parmId:defaultValue:parameterMin:parameterMax:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Rotation", 0, 0), 3, 0, -24.0, -12.5663706, 12.5663706);
  int v12 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Radius", 0, 0), 4, 0, 20.0, 1.0, 100.0, 1.0, 100.0, 1.0);
  uint64_t v13 = [v9 localizedStringForKey:@"PageCurl::Fade Out" value:0 table:0];
  if (v5) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 2;
  }
  int v15 = v10 & v11;
  double v16 = 0.0;
  if (v5) {
    double v16 = 20.0;
  }
  int v17 = v15 & v12 & [v8 addFloatSliderWithName:v13 parmId:8 defaultValue:v14 parameterMin:v16 parameterMax:0.0 sliderMin:100.0 sliderMax:0.0 delta:100.0 parmFlags:1.0];
  int v18 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Shadow", 0, 0), 6, v14, 50.0, 0.0, 100.0, 0.0, 100.0, 1.0);
  int v19 = v18 & objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Highlight Color", 0, 0), 5, v14, 0.23, 0.23, 0.23);
  uint64_t v20 = v17 & v19 & objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:defaultAlpha:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Back Color", 0, 0), 7, 0, 0.8, 0.8, 0.8, 0.05);
  if (v5)
  {
    int v21 = objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Animate", 0, 0), 10, 1, 1);
    uint64_t v20 = v20 & v21 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", @"PageCurl::Percent", 0, 0), 11, 4, 50.0, 0.0, 100.0, 0.0, 100.0, 1.0);
  }
  if (a4) {
    return v20 & [(_anonymous_namespace_ *)this addHDRWhiteLevelParameter];
  }
  return v20;
}

void sub_1B75275AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 24))(a29);
  }
  (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::renderOutput@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, int a6@<W5>, int a7@<W6>, void *a8@<X8>, float a9@<S0>)
{
  *a8 = 0;
  uint64_t result = [a2 apiForProtocol:&unk_1F121A608];
  if (result)
  {
    int v15 = (void *)result;
    if (a4) {
      [a4 heliumRef];
    }
    else {
      uint64_t v40 = 0;
    }
    FxMatrixToPCMatrix((FxMatrix44 *)[a3 pixelTransform], (uint64_t)v39);
    double v37 = 0.0;
    double v38 = 0.0;
    double v35 = 0.0;
    double v36 = 0.0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    int v26 = [v15 getFloatValue:&v38 fromParm:4 atFxTime:*a5];
    int v25 = [v15 getFloatValue:&v37 fromParm:8 atFxTime:*a5];
    int v16 = [v15 getFloatValue:&v36 fromParm:2 atFxTime:*a5];
    int v17 = [v15 getFloatValue:&v35 fromParm:3 atFxTime:*a5];
    int v18 = [v15 getFloatValue:&v34 fromParm:6 atFxTime:*a5];
    int v19 = [v15 getRedValue:&v31 greenValue:&v32 blueValue:&v33 fromParm:5 atFxTime:*a5];
    [a3 bounds];
    double v37 = v37 / 100.0;
    double v38 = v20 / 100.0 * v38;
    int v21 = v26 & v25 & v16 & v17 & v18 & v19 & [v15 getRedValue:&v29 greenValue:(char *)&v29 + 8 blueValue:&v30 alphaValue:(char *)&v30 + 8 fromParm:7 atFxTime:*a5];
    if (a7) {
      v21 &= objc_msgSend(a1, "applyHDRWhiteLevelForRed:green:blue:inColorSpace:", &v29, (char *)&v29 + 8, &v30, objc_msgSend(a4, "colorSpace"));
    }
    *(double *)&long long v29 = *((double *)&v30 + 1) * *(double *)&v29;
    *((double *)&v29 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *((double *)&v30 + 1) * *((double *)&v29 + 1);
    *(double *)&long long v30 = *((double *)&v30 + 1) * *(double *)&v30;
    if (v21)
    {
      double v22 = v35;
      double v23 = v36;
      if (a6)
      {
        double v23 = v36 + 3.14159265 + v35;
        double v22 = -v35;
        double v35 = -v35;
      }
      double v36 = v23 + v22 * a9;
      uint64_t v24 = (HPageCurlBackground *)HGObject::operator new(0x2D0uLL);
      HPageCurlBackground::HPageCurlBackground(v24);
    }
    uint64_t result = v40;
    if (v40) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v40 + 24))(v40);
    }
  }
  return result;
}

void sub_1B7527FC0(_Unwind_Exception *a1)
{
  HGObject::operator delete(v4);
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  uint64_t v8 = *(void *)(v6 - 160);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  _Unwind_Resume(a1);
}

void sub_1B7528CA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HPageCurlBackground::HPageCurlBackground(HPageCurlBackground *this)
{
}

void HPageCurlForeground::HPageCurlForeground(HPageCurlForeground *this)
{
}

void sub_1B7529F24(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B752A6CC(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B752ABFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B752AD44(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::_Private *anonymous namespace'::_Private::_Private(_anonymous_namespace_::_Private *this, double a2, double a3, double a4)
{
  return this;
}

{
  return this;
}

void sub_1B752ADCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)uint64_t v10 = &unk_1F1093990;
  *(void *)(v10 + 32) = &unk_1F10939D0;
  a10 = (void **)(v10 + 72);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B752AECC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

void sub_1B752B104(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

void sub_1B752BCD0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

void sub_1B752C70C(_Unwind_Exception *a1)
{
  *(void *)(v3 - 136) = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 136));
  *(void *)(v3 - 136) = v1;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 136));
  _Unwind_Resume(a1);
}

uint64_t cc::curve::aspline::color_t<double>::~color_t(uint64_t a1)
{
  *(void *)a1 = &unk_1F1093990;
  *(void *)(a1 + 32) = &unk_1F10939D0;
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_1F1093990;
  *(void *)(a1 + 32) = &unk_1F10939D0;
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1BA9BFBA0](a1, 0x10A1C40D66B6438);
}

uint64_t *anonymous namespace'::NewCurve@<X0>(_anonymous_namespace_ *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 8) = 0;
  uint64_t v6 = (uint64_t *)(a5 + 8);
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)a5 = &unk_1F1093990;
  *(void *)(a5 + 32) = &unk_1F10939D0;
  *(double *)(a5 + 4pthread_cond_init((pthread_cond_t *)this, 0) = a2;
  *(double *)(a5 + 48) = a3;
  *(double *)(a5 + 56) = a4;
  *(void *)(a5 + 72) = 0;
  uint64_t v7 = (void *)(a5 + 72);
  *(void *)(a5 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 64) = &unk_1F1093A40;
  *(void *)(a5 + 96) = &unk_1F1093A68;
  *(void *)(a5 + 104) = cc::curve::aspline::bezier_t<double,false>::evalNonPeriodic;
  *(void *)(a5 + 112) = 0;
  float64x2_t v75 = 0uLL;
  float v74 = &unk_1F108BF48;
  std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100]((uint64_t *)(a5 + 8), (uint64_t)&v74);
  float v74 = &unk_1F108BF48;
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v75 = _Q0;
  uint64_t result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v6, (uint64_t)&v74);
  uint64_t v13 = *(void *)(a5 + 8);
  uint64_t v14 = *(void *)(a5 + 16);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3);
  if (v15 <= 1) {
    return std::vector<cc::point_t<double,false,false>>::resize((uint64_t *)(a5 + 72), 4uLL);
  }
  if (v15 <= 0x5555555555555554)
  {
    uint64_t v16 = v14 - 24;
    if (v14 - 24 == v13) {
      unint64_t v17 = v14 - 24;
    }
    else {
      unint64_t v17 = v14 - 48;
    }
    float64x2_t v75 = 0uLL;
    float v74 = &unk_1F108BF48;
    uint64_t result = std::vector<cc::point_t<double,false,false>>::resize((uint64_t *)(a5 + 72), ((v14 - v13) >> 3) - 2);
    uint64_t v18 = *v6;
    if (*v6 != v16)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *v7;
      unint64_t v21 = *v6;
      while (1)
      {
        float64x2_t v73 = *(float64x2_t *)(v21 + 32);
        int8x16_t v22 = (int8x16_t)vsubq_f64(v73, *(float64x2_t *)(v21 + 8));
        float64x2_t v23 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v22), (int8x16_t)vnegq_f64((float64x2_t)v22), v22);
        float64x2_t v75 = v23;
        if (v23.f64[0] < 0.0) {
          v23.f64[0] = -v23.f64[0];
        }
        v23.f64[0] = v23.f64[0] * 0.3334;
        uint64_t v24 = v20 + v19;
        *(_OWORD *)(v20 + v19 + 8) = *(_OWORD *)(v21 + 8);
        if (!v19) {
          break;
        }
        double v25 = v73.f64[0] - *(double *)(v21 - 16);
        double v26 = -v25;
        if (v25 >= 0.0) {
          double v26 = v73.f64[0] - *(double *)(v21 - 16);
        }
        double v27 = (v73.f64[1] - *(double *)(v21 - 8)) / v25;
        if (v26 < 0.00000011920929) {
          double v27 = 0.0;
        }
        v75.f64[1] = v27;
        v75.f64[0] = 1.0;
        float64_t v28 = v23.f64[0] * v27 + *(double *)(v21 + 16);
        *(double *)(v24 + 32) = v23.f64[0] + *(double *)(v21 + 8);
        *(float64_t *)(v24 + 4pthread_cond_init((pthread_cond_t *)this, 0) = v28;
        if (v21 < v17) {
          goto LABEL_19;
        }
        float64x2_t v29 = v73;
        float64x2_t v30 = *(float64x2_t *)(v24 + 32);
LABEL_22:
        float64x2_t v31 = vsubq_f64(v29, v30);
        double v32 = -v31.f64[0];
        if (v31.f64[0] >= 0.0) {
          double v32 = v31.f64[0];
        }
        *(void *)&double v33 = *(_OWORD *)&vdivq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1), v31);
        if (v32 < 0.00000011920929) {
          double v33 = 0.0;
        }
        v75.f64[1] = v33;
        v75.f64[0] = 1.0;
        double v34 = v73.f64[1] - v23.f64[0] * v33;
        double v35 = (float64x2_t *)(v20 + v19);
        v35[3].f64[1] = v73.f64[0] - v23.f64[0];
        v35[4].f64[0] = v34;
        if (!v19)
        {
          double v36 = v35[3].f64[1] - *(double *)(v21 + 8);
          double v37 = v34 - *(double *)(v21 + 16);
          double v38 = -v36;
          if (v36 >= 0.0) {
            double v38 = v35[3].f64[1] - *(double *)(v21 + 8);
          }
          double v39 = v37 / v36;
          if (v38 < 0.00000011920929) {
            double v39 = 0.0;
          }
          v75.f64[1] = v39;
          v75.f64[0] = 1.0;
          v23.f64[1] = v23.f64[0] * v39;
          v35[2] = vaddq_f64(v23, *(float64x2_t *)(v24 + 8));
        }
        v21 += 24;
        v19 += 72;
        if (v21 == v16) {
          goto LABEL_33;
        }
      }
      if (v21 >= v17) {
        float64x2_t v29 = v73;
      }
      else {
LABEL_19:
      }
        float64x2_t v29 = *(float64x2_t *)(v21 + 56);
      float64x2_t v30 = *(float64x2_t *)(v21 + 8);
      goto LABEL_22;
    }
LABEL_33:
    *(_OWORD *)(*(void *)(a5 + 80) - 16) = *(_OWORD *)(v14 - 16);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a5 + 16) - v18) >> 3) >= 3 && v18 != v16)
    {
      uint64_t v41 = 0;
      uint64_t v42 = (double *)(*v7 + 64);
      do
      {
        int8x16_t v43 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v18 + v41 + 32), *(float64x2_t *)(v18 + v41 + 8));
        int8x16_t v44 = vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v43), (int8x16_t)vnegq_f64((float64x2_t)v43), v43);
        float64x2_t v75 = (float64x2_t)v44;
        double v45 = 1.0;
        if (*(double *)&v44.i64[1] > 0.00000011920929)
        {
          double v45 = 0.0;
          if (*(double *)v44.i64 > 0.00000011920929)
          {
            double v46 = *(double *)&v44.i64[1] / *(double *)v44.i64 * -3.0 + 1.0;
            if (v46 >= 0.0)
            {
              double v45 = 1.0;
              if (v46 <= 1.0) {
                double v45 = v46;
              }
            }
          }
        }
        double v47 = v45 * *(v42 - 6);
        double v48 = 1.0 - v45;
        *(v42 - 3) = v47 + (1.0 - v45) * *(v42 - 3);
        double v49 = v45 * v42[3];
        *uint64_t v42 = v49 + v48 * *v42;
        if (v18 + v41 != v17) {
          v42[6] = v49 + v48 * v42[6];
        }
        if (v41) {
          *(v42 - 9) = v47 + v48 * *(v42 - 9);
        }
        v41 += 24;
        v42 += 9;
      }
      while (v18 + v41 != v16);
      uint64_t v50 = 0;
      uint64_t v51 = (double *)(*v7 + 56);
      do
      {
        unint64_t v52 = v18 + v50;
        float64x2_t v53 = *(float64x2_t *)(v18 + v50 + 32);
        int8x16_t v54 = (int8x16_t)vsubq_f64(v53, *(float64x2_t *)(v18 + v50 + 8));
        int8x16_t v55 = vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v54), (int8x16_t)vnegq_f64((float64x2_t)v54), v54);
        float64x2_t v75 = (float64x2_t)v55;
        double v56 = 1.0;
        if (*(double *)v55.i64 > 0.00000011920929)
        {
          double v56 = 0.0;
          if (*(double *)&v55.i64[1] > 0.00000011920929) {
            double v56 = *(double *)v55.i64 / *(double *)&v55.i64[1] * -3.0 + 1.0;
          }
        }
        double v57 = v56 * 0.25;
        if (v56 * 0.25 <= 1.0) {
          double v58 = v56 * 0.25;
        }
        else {
          double v58 = 1.0;
        }
        if (v57 >= 0.0) {
          double v59 = v58;
        }
        else {
          double v59 = 0.0;
        }
        double v60 = *(v51 - 6) * v59;
        double v61 = 1.0 - v59;
        *(v51 - 3) = v60 + *(v51 - 3) * (1.0 - v59);
        double v62 = v59 * v51[3];
        *uint64_t v51 = v62 + (1.0 - v59) * *v51;
        if (v52 < v17) {
          v51[6] = v62 + v61 * v51[6];
        }
        if (v50) {
          *(v51 - 9) = v60 + v61 * *(v51 - 9);
        }
        if (v53.f64[1] < *(double *)(v52 + 16))
        {
          if (v52 < v17)
          {
            double v63 = v51[4];
            double v64 = v51[1];
            double v65 = v63 - v64;
            if (v63 - v64 < 0.0) {
              double v65 = -(v63 - v64);
            }
            v51[1] = v61 * v64 + v59 * (v63 + v65);
            double v66 = v51[7];
            double v67 = v63 - v66;
            if (v63 - v66 > 0.0) {
              double v67 = -(v63 - v66);
            }
            v51[7] = v61 * v66 + v59 * (v63 + v67);
          }
          if (v50)
          {
            double v68 = *(v51 - 5);
            double v69 = *(v51 - 8);
            double v70 = v68 - v69;
            if (v68 - v69 < 0.0) {
              double v70 = -(v68 - v69);
            }
            *(v51 - 8) = v61 * v69 + v59 * (v68 + v70);
            double v71 = *(v51 - 2);
            double v72 = v68 - v71;
            if (v68 - v71 > 0.0) {
              double v72 = -(v68 - v71);
            }
            *(v51 - 2) = v61 * v71 + v59 * (v68 + v72);
          }
        }
        v50 += 24;
        v51 += 9;
      }
      while (v18 + v50 != v16);
    }
  }
  return result;
}

void sub_1B752CEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  void *v8 = v9;
  _OWORD v8[4] = v10;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *cc::curve::aspline::color_t<double>::insertPointIsolation(uint64_t *result, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v6 = result;
  double v7 = 1.0;
  if (a3 <= 1.0) {
    double v7 = a3;
  }
  if (a3 < 0.0) {
    double v7 = 0.0;
  }
  v81[0] = v7;
  uint64_t v8 = result[1];
  uint64_t v9 = result[2];
  uint64_t v10 = result + 1;
  if (v8 == v9)
  {
LABEL_12:
    double v15 = (*(double (**)(uint64_t *, double *))(*result + 24))(result, v81);
    float v85 = &unk_1F108BF48;
    v86.f64[0] = v81[0];
    v86.f64[1] = v15;
    uint64_t result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](a2, (uint64_t)&v85);
  }
  else
  {
    double v11 = v7 - a5;
    double v12 = v7 + a5;
    while (1)
    {
      double v13 = *(double *)(v8 + 8);
      if (v13 > v11 && v13 < v12) {
        break;
      }
      v8 += 24;
      if (v8 == v9) {
        goto LABEL_12;
      }
    }
  }
  for (unint64_t i = *a2; i != a2[1]; i += 24)
  {
    unint64_t v17 = (void *)v6[1];
    uint64_t v18 = (void *)v6[2];
    if (v17 == v18)
    {
LABEL_19:
      uint64_t result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v10, i);
    }
    else
    {
      uint64_t v19 = v6[1];
      while (*(double *)(v19 + 8) < *(double *)(i + 8))
      {
        v19 += 24;
        v17 += 3;
        if ((void *)v19 == v18) {
          goto LABEL_19;
        }
      }
      uint64_t result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::insert(v10, v17, i);
    }
  }
  uint64_t v20 = v6[1];
  uint64_t v21 = v6[2];
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3);
  if (v22 <= 1) {
    return std::vector<cc::point_t<double,false,false>>::resize(v6 + 9, 4uLL);
  }
  if (v22 <= 0x5555555555555554)
  {
    uint64_t v23 = v21 - 24;
    if (v21 - 24 == v20) {
      unint64_t v24 = v21 - 24;
    }
    else {
      unint64_t v24 = v21 - 48;
    }
    double v25 = v6 + 9;
    float64x2_t v86 = 0uLL;
    float v85 = &unk_1F108BF48;
    uint64_t result = std::vector<cc::point_t<double,false,false>>::resize(v6 + 9, ((v21 - v20) >> 3) - 2);
    uint64_t v26 = v6[1];
    if (v26 != v23)
    {
      uint64_t v27 = 0;
      uint64_t v28 = *v25;
      unint64_t v29 = v6[1];
      while (1)
      {
        float v83 = &unk_1F108BF48;
        float64x2_t v84 = *(float64x2_t *)(v29 + 32);
        int8x16_t v30 = (int8x16_t)vsubq_f64(v84, *(float64x2_t *)(v29 + 8));
        float64x2_t v31 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v30), (int8x16_t)vnegq_f64((float64x2_t)v30), v30);
        float64x2_t v86 = v31;
        if (v31.f64[0] < 0.0) {
          v31.f64[0] = -v31.f64[0];
        }
        v31.f64[0] = v31.f64[0] * 0.3334;
        uint64_t v32 = v28 + v27;
        *(_OWORD *)(v28 + v27 + 8) = *(_OWORD *)(v29 + 8);
        if (!v27) {
          break;
        }
        double v33 = v84.f64[0] - *(double *)(v29 - 16);
        double v34 = -v33;
        if (v33 >= 0.0) {
          double v34 = v84.f64[0] - *(double *)(v29 - 16);
        }
        double v35 = (v84.f64[1] - *(double *)(v29 - 8)) / v33;
        if (v34 < 0.00000011920929) {
          double v35 = 0.0;
        }
        v86.f64[1] = v35;
        v86.f64[0] = 1.0;
        float64_t v36 = v31.f64[0] * v35 + *(double *)(v29 + 16);
        *(double *)(v32 + 32) = v31.f64[0] + *(double *)(v29 + 8);
        *(float64_t *)(v32 + 4pthread_cond_init((pthread_cond_t *)this, 0) = v36;
        if (v29 < v24) {
          goto LABEL_40;
        }
        float64x2_t v37 = v84;
        float64x2_t v82 = v84;
        float64x2_t v38 = *(float64x2_t *)(v32 + 32);
LABEL_43:
        float64x2_t v39 = vsubq_f64(v37, v38);
        double v40 = -v39.f64[0];
        if (v39.f64[0] >= 0.0) {
          double v40 = v39.f64[0];
        }
        *(void *)&double v41 = *(_OWORD *)&vdivq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1), v39);
        if (v40 < 0.00000011920929) {
          double v41 = 0.0;
        }
        v86.f64[1] = v41;
        v86.f64[0] = 1.0;
        double v42 = v84.f64[1] - v31.f64[0] * v41;
        int8x16_t v43 = (float64x2_t *)(v28 + v27);
        v43[3].f64[1] = v84.f64[0] - v31.f64[0];
        v43[4].f64[0] = v42;
        if (!v27)
        {
          double v44 = v43[3].f64[1] - *(double *)(v29 + 8);
          double v45 = v42 - *(double *)(v29 + 16);
          double v46 = -v44;
          if (v44 >= 0.0) {
            double v46 = v43[3].f64[1] - *(double *)(v29 + 8);
          }
          double v47 = v45 / v44;
          if (v46 < 0.00000011920929) {
            double v47 = 0.0;
          }
          v86.f64[1] = v47;
          v86.f64[0] = 1.0;
          v82.f64[0] = v31.f64[0];
          v82.f64[1] = v31.f64[0] * v47;
          v31.f64[1] = v31.f64[0] * v47;
          float64x2_t v43[2] = vaddq_f64(v31, *(float64x2_t *)(v32 + 8));
        }
        v29 += 24;
        v27 += 72;
        if (v29 == v23) {
          goto LABEL_54;
        }
      }
      if (v29 >= v24) {
        float64x2_t v37 = v84;
      }
      else {
LABEL_40:
      }
        float64x2_t v37 = *(float64x2_t *)(v29 + 56);
      float64x2_t v38 = *(float64x2_t *)(v29 + 8);
      goto LABEL_43;
    }
LABEL_54:
    *(_OWORD *)(v6[10] - 16) = *(_OWORD *)(v21 - 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v6[2] - v26) >> 3) >= 3 && v26 != v23)
    {
      uint64_t v49 = 0;
      uint64_t v50 = (double *)(*v25 + 64);
      do
      {
        int8x16_t v51 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v26 + v49 + 32), *(float64x2_t *)(v26 + v49 + 8));
        int8x16_t v52 = vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v51), (int8x16_t)vnegq_f64((float64x2_t)v51), v51);
        float64x2_t v86 = (float64x2_t)v52;
        double v53 = 1.0;
        if (*(double *)&v52.i64[1] > 0.00000011920929)
        {
          double v53 = 0.0;
          if (*(double *)v52.i64 > 0.00000011920929)
          {
            double v54 = *(double *)&v52.i64[1] / *(double *)v52.i64 * -3.0 + 1.0;
            if (v54 >= 0.0)
            {
              double v53 = 1.0;
              if (v54 <= 1.0) {
                double v53 = v54;
              }
            }
          }
        }
        double v55 = v53 * *(v50 - 6);
        double v56 = 1.0 - v53;
        *(v50 - 3) = v55 + (1.0 - v53) * *(v50 - 3);
        double v57 = v53 * v50[3];
        double *v50 = v57 + v56 * *v50;
        if (v26 + v49 != v24) {
          v50[6] = v57 + v56 * v50[6];
        }
        if (v49) {
          *(v50 - 9) = v55 + v56 * *(v50 - 9);
        }
        v49 += 24;
        v50 += 9;
      }
      while (v26 + v49 != v23);
      uint64_t v58 = 0;
      double v59 = (double *)(*v25 + 56);
      do
      {
        unint64_t v60 = v26 + v58;
        float64x2_t v61 = *(float64x2_t *)(v26 + v58 + 32);
        int8x16_t v62 = (int8x16_t)vsubq_f64(v61, *(float64x2_t *)(v26 + v58 + 8));
        int8x16_t v63 = vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v62), (int8x16_t)vnegq_f64((float64x2_t)v62), v62);
        float64x2_t v86 = (float64x2_t)v63;
        double v64 = 1.0;
        if (*(double *)v63.i64 > 0.00000011920929)
        {
          double v64 = 0.0;
          if (*(double *)&v63.i64[1] > 0.00000011920929) {
            double v64 = *(double *)v63.i64 / *(double *)&v63.i64[1] * -3.0 + 1.0;
          }
        }
        double v65 = v64 * 0.25;
        if (v64 * 0.25 <= 1.0) {
          double v66 = v64 * 0.25;
        }
        else {
          double v66 = 1.0;
        }
        if (v65 >= 0.0) {
          double v67 = v66;
        }
        else {
          double v67 = 0.0;
        }
        double v68 = *(v59 - 6) * v67;
        double v69 = 1.0 - v67;
        *(v59 - 3) = v68 + *(v59 - 3) * (1.0 - v67);
        double v70 = v67 * v59[3];
        *double v59 = v70 + (1.0 - v67) * *v59;
        if (v60 < v24) {
          v59[6] = v70 + v69 * v59[6];
        }
        if (v58) {
          *(v59 - 9) = v68 + v69 * *(v59 - 9);
        }
        if (v61.f64[1] < *(double *)(v60 + 16))
        {
          if (v60 < v24)
          {
            double v71 = v59[4];
            double v72 = v59[1];
            double v73 = v71 - v72;
            if (v71 - v72 < 0.0) {
              double v73 = -(v71 - v72);
            }
            v59[1] = v69 * v72 + v67 * (v71 + v73);
            double v74 = v59[7];
            double v75 = v71 - v74;
            if (v71 - v74 > 0.0) {
              double v75 = -(v71 - v74);
            }
            v59[7] = v69 * v74 + v67 * (v71 + v75);
          }
          if (v58)
          {
            double v76 = *(v59 - 5);
            double v77 = *(v59 - 8);
            double v78 = v76 - v77;
            if (v76 - v77 < 0.0) {
              double v78 = -(v76 - v77);
            }
            *(v59 - 8) = v69 * v77 + v67 * (v76 + v78);
            double v79 = *(v59 - 2);
            double v80 = v76 - v79;
            if (v76 - v79 > 0.0) {
              double v80 = -(v76 - v79);
            }
            *(v59 - 2) = v69 * v79 + v67 * (v76 + v80);
          }
        }
        v58 += 24;
        v59 += 9;
      }
      while (v26 + v58 != v23);
    }
  }
  return result;
}

uint64_t cc::curve::aspline::color_t<double>::evaluate(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *))(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = (void *)(a1 + (v2 >> 1) + 64);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

BOOL cc::curve::aspline::color_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  if (a3)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a1 + 96;
    unint64_t v12 = (unint64_t)&a2[a3];
    float v13 = a7 - a6;
    double v14 = v13;
    double v15 = a6;
    double v16 = (float)(1.0 / v13);
    double v17 = (float)((float)-a6 / v13);
    double v18 = 0.0;
    double v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      double v27 = 0.0;
      double v26 = v18 * v14 + v15;
      double v20 = (*(double (**)(uint64_t, double *))(*(void *)v11 + 16))(v11, &v26);
      double v27 = v20;
      if (a5)
      {
        a5(&v27);
        double v20 = v27;
      }
      double v21 = v20 * v16 + v17;
      double v22 = v21 * 65535.0;
      if (v21 > 1.0) {
        double v22 = 65535.0;
      }
      BOOL v23 = v21 < 0.0;
      double v24 = 0.0;
      if (!v23) {
        double v24 = v22;
      }
      *v10++ = (int)v24;
      double v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4) {
      *uint64_t v10 = *(v10 - 1);
    }
  }
  return a3 != 0;
}

uint64_t cc::curve::aspline::color_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(void *)(a2 + 16)) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      memmove(0, *(const void **)(a2 + 8), 0);
      *(void *)(a2 + 24) = 1024;
      MEMORY[0x1BA9BFB70](v7, 0x1000C80BDFB0063);
    }
    else
    {
      *(void *)(a2 + 24) = 1024;
    }
    operator new[]();
  }
  *(void *)(a2 + 16) = 1024;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a1 + 96)
                                                                                             + 24);
  uint64_t v10 = a1 + 96;

  return v9(v10, v8, 1024, a3, a4, a5, a6);
}

void non-virtual thunk to'cc::curve::aspline::color_t<double>::~color_t(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F1093990;
  *(void *)a1 = &unk_1F10939D0;
  uint64_t v2 = (void **)(a1 + 40);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t non-virtual thunk to'cc::curve::aspline::color_t<double>::~color_t(uint64_t a1)
{
  uint64_t v2 = a1 - 32;
  *(void *)(a1 - 32) = &unk_1F1093990;
  *(void *)a1 = &unk_1F10939D0;
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1BA9BFBA0](v2, 0x10A1C40D66B6438);
}

uint64_t non-virtual thunk to'cc::curve::aspline::color_t<double>::evaluate(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *))(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = (void *)(a1 + (v2 >> 1) + 32);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

BOOL non-virtual thunk to'cc::curve::aspline::color_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  if (a3)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a1 + 64;
    unint64_t v12 = (unint64_t)&a2[a3];
    float v13 = a7 - a6;
    double v14 = v13;
    double v15 = a6;
    double v16 = (float)(1.0 / v13);
    double v17 = (float)((float)-a6 / v13);
    double v18 = 0.0;
    double v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      double v27 = 0.0;
      double v26 = v18 * v14 + v15;
      double v20 = (*(double (**)(uint64_t, double *))(*(void *)v11 + 16))(v11, &v26);
      double v27 = v20;
      if (a5)
      {
        a5(&v27);
        double v20 = v27;
      }
      double v21 = v20 * v16 + v17;
      double v22 = v21 * 65535.0;
      if (v21 > 1.0) {
        double v22 = 65535.0;
      }
      BOOL v23 = v21 < 0.0;
      double v24 = 0.0;
      if (!v23) {
        double v24 = v22;
      }
      *v10++ = (int)v24;
      double v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4) {
      *uint64_t v10 = *(v10 - 1);
    }
  }
  return a3 != 0;
}

uint64_t non-virtual thunk to'cc::curve::aspline::color_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(void *)(a2 + 16)) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      memmove(0, *(const void **)(a2 + 8), 0);
      *(void *)(a2 + 24) = 1024;
      MEMORY[0x1BA9BFB70](v7, 0x1000C80BDFB0063);
    }
    else
    {
      *(void *)(a2 + 24) = 1024;
    }
    operator new[]();
  }
  *(void *)(a2 + 16) = 1024;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a1 + 64)
                                                                                             + 24);
  uint64_t v10 = a1 + 64;

  return v9(v10, v8, 1024, a3, a4, a5, a6);
}

double cc::curve::aspline::bezier_t<double,false>::evalNonPeriodic(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)v2) >> 3) <= 3) {
    return *(double *)a2;
  }
  double v5 = v2[1];
  double result = *(double *)a2;
  if (*(double *)a2 < v5)
  {
    double v6 = v2[2];
    double v7 = v2[4] - v5;
    if (v7 != 0.0)
    {
      double v8 = v2[5] - v6;
LABEL_9:
      double v9 = v8 / v7;
      return v6 + (result - v5) * v9;
    }
    goto LABEL_10;
  }
  double v5 = *(double *)(v3 - 16);
  if (result > v5)
  {
    double v6 = *(double *)(v3 - 8);
    double v7 = v5 - *(double *)(v3 - 40);
    if (v7 != 0.0)
    {
      double v8 = v6 - *(double *)(v3 - 32);
      goto LABEL_9;
    }
LABEL_10:
    double v9 = 0.0;
    return v6 + (result - v5) * v9;
  }
  uint64_t v10 = (double *)(v3 - 24);
  while (v2 != v10)
  {
    double v11 = v2[1];
    if (result >= v11)
    {
      double v12 = v2[10];
      if (result <= v12)
      {
        double v13 = v2[4];
        double v14 = v2[7] * 3.0;
        double v15 = v12 + v13 * 3.0 - v11 - v14;
        double v16 = v11 * 3.0 + v13 * -6.0 + v14;
        double v17 = v13 * 3.0 - v11 * 3.0;
        double v18 = 0.0;
        while (1)
        {
          double v19 = v18 * (v18 * v18);
          double v20 = v11 + v18 * v17 + v18 * v18 * v16 + v19 * v15;
          if (v20 >= result) {
            break;
          }
          double v18 = v18 + 0.05;
          if (v18 >= 1.05) {
            return result;
          }
        }
        double v21 = v18 + -0.05;
        double v22 = v21 * (v21 * v21);
        double v23 = v11 + (v18 + -0.05) * v17 + v21 * v21 * v16 + v22 * v15;
        double v24 = v2[2];
        double v25 = v2[5];
        double v26 = v2[8] * 3.0;
        double v27 = v2[11] + v25 * 3.0 - v24 - v26;
        double v28 = v24 * 3.0 + v25 * -6.0 + v26;
        double v29 = v25 * 3.0 - v24 * 3.0;
        double v30 = v24 + (v18 + -0.05) * v29 + v21 * v21 * v28 + v22 * v27;
        double v31 = v24 + v18 * v29 + v18 * v18 * v28 + v19 * v27;
        double v32 = v20 - v23;
        if (v20 - v23 >= 0.0) {
          double v33 = v20 - v23;
        }
        else {
          double v33 = -(v20 - v23);
        }
        double v34 = 0.0;
        if (v33 >= 0.00000011920929) {
          double v34 = (result - v23) / v32;
        }
        return v31 * v34 + v30 * (1.0 - v34);
      }
    }
    v2 += 9;
  }
  return result;
}

uint64_t cc::curve::aspline::bezier_t<double,false>::~bezier_t(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1BA9BFBA0](a1, 0xA1C40D2948F72);
}

uint64_t cc::curve::aspline::bezier_t<double,false>::evaluate(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *))(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)(a1 + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void non-virtual thunk to'cc::curve::aspline::bezier_t<double,false>::~bezier_t(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t non-virtual thunk to'cc::curve::aspline::bezier_t<double,false>::~bezier_t(uint64_t a1)
{
  uint64_t v1 = a1 - 32;
  uint64_t v3 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1BA9BFBA0](v1, 0xA1C40D2948F72);
}

uint64_t non-virtual thunk to'cc::curve::aspline::bezier_t<double,false>::evaluate(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *))(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)(a1 + (v2 >> 1) - 32);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void HFixDV::HFixDV(HFixDV *this, float a2, float a3)
{
  HGNode::HGNode((HGNode *)this);
  uint64_t v6 = 0;
  *(void *)uint64_t v5 = &unk_1F1093AD8;
  *(void *)(v5 + 408) = 0x4040000040000000;
  *(_WORD *)(v5 + 416) = 257;
  *(void *)(v5 + 424) = 0;
  *(float *)(v5 + 432) = a2;
  *(float *)(v5 + 436) = a3;
  uint64_t v7 = v5 + 448;
  do
  {
    int v8 = 0;
    long long v9 = *(_OWORD *)(v7 + 16 * v6);
    long long v10 = HGColorMatrix::sRGBtoYCbCr[v6];
    do
    {
      long long v20 = v10;
      int v11 = *(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3)));
      long long v21 = v9;
      *(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) = v11;
      long long v9 = v21;
      ++v8;
    }
    while (v8 != 4);
    *(_OWORD *)(v7 + 16 * v6++) = v21;
  }
  while (v6 != 4);
  uint64_t v12 = 0;
  uint64_t v13 = v5 + 512;
  do
  {
    int v14 = 0;
    long long v15 = *(_OWORD *)(v13 + 16 * v12);
    long long v16 = HGColorMatrix::YCbCrTosRGB[v12];
    do
    {
      long long v18 = v16;
      int v17 = *(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      long long v19 = v15;
      *(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) = v17;
      long long v15 = v19;
      ++v14;
    }
    while (v14 != 4);
    *(_OWORD *)(v13 + 16 * v12++) = v19;
  }
  while (v12 != 4);
}

HgcGamma *HFixDV::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t v4 = Input;
  if (Input)
  {
    (*(void (**)(HGNode *))(*(void *)Input + 16))(Input);
    uint64_t v5 = (HgcGamma **)((char *)this + 424);
    uint64_t v6 = (HGNode *)*((void *)this + 53);
    if (v6 == v4)
    {
      (*(void (**)(HGNode *))(*(void *)v4 + 24))(v4);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v5 = (HgcGamma **)((char *)this + 424);
    uint64_t v6 = (HGNode *)*((void *)this + 53);
    if (!v6) {
      goto LABEL_8;
    }
  }
  if (v6) {
    (*(void (**)(HGNode *))(*(void *)v6 + 24))(v6);
  }
  *uint64_t v5 = (HgcGamma *)v4;
LABEL_8:
  if (*((float *)this + 102) != 1.0)
  {
    uint64_t v7 = (HgcGamma *)HGObject::operator new(0x1A0uLL);
    HgcGamma::HgcGamma(v7);
    (*(void (**)(HgcGamma *, void, float, float, float, float))(*(void *)v7 + 96))(v7, 0, *((float *)this + 102), *((float *)this + 102), *((float *)this + 102), 1.0);
    (*(void (**)(HgcGamma *, void, HgcGamma *))(*(void *)v7 + 120))(v7, 0, *v5);
    int v8 = *v5;
    if (*v5 != v7)
    {
      if (v8) {
        (*(void (**)(HgcGamma *))(*(void *)v8 + 24))(v8);
      }
      *uint64_t v5 = v7;
      (*(void (**)(HgcGamma *))(*(void *)v7 + 16))(v7);
    }
    (*(void (**)(HgcGamma *))(*(void *)v7 + 24))(v7);
  }
  if (*((unsigned char *)this + 416))
  {
    long long v9 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
    HGColorMatrix::HGColorMatrix(v9);
  }
  float v10 = *((float *)this + 103);
  if (v10 != 0.0)
  {
    float v11 = *((float *)this + 108);
    float v12 = *((float *)this + 109);
    uint64_t v13 = (HGBlur *)HGObject::operator new(0x220uLL);
    HGBlur::HGBlur(v13);
    (*(void (**)(HGBlur *, void, float, float, double, double))(*(void *)v13 + 96))(v13, 0, v10 * v11, v10 * v12, 0.0, 0.0);
    (*(void (**)(HGBlur *, void, HgcGamma *))(*(void *)v13 + 120))(v13, 0, *v5);
    int v14 = (HgcChannelBlur *)HGObject::operator new(0x1A0uLL);
    HgcChannelBlur::HgcChannelBlur(v14);
    (*(void (**)(HgcChannelBlur *, void, HgcGamma *))(*(void *)v14 + 120))(v14, 0, *v5);
    (*(void (**)(HgcChannelBlur *, uint64_t, HGBlur *))(*(void *)v14 + 120))(v14, 1, v13);
    (*(void (**)(HgcChannelBlur *, void, double, float, float, double))(*(void *)v14 + 96))(v14, 0, 0.0, 1.0, 1.0, 0.0);
    long long v15 = *v5;
    if (*v5 != v14)
    {
      if (v15) {
        (*(void (**)(HgcGamma *))(*(void *)v15 + 24))(v15);
      }
      *uint64_t v5 = v14;
      (*(void (**)(HgcChannelBlur *))(*(void *)v14 + 16))(v14);
    }
    (*(void (**)(HgcChannelBlur *))(*(void *)v14 + 24))(v14);
    (*(void (**)(HGBlur *))(*(void *)v13 + 24))(v13);
  }
  if (*((unsigned char *)this + 417))
  {
    long long v16 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
    HGColorMatrix::HGColorMatrix(v16);
  }
  if (*((float *)this + 102) != 1.0)
  {
    int v17 = (HgcGamma *)HGObject::operator new(0x1A0uLL);
    HgcGamma::HgcGamma(v17);
    (*(void (**)(HgcGamma *, void, float, float, float, float))(*(void *)v17 + 96))(v17, 0, 1.0 / *((float *)this + 102), 1.0 / *((float *)this + 102), 1.0 / *((float *)this + 102), 1.0);
    (*(void (**)(HgcGamma *, void, HgcGamma *))(*(void *)v17 + 120))(v17, 0, *v5);
    long long v18 = *v5;
    if (*v5 != v17)
    {
      if (v18) {
        (*(void (**)(HgcGamma *))(*(void *)v18 + 24))(v18);
      }
      *uint64_t v5 = v17;
      (*(void (**)(HgcGamma *))(*(void *)v17 + 16))(v17);
    }
    (*(void (**)(HgcGamma *))(*(void *)v17 + 24))(v17);
  }
  return *v5;
}

void sub_1B752E960(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HFixDV::setRGBToYCbCrMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = result + 448;
  do
  {
    int v4 = 0;
    long long v5 = *(_OWORD *)(v3 + 16 * v2);
    do
    {
      int v6 = *(_DWORD *)(a2 + 16 * v2 + 4 * (v4 & 3));
      long long v7 = v5;
      *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3))) = v6;
      long long v5 = v7;
      *(_OWORD *)(v3 + 16 * v2) = v7;
      ++v4;
    }
    while (v4 != 4);
    ++v2;
  }
  while (v2 != 4);
  return result;
}

uint64_t HFixDV::setYCbCrToRGBMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = result + 512;
  do
  {
    int v4 = 0;
    long long v5 = *(_OWORD *)(v3 + 16 * v2);
    do
    {
      int v6 = *(_DWORD *)(a2 + 16 * v2 + 4 * (v4 & 3));
      long long v7 = v5;
      *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3))) = v6;
      long long v5 = v7;
      *(_OWORD *)(v3 + 16 * v2) = v7;
      ++v4;
    }
    while (v4 != 4);
    ++v2;
  }
  while (v2 != 4);
  return result;
}

void HFixDV::~HFixDV(HGNode *this)
{
  HFixDV::~HFixDV(this);

  HGObject::operator delete(v1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1093AD8;
  uint64_t v2 = *((void *)this + 53);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  HGNode::~HGNode(this);
}

uint64_t desiredRGBToYCbCrMatrix(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "apiForProtocol:", &unk_1F12189D0), "colorMatrixFromDesiredRGBToYCbCrAtTime:", a3), "matrix");
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v6 = 0;
    long long v7 = *(_OWORD *)(a2 + 16 * i);
    int v8 = (double *)result;
    do
    {
      double v9 = *v8;
      v8 += 4;
      float v10 = v9;
      long long v11 = v7;
      *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3))) = v10;
      long long v7 = v11;
      *(_OWORD *)(a2 + 16 * i) = v11;
      ++v6;
    }
    while (v6 != 4);
    result += 8;
  }
  return result;
}

uint64_t desiredYCbCrToRGBMatrix(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "apiForProtocol:", &unk_1F12189D0), "colorMatrixFromYCbCrToDesiredRGBAtTime:", a3), "matrix");
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v6 = 0;
    long long v7 = *(_OWORD *)(a2 + 16 * i);
    int v8 = (double *)result;
    do
    {
      double v9 = *v8;
      v8 += 4;
      float v10 = v9;
      long long v11 = v7;
      *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3))) = v10;
      long long v7 = v11;
      *(_OWORD *)(a2 + 16 * i) = v11;
      ++v6;
    }
    while (v6 != 4);
    result += 8;
  }
  return result;
}

uint64_t OMHisto::calculateHistogram(uint64_t a1, int *a2, float *a3, float a4)
{
  uint64_t v8 = [*(id *)(a1 + 120) pixelFormat];
  BOOL v9 = v8 != 0;
  if (v8) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 1;
  }
  if (v8) {
    uint64_t v11 = 3;
  }
  else {
    uint64_t v11 = 2;
  }
  if (v8) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 3;
  }
  uint64_t v13 = [*(id *)(a1 + 120) dataPtr];
  int v14 = [*(id *)(a1 + 120) width];
  int v15 = [*(id *)(a1 + 120) height];
  unint64_t v16 = (unint64_t)[*(id *)(a1 + 120) rowBytes] >> 2;
  float v17 = 1.0 / a4;
  uint64_t result = *(void *)(a1 + 88);
  if (((*(void *)(result + 8) - *(void *)result) & 0x3FFFFFFFCLL) != 0x100000)
  {
    if (v15 < 1) {
      goto LABEL_55;
    }
    int v41 = 0;
    uint64_t v42 = 4 * (int)v16;
    float v21 = 0.0;
    float v22 = 0.0;
    while (v14 < 1)
    {
LABEL_53:
      ++v41;
      v13 += v42;
      if (v41 == v15) {
        goto LABEL_56;
      }
    }
    int v43 = v14;
    uint64_t v44 = 4 * v11;
    uint64_t v45 = 4 * v10;
    uint64_t v46 = 4 * v9;
    uint64_t v47 = 4 * v12;
    while (1)
    {
      float v48 = *(float *)(v13 + v47);
      double v49 = v48;
      if (v48 >= 0.5 || v49 <= 0.1)
      {
        if (v48 <= 0.5 || v49 >= 0.9) {
          goto LABEL_52;
        }
        float v56 = *(float *)(v13 + v44);
        v57.i32[0] = *(_DWORD *)(v13 + v45);
        v57.i32[1] = *(_DWORD *)(v13 + v46);
        int32x2_t v58 = vcvt_n_s32_f32(vmul_n_f32(v57, v17), 5uLL);
        int v59 = vcvts_n_s32_f32(v17 * v56, 5uLL);
        int32x2_t v60 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v58), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v58, (int32x2_t)0x1F0000001FLL), (uint32x2_t)0xA00000005));
        if (v59 >= 31) {
          int v59 = 31;
        }
        signed __int32 v54 = vadd_s32(v60, vdup_lane_s32(v60, 1)).u32[0] | v59 & ~(v59 >> 31);
        if (v56 > v21) {
          float v21 = *(float *)(v13 + v44);
        }
        double v55 = (void *)(a1 + 8);
      }
      else
      {
        v50.i32[0] = *(_DWORD *)(v13 + v45);
        int v51 = vcvts_n_s32_f32(v17 * *(float *)(v13 + v44), 5uLL);
        if (v51 >= 31) {
          int v51 = 31;
        }
        if (v50.f32[0] > v22) {
          float v22 = *(float *)(v13 + v45);
        }
        v50.i32[1] = *(_DWORD *)(v13 + v46);
        int32x2_t v52 = vcvt_n_s32_f32(vmul_n_f32(v50, v17), 5uLL);
        int32x2_t v53 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v52), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v52, (int32x2_t)0x1F0000001FLL), (uint32x2_t)0xA00000005));
        signed __int32 v54 = vadd_s32(v53, vdup_lane_s32(v53, 1)).u32[0] | v51 & ~(v51 >> 31);
        double v55 = (void *)(a1 + 48);
      }
      ++*(_DWORD *)(*v55 + 4 * v54);
LABEL_52:
      v47 += 16;
      v46 += 16;
      v45 += 16;
      v44 += 16;
      if (!--v43) {
        goto LABEL_53;
      }
    }
  }
  if (v15 >= 1)
  {
    int v19 = 0;
    uint64_t v20 = 4 * (int)v16;
    float v21 = 0.0;
    float v22 = 0.0;
    while (v14 < 1)
    {
LABEL_31:
      ++v19;
      v13 += v20;
      if (v19 == v15) {
        goto LABEL_56;
      }
    }
    int v23 = v14;
    uint64_t v24 = 4 * v11;
    uint64_t v25 = 4 * v10;
    uint64_t v26 = 4 * v9;
    uint64_t v27 = 4 * v12;
    while (1)
    {
      float v28 = *(float *)(v13 + v27);
      double v29 = v28;
      if (v28 >= 0.5 || v29 <= 0.1)
      {
        if (v28 <= 0.5 || v29 >= 0.9) {
          goto LABEL_30;
        }
        float v36 = *(float *)(v13 + v24);
        v37.i32[0] = *(_DWORD *)(v13 + v25);
        v37.i32[1] = *(_DWORD *)(v13 + v26);
        int32x2_t v38 = vcvt_n_s32_f32(vmul_n_f32(v37, v17), 6uLL);
        int v39 = vcvts_n_s32_f32(v17 * v36, 6uLL);
        int32x2_t v40 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v38), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v38, (int32x2_t)0x3F0000003FLL), (uint32x2_t)0xC00000006));
        if (v39 >= 63) {
          int v39 = 63;
        }
        signed __int32 v34 = vadd_s32(v40, vdup_lane_s32(v40, 1)).u32[0] | v39 & ~(v39 >> 31);
        if (v36 > v21) {
          float v21 = *(float *)(v13 + v24);
        }
        double v35 = (void *)(a1 + 8);
      }
      else
      {
        v30.i32[0] = *(_DWORD *)(v13 + v25);
        int v31 = vcvts_n_s32_f32(v17 * *(float *)(v13 + v24), 6uLL);
        if (v31 >= 63) {
          int v31 = 63;
        }
        if (v30.f32[0] > v22) {
          float v22 = *(float *)(v13 + v25);
        }
        v30.i32[1] = *(_DWORD *)(v13 + v26);
        int32x2_t v32 = vcvt_n_s32_f32(vmul_n_f32(v30, v17), 6uLL);
        int32x2_t v33 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v32), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v32, (int32x2_t)0x3F0000003FLL), (uint32x2_t)0xC00000006));
        signed __int32 v34 = vadd_s32(v33, vdup_lane_s32(v33, 1)).u32[0] | v31 & ~(v31 >> 31);
        double v35 = (void *)(a1 + 48);
      }
      ++*(_DWORD *)(*v35 + 4 * v34);
LABEL_30:
      v27 += 16;
      v26 += 16;
      v25 += 16;
      v24 += 16;
      if (!--v23) {
        goto LABEL_31;
      }
    }
  }
LABEL_55:
  float v22 = 0.0;
  float v21 = 0.0;
LABEL_56:
  float64x2_t v61 = (void *)(a1 + 8);
  int v62 = *(_DWORD *)(a1 + 36);
  if (v62 == -1)
  {
    uint64_t v63 = *(unsigned int *)(a1 + 32);
    if ((int)v63 < 1)
    {
      int v62 = 0;
      int v65 = 0;
    }
    else
    {
      uint64_t v64 = 0;
      int v65 = 0;
      int v62 = 0;
      do
      {
        if (*(_DWORD *)(*v61 + 4 * v64) > v62)
        {
          int v62 = *(_DWORD *)(*v61 + 4 * v64);
          int v65 = v64;
        }
        ++v64;
      }
      while (v63 != v64);
    }
    *(_DWORD *)(a1 + 36) = v62;
    *(_DWORD *)(a1 + 4pthread_cond_init((pthread_cond_t *)this, 0) = v65;
  }
  double v66 = (void *)(a1 + 48);
  int v67 = *(_DWORD *)(a1 + 76);
  if (v67 == -1)
  {
    uint64_t v68 = *(unsigned int *)(a1 + 72);
    if ((int)v68 < 1)
    {
      int v67 = 0;
      int v70 = 0;
    }
    else
    {
      uint64_t v69 = 0;
      int v70 = 0;
      int v67 = 0;
      do
      {
        if (*(_DWORD *)(*v66 + 4 * v69) > v67)
        {
          int v67 = *(_DWORD *)(*v66 + 4 * v69);
          int v70 = v69;
        }
        ++v69;
      }
      while (v68 != v69);
    }
    *(_DWORD *)(a1 + 76) = v67;
    *(_DWORD *)(a1 + 8pthread_cond_init((pthread_cond_t *)this, 0) = v70;
  }
  if (v62 <= v67)
  {
    if ((void *)result != v66)
    {
      uint64_t v74 = result;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)result, *(char **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
      uint64_t result = v74;
    }
    uint64_t v75 = *(void *)(a1 + 72);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 80);
    *(void *)(result + 24) = v75;
    int v72 = 1;
    float v21 = v22;
  }
  else
  {
    if ((void *)result != v61)
    {
      uint64_t v71 = result;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)result, *(char **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
      uint64_t result = v71;
    }
    int v72 = 0;
    uint64_t v73 = *(void *)(a1 + 32);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 40);
    *(void *)(result + 24) = v73;
  }
  *a2 = v72;
  *a3 = v21;
  return result;
}

void ColorHisto::calculateCenterSamples(ColorHisto *a1, uint64_t a2, float a3)
{
  int v6 = ColorHisto::calculateMaxHistogramIdx(a1);
  int v14 = *((_DWORD *)a1 + 6);
  if (v14 == 0x40000) {
    char v15 = 10;
  }
  else {
    char v15 = 7;
  }
  if (v14 == 0x40000) {
    int v16 = -4;
  }
  else {
    int v16 = -8;
  }
  if (v14 == 0x40000) {
    int v17 = 2;
  }
  else {
    int v17 = 4;
  }
  if (v14 == 0x40000) {
    char v18 = 4;
  }
  else {
    char v18 = 2;
  }
  if (v14 == 0x40000) {
    int v19 = 252;
  }
  else {
    int v19 = 248;
  }
  if (v14 == 0x40000) {
    char v20 = 2;
  }
  else {
    char v20 = 3;
  }
  float v21 = (float)((v6 << v20) & v19 | v17) / 255.0;
  float v22 = (float)(int)((v6 >> v18) & v19 | v17) / 255.0;
  float v23 = (float)((v6 >> v15) & v16 | v17) / 255.0;
  OMColorUtil::getRGBToYCbCrMatrix(1, v7, v8, v9, v10, v11, v12, v13, (Mat4f *)v51);
  float v44 = v23;
  float v45 = v22;
  float v46 = v21;
  int v47 = 1065353216;
  operator*(v51, &v44, (float *)v48);
  proj(v48, (float32x2_t *)&v49, v24);
  if (*((int *)a1 + 6) >= 1)
  {
    uint64_t v25 = 0;
    float v26 = a3 * 0.2;
    float v27 = a3 * 0.04;
    if (v14 == 0x40000) {
      int v28 = 2097148;
    }
    else {
      int v28 = 16777208;
    }
    do
    {
      float v44 = (float)(int)((v25 >> v15) & v28 | v17) / 255.0;
      float v45 = (float)(int)((v25 >> v18) & v19 | v17) / 255.0;
      float v46 = (float)((v25 << v20) & v19 | v17) / 255.0;
      int v47 = 1065353216;
      operator*(v51, &v44, (float *)v48);
      proj(v48, (float32x2_t *)&v42, v29);
      if (*(int *)(*(void *)a1 + 4 * v25) >= 11 && vabds_f32(v42, v49) < v26)
      {
        float32x2_t v30 = vsub_f32(v43, v50);
        if (sqrtf(vaddv_f32(vmul_f32(v30, v30))) < v27)
        {
          int32x2_t v32 = *(_DWORD **)(a2 + 8);
          unint64_t v31 = *(void *)(a2 + 16);
          if ((unint64_t)v32 >= v31)
          {
            signed __int32 v34 = *(_DWORD **)a2;
            uint64_t v35 = ((uint64_t)v32 - *(void *)a2) >> 2;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v37 = v31 - (void)v34;
            if (v37 >> 1 > v36) {
              unint64_t v36 = v37 >> 1;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              int v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2 + 16, v38);
              signed __int32 v34 = *(_DWORD **)a2;
              int32x2_t v32 = *(_DWORD **)(a2 + 8);
            }
            else
            {
              int v39 = 0;
            }
            int32x2_t v40 = &v39[4 * v35];
            *(_DWORD *)int32x2_t v40 = v25;
            int32x2_t v33 = v40 + 4;
            while (v32 != v34)
            {
              int v41 = *--v32;
              *((_DWORD *)v40 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v41;
              v40 -= 4;
            }
            *(void *)a2 = v40;
            *(void *)(a2 + 8) = v33;
            *(void *)(a2 + 16) = &v39[4 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            _DWORD *v32 = v25;
            int32x2_t v33 = v32 + 1;
          }
          *(void *)(a2 + 8) = v33;
        }
      }
      ++v25;
    }
    while (v25 < *((int *)a1 + 6));
  }
}

uint64_t ColorHisto::calculateMaxHistogramIdx(ColorHisto *this)
{
  if (*((_DWORD *)this + 7) != -1) {
    return *((unsigned int *)this + 8);
  }
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 < 1)
  {
    int v4 = 0;
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    LODWORD(vHGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
    int v4 = 0;
    do
    {
      if (*(_DWORD *)(*(void *)this + 4 * v3) <= v4)
      {
        uint64_t v1 = v1;
      }
      else
      {
        int v4 = *(_DWORD *)(*(void *)this + 4 * v3);
        uint64_t v1 = v3;
      }
      ++v3;
    }
    while (v2 != v3);
  }
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

void ColorHisto::calculateCenterSamplesHDR(ColorHisto *a1, uint64_t a2, float a3)
{
  int v6 = ColorHisto::calculateMaxHistogramIdx(a1);
  int v14 = *((_DWORD *)a1 + 6);
  if (v14 == 0x40000) {
    char v15 = 10;
  }
  else {
    char v15 = 7;
  }
  if (v14 == 0x40000) {
    int v16 = -4;
  }
  else {
    int v16 = -8;
  }
  if (v14 == 0x40000) {
    int v17 = 2;
  }
  else {
    int v17 = 4;
  }
  if (v14 == 0x40000) {
    char v18 = 4;
  }
  else {
    char v18 = 2;
  }
  if (v14 == 0x40000) {
    int v19 = 252;
  }
  else {
    int v19 = 248;
  }
  if (v14 == 0x40000) {
    char v20 = 2;
  }
  else {
    char v20 = 3;
  }
  float v21 = (float)((v6 << v20) & v19 | v17) / 255.0;
  float v22 = (float)(int)((v6 >> v18) & v19 | v17) / 255.0;
  float v23 = (float)((v6 >> v15) & v16 | v17) / 255.0;
  OMColorUtil::getRGBToYCbCrMatrix(1, v7, v8, v9, v10, v11, v12, v13, (Mat4f *)v59);
  float v52 = v23;
  float v53 = v22;
  float v54 = v21;
  int v55 = 1065353216;
  operator*(v59, &v52, (float *)v56);
  proj(v56, &v57, v24);
  float v25 = sqrtf((float)(v57.f32[1] * v57.f32[1]) + (float)(v58 * v58));
  if (a3 <= 0.9)
  {
    float v27 = 0.08;
    float v28 = a3 * 0.08;
  }
  else
  {
    float v26 = (float)(a3 + -0.9) * 3.0;
    if (v26 <= 1.0) {
      float v27 = (float)(v26 * -0.06) + 0.08;
    }
    else {
      float v27 = 0.02;
    }
    float v28 = (float)((float)((float)((float)(v25 - v27) + -0.072) / 0.9) * a3)
        + (float)((float)((float)((float)((float)(v25 - v27) + -0.072) / 0.9) * -0.9) + 0.072);
  }
  if (*((int *)a1 + 6) >= 1)
  {
    uint64_t v29 = 0;
    uint64_t v49 = a2 + 16;
    if (v14 == 0x40000) {
      int v30 = 2097148;
    }
    else {
      int v30 = 16777208;
    }
    while (1)
    {
      float v52 = (float)(int)((v29 >> v15) & v30 | v17) / 255.0;
      float v53 = (float)(int)((v29 >> v18) & v19 | v17) / 255.0;
      float v54 = (float)((v29 << v20) & v19 | v17) / 255.0;
      int v55 = 1065353216;
      operator*(v59, &v52, (float *)v56);
      proj(v56, &v50, v31);
      if (*(int *)(*(void *)a1 + 4 * v29) >= 11) {
        break;
      }
LABEL_63:
      if (++v29 >= *((int *)a1 + 6)) {
        return;
      }
    }
    float v32 = sqrtf((float)(v50.f32[1] * v50.f32[1]) + (float)(v51 * v51));
    if (v32 >= v25)
    {
      signed __int32 v34 = *(_DWORD **)(a2 + 8);
      unint64_t v41 = *(void *)(a2 + 16);
      if ((unint64_t)v34 >= v41)
      {
        uint64_t v35 = *(_DWORD **)a2;
        uint64_t v43 = ((uint64_t)v34 - *(void *)a2) >> 2;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62) {
LABEL_65:
        }
          std::vector<double>::__throw_length_error[abi:ne180100]();
        uint64_t v45 = v41 - (void)v35;
        if (v45 >> 1 > v44) {
          unint64_t v44 = v45 >> 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v44;
        }
        if (v39)
        {
          int32x2_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v49, v39);
          uint64_t v35 = *(_DWORD **)a2;
          signed __int32 v34 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          int32x2_t v40 = 0;
        }
        float v46 = &v40[4 * v43];
        *(_DWORD *)float v46 = v29;
        float v42 = v46 + 4;
        while (v34 != v35)
        {
          int v47 = *--v34;
          *((_DWORD *)v46 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v47;
          v46 -= 4;
        }
        goto LABEL_60;
      }
    }
    else
    {
      if (v32 <= v27
        || sqrtf((float)((float)(v50.f32[1] - v57.f32[1]) * (float)(v50.f32[1] - v57.f32[1]))+ (float)((float)(v51 - v58) * (float)(v51 - v58))) >= v28)
      {
        goto LABEL_63;
      }
      signed __int32 v34 = *(_DWORD **)(a2 + 8);
      unint64_t v33 = *(void *)(a2 + 16);
      if ((unint64_t)v34 >= v33)
      {
        uint64_t v35 = *(_DWORD **)a2;
        uint64_t v36 = ((uint64_t)v34 - *(void *)a2) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          goto LABEL_65;
        }
        uint64_t v38 = v33 - (void)v35;
        if (v38 >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          int32x2_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v49, v39);
          uint64_t v35 = *(_DWORD **)a2;
          signed __int32 v34 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          int32x2_t v40 = 0;
        }
        float v46 = &v40[4 * v36];
        *(_DWORD *)float v46 = v29;
        float v42 = v46 + 4;
        while (v34 != v35)
        {
          int v48 = *--v34;
          *((_DWORD *)v46 - HGRenderQueue::CancelAllRenderJobs(*this, 1) = v48;
          v46 -= 4;
        }
LABEL_60:
        *(void *)a2 = v46;
        *(void *)(a2 + 8) = v42;
        *(void *)(a2 + 16) = &v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_62;
      }
    }
    _DWORD *v34 = v29;
    float v42 = v34 + 1;
LABEL_62:
    *(void *)(a2 + 8) = v42;
    goto LABEL_63;
  }
}

void sub_1B752FFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7530070(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10B1C40C80D7783);
  _Unwind_Resume(a1);
}

void sub_1B7530AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  }
  (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  (*(void (**)(uint64_t))(*(void *)v31 + 24))(v31);
  (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
  (*(void (**)(void *))(*(void *)a16 + 24))(a16);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1B7530F2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C401478D197);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      long long v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

void OMHisto::OMHisto(OMHisto *this, int a2, FxBitmap *a3)
{
  *(void *)this = &unk_1F1093D88;
  int v6 = (char *)this + 8;
  std::vector<int>::size_type v7 = a2;
  std::vector<int>::vector((std::vector<int> *)((char *)this + 8), a2);
  *((_DWORD *)this + 8) = a2;
  *(void *)((char *)this + 36) = -1;
  std::vector<int>::vector((std::vector<int> *)this + 2, v7);
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 18) = a2;
  *(void *)((char *)this + 76) = -1;
  *((void *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = v6;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = a3;
  uint64_t v8 = a3;
}

void sub_1B7531108(_Unwind_Exception *exception_object)
{
  int v6 = *v4;
  if (*v4)
  {
    v1[13] = v6;
    operator delete(v6);
  }
  std::vector<int>::size_type v7 = *v3;
  if (*v3)
  {
    v1[7] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

void OMHisto_32x32x32::~OMHisto_32x32x32(id *this)
{
  OMHisto::~OMHisto(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OMHisto::~OMHisto(id *this)
{
  *this = &unk_1F1093D88;

  id v2 = this[12];
  if (v2)
  {
    this[13] = v2;
    operator delete(v2);
  }
  id v3 = this[6];
  if (v3)
  {
    this[7] = v3;
    operator delete(v3);
  }
  id v4 = this[1];
  if (v4)
  {
    this[2] = v4;
    operator delete(v4);
  }
}

uint64_t *HGRef<anonymous namespace'::_RgbToSatCbCrEvaluator>::~HGRef(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(void))(*(void *)(v2 + 8) + 24))();
  }
  return a1;
}

void sub_1B7532BD8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  uint64_t v4 = *(void *)(v2 - 168);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::UploadCurveAndSetParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v7 = 0.0;
  uint64_t v8 = *(double **)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  double v10 = v8[1];
  double v11 = v8[2];
  double v12 = v8[4] - v10;
  v13.n128_u64[0] = 0;
  if (v12 != 0.0)
  {
    v13.n128_f64[0] = (v8[5] - v11) / v12;
    v13.n128_f32[0] = v13.n128_f64[0];
  }
  float v14 = v10;
  float v15 = v11;
  (*(void (**)(uint64_t, uint64_t, float, float, __n128, double))(*(void *)a2 + 96))(a2, a4, v14, v15, v13, 0.0);
  v17.n128_u64[0] = *(void *)(v9 - 16);
  v18.n128_u64[0] = *(void *)(v9 - 8);
  v19.n128_f64[0] = v17.n128_f64[0] - *(double *)(v9 - 40);
  if (v19.n128_f64[0] != 0.0)
  {
    v19.n128_f64[0] = (v18.n128_f64[0] - *(double *)(v9 - 32)) / v19.n128_f64[0];
    float v7 = v19.n128_f64[0];
  }
  v17.n128_f32[0] = v17.n128_f64[0];
  v18.n128_f32[0] = v18.n128_f64[0];
  char v20 = *(uint64_t (**)(uint64_t, void, __n128, __n128, __n128, __n128))(*(void *)a2 + 96);
  v16.n128_u64[0] = 0;
  v19.n128_f32[0] = v7;

  return v20(a2, (a4 + 1), v17, v18, v19, v16);
}

uint64_t ___ZN12_GLOBAL__N_113PAEUseACEScctEv_block_invoke_0()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"PAEUseACEScct");
  return result;
}

void anonymous namespace'::_Evaluator::~_Evaluator(_anonymous_namespace_::_Evaluator *this)
{
  *(void *)this = &unk_1F1093E00;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    MEMORY[0x1BA9BFB70](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8052888210);
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x1BA9BFBA0);
}

float anonymous namespace'::_Evaluator::evaluate(uint64_t a1, float32x4_t *a2, _OWORD *a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  float32x4_t v4 = *a2;
  if (v3 == 2)
  {
    LODWORD(v5) = HIDWORD(a2->i64[0]);
    float v8 = (float)(*(float *)&cc::matrix::rgb_to_YCbCr2020 * v4.f32[0])
       + vmuls_lane_f32(*((float *)&cc::matrix::rgb_to_YCbCr2020 + 1), *(float32x2_t *)v4.f32, 1);
    float v9 = *((float *)&cc::matrix::rgb_to_YCbCr2020 + 2);
    LODWORD(v6) = a2->i64[1];
  }
  else
  {
    LODWORD(v5) = HIDWORD(a2->i64[0]);
    LODWORD(v6) = a2->i64[1];
    if (v3) {
      float v7 = &cc::matrix::rgb_to_YCbCr709;
    }
    else {
      float v7 = (long long *)&cc::matrix::rgb_to_YCbCr601;
    }
    float v8 = (float)(*(float *)v7 * v4.f32[0]) + vmuls_lane_f32(*((float *)v7 + 1), *(float32x2_t *)v4.f32, 1);
    float v9 = *((float *)v7 + 2);
  }
  float v10 = v8 + vmuls_lane_f32(v9, v4, 2);
  if (v5 >= v6) {
    float v11 = v6;
  }
  else {
    float v11 = v5;
  }
  if (v5 <= v6) {
    float v12 = v6;
  }
  else {
    float v12 = v5;
  }
  if (v4.f32[0] >= v11) {
    float v13 = v11;
  }
  else {
    LODWORD(v13) = *(float32x4_t *)a2->f32;
  }
  if (v4.f32[0] > v12) {
    LODWORD(v12) = *(float32x4_t *)a2->f32;
  }
  float v14 = v13 + v12;
  float v15 = (float)(v13 + v12) * 0.5;
  v16.i64[0] = 0;
  v16.i64[1] = LODWORD(v15);
  float v17 = v12 - v13;
  double v18 = (float)(v12 - v13);
  if ((float)(v12 - v13) < 0.0) {
    double v18 = -v18;
  }
  if (v18 >= 0.00000011920929)
  {
    if (v15 > 0.5)
    {
      float v19 = 2.0 - v12 - v13;
      float v14 = v19;
    }
    float v20 = -v14;
    if (v14 >= 0.0) {
      float v20 = v14;
    }
    if (v20 < 0.00000011921) {
      float v14 = 0.00000011921;
    }
    float v21 = v17 / v14;
    float v22 = v4.f32[0] - v12;
    if ((float)(v4.f32[0] - v12) < 0.0) {
      float v22 = -(float)(v4.f32[0] - v12);
    }
    if (v22 >= 0.00000011921)
    {
      float v28 = v5 - v12;
      if ((float)(v5 - v12) < 0.0) {
        float v28 = -(float)(v5 - v12);
      }
      float v29 = v4.f32[0] - v13;
      if ((float)(v4.f32[0] - v13) < 0.0) {
        float v29 = -(float)(v4.f32[0] - v13);
      }
      double v30 = (float)((float)(v12 - v4.f32[0]) / v17);
      double v26 = (float)((float)(v12 - v5) / v17) + 3.0;
      if (v29 >= 0.00000011921) {
        double v26 = 5.0 - v30;
      }
      float v31 = v6 - v13;
      if (v31 < 0.0) {
        float v31 = -v31;
      }
      double v27 = 3.0 - (float)((float)(v12 - v6) / v17);
      double v32 = v30 + 1.0;
      if (v31 < 0.00000011921) {
        double v27 = v32;
      }
      BOOL v25 = v28 < 0.00000011921;
    }
    else
    {
      float v23 = v5 - v13;
      float v24 = -(float)(v5 - v13);
      if (v23 < 0.0) {
        float v23 = v24;
      }
      BOOL v25 = v23 < 0.00000011921;
      double v26 = 1.0 - (float)((float)(v12 - v5) / v17);
      double v27 = (float)((float)(v12 - v6) / v17) + 5.0;
    }
    if (!v25) {
      double v27 = v26;
    }
    float v33 = v27;
    float v34 = v33 / 6.0;
    v16.i64[0] = __PAIR64__(LODWORD(v21), LODWORD(v34));
    if (v34 <= 1.0)
    {
      if (v34 >= 0.0) {
        goto LABEL_51;
      }
      float v35 = (float)(v34 + (float)(int)(float)-v34) + 1.0;
    }
    else
    {
      float v35 = v34 - (float)(int)v34;
    }
    *(float *)v16.i32 = v35;
  }
LABEL_51:
  uint64_t v36 = (float)((float)(*(_DWORD *)(a1 + 72) - 1) * *(float *)v16.i32);
  float v37 = *(float *)(*(void *)(a1 + 48) + 4 * v36);
  *(float *)v16.i32 = v37;
  if (v37 <= 1.0)
  {
    if (v37 >= 0.0) {
      goto LABEL_56;
    }
    float v38 = (float)(v37 + (float)(int)(float)-v37) + 1.0;
  }
  else
  {
    float v38 = v37 - (float)(int)v37;
  }
  *(float *)v16.i32 = v38;
LABEL_56:
  if (*(float *)v16.i32 <= 1.0)
  {
    if (*(float *)v16.i32 >= 0.0) {
      float v39 = *(float *)v16.i32;
    }
    else {
      float v39 = (float)(*(float *)v16.i32 + (float)(int)(float)-*(float *)v16.i32) + 1.0;
    }
  }
  else
  {
    float v39 = *(float *)v16.i32 - (float)(int)*(float *)v16.i32;
  }
  double v40 = *(float *)&v16.i32[2];
  float v41 = (float)(*(float *)&v16.i32[2] + *(float *)&v16.i32[1]) - (float)(*(float *)&v16.i32[2] * *(float *)&v16.i32[1]);
  if (*(float *)&v16.i32[2] <= 0.5)
  {
    float v42 = (*(float *)&v16.i32[1] + 1.0) * v40;
    float v41 = v42;
  }
  if (*(float *)&v16.i32[1] >= 0.0) {
    double v43 = *(float *)&v16.i32[1];
  }
  else {
    double v43 = -*(float *)&v16.i32[1];
  }
  if (v43 >= 0.00000011920929)
  {
    double v45 = v39 * 6.0;
    int v46 = (int)v45;
    float v47 = v40 + v40 - v41;
    double v48 = (v45 - floor(v45)) * (float)(v41 - v47);
    float v49 = v48 + v47;
    double v50 = v41 - v48;
    float v51 = v50;
    switch(v46)
    {
      case 1:
        v44.i32[3] = 0;
        v44.f32[0] = v50;
        v44.f32[1] = v41;
        goto LABEL_71;
      case 2:
        v44.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v47));
        v44.i64[1] = LODWORD(v49);
        break;
      case 3:
        v44.i32[3] = 0;
        v44.i64[0] = __PAIR64__(LODWORD(v51), LODWORD(v47));
        goto LABEL_75;
      case 4:
        v44.i32[3] = 0;
        v44.i64[0] = __PAIR64__(LODWORD(v47), LODWORD(v49));
LABEL_75:
        v44.f32[2] = v41;
        break;
      case 5:
        v44.i64[0] = __PAIR64__(LODWORD(v47), LODWORD(v41));
        v44.i64[1] = LODWORD(v51);
        break;
      default:
        v44.i32[3] = 0;
        v44.i64[0] = __PAIR64__(LODWORD(v49), LODWORD(v41));
LABEL_71:
        v44.f32[2] = v47;
        break;
    }
  }
  else
  {
    float32x4_t v44 = (float32x4_t)vdupq_laneq_s32(v16, 2);
    v44.i32[3] = 0;
  }
  if (v3 == 2)
  {
    float v52 = (float *)&cc::matrix::rgb_to_YCbCr2020;
  }
  else if (v3)
  {
    float v52 = (float *)&cc::matrix::rgb_to_YCbCr709;
  }
  else
  {
    float v52 = (float *)&cc::matrix::rgb_to_YCbCr601;
  }
  float v53 = (float)((float)(*v52 * v44.f32[0]) + vmuls_lane_f32(v52[1], *(float32x2_t *)v44.f32, 1))
      + vmuls_lane_f32(v52[2], v44, 2);
  float v54 = *(float *)(*(void *)(a1 + 56) + 4 * v36);
  float v56 = &cc::matrix::YCbCr709_to_rgb;
  if (v3 == 2) {
    float v56 = &cc::matrix::YCbCr2020_to_rgb;
  }
  if (v3) {
    float32x2_t v57 = (float *)v56;
  }
  else {
    float32x2_t v57 = (float *)&cc::matrix::YCbCr601_to_rgb;
  }
  if (!*(unsigned char *)(a1 + 44)) {
    float v10 = v53;
  }
  float v55 = *(float *)(*(void *)(a1 + 64) + 4 * v36);
  float v58 = (float)(v10 * v55) + (float)((float)(1.0 - v55) * 0.0);
  float v59 = (float)(1.0 - v54) * 0.0;
  float v60 = (float)((float)((float)((float)(v44.f32[0] * v52[6]) + (float)(v44.f32[1] * v52[7]))
                      + (float)(v44.f32[2] * v52[8]))
              * v54)
      + v59;
  float v61 = (float)((float)((float)((float)(v44.f32[0] * v52[3]) + (float)(v44.f32[1] * v52[4]))
                      + (float)(v44.f32[2] * v52[5]))
              * v54)
      + v59;
  float v62 = (float)((float)(v58 * v57[3]) + (float)(v61 * v57[4])) + (float)(v60 * v57[5]);
  *(float *)&long long v63 = (float)((float)(v58 * *v57) + (float)(v61 * v57[1])) + (float)(v60 * v57[2]);
  float result = (float)((float)(v58 * v57[6]) + (float)(v61 * v57[7])) + (float)(v60 * v57[8]);
  *((float *)&v63 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v62;
  *((void *)&v63 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = LODWORD(result);
  *a3 = v63;
  return result;
}

uint64_t anonymous namespace'::_Evaluator::componentSize(_anonymous_namespace_::_Evaluator *this)
{
  return 33;
}

float anonymous namespace'::_Evaluator::componentMin(_anonymous_namespace_::_Evaluator *this)
{
  return *((float *)this + 8);
}

float anonymous namespace'::_Evaluator::componentMax(_anonymous_namespace_::_Evaluator *this)
{
  return *((float *)this + 9);
}

double anonymous namespace'::SatBytesEval(_anonymous_namespace_ *this, double *a2)
{
  double result = *(double *)this + 0.5;
  *(double *)this = result;
  return result;
}

void anonymous namespace'::_RgbToSatCbCrEvaluator::~_RgbToSatCbCrEvaluator(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  *(void *)this = &unk_1F1093EA8;
  uint64_t v1 = (_anonymous_namespace_::_RgbToSatCbCrEvaluator *)((char *)this + 8);
  *((void *)this + HGRenderQueue::CancelAllRenderJobs(*this, 1) = &unk_1F1093EE8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  HGObject::~HGObject(v1);
}

{
  void *v1;
  uint64_t vars8;

  HGObject::operator delete(v1);
}

uint64_t anonymous namespace'::_RgbToSatCbCrEvaluator::componentSize(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  return 17;
}

float anonymous namespace'::_RgbToSatCbCrEvaluator::componentMin(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  return *((float *)this + 9);
}

float anonymous namespace'::_RgbToSatCbCrEvaluator::componentMax(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  return *((float *)this + 10);
}

void non-virtual thunk to'anonymous namespace'::_RgbToSatCbCrEvaluator::~_RgbToSatCbCrEvaluator(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
}

{
  void *v1;
  uint64_t vars8;

  HGObject::operator delete(v1);
}

void anonymous namespace'::_RgbToSatCbCrEvaluator::_BitmapStorageObject::~_BitmapStorageObject(_anonymous_namespace_::_RgbToSatCbCrEvaluator::_BitmapStorageObject *this)
{
  *(void *)this = &unk_1F1093F58;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x1BA9BFB70](v2, 0x1000C8077774924);
  }

  HGObject::~HGObject(this);
}

{
  void *v1;
  uint64_t vars8;

  HGObject::operator delete(v1);
}

void anonymous namespace'::HgSatCurves::~HgSatCurves(HGNode *this)
{
  HgcSatCurves::~HgcSatCurves(this);

  HGObject::operator delete(v1);
}

uint64_t anonymous namespace'::HgSatCurves::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t anonymous namespace'::HgSatCurves::GetROI(_anonymous_namespace_::HgSatCurves *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (!a3) {
    return *(void *)&a4.var0;
  }
  if (a3 <= 3)
  {
    unsigned int v4 = 1024;
    unsigned int v5 = 1;
    return HGRectMake4i(0, 0, v4, v5);
  }
  if (a3 == 4)
  {
    unsigned int v4 = 289;
    unsigned int v5 = 17;
    return HGRectMake4i(0, 0, v4, v5);
  }
  return 0;
}

void sub_1B7533EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  HGObject::operator delete(v11);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(a1);
}

void HGrowShrinkMatte::HGrowShrinkMatte(HGrowShrinkMatte *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v1 = &unk_1F1094210;
  *(_DWORD *)(v1 + 408) = 0;
  *(void *)(v1 + 416) = 0;
}

void HGrowShrinkMatte::~HGrowShrinkMatte(HGNode *this)
{
  *(void *)this = &unk_1F1094210;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HGrowShrinkMatte::~HGrowShrinkMatte(this);

  HGObject::operator delete(v1);
}

HgcShrinkGrowMatte *HGrowShrinkMatte::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  unsigned int v4 = (HgcShrinkGrowMatte *)Input;
  if (Input)
  {
    (*(void (**)(HGNode *))(*(void *)Input + 16))(Input);
    unsigned int v5 = (char *)this + 416;
    float v6 = (HgcShrinkGrowMatte *)*((void *)this + 52);
    if (v6 == v4)
    {
      (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v4 + 24))(v4);
      unsigned int v4 = *(HgcShrinkGrowMatte **)v5;
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v5 = (char *)this + 416;
    float v6 = (HgcShrinkGrowMatte *)*((void *)this + 52);
    if (!v6)
    {
      unsigned int v4 = 0;
      goto LABEL_8;
    }
  }
  if (v6) {
    (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v6 + 24))(v6);
  }
  *(void *)unsigned int v5 = v4;
LABEL_8:
  float v7 = *((float *)this + 102);
  if (v7 != 0.0)
  {
    if (v4) {
      (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v4 + 16))(v4);
    }
    char v8 = (*(uint64_t (**)(HGNode *, void))(*(void *)this + 152))(this, 0);
    float v9 = fabsf(v7);
    if ((int)v9 >= 1)
    {
      int v10 = 0;
      int v11 = v8 & 2;
      do
      {
        float v12 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
        HGaussianBlur::HGaussianBlur(v12);
        HGaussianBlur::init(v12, 1.283, 1.0, 1.0, 0, 0, 0);
        (*(void (**)(HGaussianBlur *, void, HgcShrinkGrowMatte *))(*(void *)v12 + 120))(v12, 0, v4);
        float v13 = (HgcShrinkGrowMatte *)HGObject::operator new(0x1A0uLL);
        HgcShrinkGrowMatte::HgcShrinkGrowMatte(v13);
        if (*((float *)this + 102) >= 0.0) {
          v14.n128_f32[0] = 0.0;
        }
        else {
          v14.n128_f32[0] = -1.0;
        }
        (*(void (**)(HgcShrinkGrowMatte *, void, float, __n128, double, double))(*(void *)v13 + 96))(v13, 0, 2.0, v14, 0.0, 0.0);
        (*(void (**)(HgcShrinkGrowMatte *, void, HGaussianBlur *))(*(void *)v13 + 120))(v13, 0, v12);
        if (!v10 && v11) {
          (*(void (**)(HgcShrinkGrowMatte *, void, uint64_t))(*(void *)v13 + 136))(v13, 0, 2);
        }
        if (v4 != v13)
        {
          if (v4) {
            (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v4 + 24))(v4);
          }
          unsigned int v4 = v13;
          (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v13 + 16))(v13);
        }
        (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v13 + 24))(v13);
        (*(void (**)(HGaussianBlur *))(*(void *)v12 + 24))(v12);
        ++v10;
      }
      while ((int)v9 != v10);
    }
    float v15 = v9 - (float)(int)v9;
    if (v15 > 0.0)
    {
      int32x4_t v16 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
      HGaussianBlur::HGaussianBlur(v16);
      HGaussianBlur::init(v16, 1.283, 1.0, 1.0, 0, 0, 0);
      (*(void (**)(HGaussianBlur *, void, HgcShrinkGrowMatte *))(*(void *)v16 + 120))(v16, 0, v4);
      float v17 = v15 + 1.0;
      float v18 = *((float *)this + 102);
      float v19 = 1.0 - v17;
      if (v18 >= 0.0) {
        float v19 = 0.0;
      }
      if (v18 <= 0.0) {
        float v20 = v19;
      }
      else {
        float v20 = 0.0;
      }
      float v21 = (HgcShrinkGrowMatte *)HGObject::operator new(0x1A0uLL);
      HgcShrinkGrowMatte::HgcShrinkGrowMatte(v21);
      (*(void (**)(HgcShrinkGrowMatte *, void, float, float, double, double))(*(void *)v21 + 96))(v21, 0, v17, v20, 0.0, 0.0);
      (*(void (**)(HgcShrinkGrowMatte *, void, HGaussianBlur *))(*(void *)v21 + 120))(v21, 0, v16);
      if (v4 != v21)
      {
        if (v4) {
          (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v4 + 24))(v4);
        }
        unsigned int v4 = v21;
        (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v21 + 16))(v21);
      }
      (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v21 + 24))(v21);
      (*(void (**)(HGaussianBlur *))(*(void *)v16 + 24))(v16);
    }
    uint64_t v22 = *(void *)v5;
    if (*(HgcShrinkGrowMatte **)v5 == v4)
    {
      if (v4) {
        goto LABEL_41;
      }
    }
    else
    {
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
      }
      *(void *)unsigned int v5 = v4;
      if (v4)
      {
        (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v4 + 16))(v4);
LABEL_41:
        (*(void (**)(HgcShrinkGrowMatte *))(*(void *)v4 + 24))(v4);
        return *(HgcShrinkGrowMatte **)v5;
      }
    }
  }
  return v4;
}

void sub_1B75346B0(_Unwind_Exception *a1)
{
  HGObject::operator delete(v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

void HErode::HErode(HErode *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v1 = &unk_1F1094460;
  *(_DWORD *)(v1 + 408) = 0;
  *(void *)(v1 + 416) = 0;
}

void HErode::~HErode(HGNode *this)
{
  *(void *)this = &unk_1F1094460;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HErode::~HErode(this);

  HGObject::operator delete(v1);
}

HgcErode *HErode::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  unsigned int v4 = Input;
  if (Input)
  {
    (*(void (**)(HGNode *))(*(void *)Input + 16))(Input);
    unsigned int v5 = (HgcErode **)((char *)this + 416);
    float v6 = (HGNode *)*((void *)this + 52);
    if (v6 == v4)
    {
      (*(void (**)(HGNode *))(*(void *)v4 + 24))(v4);
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v5 = (HgcErode **)((char *)this + 416);
    float v6 = (HGNode *)*((void *)this + 52);
    if (!v6) {
      goto LABEL_8;
    }
  }
  if (v6) {
    (*(void (**)(HGNode *))(*(void *)v6 + 24))(v6);
  }
  *unsigned int v5 = (HgcErode *)v4;
LABEL_8:
  if (*((float *)this + 102) > 0.0)
  {
    float v7 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
    HGaussianBlur::HGaussianBlur(v7);
    HGaussianBlur::init(v7, *((float *)this + 102) * 4.0, 1.0, 1.0, 0, 0, 0);
    (*(void (**)(HGaussianBlur *, void, HgcErode *))(*(void *)v7 + 120))(v7, 0, *v5);
    char v8 = (HgcErode *)HGObject::operator new(0x1A0uLL);
    HgcErode::HgcErode(v8);
    (*(void (**)(HgcErode *, void, HgcErode *))(*(void *)v8 + 120))(v8, 0, *v5);
    (*(void (**)(HgcErode *, uint64_t, HGaussianBlur *))(*(void *)v8 + 120))(v8, 1, v7);
    float v9 = *v5;
    if (*v5 != v8)
    {
      if (v9) {
        (*(void (**)(HgcErode *))(*(void *)v9 + 24))(v9);
      }
      *unsigned int v5 = v8;
      (*(void (**)(HgcErode *))(*(void *)v8 + 16))(v8);
    }
    (*(void (**)(HgcErode *))(*(void *)v8 + 24))(v8);
    (*(void (**)(HGaussianBlur *))(*(void *)v7 + 24))(v7);
  }
  return *v5;
}

void sub_1B7534BCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

double CGRectFromHGRect(HGRect a1)
{
  return (double)a1.var0;
}

uint64_t HGRectFromCGRect(CGRect a1)
{
  return HGRectMake4i((int)a1.origin.x, (int)a1.origin.y, (int)(a1.origin.x + a1.size.width), (int)(a1.origin.y + a1.size.height));
}

void sub_1B7535174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t HDroplet::GetDOD(HDroplet *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  float v9 = *((double *)this + 86);
  float v10 = fabsf(v9);
  uint64_t v11 = HGRectMake4i((int)(float)-v10, (int)(float)-v10, (int)v10, (int)v10);
  uint64_t v4 = HGRectGrow(v6, v5, v11);
  uint64_t v13 = v12;
  if ((*(int (**)(HDroplet *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v13, v14);
  }
  return v4;
}

unint64_t HDroplet::GetROI(HDroplet *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRect v55 = a4;
  if (a3)
  {
    uint64_t var1 = a4.var1;
  }
  else
  {
    double v6 = *((double *)this + 85);
    double v7 = 1.0 / v6;
    double v8 = *((double *)this + 86);
    double v9 = -*((double *)this + 84) / v6;
    Interval::pixelToFloat(&v55.var0, v53.f64);
    uint64_t v10 = *((void *)this + 57);
    v47.i64[0] = *((void *)this + 52);
    v47.i64[1] = v47.i64[0];
    v48.i64[0] = v10;
    v48.i64[1] = v10;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v53.f64, (double *)v47.i64);
    uint64_t v11 = *((void *)this + 59);
    v47.i64[0] = *((void *)this + 55);
    v47.i64[1] = v47.i64[0];
    v48.i64[0] = v11;
    v48.i64[1] = v11;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v53.f64, (double *)v47.i64);
    v52[0] = v53;
    v52[1] = v54;
    Interval::length<double>(v53.f64, (double *)v51.i64);
    int8x16_t v47 = v51;
    int8x16_t v48 = v51;
    int8x16_t v49 = v51;
    int8x16_t v50 = v51;
    Interval::normalized<double>(v53.f64, v42.f64);
    float64x2_t v53 = v42;
    float64x2_t v54 = v43;
    v46[0] = v7;
    v46[1] = v7;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, v46);
    v42.f64[0] = v9;
    v42.f64[1] = v9;
    v43.f64[0] = v9;
    v43.f64[1] = v9;
    v44.f64[0] = v9;
    v44.f64[1] = v9;
    v45.f64[0] = v9;
    v45.f64[1] = v9;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, v42.f64);
    int v12 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 0.0;
    fesetround(v12);
    int v13 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 1.0;
    fesetround(v13);
    int v14 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 2.0;
    fesetround(v14);
    int v15 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 3.0;
    fesetround(v15);
    *(double *)v38.i64 = -0.0;
    v38.i64[1] = 0;
    *(double *)v39.i64 = --1.0;
    v39.i64[1] = 0x3FF0000000000000;
    *(double *)v40.i64 = --2.0;
    v40.i64[1] = 0x4000000000000000;
    *(double *)v41.i64 = --3.0;
    v41.i64[1] = 0x4008000000000000;
    operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, (double *)v38.i64, v42.f64);
    int8x16_t v47 = (int8x16_t)v42;
    int8x16_t v48 = (int8x16_t)v43;
    int8x16_t v49 = (int8x16_t)v44;
    int8x16_t v50 = (int8x16_t)v45;
    v37[0] = v42;
    v37[1] = v43;
    _OWORD v37[2] = v44;
    v37[3] = v45;
    Interval::smoothstep(v37, &v38, 0.0, 1.0);
    int8x16_t v47 = v38;
    int8x16_t v48 = v39;
    int8x16_t v49 = v40;
    int8x16_t v50 = v41;
    int v16 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0x3FF0000000000000;
    fesetround(v16);
    int v17 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0xC000000000000000;
    fesetround(v17);
    int v18 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0x3FF0000000000000;
    fesetround(v18);
    int v19 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0;
    fesetround(v19);
    *(double *)v38.i64 = --1.0;
    v38.i64[1] = 0x3FF0000000000000;
    *(double *)v39.i64 = -2.0;
    v39.i64[1] = 0xC000000000000000;
    *(double *)v40.i64 = --1.0;
    v40.i64[1] = 0x3FF0000000000000;
    *(double *)v41.i64 = -0.0;
    v41.i64[1] = 0;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, (double *)v38.i64);
    int v20 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0;
    fesetround(v20);
    int v21 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0x3FF0000000000000;
    fesetround(v21);
    int v22 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0xBFF0000000000000;
    fesetround(v22);
    int v23 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0;
    fesetround(v23);
    *(double *)v38.i64 = -0.0;
    v38.i64[1] = 0;
    *(double *)v39.i64 = --1.0;
    v39.i64[1] = 0x3FF0000000000000;
    *(double *)v40.i64 = -1.0;
    v40.i64[1] = 0xBFF0000000000000;
    *(double *)v41.i64 = -0.0;
    v41.i64[1] = 0;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, (double *)v38.i64);
    *(void *)&v24.f64[1] = v47.i64[1];
    v24.f64[0] = 0.0;
    int8x16_t v25 = vandq_s8(v47, (int8x16_t)vcgtq_f64(v24, (float64x2_t)v47.u64[0]));
    *(void *)&v26.f64[0] = v48.i64[0];
    *(void *)&v26.f64[1] = v25.i64[1];
    *(void *)&v24.f64[0] = v25.i64[0];
    *(void *)&v24.f64[1] = v48.i64[1];
    int8x16_t v27 = vbslq_s8((int8x16_t)vcgtq_f64(v24, v26), v48, v25);
    *(void *)&v26.f64[0] = v49.i64[0];
    *(void *)&v26.f64[1] = v27.i64[1];
    *(void *)&v24.f64[0] = v27.i64[0];
    *(void *)&v24.f64[1] = v49.i64[1];
    int8x16_t v28 = vbslq_s8((int8x16_t)vcgtq_f64(v24, v26), v49, v27);
    *(void *)&v26.f64[1] = v28.i64[1];
    v26.f64[0] = 0.0;
    int8x16_t v35 = vandq_s8(v28, (int8x16_t)vcgtq_f64(v26, (float64x2_t)v28.u64[0]));
    int8x16_t v36 = v35;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v35.i64, v53.f64, (double *)v34);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v36.i64, v54.f64, (double *)v56.i64);
    int8x16_t v38 = (int8x16_t)v34[0];
    int8x16_t v39 = v56;
    v33[0] = v8;
    v33[1] = v8;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v38.i64, v33, (double *)v35.i64);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v39.i64, v33, (double *)v56.i64);
    v34[0] = v35;
    v34[1] = v56;
    operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v34, (double *)v52, (double *)v35.i64);
    int8x16_t v38 = v35;
    int8x16_t v39 = v36;
    uint64_t v29 = *((void *)this + 73);
    v35.i64[0] = *((void *)this + 68);
    v35.i64[1] = v35.i64[0];
    v36.i64[0] = v29;
    v36.i64[1] = v29;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v38.i64, (double *)v35.i64);
    uint64_t v30 = *((void *)this + 75);
    v35.i64[0] = *((void *)this + 71);
    v35.i64[1] = v35.i64[0];
    v36.i64[0] = v30;
    v36.i64[1] = v30;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v38.i64, (double *)v35.i64);
    unint64_t v31 = Interval::floatToPixel((double *)v38.i64);
    a4.int var0 = (int)(float)((float)(int)v31 + -1.0);
    uint64_t var1 = (int)(float)((float)SHIDWORD(v31) + -1.0);
  }
  return a4.var0 | (unint64_t)(var1 << 32);
}

double *PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1, a2, (double *)&v5);
  *(_OWORD *)a1 = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 2, a2 + 2, (double *)&v5);
  *((_OWORD *)a1 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v5;
  return a1;
}

double *PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  int v4 = fegetround();
  fesetround(0x400000);
  double v5 = a1[1] + a2[1];
  *a1 = -(-*a1 - *a2);
  a1[1] = v5;
  fesetround(v4);
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = a1[3] + a2[3];
  a1[2] = -(-a1[2] - a2[2]);
  a1[3] = v7;
  fesetround(v6);
  return a1;
}

uint64_t Interval::length<double>@<X0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2 = a1;
  double v4 = a1[1];
  v11[0] = *a1;
  v11[1] = v4;
  v10[0] = v11[0];
  v10[1] = v4;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v11, v10, v12);
  double v5 = v2[3];
  v8[0] = v2[2];
  v8[1] = v5;
  v7[0] = v8[0];
  v7[1] = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v8, v7, v9);
  LODWORD(v2) = fegetround();
  fesetround(0x400000);
  v13[0] = -v12[0] - v9[0];
  v13[0] = -v13[0];
  v13[1] = v12[1] + v9[1];
  fesetround((int)v2);
  return boost::numeric::sqrt<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v13, a2);
}

double *Interval::normalized<double>@<X0>(double *result@<X0>, double *a2@<X8>)
{
  double v4 = *result;
  double v3 = result[1];
  double v6 = result[2];
  double v5 = result[3];
  if (*result <= 0.0)
  {
    if (v3 < 0.0)
    {
      if (v6 > 0.0)
      {
        double v14 = sqrt(v4 * v4 + v6 * v6);
        goto LABEL_10;
      }
      if (v5 < 0.0)
      {
        double v7 = v4 * v4;
        goto LABEL_3;
      }
      double v14 = sqrt(v3 * v3 + v6 * v6);
      double v15 = sqrt(v3 * v3 + v5 * v5);
      double v27 = v3 / v14;
      double v28 = v3 / v15;
      if (v27 >= v28) {
        double v11 = v27;
      }
      else {
        double v11 = v28;
      }
      if (v11 < -1.0) {
        boost::numeric::interval_lib::exception_create_empty::operator()();
      }
      int v33 = fegetround();
      fesetround(0x400000);
      double v30 = 1.0;
      double result = (double *)fesetround(v33);
LABEL_44:
      double v10 = -v30;
LABEL_45:
      double v12 = v6 / v14;
      double v13 = v5 / v15;
      goto LABEL_46;
    }
    if (v6 <= 0.0)
    {
      if (v5 >= 0.0)
      {
        int v31 = fegetround();
        fesetround(0x400000);
        double v11 = 1.0;
        fesetround(v31);
        int v32 = fegetround();
        fesetround(0x400000);
        double v20 = 1.0;
        double v13 = 1.0;
        double result = (double *)fesetround(v32);
        double v10 = -1.0;
        goto LABEL_42;
      }
      double v24 = sqrt(v4 * v4 + v5 * v5);
      double v25 = sqrt(v3 * v3 + v5 * v5);
      double v10 = v4 / v24;
      double v11 = v3 / v25;
      if (v4 / v24 > v3 / v25) {
        boost::numeric::interval_lib::exception_create_empty::operator()();
      }
      if (v5 / v24 <= v5 / v25) {
        double v13 = v5 / v24;
      }
      else {
        double v13 = v5 / v25;
      }
      if (v13 >= -1.0)
      {
        int v26 = fegetround();
        fesetround(0x400000);
        double v20 = 1.0;
        double result = (double *)fesetround(v26);
        goto LABEL_42;
      }
    }
    else
    {
      double v16 = sqrt(v4 * v4 + v6 * v6);
      double v17 = sqrt(v3 * v3 + v6 * v6);
      double v10 = v4 / v16;
      double v11 = v3 / v17;
      if (v4 / v16 > v3 / v17) {
        boost::numeric::interval_lib::exception_create_empty::operator()();
      }
      if (v6 / v16 <= v6 / v17) {
        double v18 = v6 / v16;
      }
      else {
        double v18 = v6 / v17;
      }
      if (v18 <= 1.0)
      {
        int v19 = fegetround();
        fesetround(0x400000);
        double v20 = -v18;
        double v13 = 1.0;
        double result = (double *)fesetround(v19);
LABEL_42:
        double v12 = -v20;
        goto LABEL_48;
      }
    }
LABEL_47:
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  double v7 = v4 * v4;
  if (v6 <= 0.0)
  {
    double v14 = sqrt(v7 + v6 * v6);
    if (v5 < 0.0)
    {
LABEL_10:
      double v15 = sqrt(v3 * v3 + v5 * v5);
      double v10 = v4 / v14;
      double v11 = v3 / v15;
      if (v4 / v14 <= v3 / v15) {
        goto LABEL_45;
      }
LABEL_26:
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    double v15 = sqrt(v7 + v5 * v5);
    double v21 = v4 / v14;
    double v22 = v4 / v15;
    if (v21 <= v22) {
      double v23 = v21;
    }
    else {
      double v23 = v22;
    }
    if (v23 > 1.0) {
      goto LABEL_26;
    }
    int v29 = fegetround();
    fesetround(0x400000);
    double v30 = -v23;
    double v11 = 1.0;
    double result = (double *)fesetround(v29);
    goto LABEL_44;
  }
LABEL_3:
  double v8 = sqrt(v7 + v5 * v5);
  double v9 = sqrt(v3 * v3 + v6 * v6);
  double v10 = v4 / v8;
  double v11 = v3 / v9;
  if (v4 / v8 > v3 / v9) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  double v12 = v6 / v9;
  double v13 = v5 / v8;
LABEL_46:
  if (v12 > v13) {
    goto LABEL_47;
  }
LABEL_48:
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  return result;
}

double *PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1, a2, (double *)&v5);
  *(_OWORD *)a1 = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 2, a2, (double *)&v5);
  *((_OWORD *)a1 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 4, a2, (double *)&v5);
  *((_OWORD *)a1 + 2) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 6, a2, (double *)&v5);
  *((_OWORD *)a1 + 3) = v5;
  return a1;
}

{
  long long v5;

  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1, a2, (double *)&v5);
  *(_OWORD *)a1 = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 2, a2 + 2, (double *)&v5);
  *((_OWORD *)a1 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 4, a2 + 4, (double *)&v5);
  *((_OWORD *)a1 + 2) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 6, a2 + 6, (double *)&v5);
  *((_OWORD *)a1 + 3) = v5;
  return a1;
}

double *PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  int v4 = fegetround();
  fesetround(0x400000);
  double v5 = a1[1] + a2[1];
  *a1 = -(-*a1 - *a2);
  a1[1] = v5;
  fesetround(v4);
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = a1[3] + a2[3];
  a1[2] = -(-a1[2] - a2[2]);
  a1[3] = v7;
  fesetround(v6);
  int v8 = fegetround();
  fesetround(0x400000);
  double v9 = a1[5] + a2[5];
  a1[4] = -(-a1[4] - a2[4]);
  a1[5] = v9;
  fesetround(v8);
  int v10 = fegetround();
  fesetround(0x400000);
  double v11 = a1[7] + a2[7];
  a1[6] = -(-a1[6] - a2[6]);
  a1[7] = v11;
  fesetround(v10);
  return a1;
}

double operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = a2[1] - *a1;
  double v8 = a1[1] - *a2;
  fesetround(v6);
  int v9 = fegetround();
  fesetround(0x400000);
  double v10 = a2[3] - a1[2];
  double v11 = a1[3] - a2[2];
  fesetround(v9);
  int v12 = fegetround();
  fesetround(0x400000);
  double v13 = a2[5] - a1[4];
  double v14 = a1[5] - a2[4];
  fesetround(v12);
  int v15 = fegetround();
  fesetround(0x400000);
  double v16 = a2[7] - a1[6];
  double v17 = a1[7] - a2[6];
  fesetround(v15);
  double result = -v16;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v10;
  a3[3] = v11;
  a3[4] = -v13;
  a3[5] = v14;
  a3[6] = -v16;
  a3[7] = v17;
  return result;
}

{
  int v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double result;

  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = a2[1] - *a1;
  double v8 = a1[1] - *a2;
  fesetround(v6);
  int v9 = fegetround();
  fesetround(0x400000);
  double v10 = a2[3] - a1[2];
  double v11 = a1[3] - a2[2];
  fesetround(v9);
  double result = -v10;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v10;
  a3[3] = v11;
  return result;
}

double Interval::smoothstep@<D0>(float64x2_t *a1@<X0>, _OWORD *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  *(double *)&uint64_t v5 = a3;
  *(double *)&uint64_t v6 = (float)(a4 - a3);
  float64x2_t v7 = (float64x2_t)vdupq_lane_s64(v5, 0);
  float64x2_t v8 = (float64x2_t)vdupq_lane_s64(v6, 0);
  int8x16_t v9 = (int8x16_t)vdivq_f64(vsubq_f64(*a1, v7), v8);
  __asm { FMOV            V7.2D, #1.0 }
  float64x2_t v15 = (float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v9, (float64x2_t)_Q7), _Q7, v9), (int8x16_t)vcltzq_f64((float64x2_t)v9));
  int8x16_t v16 = (int8x16_t)vdivq_f64(vsubq_f64(a1[1], v7), v8);
  float64x2_t v17 = (float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v16, (float64x2_t)_Q7), _Q7, v16), (int8x16_t)vcltzq_f64((float64x2_t)v16));
  int8x16_t v18 = (int8x16_t)vdivq_f64(vsubq_f64(a1[2], v7), v8);
  int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v18, (float64x2_t)_Q7), _Q7, v18);
  int8x16_t v20 = (int8x16_t)vcltzq_f64((float64x2_t)v18);
  int8x16_t v21 = (int8x16_t)vdivq_f64(vsubq_f64(a1[3], v7), v8);
  int8x16_t v22 = (int8x16_t)vcgtq_f64((float64x2_t)v21, (float64x2_t)_Q7);
  float64x2_t v38 = v15;
  if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1), v15))).u8[0]) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  int8x16_t v23 = (int8x16_t)vcltzq_f64((float64x2_t)v21);
  int8x16_t v24 = vbslq_s8(v22, _Q7, v21);
  float64x2_t v25 = (float64x2_t)vbicq_s8(v19, v20);
  if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1), v17))).u8[0]) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  float64x2_t v26 = (float64x2_t)vbicq_s8(v24, v23);
  if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1), v25))).u8[0]) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1), v26))).u8[0]) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  float64x2_t v53 = v38;
  float64x2_t v54 = v17;
  float64x2_t v55 = v25;
  float64x2_t v56 = v26;
  int v27 = fegetround();
  fesetround(0x400000);
  fesetround(v27);
  int v28 = fegetround();
  fesetround(0x400000);
  fesetround(v28);
  int v29 = fegetround();
  fesetround(0x400000);
  fesetround(v29);
  int v30 = fegetround();
  fesetround(0x400000);
  fesetround(v30);
  v52[0] = --3.0;
  v52[1] = 3.0;
  _OWORD v52[2] = --3.0;
  v52[3] = 3.0;
  _OWORD v52[4] = --3.0;
  v52[5] = 3.0;
  v52[6] = --3.0;
  v52[7] = 3.0;
  int v31 = fegetround();
  fesetround(0x400000);
  fesetround(v31);
  int v32 = fegetround();
  fesetround(0x400000);
  fesetround(v32);
  int v33 = fegetround();
  fesetround(0x400000);
  fesetround(v33);
  int v34 = fegetround();
  fesetround(0x400000);
  fesetround(v34);
  v48[0] = --2.0;
  v48[1] = 2.0;
  v49[0] = --2.0;
  v49[1] = 2.0;
  v50[0] = --2.0;
  v50[1] = 2.0;
  v51[0] = --2.0;
  v51[1] = 2.0;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v53.f64, v53.f64, (double *)&v40);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v54.f64, v54.f64, (double *)v39);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v55.f64, v55.f64, v60);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v56.f64, v56.f64, (double *)&v59);
  long long v44 = v40;
  long long v45 = v39[0];
  long long v46 = *(_OWORD *)v60;
  long long v47 = v59;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v48, v53.f64, (double *)&v40);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v49, v54.f64, v60);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v50, v55.f64, (double *)&v59);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v51, v56.f64, (double *)&v58);
  v39[0] = v40;
  v39[1] = *(_OWORD *)v60;
  __n128 v39[2] = v59;
  v39[3] = v58;
  operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v52, (double *)v39, (double *)&v40);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v44, (double *)&v40, v60);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v45, &v41, (double *)&v59);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v46, &v42, (double *)&v58);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v47, &v43, (double *)&v57);
  long long v35 = v59;
  *a2 = *(_OWORD *)v60;
  a2[1] = v35;
  long long v37 = v57;
  double result = *(double *)&v58;
  a2[2] = v58;
  a2[3] = v37;
  return result;
}

double operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = -*a1 - *a2;
  double v8 = a1[1] + a2[1];
  fesetround(v6);
  int v9 = fegetround();
  fesetround(0x400000);
  double v10 = -a1[2] - a2[2];
  double v11 = a1[3] + a2[3];
  fesetround(v9);
  double result = -v10;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v10;
  a3[3] = v11;
  return result;
}

uint64_t HDroplet::GetOutput(HDroplet *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2)) {
    (*(void (**)(HDroplet *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);
  }

  return HgcDroplet::GetOutput(this, a2);
}

uint64_t HDroplet::SetOutputToImage(double *a1, double *a2)
{
  uint64_t v2 = a1 + 52;
  if (a1 + 52 != a2)
  {
    uint64_t v3 = 0;
    int v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  float v6 = *a2;
  float v7 = a2[5];
  float v8 = a2[3];
  float v9 = a2[7];
  return (*(uint64_t (**)(double *, void, float, float, float, float))(*(void *)a1 + 96))(a1, 0, v6, v7, v8, v9);
}

uint64_t HDroplet::SetImageToInput(double *a1, double *a2)
{
  uint64_t v2 = a1 + 68;
  if (a1 + 68 != a2)
  {
    uint64_t v3 = 0;
    int v4 = a2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  float v6 = *a2;
  float v7 = a2[5];
  float v8 = a2[3];
  float v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(void *)a1 + 96))(a1, 1, v6, v7, v8, v9);
}

uint64_t HDroplet::SetBiasThicknessAndScale(HDroplet *this, double a2, double a3, double a4)
{
  *((double *)this + 84) = a2;
  *((double *)this + 85) = a3;
  *((double *)this + 86) = a4;
  float v4 = 1.0 / a3;
  float v5 = -a2 / a3;
  float v6 = a4;
  return (*(uint64_t (**)(HDroplet *, uint64_t, float, float, float, double))(*(void *)this + 96))(this, 2, v4, v5, v6, 0.0);
}

void HDroplet::~HDroplet(HGNode *this)
{
  HgcDroplet::~HgcDroplet(this);

  HGObject::operator delete(v1);
}

uint64_t boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6 = fegetround();
  fesetround(0x400000);
  double v8 = *a1;
  double v7 = a1[1];
  if (*a1 >= 0.0)
  {
    if (v7 > 0.0)
    {
      double v17 = *a2;
      double v9 = a2[1];
      if (*a2 < 0.0)
      {
        double v18 = -(v17 * v7);
        if (v9 <= 0.0)
        {
          double v25 = -v18;
          double v26 = v8 * v9;
          goto LABEL_30;
        }
        double v28 = v18;
        goto LABEL_23;
      }
      if (v9 > 0.0)
      {
        double v22 = -(v17 * v8);
        goto LABEL_22;
      }
    }
LABEL_27:
    *a3 = 0.0;
    a3[1] = 0.0;
    return fesetround(v6);
  }
  double v10 = *a2;
  double v9 = a2[1];
  if (v7 <= 0.0)
  {
    if (v10 < 0.0)
    {
      double v19 = -v9;
      double v20 = v8 * v10;
      if (v9 <= 0.0) {
        double v21 = v7 * v19;
      }
      else {
        double v21 = v8 * v19;
      }
      double v25 = -v21;
      double v29 = v20;
      goto LABEL_33;
    }
    if (v9 > 0.0)
    {
      double v23 = --(v9 * v8);
      double v24 = v7 * v10;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  if (v10 >= 0.0)
  {
    if (v9 > 0.0)
    {
      double v22 = -(v9 * v8);
LABEL_22:
      double v28 = v22;
LABEL_23:
      double v23 = -v28;
      double v24 = v7 * v9;
LABEL_26:
      *a3 = v23;
      a3[1] = v24;
      return fesetround(v6);
    }
    goto LABEL_27;
  }
  if (v9 <= 0.0)
  {
    double v25 = --(v10 * v7);
    double v26 = v8 * v10;
LABEL_30:
    double v29 = v26;
LABEL_33:
    *a3 = v25;
    a3[1] = v29;
    return fesetround(v6);
  }
  double v11 = -(v9 * v8);
  double v12 = -(v10 * v7);
  double v13 = v8 * v10;
  double v14 = v7 * v9;
  if (v12 <= v11) {
    double v15 = v11;
  }
  else {
    double v15 = v12;
  }
  double v16 = -v15;
  if (v13 >= v14) {
    double v14 = v13;
  }
  *a3 = v16;
  a3[1] = v14;
  return fesetround(v6);
}

uint64_t boost::numeric::sqrt<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *a1@<X0>, double *a2@<X8>)
{
  if (a1[1] < 0.0) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  int v4 = fegetround();
  fesetround(0x400000);
  double v5 = 0.0;
  if (*a1 > 0.0)
  {
    fesetround(0x800000);
    double v5 = sqrt(*a1);
    fesetround(0x400000);
  }
  double v7 = sqrt(a1[1]);
  *a2 = v5;
  a2[1] = v7;
  return fesetround(v4);
}

void sub_1B7536F70(_Unwind_Exception *a1)
{
  fesetround(v1);
  _Unwind_Resume(a1);
}

uint64_t HConcentricCirclesGradient::GetROI(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0;
  }
  else {
    return -1;
  }
}

void HConcentricCirclesGradient::~HConcentricCirclesGradient(HGNode *this)
{
  HgcConcentricCirclesGradient::~HgcConcentricCirclesGradient(this);

  HGObject::operator delete(v1);
}

unint64_t HSlicedScale::GetDOD(HSlicedScale *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    (*(void (**)(HSlicedScale *, uint64_t, float *, void, void))(*(void *)this + 104))(this, 5, &v61, *(void *)&a4.var0, *(void *)&a4.var2);
    float v51 = v62;
    float v52 = v61;
    float v57 = v64;
    float v58 = v63;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 6, &v61);
    float v47 = v61;
    float v48 = v62;
    float v54 = v64;
    float v55 = v63;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 7, &v61);
    float v46 = v61;
    float v53 = v62;
    float v56 = v63;
    float v60 = v64;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 8, &v61);
    float v45 = v62;
    float v49 = v61;
    float v50 = v63;
    float v59 = v64;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 10, &v61);
    float v43 = v61;
    float v44 = v62;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 9, &v61);
    float v7 = v61;
    float v8 = v62;
    (*(void (**)(HSlicedScale *, void, float *))(*(void *)this + 104))(this, 0, &v61);
    float v9 = v61;
    float v10 = v62;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v61);
    float v11 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v61);
    float v12 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v61);
    float v13 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 4, &v61);
    float v14 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 11, &v61);
    float v15 = 0.5 - v61;
    if (v11 <= (float)(0.5 - v61)) {
      float v16 = v11;
    }
    else {
      float v16 = 0.5 - v61;
    }
    if (v13 <= v15) {
      float v15 = v13;
    }
    float v17 = v61 + -0.5;
    if (v12 >= (float)(v61 + -0.5)) {
      float v18 = v12;
    }
    else {
      float v18 = v61 + -0.5;
    }
    if (v14 >= v17) {
      float v17 = v14;
    }
    float v19 = (float)*((int *)this + 104);
    float v20 = (float)*((int *)this + 105);
    float v21 = (float)(v46
                * (float)((float)(v57 + (float)((float)(v58 * 0.0) + (float)((float)(v52 * v19) + (float)(v51 * v20))))
                        / v7))
        - (float)(v18 - (float)(v9 * v18));
    float v22 = (float)(v45
                * (float)((float)(v54 + (float)((float)(v55 * 0.0) + (float)((float)(v47 * v19) + (float)(v48 * v20))))
                        / v8))
        - (float)(v17 - (float)(v10 * v17));
    float v23 = v43;
    if (v9 > v61) {
      float v23 = 1.0;
    }
    float v24 = v23 * v21;
    float v25 = v44;
    if (v10 > v61) {
      float v25 = 1.0;
    }
    float v26 = v52 * (float)(v7 * v24);
    float v27 = v48 * (float)(v8 * (float)(v25 * v22));
    float v28 = (float)(v46 * v26) + (float)(v53 * v27);
    float v29 = (float)*((int *)this + 106);
    float v30 = (float)(v49 * v26) + (float)(v45 * v27);
    float v31 = (float)*((int *)this + 107);
    float v32 = v52
        * (float)(v7
                * (float)(v23
                        * (float)((float)((float)(v9 * v16) - v16)
                                + (float)(v46
                                        * (float)((float)(v57
                                                        + (float)((float)(v58 * 0.0)
                                                                + (float)((float)(v52 * v29) + (float)(v51 * v31))))
                                                / v7)))));
    float v33 = v48
        * (float)(v8
                * (float)(v25
                        * (float)((float)((float)(v10 * v15) - v15)
                                + (float)(v45
                                        * (float)((float)(v54
                                                        + (float)((float)(v55 * 0.0)
                                                                + (float)((float)(v47 * v29) + (float)(v48 * v31))))
                                                / v8)))));
    unint64_t v4 = HGRectMake4i(vcvtmd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + v28)) + -1.0 + 0.0000001), vcvtmd_s64_f64((float)(v59 + (float)((float)(v50 * 0.0) + v30)) + -1.0 + 0.0000001), vcvtpd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + (float)((float)(v46 * v32) + (float)(v53 * v33)))) + 1.0), vcvtpd_s64_f64((float)(v59 + (float)((float)(v50 * 0.0) + (float)((float)(v49 * v32) + (float)(v45 * v33)))) + 1.0));
    unint64_t v5 = HIDWORD(v4);
    if ((v4 - 0x7FFFFFFF) < 3
      || v34 == 0x7FFFFFFF
      || v34 < -2147483646
      || (HIDWORD(v4) - 0x7FFFFFFF) < 3
      || v35 == 0x7FFFFFFF
      || v35 < -2147483646)
    {
      LODWORD(v4) = 0;
      LODWORD(v5) = 0;
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

unint64_t HSlicedScale::GetROI(HSlicedScale *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
    return v4 | ((unint64_t)v5 << 32);
  }
  int var2 = a4.var2;
  int var0 = a4.var0;
  int var3 = a4.var3;
  int var1 = a4.var1;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 5, &v80);
  float v69 = v81;
  float v70 = v80;
  float v72 = v82;
  float v68 = v83;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 6, &v80);
  float v66 = v81;
  float v67 = v80;
  float v71 = v82;
  float v65 = v83;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 7, &v80);
  float v64 = v80;
  float v75 = v82;
  float v78 = v81;
  float v79 = v83;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 8, &v80);
  float v63 = v81;
  float v74 = v82;
  float v76 = v80;
  float v77 = v83;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 10, &v80);
  float v61 = v81;
  float v62 = v80;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 9, &v80);
  float v11 = v80;
  float v12 = v81;
  (*(void (**)(HSlicedScale *, void, float *))(*(void *)this + 104))(this, 0, &v80);
  float v13 = v80;
  float v14 = v81;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 1, &v80);
  float v15 = v80;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 2, &v80);
  float v16 = v80;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 3, &v80);
  float v17 = v80;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 4, &v80);
  float v18 = v80;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(void *)this + 104))(this, 11, &v80);
  if (v15 <= (float)(0.5 - v80)) {
    float v19 = v15;
  }
  else {
    float v19 = 0.5 - v80;
  }
  if (v17 <= (float)(0.5 - v80)) {
    float v20 = v17;
  }
  else {
    float v20 = 0.5 - v80;
  }
  if (v16 >= (float)(v80 + -0.5)) {
    float v21 = v16;
  }
  else {
    float v21 = v80 + -0.5;
  }
  if (v18 >= (float)(v80 + -0.5)) {
    float v22 = v18;
  }
  else {
    float v22 = v80 + -0.5;
  }
  float v23 = v72 * 0.0;
  float v24 = v11;
  float v25 = (float)(v68 + (float)((float)((float)(v70 * (float)var0) + (float)(v69 * (float)var1)) + (float)(v72 * 0.0)))
      / v11;
  float v26 = v20;
  float v27 = (float)(v64 * v25) / v62;
  float v28 = (float)(v63
              * (float)((float)(v65
                              + (float)((float)((float)(v67 * (float)var0) + (float)(v66 * (float)var1))
                                      + (float)(v71 * 0.0)))
                      / v12))
      / v61;
  float v29 = v13 * v19;
  float v73 = v13;
  float v30 = v13 * v21;
  float v31 = v14 * v26;
  float v32 = v14 * v22;
  float v33 = v21 - (float)(v13 * v21);
  if (v27 >= (float)(v13 * v19))
  {
    float v34 = v27 - (float)(v29 - v19);
  }
  else
  {
    if (v27 > v30)
    {
      float v34 = 0.0;
      float v35 = v78;
      float v36 = v76;
      float v37 = v12;
      float v38 = v24;
      if (v27 < v29) {
        float v34 = v27 / v73;
      }
      goto LABEL_22;
    }
    float v34 = v27 + v33;
  }
  float v35 = v78;
  float v36 = v76;
  float v37 = v12;
  float v38 = v24;
LABEL_22:
  float v39 = (float)var2;
  float v40 = (float)var3;
  float v41 = v22 - v32;
  if (v28 >= v31)
  {
    float v42 = v28 - (float)(v31 - v26);
  }
  else if (v28 <= v32)
  {
    float v42 = v28 + v41;
  }
  else
  {
    float v42 = 0.0;
    if (v28 < v31) {
      float v42 = v28 / v14;
    }
  }
  float v43 = v70 * (float)(v38 * v34);
  float v44 = v66 * (float)(v37 * v42);
  float v45 = (float)(v75 * 0.0) + (float)((float)(v64 * v43) + (float)(v35 * v44));
  float v46 = (float)(v74 * 0.0) + (float)((float)(v36 * v43) + (float)(v63 * v44));
  float v47 = (float)(v64 * (float)((float)(v68 + (float)((float)((float)(v70 * v39) + (float)(v69 * v40)) + v23)) / v38))
      / v62;
  float v48 = (float)(v63
              * (float)((float)(v65 + (float)((float)((float)(v67 * v39) + (float)(v66 * v40)) + (float)(v71 * 0.0)))
                      / v37))
      / v61;
  if (v47 >= v29)
  {
    float v50 = v47 - (float)(v29 - v19);
    float v49 = v77;
  }
  else
  {
    float v49 = v77;
    if (v47 <= v30)
    {
      float v50 = v47 + v33;
    }
    else
    {
      float v50 = 0.0;
      if (v47 < v29) {
        float v50 = v47 / v73;
      }
    }
  }
  if (v48 >= v31)
  {
    float v51 = v48 - (float)(v31 - v26);
  }
  else if (v48 <= v32)
  {
    float v51 = v48 + v41;
  }
  else
  {
    float v51 = 0.0;
    if (v48 < v31) {
      float v51 = v48 / v14;
    }
  }
  unint64_t v4 = HGRectMake4i(vcvtmd_s64_f64((float)(v79 + v45) + -1.0 + 0.0000001), vcvtmd_s64_f64((float)(v49 + v46) + -1.0 + 0.0000001), vcvtpd_s64_f64((float)(v79+ (float)((float)(v75 * 0.0)+ (float)((float)(v64 * (float)(v70 * (float)(v38 * v50)))+ (float)(v35 * (float)(v66 * (float)(v37 * v51))))))+ 1.0), vcvtpd_s64_f64((float)(v49+ (float)((float)(v74 * 0.0)+ (float)((float)(v36 * (float)(v70 * (float)(v38 * v50)))+ (float)(v63 * (float)(v66 * (float)(v37 * v51))))))+ 1.0));
  unint64_t v5 = HIDWORD(v4);
  if ((v4 - 0x7FFFFFFF) < 3
    || v52 == 0x7FFFFFFF
    || v52 < -2147483646
    || (HIDWORD(v4) - 0x7FFFFFFF) < 3
    || v53 == 0x7FFFFFFF
    || v53 < -2147483646)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void HSlicedScale::~HSlicedScale(HGNode *this)
{
  HgcSlicedScale::~HgcSlicedScale(this);

  HGObject::operator delete(v1);
}

void sub_1B7538044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B753892C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 24))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7539100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B7539744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  HGObject::operator delete(v11);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(a1);
}

void sub_1B753AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  HGObject::operator delete(v29);
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  _Unwind_Resume(a1);
}

void sub_1B753B528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(a1);
}

CGColorSpace **convertRGBColor(double *a1, double *a2, double *a3)
{
  float v6 = *a1;
  float v7 = *a2;
  float v8 = *a3;
  float v9 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
  PCColor::PCColor(&v14, v6, v7, v8, v9);
  uint64_t v13 = 0;
  float v12 = 0.0;
  uint64_t v10 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
  PCColor::getRGB(&v14, (float *)&v13 + 1, (float *)&v13, &v12, v10);
  *a1 = *((float *)&v13 + 1);
  *a2 = *(float *)&v13;
  *a3 = v12;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v14.var1._obj);
}

void sub_1B753B754(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1B753C43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HGObject::operator delete(v24);
  (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
  (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B753CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B753DBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 24))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B753E0E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B753E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)uint64_t v10 = &unk_1F1094EB8;
  *(void *)(v10 + 32) = &unk_1F1094EF8;
  a10 = (void **)(v10 + 80);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B753E270(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B753E5AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B753F510(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B753FE18(_Unwind_Exception *a1)
{
  *(void *)(v3 - 152) = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 152));
  *(void *)(v3 - 152) = v1;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 152));
  _Unwind_Resume(a1);
}

uint64_t cc::curve::aspline::offsetcolor_t<double>::~offsetcolor_t(uint64_t a1)
{
  *(void *)a1 = &unk_1F1094EB8;
  *(void *)(a1 + 32) = &unk_1F1094EF8;
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_1F1094EB8;
  *(void *)(a1 + 32) = &unk_1F1094EF8;
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1BA9BFBA0](a1, 0x10A1C4008CDC881);
}

uint64_t *anonymous namespace'::NewCurve@<X0>(double a1@<D0>, double a2@<D1>, double a3@<D2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  float v6 = (uint64_t *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)a4 = &unk_1F1094EB8;
  *(void *)(a4 + 32) = &unk_1F1094EF8;
  *(double *)(a4 + 4pthread_cond_init((pthread_cond_t *)this, 0) = a1;
  *(double *)(a4 + 48) = a2;
  *(double *)(a4 + 56) = a3;
  *(void *)(a4 + 8pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  float v7 = (void *)(a4 + 80);
  *(void *)(a4 + 88) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = &unk_1F1093A40;
  *(void *)(a4 + 104) = &unk_1F1093A68;
  *(void *)(a4 + 112) = cc::curve::aspline::bezier_t<double,false>::evalNonPeriodic;
  *(void *)(a4 + 12pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  long long v52 = 0uLL;
  float v51 = &unk_1F108BF48;
  std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100]((uint64_t *)(a4 + 8), (uint64_t)&v51);
  float v51 = &unk_1F108BF48;
  long long v52 = xmmword_1B7E733D0;
  double result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v6, (uint64_t)&v51);
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
  if (v11 <= 1) {
    return std::vector<cc::point_t<double,false,false>>::resize((uint64_t *)(a4 + 80), 4uLL);
  }
  if (v11 <= 0x5555555555555554)
  {
    uint64_t v12 = v10 - 24;
    if (v10 - 24 == v9) {
      unint64_t v13 = v10 - 24;
    }
    else {
      unint64_t v13 = v10 - 48;
    }
    long long v52 = 0uLL;
    float v51 = &unk_1F108BF48;
    double result = std::vector<cc::point_t<double,false,false>>::resize((uint64_t *)(a4 + 80), ((v10 - v9) >> 3) - 2);
    uint64_t v14 = *v6;
    if (*v6 != v12)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *v7;
      unint64_t v17 = *v6;
      while (1)
      {
        float64x2_t v50 = *(float64x2_t *)(v17 + 32);
        int8x16_t v18 = (int8x16_t)vsubq_f64(v50, *(float64x2_t *)(v17 + 8));
        float64x2_t v19 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v18), (int8x16_t)vnegq_f64((float64x2_t)v18), v18);
        long long v52 = (__int128)v19;
        if (v19.f64[0] < 0.0) {
          v19.f64[0] = -v19.f64[0];
        }
        v19.f64[0] = v19.f64[0] * 0.3334;
        double result = (uint64_t *)(v16 + v15);
        *(_OWORD *)(v16 + v15 + 8) = *(_OWORD *)(v17 + 8);
        if (!v15) {
          break;
        }
        double v49 = *(double *)(v17 - 16);
        double v20 = *(double *)(v17 - 8);
        double v21 = -(v50.f64[0] - v49);
        if (v50.f64[0] - v49 >= 0.0) {
          double v21 = v50.f64[0] - v49;
        }
        double v22 = (v50.f64[1] - v20) / (v50.f64[0] - v49);
        if (v21 < 0.00000011920929) {
          double v22 = 0.0;
        }
        *((double *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v22;
        *(void *)&long long v52 = 0x3FF0000000000000;
        double v23 = *(double *)(v17 + 16);
        int v24 = v20 - v23 >= 0.0;
        int v25 = v50.f64[1] - v23 < 0.0;
        if (v25 != v24)
        {
          *((void *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
          double v22 = 0.0;
        }
        double v26 = v19.f64[0] * v22 + *(double *)(v17 + 16);
        float v27 = (float64x2_t *)(v16 + v15);
        v27[2].f64[0] = v19.f64[0] + *(double *)(v17 + 8);
        v27[2].f64[1] = v26;
        if (v25 != v24) {
          v27[-1].f64[1] = v26;
        }
        if (v17 < v13) {
          goto LABEL_23;
        }
        float64x2_t v28 = v50;
        float64x2_t v29 = v27[2];
LABEL_26:
        float64x2_t v30 = vsubq_f64(v28, v29);
        double v31 = -v30.f64[0];
        if (v30.f64[0] >= 0.0) {
          double v31 = v30.f64[0];
        }
        *(void *)&double v32 = *(_OWORD *)&vdivq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1), v30);
        if (v31 < 0.00000011920929) {
          double v32 = 0.0;
        }
        *((double *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v32;
        *(void *)&long long v52 = 0x3FF0000000000000;
        double v33 = v50.f64[1] - v19.f64[0] * v32;
        float v34 = (float64x2_t *)(v16 + v15);
        v34[3].f64[1] = v50.f64[0] - v19.f64[0];
        v34[4].f64[0] = v33;
        if (!v15)
        {
          double v35 = v34[3].f64[1] - *(double *)(v17 + 8);
          double v36 = v33 - *(double *)(v17 + 16);
          double v37 = -v35;
          if (v35 >= 0.0) {
            double v37 = v34[3].f64[1] - *(double *)(v17 + 8);
          }
          double v38 = v36 / v35;
          if (v37 < 0.00000011920929) {
            double v38 = 0.0;
          }
          *((double *)&v52 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v38;
          *(void *)&long long v52 = 0x3FF0000000000000;
          v19.f64[1] = v19.f64[0] * v38;
          _OWORD v34[2] = vaddq_f64(v19, *(float64x2_t *)(result + 1));
        }
        v17 += 24;
        v15 += 72;
        if (v17 == v12) {
          goto LABEL_37;
        }
      }
      if (v17 >= v13) {
        float64x2_t v28 = v50;
      }
      else {
LABEL_23:
      }
        float64x2_t v28 = *(float64x2_t *)(v17 + 56);
      float64x2_t v29 = *(float64x2_t *)(v17 + 8);
      goto LABEL_26;
    }
LABEL_37:
    *(_OWORD *)(*(void *)(a4 + 88) - 16) = *(_OWORD *)(v10 - 16);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 16) - v14) >> 3) >= 3 && v14 != v12)
    {
      uint64_t v40 = 0;
      float v41 = (double *)(*v7 + 64);
      do
      {
        int8x16_t v42 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v14 + v40 + 32), *(float64x2_t *)(v14 + v40 + 8));
        int8x16_t v43 = vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v42), (int8x16_t)vnegq_f64((float64x2_t)v42), v42);
        long long v52 = (__int128)v43;
        double v44 = 1.0;
        if (*(double *)&v43.i64[1] > 0.00000011920929)
        {
          double v44 = 0.0;
          if (*(double *)v43.i64 > 0.00000011920929)
          {
            double v45 = *(double *)&v43.i64[1] / *(double *)v43.i64 * -3.0 + 1.0;
            if (v45 >= 0.0)
            {
              double v44 = 1.0;
              if (v45 <= 1.0) {
                double v44 = v45;
              }
            }
          }
        }
        double v46 = v44 * *(v41 - 6);
        double v47 = 1.0 - v44;
        *(v41 - 3) = v46 + (1.0 - v44) * *(v41 - 3);
        double v48 = v44 * v41[3];
        *float v41 = v48 + v47 * *v41;
        if (v14 + v40 != v13) {
          v41[6] = v48 + v47 * v41[6];
        }
        if (v40) {
          *(v41 - 9) = v46 + v47 * *(v41 - 9);
        }
        v40 += 24;
        v41 += 9;
      }
      while (v14 + v40 != v12);
    }
  }
  return result;
}

void sub_1B7540498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  void *v8 = v9;
  _OWORD v8[4] = v10;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *cc::curve::aspline::offsetcolor_t<double>::insertPointIsolation(uint64_t *result, uint64_t *a2, __n128 a3, double a4, double a5)
{
  float v8 = result;
  double v9 = 1.0;
  if (a3.n128_f64[0] <= 1.0) {
    double v9 = a3.n128_f64[0];
  }
  if (a3.n128_f64[0] >= 0.0) {
    double v10 = v9;
  }
  else {
    double v10 = 0.0;
  }
  v83[0] = v10;
  uint64_t v11 = result[1];
  uint64_t v12 = result[2];
  unint64_t v13 = result + 1;
  if (v11 == v12)
  {
LABEL_18:
    double v20 = (*(double (**)(uint64_t *, double *))(*result + 24))(result, v83) - *((double *)result + 8);
    float v87 = &unk_1F108BF48;
    v88.f64[0] = v83[0];
    v88.f64[1] = v20;
    double result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](a2, (uint64_t)&v87);
    a3.n128_f64[0] = v83[0];
  }
  else
  {
    double v14 = v10 - a5;
    double v15 = v10 + a5;
    double v16 = v10 - v10;
    if (v10 - v10 < 0.0) {
      double v16 = -(v10 - v10);
    }
    while (1)
    {
      double v17 = *(double *)(v11 + 8);
      if (v17 > v14 && v17 < v15) {
        break;
      }
      if (v17 >= 0.0)
      {
        double v19 = v17 - v10;
        if (v19 < 0.0) {
          double v19 = -v19;
        }
        if (v19 <= v16) {
          break;
        }
      }
      v11 += 24;
      if (v11 == v12) {
        goto LABEL_18;
      }
    }
    a3.n128_f64[0] = v10;
  }
  double v21 = a3.n128_f64[0] - a4;
  v83[0] = v21;
  if (v21 > 0.0)
  {
    uint64_t v22 = v8[1];
    uint64_t v23 = v8[2];
    if (v22 == v23)
    {
LABEL_36:
      double v29 = (*(double (**)(uint64_t *, double *))(*v8 + 24))(v8, v83) - *((double *)v8 + 8);
      float v87 = &unk_1F108BF48;
      v88.f64[0] = v83[0];
      v88.f64[1] = v29;
      double result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](a2, (uint64_t)&v87);
    }
    else
    {
      double v24 = v21 - v10;
      if (v21 - v10 < 0.0) {
        double v24 = -(v21 - v10);
      }
      while (1)
      {
        double v25 = *(double *)(v22 + 8);
        if (v25 > v21 - a5 && v25 < v21 + a5) {
          break;
        }
        if (v25 >= 0.0)
        {
          double v27 = v25 - v10;
          if (v25 - v10 < 0.0) {
            double v27 = -(v25 - v10);
          }
          if (v27 <= v24)
          {
            double v28 = v25 - v21;
            if (v28 < 0.0) {
              double v28 = -v28;
            }
            if (v28 <= v24) {
              break;
            }
          }
        }
        v22 += 24;
        if (v22 == v23) {
          goto LABEL_36;
        }
      }
    }
  }
  a3.n128_f64[0] = v10 + a4;
  v83[0] = v10 + a4;
  if (v10 + a4 < 1.0)
  {
    uint64_t v30 = v8[1];
    uint64_t v31 = v8[2];
    if (v30 == v31)
    {
LABEL_53:
      double v37 = (*(double (**)(uint64_t *, double *, __n128))(*v8 + 24))(v8, v83, a3) - *((double *)v8 + 8);
      float v87 = &unk_1F108BF48;
      v88.f64[0] = v83[0];
      v88.f64[1] = v37;
      double result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](a2, (uint64_t)&v87);
    }
    else
    {
      double v32 = a3.n128_f64[0] - v10;
      if (a3.n128_f64[0] - v10 < 0.0) {
        double v32 = -(a3.n128_f64[0] - v10);
      }
      while (1)
      {
        double v33 = *(double *)(v30 + 8);
        if (v33 > a3.n128_f64[0] - a5 && v33 < a3.n128_f64[0] + a5) {
          break;
        }
        if (v33 >= 0.0)
        {
          double v35 = v33 - v10;
          if (v33 - v10 < 0.0) {
            double v35 = -(v33 - v10);
          }
          if (v35 <= v32)
          {
            double v36 = v33 - a3.n128_f64[0];
            if (v36 < 0.0) {
              double v36 = -v36;
            }
            if (v36 <= v32) {
              break;
            }
          }
        }
        v30 += 24;
        if (v30 == v31) {
          goto LABEL_53;
        }
      }
    }
  }
  for (unint64_t i = *a2; i != a2[1]; i += 24)
  {
    float v39 = (void *)v8[1];
    uint64_t v40 = (void *)v8[2];
    if (v39 == v40)
    {
LABEL_60:
      double result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v13, i);
    }
    else
    {
      uint64_t v41 = v8[1];
      while (*(double *)(v41 + 8) < *(double *)(i + 8))
      {
        v41 += 24;
        v39 += 3;
        if ((void *)v41 == v40) {
          goto LABEL_60;
        }
      }
      double result = (uint64_t *)std::vector<cc::point_t<double,false,false>>::insert(v13, v39, i);
    }
  }
  uint64_t v42 = v8[1];
  uint64_t v43 = v8[2];
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
  if (v44 <= 1) {
    return std::vector<cc::point_t<double,false,false>>::resize(v8 + 10, 4uLL);
  }
  if (v44 <= 0x5555555555555554)
  {
    uint64_t v45 = v43 - 24;
    if (v43 - 24 == v42) {
      unint64_t v46 = v43 - 24;
    }
    else {
      unint64_t v46 = v43 - 48;
    }
    double v47 = v8 + 10;
    float64x2_t v88 = 0uLL;
    float v87 = &unk_1F108BF48;
    double result = std::vector<cc::point_t<double,false,false>>::resize(v8 + 10, ((v43 - v42) >> 3) - 2);
    uint64_t v48 = v8[1];
    if (v48 != v45)
    {
      uint64_t v49 = 0;
      uint64_t v50 = *v47;
      unint64_t v51 = v8[1];
      while (1)
      {
        float v85 = &unk_1F108BF48;
        float64x2_t v86 = *(float64x2_t *)(v51 + 32);
        int8x16_t v52 = (int8x16_t)vsubq_f64(v86, *(float64x2_t *)(v51 + 8));
        float64x2_t v53 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v52), (int8x16_t)vnegq_f64((float64x2_t)v52), v52);
        float64x2_t v88 = v53;
        if (v53.f64[0] < 0.0) {
          v53.f64[0] = -v53.f64[0];
        }
        v53.f64[0] = v53.f64[0] * 0.3334;
        double result = (uint64_t *)(v50 + v49);
        *(_OWORD *)(v50 + v49 + 8) = *(_OWORD *)(v51 + 8);
        if (!v49) {
          break;
        }
        *(void *)&v83[1] = &unk_1F108BF48;
        v84.f64[0] = *(float64_t *)(v51 - 16);
        double v54 = *(double *)(v51 - 8);
        v84.f64[1] = v54;
        double v55 = -(v86.f64[0] - v84.f64[0]);
        if (v86.f64[0] - v84.f64[0] >= 0.0) {
          double v55 = v86.f64[0] - v84.f64[0];
        }
        double v56 = (v86.f64[1] - v54) / (v86.f64[0] - v84.f64[0]);
        if (v55 < 0.00000011920929) {
          double v56 = 0.0;
        }
        v88.f64[1] = v56;
        v88.f64[0] = 1.0;
        double v57 = *(double *)(v51 + 16);
        int v58 = v54 - v57 >= 0.0;
        int v59 = v86.f64[1] - v57 < 0.0;
        if (v59 != v58)
        {
          v88.f64[1] = 0.0;
          double v56 = 0.0;
        }
        double v60 = v53.f64[0] * v56 + *(double *)(v51 + 16);
        float v61 = (float64x2_t *)(v50 + v49);
        v61[2].f64[0] = v53.f64[0] + *(double *)(v51 + 8);
        v61[2].f64[1] = v60;
        if (v59 != v58) {
          v61[-1].f64[1] = v60;
        }
        if (v51 < v46) {
          goto LABEL_85;
        }
        float64x2_t v62 = v86;
        float64x2_t v84 = v86;
        float64x2_t v63 = v61[2];
LABEL_88:
        float64x2_t v64 = vsubq_f64(v62, v63);
        double v65 = -v64.f64[0];
        if (v64.f64[0] >= 0.0) {
          double v65 = v64.f64[0];
        }
        *(void *)&double v66 = *(_OWORD *)&vdivq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v64, 1), v64);
        if (v65 < 0.00000011920929) {
          double v66 = 0.0;
        }
        v88.f64[1] = v66;
        v88.f64[0] = 1.0;
        double v67 = v86.f64[1] - v53.f64[0] * v66;
        float v68 = (float64x2_t *)(v50 + v49);
        v68[3].f64[1] = v86.f64[0] - v53.f64[0];
        v68[4].f64[0] = v67;
        if (!v49)
        {
          double v69 = v68[3].f64[1] - *(double *)(v51 + 8);
          double v70 = v67 - *(double *)(v51 + 16);
          double v71 = -v69;
          if (v69 >= 0.0) {
            double v71 = v68[3].f64[1] - *(double *)(v51 + 8);
          }
          double v72 = v70 / v69;
          if (v71 < 0.00000011920929) {
            double v72 = 0.0;
          }
          v88.f64[1] = v72;
          v88.f64[0] = 1.0;
          v84.f64[0] = v53.f64[0];
          v84.f64[1] = v53.f64[0] * v72;
          v53.f64[1] = v53.f64[0] * v72;
          v68[2] = vaddq_f64(v53, *(float64x2_t *)(result + 1));
        }
        v51 += 24;
        v49 += 72;
        if (v51 == v45) {
          goto LABEL_99;
        }
      }
      if (v51 >= v46) {
        float64x2_t v62 = v86;
      }
      else {
LABEL_85:
      }
        float64x2_t v62 = *(float64x2_t *)(v51 + 56);
      float64x2_t v63 = *(float64x2_t *)(v51 + 8);
      goto LABEL_88;
    }
LABEL_99:
    *(_OWORD *)(v8[11] - 16) = *(_OWORD *)(v43 - 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v8[2] - v48) >> 3) >= 3 && v48 != v45)
    {
      uint64_t v74 = 0;
      float v75 = (double *)(*v47 + 64);
      do
      {
        int8x16_t v76 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v48 + v74 + 32), *(float64x2_t *)(v48 + v74 + 8));
        int8x16_t v77 = vbslq_s8((int8x16_t)vcltzq_f64((float64x2_t)v76), (int8x16_t)vnegq_f64((float64x2_t)v76), v76);
        float64x2_t v88 = (float64x2_t)v77;
        double v78 = 1.0;
        if (*(double *)&v77.i64[1] > 0.00000011920929)
        {
          double v78 = 0.0;
          if (*(double *)v77.i64 > 0.00000011920929)
          {
            double v79 = *(double *)&v77.i64[1] / *(double *)v77.i64 * -3.0 + 1.0;
            if (v79 >= 0.0)
            {
              double v78 = 1.0;
              if (v79 <= 1.0) {
                double v78 = v79;
              }
            }
          }
        }
        double v80 = v78 * *(v75 - 6);
        double v81 = 1.0 - v78;
        *(v75 - 3) = v80 + (1.0 - v78) * *(v75 - 3);
        double v82 = v78 * v75[3];
        *float v75 = v82 + v81 * *v75;
        if (v48 + v74 != v46) {
          v75[6] = v82 + v81 * v75[6];
        }
        if (v74) {
          *(v75 - 9) = v80 + v81 * *(v75 - 9);
        }
        v74 += 24;
        v75 += 9;
      }
      while (v48 + v74 != v45);
    }
  }
  return result;
}

double cc::curve::aspline::offsetcolor_t<double>::evaluate(uint64_t a1)
{
  uint64_t v2 = *(double (**)(void *))(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  unint64_t v4 = (void *)(a1 + (v3 >> 1) + 72);
  if (v3) {
    uint64_t v2 = *(double (**)(void *))(*v4 + v2);
  }
  return v2(v4) + *(double *)(a1 + 64);
}

BOOL cc::curve::aspline::offsetcolor_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  if (a3)
  {
    double v10 = a2;
    uint64_t v11 = a1 + 104;
    unint64_t v12 = (unint64_t)&a2[a3];
    float v13 = a7 - a6;
    double v14 = v13;
    double v15 = a6;
    double v16 = (float)(1.0 / v13);
    double v17 = (float)((float)-a6 / v13);
    double v18 = 0.0;
    double v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      double v27 = 0.0;
      double v26 = v18 * v14 + v15;
      double v20 = (*(double (**)(uint64_t, double *))(*(void *)v11 + 16))(v11, &v26);
      double v27 = v20;
      if (a5)
      {
        a5(&v27);
        double v20 = v27;
      }
      double v21 = v20 * v16 + v17;
      double v22 = v21 * 65535.0;
      if (v21 > 1.0) {
        double v22 = 65535.0;
      }
      BOOL v23 = v21 < 0.0;
      double v24 = 0.0;
      if (!v23) {
        double v24 = v22;
      }
      *v10++ = (int)v24;
      double v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4) {
      *double v10 = *(v10 - 1);
    }
  }
  return a3 != 0;
}

uint64_t cc::curve::aspline::offsetcolor_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(void *)(a2 + 16)) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      memmove(0, *(const void **)(a2 + 8), 0);
      *(void *)(a2 + 24) = 1024;
      MEMORY[0x1BA9BFB70](v7, 0x1000C80BDFB0063);
    }
    else
    {
      *(void *)(a2 + 24) = 1024;
    }
    operator new[]();
  }
  *(void *)(a2 + 16) = 1024;
  uint64_t v8 = *(void *)(a2 + 8);
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a1 + 104)
                                                                                             + 24);
  uint64_t v10 = a1 + 104;

  return v9(v10, v8, 1024, a3, a4, a5, a6);
}

void non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::~offsetcolor_t(uint64_t a1)
{
  *(void *)(a1 - 32) = &unk_1F1094EB8;
  *(void *)a1 = &unk_1F1094EF8;
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::~offsetcolor_t(uint64_t a1)
{
  uint64_t v2 = a1 - 32;
  *(void *)(a1 - 32) = &unk_1F1094EB8;
  *(void *)a1 = &unk_1F1094EF8;
  unint64_t v4 = (void **)(a1 + 48);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v4 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1BA9BFBA0](v2, 0x10A1C4008CDC881);
}

double non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::evaluate(uint64_t a1)
{
  uint64_t v2 = *(double (**)(void *))(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  unint64_t v4 = (void *)(a1 + (v3 >> 1) + 40);
  if (v3) {
    uint64_t v2 = *(double (**)(void *))(*v4 + v2);
  }
  return v2(v4) + *(double *)(a1 + 32);
}

BOOL non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  if (a3)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a1 + 72;
    unint64_t v12 = (unint64_t)&a2[a3];
    float v13 = a7 - a6;
    double v14 = v13;
    double v15 = a6;
    double v16 = (float)(1.0 / v13);
    double v17 = (float)((float)-a6 / v13);
    double v18 = 0.0;
    double v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      double v27 = 0.0;
      double v26 = v18 * v14 + v15;
      double v20 = (*(double (**)(uint64_t, double *))(*(void *)v11 + 16))(v11, &v26);
      double v27 = v20;
      if (a5)
      {
        a5(&v27);
        double v20 = v27;
      }
      double v21 = v20 * v16 + v17;
      double v22 = v21 * 65535.0;
      if (v21 > 1.0) {
        double v22 = 65535.0;
      }
      BOOL v23 = v21 < 0.0;
      double v24 = 0.0;
      if (!v23) {
        double v24 = v22;
      }
      *v10++ = (int)v24;
      double v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4) {
      *uint64_t v10 = *(v10 - 1);
    }
  }
  return a3 != 0;
}

uint64_t non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(void *)(a2 + 16)) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      memmove(0, *(const void **)(a2 + 8), 0);
      *(void *)(a2 + 24) = 1024;
      MEMORY[0x1BA9BFB70](v7, 0x1000C80BDFB0063);
    }
    else
    {
      *(void *)(a2 + 24) = 1024;
    }
    operator new[]();
  }
  *(void *)(a2 + 16) = 1024;
  uint64_t v8 = *(void *)(a2 + 8);
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a1 + 72)
                                                                                             + 24);
  uint64_t v10 = a1 + 72;

  return v9(v10, v8, 1024, a3, a4, a5, a6);
}

void sub_1B7541D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double PCMatrix33Tmpl<double>::operator*@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  double v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v5;
  uint64_t v11 = *(void *)(a1 + 64);
  PCMatrix33Tmpl<double>::operator*=((double *)v10, a2);
  long long v7 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v6;
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(a3 + 48) = v8;
  double result = *(double *)(v6 + 64);
  *(double *)(a3 + 64) = result;
  return result;
}

double PCMatrix33Tmpl<double>::operator*=(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = a1[3];
  *a1 = *a1 * *a2 + v3 * a2[3] + v4 * a2[6];
  a1[1] = v2 * a2[1] + v3 * a2[4] + v4 * a2[7];
  a1[2] = v2 * a2[2] + v3 * a2[5] + v4 * a2[8];
  double v6 = a1[4];
  double v7 = a1[5];
  a1[3] = v5 * *a2 + v6 * a2[3] + v7 * a2[6];
  a1[4] = v5 * a2[1] + v6 * a2[4] + v7 * a2[7];
  a1[5] = v5 * a2[2] + v6 * a2[5] + v7 * a2[8];
  double v8 = a1[6];
  double v9 = a1[7];
  double v10 = a1[8];
  a1[6] = v8 * *a2 + v9 * a2[3] + v10 * a2[6];
  a1[7] = v8 * a2[1] + v9 * a2[4] + v10 * a2[7];
  double result = v8 * a2[2] + v9 * a2[5] + v10 * a2[8];
  a1[8] = result;
  return result;
}

HGNode *HEquirectGaussianBlur::init(uint64_t a1, int a2, int a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, float32x2_t *a7, float a8, float a9, float a10)
{
  *(float *)(a1 + 408) = a8;
  *(float *)(a1 + 412) = a9;
  *(float *)(a1 + 416) = a10;
  *(_DWORD *)(a1 + 42pthread_cond_init((pthread_cond_t *)this, 0) = a2;
  *(_DWORD *)(a1 + 424) = a3;
  *(float *)double v33 = (float)a2;
  *((float *)v33 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = (float)a3;
  NewEquirectWrapNode((float32x2_t *)v33, a4, a5, a6, a7, &v42);
  float v13 = *(HGNode **)(a1 + 432);
  double v14 = v42;
  if (v13 != v42)
  {
    if (v13)
    {
      (*(void (**)(void))(*(void *)v13 + 24))(*(void *)(a1 + 432));
      double v14 = v42;
    }
    *(void *)(a1 + 432) = v14;
    if (v14) {
      (*(void (**)(HGNode *))(*(void *)v14 + 16))(v14);
    }
  }
  double v15 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
  HGaussianBlur::HGaussianBlur(v15);
  (*(void (**)(HGaussianBlur *, void, HGNode *))(*(void *)v15 + 120))(v15, 0, v42);
  HGaussianBlur::init(v15, *(float *)(a1 + 408), 0.0, *(float *)(a1 + 416), 0, 0, 0);
  (*(void (**)(HGaussianBlur *))(*(void *)v15 + 16))(v15);
  if (*(float *)(a1 + 412) > 0.0)
  {
    double v16 = (HgcEquirectToSinusoidal *)HGObject::operator new(0x1A0uLL);
    HgcEquirectToSinusoidal::HgcEquirectToSinusoidal(v16);
  }
  uint64_t v17 = *(void *)(a1 + 420);
  v18.i64[0] = (int)v17;
  v18.i64[1] = SHIDWORD(v17);
  float64x2_t v19 = vcvtq_f64_s64(v18);
  __asm { FMOV            V1.2D, #-0.5 }
  float64x2_t v40 = vmulq_f64(v19, _Q1);
  float64x2_t v41 = v19;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v35 = 0;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v34 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  float64x2_t v25 = vcvtq_f64_f32(a6[1]);
  v33[0] = vcvtq_f64_f32(*a6);
  v33[1] = v25;
  float64x2_t v26 = vcvtq_f64_f32(a7[1]);
  double v33[2] = vcvtq_f64_f32(*a7);
  v33[3] = v26;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v33, v40.f64, (uint64_t)&v40);
  uint64_t v27 = HGRectMake4i(vcvtmd_s64_f64(v40.f64[0]), vcvtmd_s64_f64(v40.f64[1]), vcvtpd_s64_f64(v40.f64[0] + v41.f64[0]), vcvtpd_s64_f64(v40.f64[1] + v41.f64[1]));
  uint64_t v29 = v28;
  uint64_t v30 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v30);
  (*(void (**)(HGCrop *, void, HGaussianBlur *))(*(void *)v30 + 120))(v30, 0, v15);
  (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v30 + 96))(v30, 0, (float)(int)v27, (float)SHIDWORD(v27), (float)(int)v29, (float)SHIDWORD(v29));
  uint64_t v31 = *(HGCrop **)(a1 + 440);
  if (v31 != v30)
  {
    if (v31) {
      (*(void (**)(HGCrop *))(*(void *)v31 + 24))(v31);
    }
    *(void *)(a1 + 44pthread_cond_init((pthread_cond_t *)this, 0) = v30;
    (*(void (**)(HGCrop *))(*(void *)v30 + 16))(v30);
  }
  (*(void (**)(HGCrop *))(*(void *)v30 + 24))(v30);
  (*(void (**)(HGaussianBlur *))(*(void *)v15 + 24))(v15);
  (*(void (**)(HGaussianBlur *))(*(void *)v15 + 24))(v15);
  double result = v42;
  if (v42) {
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(void *)v42 + 24))(v42);
  }
  return result;
}

void sub_1B75429D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  HGObject::operator delete(v12);
  (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  uint64_t v16 = *(void *)(v14 - 112);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t HEquirectGaussianBlur::GetOutput(HEquirectGaussianBlur *this, HGRenderer *a2)
{
  uint64_t v3 = *((void *)this + 54);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, void, HGNode *))(*(void *)v3 + 120))(v3, 0, Input);
  return *((void *)this + 55);
}

void HEquirectGaussianBlur::~HEquirectGaussianBlur(HGNode *this)
{
  HEquirectGaussianBlur::~HEquirectGaussianBlur(this);

  HGObject::operator delete(v1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1094F88;
  double v2 = *((void *)this + 55);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 54);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

void HPolarToRect::InvTransformPoint(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t, void, float *))(*(void *)a1 + 104))(a1, 0, &v19);
  float v18 = v19;
  (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a1 + 104))(a1, 1, &v19);
  float v6 = v19;
  float v7 = v20;
  (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a1 + 104))(a1, 2, &v19);
  float v8 = v19;
  float v9 = v20;
  (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a1 + 104))(a1, 3, &v19);
  float v10 = v19;
  float v11 = v20;
  (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a1 + 104))(a1, 4, &v19);
  float v13 = v19;
  float v12 = v20;
  float v14 = (float)(v8 + (float)(v10 * *a2)) - v6;
  float v15 = (float)(v9 + (float)(v11 * a2[1])) - v7;
  float v16 = atan2f(v14, v15);
  if (v16 < 0.0)
  {
    float v17 = v16 + 6.28318531;
    float v16 = v17;
  }
  *a3 = v13 * (float)((float)(v18 * v16) - v8);
  a3[1] = v12 * (float)(sqrtf((float)(v14 * v14) + (float)(v15 * v15)) - v9);
}

unint64_t HPolarToRect::GetDOD(HPolarToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    int v4 = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    unint64_t v7 = HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
    int v4 = v7;
    unint64_t v9 = v8;
    unint64_t v5 = HIDWORD(v7);
    if (!HGRectIsInfinite(v7, v8) && *((unsigned char *)this + 432))
    {
      v15[0] = (float)v4;
      v15[1] = (float)(int)v5;
      v14[0] = (float)(int)v9;
      v14[1] = (float)(int)v5;
      v13[0] = (float)(int)v9;
      v13[1] = (float)SHIDWORD(v9);
      v12[0] = (float)v4;
      v12[1] = (float)SHIDWORD(v9);
      HPolarToRect::InvTransformPoint((uint64_t)this, v15, &v11);
      HPolarToRect::InvTransformPoint((uint64_t)this, v14, &v11);
      HPolarToRect::InvTransformPoint((uint64_t)this, v13, &v11);
      HPolarToRect::InvTransformPoint((uint64_t)this, v12, &v11);
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t mix_hull@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  v3.f64[0] = *(float64_t *)a2;
  v3.f64[1] = *(float64_t *)(result + 8);
  v4.f64[0] = *(float64_t *)result;
  v4.f64[1] = *(float64_t *)(a2 + 8);
  float64x2_t v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v4, v3), *(int8x16_t *)a2, *(int8x16_t *)result);
  if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1), v5))).u8[0]) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  v6.f64[0] = *(float64_t *)(a2 + 16);
  v6.f64[1] = *(float64_t *)(result + 24);
  v7.f64[0] = *(float64_t *)(result + 16);
  v7.f64[1] = *(float64_t *)(a2 + 24);
  float64x2_t v8 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), *(int8x16_t *)(a2 + 16), *(int8x16_t *)(result + 16));
  if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1), v8))).u8[0]) {
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  *a3 = v5;
  a3[1] = v8;
  return result;
}

unint64_t HPolarToRect::GetROI(HPolarToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  v50[4] = *(double *)MEMORY[0x1E4F143B8];
  HGRect v43 = a4;
  if (a3)
  {
    unsigned int v4 = 0;
    unsigned int v5 = 0;
  }
  else
  {
    float64x2_t v6 = this;
    (*(void (**)(HPolarToRect *, void, double *))(*(void *)this + 104))(this, 0, v50);
    float v7 = *(float *)v50;
    int v8 = fegetround();
    fesetround(0x400000);
    v50[0] = (float)-v7;
    double v9 = -v50[0];
    v50[0] = v7;
    v42[0] = v9;
    v42[1] = v7;
    fesetround(v8);
    (*(void (**)(HPolarToRect *, uint64_t, double *))(*(void *)v6 + 104))(v6, 1, v50);
    double v10 = v50[0];
    int v11 = fegetround();
    fesetround(0x400000);
    v50[0] = *(float *)&v10;
    fesetround(v11);
    int v12 = fegetround();
    fesetround(0x400000);
    v50[0] = *((float *)&v10 + 1);
    fesetround(v12);
    (*(void (**)(HPolarToRect *, uint64_t, double *))(*(void *)v6 + 104))(v6, 2, v50);
    double v13 = v50[0];
    int v14 = fegetround();
    fesetround(0x400000);
    v50[0] = *(float *)&v13;
    fesetround(v14);
    int v15 = fegetround();
    fesetround(0x400000);
    v50[0] = *((float *)&v13 + 1);
    fesetround(v15);
    v50[0] = -(float)-*(float *)&v13;
    v50[1] = *(float *)&v13;
    double v50[2] = -(float)-*((float *)&v13 + 1);
    v50[3] = *((float *)&v13 + 1);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::PCVector2((uint64_t)&v40);
    operator*<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>(v50, (double *)&v48, 2.0);
    long long v40 = v48;
    long long v41 = *(_OWORD *)v49;
    (*(void (**)(HPolarToRect *, uint64_t, long long *))(*(void *)v6 + 104))(v6, 3, &v48);
    uint64_t v16 = v48;
    int v17 = fegetround();
    fesetround(0x400000);
    *(double *)&long long v48 = *(float *)&v16;
    fesetround(v17);
    int v18 = fegetround();
    fesetround(0x400000);
    *(double *)&long long v48 = *((float *)&v16 + 1);
    fesetround(v18);
    *(double *)&long long v48 = -(float)-*(float *)&v16;
    *((double *)&v48 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = *(float *)&v16;
    v49[0] = -(float)-*((float *)&v16 + 1);
    v49[1] = *((float *)&v16 + 1);
    (*(void (**)(HPolarToRect *, uint64_t, double *))(*(void *)v6 + 104))(v6, 4, v47);
    double v19 = v47[0];
    int v20 = fegetround();
    fesetround(0x400000);
    v47[0] = *(float *)&v19;
    fesetround(v20);
    int v21 = fegetround();
    fesetround(0x400000);
    v47[0] = *((float *)&v19 + 1);
    fesetround(v21);
    v47[0] = -(float)-*(float *)&v19;
    v47[1] = *(float *)&v19;
    _OWORD v47[2] = -(float)-*((float *)&v19 + 1);
    v47[3] = *((float *)&v19 + 1);
    (*(void (**)(HPolarToRect *, uint64_t, float64x2_t *))(*(void *)v6 + 104))(v6, 5, &v45);
    Interval::pixelToFloat(&v43.var0, v45.f64);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v45.f64, (double *)&v48);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v45.f64, v50);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v45.f64, v42, v39);
    long long v38 = v46;
    *(_OWORD *)double v33 = xmmword_1B7E73BA0;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v38, (double *)v33, v34.f64);
    LODWORD(v6) = fegetround();
    fesetround(0x400000);
    float64_t v22 = (float)-*(float *)&v10 - v34.f64[0];
    v36.f64[0] = *(float *)&v10 + v34.f64[1];
    float64_t v23 = v36.f64[0];
    fesetround((int)v6);
    long long v44 = xmmword_1B7E73BA0;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v38, (double *)&v44, v31.f64);
    LODWORD(v6) = fegetround();
    fesetround(0x400000);
    float64_t v24 = (float)-*((float *)&v10 + 1) - v31.f64[0];
    v36.f64[0] = *((float *)&v10 + 1) + v31.f64[1];
    double v25 = v36.f64[0];
    fesetround((int)v6);
    v36.f64[0] = -v22;
    v36.f64[1] = v23;
    *(double *)&long long v37 = -v24;
    *((double *)&v37 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = v25;
    boost::numeric::operator/<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v36.f64, (double *)&v40, v34.f64);
    boost::numeric::operator/<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v37, (double *)&v41, (double *)v33);
    *(void *)double v33 = 0;
    *(_OWORD *)&void v33[8] = xmmword_1B7E733D0;
    *(void *)&v33[24] = 0x3FF0000000000000;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v33, (double *)&v40, v31.f64);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v33[16], (double *)&v41, (double *)&v44);
    float64x2_t v34 = v31;
    long long v35 = v44;
    operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)&v40, v34.f64, (double *)v33);
    v30[0] = v34;
    v30[1] = v35;
    v29[0] = *(_OWORD *)v33;
    v29[1] = *(_OWORD *)&v33[16];
    mix_hull((uint64_t)v30, (uint64_t)v29, &v31);
    *(float64x2_t *)double v33 = v31;
    *(_OWORD *)&v33[16] = v32;
    float64x2_t v36 = v31;
    long long v37 = v32;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator-=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v36.f64, v50);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v36.f64, v47);
    float64x2_t v45 = v36;
    long long v46 = v37;
    unint64_t v26 = Interval::floatToPixel(v45.f64);
    unint64_t v27 = HIDWORD(v26);
    unsigned int v4 = v26 - 1;
    unsigned int v5 = v27 - 1;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void sub_1B754382C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t operator*<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>@<X0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  int v6 = fegetround();
  fesetround(0x400000);
  if (a3 >= 0.0)
  {
    double v7 = 0.0;
    double v9 = 0.0;
    if (a3 == 0.0) {
      goto LABEL_6;
    }
    double v7 = --(*a1 * a3);
    double v8 = a1[1];
  }
  else
  {
    double v7 = --(a1[1] * a3);
    double v8 = *a1;
  }
  double v9 = v8 * a3;
LABEL_6:
  fesetround(v6);
  int v10 = fegetround();
  fesetround(0x400000);
  if (a3 < 0.0)
  {
    double v11 = --(a1[3] * a3);
    double v12 = a1[2];
LABEL_10:
    double v13 = v12 * a3;
    goto LABEL_11;
  }
  double v11 = 0.0;
  double v13 = 0.0;
  if (a3 != 0.0)
  {
    double v11 = --(a1[2] * a3);
    double v12 = a1[3];
    goto LABEL_10;
  }
LABEL_11:
  uint64_t result = fesetround(v10);
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v11;
  a2[3] = v13;
  return result;
}

double *PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator-=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  int v4 = fegetround();
  fesetround(0x400000);
  double v5 = a1[1] - *a2;
  *a1 = -(a2[1] - *a1);
  a1[1] = v5;
  fesetround(v4);
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = a1[3] - a2[2];
  a1[2] = -(a2[3] - a1[2]);
  a1[3] = v7;
  fesetround(v6);
  return a1;
}

uint64_t HPolarToRect::GetOutput(HPolarToRect *this, HGRenderer *a2)
{
  (*(void (**)(HPolarToRect *, void, uint64_t))(*(void *)this + 136))(this, 0, 2);

  return HgcPolarToRect::GetOutput(this, a2);
}

void HPolarToRect::~HPolarToRect(HGNode *this)
{
  HgcPolarToRect::~HgcPolarToRect(this);

  HGObject::operator delete(v1);
}

uint64_t PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::PCVector2(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v2 = fegetround();
  fesetround(0x400000);
  *(double *)(a1 + 16) = -0.0;
  *(void *)(a1 + 24) = 0;
  fesetround(v2);
  *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
  return a1;
}

double *boost::numeric::operator/<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *result@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v4 = result;
  if (*a2 <= 0.0)
  {
    double v6 = a2[1];
    if (v6 >= 0.0)
    {
      if (*a2 == 0.0)
      {
        if (v6 == 0.0) {
          boost::numeric::interval_lib::exception_create_empty::operator()();
        }
        double v7 = *result;
        if (*result != 0.0 || (double v8 = result[1], v8 != 0.0))
        {
          int v9 = fegetround();
          fesetround(0x400000);
          double v13 = v4[1];
          if (v13 >= 0.0)
          {
            if (*v4 >= 0.0)
            {
              double v11 = -(*v4 / -a2[1]);
              double v12 = INFINITY;
              goto LABEL_29;
            }
            double v12 = INFINITY;
          }
          else
          {
            double v12 = v13 / a2[1];
          }
          double v11 = -INFINITY;
LABEL_29:
          *a3 = v11;
          a3[1] = v12;
          return (double *)fesetround(v9);
        }
      }
      else if (v6 == 0.0)
      {
        double v7 = *result;
        if (*result != 0.0 || (double v8 = result[1], v8 != 0.0))
        {
          int v9 = fegetround();
          fesetround(0x400000);
          double v10 = v4[1];
          if (v10 >= 0.0)
          {
            if (*v4 >= 0.0) {
              double v12 = *v4 / *a2;
            }
            else {
              double v12 = INFINITY;
            }
            double v11 = -INFINITY;
          }
          else
          {
            double v11 = -(v10 / -*a2);
            double v12 = INFINITY;
          }
          goto LABEL_29;
        }
      }
      else
      {
        double v7 = *result;
        double v8 = result[1];
        if (*result != 0.0 || v8 != 0.0)
        {
          double v7 = -INFINITY;
          double v8 = INFINITY;
        }
      }
      *a3 = v7;
      a3[1] = v8;
      return result;
    }
  }

  return (double *)boost::numeric::interval_lib::detail::div_non_zero<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(result, a2, a3);
}

uint64_t boost::numeric::interval_lib::detail::div_non_zero<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6 = fegetround();
  fesetround(0x400000);
  double v7 = a1[1];
  if (v7 >= 0.0)
  {
    double v11 = *a1;
    double v12 = a2[1];
    if (*a1 >= 0.0)
    {
      double v15 = -v12;
      if (v12 < 0.0)
      {
        double v9 = v7 / v15;
        double v12 = *a2;
        goto LABEL_10;
      }
      double v17 = v11 / v15;
      double v16 = *a2;
    }
    else
    {
      if (v12 < 0.0)
      {
        double v9 = v7 / -v12;
LABEL_10:
        double v10 = v11 / v12;
        goto LABEL_11;
      }
      double v16 = *a2;
      double v17 = v11 / -*a2;
    }
    double v13 = v7 / v16;
    double v14 = -v17;
    goto LABEL_15;
  }
  double v8 = a2[1];
  if (v8 >= 0.0)
  {
    double v13 = v7 / v8;
    double v14 = -(*a1 / -*a2);
LABEL_15:
    *a3 = v14;
    a3[1] = v13;
    return fesetround(v6);
  }
  double v9 = v7 / -*a2;
  double v10 = *a1 / v8;
LABEL_11:
  *a3 = -v9;
  a3[1] = v10;
  return fesetround(v6);
}

void sub_1B7544524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HGObject::operator delete(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1B7544C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  HGObject::operator delete(v11);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(a1);
}

void sub_1B75456A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  HGTransform::~HGTransform((HGTransform *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  _Unwind_Resume(a1);
}

void sub_1B7545FA0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B754640C(_Unwind_Exception *a1)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B75466F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7546C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  HGObject::operator delete(v17);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  _Unwind_Resume(a1);
}

unint64_t HGlow::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0x8000000080000000;
  }
  else {
    return a4;
  }
}

uint64_t HGlow::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

void HGlow::~HGlow(HGNode *this)
{
  HgcGlow::~HgcGlow(this);

  HGObject::operator delete(v1);
}

unint64_t HGlowCombine::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0x8000000080000000;
  }
  else {
    return a4;
  }
}

uint64_t HGlowCombine::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

void HGlowCombine::~HGlowCombine(HGNode *this)
{
  HgcGlowCombineFx::~HgcGlowCombineFx(this);

  HGObject::operator delete(v1);
}

void sub_1B75476E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGObject::operator delete(v10);
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B754804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
  }
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
  }
  (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
  }
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
  }
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 24))(v40);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 24))(a22);
  }
  if (a26) {
    (*(void (**)(uint64_t))(*(void *)a26 + 24))(a26);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 24))(a30);
  }
  if (a34) {
    (*(void (**)(uint64_t))(*(void *)a34 + 24))(a34);
  }
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 24))(a38);
  }
  (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  uint64_t v47 = *(void *)(v45 - 112);
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 24))(v47);
  }
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  }
  _Unwind_Resume(a1);
}

void sub_1B7548FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  HGObject::operator delete(v65);
  (*(void (**)(uint64_t))(*(void *)v66 + 24))(v66);
  (*(void (**)(uint64_t))(*(void *)v66 + 24))(v66);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  if (a65) {
    (*(void (**)(uint64_t))(*(void *)a65 + 24))(a65);
  }
  _Unwind_Resume(a1);
}

void sub_1B7549FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  RandMersenne::~RandMersenne((RandMersenne *)va);
  _Unwind_Resume(a1);
}

void sub_1B754A1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  RandMersenne::~RandMersenne((RandMersenne *)va);
  _Unwind_Resume(a1);
}

void sub_1B754ABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1B754B6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HBadFilm::~HBadFilm(HGNode *this)
{
  HgcBadFilm::~HgcBadFilm(this);

  HGObject::operator delete(v1);
}

void sub_1B754BE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24))(a9);
  }
  uint64_t v11 = *(void *)(v9 - 24);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B754C570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

unint64_t HGloom::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0x8000000080000000;
  }
  else {
    return a4;
  }
}

uint64_t HGloom::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

void HGloom::~HGloom(HGNode *this)
{
  HgcGloom::~HgcGloom(this);

  HGObject::operator delete(v1);
}

void sub_1B754D078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B754DE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  }
  uint64_t v37 = *(void *)(v35 - 144);
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  _Unwind_Resume(exception_object);
}

const char *HgcFisheye::GetProgram(HgcFisheye *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004ac\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xCGFloat y = frag._texCoord0.xy;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.CGFloat x = dot(s0.xyw, hg_Params[2].xyz);\n"
             "    s1.CGFloat y = dot(s0.xyw, hg_Params[3].xyz);\n"
             "    s1.xCGFloat y = s1.xy - hg_Params[6].xy;\n"
             "    s1.zw = s1.xy*s1.xy;\n"
             "    s1.z = dot(s1.zw, hg_Params[5].xy);\n"
             "    s1.z = rsqrt(s1.z);\n"
             "    r0.w = -half(hg_Params[4].x);\n"
             "    s1.w = pow(s1.z, float(r0.w));\n"
             "    s0.CGFloat x = s1.z*s1.w;\n"
             "    s1.xCGFloat y = s1.xy*s0.xx;\n"
             "    s1.zw = float2(c0.xw);\n"
             "    s1 = s1 + hg_Params[6];\n"
             "    s0.CGFloat x = dot(s1, hg_Params[0]);\n"
             "    s0.CGFloat y = dot(s1, hg_Params[1]);\n"
             "    s0.xCGFloat y = s0.xy + hg_Params[7].xy;\n"
             "    s0.xCGFloat y = s0.xy*hg_Params[7].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b78c9d66:00ca1048:8b1d8cf2:66078d3a\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000047c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xCGFloat y = frag._texCoord0.xy;\n"
             "    r0.w = c0.w;\n"
             "    r1.CGFloat x = dot(r0.xyw, hg_Params[2].xyz);\n"
             "    r1.CGFloat y = dot(r0.xyw, hg_Params[3].xyz);\n"
             "    r1.xCGFloat y = r1.xy - hg_Params[6].xy;\n"
             "    r1.zw = r1.xy*r1.xy;\n"
             "    r1.z = dot(r1.zw, hg_Params[5].xy);\n"
             "    r1.z = rsqrt(r1.z);\n"
             "    r0.w = -hg_Params[4].x;\n"
             "    r1.w = pow(r1.z, r0.w);\n"
             "    r0.CGFloat x = r1.z*r1.w;\n"
             "    r1.xCGFloat y = r1.xy*r0.xx;\n"
             "    r1.zw = c0.xw;\n"
             "    CGFloat r1 = r1 + hg_Params[6];\n"
             "    r0.CGFloat x = dot(r1, hg_Params[0]);\n"
             "    r0.CGFloat y = dot(r1, hg_Params[1]);\n"
             "    r0.xCGFloat y = r0.xy + hg_Params[7].xy;\n"
             "    r0.xCGFloat y = r0.xy*hg_Params[7].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c5177f84:f976086c:5b695247:46ab06e4\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0008:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000573\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xCGFloat y = hg_TexCoord0.xy;\n"
           "    r0.w = c0.w;\n"
           "    r1.CGFloat x = dot(r0.xyw, hg_ProgramLocal2.xyz);\n"
           "    r1.CGFloat y = dot(r0.xyw, hg_ProgramLocal3.xyz);\n"
           "    r1.xCGFloat y = r1.xy - hg_ProgramLocal6.xy;\n"
           "    r1.zw = r1.xy*r1.xy;\n"
           "    r1.z = dot(r1.zw, hg_ProgramLocal5.xy);\n"
           "    r1.z = inversesqrt(r1.z);\n"
           "    r0.w = -hg_ProgramLocal4.x;\n"
           "    r1.w = pow(r1.z, r0.w);\n"
           "    r0.CGFloat x = r1.z*r1.w;\n"
           "    r1.xCGFloat y = r1.xy*r0.xx;\n"
           "    r1.zw = c0.xw;\n"
           "    CGFloat r1 = r1 + hg_ProgramLocal6;\n"
           "    r0.CGFloat x = dot(r1, hg_ProgramLocal0);\n"
           "    r0.CGFloat y = dot(r1, hg_ProgramLocal1);\n"
           "    r0.xCGFloat y = r0.xy + hg_ProgramLocal7.xy;\n"
           "    r0.xCGFloat y = r0.xy*hg_ProgramLocal7.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=09ee19a3:6f261b88:5f74ed2a:56627056\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0008:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcFisheye::InitProgramDescriptor(HgcFisheye *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcFisheye_hgc_visible", "//Metal1.0     \n//LEN=00000003b9\n[[ visible ]] FragmentOut HgcFisheye_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xCGFloat y = texCoord0.xy;\n"
    "    r0.w = c0.w;\n"
    "    r1.CGFloat x = dot(r0.xyw, hg_Params[2].xyz);\n"
    "    r1.CGFloat y = dot(r0.xyw, hg_Params[3].xyz);\n"
    "    r1.xCGFloat y = r1.xy - hg_Params[6].xy;\n"
    "    r1.zw = r1.xy*r1.xy;\n"
    "    r1.z = dot(r1.zw, hg_Params[5].xy);\n"
    "    r1.z = rsqrt(r1.z);\n"
    "    r0.w = -hg_Params[4].x;\n"
    "    r1.w = pow(r1.z, r0.w);\n"
    "    r0.CGFloat x = r1.z*r1.w;\n"
    "    r1.xCGFloat y = r1.xy*r0.xx;\n"
    "    r1.zw = c0.xw;\n"
    "    CGFloat r1 = r1 + hg_Params[6];\n"
    "    r0.CGFloat x = dot(r1, hg_Params[0]);\n"
    "    r0.CGFloat y = dot(r1, hg_Params[1]);\n"
    "    r0.xCGFloat y = r0.xy + hg_Params[7].xy;\n"
    "    r0.xCGFloat y = r0.xy*hg_Params[7].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcFisheye");
}

void sub_1B754EE88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75180;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  double v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B754F008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B754F058()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B754F050);
}

uint64_t std::vector<HGBinding>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(result, v13);
    }
    else {
      double v14 = 0;
    }
    double v15 = &v14[48 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[48 * v13];
    *(_DWORD *)double v15 = *(_DWORD *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *((_OWORD *)v15 + 2) = *(_OWORD *)(a2 + 32);
    float v17[2] = v15 + 48;
    std::vector<HGBinding>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<HGBinding>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_DWORD *)unint64_t v7 = *(_DWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v9 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v9;
  return result;
}

void sub_1B754F1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<HGBinding>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *HgcFisheye::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcFisheye [hgc1]");
}

uint64_t HgcFisheye::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 144) + 128))(*(void *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcFisheye::Bind(HgcFisheye *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcFisheye::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    int32x2_t v7 = a2[2];
    uint64_t v8 = 16 * a2[3].i32[0];
    float32x4_t v9 = v5;
    do
    {
      if (v6 >= 1)
      {
        uint64_t v10 = 0;
        float32x4_t v11 = v9;
        do
        {
          float32x4_t v12 = v11;
          v12.i32[3] = 1.0;
          uint64_t v13 = *(void *)(a1 + 408);
          v14.i64[0] = v11.i64[0];
          v14.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
          float32x4_t v15 = *(float32x4_t *)(v13 + 96);
          int8x16_t v16 = *(int8x16_t *)(v13 + 112);
          *(int8x8_t *)v12.f32 = vqtbl1_s8(v14, *(int8x8_t *)v16.i8);
          *(int8x8_t *)&v12.u32[2] = vqtbl1_s8(v14, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
          float32x4_t v17 = vmulq_f32(*(float32x4_t *)(v13 + 32), v12);
          float32x4_t v18 = vmulq_f32(v12, *(float32x4_t *)(v13 + 48));
          float32x4_t v19 = vaddq_f32(v18, (float32x4_t)vrev64q_s32((int32x4_t)v18));
          float32x4_t v20 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL);
          int8x16_t v21 = *(int8x16_t *)(v13 + 128);
          float32x4_t v22 = *(float32x4_t *)(v13 + 144);
          v23.i64[0] = vsubq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), vaddq_f32(v17, (float32x4_t)vrev64q_s32((int32x4_t)v17))), (int8x16_t)vaddq_f32(v20, v19)), v15).u64[0];
          *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8);
          v17.i64[1] = v23.i64[0];
          int8x16_t v24 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v13 + 80), v17);
          v19.i64[0] = v23.i64[0];
          v19.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v24, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v5, v24, 0xCuLL)).i64[1];
          float32x4_t v25 = vminq_f32(vrsqrteq_f32(v19), v22);
          float32x4_t v26 = vminq_f32(vmulq_f32(v25, vrsqrtsq_f32(vmulq_f32(v25, v19), v25)), v22);
          int64x2_t v27 = (int64x2_t)vmulq_f32(v26, vrsqrtsq_f32(vmulq_f32(v26, v19), v26));
          float32x4_t v28 = vnegq_f32((float32x4_t)vextq_s8(*(int8x16_t *)(v13 + 64), *(int8x16_t *)(v13 + 64), 4uLL));
          v26.i64[0] = v23.i64[0];
          v23.i64[1] = vdupq_laneq_s64(v27, 1).u64[0];
          float32x4_t v29 = *(float32x4_t *)(v13 + 160);
          float32x4_t v30 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vceqq_f32(v22, v28)), v22), (int8x16_t)v29, (int8x16_t)vrev64q_s32(v23));
          float32x4_t v31 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v30, v16), (int8x16_t)v29);
          float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v31, *(float32x4_t *)(v13 + 224)));
          float32x4_t v33 = vsubq_f32(vsubq_f32(v31, v29), vmulq_f32(vmulq_f32(*(float32x4_t *)(v13 + 240), v32), v31));
          float32x4_t v34 = vmulq_f32(v33, v33);
          float32x4_t v35 = vmaxq_f32(vmulq_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v13 + 192), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v13 + 176), v30))), *(float32x4_t *)(v13 + 208)), v32), vmulq_f32(v33, vaddq_f32(*(float32x4_t *)(v13 + 352), vmulq_f32(v33, vaddq_f32(vaddq_f32(*(float32x4_t *)(v13 + 320), vmulq_f32(*(float32x4_t *)(v13 + 336), v33)),
                              vmulq_f32(v34, vaddq_f32(vaddq_f32(*(float32x4_t *)(v13 + 256), vmulq_f32(*(float32x4_t *)(v13 + 272), v33)), vmulq_f32(v34, vaddq_f32(*(float32x4_t *)(v13 + 288), vmulq_f32(*(float32x4_t *)(v13 + 304), v33)))))))))), v28), *(float32x4_t *)(v13 + 368));
          float32x4_t v36 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
          float32x4_t v37 = vsubq_f32(v36, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v36, v35)));
          float32x4_t v38 = vsubq_f32(v35, v37);
          v26.i64[1] = v27.i64[1];
          float32x4_t v39 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v13 + 480), (int8x16_t)vmulq_f32(vaddq_f32(v29, vmulq_f32(v38, vaddq_f32(*(float32x4_t *)(v13 + 448), vmulq_f32(v38, vaddq_f32(vaddq_f32(*(float32x4_t *)(v13 + 416), vmulq_f32(*(float32x4_t *)(v13 + 432), v38)), vmulq_f32(vmulq_f32(v38, v38), vaddq_f32(*(float32x4_t *)(v13 + 384), vmulq_f32(*(float32x4_t *)(v13 + 400), v38)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v13 + 464), vcvtq_s32_f32(v37)), 0x17uLL)), (int8x16_t)v26);
          float32x4_t v40 = vaddq_f32(v15, (float32x4_t)vbslq_s8(*(int8x16_t *)(v13 + 496), (int8x16_t)vmulq_n_f32(v39, vmulq_laneq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 3), v39, 2).f32[0]), (int8x16_t)v29));
          float32x4_t v41 = vmulq_f32(*(float32x4_t *)v13, v40);
          float32x4_t v42 = vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL));
          float32x4_t v43 = vmulq_f32(*(float32x4_t *)(v13 + 16), v40);
          float32x4_t v44 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          float32x4_t v45 = vsubq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), (int8x16_t)vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL))), v5);
          uint64_t v46 = a2[11].i32[0];
          int32x4_t v47 = vaddq_s32(vcvtq_s32_f32(v45), vcltzq_f32(v45));
          v45.i64[0] = vsubq_f32(v45, vcvtq_f32_s32(v47)).u64[0];
          long long v48 = (float32x4_t *)(*(void *)&a2[10] + 16 * (v47.i32[0] + v47.i32[1] * (int)v46));
          float32x4_t v49 = vaddq_f32(*v48, vmulq_n_f32(vsubq_f32(v48[1], *v48), v45.f32[0]));
          *(float32x4_t *)(*(void *)&v7 + v1pthread_cond_init((pthread_cond_t *)this, 0) = vaddq_f32(v49, vmulq_lane_f32(vsubq_f32(vaddq_f32(v48[v46], vmulq_n_f32(vsubq_f32(v48[(int)v46 + 1], v48[v46]), v45.f32[0])), v49), *(float32x2_t *)v45.f32, 1));
          float32x4_t v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B7E736B0);
          v10 += 16;
        }
        while (16 * v6 != v10);
      }
      float32x4_t v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B7E736C0);
      ++v4;
      *(void *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcFisheye::GetDOD(HgcFisheye *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    int v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    HGRectGrow(v6, v5, v7);
    int v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcFisheye::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(DOD, v9, v10);
}

void HgcFisheye::HgcFisheye(HgcFisheye *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1095E78;
  operator new();
}

void sub_1B754F964(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcFisheye::~HgcFisheye(HGNode *this)
{
  *(void *)this = &unk_1F1095E78;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4027AB4E27);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcFisheye::~HgcFisheye(this);

  HGObject::operator delete(v1);
}

uint64_t HgcFisheye::SetParameter(HgcFisheye *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      *uint64_t v7 = a3.n128_f32[0];
      v7[1] = a4;
      double v7[2] = a5;
      void v7[3] = a6;
      goto LABEL_38;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      unsigned char v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      _OWORD v9[6] = a5;
      v9[7] = a6;
      goto LABEL_38;
    case 2:
      uint64_t v10 = (__n128 *)*((void *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a4
        && v10[2].n128_f32[2] == a6
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = a3.n128_u32[0];
      v10[2].n128_f32[1] = a4;
      v10[2].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[32] = a3;
      goto LABEL_38;
    case 3:
      float32x4_t v11 = (__n128 *)*((void *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a4
        && v11[3].n128_f32[2] == a6
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u32[0] = a3.n128_u32[0];
      v11[3].n128_f32[1] = a4;
      v11[3].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[33] = a3;
      goto LABEL_38;
    case 4:
      float32x4_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_38;
    case 5:
      uint64_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_38;
    case 6:
      int8x16_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcFisheye::GetParameter(HgcFisheye *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      int v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[128];
      a3[1] = v6[129];
      a3[2] = v6[130];
      int v4 = v6 + 131;
      goto LABEL_9;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[132];
      a3[1] = v7[133];
      a3[2] = v7[134];
      int v4 = v7 + 135;
      goto LABEL_9;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      int v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      int v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      int v4 = v10 + 27;
LABEL_9:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcFisheye::State::State(HgcFisheye::State *this)
{
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_1B7E75190;
  *((_OWORD *)this + 8) = xmmword_1B7E751A0;
  *((_OWORD *)this + 9) = xmmword_1B7E751B0;
  *((_OWORD *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E734D0;
  *((_OWORD *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = xmmword_1B7E751C0;
  *((_OWORD *)this + 12) = xmmword_1B7E751D0;
  *((_OWORD *)this + 13) = xmmword_1B7E751E0;
  *((_OWORD *)this + 14) = xmmword_1B7E751F0;
  *((_OWORD *)this + 15) = xmmword_1B7E75200;
  *((_OWORD *)this + 16) = xmmword_1B7E75210;
  *((_OWORD *)this + 17) = xmmword_1B7E75220;
  *((_OWORD *)this + 18) = xmmword_1B7E75230;
  *((_OWORD *)this + 19) = xmmword_1B7E75240;
  *((_OWORD *)this + 2pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E75250;
  *((_OWORD *)this + 2HGRenderQueue::CancelAllRenderJobs(*this, 1) = xmmword_1B7E75260;
  *((_OWORD *)this + 22) = xmmword_1B7E75270;
  *((_OWORD *)this + 23) = xmmword_1B7E75280;
  *((_OWORD *)this + 24) = xmmword_1B7E75290;
  *((_OWORD *)this + 25) = xmmword_1B7E752A0;
  *((_OWORD *)this + 26) = xmmword_1B7E752B0;
  *((_OWORD *)this + 27) = xmmword_1B7E752C0;
  *((_OWORD *)this + 28) = xmmword_1B7E752D0;
  *((_OWORD *)this + 29) = xmmword_1B7E752E0;
  *((_OWORD *)this + 3pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E752F0;
  *((_OWORD *)this + 3HGRenderQueue::CancelAllRenderJobs(*this, 1) = xmmword_1B7E75300;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  return result;
}

void std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<HGBinding>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<HGBinding>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<HGBinding>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  float v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 48);
      a3 -= 48;
      *(_DWORD *)(v7 - 48) = v8;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v7 - 4pthread_cond_init((pthread_cond_t *)this, 0) = v9;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 32);
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<HGBinding>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  int v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<HGBinding>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

const char *HgcPageCurlBackground::GetProgram(HgcPageCurlBackground *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000a7f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const half4 c1 = half4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
             "    const half4 c2 = half4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xCGFloat y = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    s0.zw = s0.xy - hg_Params[2].xy;\n"
             "    s1.w = dot(s0.zw, hg_Params[3].xy);\n"
             "    s0.CGFloat x = -s1.w/hg_Params[4].x;\n"
             "    s1.CGFloat x = select(float(c0.x), s0.x, s1.w < 0.00000h);\n"
             "    s0.CGFloat x = float(c0.y) - s1.x;\n"
             "    s0.CGFloat x = -fabs(s0.x) + float(c0.y);\n"
             "    s0.CGFloat x = fmin(s0.x, float(c0.z));\n"
             "    s0.CGFloat x = fmax(s0.x, -float(c0.z));\n"
             "    s0.CGFloat y = abs(s0.x);\n"
             "    s1.z = s0.y*float(c0.w) + float(c1.z);\n"
             "    s1.CGFloat y = float(c0.y) - s0.y;\n"
             "    s1.z = s0.y*s1.z + float(c1.x);\n"
             "    s0.CGFloat y = s0.y*s1.z + float(c1.y);\n"
             "    s1.z = fmax(-s1.x, float(c0.x));\n"
             "    s1.CGFloat y = sqrt(s1.y);\n"
             "    s0.CGFloat y = -s1.y*s0.y + float(c1.w);\n"
             "    s0.CGFloat x = float(s0.x < float(c0.x));\n"
             "    s0.CGFloat x = s0.x*s0.y;\n"
             "    s1.CGFloat y = s0.x*float(c2.y) + -s0.y;\n"
             "    s0.CGFloat y = hg_Params[3].x;\n"
             "    s0.CGFloat x = -hg_Params[3].y;\n"
             "    s0.w = dot(s0.zw, s0.xy);\n"
             "    s0.z = s1.y*hg_Params[4].x;\n"
             "    s0.z = select(s1.w, s0.z, s1.w < 0.00000h);\n"
             "    s1.CGFloat y = -s1.x*s1.x + float(c0.y);\n"
             "    s0.CGFloat y = -hg_Params[3].y;\n"
             "    s0.CGFloat x = hg_Params[3].x;\n"
             "    s0.xCGFloat y = s0.zw*s0.xy;\n"
             "    s0.w = dot(s0.zw, hg_Params[3].yx);\n"
             "    s0.z = dot(s0.xy, 1.00000f);\n"
             "    s0.xCGFloat y = s0.zw + hg_Params[2].xy;\n"
             "    s0.xCGFloat y = s0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    s0.xCGFloat y = s0.xy + hg_Params[6].xy;\n"
             "    s0.xCGFloat y = s0.xy*hg_Params[6].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    s1.z = s1.z*s1.z;\n"
             "    s1.z = float(r0.w)*s1.z;\n"
             "    s0.xyz = s1.zzz*hg_Params[5].xyz;\n"
             "    s1.z = sqrt(fabs(s1.y));\n"
             "    s1.z = select(float(c0.y), s1.z, s1.w < 0.00000h);\n"
             "    s1.CGFloat y = dot(float2(c2.xz), s1.xz);\n"
             "    s1.z = s1.y + float(c2.z);\n"
             "    s1.CGFloat x = float(c0.y) - hg_Params[4].x;\n"
             "    s1.CGFloat y = -s1.x - hg_Params[4].x;\n"
             "    s1.z = fmax(s1.z, float(c0.x));\n"
             "    s1.CGFloat y = s1.y - float(c0.y);\n"
             "    s1.CGFloat x = s1.w - s1.x;\n"
             "    s1.CGFloat x = clamp(s1.x/s1.y, 0.00000f, 1.00000f);\n"
             "    s1.CGFloat y = -s1.x*float(c2.y) + float(c2.w);\n"
             "    s1.CGFloat x = s1.x*s1.x;\n"
             "    s2.w = float(r0.w);\n"
             "    s2.xyz = float3(r0.xyz)*s1.zzz + s0.xyz;\n"
             "    s1.CGFloat x = s1.x*s1.y;\n"
             "    output.color0 = s1.xxxx*-s2 + s2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=62f0f9f1:87a6b438:db8662bf:b2986826\n"
             "//SIG=00400000:00000000:00000000:00000001:0003:0007:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000009a7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const float4 c1 = float4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
             "    const float4 c2 = float4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xCGFloat y = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    r0.zw = r0.xy - hg_Params[2].xy;\n"
             "    r1.w = dot(r0.zw, hg_Params[3].xy);\n"
             "    r0.CGFloat x = -r1.w/hg_Params[4].x;\n"
             "    r1.CGFloat x = select(c0.x, r0.x, r1.w < 0.00000f);\n"
             "    r0.CGFloat x = c0.y - r1.x;\n"
             "    r0.CGFloat x = -fabs(r0.x) + c0.y;\n"
             "    r0.CGFloat x = fmin(r0.x, c0.z);\n"
             "    r0.CGFloat x = fmax(r0.x, -c0.z);\n"
             "    r0.CGFloat y = abs(r0.x);\n"
             "    r1.z = r0.y*c0.w + c1.z;\n"
             "    r1.CGFloat y = c0.y - r0.y;\n"
             "    r1.z = r0.y*r1.z + c1.x;\n"
             "    r0.CGFloat y = r0.y*r1.z + c1.y;\n"
             "    r1.z = fmax(-r1.x, c0.x);\n"
             "    r1.CGFloat y = sqrt(r1.y);\n"
             "    r0.CGFloat y = -r1.y*r0.y + c1.w;\n"
             "    r0.CGFloat x = float(r0.x < c0.x);\n"
             "    r0.CGFloat x = r0.x*r0.y;\n"
             "    r1.CGFloat y = r0.x*c2.y + -r0.y;\n"
             "    r0.CGFloat y = hg_Params[3].x;\n"
             "    r0.CGFloat x = -hg_Params[3].y;\n"
             "    r0.w = dot(r0.zw, r0.xy);\n"
             "    r0.z = r1.y*hg_Params[4].x;\n"
             "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
             "    r1.CGFloat y = -r1.x*r1.x + c0.y;\n"
             "    r0.CGFloat y = -hg_Params[3].y;\n"
             "    r0.CGFloat x = hg_Params[3].x;\n"
             "    r0.xCGFloat y = r0.zw*r0.xy;\n"
             "    r0.w = dot(r0.zw, hg_Params[3].yx);\n"
             "    r0.z = dot(r0.xy, 1.00000f);\n"
             "    r0.xCGFloat y = r0.zw + hg_Params[2].xy;\n"
             "    r0.xCGFloat y = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    r0.xCGFloat y = r0.xy + hg_Params[6].xy;\n"
             "    r0.xCGFloat y = r0.xy*hg_Params[6].zw;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    r1.z = r1.z*r1.z;\n"
             "    r1.z = r0.w*r1.z;\n"
             "    r2.xyz = r1.zzz*hg_Params[5].xyz;\n"
             "    r1.z = sqrt(fabs(r1.y));\n"
             "    r1.z = select(c0.y, r1.z, r1.w < 0.00000f);\n"
             "    r1.CGFloat y = dot(c2.xz, r1.xz);\n"
             "    r1.z = r1.y + c2.z;\n"
             "    r1.CGFloat x = c0.y - hg_Params[4].x;\n"
             "    r1.CGFloat y = -r1.x - hg_Params[4].x;\n"
             "    r1.z = fmax(r1.z, c0.x);\n"
             "    r1.CGFloat y = r1.y - c0.y;\n"
             "    r1.CGFloat x = r1.w - r1.x;\n"
             "    r1.CGFloat x = clamp(r1.x/r1.y, 0.00000f, 1.00000f);\n"
             "    r1.CGFloat y = -r1.x*c2.y + c2.w;\n"
             "    r1.CGFloat x = r1.x*r1.x;\n"
             "    r0.xyz = r0.xyz*r1.zzz + r2.xyz;\n"
             "    r1.CGFloat x = r1.x*r1.y;\n"
             "    output.color0 = r1.xxxx*-r0 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=b51a5692:9e68dfea:987ceeb9:6c3395b2\n"
             "//SIG=00000000:00000000:00000000:00000000:0003:0007:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a83\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
           "    const highp vec4 c1 = vec4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
           "    const highp vec4 c2 = vec4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xCGFloat y = hg_TexCoord0.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
           "    r0.zw = r0.xy - hg_ProgramLocal2.xy;\n"
           "    r1.w = dot(r0.zw, hg_ProgramLocal3.xy);\n"
           "    r0.CGFloat x = -r1.w/hg_ProgramLocal4.x;\n"
           "    r1.CGFloat x = r1.w < 0.00000 ? r0.x : c0.x;\n"
           "    r0.CGFloat x = c0.y - r1.x;\n"
           "    r0.CGFloat x = -abs(r0.x) + c0.y;\n"
           "    r0.CGFloat x = min(r0.x, c0.z);\n"
           "    r0.CGFloat x = max(r0.x, -c0.z);\n"
           "    r0.CGFloat y = abs(r0.x);\n"
           "    r1.z = r0.y*c0.w + c1.z;\n"
           "    r1.CGFloat y = c0.y - r0.y;\n"
           "    r1.z = r0.y*r1.z + c1.x;\n"
           "    r0.CGFloat y = r0.y*r1.z + c1.y;\n"
           "    r1.z = max(-r1.x, c0.x);\n"
           "    r1.CGFloat y = sqrt(r1.y);\n"
           "    r0.CGFloat y = -r1.y*r0.y + c1.w;\n"
           "    r0.CGFloat x = float(r0.x < c0.x);\n"
           "    r0.CGFloat x = r0.x*r0.y;\n"
           "    r1.CGFloat y = r0.x*c2.y + -r0.y;\n"
           "    r0.CGFloat y = hg_ProgramLocal3.x;\n"
           "    r0.CGFloat x = -hg_ProgramLocal3.y;\n"
           "    r0.w = dot(r0.zw, r0.xy);\n"
           "    r0.z = r1.y*hg_ProgramLocal4.x;\n"
           "    r0.z = r1.w < 0.00000 ? r0.z : r1.w;\n"
           "    r1.CGFloat y = -r1.x*r1.x + c0.y;\n"
           "    r0.CGFloat y = -hg_ProgramLocal3.y;\n"
           "    r0.CGFloat x = hg_ProgramLocal3.x;\n"
           "    r0.xCGFloat y = r0.zw*r0.xy;\n"
           "    r0.w = dot(r0.zw, hg_ProgramLocal3.yx);\n"
           "    r0.z = dot(r0.xy, vec2(1.00000));\n"
           "    r0.xCGFloat y = r0.zw + hg_ProgramLocal2.xy;\n"
           "    r0.xCGFloat y = r0.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
           "    r0.xCGFloat y = r0.xy + hg_ProgramLocal6.xy;\n"
           "    r0.xCGFloat y = r0.xy*hg_ProgramLocal6.zw;\n"
           "    r0 = texture2D(hg_Texture0, r0.xy);\n"
           "    r1.z = r1.z*r1.z;\n"
           "    r1.z = r0.w*r1.z;\n"
           "    r2.xyz = r1.zzz*hg_ProgramLocal5.xyz;\n"
           "    r1.z = sqrt(abs(r1.y));\n"
           "    r1.z = r1.w < 0.00000 ? r1.z : c0.y;\n"
           "    r1.CGFloat y = dot(c2.xz, r1.xz);\n"
           "    r1.z = r1.y + c2.z;\n"
           "    r1.CGFloat x = c0.y - hg_ProgramLocal4.x;\n"
           "    r1.CGFloat y = -r1.x - hg_ProgramLocal4.x;\n"
           "    r1.z = max(r1.z, c0.x);\n"
           "    r1.CGFloat y = r1.y - c0.y;\n"
           "    r1.CGFloat x = r1.w - r1.x;\n"
           "    r1.CGFloat x = clamp(r1.x/r1.y, 0.00000, 1.00000);\n"
           "    r1.CGFloat y = -r1.x*c2.y + c2.w;\n"
           "    r1.CGFloat x = r1.x*r1.x;\n"
           "    r0.xyz = r0.xyz*r1.zzz + r2.xyz;\n"
           "    r1.CGFloat x = r1.x*r1.y;\n"
           "    gl_FragColor = r1.xxxx*-r0 + r0;\n"
           "}\n"
           "//MD5=aa701ea4:29eb492c:c2092974:03ade4f5\n"
           "//SIG=00000000:00000000:00000000:00000000:0003:0007:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPageCurlBackground::InitProgramDescriptor(HgcPageCurlBackground *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPageCurlBackground_hgc_visible", "//Metal1.0     \n//LEN=00000008ef\n[[ visible ]] FragmentOut HgcPageCurlBackground_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
    "    const float4 c1 = float4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
    "    const float4 c2 = float4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xCGFloat y = texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
    "    r0.zw = r0.xy - hg_Params[2].xy;\n"
    "    r1.w = dot(r0.zw, hg_Params[3].xy);\n"
    "    r0.CGFloat x = -r1.w/hg_Params[4].x;\n"
    "    r1.CGFloat x = select(c0.x, r0.x, r1.w < 0.00000f);\n"
    "    r0.CGFloat x = c0.y - r1.x;\n"
    "    r0.CGFloat x = -fabs(r0.x) + c0.y;\n"
    "    r0.CGFloat x = fmin(r0.x, c0.z);\n"
    "    r0.CGFloat x = fmax(r0.x, -c0.z);\n"
    "    r0.CGFloat y = abs(r0.x);\n"
    "    r1.z = r0.y*c0.w + c1.z;\n"
    "    r1.CGFloat y = c0.y - r0.y;\n"
    "    r1.z = r0.y*r1.z + c1.x;\n"
    "    r0.CGFloat y = r0.y*r1.z + c1.y;\n"
    "    r1.z = fmax(-r1.x, c0.x);\n"
    "    r1.CGFloat y = sqrt(r1.y);\n"
    "    r0.CGFloat y = -r1.y*r0.y + c1.w;\n"
    "    r0.CGFloat x = float(r0.x < c0.x);\n"
    "    r0.CGFloat x = r0.x*r0.y;\n"
    "    r1.CGFloat y = r0.x*c2.y + -r0.y;\n"
    "    r0.CGFloat y = hg_Params[3].x;\n"
    "    r0.CGFloat x = -hg_Params[3].y;\n"
    "    r0.w = dot(r0.zw, r0.xy);\n"
    "    r0.z = r1.y*hg_Params[4].x;\n"
    "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
    "    r1.CGFloat y = -r1.x*r1.x + c0.y;\n"
    "    r0.CGFloat y = -hg_Params[3].y;\n"
    "    r0.CGFloat x = hg_Params[3].x;\n"
    "    r0.xCGFloat y = r0.zw*r0.xy;\n"
    "    r0.w = dot(r0.zw, hg_Params[3].yx);\n"
    "    r0.z = dot(r0.xy, 1.00000f);\n"
    "    r0.xCGFloat y = r0.zw + hg_Params[2].xy;\n"
    "    r0.xCGFloat y = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
    "    r0.xCGFloat y = r0.xy + hg_Params[6].xy;\n"
    "    r0.xCGFloat y = r0.xy*hg_Params[6].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r1.z = r1.z*r1.z;\n"
    "    r1.z = r0.w*r1.z;\n"
    "    r2.xyz = r1.zzz*hg_Params[5].xyz;\n"
    "    r1.z = sqrt(fabs(r1.y));\n"
    "    r1.z = select(c0.y, r1.z, r1.w < 0.00000f);\n"
    "    r1.CGFloat y = dot(c2.xz, r1.xz);\n"
    "    r1.z = r1.y + c2.z;\n"
    "    r1.CGFloat x = c0.y - hg_Params[4].x;\n"
    "    r1.CGFloat y = -r1.x - hg_Params[4].x;\n"
    "    r1.z = fmax(r1.z, c0.x);\n"
    "    r1.CGFloat y = r1.y - c0.y;\n"
    "    r1.CGFloat x = r1.w - r1.x;\n"
    "    r1.CGFloat x = clamp(r1.x/r1.y, 0.00000f, 1.00000f);\n"
    "    r1.CGFloat y = -r1.x*c2.y + c2.w;\n"
    "    r1.CGFloat x = r1.x*r1.x;\n"
    "    r0.xyz = r0.xyz*r1.zzz + r2.xyz;\n"
    "    r1.CGFloat x = r1.x*r1.y;\n"
    "    output.color0 = r1.xxxx*-r0 + r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcPageCurlBackground");
}

void sub_1B755030C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E753B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755048C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B75504DC()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B75504D4);
}

void *HgcPageCurlBackground::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPageCurlBackground [hgc1]");
}

uint64_t HgcPageCurlBackground::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 144) + 128))(*(void *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcPageCurlBackground::Bind(HgcPageCurlBackground *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcPageCurlBackground::RenderTile(HgcPageCurlBackground *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcPageCurlBackground *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = v9;
    do
    {
      if (v10 < 2)
      {
        uint64_t v15 = 0;
        float32x4_t v17 = v14;
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = v10;
        float32x4_t v17 = v14;
        do
        {
          float32x4_t v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v19 = *((void *)this + 51);
          int8x16_t v20 = *(int8x16_t *)(v19 + 16);
          float32x4_t v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          float32x4_t v22 = *(float32x4_t *)(v19 + 32);
          int32x4_t v23 = *(int32x4_t *)(v19 + 48);
          float32x4_t v24 = vsubq_f32(vaddq_f32(vmulq_f32(v17, (float32x4_t)v20), v21), v22);
          float32x4_t v25 = vsubq_f32(vaddq_f32(vmulq_f32(v18, (float32x4_t)v20), v21), v22);
          int8x16_t v26 = (int8x16_t)vmulq_f32((float32x4_t)v23, v24);
          int8x16_t v27 = (int8x16_t)vmulq_f32((float32x4_t)v23, v25);
          int32x4_t v28 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v26, v26, 4uLL), (float32x4_t)vextq_s8(v26, v26, 8uLL));
          int32x4_t v29 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v27, v27, 4uLL), (float32x4_t)vextq_s8(v27, v27, 8uLL));
          int8x16_t v30 = *(int8x16_t *)(v19 + 64);
          float32x4_t v32 = *(float32x4_t *)(v19 + 96);
          float32x4_t v31 = *(float32x4_t *)(v19 + 112);
          float32x4_t v33 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v30), v32), v31);
          float32x4_t v34 = vminq_f32(vmaxq_f32(vmulq_f32(v33, vrecpsq_f32((float32x4_t)v30, v33)), v32), v31);
          float32x4_t v35 = vmulq_f32(v34, vrecpsq_f32((float32x4_t)v30, v34));
          int8x16_t v36 = (int8x16_t)vmulq_f32(v35, vnegq_f32((float32x4_t)vdupq_laneq_s32(v28, 3)));
          int8x16_t v37 = (int8x16_t)vmulq_f32(v35, vnegq_f32((float32x4_t)vdupq_laneq_s32(v29, 3)));
          int8x16_t v38 = *(int8x16_t *)(v19 + 128);
          int8x16_t v39 = *(int8x16_t *)(v19 + 144);
          v37.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL)), v37, v38).u64[0];
          v40.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL)), v36, v38).u64[0];
          v40.i64[1] = v28.i64[1];
          v37.i64[1] = v29.i64[1];
          v29.i64[0] = *(void *)(v19 + 160);
          float32x2_t v41 = vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.i8)));
          *(float32x2_t *)v28.i8 = vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v37.i8)));
          float32x4_t v42 = *(float32x4_t *)(v19 + 176);
          float32x4_t v43 = *(float32x4_t *)(v19 + 192);
          *(float32x2_t *)v44.i8 = vmax_f32(vmin_f32(v41, *(float32x2_t *)v42.f32), *(float32x2_t *)v43.f32);
          *(float32x2_t *)v28.i8 = vmax_f32(vmin_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v42.f32), *(float32x2_t *)v43.f32);
          int8x16_t v45 = *(int8x16_t *)(v19 + 208);
          v44.i64[1] = v24.i64[0];
          *(int8x8_t *)v24.f32 = vqtbl1_s8(v44, *(int8x8_t *)v45.i8);
          int8x8_t v46 = (int8x8_t)vextq_s8(v45, v45, 8uLL).u64[0];
          v28.i64[1] = v25.i64[0];
          *(int8x8_t *)v25.f32 = vqtbl1_s8((int8x16_t)v28, *(int8x8_t *)v45.i8);
          v45.i64[0] = *(void *)(v19 + 224);
          *(int8x8_t *)v47.f32 = vand_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v24.f32);
          *(int8x8_t *)&v47.u32[2] = vqtbl1_s8(v44, v46);
          *(int8x8_t *)v45.i8 = vand_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v25.f32);
          v45.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v28, v46);
          *(int8x8_t *)v44.i8 = vext_s8(*(int8x8_t *)&v47.u32[2], *(int8x8_t *)v47.f32, 4uLL);
          v44.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v47.f32, *(int8x8_t *)&v47.u32[2], 4uLL);
          *(int8x8_t *)v28.i8 = vext_s8((int8x8_t)v45.u64[1], *(int8x8_t *)v45.i8, 4uLL);
          v28.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v45.i8, (int8x8_t)v45.u64[1], 4uLL);
          int8x16_t v48 = (int8x16_t)vaddq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)v38, (float32x4_t)v28));
          int8x16_t v50 = *(int8x16_t *)(v19 + 240);
          int8x16_t v49 = *(int8x16_t *)(v19 + 256);
          int8x16_t v51 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, v47), vbslq_s8(v50, (int8x16_t)vaddq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)v38, (float32x4_t)v44)), v40));
          int8x16_t v52 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, (float32x4_t)v45), vbslq_s8(v50, v48, v37));
          float32x4_t v53 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vaddq_f32(v32, vmulq_lane_f32((float32x4_t)v51, *(float32x2_t *)v47.f32, 1)), v51);
          float32x4_t v54 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vaddq_f32(v32, vmulq_lane_f32((float32x4_t)v52, *(float32x2_t *)v45.i8, 1)), v52);
          float32x4_t v55 = (float32x4_t)vbslq_s8(v49, (int8x16_t)vaddq_f32(v42, vmulq_laneq_f32(v47, v53, 2)), (int8x16_t)v47);
          float32x4_t v56 = (float32x4_t)vbslq_s8(v49, (int8x16_t)vaddq_f32(v42, vmulq_laneq_f32((float32x4_t)v45, v54, 2)), v45);
          int8x16_t v57 = (int8x16_t)vnegq_f32(v53);
          int8x16_t v58 = (int8x16_t)vnegq_f32(v54);
          float32x4_t v59 = (float32x4_t)vextq_s8(v58, v58, 8uLL);
          float32x4_t v61 = *(float32x4_t *)(v19 + 272);
          int8x16_t v60 = *(int8x16_t *)(v19 + 288);
          int8x16_t v62 = vbslq_s8(v50, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v57, v57, 8uLL), v61), v51);
          int8x16_t v63 = vbslq_s8(v50, (int8x16_t)vmaxq_f32(v59, v61), v52);
          float32x4_t v64 = vminq_f32(vrsqrteq_f32((float32x4_t)v62), v61);
          float32x4_t v65 = vminq_f32(vrsqrteq_f32((float32x4_t)v63), v61);
          float32x4_t v66 = vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v64, (float32x4_t)v62), v64)), v61);
          float32x4_t v67 = vminq_f32(vmulq_f32(v65, vrsqrtsq_f32(vmulq_f32(v65, (float32x4_t)v63), v65)), v61);
          int8x16_t v68 = vbslq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)vbslq_s8(v49, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v66, vrsqrtsq_f32(vmulq_f32(v66, (float32x4_t)v62), v66)), v61), (float32x4_t)v62), v62), v55)), (int8x16_t)v47);
          int8x16_t v69 = vbslq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)vbslq_s8(v49, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v67, vrsqrtsq_f32(vmulq_f32(v67, (float32x4_t)v63), v67)), v61), (float32x4_t)v63), v63), v56)), v45);
          float32x4_t v70 = (float32x4_t)vbslq_s8(v60, vandq_s8(v39, (int8x16_t)vcgtq_f32(v61, (float32x4_t)v68)), v68);
          float32x4_t v71 = (float32x4_t)vbslq_s8(v60, vandq_s8(v39, (int8x16_t)vcgtq_f32(v61, (float32x4_t)v69)), v69);
          float32x4_t v72 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_lane_f32(v70, *(float32x2_t *)v70.f32, 1), v68);
          float32x4_t v73 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_lane_f32(v71, *(float32x2_t *)v71.f32, 1), v69);
          int32x4_t v74 = (int32x4_t)vbslq_s8(v49, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v38, v72.f32[0]), v72), v62);
          float32x4_t v75 = (float32x4_t)vrev64q_s32(v23);
          v47.i64[0] = v75.i64[0];
          v47.i64[1] = v72.i64[1];
          int32x4_t v76 = (int32x4_t)vbslq_s8(v49, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v38, v73.f32[0]), v73), v63);
          v68.i64[0] = v75.i64[0];
          v68.i64[1] = v73.i64[1];
          int32x4_t v77 = (int32x4_t)vnegq_f32((float32x4_t)v23);
          int8x16_t v78 = (int8x16_t)vrev64q_s32(v77);
          int8x16_t v79 = vbslq_s8(v60, v78, (int8x16_t)v47);
          int8x16_t v80 = vbslq_s8(v60, v78, v68);
          int8x16_t v81 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v79, v79, 8uLL), (float32x4_t)v79);
          int8x16_t v82 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v80, v80, 8uLL), (float32x4_t)v80);
          int8x16_t v83 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v81, v81, 4uLL), (float32x4_t)vextq_s8(v81, v81, 8uLL));
          int8x16_t v84 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v82, v82, 4uLL), (float32x4_t)vextq_s8(v82, v82, 8uLL));
          float32x4_t v85 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
          int8x16_t v86 = vbslq_s8(v50, (int8x16_t)vmulq_lane_f32(v85, *(float32x2_t *)v74.i8, 1), v83);
          int8x16_t v87 = vbslq_s8(v50, (int8x16_t)vmulq_lane_f32(v85, *(float32x2_t *)v76.i8, 1), v84);
          int8x16_t v88 = (int8x16_t)vrev64q_s32(v74);
          int8x16_t v89 = (int8x16_t)vrev64q_s32(v76);
          int8x16_t v90 = vbslq_s8(v50, vbslq_s8((int8x16_t)vcgtq_f32(v61, (float32x4_t)v88), v86, v88), v83);
          v83.i64[0] = v77.i64[0];
          v83.i64[1] = v90.i64[1];
          v77.i64[1] = vbslq_s8(v50, vbslq_s8((int8x16_t)vcgtq_f32(v61, *(float32x4_t *)&v89), v87, v89), v84).i64[1];
          int8x16_t v91 = vbslq_s8(v60, (int8x16_t)v23, v83);
          int8x16_t v92 = vbslq_s8(v60, (int8x16_t)v23, (int8x16_t)v77);
          int8x16_t v93 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v91, 1), (float32x4_t)v91);
          int8x16_t v94 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v92, 1), (float32x4_t)v92);
          int8x16_t v95 = (int8x16_t)vmulq_f32(v75, (float32x4_t)vextq_s8(v91, v93, 8uLL));
          int8x16_t v96 = (int8x16_t)vmulq_f32(v75, (float32x4_t)vextq_s8(v92, v94, 8uLL));
          int8x16_t v97 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v95, v95, 4uLL), (float32x4_t)vdupq_lane_s64(v95.i64[0], 0));
          int8x16_t v98 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v96, v96, 4uLL), (float32x4_t)vdupq_lane_s64(v96.i64[0], 0));
          float32x4_t v99 = (float32x4_t)vextq_s8(v97, v93, 8uLL);
          v100.i64[0] = vextq_s8(v97, v93, 0xCuLL).u64[0];
          *(int8x8_t *)v75.f32 = vext_s8(*(int8x8_t *)v93.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), 4uLL);
          v93.i64[1] = v97.i64[1];
          float32x4_t v101 = (float32x4_t)vextq_s8(v98, v94, 8uLL);
          v102.i64[0] = vextq_s8(v98, v94, 0xCuLL).u64[0];
          v94.i64[1] = v98.i64[1];
          v100.i64[1] = v75.i64[0];
          *(int8x8_t *)&v102.u32[2] = vext_s8(*(int8x8_t *)v94.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL), 4uLL);
          int8x16_t v103 = vbslq_s8(v50, (int8x16_t)vaddq_f32(v99, v100), v93);
          int8x16_t v104 = vbslq_s8(v50, (int8x16_t)vaddq_f32(v101, v102), v94);
          float32x4_t v105 = vaddq_f32(v22, (float32x4_t)vextq_s8(v103, v103, 8uLL));
          float32x4_t v106 = vaddq_f32(v22, (float32x4_t)vextq_s8(v104, v104, 8uLL));
          float32x4_t v107 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          float32x4_t v108 = vaddq_f32(v107, vmulq_f32(*(float32x4_t *)v19, v106));
          uint64_t v109 = *((int *)a2 + 22);
          float32x4_t v110 = vsubq_f32(vaddq_f32(v107, vmulq_f32(*(float32x4_t *)v19, v105)), v9);
          uint64_t v111 = *((void *)a2 + 10);
          if (v5)
          {
            int32x4_t v112 = vaddq_s32(vcvtq_s32_f32(v110), vcltzq_f32(v110));
            float32x2_t v113 = (float32x2_t)vsubq_f32(v110, vcvtq_f32_s32(v112)).u64[0];
            float v114 = (float32x4_t *)(v111 + 16 * (v112.i32[0] + v112.i32[1] * (int)v109));
            float32x4_t v115 = vaddq_f32(*v114, vmulq_n_f32(vsubq_f32(v114[1], *v114), v113.f32[0]));
            int8x16_t v116 = (int8x16_t)vaddq_f32(v115, vmulq_lane_f32(vsubq_f32(vaddq_f32(v114[v109], vmulq_n_f32(vsubq_f32(v114[(int)v109 + 1], v114[v109]), v113.f32[0])), v115), v113, 1));
            float32x4_t v117 = vsubq_f32(v108, v9);
            int32x4_t v118 = vaddq_s32(vcvtq_s32_f32(v117), vcltzq_f32(v117));
            v117.i64[0] = vsubq_f32(v117, vcvtq_f32_s32(v118)).u64[0];
            float v119 = (float32x4_t *)(v111 + 16 * (v118.i32[0] + v118.i32[1] * (int)v109));
            float32x4_t v120 = vaddq_f32(*v119, vmulq_n_f32(vsubq_f32(v119[1], *v119), v117.f32[0]));
            int8x16_t v121 = (int8x16_t)vaddq_f32(v120, vmulq_lane_f32(vsubq_f32(vaddq_f32(v119[v109], vmulq_n_f32(vsubq_f32(v119[(int)v109 + 1], v119[v109]), v117.f32[0])), v120), *(float32x2_t *)v117.f32, 1));
          }
          else
          {
            float32x4_t v122 = vaddq_f32(v110, v13);
            int32x4_t v123 = vcvtq_s32_f32(v122);
            v122.i64[0] = vaddq_s32(v123, vcgtq_f32(vcvtq_f32_s32(v123), v122)).u64[0];
            int8x16_t v116 = *(int8x16_t *)(v111 + 16 * (v122.i32[0] + v122.i32[1] * (int)v109));
            float32x4_t v124 = vaddq_f32(vsubq_f32(v108, v9), v13);
            int32x4_t v125 = vcvtq_s32_f32(v124);
            v124.i64[0] = vaddq_s32(v125, vcgtq_f32(vcvtq_f32_s32(v125), v124)).u64[0];
            int8x16_t v121 = *(int8x16_t *)(v111 + 16 * (v124.i32[0] + v124.i32[1] * (int)v109));
          }
          int8x16_t v126 = vmvnq_s8(v50);
          int8x16_t v127 = vmvnq_s8(v49);
          int8x16_t v128 = vmvnq_s8(v60);
          int8x16_t v129 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, vmulq_n_f32((float32x4_t)v88, *(float *)v74.i32)), v62);
          int8x16_t v130 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, vmulq_n_f32((float32x4_t)v89, *(float *)v76.i32)), v63);
          int8x16_t v131 = vandq_s8(v129, v126);
          int8x16_t v132 = vandq_s8(v130, v126);
          int8x16_t v133 = vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v129, (float32x4_t)v129)), v131), (float32x4_t)v116, 3)), v131);
          int8x16_t v134 = vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v130, (float32x4_t)v130)), v132), (float32x4_t)v121, 3)), v132);
          float32x4_t v135 = *(float32x4_t *)(v19 + 80);
          float32x4_t v136 = vmulq_laneq_f32(v135, (float32x4_t)v133, 2);
          float32x4_t v137 = vabsq_f32((float32x4_t)vextq_s8(v133, v133, 0xCuLL));
          float32x4_t v138 = vabsq_f32((float32x4_t)vextq_s8(v134, v134, 0xCuLL));
          float32x4_t v139 = vminq_f32(vrsqrteq_f32(v137), v31);
          float32x4_t v140 = vminq_f32(vrsqrteq_f32(v138), v31);
          float32x4_t v141 = vminq_f32(vmulq_f32(v139, vrsqrtsq_f32(vmulq_f32(v139, v137), v139)), v31);
          float32x4_t v142 = vminq_f32(vmulq_f32(v140, vrsqrtsq_f32(vmulq_f32(v140, v138), v140)), v31);
          int32x4_t v143 = (int32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32(v137, vminq_f32(vmulq_f32(v141, vrsqrtsq_f32(vmulq_f32(v137, v141), v141)), v31))), v131);
          int32x4_t v144 = (int32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32(v138, vminq_f32(vmulq_f32(v142, vrsqrtsq_f32(vmulq_f32(v138, v142), v142)), v31))), v132);
          int8x16_t v145 = *(int8x16_t *)(v19 + 304);
          long long v146 = *(_OWORD *)(v19 + 320);
          int8x16_t v147 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v61, (float32x4_t)vrev64q_s32(v143)), (int8x16_t)v143, v145), v50), v131);
          int8x16_t v148 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v61, (float32x4_t)vrev64q_s32(v144)), (int8x16_t)v144, v145), v50), v132);
          v144.i64[0] = vextq_s8(v148, v148, 8uLL).u64[0];
          *(float32x2_t *)v143.i8 = vmul_f32(*(float32x2_t *)v145.i8, (float32x2_t)vqtbl1_s8(v147, *(int8x8_t *)&v146));
          *(float32x2_t *)v141.f32 = vmul_f32(*(float32x2_t *)v145.i8, (float32x2_t)vqtbl1_s8(v148, *(int8x8_t *)&v146));
          *(float32x2_t *)v143.i8 = vadd_f32(*(float32x2_t *)v143.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v143.i8, 0));
          v143.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v143.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), 4uLL);
          v144.u64[1] = (unint64_t)vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v141.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v141.f32, 0)), *(int8x8_t *)v144.i8, 4uLL);
          float32x4_t v150 = *(float32x4_t *)(v19 + 336);
          float32x4_t v149 = *(float32x4_t *)(v19 + 352);
          int8x16_t v151 = vorrq_s8(vandq_s8(v50, (int8x16_t)vaddq_f32(v150, (float32x4_t)v143)), vandq_s8(v147, v126));
          int8x16_t v152 = vorrq_s8(vandq_s8(v50, (int8x16_t)vaddq_f32(v150, (float32x4_t)v144)), vandq_s8(v148, v126));
          v143.i64[0] = vsubq_f32(v150, (float32x4_t)v30).u64[0];
          v144.i64[0] = v143.i64[0];
          v144.i64[1] = v151.i64[1];
          v143.i64[1] = v152.i64[1];
          int8x16_t v153 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v144), (float32x4_t)v30)), v49), vandq_s8((int8x16_t)v144, v127));
          int8x16_t v154 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v143), (float32x4_t)v30)), v49), vandq_s8((int8x16_t)v143, v127));
          int8x16_t v155 = vorrq_s8(vandq_s8(v153, v126), vandq_s8(v50, (int8x16_t)vmaxq_f32((float32x4_t)v153, v149)));
          int8x16_t v156 = vorrq_s8(vandq_s8(v154, v126), vandq_s8(v50, (int8x16_t)vmaxq_f32((float32x4_t)v154, v149)));
          int8x16_t v157 = *(int8x16_t *)(v19 + 368);
          int8x16_t v158 = *(int8x16_t *)(v19 + 384);
          int8x16_t v159 = vorrq_s8(vandq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v155, (float32x4_t)v157)), vandq_s8(v155, v127));
          int8x16_t v160 = vorrq_s8(vandq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v156, (float32x4_t)v157)), vandq_s8(v156, v127));
          float32x4_t v161 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v159, v159, 0xCuLL), (float32x4_t)v159)), vandq_s8(v159, v128));
          float32x4_t v162 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v160, v160, 0xCuLL), (float32x4_t)v160)), vandq_s8(v160, v128));
          int8x16_t v163 = (int8x16_t)vrev64q_s32((int32x4_t)v161);
          float32x4_t v164 = (float32x4_t)vrev64q_s32((int32x4_t)v162);
          float32x4_t v165 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v163), v32), v31);
          float32x4_t v166 = vminq_f32(vmaxq_f32(vrecpeq_f32(v164), v32), v31);
          float32x4_t v167 = vminq_f32(vmaxq_f32(vmulq_f32(v165, vrecpsq_f32((float32x4_t)v163, v165)), v32), v31);
          float32x4_t v168 = vminq_f32(vmaxq_f32(vmulq_f32(v166, vrecpsq_f32(v164, v166)), v32), v31);
          v169.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v167, vrecpsq_f32((float32x4_t)v163, v167)), v161), (float32x4_t)v157), v150).u64[0];
          v168.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v168, vrecpsq_f32(v164, v168)), v162), (float32x4_t)v157), v150).u64[0];
          v157.i64[0] = v169.i64[0];
          v157.i64[1] = v161.i64[1];
          v163.i64[0] = v168.i64[0];
          v163.i64[1] = v162.i64[1];
          v169.i64[1] = vdupq_laneq_s64((int64x2_t)v161, 1).u64[0];
          v168.i64[1] = vdupq_laneq_s64((int64x2_t)v162, 1).u64[0];
          int8x16_t v170 = (int8x16_t)vsubq_f32(v150, vmulq_f32((float32x4_t)v38, (float32x4_t)vrev64q_s32(v169)));
          int8x16_t v171 = (int8x16_t)vsubq_f32(v150, vmulq_f32((float32x4_t)v38, (float32x4_t)vrev64q_s32((int32x4_t)v168)));
          int8x16_t v172 = vorrq_s8(vandq_s8(v49, v170), vandq_s8(v157, v127));
          int8x16_t v173 = vorrq_s8(vandq_s8(v49, v171), vandq_s8(v163, v127));
          float32x4_t v174 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vmulq_f32((float32x4_t)v172, (float32x4_t)v172)), vandq_s8(v172, v128));
          float32x4_t v175 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vmulq_f32((float32x4_t)v173, (float32x4_t)v173)), vandq_s8(v173, v128));
          float32x4_t v176 = (float32x4_t)vbslq_s8(v158, v116, (int8x16_t)vaddq_f32(v136, vmulq_laneq_f32((float32x4_t)v116, v174, 2)));
          float32x4_t v177 = (float32x4_t)vbslq_s8(v158, v121, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v135, (float32x4_t)v134, 2), vmulq_laneq_f32((float32x4_t)v121, v175, 2)));
          uint64_t v178 = (float32x4_t *)(v11 + 16 * v15);
          *uint64_t v178 = vsubq_f32(v176, vmulq_n_f32(v176, vmulq_lane_f32(v174, *(float32x2_t *)v174.f32, 1).f32[0]));
          v178[1] = vsubq_f32(v177, vmulq_n_f32(v177, vmulq_lane_f32(v175, *(float32x2_t *)v175.f32, 1).f32[0]));
          float32x4_t v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B7E736B0);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        uint64_t v15 = v15;
      }
      if ((int)v15 < v10)
      {
        uint64_t v179 = *((void *)this + 51);
        float32x4_t v180 = *(float32x4_t *)(v179 + 32);
        int32x4_t v181 = *(int32x4_t *)(v179 + 48);
        float32x4_t v182 = vsubq_f32(vaddq_f32(vmulq_f32(v17, *(float32x4_t *)(v179 + 16)), (float32x4_t)vextq_s8(*(int8x16_t *)(v179 + 16), *(int8x16_t *)(v179 + 16), 8uLL)), v180);
        int8x16_t v183 = (int8x16_t)vmulq_f32((float32x4_t)v181, v182);
        int32x4_t v184 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v183, v183, 4uLL), (float32x4_t)vextq_s8(v183, v183, 8uLL));
        float32x4_t v185 = *(float32x4_t *)(v179 + 64);
        float32x4_t v186 = *(float32x4_t *)(v179 + 96);
        float32x4_t v187 = *(float32x4_t *)(v179 + 112);
        float32x4_t v188 = vminq_f32(vmaxq_f32(vrecpeq_f32(v185), v186), v187);
        float32x4_t v189 = vminq_f32(vmaxq_f32(vmulq_f32(v188, vrecpsq_f32(v185, v188)), v186), v187);
        int8x16_t v190 = (int8x16_t)vmulq_f32(vmulq_f32(v189, vrecpsq_f32(v185, v189)), vnegq_f32((float32x4_t)vdupq_laneq_s32(v184, 3)));
        int8x16_t v191 = *(int8x16_t *)(v179 + 128);
        int8x16_t v192 = *(int8x16_t *)(v179 + 144);
        v193.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v191, (float32x4_t)vextq_s8((int8x16_t)v184, (int8x16_t)v184, 0xCuLL)), v190, v191).u64[0];
        v193.i64[1] = v184.i64[1];
        float32x4_t v195 = *(float32x4_t *)(v179 + 176);
        float32x4_t v194 = *(float32x4_t *)(v179 + 192);
        *(float32x2_t *)v184.i8 = vmax_f32(vmin_f32(vadd_f32(*(float32x2_t *)v192.i8, (float32x2_t)vorr_s8(*(int8x8_t *)(v179 + 160), (int8x8_t)vsub_f32(*(float32x2_t *)v192.i8, *(float32x2_t *)v193.i8))), *(float32x2_t *)v195.f32), *(float32x2_t *)v194.f32);
        int8x16_t v196 = *(int8x16_t *)(v179 + 208);
        v184.i64[1] = v182.i64[0];
        *(int8x8_t *)v197.f32 = vand_s8(vqtbl1_s8((int8x16_t)v184, *(int8x8_t *)v196.i8), *(int8x8_t *)(v179 + 224));
        *(int8x8_t *)&v197.u32[2] = vqtbl1_s8((int8x16_t)v184, (int8x8_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL));
        *(int8x8_t *)v184.i8 = vext_s8(*(int8x8_t *)&v197.u32[2], *(int8x8_t *)v197.f32, 4uLL);
        v184.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v197.f32, *(int8x8_t *)&v197.u32[2], 4uLL);
        int8x16_t v199 = *(int8x16_t *)(v179 + 240);
        int8x16_t v198 = *(int8x16_t *)(v179 + 256);
        int8x16_t v200 = vbslq_s8(v198, (int8x16_t)vsubq_f32(v194, v197), vbslq_s8(v199, (int8x16_t)vaddq_f32((float32x4_t)v192, vmulq_f32((float32x4_t)v191, (float32x4_t)v184)), v193));
        float32x4_t v201 = (float32x4_t)vbslq_s8(v199, (int8x16_t)vaddq_f32(v186, vmulq_lane_f32((float32x4_t)v200, *(float32x2_t *)v197.f32, 1)), v200);
        float32x4_t v202 = (float32x4_t)vbslq_s8(v198, (int8x16_t)vaddq_f32(v195, vmulq_laneq_f32(v197, v201, 2)), (int8x16_t)v197);
        int8x16_t v203 = (int8x16_t)vnegq_f32(v201);
        float32x4_t v204 = (float32x4_t)vextq_s8(v203, v203, 8uLL);
        float32x4_t v206 = *(float32x4_t *)(v179 + 272);
        int8x16_t v205 = *(int8x16_t *)(v179 + 288);
        int8x16_t v207 = vbslq_s8(v199, (int8x16_t)vmaxq_f32(v204, v206), v200);
        float32x4_t v208 = vminq_f32(vrsqrteq_f32((float32x4_t)v207), v206);
        int8x16_t v209 = (int8x16_t)vminq_f32(vmulq_f32(v208, vrsqrtsq_f32(vmulq_f32(v208, (float32x4_t)v207), v208)), v206);
        int8x16_t v210 = vbslq_s8(v198, (int8x16_t)vsubq_f32((float32x4_t)v192, vmulq_f32((float32x4_t)vbslq_s8(v198, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32((float32x4_t)v209, vrsqrtsq_f32(vmulq_f32((float32x4_t)v209, (float32x4_t)v207), (float32x4_t)v209)), v206), (float32x4_t)v207), v207), v202)), (int8x16_t)v197);
        float32x4_t v211 = (float32x4_t)vbslq_s8(v205, vandq_s8(v192, (int8x16_t)vcgtq_f32(v206, (float32x4_t)v210)), v210);
        float32x4_t v212 = (float32x4_t)vbslq_s8(v205, (int8x16_t)vmulq_lane_f32(v211, *(float32x2_t *)v211.f32, 1), v210);
        int32x4_t v213 = (int32x4_t)vbslq_s8(v198, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v191, v212.f32[0]), v212), v207);
        float32x4_t v214 = (float32x4_t)vrev64q_s32(v181);
        v209.i64[0] = v214.i64[0];
        v209.i64[1] = v212.i64[1];
        int32x4_t v215 = (int32x4_t)vnegq_f32((float32x4_t)v181);
        int8x16_t v216 = vbslq_s8(v205, (int8x16_t)vrev64q_s32(v215), v209);
        int8x16_t v217 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v216, v216, 8uLL), (float32x4_t)v216);
        int8x16_t v218 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v217, v217, 4uLL), (float32x4_t)vextq_s8(v217, v217, 8uLL));
        int8x16_t v219 = (int8x16_t)vrev64q_s32(v213);
        v215.i64[1] = vbslq_s8(v199, vbslq_s8((int8x16_t)vcgtq_f32(v206, *(float32x4_t *)&v219), vbslq_s8(v199, (int8x16_t)vmulq_lane_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v185, 0), *(float32x2_t *)&v213, 1), v218), v219), v218).i64[1];
        int8x16_t v220 = vbslq_s8(v205, (int8x16_t)v181, (int8x16_t)v215);
        int8x16_t v221 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v220, 1), (float32x4_t)v220);
        int8x16_t v222 = (int8x16_t)vmulq_f32(v214, (float32x4_t)vextq_s8(v220, v221, 8uLL));
        int8x16_t v223 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v222, v222, 4uLL), (float32x4_t)vdupq_lane_s64(v222.i64[0], 0));
        float32x4_t v224 = (float32x4_t)vextq_s8(v223, v221, 8uLL);
        v225.i64[0] = vextq_s8(v223, v221, 0xCuLL).u64[0];
        v221.i64[1] = v223.i64[1];
        *(int8x8_t *)&v225.u32[2] = vext_s8(*(int8x8_t *)v221.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v223, v223, 8uLL), 4uLL);
        int8x16_t v226 = vbslq_s8(v199, (int8x16_t)vaddq_f32(v224, v225), v221);
        uint64_t v227 = *((int *)a2 + 22);
        float32x4_t v228 = vsubq_f32(vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v179, *(int8x16_t *)v179, 8uLL), vmulq_f32(*(float32x4_t *)v179, vaddq_f32(v180, (float32x4_t)vextq_s8(v226, v226, 8uLL)))), v9);
        uint64_t v229 = *((void *)a2 + 10);
        if (v5)
        {
          int32x4_t v230 = vaddq_s32(vcvtq_s32_f32(v228), vcltzq_f32(v228));
          float32x2_t v231 = (float32x2_t)vsubq_f32(v228, vcvtq_f32_s32(v230)).u64[0];
          uint64_t v232 = (float32x4_t *)(v229 + 16 * (v230.i32[0] + v230.i32[1] * (int)v227));
          float32x4_t v233 = vaddq_f32(*v232, vmulq_n_f32(vsubq_f32(v232[1], *v232), v231.f32[0]));
          int8x16_t v234 = (int8x16_t)vaddq_f32(v233, vmulq_lane_f32(vsubq_f32(vaddq_f32(v232[v227], vmulq_n_f32(vsubq_f32(v232[(int)v227 + 1], v232[v227]), v231.f32[0])), v233), v231, 1));
        }
        else
        {
          float32x4_t v235 = vaddq_f32(v228, v13);
          int32x4_t v236 = vcvtq_s32_f32(v235);
          v235.i64[0] = vaddq_s32(v236, vcgtq_f32(vcvtq_f32_s32(v236), v235)).u64[0];
          int8x16_t v234 = *(int8x16_t *)(v229 + 16 * (v235.i32[0] + v235.i32[1] * (int)v227));
        }
        int8x16_t v237 = vmvnq_s8(v199);
        int8x16_t v238 = vmvnq_s8(v198);
        int8x16_t v239 = vmvnq_s8(v205);
        int8x16_t v240 = vbslq_s8(v198, (int8x16_t)vsubq_f32(v194, vmulq_n_f32((float32x4_t)v219, *(float *)v213.i32)), v207);
        int8x16_t v241 = vandq_s8(v199, (int8x16_t)vmulq_f32((float32x4_t)v240, (float32x4_t)v240));
        int8x16_t v242 = vandq_s8(v240, v237);
        int8x16_t v243 = vorrq_s8(vandq_s8(v199, (int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(v241, v242), (float32x4_t)v234, 3)), v242);
        float32x4_t v244 = vabsq_f32((float32x4_t)vextq_s8(v243, v243, 0xCuLL));
        float32x4_t v245 = vminq_f32(vrsqrteq_f32(v244), v187);
        float32x4_t v246 = vminq_f32(vmulq_f32(v245, vrsqrtsq_f32(vmulq_f32(v245, v244), v245)), v187);
        int32x4_t v247 = (int32x4_t)vorrq_s8(vandq_s8(v199, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v246, vrsqrtsq_f32(vmulq_f32(v246, v244), v246)), v187), v244)), v242);
        int8x16_t v248 = *(int8x16_t *)(v179 + 304);
        int8x16_t v249 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v206, (float32x4_t)vrev64q_s32(v247)), (int8x16_t)v247, v248), v199), v242);
        *(float32x2_t *)v248.i8 = vmul_f32(*(float32x2_t *)v248.i8, (float32x2_t)vqtbl1_s8(v249, *(int8x8_t *)(v179 + 320)));
        *(int8x8_t *)v250.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v248.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v248.i8, 0)), (int8x8_t)*(_OWORD *)&vextq_s8(v249, v249, 8uLL), 4uLL);
        v250.i64[1] = v250.i64[0];
        float32x4_t v251 = *(float32x4_t *)(v179 + 336);
        int8x16_t v252 = vorrq_s8(vandq_s8(v199, (int8x16_t)vaddq_f32(v251, v250)), vandq_s8(v249, v237));
        v250.i64[0] = vsubq_f32(v251, v185).u64[0];
        v250.i64[1] = v252.i64[1];
        float32x4_t v253 = vmulq_laneq_f32(*(float32x4_t *)(v179 + 80), (float32x4_t)v243, 2);
        int8x16_t v254 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v250), v185)), v198), vandq_s8((int8x16_t)v250, v238));
        int8x16_t v255 = vorrq_s8(vandq_s8(v254, v237), vandq_s8(v199, (int8x16_t)vmaxq_f32((float32x4_t)v254, *(float32x4_t *)(v179 + 352))));
        float32x4_t v256 = *(float32x4_t *)(v179 + 368);
        int8x16_t v257 = vorrq_s8(vandq_s8(v198, (int8x16_t)vsubq_f32((float32x4_t)v255, v256)), vandq_s8(v255, v238));
        float32x4_t v258 = (float32x4_t)vorrq_s8(vandq_s8(v205, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v257, v257, 0xCuLL), (float32x4_t)v257)), vandq_s8(v257, v239));
        float32x4_t v259 = (float32x4_t)vrev64q_s32((int32x4_t)v258);
        float32x4_t v260 = vminq_f32(vmaxq_f32(vrecpeq_f32(v259), v186), v187);
        float32x4_t v261 = vminq_f32(vmaxq_f32(vmulq_f32(v260, vrecpsq_f32(v259, v260)), v186), v187);
        v261.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v261, vrecpsq_f32(v259, v261)), v258), v256), v251).u64[0];
        v262.i64[0] = v261.i64[0];
        v262.i64[1] = v258.i64[1];
        v261.i64[1] = vdupq_laneq_s64((int64x2_t)v258, 1).u64[0];
        int8x16_t v263 = vorrq_s8(vandq_s8(v198, (int8x16_t)vsubq_f32(v251, vmulq_f32((float32x4_t)v191, (float32x4_t)vrev64q_s32((int32x4_t)v261)))), vandq_s8(v262, v238));
        float32x4_t v264 = (float32x4_t)vorrq_s8(vandq_s8(v205, (int8x16_t)vmulq_f32((float32x4_t)v263, (float32x4_t)v263)), vandq_s8(v263, v239));
        float32x4_t v265 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v179 + 384), v234, (int8x16_t)vaddq_f32(v253, vmulq_laneq_f32((float32x4_t)v234, v264, 2)));
        *(float32x4_t *)(v11 + 16 * v15) = vsubq_f32(v265, vmulq_n_f32(v265, vmulq_lane_f32(v264, *(float32x2_t *)v264.f32, 1).f32[0]));
      }
      float32x4_t v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736C0);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcPageCurlBackground::GetDOD(HgcPageCurlBackground *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    if ((*(int (**)(HgcPageCurlBackground *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcPageCurlBackground::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcPageCurlBackground::HgcPageCurlBackground(HgcPageCurlBackground *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10960E0;
  operator new();
}

void sub_1B7551804(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPageCurlBackground::~HgcPageCurlBackground(HGNode *this)
{
  *(void *)this = &unk_1F10960E0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C407DC911DDLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcPageCurlBackground::~HgcPageCurlBackground(this);

  HGObject::operator delete(v1);
}

uint64_t HgcPageCurlBackground::SetParameter(HgcPageCurlBackground *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      *uint64_t v7 = a3.n128_f32[0];
      v7[1] = a4;
      double v7[2] = a5;
      void v7[3] = a6;
      goto LABEL_33;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      unsigned char v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      _OWORD v9[6] = a5;
      v9[7] = a6;
      goto LABEL_33;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_33;
    case 3:
      uint64_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_33;
    case 4:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_33;
    case 5:
      float32x4_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    case 6:
      uint64_t v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((void *)this + 51) + 40pthread_cond_init((pthread_cond_t *)this, 0) = a3;
      return v8;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcPageCurlBackground::GetParameter(HgcPageCurlBackground *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      uint64_t v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      uint64_t v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      uint64_t v4 = v6 + 11;
      goto LABEL_9;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      uint64_t v4 = v7 + 15;
      goto LABEL_9;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      uint64_t v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      uint64_t v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[100];
      a3[1] = v10[101];
      a3[2] = v10[102];
      uint64_t v4 = v10 + 103;
LABEL_9:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcPageCurlForeground::GetProgram(HgcPageCurlForeground *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000b0b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const half4 c1 = half4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
             "    const half4 c2 = half4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
             "    const half4 c3 = half4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xCGFloat y = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    s0.xCGFloat y = s0.xy - hg_Params[2].xy;\n"
             "    s1.w = dot(s0.xy, hg_Params[3].xy);\n"
             "    s0.z = s1.w/hg_Params[4].x;\n"
             "    s1.CGFloat x = select(float(c0.x), s0.z, s1.w < 0.00000h);\n"
             "    s0.z = s1.x + float(c0.y);\n"
             "    s0.z = -fabs(s0.z) + float(c0.y);\n"
             "    s0.w = clamp(fmin(s0.z, float(c0.z)), 0.00000f, 1.00000f);\n"
             "    s2.CGFloat y = s0.w*float(c0.w) + float(c1.y);\n"
             "    s2.CGFloat x = float(c0.y) - s0.w;\n"
             "    s2.CGFloat y = s0.w*s2.y + float(c1.x);\n"
             "    s0.w = s0.w*s2.y + float(c1.z);\n"
             "    s2.CGFloat x = sqrt(s2.x);\n"
             "    s0.z = s2.x*s0.w + float(c1.w);\n"
             "    s0.z = s0.z*hg_Params[4].x;\n"
             "    s0.z = select(s1.w, s0.z, s1.w < 0.00000h);\n"
             "    s2.CGFloat x = float(c2.x)*hg_Params[4].x + -s0.z;\n"
             "    s0.w = hg_Params[3].x;\n"
             "    s0.z = -hg_Params[3].y;\n"
             "    s2.CGFloat y = dot(s0.xy, s0.zw);\n"
             "    s0.z = -s1.x*s1.x + float(c0.y);\n"
             "    s0.CGFloat y = -hg_Params[3].y;\n"
             "    s0.CGFloat x = hg_Params[3].x;\n"
             "    s0.CGFloat x = dot(s2.xy, s0.xy);\n"
             "    s0.CGFloat y = sqrt(fabs(s0.z));\n"
             "    s0.zw = s2.xy*hg_Params[3].yx;\n"
             "    s1.z = select(float(c0.y), s0.y, s1.w < 0.00000h);\n"
             "    s2.CGFloat x = dot(s1.xz, float2(c2.yz));\n"
             "    s0.CGFloat y = dot(s0.zw, 1.00000f);\n"
             "    s0.z = s2.x*float(c2.w) + float(c2.w);\n"
             "    s0.xCGFloat y = s0.xy + hg_Params[2].xy;\n"
             "    s2.CGFloat x = fmax(s0.z, float(c0.x));\n"
             "    s0.xCGFloat y = s0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    s0.xCGFloat y = s0.xy + hg_Params[7].xy;\n"
             "    s0.xCGFloat y = s0.xy*hg_Params[7].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    s0.w = float(r0.w);\n"
             "    s0.xyz = float3(r0.xyz)*s2.xxx;\n"
             "    r0.xyz = half3(s0.www)*half3(hg_Params[6].xyz);\n"
             "    s1.CGFloat y = float(c2.z) - hg_Params[6].w;\n"
             "    s0.xyz = s0.xyz*s1.yyy + float3(r0.xyz);\n"
             "    s2.CGFloat y = fmax(-s1.x, float(c0.x));\n"
             "    s2.z = s2.y*s2.y;\n"
             "    s2.CGFloat x = float(c2.z) - hg_Params[4].x;\n"
             "    s2.CGFloat y = -s2.x - hg_Params[4].x;\n"
             "    s2.z = s0.w*s2.z;\n"
             "    s2.CGFloat y = s2.y - float(c2.z);\n"
             "    s2.CGFloat x = s1.w - s2.x;\n"
             "    s2.CGFloat x = clamp(s2.x/s2.y, 0.00000f, 1.00000f);\n"
             "    s2.CGFloat y = s2.x*float(c3.y) + float(c3.x);\n"
             "    s2.CGFloat x = s2.x*s2.x;\n"
             "    s0.xyz = s2.zzz*hg_Params[5].xyz + s0.xyz;\n"
             "    s2.CGFloat x = s2.x*s2.y;\n"
             "    output.color0 = s2.xxxx*-s0 + s0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=26f7cb92:eab89336:68976724:cd5be2d2\n"
             "//SIG=00400000:00000000:00000000:00000001:0004:0008:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000a26\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const float4 c1 = float4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
             "    const float4 c2 = float4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
             "    const float4 c3 = float4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xCGFloat y = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    r0.xCGFloat y = r0.xy - hg_Params[2].xy;\n"
             "    r1.w = dot(r0.xy, hg_Params[3].xy);\n"
             "    r0.z = r1.w/hg_Params[4].x;\n"
             "    r1.CGFloat x = select(c0.x, r0.z, r1.w < 0.00000f);\n"
             "    r0.z = r1.x + c0.y;\n"
             "    r0.z = -fabs(r0.z) + c0.y;\n"
             "    r0.w = clamp(fmin(r0.z, c0.z), 0.00000f, 1.00000f);\n"
             "    r2.CGFloat y = r0.w*c0.w + c1.y;\n"
             "    r2.CGFloat x = c0.y - r0.w;\n"
             "    r2.CGFloat y = r0.w*r2.y + c1.x;\n"
             "    r0.w = r0.w*r2.y + c1.z;\n"
             "    r2.CGFloat x = sqrt(r2.x);\n"
             "    r0.z = r2.x*r0.w + c1.w;\n"
             "    r0.z = r0.z*hg_Params[4].x;\n"
             "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
             "    r2.CGFloat x = c2.x*hg_Params[4].x + -r0.z;\n"
             "    r0.w = hg_Params[3].x;\n"
             "    r0.z = -hg_Params[3].y;\n"
             "    r2.CGFloat y = dot(r0.xy, r0.zw);\n"
             "    r0.z = -r1.x*r1.x + c0.y;\n"
             "    r0.CGFloat y = -hg_Params[3].y;\n"
             "    r0.CGFloat x = hg_Params[3].x;\n"
             "    r0.CGFloat x = dot(r2.xy, r0.xy);\n"
             "    r0.CGFloat y = sqrt(fabs(r0.z));\n"
             "    r0.zw = r2.xy*hg_Params[3].yx;\n"
             "    r1.z = select(c0.y, r0.y, r1.w < 0.00000f);\n"
             "    r2.CGFloat x = dot(r1.xz, c2.yz);\n"
             "    r0.CGFloat y = dot(r0.zw, 1.00000f);\n"
             "    r0.z = r2.x*c2.w + c2.w;\n"
             "    r0.xCGFloat y = r0.xy + hg_Params[2].xy;\n"
             "    r2.CGFloat x = fmax(r0.z, c0.x);\n"
             "    r0.xCGFloat y = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    r0.xCGFloat y = r0.xy + hg_Params[7].xy;\n"
             "    r0.xCGFloat y = r0.xy*hg_Params[7].zw;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    r0.xyz = r0.xyz*r2.xxx;\n"
             "    r2.xyz = r0.www*hg_Params[6].xyz;\n"
             "    r1.CGFloat y = c2.z - hg_Params[6].w;\n"
             "    r0.xyz = r0.xyz*r1.yyy + r2.xyz;\n"
             "    r2.CGFloat y = fmax(-r1.x, c0.x);\n"
             "    r2.z = r2.y*r2.y;\n"
             "    r2.CGFloat x = c2.z - hg_Params[4].x;\n"
             "    r2.CGFloat y = -r2.x - hg_Params[4].x;\n"
             "    r2.z = r0.w*r2.z;\n"
             "    r2.CGFloat y = r2.y - c2.z;\n"
             "    r2.CGFloat x = r1.w - r2.x;\n"
             "    r2.CGFloat x = clamp(r2.x/r2.y, 0.00000f, 1.00000f);\n"
             "    r2.CGFloat y = r2.x*c3.y + c3.x;\n"
             "    r2.CGFloat x = r2.x*r2.x;\n"
             "    r0.xyz = r2.zzz*hg_Params[5].xyz + r0.xyz;\n"
             "    r2.CGFloat x = r2.x*r2.y;\n"
             "    output.color0 = r2.xxxx*-r0 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=b626b4ab:6754877a:aab8114a:ec365a38\n"
             "//SIG=00000000:00000000:00000000:00000000:0004:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000b34\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
           "    const highp vec4 c1 = vec4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
           "    const highp vec4 c2 = vec4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
           "    const highp vec4 c3 = vec4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xCGFloat y = hg_TexCoord0.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
           "    r0.xCGFloat y = r0.xy - hg_ProgramLocal2.xy;\n"
           "    r1.w = dot(r0.xy, hg_ProgramLocal3.xy);\n"
           "    r0.z = r1.w/hg_ProgramLocal4.x;\n"
           "    r1.CGFloat x = r1.w < 0.00000 ? r0.z : c0.x;\n"
           "    r0.z = r1.x + c0.y;\n"
           "    r0.z = -abs(r0.z) + c0.y;\n"
           "    r0.w = clamp(min(r0.z, c0.z), 0.00000, 1.00000);\n"
           "    r2.CGFloat y = r0.w*c0.w + c1.y;\n"
           "    r2.CGFloat x = c0.y - r0.w;\n"
           "    r2.CGFloat y = r0.w*r2.y + c1.x;\n"
           "    r0.w = r0.w*r2.y + c1.z;\n"
           "    r2.CGFloat x = sqrt(r2.x);\n"
           "    r0.z = r2.x*r0.w + c1.w;\n"
           "    r0.z = r0.z*hg_ProgramLocal4.x;\n"
           "    r0.z = r1.w < 0.00000 ? r0.z : r1.w;\n"
           "    r2.CGFloat x = c2.x*hg_ProgramLocal4.x + -r0.z;\n"
           "    r0.w = hg_ProgramLocal3.x;\n"
           "    r0.z = -hg_ProgramLocal3.y;\n"
           "    r2.CGFloat y = dot(r0.xy, r0.zw);\n"
           "    r0.z = -r1.x*r1.x + c0.y;\n"
           "    r0.CGFloat y = -hg_ProgramLocal3.y;\n"
           "    r0.CGFloat x = hg_ProgramLocal3.x;\n"
           "    r0.CGFloat x = dot(r2.xy, r0.xy);\n"
           "    r0.CGFloat y = sqrt(abs(r0.z));\n"
           "    r0.zw = r2.xy*hg_ProgramLocal3.yx;\n"
           "    r1.z = r1.w < 0.00000 ? r0.y : c0.y;\n"
           "    r2.CGFloat x = dot(r1.xz, c2.yz);\n"
           "    r0.CGFloat y = dot(r0.zw, vec2(1.00000));\n"
           "    r0.z = r2.x*c2.w + c2.w;\n"
           "    r0.xCGFloat y = r0.xy + hg_ProgramLocal2.xy;\n"
           "    r2.CGFloat x = max(r0.z, c0.x);\n"
           "    r0.xCGFloat y = r0.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
           "    r0.xCGFloat y = r0.xy + hg_ProgramLocal7.xy;\n"
           "    r0.xCGFloat y = r0.xy*hg_ProgramLocal7.zw;\n"
           "    r0 = texture2D(hg_Texture0, r0.xy);\n"
           "    r0.xyz = r0.xyz*r2.xxx;\n"
           "    r2.xyz = r0.www*hg_ProgramLocal6.xyz;\n"
           "    r1.CGFloat y = c2.z - hg_ProgramLocal6.w;\n"
           "    r0.xyz = r0.xyz*r1.yyy + r2.xyz;\n"
           "    r2.CGFloat y = max(-r1.x, c0.x);\n"
           "    r2.z = r2.y*r2.y;\n"
           "    r2.CGFloat x = c2.z - hg_ProgramLocal4.x;\n"
           "    r2.CGFloat y = -r2.x - hg_ProgramLocal4.x;\n"
           "    r2.z = r0.w*r2.z;\n"
           "    r2.CGFloat y = r2.y - c2.z;\n"
           "    r2.CGFloat x = r1.w - r2.x;\n"
           "    r2.CGFloat x = clamp(r2.x/r2.y, 0.00000, 1.00000);\n"
           "    r2.CGFloat y = r2.x*c3.y + c3.x;\n"
           "    r2.CGFloat x = r2.x*r2.x;\n"
           "    r0.xyz = r2.zzz*hg_ProgramLocal5.xyz + r0.xyz;\n"
           "    r2.CGFloat x = r2.x*r2.y;\n"
           "    gl_FragColor = r2.xxxx*-r0 + r0;\n"
           "}\n"
           "//MD5=2561706a:1ef3d5e9:193f64ab:daef44e1\n"
           "//SIG=00000000:00000000:00000000:00000000:0004:0008:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPageCurlForeground::InitProgramDescriptor(HgcPageCurlForeground *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPageCurlForeground_hgc_visible", "//Metal1.0     \n//LEN=000000096e\n[[ visible ]] FragmentOut HgcPageCurlForeground_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
    "    const float4 c1 = float4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
    "    const float4 c2 = float4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
    "    const float4 c3 = float4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xCGFloat y = texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
    "    r0.xCGFloat y = r0.xy - hg_Params[2].xy;\n"
    "    r1.w = dot(r0.xy, hg_Params[3].xy);\n"
    "    r0.z = r1.w/hg_Params[4].x;\n"
    "    r1.CGFloat x = select(c0.x, r0.z, r1.w < 0.00000f);\n"
    "    r0.z = r1.x + c0.y;\n"
    "    r0.z = -fabs(r0.z) + c0.y;\n"
    "    r0.w = clamp(fmin(r0.z, c0.z), 0.00000f, 1.00000f);\n"
    "    r2.CGFloat y = r0.w*c0.w + c1.y;\n"
    "    r2.CGFloat x = c0.y - r0.w;\n"
    "    r2.CGFloat y = r0.w*r2.y + c1.x;\n"
    "    r0.w = r0.w*r2.y + c1.z;\n"
    "    r2.CGFloat x = sqrt(r2.x);\n"
    "    r0.z = r2.x*r0.w + c1.w;\n"
    "    r0.z = r0.z*hg_Params[4].x;\n"
    "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
    "    r2.CGFloat x = c2.x*hg_Params[4].x + -r0.z;\n"
    "    r0.w = hg_Params[3].x;\n"
    "    r0.z = -hg_Params[3].y;\n"
    "    r2.CGFloat y = dot(r0.xy, r0.zw);\n"
    "    r0.z = -r1.x*r1.x + c0.y;\n"
    "    r0.CGFloat y = -hg_Params[3].y;\n"
    "    r0.CGFloat x = hg_Params[3].x;\n"
    "    r0.CGFloat x = dot(r2.xy, r0.xy);\n"
    "    r0.CGFloat y = sqrt(fabs(r0.z));\n"
    "    r0.zw = r2.xy*hg_Params[3].yx;\n"
    "    r1.z = select(c0.y, r0.y, r1.w < 0.00000f);\n"
    "    r2.CGFloat x = dot(r1.xz, c2.yz);\n"
    "    r0.CGFloat y = dot(r0.zw, 1.00000f);\n"
    "    r0.z = r2.x*c2.w + c2.w;\n"
    "    r0.xCGFloat y = r0.xy + hg_Params[2].xy;\n"
    "    r2.CGFloat x = fmax(r0.z, c0.x);\n"
    "    r0.xCGFloat y = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
    "    r0.xCGFloat y = r0.xy + hg_Params[7].xy;\n"
    "    r0.xCGFloat y = r0.xy*hg_Params[7].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r0.xyz = r0.xyz*r2.xxx;\n"
    "    r2.xyz = r0.www*hg_Params[6].xyz;\n"
    "    r1.CGFloat y = c2.z - hg_Params[6].w;\n"
    "    r0.xyz = r0.xyz*r1.yyy + r2.xyz;\n"
    "    r2.CGFloat y = fmax(-r1.x, c0.x);\n"
    "    r2.z = r2.y*r2.y;\n"
    "    r2.CGFloat x = c2.z - hg_Params[4].x;\n"
    "    r2.CGFloat y = -r2.x - hg_Params[4].x;\n"
    "    r2.z = r0.w*r2.z;\n"
    "    r2.CGFloat y = r2.y - c2.z;\n"
    "    r2.CGFloat x = r1.w - r2.x;\n"
    "    r2.CGFloat x = clamp(r2.x/r2.y, 0.00000f, 1.00000f);\n"
    "    r2.CGFloat y = r2.x*c3.y + c3.x;\n"
    "    r2.CGFloat x = r2.x*r2.x;\n"
    "    r0.xyz = r2.zzz*hg_Params[5].xyz + r0.xyz;\n"
    "    r2.CGFloat x = r2.x*r2.y;\n"
    "    output.color0 = r2.xxxx*-r0 + r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcPageCurlForeground");
}

void sub_1B7551D30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75180;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7551EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7551F00()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7551EF8);
}

void *HgcPageCurlForeground::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPageCurlForeground [hgc1]");
}

uint64_t HgcPageCurlForeground::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 144) + 128))(*(void *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcPageCurlForeground::Bind(HgcPageCurlForeground *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcPageCurlForeground::RenderTile(HgcPageCurlForeground *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcPageCurlForeground *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = (float32x4_t)v9;
    do
    {
      if (v10 < 2)
      {
        uint64_t v15 = 0;
        float32x4_t v17 = v14;
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = v10;
        float32x4_t v17 = v14;
        do
        {
          float32x4_t v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v19 = *((void *)this + 51);
          int8x16_t v20 = *(int8x16_t *)(v19 + 16);
          float32x4_t v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          float32x4_t v22 = *(float32x4_t *)(v19 + 32);
          int8x16_t v23 = *(int8x16_t *)(v19 + 48);
          int8x16_t v24 = (int8x16_t)vsubq_f32(vaddq_f32(vmulq_f32(v17, (float32x4_t)v20), v21), v22);
          int8x16_t v25 = (int8x16_t)vsubq_f32(vaddq_f32(vmulq_f32(v18, (float32x4_t)v20), v21), v22);
          int8x16_t v26 = (int8x16_t)vmulq_f32((float32x4_t)v23, (float32x4_t)v24);
          int8x16_t v27 = (int8x16_t)vmulq_f32((float32x4_t)v23, (float32x4_t)v25);
          int8x16_t v28 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v26, v26, 4uLL), (float32x4_t)vextq_s8(v26, v26, 8uLL));
          int8x16_t v29 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v27, v27, 4uLL), (float32x4_t)vextq_s8(v27, v27, 8uLL));
          int8x16_t v30 = *(int8x16_t *)(v19 + 64);
          float32x4_t v31 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
          int8x16_t v33 = *(int8x16_t *)(v19 + 112);
          float32x4_t v32 = *(float32x4_t *)(v19 + 128);
          float32x4_t v34 = vminq_f32(vmaxq_f32(vrecpeq_f32(v31), (float32x4_t)v33), v32);
          float32x4_t v35 = vminq_f32(vmaxq_f32(vmulq_f32(v34, vrecpsq_f32(v31, v34)), (float32x4_t)v33), v32);
          float32x4_t v36 = vmulq_f32(v35, vrecpsq_f32(v31, v35));
          int8x16_t v37 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v33, (float32x4_t)vextq_s8(v28, v28, 0xCuLL)), (int8x16_t)vdupq_laneq_s64((int64x2_t)vmulq_laneq_f32(v36, (float32x4_t)v28, 3), 1), v33);
          int8x16_t v38 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v33, (float32x4_t)vextq_s8(v29, v29, 0xCuLL)), (int8x16_t)vdupq_laneq_s64((int64x2_t)vmulq_laneq_f32(v36, (float32x4_t)v29, 3), 1), v33);
          float32x4_t v39 = (float32x4_t)vextq_s8(v28, v37, 8uLL);
          v40.i64[0] = v37.i64[0];
          float32x4_t v41 = vmulq_n_f32(v39, *(float *)v37.i32);
          v37.i64[1] = v28.i64[1];
          int8x16_t v42 = vextq_s8(v29, v38, 8uLL);
          int8x16_t v43 = *(int8x16_t *)(v19 + 144);
          int8x16_t v44 = *(int8x16_t *)(v19 + 160);
          v45.i64[0] = v24.i64[0];
          v45.i64[1] = vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)v43, (float32x4_t)vorrq_s8(v44, (int8x16_t)vaddq_f32((float32x4_t)v43, v39))), 1).u64[0];
          float32x4_t v46 = (float32x4_t)vrev64q_s32(v45);
          v45.i64[0] = v25.i64[0];
          v45.i64[1] = vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)v43, (float32x4_t)vorrq_s8(v44, (int8x16_t)vaddq_f32((float32x4_t)v43, (float32x4_t)v42))), 1).u64[0];
          float32x4_t v47 = vminq_f32((float32x4_t)vrev64q_s32(v45), (float32x4_t)v43);
          float32x4_t v48 = vmaxq_f32(vminq_f32(v46, (float32x4_t)v43), (float32x4_t)v33);
          float32x4_t v49 = vmaxq_f32(v47, (float32x4_t)v33);
          float32x4_t v51 = *(float32x4_t *)(v19 + 176);
          int8x16_t v50 = *(int8x16_t *)(v19 + 192);
          int8x16_t v52 = (int8x16_t)vminq_f32(v48, v51);
          int8x16_t v53 = (int8x16_t)vminq_f32(v49, v51);
          v54.i64[0] = vextq_s8(v52, v24, 0xCuLL).u64[0];
          *(int8x8_t *)&v54.u32[2] = vext_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), 4uLL);
          v48.i64[0] = vextq_s8(v53, v25, 0xCuLL).u64[0];
          *(int8x8_t *)&v48.u32[2] = vext_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), 4uLL);
          int8x16_t v55 = (int8x16_t)vsubq_f32(v51, v54);
          int8x16_t v56 = (int8x16_t)vsubq_f32(v51, v48);
          float32x4_t v57 = (float32x4_t)vbslq_s8(v50, v55, (int8x16_t)vaddq_f32((float32x4_t)v33, vmulq_laneq_f32((float32x4_t)vbslq_s8(v50, v55, (int8x16_t)vaddq_f32(v51, vmulq_f32((float32x4_t)v43, (float32x4_t)vextq_s8(v52, v24, 8uLL)))), (float32x4_t)v52, 3)));
          int8x16_t v58 = vbslq_s8(v50, v56, (int8x16_t)vaddq_f32((float32x4_t)v33, vmulq_laneq_f32((float32x4_t)vbslq_s8(v50, v56, (int8x16_t)vaddq_f32(v51, vmulq_f32((float32x4_t)v43, (float32x4_t)vextq_s8(v53, v25, 8uLL)))), (float32x4_t)v53, 3)));
          float32x4_t v59 = *(float32x4_t *)(v19 + 208);
          float32x4_t v60 = *(float32x4_t *)(v19 + 224);
          float32x4_t v61 = vminq_f32(vrsqrteq_f32(v57), v59);
          float32x4_t v62 = vminq_f32(vrsqrteq_f32((float32x4_t)v58), v59);
          float32x4_t v63 = vminq_f32(vmulq_f32(v61, vrsqrtsq_f32(vmulq_f32(v61, v57), v61)), v59);
          float32x4_t v64 = vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v62, (float32x4_t)v58), v62)), v59);
          v65.i64[0] = v38.i64[0];
          v38.i64[1] = v29.i64[1];
          int8x16_t v66 = (int8x16_t)vmulq_n_f32(vaddq_f32(v59, vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32(v59, vmulq_lane_f32((float32x4_t)v52, *(float32x2_t *)v57.f32, 1))), vmulq_f32(vminq_f32(vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, v57), v63)), v59), v57).f32[0])), *(float *)v30.i32);
          int8x16_t v67 = (int8x16_t)vmulq_n_f32(vaddq_f32(v59, vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32(v59, vmulq_lane_f32((float32x4_t)v53, *(float32x2_t *)v58.i8, 1))), vmulq_f32(vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v64, (float32x4_t)v58), v64)), v59), (float32x4_t)v58).f32[0])), *(float *)v30.i32);
          v40.i64[1] = vdupq_laneq_s64((int64x2_t)v28, 1).u64[0];
          v65.i64[1] = vdupq_laneq_s64((int64x2_t)v29, 1).u64[0];
          int8x16_t v68 = (int8x16_t)vrev64q_s32(v40);
          int8x16_t v69 = (int8x16_t)vrev64q_s32(v65);
          int8x16_t v70 = (int8x16_t)vcgtq_f32(v51, (float32x4_t)v68);
          int8x16_t v71 = (int8x16_t)vcgtq_f32(v51, (float32x4_t)v69);
          int8x16_t v72 = vbslq_s8(v70, v66, v68);
          int8x16_t v73 = vextq_s8(v23, v23, 4uLL);
          v58.i64[1] = v73.i64[1];
          v58.i64[0] = v24.i64[0];
          v24.i64[1] = v72.i64[1];
          v73.i64[0] = v25.i64[0];
          v25.i64[1] = vbslq_s8(v71, v67, v69).i64[1];
          int8x16_t v74 = (int8x16_t)vnegq_f32((float32x4_t)v24);
          int8x16_t v75 = (int8x16_t)vnegq_f32((float32x4_t)v25);
          float32x4_t v76 = vmulq_laneq_f32((float32x4_t)v30, v60, 2);
          int8x16_t v77 = (int8x16_t)vaddq_f32(v76, (float32x4_t)vextq_s8(v74, v74, 8uLL));
          int8x16_t v78 = (int8x16_t)vaddq_f32(v76, (float32x4_t)vextq_s8(v75, v75, 8uLL));
          int8x16_t v79 = (int8x16_t)vnegq_f32((float32x4_t)v23);
          int8x16_t v80 = vextq_s8(v79, v79, 0xCuLL);
          int8x16_t v81 = *(int8x16_t *)(v19 + 240);
          int8x16_t v82 = *(int8x16_t *)(v19 + 256);
          int8x16_t v83 = vbslq_s8(v81, v80, v58);
          int8x16_t v84 = vbslq_s8(v81, v80, v73);
          float32x4_t v85 = vmulq_f32((float32x4_t)vextq_s8(v83, v83, 8uLL), (float32x4_t)v83);
          float32x4_t v86 = vmulq_f32((float32x4_t)vextq_s8(v84, v84, 8uLL), (float32x4_t)v84);
          float32x4_t v87 = (float32x4_t)vbslq_s8(v50, v77, (int8x16_t)vaddq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v85)));
          float32x4_t v88 = (float32x4_t)vbslq_s8(v50, v78, (int8x16_t)vaddq_f32(v86, (float32x4_t)vrev64q_s32((int32x4_t)v86)));
          float32x4_t v89 = vsubq_f32((float32x4_t)v43, vmulq_n_f32((float32x4_t)v42, *(float *)v38.i32));
          v42.i64[0] = v79.i64[0];
          v42.i64[1] = vsubq_f32(*(float32x4_t *)&v43, v41).i64[1];
          v79.i64[1] = v89.i64[1];
          int8x16_t v90 = vbslq_s8(v50, v23, v42);
          int8x16_t v91 = vbslq_s8(v50, v23, v79);
          float32x4_t v92 = vmulq_f32((float32x4_t)v90, v87);
          float32x4_t v93 = vmulq_f32((float32x4_t)v91, v88);
          int8x16_t v94 = (int8x16_t)vaddq_f32(v92, (float32x4_t)vrev64q_s32((int32x4_t)v92));
          int8x16_t v95 = (int8x16_t)vaddq_f32(v93, (float32x4_t)vrev64q_s32((int32x4_t)v93));
          v90.i64[0] = vextq_s8(v90, v90, 8uLL).u64[0];
          v91.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
          *(int8x8_t *)v85.f32 = vext_s8(*(int8x8_t *)v90.i8, *(int8x8_t *)v94.i8, 4uLL);
          *(int8x8_t *)v90.i8 = vext_s8(*(int8x8_t *)v94.i8, *(int8x8_t *)v90.i8, 4uLL);
          v90.i64[1] = v85.i64[0];
          *(int8x8_t *)v85.f32 = vext_s8(*(int8x8_t *)v91.i8, *(int8x8_t *)v95.i8, 4uLL);
          *(int8x8_t *)v91.i8 = vext_s8(*(int8x8_t *)v95.i8, *(int8x8_t *)v91.i8, 4uLL);
          v91.i64[1] = v85.i64[0];
          int8x16_t v96 = (int8x16_t)vabsq_f32((float32x4_t)v90);
          float32x4_t v97 = vabsq_f32((float32x4_t)v91);
          float32x4_t v98 = vminq_f32(vrsqrteq_f32((float32x4_t)v96), v60);
          float32x4_t v99 = vminq_f32(vrsqrteq_f32(v97), v60);
          float32x4_t v100 = vminq_f32(vmulq_f32(v98, vrsqrtsq_f32(vmulq_f32(v98, (float32x4_t)v96), v98)), v60);
          int8x16_t v101 = (int8x16_t)vminq_f32(vmulq_f32(v99, vrsqrtsq_f32(vmulq_f32(v99, v97), v99)), v60);
          v96.i64[0] = vbslq_s8(v50, v94, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v100, vrsqrtsq_f32(vmulq_f32(v100, (float32x4_t)v96), v100)), v60), (float32x4_t)v96)).u64[0];
          int8x16_t v102 = vbslq_s8(v50, v95, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32((float32x4_t)v101, vrsqrtsq_f32(vmulq_f32((float32x4_t)v101, v97), (float32x4_t)v101)), v60), v97));
          *(int8x8_t *)v94.i8 = vqtbl1_s8(v23, *(int8x8_t *)v82.i8);
          v95.i64[0] = vextq_s8(v82, v82, 8uLL).u64[0];
          v94.u64[1] = (unint64_t)vqtbl1_s8(v23, *(int8x8_t *)v95.i8);
          int8x16_t v103 = (int8x16_t)vmulq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s64(v87.i64[0], 0));
          int8x16_t v104 = (int8x16_t)vmulq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s64(v88.i64[0], 0));
          int8x16_t v105 = vextq_s8(v103, v103, 8uLL);
          v96.i64[1] = v103.i64[1];
          v100.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          v101.i64[0] = v102.i64[0];
          v101.i64[1] = v104.i64[1];
          int8x16_t v106 = vbslq_s8(v81, vbslq_s8(v70, vextq_s8(v96, v96, 0xCuLL), v43), v37);
          int8x16_t v107 = vbslq_s8(v81, vbslq_s8(v71, vextq_s8(v101, v101, 0xCuLL), v43), v38);
          *(int8x8_t *)v38.i8 = vqtbl1_s8(v106, *(int8x8_t *)v82.i8);
          v38.u64[1] = (unint64_t)vqtbl1_s8(v106, *(int8x8_t *)v95.i8);
          *(int8x8_t *)v70.i8 = vqtbl1_s8(v107, *(int8x8_t *)v82.i8);
          v70.u64[1] = (unint64_t)vqtbl1_s8(v107, *(int8x8_t *)v95.i8);
          float32x4_t v108 = *(float32x4_t *)(v19 + 272);
          float32x4_t v109 = vmulq_f32((float32x4_t)v38, v108);
          float32x4_t v110 = vmulq_f32(v108, (float32x4_t)v70);
          *(float32x2_t *)v105.i8 = vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)vext_s8(*(int8x8_t *)v96.i8, *(int8x8_t *)v105.i8, 4uLL));
          *(float32x2_t *)v102.i8 = vadd_f32(*(float32x2_t *)v100.f32, (float32x2_t)vext_s8(*(int8x8_t *)v102.i8, *(int8x8_t *)v100.f32, 4uLL));
          float32x4_t v111 = (float32x4_t)vbslq_s8(v50, v96, v105);
          float32x4_t v112 = (float32x4_t)vbslq_s8(v50, v101, v102);
          int8x16_t v113 = (int8x16_t)vaddq_f32(v108, vmulq_f32(v108, (float32x4_t)vdupq_lane_s64(vaddq_f32(v109, (float32x4_t)vrev64q_s32((int32x4_t)v109)).i64[0], 0)));
          int8x16_t v114 = (int8x16_t)vaddq_f32(v108, vmulq_f32(v108, (float32x4_t)vdupq_lane_s64(vaddq_f32(v110, (float32x4_t)vrev64q_s32((int32x4_t)v110)).i64[0], 0)));
          int8x16_t v115 = (int8x16_t)vaddq_f32(v22, v111);
          v111.i64[0] = v115.i64[0];
          v111.i64[1] = v113.i64[1];
          int8x16_t v116 = (int8x16_t)vaddq_f32(v22, v112);
          v22.i64[0] = v116.i64[0];
          v22.i64[1] = v114.i64[1];
          float32x4_t v117 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          float32x4_t v118 = vaddq_f32(v117, vmulq_f32(*(float32x4_t *)v19, v22));
          uint64_t v119 = *((int *)a2 + 22);
          float32x4_t v120 = vsubq_f32(vaddq_f32(v117, vmulq_f32(*(float32x4_t *)v19, v111)), (float32x4_t)v9);
          uint64_t v121 = *((void *)a2 + 10);
          if (v5)
          {
            int32x4_t v122 = vaddq_s32(vcvtq_s32_f32(v120), vcltzq_f32(v120));
            float32x2_t v123 = (float32x2_t)vsubq_f32(v120, vcvtq_f32_s32(v122)).u64[0];
            float32x4_t v124 = (float32x4_t *)(v121 + 16 * (v122.i32[0] + v122.i32[1] * (int)v119));
            float32x4_t v125 = vaddq_f32(*v124, vmulq_n_f32(vsubq_f32(v124[1], *v124), v123.f32[0]));
            int8x16_t v126 = (int8x16_t)vaddq_f32(v125, vmulq_lane_f32(vsubq_f32(vaddq_f32(v124[v119], vmulq_n_f32(vsubq_f32(v124[(int)v119 + 1], v124[v119]), v123.f32[0])), v125), v123, 1));
            float32x4_t v127 = vsubq_f32(v118, (float32x4_t)v9);
            int32x4_t v128 = vaddq_s32(vcvtq_s32_f32(v127), vcltzq_f32(v127));
            v127.i64[0] = vsubq_f32(v127, vcvtq_f32_s32(v128)).u64[0];
            int8x16_t v129 = (float32x4_t *)(v121 + 16 * (v128.i32[0] + v128.i32[1] * (int)v119));
            float32x4_t v130 = vaddq_f32(*v129, vmulq_n_f32(vsubq_f32(v129[1], *v129), v127.f32[0]));
            int8x16_t v131 = (int8x16_t)vaddq_f32(v130, vmulq_lane_f32(vsubq_f32(vaddq_f32(v129[v119], vmulq_n_f32(vsubq_f32(v129[(int)v119 + 1], v129[v119]), v127.f32[0])), v130), *(float32x2_t *)v127.f32, 1));
          }
          else
          {
            float32x4_t v132 = vaddq_f32(v120, v13);
            int32x4_t v133 = vcvtq_s32_f32(v132);
            v132.i64[0] = vaddq_s32(v133, vcgtq_f32(vcvtq_f32_s32(v133), v132)).u64[0];
            int8x16_t v126 = *(int8x16_t *)(v121 + 16 * (v132.i32[0] + v132.i32[1] * (int)v119));
            float32x4_t v134 = vaddq_f32(vsubq_f32(v118, (float32x4_t)v9), v13);
            int32x4_t v135 = vcvtq_s32_f32(v134);
            v134.i64[0] = vaddq_s32(v135, vcgtq_f32(vcvtq_f32_s32(v135), v134)).u64[0];
            int8x16_t v131 = *(int8x16_t *)(v121 + 16 * (v134.i32[0] + v134.i32[1] * (int)v119));
          }
          int8x16_t v136 = vmvnq_s8(v50);
          LODWORD(v137) = vmaxq_f32((float32x4_t)vextq_s8(v113, v115, 8uLL), v60).u32[0];
          LODWORD(v138) = vmaxq_f32((float32x4_t)vextq_s8(v114, v116, 8uLL), v60).u32[0];
          int8x16_t v139 = (int8x16_t)vmulq_n_f32((float32x4_t)v126, v137);
          int8x16_t v140 = (int8x16_t)vmulq_n_f32((float32x4_t)v131, v138);
          int8x16_t v141 = *(int8x16_t *)(v19 + 288);
          int8x16_t v142 = *(int8x16_t *)(v19 + 304);
          float32x4_t v143 = (float32x4_t)vbslq_s8(v141, v126, v139);
          float32x4_t v144 = (float32x4_t)vbslq_s8(v141, v131, v140);
          float32x4_t v146 = *(float32x4_t *)(v19 + 80);
          int8x16_t v145 = *(int8x16_t *)(v19 + 96);
          int8x16_t v147 = (int8x16_t)vsubq_f32(v108, (float32x4_t)vextq_s8(v145, v145, 8uLL));
          int32x4_t v148 = (int32x4_t)vbslq_s8(v142, v147, v106);
          int32x4_t v149 = (int32x4_t)vbslq_s8(v142, v147, v107);
          float32x4_t v150 = (float32x4_t)vbslq_s8(v141, v126, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v145, v143, 3), vmulq_lane_f32(v143, *(float32x2_t *)v148.i8, 1)));
          float32x4_t v151 = (float32x4_t)vbslq_s8(v141, v131, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v145, v144, 3), vmulq_lane_f32(v144, *(float32x2_t *)v149.i8, 1)));
          int8x16_t v152 = (int8x16_t)vmaxq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v148)), v59);
          int8x16_t v153 = (int8x16_t)vmaxq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v149)), v59);
          v145.i64[0] = vsubq_f32(v51, (float32x4_t)v30).u64[0];
          v154.i64[0] = v145.i64[0];
          v154.i64[1] = vmulq_lane_f32((float32x4_t)vextq_s8(v9, v152, 0xCuLL), *(float32x2_t *)&v152, 1).i64[1];
          v145.i64[1] = vmulq_lane_f32((float32x4_t)vextq_s8(v9, v153, 0xCuLL), *(float32x2_t *)&v153, 1).i64[1];
          int8x16_t v155 = vbslq_s8(v142, (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v154), (float32x4_t)v30)), (int8x16_t)v154);
          int8x16_t v156 = vbslq_s8(v142, (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v145), (float32x4_t)v30)), v145);
          v155.i64[1] = vmulq_laneq_f32(*(float32x4_t *)&v155, v150, 3).i64[1];
          v156.i64[1] = vmulq_laneq_f32(*(float32x4_t *)&v156, v151, 3).i64[1];
          float32x4_t v157 = *(float32x4_t *)(v19 + 320);
          float32x4_t v158 = *(float32x4_t *)(v19 + 336);
          int8x16_t v159 = vbslq_s8(v142, (int8x16_t)vsubq_f32((float32x4_t)v155, v157), v155);
          int8x16_t v160 = vbslq_s8(v142, (int8x16_t)vsubq_f32((float32x4_t)v156, v157), v156);
          float32x4_t v161 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v148, (int8x16_t)v148, 0xCuLL), (float32x4_t)v159)), vandq_s8(v159, v136));
          float32x4_t v162 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v149, (int8x16_t)v149, 0xCuLL), (float32x4_t)v160)), vandq_s8(v160, v136));
          int8x16_t v163 = (int8x16_t)vrev64q_s32((int32x4_t)v161);
          float32x4_t v164 = (float32x4_t)vrev64q_s32((int32x4_t)v162);
          float32x4_t v165 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v163), (float32x4_t)v43), v32);
          float32x4_t v166 = vminq_f32(vmaxq_f32(vrecpeq_f32(v164), (float32x4_t)v43), v32);
          float32x4_t v167 = vminq_f32(vmaxq_f32(vmulq_f32(v165, vrecpsq_f32((float32x4_t)v163, v165)), (float32x4_t)v43), v32);
          float32x4_t v168 = vminq_f32(vmaxq_f32(vmulq_f32(v166, vrecpsq_f32(v164, v166)), (float32x4_t)v43), v32);
          v169.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v167, vrecpsq_f32((float32x4_t)v163, v167)), v161), v157), v51).u64[0];
          v163.i64[0] = v169.i64[0];
          v163.i64[1] = v161.i64[1];
          v168.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v168, vrecpsq_f32(v164, v168)), v162), v157), v51).u64[0];
          v170.i64[0] = v168.i64[0];
          v170.i64[1] = v162.i64[1];
          v169.i64[1] = vdupq_laneq_s64((int64x2_t)v161, 1).u64[0];
          v168.i64[1] = vdupq_laneq_s64((int64x2_t)v162, 1).u64[0];
          float32x4_t v171 = *(float32x4_t *)(v19 + 352);
          int8x16_t v172 = vbslq_s8(v142, (int8x16_t)vaddq_f32(v158, vmulq_f32(v171, (float32x4_t)vrev64q_s32(v169))), v163);
          int8x16_t v173 = vbslq_s8(v142, (int8x16_t)vaddq_f32(v158, vmulq_f32(v171, (float32x4_t)vrev64q_s32((int32x4_t)v168))), v170);
          float32x4_t v174 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v172, (float32x4_t)v172)), vandq_s8(v172, v136));
          float32x4_t v175 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v173, (float32x4_t)v173)), vandq_s8(v173, v136));
          float32x4_t v176 = (float32x4_t)vbslq_s8(v141, v126, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v146, v174, 2), v150));
          float32x4_t v177 = (float32x4_t)vbslq_s8(v141, v131, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v146, v175, 2), v151));
          uint64_t v178 = (float32x4_t *)(v11 + 16 * v15);
          *uint64_t v178 = vsubq_f32(v176, vmulq_n_f32(v176, vmulq_lane_f32(v174, *(float32x2_t *)v174.f32, 1).f32[0]));
          v178[1] = vsubq_f32(v177, vmulq_n_f32(v177, vmulq_lane_f32(v175, *(float32x2_t *)v175.f32, 1).f32[0]));
          float32x4_t v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B7E736B0);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        uint64_t v15 = v15;
      }
      if ((int)v15 < v10)
      {
        uint64_t v179 = *((void *)this + 51);
        float32x4_t v180 = *(float32x4_t *)(v179 + 32);
        int8x16_t v181 = *(int8x16_t *)(v179 + 48);
        int8x16_t v182 = (int8x16_t)vsubq_f32(vaddq_f32(vmulq_f32(v17, *(float32x4_t *)(v179 + 16)), (float32x4_t)vextq_s8(*(int8x16_t *)(v179 + 16), *(int8x16_t *)(v179 + 16), 8uLL)), v180);
        int8x16_t v183 = (int8x16_t)vmulq_f32((float32x4_t)v181, (float32x4_t)v182);
        int8x16_t v184 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v183, v183, 4uLL), (float32x4_t)vextq_s8(v183, v183, 8uLL));
        int8x16_t v185 = *(int8x16_t *)(v179 + 64);
        float32x4_t v186 = (float32x4_t)vextq_s8(v185, v185, 8uLL);
        int8x16_t v188 = *(int8x16_t *)(v179 + 112);
        float32x4_t v187 = *(float32x4_t *)(v179 + 128);
        float32x4_t v189 = vminq_f32(vmaxq_f32(vrecpeq_f32(v186), (float32x4_t)v188), v187);
        float32x4_t v190 = vminq_f32(vmaxq_f32(vmulq_f32(v189, vrecpsq_f32(v186, v189)), (float32x4_t)v188), v187);
        int8x16_t v191 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v188, (float32x4_t)vextq_s8(v184, v184, 0xCuLL)), (int8x16_t)vdupq_laneq_s64((int64x2_t)vmulq_laneq_f32(vmulq_f32(v190, vrecpsq_f32(v186, v190)), (float32x4_t)v184, 3), 1), v188);
        float32x4_t v192 = (float32x4_t)vextq_s8(v184, v191, 8uLL);
        v193.i64[0] = v191.i64[0];
        float32x4_t v194 = vmulq_n_f32(v192, *(float *)v191.i32);
        v195.i64[0] = v191.i64[0];
        v195.i64[1] = v184.i64[1];
        int8x16_t v196 = *(int8x16_t *)(v179 + 144);
        v191.i64[0] = vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)v196, (float32x4_t)vorrq_s8(*(int8x16_t *)(v179 + 160), (int8x16_t)vaddq_f32((float32x4_t)v196, v192))), 1).u64[0];
        v192.i64[0] = v182.i64[0];
        v192.i64[1] = v191.i64[0];
        float32x4_t v197 = vmaxq_f32(vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v192), (float32x4_t)v196), (float32x4_t)v188);
        float32x4_t v199 = *(float32x4_t *)(v179 + 176);
        int8x16_t v198 = *(int8x16_t *)(v179 + 192);
        int8x16_t v200 = (int8x16_t)vminq_f32(v197, v199);
        v201.i64[0] = vextq_s8(v200, v182, 0xCuLL).u64[0];
        *(int8x8_t *)&v201.u32[2] = vext_s8(*(int8x8_t *)v182.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v200, v200, 8uLL), 4uLL);
        int8x16_t v202 = (int8x16_t)vsubq_f32(v199, v201);
        float32x4_t v203 = (float32x4_t)vbslq_s8(v198, v202, (int8x16_t)vaddq_f32((float32x4_t)v188, vmulq_laneq_f32((float32x4_t)vbslq_s8(v198, v202, (int8x16_t)vaddq_f32(v199, vmulq_f32((float32x4_t)v196, (float32x4_t)vextq_s8(v200, v182, 8uLL)))), (float32x4_t)v200, 3)));
        float32x4_t v204 = vmulq_lane_f32((float32x4_t)v200, *(float32x2_t *)v203.f32, 1);
        float32x4_t v205 = *(float32x4_t *)(v179 + 208);
        float32x4_t v206 = *(float32x4_t *)(v179 + 224);
        float32x4_t v207 = vminq_f32(vrsqrteq_f32(v203), v205);
        float32x4_t v208 = vminq_f32(vmulq_f32(v207, vrsqrtsq_f32(vmulq_f32(v207, v203), v207)), v205);
        v193.i64[1] = vdupq_laneq_s64((int64x2_t)v184, 1).u64[0];
        int8x16_t v209 = (int8x16_t)vrev64q_s32(v193);
        int8x16_t v210 = (int8x16_t)vcgtq_f32(v199, (float32x4_t)v209);
        int8x16_t v211 = vbslq_s8(v210, (int8x16_t)vmulq_n_f32(vaddq_f32(v205, vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32(v205, v204)), vmulq_f32(vminq_f32(vmulq_f32(v208, vrsqrtsq_f32(vmulq_f32(v208, v203), v208)), v205), v203).f32[0])), *(float *)v185.i32), v209);
        int8x16_t v212 = vextq_s8(v181, v181, 4uLL);
        v212.i64[0] = v182.i64[0];
        v182.i64[1] = v211.i64[1];
        int8x16_t v213 = (int8x16_t)vnegq_f32((float32x4_t)v182);
        int8x16_t v214 = (int8x16_t)vnegq_f32((float32x4_t)v181);
        int8x16_t v215 = *(int8x16_t *)(v179 + 240);
        int8x16_t v216 = *(int8x16_t *)(v179 + 256);
        int8x16_t v217 = vbslq_s8(v215, vextq_s8(v214, v214, 0xCuLL), v212);
        float32x4_t v218 = vmulq_f32((float32x4_t)vextq_s8(v217, v217, 8uLL), (float32x4_t)v217);
        float32x4_t v219 = (float32x4_t)vbslq_s8(v198, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v185, v206, 2), (float32x4_t)vextq_s8(v213, v213, 8uLL)), (int8x16_t)vaddq_f32(v218, (float32x4_t)vrev64q_s32((int32x4_t)v218)));
        v214.i64[1] = vsubq_f32(*(float32x4_t *)&v196, v194).i64[1];
        int8x16_t v220 = vbslq_s8(v198, v181, v214);
        float32x4_t v221 = vmulq_f32((float32x4_t)v220, v219);
        int8x16_t v222 = (int8x16_t)vaddq_f32(v221, (float32x4_t)vrev64q_s32((int32x4_t)v221));
        v220.i64[0] = vextq_s8(v220, v220, 8uLL).u64[0];
        *(int8x8_t *)v218.f32 = vext_s8(*(int8x8_t *)v220.i8, *(int8x8_t *)v222.i8, 4uLL);
        *(int8x8_t *)v220.i8 = vext_s8(*(int8x8_t *)v222.i8, *(int8x8_t *)v220.i8, 4uLL);
        v220.i64[1] = v218.i64[0];
        int8x16_t v223 = (int8x16_t)vabsq_f32((float32x4_t)v220);
        float32x4_t v224 = vminq_f32(vrsqrteq_f32((float32x4_t)v223), v206);
        float32x4_t v225 = vminq_f32(vmulq_f32(v224, vrsqrtsq_f32(vmulq_f32(v224, (float32x4_t)v223), v224)), v206);
        v223.i64[0] = vbslq_s8(v198, v222, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v225, vrsqrtsq_f32(vmulq_f32(v225, (float32x4_t)v223), v225)), v206), (float32x4_t)v223)).u64[0];
        v222.i64[0] = vextq_s8(v216, v216, 8uLL).u64[0];
        *(int8x8_t *)v181.i8 = vqtbl1_s8(v181, *(int8x8_t *)v222.i8);
        v181.i64[1] = v181.i64[0];
        int8x16_t v226 = (int8x16_t)vmulq_f32((float32x4_t)v181, (float32x4_t)vdupq_lane_s64(v219.i64[0], 0));
        v225.i64[0] = vextq_s8(v226, v226, 8uLL).u64[0];
        v223.i64[1] = v226.i64[1];
        int8x16_t v227 = vbslq_s8(v215, vbslq_s8(v210, vextq_s8(v223, v223, 0xCuLL), v196), v195);
        *(int8x8_t *)v210.i8 = vqtbl1_s8(v227, *(int8x8_t *)v216.i8);
        v210.u64[1] = (unint64_t)vqtbl1_s8(v227, *(int8x8_t *)v222.i8);
        float32x4_t v228 = *(float32x4_t *)(v179 + 272);
        float32x4_t v229 = vmulq_f32(v228, (float32x4_t)v210);
        int8x16_t v230 = (int8x16_t)vrev64q_s32((int32x4_t)v229);
        v229.i64[0] = vaddq_f32(v229, (float32x4_t)v230).u64[0];
        *(float32x2_t *)v230.i8 = vadd_f32(*(float32x2_t *)v225.f32, (float32x2_t)vext_s8(*(int8x8_t *)v223.i8, *(int8x8_t *)v225.f32, 4uLL));
        float32x4_t v231 = (float32x4_t)vbslq_s8(v198, v223, v230);
        int8x16_t v232 = (int8x16_t)vaddq_f32(v228, vmulq_f32(v228, (float32x4_t)vdupq_lane_s64(v229.i64[0], 0)));
        int8x16_t v233 = (int8x16_t)vaddq_f32(v180, v231);
        v229.i64[0] = v233.i64[0];
        v229.i64[1] = v232.i64[1];
        uint64_t v234 = *((int *)a2 + 22);
        float32x4_t v235 = vsubq_f32(vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v179, *(int8x16_t *)v179, 8uLL), vmulq_f32(*(float32x4_t *)v179, v229)), (float32x4_t)v9);
        uint64_t v236 = *((void *)a2 + 10);
        if (v5)
        {
          int32x4_t v237 = vaddq_s32(vcvtq_s32_f32(v235), vcltzq_f32(v235));
          float32x2_t v238 = (float32x2_t)vsubq_f32(v235, vcvtq_f32_s32(v237)).u64[0];
          int8x16_t v239 = (float32x4_t *)(v236 + 16 * (v237.i32[0] + v237.i32[1] * (int)v234));
          float32x4_t v240 = vaddq_f32(*v239, vmulq_n_f32(vsubq_f32(v239[1], *v239), v238.f32[0]));
          int8x16_t v241 = (int8x16_t)vaddq_f32(v240, vmulq_lane_f32(vsubq_f32(vaddq_f32(v239[v234], vmulq_n_f32(vsubq_f32(v239[(int)v234 + 1], v239[v234]), v238.f32[0])), v240), v238, 1));
        }
        else
        {
          float32x4_t v242 = vaddq_f32(v235, v13);
          int32x4_t v243 = vcvtq_s32_f32(v242);
          v242.i64[0] = vaddq_s32(v243, vcgtq_f32(vcvtq_f32_s32(v243), v242)).u64[0];
          int8x16_t v241 = *(int8x16_t *)(v236 + 16 * (v242.i32[0] + v242.i32[1] * (int)v234));
        }
        int8x16_t v244 = (int8x16_t)vmulq_n_f32((float32x4_t)v241, vmaxq_f32((float32x4_t)vextq_s8(v232, v233, 8uLL), v206).f32[0]);
        int8x16_t v245 = *(int8x16_t *)(v179 + 288);
        int8x16_t v246 = *(int8x16_t *)(v179 + 304);
        float32x4_t v247 = (float32x4_t)vbslq_s8(v245, v241, v244);
        int8x16_t v248 = *(int8x16_t *)(v179 + 96);
        int32x4_t v249 = (int32x4_t)vbslq_s8(v246, (int8x16_t)vsubq_f32(v228, (float32x4_t)vextq_s8(v248, v248, 8uLL)), v227);
        float32x4_t v250 = (float32x4_t)vbslq_s8(v245, v241, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v248, v247, 3), vmulq_lane_f32(v247, *(float32x2_t *)v249.i8, 1)));
        int8x16_t v251 = (int8x16_t)vmaxq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v249)), v205);
        v252.i64[0] = vsubq_f32(v199, (float32x4_t)v185).u64[0];
        v252.i64[1] = vmulq_lane_f32((float32x4_t)vextq_s8(v9, v251, 0xCuLL), *(float32x2_t *)&v251, 1).i64[1];
        int8x16_t v253 = vbslq_s8(v246, (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v252), (float32x4_t)v185)), (int8x16_t)v252);
        v253.i64[1] = vmulq_laneq_f32(*(float32x4_t *)&v253, v250, 3).i64[1];
        int8x16_t v254 = vmvnq_s8(v198);
        float32x4_t v255 = *(float32x4_t *)(v179 + 320);
        int8x16_t v256 = vbslq_s8(v246, (int8x16_t)vsubq_f32((float32x4_t)v253, v255), v253);
        float32x4_t v257 = (float32x4_t)vorrq_s8(vandq_s8(v198, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v249, (int8x16_t)v249, 0xCuLL), (float32x4_t)v256)), vandq_s8(v256, v254));
        float32x4_t v258 = (float32x4_t)vrev64q_s32((int32x4_t)v257);
        float32x4_t v259 = vminq_f32(vmaxq_f32(vrecpeq_f32(v258), (float32x4_t)v196), v187);
        float32x4_t v260 = vminq_f32(vmaxq_f32(vmulq_f32(v259, vrecpsq_f32(v258, v259)), (float32x4_t)v196), v187);
        v260.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v260, vrecpsq_f32(v258, v260)), v257), v255), v199).u64[0];
        v261.i64[0] = v260.i64[0];
        v261.i64[1] = v257.i64[1];
        v260.i64[1] = vdupq_laneq_s64((int64x2_t)v257, 1).u64[0];
        int8x16_t v262 = vbslq_s8(v246, (int8x16_t)vaddq_f32(*(float32x4_t *)(v179 + 336), vmulq_f32(*(float32x4_t *)(v179 + 352), (float32x4_t)vrev64q_s32((int32x4_t)v260))), v261);
        float32x4_t v263 = (float32x4_t)vorrq_s8(vandq_s8(v198, (int8x16_t)vmulq_f32((float32x4_t)v262, (float32x4_t)v262)), vandq_s8(v262, v254));
        float32x4_t v264 = (float32x4_t)vbslq_s8(v245, v241, (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v179 + 80), v263, 2), v250));
        *(float32x4_t *)(v11 + 16 * v15) = vsubq_f32(v264, vmulq_n_f32(v264, vmulq_lane_f32(v263, *(float32x2_t *)v263.f32, 1).f32[0]));
      }
      float32x4_t v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736C0);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcPageCurlForeground::GetDOD(HgcPageCurlForeground *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    if ((*(int (**)(HgcPageCurlForeground *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcPageCurlForeground::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcPageCurlForeground::HgcPageCurlForeground(HgcPageCurlForeground *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1096348;
  operator new();
}

void sub_1B7553164(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPageCurlForeground::~HgcPageCurlForeground(HGNode *this)
{
  *(void *)this = &unk_1F1096348;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C409BD2D9E4);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcPageCurlForeground::~HgcPageCurlForeground(this);

  HGObject::operator delete(v1);
}

uint64_t HgcPageCurlForeground::SetParameter(HgcPageCurlForeground *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  double v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcPageCurlForeground::GetParameter(HgcPageCurlForeground *this, unsigned int a2, float *a3)
{
  if (a2 > 6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcSlicedScale::GetProgram(HgcSlicedScale *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000c61\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = c0.x + half(hg_Params[11].x);\n"
             "    r1.CGFloat y = -c0.x - half(hg_Params[11].x);\n"
             "    r0.CGFloat y = fmax(r0.x, half(hg_Params[2].y));\n"
             "    r0.z = r0.y*half(hg_Params[0].x);\n"
             "    r1.z = fmin(r1.y, half(hg_Params[1].z));\n"
             "    r1.w = r1.z*half(hg_Params[0].x);\n"
             "    r1.CGFloat x = dot(half4(frag._texCoord0), half4(hg_Params[5]));\n"
             "    r1.CGFloat x = r1.x/half(hg_Params[9].x);\n"
             "    r1.CGFloat x = r1.x*half(hg_Params[7].x);\n"
             "    r1.CGFloat x = r1.x/half(hg_Params[10].x);\n"
             "    r1.z = r1.z*half(hg_Params[0].x) + -r1.z;\n"
             "    r0.CGFloat y = -r0.y*half(hg_Params[0].x) + r0.y;\n"
             "    s0.CGFloat x = float(float(r1.x) < float(r1.w));\n"
             "    s1.xyz = float3(r0.xyz);\n"
             "    s1.w = float(float(r0.z) < float(r1.x));\n"
             "    s0.CGFloat y = s1.w*-s0.x;\n"
             "    s1.w = float(s1.z >= float(r1.x));\n"
             "    s1.z = float(float(r1.x) >= float(r1.w));\n"
             "    r1.zw = r1.xx - r1.zw;\n"
             "    r1.z = select(r1.z, c0.y, r1.w < 0.00000h);\n"
             "    s1.CGFloat y = float(r1.x) + s1.y;\n"
             "    r1.CGFloat x = r1.x/half(hg_Params[0].x);\n"
             "    r1.w = fmin(r1.y, half(hg_Params[3].w));\n"
             "    s1.z = float(c0.z) - s1.z;\n"
             "    s0.CGFloat x = float(-s1.w >= float(c0.y));\n"
             "    s0.CGFloat x = fmin(s1.z, s0.x);\n"
             "    s1.z = fmin(s1.z, s1.w);\n"
             "    r1.z = select(r1.z, half(s1.y), -half(s1.z) < 0.00000h);\n"
             "    s0.CGFloat x = fmin(s0.x, s0.y);\n"
             "    r1.CGFloat x = select(r1.z, r1.x, half(s0.x) < 0.00000h);\n"
             "    r1.z = fmax(half(s1.x), half(hg_Params[4].z));\n"
             "    r0.xCGFloat y = r1.wz*half2(hg_Params[0].yy);\n"
             "    r1.CGFloat x = r1.x*half(hg_Params[9].x);\n"
             "    r1.CGFloat y = dot(half4(frag._texCoord0), half4(hg_Params[6]));\n"
             "    r1.CGFloat y = r1.y/half(hg_Params[9].y);\n"
             "    r1.CGFloat y = r1.y*half(hg_Params[8].y);\n"
             "    r1.CGFloat y = r1.y/half(hg_Params[10].y);\n"
             "    r1.w = r1.w*half(hg_Params[0].y) + -r1.w;\n"
             "    s0.xCGFloat y = float2(r0.xy);\n"
             "    s0.w = float(float(r1.y) < float(r0.x));\n"
             "    s0.z = float(s0.y < float(r1.y));\n"
             "    s1.CGFloat x = fmin(s0.z, s0.w);\n"
             "    s0.z = float(s0.y >= float(r1.y));\n"
             "    s0.CGFloat y = float(float(r1.y) >= s0.x);\n"
             "    s0.w = s0.z;\n"
             "    s0.CGFloat x = float(r1.y) - s0.x;\n"
             "    r1.w = r1.y - r1.w;\n"
             "    s0.yw = float2(-s0.yw >= float2(c0.yy));\n"
             "    s0.yw = fmin(s0.yy, s0.zw);\n"
             "    s0.w = fmin(s0.w, s1.x);\n"
             "    r1.z = -r1.z*half(hg_Params[0].y) + r1.z;\n"
             "    r1.w = select(r1.w, c0.y, half(s0.x) < 0.00000h);\n"
             "    s0.CGFloat x = float(r1.y) + float(r1.z);\n"
             "    r1.w = select(r1.w, half(s0.x), -half(s0.y) < 0.00000h);\n"
             "    r1.CGFloat y = r1.y/half(hg_Params[0].y);\n"
             "    r1.CGFloat y = select(r1.w, r1.y, -half(s0.w) < 0.00000h);\n"
             "    s1.CGFloat x = float(r1.x)*hg_Params[5].x;\n"
             "    r1.CGFloat x = r1.y*half(hg_Params[9].y);\n"
             "    s1.w = float(c0.z);\n"
             "    s1.CGFloat y = float(r1.x)*hg_Params[6].y;\n"
             "    s0.CGFloat y = dot(s1.xyw, hg_Params[8].xyw);\n"
             "    s0.CGFloat x = dot(s1.xyw, hg_Params[7].xyw);\n"
             "    s0.xCGFloat y = s0.xy + hg_Params[12].xy;\n"
             "    s0.xCGFloat y = s0.xy*hg_Params[12].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f41186f5:ebdceff1:2e0de634:ce1bca06\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:000d:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000aa3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = c0.x + hg_Params[11].x;\n"
             "    r1.CGFloat y = -c0.x - hg_Params[11].x;\n"
             "    r0.CGFloat y = fmax(r0.x, hg_Params[2].y);\n"
             "    r0.z = r0.y*hg_Params[0].x;\n"
             "    r1.z = fmin(r1.y, hg_Params[1].z);\n"
             "    r1.w = r1.z*hg_Params[0].x;\n"
             "    r1.CGFloat x = dot(frag._texCoord0, hg_Params[5]);\n"
             "    r1.CGFloat x = r1.x/hg_Params[9].x;\n"
             "    r1.CGFloat x = r1.x*hg_Params[7].x;\n"
             "    r1.CGFloat x = r1.x/hg_Params[10].x;\n"
             "    r1.z = r1.z*hg_Params[0].x + -r1.z;\n"
             "    r0.CGFloat y = -r0.y*hg_Params[0].x + r0.y;\n"
             "    r2.CGFloat x = float(r1.x < r1.w);\n"
             "    r0.w = float(r0.z < r1.x);\n"
             "    r2.CGFloat y = r0.w*-r2.x;\n"
             "    r0.w = float(r0.z >= r1.x);\n"
             "    r0.z = float(r1.x >= r1.w);\n"
             "    r1.zw = r1.xx - r1.zw;\n"
             "    r1.z = select(r1.z, c0.y, r1.w < 0.00000f);\n"
             "    r0.CGFloat y = r1.x + r0.y;\n"
             "    r1.CGFloat x = r1.x/hg_Params[0].x;\n"
             "    r1.w = fmin(r1.y, hg_Params[3].w);\n"
             "    r0.z = c0.z - r0.z;\n"
             "    r2.CGFloat x = float(-r0.w >= c0.y);\n"
             "    r2.CGFloat x = fmin(r0.z, r2.x);\n"
             "    r0.z = fmin(r0.z, r0.w);\n"
             "    r1.z = select(r1.z, r0.y, -r0.z < 0.00000f);\n"
             "    r2.CGFloat x = fmin(r2.x, r2.y);\n"
             "    r1.CGFloat x = select(r1.z, r1.x, r2.x < 0.00000f);\n"
             "    r1.z = fmax(r0.x, hg_Params[4].z);\n"
             "    r2.xCGFloat y = r1.wz*hg_Params[0].yy;\n"
             "    r1.CGFloat x = r1.x*hg_Params[9].x;\n"
             "    r1.CGFloat y = dot(frag._texCoord0, hg_Params[6]);\n"
             "    r1.CGFloat y = r1.y/hg_Params[9].y;\n"
             "    r1.CGFloat y = r1.y*hg_Params[8].y;\n"
             "    r1.CGFloat y = r1.y/hg_Params[10].y;\n"
             "    r1.w = r1.w*hg_Params[0].y + -r1.w;\n"
             "    r2.w = float(r1.y < r2.x);\n"
             "    r2.z = float(r2.y < r1.y);\n"
             "    r0.CGFloat x = fmin(r2.z, r2.w);\n"
             "    r2.z = float(r2.y >= r1.y);\n"
             "    r2.CGFloat y = float(r1.y >= r2.x);\n"
             "    r2.w = r2.z;\n"
             "    r2.CGFloat x = r1.y - r2.x;\n"
             "    r1.w = r1.y - r1.w;\n"
             "    r2.yw = float2(-r2.yw >= c0.yy);\n"
             "    r2.yw = fmin(r2.yy, r2.zw);\n"
             "    r2.w = fmin(r2.w, r0.x);\n"
             "    r1.z = -r1.z*hg_Params[0].y + r1.z;\n"
             "    r1.w = select(r1.w, c0.y, r2.x < 0.00000f);\n"
             "    r2.CGFloat x = r1.y + r1.z;\n"
             "    r1.w = select(r1.w, r2.x, -r2.y < 0.00000f);\n"
             "    r1.CGFloat y = r1.y/hg_Params[0].y;\n"
             "    r1.CGFloat y = select(r1.w, r1.y, -r2.w < 0.00000f);\n"
             "    r0.CGFloat x = r1.x*hg_Params[5].x;\n"
             "    r1.CGFloat x = r1.y*hg_Params[9].y;\n"
             "    r0.w = c0.z;\n"
             "    r0.CGFloat y = r1.x*hg_Params[6].y;\n"
             "    r2.CGFloat y = dot(r0.xyw, hg_Params[8].xyw);\n"
             "    r2.CGFloat x = dot(r0.xyw, hg_Params[7].xyw);\n"
             "    r2.xCGFloat y = r2.xy + hg_Params[12].xy;\n"
             "    r2.xCGFloat y = r2.xy*hg_Params[12].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e0d37d90:fe73f5ca:07fc9ff0:84c27f71\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:000d:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000c7b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.CGFloat x = c0.x + hg_ProgramLocal11.x;\n"
           "    r1.CGFloat y = -c0.x - hg_ProgramLocal11.x;\n"
           "    r0.CGFloat y = max(r0.x, hg_ProgramLocal2.y);\n"
           "    r0.z = r0.y*hg_ProgramLocal0.x;\n"
           "    r1.z = min(r1.y, hg_ProgramLocal1.z);\n"
           "    r1.w = r1.z*hg_ProgramLocal0.x;\n"
           "    r1.CGFloat x = dot(hg_TexCoord0, hg_ProgramLocal5);\n"
           "    r1.CGFloat x = r1.x/hg_ProgramLocal9.x;\n"
           "    r1.CGFloat x = r1.x*hg_ProgramLocal7.x;\n"
           "    r1.CGFloat x = r1.x/hg_ProgramLocal10.x;\n"
           "    r1.z = r1.z*hg_ProgramLocal0.x + -r1.z;\n"
           "    r0.CGFloat y = -r0.y*hg_ProgramLocal0.x + r0.y;\n"
           "    r2.CGFloat x = float(r1.x < r1.w);\n"
           "    r0.w = float(r0.z < r1.x);\n"
           "    r2.CGFloat y = r0.w*-r2.x;\n"
           "    r0.w = float(r0.z >= r1.x);\n"
           "    r0.z = float(r1.x >= r1.w);\n"
           "    r1.zw = r1.xx - r1.zw;\n"
           "    r1.z = r1.w < 0.00000 ? c0.y : r1.z;\n"
           "    r0.CGFloat y = r1.x + r0.y;\n"
           "    r1.CGFloat x = r1.x/hg_ProgramLocal0.x;\n"
           "    r1.w = min(r1.y, hg_ProgramLocal3.w);\n"
           "    r0.z = c0.z - r0.z;\n"
           "    r2.CGFloat x = float(-r0.w >= c0.y);\n"
           "    r2.CGFloat x = min(r0.z, r2.x);\n"
           "    r0.z = min(r0.z, r0.w);\n"
           "    r1.z = -r0.z < 0.00000 ? r0.y : r1.z;\n"
           "    r2.CGFloat x = min(r2.x, r2.y);\n"
           "    r1.CGFloat x = r2.x < 0.00000 ? r1.x : r1.z;\n"
           "    r1.z = max(r0.x, hg_ProgramLocal4.z);\n"
           "    r2.xCGFloat y = r1.wz*hg_ProgramLocal0.yy;\n"
           "    r1.CGFloat x = r1.x*hg_ProgramLocal9.x;\n"
           "    r1.CGFloat y = dot(hg_TexCoord0, hg_ProgramLocal6);\n"
           "    r1.CGFloat y = r1.y/hg_ProgramLocal9.y;\n"
           "    r1.CGFloat y = r1.y*hg_ProgramLocal8.y;\n"
           "    r1.CGFloat y = r1.y/hg_ProgramLocal10.y;\n"
           "    r1.w = r1.w*hg_ProgramLocal0.y + -r1.w;\n"
           "    r2.w = float(r1.y < r2.x);\n"
           "    r2.z = float(r2.y < r1.y);\n"
           "    r0.CGFloat x = min(r2.z, r2.w);\n"
           "    r2.z = float(r2.y >= r1.y);\n"
           "    r2.CGFloat y = float(r1.y >= r2.x);\n"
           "    r2.w = r2.z;\n"
           "    r2.CGFloat x = r1.y - r2.x;\n"
           "    r1.w = r1.y - r1.w;\n"
           "    r2.yw = vec2(greaterThanEqual(-r2.yw, c0.yy));\n"
           "    r2.yw = min(r2.yy, r2.zw);\n"
           "    r2.w = min(r2.w, r0.x);\n"
           "    r1.z = -r1.z*hg_ProgramLocal0.y + r1.z;\n"
           "    r1.w = r2.x < 0.00000 ? c0.y : r1.w;\n"
           "    r2.CGFloat x = r1.y + r1.z;\n"
           "    r1.w = -r2.y < 0.00000 ? r2.x : r1.w;\n"
           "    r1.CGFloat y = r1.y/hg_ProgramLocal0.y;\n"
           "    r1.CGFloat y = -r2.w < 0.00000 ? r1.y : r1.w;\n"
           "    r0.CGFloat x = r1.x*hg_ProgramLocal5.x;\n"
           "    r1.CGFloat x = r1.y*hg_ProgramLocal9.y;\n"
           "    r0.w = c0.z;\n"
           "    r0.CGFloat y = r1.x*hg_ProgramLocal6.y;\n"
           "    r2.CGFloat y = dot(r0.xyw, hg_ProgramLocal8.xyw);\n"
           "    r2.CGFloat x = dot(r0.xyw, hg_ProgramLocal7.xyw);\n"
           "    r2.xCGFloat y = r2.xy + hg_ProgramLocal12.xy;\n"
           "    r2.xCGFloat y = r2.xy*hg_ProgramLocal12.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r2.xy);\n"
           "}\n"
           "//MD5=a855e8cc:e7e9e0ad:b70918bc:4185df98\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:000d:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSlicedScale::InitProgramDescriptor(HgcSlicedScale *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSlicedScale_hgc_visible", "//Metal1.0     \n//LEN=00000009de\n[[ visible ]] FragmentOut HgcSlicedScale_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.CGFloat x = c0.x + hg_Params[11].x;\n"
    "    r1.CGFloat y = -c0.x - hg_Params[11].x;\n"
    "    r0.CGFloat y = fmax(r0.x, hg_Params[2].y);\n"
    "    r0.z = r0.y*hg_Params[0].x;\n"
    "    r1.z = fmin(r1.y, hg_Params[1].z);\n"
    "    r1.w = r1.z*hg_Params[0].x;\n"
    "    r1.CGFloat x = dot(texCoord0, hg_Params[5]);\n"
    "    r1.CGFloat x = r1.x/hg_Params[9].x;\n"
    "    r1.CGFloat x = r1.x*hg_Params[7].x;\n"
    "    r1.CGFloat x = r1.x/hg_Params[10].x;\n"
    "    r1.z = r1.z*hg_Params[0].x + -r1.z;\n"
    "    r0.CGFloat y = -r0.y*hg_Params[0].x + r0.y;\n"
    "    r2.CGFloat x = float(r1.x < r1.w);\n"
    "    r0.w = float(r0.z < r1.x);\n"
    "    r2.CGFloat y = r0.w*-r2.x;\n"
    "    r0.w = float(r0.z >= r1.x);\n"
    "    r0.z = float(r1.x >= r1.w);\n"
    "    r1.zw = r1.xx - r1.zw;\n"
    "    r1.z = select(r1.z, c0.y, r1.w < 0.00000f);\n"
    "    r0.CGFloat y = r1.x + r0.y;\n"
    "    r1.CGFloat x = r1.x/hg_Params[0].x;\n"
    "    r1.w = fmin(r1.y, hg_Params[3].w);\n"
    "    r0.z = c0.z - r0.z;\n"
    "    r2.CGFloat x = float(-r0.w >= c0.y);\n"
    "    r2.CGFloat x = fmin(r0.z, r2.x);\n"
    "    r0.z = fmin(r0.z, r0.w);\n"
    "    r1.z = select(r1.z, r0.y, -r0.z < 0.00000f);\n"
    "    r2.CGFloat x = fmin(r2.x, r2.y);\n"
    "    r1.CGFloat x = select(r1.z, r1.x, r2.x < 0.00000f);\n"
    "    r1.z = fmax(r0.x, hg_Params[4].z);\n"
    "    r2.xCGFloat y = r1.wz*hg_Params[0].yy;\n"
    "    r1.CGFloat x = r1.x*hg_Params[9].x;\n"
    "    r1.CGFloat y = dot(texCoord0, hg_Params[6]);\n"
    "    r1.CGFloat y = r1.y/hg_Params[9].y;\n"
    "    r1.CGFloat y = r1.y*hg_Params[8].y;\n"
    "    r1.CGFloat y = r1.y/hg_Params[10].y;\n"
    "    r1.w = r1.w*hg_Params[0].y + -r1.w;\n"
    "    r2.w = float(r1.y < r2.x);\n"
    "    r2.z = float(r2.y < r1.y);\n"
    "    r0.CGFloat x = fmin(r2.z, r2.w);\n"
    "    r2.z = float(r2.y >= r1.y);\n"
    "    r2.CGFloat y = float(r1.y >= r2.x);\n"
    "    r2.w = r2.z;\n"
    "    r2.CGFloat x = r1.y - r2.x;\n"
    "    r1.w = r1.y - r1.w;\n"
    "    r2.yw = float2(-r2.yw >= c0.yy);\n"
    "    r2.yw = fmin(r2.yy, r2.zw);\n"
    "    r2.w = fmin(r2.w, r0.x);\n"
    "    r1.z = -r1.z*hg_Params[0].y + r1.z;\n"
    "    r1.w = select(r1.w, c0.y, r2.x < 0.00000f);\n"
    "    r2.CGFloat x = r1.y + r1.z;\n"
    "    r1.w = select(r1.w, r2.x, -r2.y < 0.00000f);\n"
    "    r1.CGFloat y = r1.y/hg_Params[0].y;\n"
    "    r1.CGFloat y = select(r1.w, r1.y, -r2.w < 0.00000f);\n"
    "    r0.CGFloat x = r1.x*hg_Params[5].x;\n"
    "    r1.CGFloat x = r1.y*hg_Params[9].y;\n"
    "    r0.w = c0.z;\n"
    "    r0.CGFloat y = r1.x*hg_Params[6].y;\n"
    "    r2.CGFloat y = dot(r0.xyw, hg_Params[8].xyw);\n"
    "    r2.CGFloat x = dot(r0.xyw, hg_Params[7].xyw);\n"
    "    r2.xCGFloat y = r2.xy + hg_Params[12].xy;\n"
    "    r2.xCGFloat y = r2.xy*hg_Params[12].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcSlicedScale");
}

void sub_1B75533F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75540;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7553574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B75535C4()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B75535BCLL);
}

void *HgcSlicedScale::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSlicedScale [hgc1]");
}

uint64_t HgcSlicedScale::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 144) + 128))(*(void *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 12, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcSlicedScale::Bind(HgcSlicedScale *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcSlicedScale::RenderTile(HgcSlicedScale *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcSlicedScale *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    float32x4_t v11 = (float32x4_t)xmmword_1B7E736B0;
    int8x16_t v12 = (int8x16_t)xmmword_1B7E736C0;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v14 = 16 * *((int *)a2 + 6);
    float v15 = 1.0;
    float32x4_t v16 = v9;
    float32x4_t v307 = v9;
    do
    {
      if (v10 < 2)
      {
        uint64_t v17 = 0;
        float32x4_t v19 = v16;
      }
      else
      {
        uint64_t v17 = 0;
        int v18 = v10;
        float32x4_t v306 = v16;
        float32x4_t v19 = v16;
        do
        {
          int8x16_t v20 = (_OWORD *)*((void *)this + 51);
          float32x4_t v22 = *((float32x4_t *)v20 + 12);
          int8x16_t v21 = *((int8x16_t *)v20 + 13);
          float32x4_t v24 = *((float32x4_t *)v20 + 10);
          float32x4_t v23 = *((float32x4_t *)v20 + 11);
          int32x4_t v25 = (int32x4_t)vaddq_f32(v23, v22);
          int8x16_t v26 = (int8x16_t)vsubq_f32(v22, (float32x4_t)vrev64q_s32((int32x4_t)v23));
          float32x4_t v27 = *((float32x4_t *)v20 + 3);
          v28.i64[0] = vbslq_s8(v21, (int8x16_t)v25, (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v25), *((float32x4_t *)v20 + 2))).u64[0];
          v28.i64[1] = vmulq_lane_f32((float32x4_t)vdupq_lane_s64(*(void *)v20, 0), *(float32x2_t *)&v28, 1).i64[1];
          float32x4_t v29 = vminq_f32((float32x4_t)vextq_s8(v26, v26, 0xCuLL), *((float32x4_t *)v20 + 1));
          v26.i64[1] = v29.i64[1];
          float32x4_t v30 = vaddq_f32(v19, v11);
          int8x16_t v31 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v20, *(int8x16_t *)v20, 4uLL), v29, 2);
          int8x16_t v33 = *((int8x16_t *)v20 + 14);
          int8x16_t v32 = *((int8x16_t *)v20 + 15);
          int8x16_t v34 = vbslq_s8(v33, v31, v26);
          float32x4_t v35 = *((float32x4_t *)v20 + 4);
          float32x4_t v36 = *((float32x4_t *)v20 + 5);
          int8x16_t v37 = (int8x16_t)vmulq_f32(v19, v36);
          int8x16_t v38 = (int8x16_t)vmulq_f32(v30, v36);
          int8x16_t v39 = (int8x16_t)vaddq_f32((float32x4_t)v37, (float32x4_t)vextq_s8(v37, v37, 4uLL));
          int8x16_t v40 = (int8x16_t)vaddq_f32((float32x4_t)v38, (float32x4_t)vextq_s8(v38, v38, 4uLL));
          float32x4_t v41 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v39, (float32x4_t)vextq_s8(v39, v39, 8uLL)), v34);
          float32x4_t v43 = *((float32x4_t *)v20 + 8);
          float32x4_t v42 = *((float32x4_t *)v20 + 9);
          float32x4_t v44 = vrecpeq_f32(v42);
          float32x4_t v45 = *((float32x4_t *)v20 + 16);
          int8x16_t v46 = *((int8x16_t *)v20 + 17);
          float32x4_t v47 = vminq_f32(vmaxq_f32(v44, (float32x4_t)v32), v45);
          float32x4_t v48 = vminq_f32(vmaxq_f32(vmulq_f32(v47, vrecpsq_f32(v42, v47)), (float32x4_t)v32), v45);
          float32x4_t v49 = vmulq_f32(v48, vrecpsq_f32(v42, v48));
          int8x16_t v50 = (int8x16_t)vmulq_f32(v49, (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v40, (float32x4_t)vextq_s8(v40, v40, 8uLL)), v34));
          float32x4_t v51 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v49, v41), v34);
          float32x4_t v52 = (float32x4_t)vbslq_s8(v21, v50, v34);
          float32x4_t v54 = *((float32x4_t *)v20 + 6);
          float32x4_t v53 = *((float32x4_t *)v20 + 7);
          float32x4_t v55 = vrecpeq_f32(v24);
          float32x4_t v56 = vminq_f32(vmaxq_f32(v55, (float32x4_t)v32), v45);
          float32x4_t v57 = vminq_f32(vmaxq_f32(vmulq_f32(v56, vrecpsq_f32(v24, v56)), (float32x4_t)v32), v45);
          float32x4_t v58 = vmulq_f32(v57, vrecpsq_f32(v24, v57));
          int8x16_t v59 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v58, (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v53, v51), v34)), v34);
          int8x16_t v60 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v58, (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v53, v52), v34)), v34);
          int32x4_t v61 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v59, COERCE_FLOAT(*v20)), (float32x4_t)v59), v59);
          int32x4_t v62 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v60, COERCE_FLOAT(*v20)), (float32x4_t)v60), v60);
          int8x16_t v64 = *((int8x16_t *)v20 + 18);
          int8x16_t v63 = *((int8x16_t *)v20 + 19);
          int32x4_t v65 = (int32x4_t)vbslq_s8(v64, (int8x16_t)vsubq_f32(v28, vmulq_n_f32(v28, COERCE_FLOAT(*v20))), (int8x16_t)v28);
          int32x4_t v66 = (int32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL);
          float32x4_t v67 = (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL);
          float32x4_t v68 = (float32x4_t)vrev64q_s32(v65);
          int32x4_t v69 = (int32x4_t)vbslq_s8(v33, vandq_s8(v63, (int8x16_t)vcgtq_f32((float32x4_t)v66, v68)), (int8x16_t)v65);
          int32x4_t v70 = (int32x4_t)vbslq_s8(v33, vandq_s8(v63, (int8x16_t)vcgtq_f32(v67, v68)), (int8x16_t)v65);
          int8x16_t v71 = (int8x16_t)vmulq_laneq_f32(vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)vandq_s8(v63, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 0xCuLL), (float32x4_t)v61)))), (float32x4_t)v69, 3);
          int8x16_t v72 = (int8x16_t)vmulq_laneq_f32(vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)vandq_s8(v63, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 0xCuLL), (float32x4_t)v62)))), (float32x4_t)v70, 3);
          v69.i64[1] = vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32(v69), *(float32x4_t *)&v66)).i64[1];
          int8x16_t v73 = vbslq_s8(v46, vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (float32x4_t)vrev64q_s32(v61))), (int8x16_t)v69);
          v70.i64[1] = vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32(v70), v67)).i64[1];
          int8x16_t v74 = vbslq_s8(v46, vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), (float32x4_t)vrev64q_s32(v62))), (int8x16_t)v70);
          int8x16_t v75 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.i8, 0), (float32x4_t)v61);
          int8x16_t v76 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.i8, 0), (float32x4_t)v62);
          v65.i64[0] = v61.i64[0];
          v65.i64[1] = vdupq_laneq_s64((int64x2_t)v75, 1).u64[0];
          v66.i64[0] = v62.i64[0];
          v66.i64[1] = vdupq_laneq_s64((int64x2_t)v76, 1).u64[0];
          int64x2_t v77 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)vrev64q_s32(v65)), v32, v75);
          v69.i64[0] = v61.i64[0];
          v69.i64[1] = v77.i64[1];
          int64x2_t v78 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)vrev64q_s32(v66)), v32, v76);
          v66.i64[0] = v62.i64[0];
          v66.i64[1] = v78.i64[1];
          v61.i64[1] = vdupq_laneq_s64(v77, 1).u64[0];
          v62.i64[1] = vdupq_laneq_s64(v78, 1).u64[0];
          int8x16_t v79 = vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v61), (float32x4_t)v73), v73);
          int8x16_t v80 = vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v62), (float32x4_t)v74), v74);
          float32x4_t v81 = vrecpeq_f32(*(float32x4_t *)v20);
          float32x4_t v82 = vminq_f32(vmaxq_f32(v81, (float32x4_t)v32), v45);
          float32x4_t v83 = vminq_f32(vmaxq_f32(vmulq_f32(v82, vrecpsq_f32(*(float32x4_t *)v20, v82)), (float32x4_t)v32), v45);
          float32x4_t v84 = vmulq_f32(v83, vrecpsq_f32(*(float32x4_t *)v20, v83));
          int8x16_t v85 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v84, (float32x4_t)v69), (int8x16_t)v69);
          int8x16_t v86 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v84, (float32x4_t)v66), (int8x16_t)v66);
          int8x16_t v87 = vbslq_s8(v33, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v85, v85, 8uLL), v27), v85);
          int8x16_t v88 = vbslq_s8(v33, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v86, v86, 8uLL), v27), v86);
          int32x4_t v89 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v63, (float32x4_t)v79), v79);
          int32x4_t v90 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v63, (float32x4_t)v80), v80);
          int8x16_t v91 = *((int8x16_t *)v20 + 20);
          int8x16_t v92 = *((int8x16_t *)v20 + 21);
          int32x4_t v93 = (int32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL), (float32x4_t)vbslq_s8(v21, vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 0xCuLL)), (float32x4_t)v91)), v71)), v71);
          int32x4_t v94 = (int32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), (float32x4_t)vbslq_s8(v21, vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL)), (float32x4_t)v91)), v72)), v72);
          int8x16_t v95 = (int8x16_t)vminq_f32((float32x4_t)v89, (float32x4_t)vrev64q_s32(v89));
          float32x4_t v96 = (float32x4_t)vextq_s8(v95, (int8x16_t)v89, 8uLL);
          v89.i64[1] = v95.i64[1];
          int8x16_t v97 = (int8x16_t)vminq_f32((float32x4_t)v90, (float32x4_t)vrev64q_s32(v90));
          float32x4_t v98 = (float32x4_t)vextq_s8(v97, (int8x16_t)v90, 8uLL);
          v90.i64[1] = v97.i64[1];
          int8x16_t v99 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v89, (float32x4_t)v91), vextq_s8((int8x16_t)v89, (int8x16_t)v89, 0xCuLL), v87), v87);
          int8x16_t v100 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v90, (float32x4_t)v91), vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL), v88), v88);
          v88.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, vminq_f32((float32x4_t)v93, (float32x4_t)vrev64q_s32(v93))), v99, (int8x16_t)vdupq_laneq_s64((int64x2_t)v99, 1)).u64[0];
          v87.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, vminq_f32((float32x4_t)v94, (float32x4_t)vrev64q_s32(v94))), v100, (int8x16_t)vdupq_laneq_s64((int64x2_t)v100, 1)).u64[0];
          v88.i64[1] = v99.i64[1];
          int8x16_t v101 = vbslq_s8(v46, (int8x16_t)vmaxq_f32(v96, v35), v88);
          v87.i64[1] = v100.i64[1];
          int8x16_t v102 = vbslq_s8(v46, (int8x16_t)vmaxq_f32(v98, v35), v87);
          *(int8x8_t *)v88.i8 = vqtbl1_s8(v101, *(int8x8_t *)v92.i8);
          v35.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
          v88.u64[1] = (unint64_t)vqtbl1_s8(v101, *(int8x8_t *)v35.f32);
          *(int8x8_t *)v87.i8 = vqtbl1_s8(v102, *(int8x8_t *)v92.i8);
          v87.u64[1] = (unint64_t)vqtbl1_s8(v102, *(int8x8_t *)v35.f32);
          int8x16_t v103 = (int8x16_t)vmulq_lane_f32((float32x4_t)v88, *(float32x2_t *)v20, 1);
          int8x16_t v104 = (int8x16_t)vmulq_lane_f32((float32x4_t)v87, *(float32x2_t *)v20, 1);
          v93.i64[0] = vmulq_f32(v42, (float32x4_t)v101).u64[0];
          v94.i64[0] = vmulq_f32(v42, (float32x4_t)v102).u64[0];
          v93.i64[1] = v101.i64[1];
          v94.i64[1] = v102.i64[1];
          int8x16_t v105 = (int8x16_t)vmulq_f32(v19, v54);
          int8x16_t v106 = (int8x16_t)vmulq_f32(v30, v54);
          int8x16_t v107 = (int8x16_t)vaddq_f32((float32x4_t)v105, (float32x4_t)vextq_s8(v105, v105, 4uLL));
          int8x16_t v108 = (int8x16_t)vaddq_f32((float32x4_t)v106, (float32x4_t)vextq_s8(v106, v106, 4uLL));
          float32x4_t v109 = vminq_f32(vmaxq_f32(v44, (float32x4_t)v91), v45);
          float32x4_t v110 = vminq_f32(vmaxq_f32(vmulq_f32(v109, vrecpsq_f32(v42, v109)), (float32x4_t)v91), v45);
          float32x4_t v111 = vmulq_f32(v110, vrecpsq_f32(v42, v110));
          float32x4_t v112 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v43, (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v111, (float32x4_t)vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)v107, (float32x4_t)vextq_s8(v107, v107, 8uLL)), (int8x16_t)v93)), (int8x16_t)v93)), (int8x16_t)v93);
          float32x4_t v113 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v43, (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v111, (float32x4_t)vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)v108, (float32x4_t)vextq_s8(v108, v108, 8uLL)), (int8x16_t)v94)), (int8x16_t)v94)), (int8x16_t)v94);
          float32x4_t v114 = vminq_f32(vmaxq_f32(v55, (float32x4_t)v91), v45);
          float32x4_t v115 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpsq_f32(v24, v114)), (float32x4_t)v91), v45);
          float32x4_t v116 = vmulq_f32(v115, vrecpsq_f32(v24, v115));
          int8x16_t v117 = vbslq_s8(v64, (int8x16_t)vmulq_f32(v116, v112), (int8x16_t)v93);
          float32x4_t v118 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v116, v113), (int8x16_t)v94);
          float32x4_t v119 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(vmulq_lane_f32((float32x4_t)v117, *(float32x2_t *)v20, 1), (float32x4_t)v117), v117);
          float32x4_t v120 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(vmulq_lane_f32(v118, *(float32x2_t *)v20, 1), v118), (int8x16_t)v118);
          float32x4_t v121 = (float32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL);
          float32x4_t v122 = (float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
          v103.i64[1] = vandq_s8(v91, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v103, v103, 4uLL), v121)).i64[1];
          v104.i64[1] = vandq_s8(v91, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v104, v104, 4uLL), v122)).i64[1];
          int8x16_t v123 = vandq_s8(v63, (int8x16_t)vcgtq_f32(v119, (float32x4_t)v103));
          int8x16_t v124 = vandq_s8(v63, (int8x16_t)vcgtq_f32(v120, (float32x4_t)v104));
          float32x4_t v125 = (float32x4_t)vbslq_s8(v46, vextq_s8(v123, v123, 0xCuLL), v103);
          float32x4_t v126 = (float32x4_t)vbslq_s8(v46, vextq_s8(v124, v124, 0xCuLL), v104);
          int8x16_t v127 = vextq_s8(v12, vandq_s8(v63, (int8x16_t)vcgeq_f32(v125, v119)), 0xCuLL);
          int8x16_t v128 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v127, 1);
          v127.i64[0] = v125.i64[0];
          float32x4_t v129 = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 0xCuLL), v125);
          v125.i64[1] = v128.i64[0];
          int8x16_t v130 = vextq_s8(v128, vandq_s8(v63, (int8x16_t)vcgeq_f32(v126, v120)), 0xCuLL);
          v123.i64[0] = vdupq_laneq_s64((int64x2_t)v130, 1).u64[0];
          v130.i64[0] = v126.i64[0];
          float32x4_t v131 = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 0xCuLL), v126);
          v126.i64[1] = v123.i64[0];
          int32x4_t v132 = (int32x4_t)vbslq_s8(v64, vandq_s8(v63, (int8x16_t)vcgeq_f32(v119, (float32x4_t)vrev64q_s32((int32x4_t)v125))), v127);
          int32x4_t v133 = (int32x4_t)vbslq_s8(v64, vandq_s8(v63, (int8x16_t)vcgeq_f32(v120, (float32x4_t)vrev64q_s32((int32x4_t)v126))), v130);
          int8x16_t v134 = vbslq_s8(v33, (int8x16_t)vrev64q_s32(v132), (int8x16_t)v132);
          int8x16_t v135 = vbslq_s8(v33, (int8x16_t)vrev64q_s32(v133), (int8x16_t)v133);
          int8x16_t v136 = vbslq_s8(v21, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v119), (float32x4_t)v134), v134);
          int8x16_t v137 = vbslq_s8(v21, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v120), (float32x4_t)v135), v135);
          int8x16_t v138 = (int8x16_t)vsubq_f32(v122, v120);
          int8x16_t v139 = vbslq_s8(v33, (int8x16_t)vsubq_f32(v121, v119), v117);
          int8x16_t v140 = vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v136), (float32x4_t)v32));
          int8x16_t v141 = vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v137), (float32x4_t)v32));
          int8x16_t v142 = *((int8x16_t *)v20 + 22);
          int8x16_t v143 = *((int8x16_t *)v20 + 23);
          int8x16_t v144 = vbslq_s8(v142, v136, v140);
          int8x16_t v145 = vbslq_s8(v142, v137, v141);
          *(int8x8_t *)v136.i8 = vqtbl1_s8(v144, *(int8x8_t *)v92.i8);
          v136.u64[1] = (unint64_t)vqtbl1_s8(v144, *(int8x8_t *)v35.f32);
          *(int8x8_t *)v141.i8 = vqtbl1_s8(v145, *(int8x8_t *)v92.i8);
          v141.u64[1] = (unint64_t)vqtbl1_s8(v145, *(int8x8_t *)v35.f32);
          int8x16_t v146 = vbslq_s8(v33, v138, (int8x16_t)v118);
          int8x16_t v147 = vbslq_s8(v21, v144, (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v144.i64[0], 0), (float32x4_t)v136));
          int8x16_t v148 = vbslq_s8(v21, v145, (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v145.i64[0], 0), (float32x4_t)v141));
          int8x16_t v149 = (int8x16_t)vminq_f32((float32x4_t)v147, v129);
          v118.i64[0] = vextq_s8(v149, v147, 0xCuLL).u64[0];
          *(int8x8_t *)v141.i8 = vext_s8(*(int8x8_t *)v147.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL), 4uLL);
          v147.i64[1] = v149.i64[1];
          int8x16_t v150 = vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v139, vmulq_lane_f32((float32x4_t)v139, *(float32x2_t *)v20, 1)), v139);
          int8x16_t v151 = (int8x16_t)vminq_f32((float32x4_t)v148, v131);
          v141.i64[1] = v118.i64[0];
          int8x16_t v152 = vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v146, vmulq_lane_f32((float32x4_t)v146, *(float32x2_t *)v20, 1)), v146);
          v118.i64[0] = vextq_s8(v151, v148, 0xCuLL).u64[0];
          v46.i64[0] = v148.i64[0];
          v46.i64[1] = v151.i64[1];
          *(int8x8_t *)v148.i8 = vext_s8(*(int8x8_t *)v148.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), 4uLL);
          v148.i64[1] = v118.i64[0];
          float32x4_t v153 = (float32x4_t)vbslq_s8(v33, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)v141), v32, v150), v150);
          float32x4_t v154 = (float32x4_t)vbslq_s8(v33, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)v148), v32, v152), v152);
          int8x16_t v155 = vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v153), (float32x4_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL)), v147);
          int8x16_t v156 = vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v154), (float32x4_t)vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL)), v46);
          int8x16_t v157 = vextq_s8(v155, v155, 4uLL);
          int8x16_t v158 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v155, v155, 8uLL), (float32x4_t)v32);
          v153.i64[1] = vbslq_s8(v158, v157, *(int8x16_t *)&v153).i64[1];
          int8x16_t v159 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v156, v156, 8uLL), (float32x4_t)v32);
          v154.i64[1] = vbslq_s8(v159, vextq_s8(v156, v156, 4uLL), *(int8x16_t *)&v154).i64[1];
          float32x4_t v160 = vminq_f32(vmaxq_f32(v81, (float32x4_t)v91), v45);
          float32x4_t v161 = vminq_f32(vmaxq_f32(vmulq_f32(v160, vrecpsq_f32(*(float32x4_t *)v20, v160)), (float32x4_t)v91), v45);
          float32x4_t v162 = vmulq_f32(v161, vrecpsq_f32(*(float32x4_t *)v20, v161));
          int8x16_t v163 = vbslq_s8(v64, (int8x16_t)vmulq_f32(v162, v153), (int8x16_t)v153);
          int8x16_t v164 = vbslq_s8(v64, (int8x16_t)vmulq_f32(v162, v154), (int8x16_t)v154);
          float32x4_t v165 = (float32x4_t)vbslq_s8(v21, v163, vbslq_s8(v158, v163, vextq_s8(v163, v163, 8uLL)));
          float32x4_t v166 = (float32x4_t)vbslq_s8(v21, v164, vbslq_s8(v159, v164, vextq_s8(v164, v164, 8uLL)));
          int8x16_t v167 = (int8x16_t)vmulq_f32(v36, v165);
          int8x16_t v168 = (int8x16_t)vmulq_f32(v36, v166);
          float32x4_t v169 = (float32x4_t)vrev64q_s32((int32x4_t)v42);
          v167.i32[3] = 1.0;
          float v15 = 1.0;
          v168.i32[3] = 1.0;
          float32x4_t v170 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_n_f32(v54, vmulq_lane_f32(v169, *(float32x2_t *)v165.f32, 1).f32[0]), v167);
          float32x4_t v171 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_n_f32(v54, vmulq_lane_f32(v169, *(float32x2_t *)v166.f32, 1).f32[0]), v168);
          int32x4_t v172 = (int32x4_t)vmulq_f32(v43, v170);
          int8x16_t v173 = (int8x16_t)vmulq_f32(v43, v171);
          *(int8x8_t *)v169.f32 = vqtbl1_s8((int8x16_t)v172, *(int8x8_t *)v143.i8);
          v141.i64[0] = vextq_s8(v143, v143, 8uLL).u64[0];
          *(int8x8_t *)v172.i8 = vqtbl1_s8((int8x16_t)v172, *(int8x8_t *)v141.i8);
          v118.i64[0] = v169.i64[0];
          *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v172.i8, *(int8x8_t *)v169.f32, 4uLL);
          *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v169.f32, *(int8x8_t *)v172.i8, 4uLL);
          v169.i64[1] = v172.i64[0];
          *(int8x8_t *)v32.i8 = vqtbl1_s8(v173, *(int8x8_t *)v143.i8);
          *(int8x8_t *)v173.i8 = vqtbl1_s8(v173, *(int8x8_t *)v141.i8);
          v118.i64[1] = v172.i64[0];
          v172.i64[0] = v32.i64[0];
          *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v173.i8, 4uLL);
          v32.i64[1] = v173.i64[0];
          v172.i64[1] = v173.i64[0];
          v36.i64[1] = v22.i64[0];
          *(int8x8_t *)&v42.u32[2] = vext_s8(*(int8x8_t *)v173.i8, *(int8x8_t *)v32.i8, 4uLL);
          int8x16_t v174 = (int8x16_t)vaddq_f32(v36, vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v118), v169));
          int8x16_t v175 = (int8x16_t)vmulq_f32(v53, v170);
          int8x16_t v176 = (int8x16_t)vmulq_f32(v53, v171);
          *(int8x8_t *)v169.f32 = vqtbl1_s8(v175, *(int8x8_t *)v143.i8);
          *(int8x8_t *)v175.i8 = vqtbl1_s8(v175, *(int8x8_t *)v141.i8);
          v118.i64[0] = v169.i64[0];
          v118.i64[1] = v175.i64[0];
          *(int8x8_t *)v22.f32 = vqtbl1_s8(v176, *(int8x8_t *)v143.i8);
          *(int8x8_t *)v176.i8 = vqtbl1_s8(v176, *(int8x8_t *)v141.i8);
          v141.i64[0] = v22.i64[0];
          v141.i64[1] = v176.i64[0];
          v36.i64[0] = v169.i64[0];
          v36.i64[1] = v175.i64[0];
          float32x4_t v177 = vaddq_f32(v118, (float32x4_t)vrev64q_s32((int32x4_t)v36));
          v36.i64[0] = v22.i64[0];
          v36.i64[1] = v176.i64[0];
          v175.i64[1] = v169.i64[0];
          v176.i64[1] = v22.i64[0];
          float32x4_t v178 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v175, v177), v174);
          float32x4_t v179 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v176, vaddq_f32((float32x4_t)v141, (float32x4_t)vrev64q_s32((int32x4_t)v36))), (int8x16_t)vaddq_f32(v42, vaddq_f32((float32x4_t)vrev64q_s32(v172), (float32x4_t)v32)));
          uint64_t v180 = *((int *)a2 + 22);
          float32x4_t v181 = vsubq_f32(v178, v307);
          uint64_t v182 = *((void *)a2 + 10);
          if (v5)
          {
            int32x4_t v183 = vaddq_s32(vcvtq_s32_f32(v181), vcltzq_f32(v181));
            float32x2_t v184 = (float32x2_t)vsubq_f32(v181, vcvtq_f32_s32(v183)).u64[0];
            int8x16_t v185 = (float32x4_t *)(v182 + 16 * (v183.i32[0] + v183.i32[1] * (int)v180));
            float32x4_t v186 = vaddq_f32(*v185, vmulq_n_f32(vsubq_f32(v185[1], *v185), v184.f32[0]));
            float32x4_t v187 = vaddq_f32(v186, vmulq_lane_f32(vsubq_f32(vaddq_f32(v185[v180], vmulq_n_f32(vsubq_f32(v185[(int)v180 + 1], v185[v180]), v184.f32[0])), v186), v184, 1));
            float32x4_t v188 = vsubq_f32(v179, v307);
            int32x4_t v189 = vaddq_s32(vcvtq_s32_f32(v188), vcltzq_f32(v188));
            v188.i64[0] = vsubq_f32(v188, vcvtq_f32_s32(v189)).u64[0];
            float32x4_t v190 = (float32x4_t *)(v182 + 16 * (v189.i32[0] + v189.i32[1] * (int)v180));
            float32x4_t v191 = vaddq_f32(*v190, vmulq_n_f32(vsubq_f32(v190[1], *v190), v188.f32[0]));
            int8x16_t v12 = (int8x16_t)vmulq_lane_f32(vsubq_f32(vaddq_f32(v190[v180], vmulq_n_f32(vsubq_f32(v190[(int)v180 + 1], v190[v180]), v188.f32[0])), v191), *(float32x2_t *)v188.f32, 1);
            float32x4_t v192 = vaddq_f32(v191, (float32x4_t)v12);
          }
          else
          {
            v193.i64[0] = 0x3F0000003F000000;
            v193.i64[1] = 0x3F0000003F000000;
            float32x4_t v194 = vaddq_f32(v181, v193);
            int32x4_t v195 = vcvtq_s32_f32(v194);
            v194.i64[0] = vaddq_s32(v195, vcgtq_f32(vcvtq_f32_s32(v195), v194)).u64[0];
            float32x4_t v187 = *(float32x4_t *)(v182 + 16 * (v194.i32[0] + v194.i32[1] * (int)v180));
            float32x4_t v196 = vaddq_f32(vsubq_f32(v179, v307), v193);
            int32x4_t v197 = vcvtq_s32_f32(v196);
            int8x16_t v12 = (int8x16_t)vaddq_s32(v197, vcgtq_f32(vcvtq_f32_s32(v197), v196));
            float32x4_t v192 = *(float32x4_t *)(v182 + 16 * (v12.i32[0] + v12.i32[1] * (int)v180));
          }
          float32x4_t v11 = (float32x4_t)xmmword_1B7E736B0;
          int8x16_t v198 = (float32x4_t *)(v13 + 16 * v17);
          *int8x16_t v198 = v187;
          v198[1] = v192;
          float32x4_t v19 = vaddq_f32(v30, (float32x4_t)xmmword_1B7E736B0);
          v17 += 2;
          v18 -= 2;
        }
        while (v18 > 1);
        uint64_t v17 = v17;
        float32x4_t v9 = v307;
        float32x4_t v16 = v306;
      }
      if ((int)v17 < v10)
      {
        float32x4_t v199 = v16;
        int8x16_t v200 = (_OWORD *)*((void *)this + 51);
        float32x4_t v201 = *((float32x4_t *)v200 + 12);
        int8x16_t v202 = *((int8x16_t *)v200 + 13);
        float32x4_t v204 = *((float32x4_t *)v200 + 10);
        float32x4_t v203 = *((float32x4_t *)v200 + 11);
        float32x4_t v205 = vaddq_f32(v203, v201);
        int8x16_t v206 = (int8x16_t)vsubq_f32(v201, (float32x4_t)vrev64q_s32((int32x4_t)v203));
        v207.i64[0] = vbslq_s8(v202, (int8x16_t)v205, (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v205), *((float32x4_t *)v200 + 2))).u64[0];
        v207.i64[1] = vmulq_lane_f32((float32x4_t)vdupq_lane_s64(*(void *)v200, 0), *(float32x2_t *)&v207, 1).i64[1];
        float32x4_t v208 = vminq_f32((float32x4_t)vextq_s8(v206, v206, 0xCuLL), *((float32x4_t *)v200 + 1));
        v206.i64[1] = v208.i64[1];
        int8x16_t v210 = *((int8x16_t *)v200 + 14);
        int8x16_t v209 = *((int8x16_t *)v200 + 15);
        int8x16_t v211 = vbslq_s8(v210, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v200, *(int8x16_t *)v200, 4uLL), v208, 2), v206);
        float32x4_t v212 = *((float32x4_t *)v200 + 5);
        int8x16_t v213 = (int8x16_t)vmulq_f32(v19, v212);
        int8x16_t v214 = (int8x16_t)vaddq_f32((float32x4_t)v213, (float32x4_t)vextq_s8(v213, v213, 4uLL));
        float32x4_t v216 = *((float32x4_t *)v200 + 8);
        float32x4_t v215 = *((float32x4_t *)v200 + 9);
        float32x4_t v217 = vrecpeq_f32(v215);
        float32x4_t v218 = *((float32x4_t *)v200 + 16);
        int8x16_t v219 = *((int8x16_t *)v200 + 17);
        float32x4_t v220 = vminq_f32(vmaxq_f32(v217, (float32x4_t)v209), v218);
        float32x4_t v221 = vminq_f32(vmaxq_f32(vmulq_f32(v220, vrecpsq_f32(v215, v220)), (float32x4_t)v209), v218);
        float32x4_t v223 = *((float32x4_t *)v200 + 6);
        float32x4_t v222 = *((float32x4_t *)v200 + 7);
        float32x4_t v224 = (float32x4_t)vbslq_s8(v202, (int8x16_t)vmulq_f32(v222, (float32x4_t)vbslq_s8(v202, (int8x16_t)vmulq_f32(vmulq_f32(v221, vrecpsq_f32(v215, v221)), (float32x4_t)vbslq_s8(v202, (int8x16_t)vaddq_f32((float32x4_t)v214, (float32x4_t)vextq_s8(v214, v214, 8uLL)), v211)), v211)), v211);
        float32x4_t v225 = vrecpeq_f32(v204);
        float32x4_t v226 = vminq_f32(vmaxq_f32(v225, (float32x4_t)v209), v218);
        float32x4_t v227 = vminq_f32(vmaxq_f32(vmulq_f32(v226, vrecpsq_f32(v204, v226)), (float32x4_t)v209), v218);
        int8x16_t v228 = vbslq_s8(v202, (int8x16_t)vmulq_f32(vmulq_f32(v227, vrecpsq_f32(v204, v227)), v224), v211);
        float32x4_t v229 = (float32x4_t)vbslq_s8(v219, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v228, COERCE_FLOAT(*v200)), (float32x4_t)v228), v228);
        int8x16_t v230 = *((int8x16_t *)v200 + 18);
        int8x16_t v231 = *((int8x16_t *)v200 + 19);
        int32x4_t v232 = (int32x4_t)vbslq_s8(v230, (int8x16_t)vsubq_f32(v207, vmulq_n_f32(v207, COERCE_FLOAT(*v200))), (int8x16_t)v207);
        float32x4_t v233 = (float32x4_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 4uLL);
        float32x4_t v234 = (float32x4_t)vbslq_s8(v210, vandq_s8(v231, (int8x16_t)vcgtq_f32(v233, (float32x4_t)vrev64q_s32(v232))), (int8x16_t)v232);
        int8x16_t v235 = (int8x16_t)vmulq_laneq_f32(vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)vandq_s8(v231, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 0xCuLL), v229)))), v234, 3);
        v234.i64[1] = vandq_s8(v231, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v234), v233)).i64[1];
        int8x16_t v236 = vbslq_s8(v219, vandq_s8(v231, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL), (float32x4_t)vrev64q_s32((int32x4_t)v229))), (int8x16_t)v234);
        int8x16_t v237 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v229.f32, 0), v229);
        v238.i64[0] = v229.i64[0];
        v238.i64[1] = vdupq_laneq_s64((int64x2_t)v237, 1).u64[0];
        int64x2_t v239 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v209, (float32x4_t)vrev64q_s32(v238)), v209, v237);
        v238.i64[0] = v229.i64[0];
        v238.i64[1] = v239.i64[1];
        v229.i64[1] = vdupq_laneq_s64(v239, 1).u64[0];
        int8x16_t v240 = vbslq_s8(v230, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v229), (float32x4_t)v236), v236);
        float32x4_t v241 = vrecpeq_f32(*(float32x4_t *)v200);
        float32x4_t v242 = vminq_f32(vmaxq_f32(v241, (float32x4_t)v209), v218);
        float32x4_t v243 = vminq_f32(vmaxq_f32(vmulq_f32(v242, vrecpsq_f32(*(float32x4_t *)v200, v242)), (float32x4_t)v209), v218);
        int8x16_t v244 = vbslq_s8(v202, (int8x16_t)vmulq_f32(vmulq_f32(v243, vrecpsq_f32(*(float32x4_t *)v200, v243)), (float32x4_t)v238), (int8x16_t)v238);
        int8x16_t v245 = vbslq_s8(v210, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v244, v244, 8uLL), *((float32x4_t *)v200 + 3)), v244);
        float32x4_t v246 = (float32x4_t)vbslq_s8(v219, (int8x16_t)vsubq_f32((float32x4_t)v231, (float32x4_t)v240), v240);
        int8x16_t v248 = *((int8x16_t *)v200 + 20);
        int8x16_t v247 = *((int8x16_t *)v200 + 21);
        float32x4_t v249 = (float32x4_t)vbslq_s8(v202, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL), (float32x4_t)vbslq_s8(v202, vandq_s8(v231, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 0xCuLL)), (float32x4_t)v248)), v235)), v235);
        int8x16_t v250 = (int8x16_t)vminq_f32(v246, (float32x4_t)vrev64q_s32((int32x4_t)v246));
        float32x4_t v251 = (float32x4_t)vextq_s8(v250, (int8x16_t)v246, 8uLL);
        v246.i64[1] = v250.i64[1];
        int8x16_t v252 = vbslq_s8(v219, vbslq_s8((int8x16_t)vcgtq_f32(v246, (float32x4_t)v248), vextq_s8((int8x16_t)v246, (int8x16_t)v246, 0xCuLL), v245), v245);
        v245.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v248, vminq_f32(v249, (float32x4_t)vrev64q_s32((int32x4_t)v249))), v252, (int8x16_t)vdupq_laneq_s64((int64x2_t)v252, 1)).u64[0];
        v245.i64[1] = v252.i64[1];
        int8x16_t v253 = vbslq_s8(v219, (int8x16_t)vmaxq_f32(v251, *((float32x4_t *)v200 + 4)), v245);
        *(int8x8_t *)v245.i8 = vqtbl1_s8(v253, *(int8x8_t *)v247.i8);
        int8x8_t v254 = (int8x8_t)vextq_s8(v247, v247, 8uLL).u64[0];
        v245.u64[1] = (unint64_t)vqtbl1_s8(v253, v254);
        int8x16_t v255 = (int8x16_t)vmulq_lane_f32((float32x4_t)v245, *(float32x2_t *)v200, 1);
        v249.i64[0] = vmulq_f32(v215, (float32x4_t)v253).u64[0];
        v249.i64[1] = v253.i64[1];
        int8x16_t v256 = (int8x16_t)vmulq_f32(v19, v223);
        int8x16_t v257 = (int8x16_t)vaddq_f32((float32x4_t)v256, (float32x4_t)vextq_s8(v256, v256, 4uLL));
        float32x4_t v258 = vminq_f32(vmaxq_f32(v217, (float32x4_t)v248), v218);
        float32x4_t v259 = vminq_f32(vmaxq_f32(vmulq_f32(v258, vrecpsq_f32(v215, v258)), (float32x4_t)v248), v218);
        float32x4_t v260 = (float32x4_t)vbslq_s8(v230, (int8x16_t)vmulq_f32(v216, (float32x4_t)vbslq_s8(v230, (int8x16_t)vmulq_f32(vmulq_f32(v259, vrecpsq_f32(v215, v259)), (float32x4_t)vbslq_s8(v230, (int8x16_t)vaddq_f32((float32x4_t)v257, (float32x4_t)vextq_s8(v257, v257, 8uLL)), (int8x16_t)v249)), (int8x16_t)v249)), (int8x16_t)v249);
        float32x4_t v261 = vminq_f32(vmaxq_f32(v225, (float32x4_t)v248), v218);
        float32x4_t v262 = vminq_f32(vmaxq_f32(vmulq_f32(v261, vrecpsq_f32(v204, v261)), (float32x4_t)v248), v218);
        int8x16_t v263 = vbslq_s8(v230, (int8x16_t)vmulq_f32(vmulq_f32(v262, vrecpsq_f32(v204, v262)), v260), (int8x16_t)v249);
        float32x4_t v264 = (float32x4_t)vbslq_s8(v210, (int8x16_t)vsubq_f32(vmulq_lane_f32((float32x4_t)v263, *(float32x2_t *)v200, 1), (float32x4_t)v263), v263);
        float32x4_t v265 = (float32x4_t)vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL);
        v255.i64[1] = vandq_s8(v248, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v255, v255, 4uLL), v265)).i64[1];
        int8x16_t v266 = vandq_s8(v231, (int8x16_t)vcgtq_f32(v264, (float32x4_t)v255));
        float32x4_t v267 = (float32x4_t)vbslq_s8(v219, vextq_s8(v266, v266, 0xCuLL), v255);
        int8x16_t v268 = vextq_s8(v263, vandq_s8(v231, (int8x16_t)vcgeq_f32(v267, v264)), 0xCuLL);
        unint64_t v269 = vdupq_laneq_s64((int64x2_t)v268, 1).u64[0];
        v268.i64[0] = v267.i64[0];
        float32x4_t v270 = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 0xCuLL), v267);
        v267.i64[1] = v269;
        int32x4_t v271 = (int32x4_t)vbslq_s8(v230, vandq_s8(v231, (int8x16_t)vcgeq_f32(v264, (float32x4_t)vrev64q_s32((int32x4_t)v267))), v268);
        int8x16_t v272 = vbslq_s8(v210, (int8x16_t)vrev64q_s32(v271), (int8x16_t)v271);
        int8x16_t v273 = vbslq_s8(v202, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v264), (float32x4_t)v272), v272);
        int8x16_t v274 = vbslq_s8(v210, (int8x16_t)vsubq_f32(v265, v264), v263);
        int8x16_t v275 = *((int8x16_t *)v200 + 23);
        int8x16_t v276 = vbslq_s8(*((int8x16_t *)v200 + 22), v273, vandq_s8(v231, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v273), (float32x4_t)v209)));
        *(int8x8_t *)v265.f32 = vqtbl1_s8(v276, *(int8x8_t *)v247.i8);
        *(int8x8_t *)&v265.u32[2] = vqtbl1_s8(v276, v254);
        int8x16_t v277 = vbslq_s8(v202, v276, (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v276.i64[0], 0), v265));
        int8x16_t v278 = (int8x16_t)vminq_f32((float32x4_t)v277, v270);
        v265.i64[0] = vextq_s8(v278, v277, 0xCuLL).u64[0];
        *(int8x8_t *)v270.f32 = vext_s8(*(int8x8_t *)v277.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v278, v278, 8uLL), 4uLL);
        v277.i64[1] = v278.i64[1];
        int8x16_t v279 = vbslq_s8(v219, (int8x16_t)vsubq_f32((float32x4_t)v274, vmulq_lane_f32((float32x4_t)v274, *(float32x2_t *)v200, 1)), v274);
        v270.i64[1] = v265.i64[0];
        float32x4_t v280 = (float32x4_t)vbslq_s8(v210, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v209, v270), v209, v279), v279);
        int8x16_t v281 = vbslq_s8(v202, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v280), (float32x4_t)vextq_s8((int8x16_t)v280, (int8x16_t)v280, 8uLL)), v277);
        int8x16_t v282 = vextq_s8(v281, v281, 4uLL);
        int8x16_t v283 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v281, v281, 8uLL), (float32x4_t)v209);
        v280.i64[1] = vbslq_s8(v283, v282, *(int8x16_t *)&v280).i64[1];
        float32x4_t v284 = vminq_f32(vmaxq_f32(v241, (float32x4_t)v248), v218);
        float32x4_t v285 = vminq_f32(vmaxq_f32(vmulq_f32(v284, vrecpsq_f32(*(float32x4_t *)v200, v284)), (float32x4_t)v248), v218);
        int8x16_t v286 = vbslq_s8(v230, (int8x16_t)vmulq_f32(vmulq_f32(v285, vrecpsq_f32(*(float32x4_t *)v200, v285)), v280), (int8x16_t)v280);
        float32x4_t v287 = (float32x4_t)vbslq_s8(v202, v286, vbslq_s8(v283, v286, vextq_s8(v286, v286, 8uLL)));
        int8x16_t v288 = (int8x16_t)vmulq_f32(v212, v287);
        *(float *)&v288.i32[3] = v15;
        float32x4_t v289 = (float32x4_t)vbslq_s8(v230, (int8x16_t)vmulq_lane_f32(v223, (float32x2_t)*(_OWORD *)&vmulq_f32(v215, v287), 1), v288);
        int8x16_t v290 = (int8x16_t)vmulq_f32(v216, v289);
        *(int8x8_t *)v285.f32 = vqtbl1_s8(v290, *(int8x8_t *)v275.i8);
        v270.i64[0] = vextq_s8(v275, v275, 8uLL).u64[0];
        *(int8x8_t *)v290.i8 = vqtbl1_s8(v290, *(int8x8_t *)v270.f32);
        v265.i64[0] = v285.i64[0];
        int8x8_t v291 = vext_s8(*(int8x8_t *)v290.i8, *(int8x8_t *)v285.f32, 4uLL);
        v205.i64[0] = v285.i64[0];
        v205.i64[1] = v290.i64[0];
        v265.i64[1] = v290.i64[0];
        *(int8x8_t *)v290.i8 = vext_s8(*(int8x8_t *)v285.f32, *(int8x8_t *)v290.i8, 4uLL);
        v290.u64[1] = (unint64_t)v291;
        int8x16_t v292 = (int8x16_t)vaddq_f32((float32x4_t)v290, vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v265), v205));
        int8x16_t v293 = (int8x16_t)vmulq_f32(v222, v289);
        *(int8x8_t *)v285.f32 = vqtbl1_s8(v293, *(int8x8_t *)v275.i8);
        *(int8x8_t *)v293.i8 = vqtbl1_s8(v293, *(int8x8_t *)v270.f32);
        v270.i64[0] = v285.i64[0];
        v270.i64[1] = v293.i64[0];
        v265.i64[0] = v285.i64[0];
        v265.i64[1] = v293.i64[0];
        v293.i64[1] = v285.i64[0];
        uint64_t v294 = *((int *)a2 + 22);
        float32x4_t v295 = vsubq_f32((float32x4_t)vbslq_s8(v202, (int8x16_t)vaddq_f32((float32x4_t)v293, vaddq_f32(v270, (float32x4_t)vrev64q_s32((int32x4_t)v265))), v292), v9);
        uint64_t v296 = *((void *)a2 + 10);
        if (v5)
        {
          int32x4_t v297 = vaddq_s32(vcvtq_s32_f32(v295), vcltzq_f32(v295));
          float32x2_t v298 = (float32x2_t)vsubq_f32(v295, vcvtq_f32_s32(v297)).u64[0];
          v299 = (float32x4_t *)(v296 + 16 * (v297.i32[0] + v297.i32[1] * (int)v294));
          float32x4_t v300 = vaddq_f32(*v299, vmulq_n_f32(vsubq_f32(v299[1], *v299), v298.f32[0]));
          float32x4_t v301 = vaddq_f32(v300, vmulq_lane_f32(vsubq_f32(vaddq_f32(v299[v294], vmulq_n_f32(vsubq_f32(v299[(int)v294 + 1], v299[v294]), v298.f32[0])), v300), v298, 1));
        }
        else
        {
          v302.i64[0] = 0x3F0000003F000000;
          v302.i64[1] = 0x3F0000003F000000;
          float32x4_t v303 = vaddq_f32(v295, v302);
          int32x4_t v304 = vcvtq_s32_f32(v303);
          v303.i64[0] = vaddq_s32(v304, vcgtq_f32(vcvtq_f32_s32(v304), v303)).u64[0];
          float32x4_t v301 = *(float32x4_t *)(v296 + 16 * (v303.i32[0] + v303.i32[1] * (int)v294));
        }
        float32x4_t v16 = v199;
        *(float32x4_t *)(v13 + 16 * v17) = v301;
      }
      int8x16_t v12 = (int8x16_t)xmmword_1B7E736C0;
      float32x4_t v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B7E736C0);
      v13 += v14;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSlicedScale::GetDOD(HgcSlicedScale *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    if ((*(int (**)(HgcSlicedScale *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcSlicedScale::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcSlicedScale::HgcSlicedScale(HgcSlicedScale *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10965B0;
  operator new();
}

void sub_1B7554BB8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSlicedScale::~HgcSlicedScale(HGNode *this)
{
  *(void *)this = &unk_1F10965B0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40502CBA4ALL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcSlicedScale::~HgcSlicedScale(this);

  HGObject::operator delete(v1);
}

uint64_t HgcSlicedScale::SetParameter(HgcSlicedScale *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      *uint64_t v7 = a3.n128_f32[0];
      v7[1] = a4;
      double v7[2] = a5;
      void v7[3] = a6;
      goto LABEL_63;
    case 1:
      uint64_t v9 = (__n128 *)*((void *)this + 51);
      if (v9[1].n128_f32[0] == 0.0
        && v9[1].n128_f32[1] == 0.0
        && v9[1].n128_f32[2] == a3.n128_f32[0]
        && v9[1].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v9[1].n128_u64[0] = 0;
      v9[1].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v9[1].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[24] = a3;
      goto LABEL_63;
    case 2:
      uint64_t v10 = (__n128 *)*((void *)this + 51);
      if (v10[2].n128_f32[0] == 0.0
        && v10[2].n128_f32[1] == a3.n128_f32[0]
        && v10[2].n128_f32[2] == 0.0
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = 0;
      v10[2].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v10[2].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[25] = a3;
      goto LABEL_63;
    case 3:
      float32x4_t v11 = (__n128 *)*((void *)this + 51);
      if (v11[3].n128_f32[0] == 0.0
        && v11[3].n128_f32[1] == 0.0
        && v11[3].n128_f32[2] == 0.0
        && v11[3].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v11[3].n128_u64[0] = 0;
      v11[3].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[26] = a3;
      goto LABEL_63;
    case 4:
      int8x16_t v12 = (__n128 *)*((void *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == a3.n128_f32[0]
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[27] = a3;
      goto LABEL_63;
    case 5:
      uint64_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_63;
    case 6:
      uint64_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_63;
    case 7:
      float v15 = (float *)*((void *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6) {
        return 0;
      }
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_63;
    case 8:
      float32x4_t v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_63;
    case 9:
      uint64_t v17 = (float *)*((void *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6) {
        return 0;
      }
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_63;
    case 10:
      int v18 = (float *)*((void *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6) {
        return 0;
      }
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_63;
    case 11:
      float32x4_t v19 = (float *)*((void *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6) {
        return 0;
      }
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
LABEL_63:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t HgcSlicedScale::GetParameter(HgcSlicedScale *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      uint64_t v4 = v3 + 3;
      goto LABEL_14;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[96];
      a3[1] = v5[97];
      a3[2] = v5[98];
      uint64_t v4 = v5 + 99;
      goto LABEL_14;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[100];
      a3[1] = v6[101];
      a3[2] = v6[102];
      uint64_t v4 = v6 + 103;
      goto LABEL_14;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[104];
      a3[1] = v7[105];
      a3[2] = v7[106];
      uint64_t v4 = v7 + 107;
      goto LABEL_14;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[108];
      a3[1] = v8[109];
      a3[2] = v8[110];
      uint64_t v4 = v8 + 111;
      goto LABEL_14;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      uint64_t v4 = v9 + 23;
      goto LABEL_14;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      uint64_t v4 = v10 + 27;
      goto LABEL_14;
    case 7:
      float32x4_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      uint64_t v4 = v11 + 31;
      goto LABEL_14;
    case 8:
      int8x16_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      uint64_t v4 = v12 + 35;
      goto LABEL_14;
    case 9:
      uint64_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      uint64_t v4 = v13 + 39;
      goto LABEL_14;
    case 10:
      uint64_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      uint64_t v4 = v14 + 43;
      goto LABEL_14;
    case 11:
      float v15 = (float *)*((void *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      uint64_t v4 = v15 + 47;
LABEL_14:
      uint64_t result = 0;
      a3[3] = *v4;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

const char *HgcSlicedTile::GetProgram(HgcSlicedTile *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return aMetal10Len0000_12;
    }
    else {
      return aMetal10Len0000_13;
    }
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_3;
  }
}

void HgcSlicedTile::InitProgramDescriptor(HgcSlicedTile *this, HGProgramDescriptor *a2)
{
}

void sub_1B7555370(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E755C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B75554F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7555540()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7555538);
}

void *HgcSlicedTile::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSlicedTile [hgc1]");
}

uint64_t HgcSlicedTile::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 144) + 128))(*(void *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 14, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcSlicedTile::Bind(HgcSlicedTile *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcSlicedTile::RenderTile(HgcSlicedTile *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcSlicedTile *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = 16 * *((int *)a2 + 6);
    float32x4_t v178 = v9;
    float32x4_t v179 = v9;
    do
    {
      if (v10 >= 1)
      {
        uint64_t v13 = 0;
        float32x4_t v14 = v178;
        do
        {
          float v15 = (_OWORD *)*((void *)this + 51);
          int8x16_t v17 = *((int8x16_t *)v15 + 12);
          int8x16_t v16 = *((int8x16_t *)v15 + 13);
          float32x4_t v19 = *((float32x4_t *)v15 + 14);
          int8x16_t v18 = *((int8x16_t *)v15 + 15);
          int8x16_t v20 = (int8x16_t)vsubq_f32(v19, (float32x4_t)vextq_s8(v16, v16, 8uLL));
          int8x16_t v21 = *(int8x16_t *)v15;
          float32x4_t v184 = *((float32x4_t *)v15 + 1);
          int8x16_t v22 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v20, v20, 4uLL), (float32x4_t)vrev64q_s32((int32x4_t)v184));
          int8x16_t v23 = (int8x16_t)vaddq_f32((float32x4_t)v16, v19);
          int8x16_t v182 = *((int8x16_t *)v15 + 2);
          int8x16_t v180 = *((int8x16_t *)v15 + 3);
          int8x16_t v24 = vbslq_s8(v18, (int8x16_t)vmulq_lane_f32(*(float32x4_t *)v15, *(float32x2_t *)v22.i8, 1), (int8x16_t)vrev64q_s32((int32x4_t)vmaxq_f32((float32x4_t)v23, (float32x4_t)v182)));
          float32x4_t v25 = *((float32x4_t *)v15 + 4);
          float32x4_t v183 = *((float32x4_t *)v15 + 5);
          int8x16_t v26 = (int8x16_t)vmulq_f32(v14, v183);
          int8x16_t v27 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)vextq_s8(v26, v26, 4uLL));
          float32x4_t v29 = *((float32x4_t *)v15 + 8);
          int8x16_t v28 = *((int8x16_t *)v15 + 9);
          int8x16_t v31 = *((int8x16_t *)v15 + 16);
          float32x4_t v30 = *((float32x4_t *)v15 + 17);
          float32x4_t v32 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v28), (float32x4_t)v31), v30);
          float32x4_t v33 = vminq_f32(vmaxq_f32(vmulq_f32(v32, vrecpsq_f32((float32x4_t)v28, v32)), (float32x4_t)v31), v30);
          float32x4_t v34 = *((float32x4_t *)v15 + 6);
          float32x4_t v181 = *((float32x4_t *)v15 + 7);
          float32x4_t v35 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vmulq_f32(v181, (float32x4_t)vbslq_s8(v18, (int8x16_t)vmulq_f32(vmulq_f32(v33, vrecpsq_f32((float32x4_t)v28, v33)), (float32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)v27, (float32x4_t)vextq_s8(v27, v27, 8uLL)), v22)), v22)), v22);
          float32x4_t v36 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v17), (float32x4_t)v31), v30);
          float32x4_t v37 = vminq_f32(vmaxq_f32(vmulq_f32(v36, vrecpsq_f32((float32x4_t)v17, v36)), (float32x4_t)v31), v30);
          int8x16_t v38 = vbslq_s8(v18, (int8x16_t)vmulq_f32(vmulq_f32(v37, vrecpsq_f32((float32x4_t)v17, v37)), v35), v22);
          float32x4_t v39 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
          int8x16_t v40 = (int8x16_t)vmulq_lane_f32(v39, *(float32x2_t *)v24.i8, 1);
          float32x4_t v41 = (float32x4_t)vextq_s8(v40, v38, 8uLL);
          v38.i64[1] = v40.i64[1];
          int8x16_t v42 = *((int8x16_t *)v15 + 18);
          int8x16_t v43 = *((int8x16_t *)v15 + 19);
          v40.i64[0] = vandq_s8(v42, (int8x16_t)vcgeq_f32(v41, (float32x4_t)v38)).u64[0];
          v40.i64[1] = v20.i64[1];
          v44.i64[0] = v24.i64[0];
          v44.i64[1] = vandq_s8(v42, (int8x16_t)vcgeq_f32((float32x4_t)v38, (float32x4_t)v24)).u64[0];
          v24.i64[1] = vandq_s8(v31, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v44)), *(float32x4_t *)&v42)).i64[1];
          int8x16_t v45 = vandq_s8(v42, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v40), (float32x4_t)v43));
          int8x16_t v47 = *((int8x16_t *)v15 + 20);
          int8x16_t v46 = *((int8x16_t *)v15 + 21);
          int8x16_t v48 = vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)v24, (float32x4_t)vbslq_s8(v47, vextq_s8(v45, v45, 4uLL), v38)), v38);
          int8x16_t v49 = vbslq_s8(v46, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v48, COERCE_FLOAT(*v15)), (float32x4_t)v48), v48);
          float32x4_t v50 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
          int8x16_t v52 = *((int8x16_t *)v15 + 22);
          int8x16_t v51 = *((int8x16_t *)v15 + 23);
          int8x16_t v53 = vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32(v50, (float32x4_t)v49)), v24);
          int8x16_t v54 = vbslq_s8(v46, (int8x16_t)vminq_f32(v50, (float32x4_t)vbslq_s8(v46, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v53, v53, 4uLL), (float32x4_t)vbslq_s8(v46, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32((float32x4_t)v53, (float32x4_t)v49))), v40)), v40)), v40);
          int32x4_t v55 = (int32x4_t)vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v49, v50)), v24);
          int32x4_t v56 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v54, v54, 8uLL), (float32x4_t)vrev64q_s32(v55)), v49);
          int32x4_t v57 = (int32x4_t)vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v56, (float32x4_t)v43), (int8x16_t)vrev64q_s32(v56), vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL)), v49);
          float32x4_t v58 = (float32x4_t)vrev64q_s32(v57);
          int32x4_t v59 = (int32x4_t)vbslq_s8(v52, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v54, v54, 0xCuLL), (float32x4_t)vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32(v58, (float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL))), v24)), v24);
          int8x16_t v60 = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL);
          int32x4_t v61 = (int32x4_t)vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v59), (float32x4_t)v43), v60, (int8x16_t)v57), v49);
          int8x16_t v62 = vbslq_s8(v18, (int8x16_t)v61, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32(v61), (float32x4_t)v61));
          float32x4_t v63 = (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)v60, v58), v54));
          float32x4_t v64 = vminq_f32(vmaxq_f32(vrecpeq_f32(v63), (float32x4_t)v42), v30);
          float32x4_t v65 = vminq_f32(vmaxq_f32(vmulq_f32(v64, vrecpsq_f32(v63, v64)), (float32x4_t)v42), v30);
          v63.i64[0] = vdupq_laneq_s64((int64x2_t)vmulq_n_f32(vmulq_f32(vmulq_f32(v65, vrecpsq_f32(v63, v65)), (float32x4_t)v62), COERCE_FLOAT(*v15)), 1).u64[0];
          v65.i64[0] = v62.i64[0];
          v65.i64[1] = v63.i64[0];
          int8x16_t v66 = (int8x16_t)vrev64q_s32((int32x4_t)v65);
          float32x4_t v67 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v66));
          int8x16_t v68 = vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)v66, vsubq_f32(v67, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v67, (float32x4_t)v66)))), v54);
          v66.i64[0] = vbslq_s8(v18, v23, (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v68, 1), vmulq_n_f32((float32x4_t)v43, COERCE_FLOAT(*v15)))).u64[0];
          float32x4_t v69 = vmulq_f32(v39, (float32x4_t)v31);
          v60.i64[0] = v66.i64[0];
          v60.i64[1] = v69.i64[1];
          int8x16_t v70 = vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgeq_f32(*((float32x4_t *)v15 + 10), (float32x4_t)v51)), v24);
          float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v60));
          v66.i64[1] = vsubq_f32(v69, vsubq_f32(v71, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v71, *(float32x4_t *)&v60), v43, (int8x16_t)0))).i64[1];
          int32x4_t v72 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v66, (float32x4_t)v51), v66);
          int32x4_t v73 = (int32x4_t)vextq_s8(v68, v68, 0xCuLL);
          v71.i64[0] = v62.i64[0];
          v71.i64[1] = vminq_f32(*(float32x4_t *)&v73, *(float32x4_t *)&v70).i64[1];
          int8x16_t v74 = vandq_s8(v31, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v70, v70, 4uLL)), (float32x4_t)v42));
          v72.i64[1] = vandq_s8(v31, (int8x16_t)vcgtq_f32(*(float32x4_t *)&v51, vnegq_f32((float32x4_t)vrev64q_s32(v72)))).i64[1];
          int32x4_t v75 = (int32x4_t)vbslq_s8(v52, (int8x16_t)vminq_f32(v71, (float32x4_t)vextq_s8(v74, v74, 0xCuLL)), (int8x16_t)v72);
          int8x16_t v76 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v75, (float32x4_t)v51), v51, (int8x16_t)vrev64q_s32(v75));
          v75.i64[1] = v76.i64[1];
          v62.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v71, *(float32x4_t *)&v51), v76, v43).i64[1];
          int8x16_t v77 = vbslq_s8(v18, (int8x16_t)vsubq_f32((float32x4_t)v62, (float32x4_t)v70), v70);
          int8x16_t v78 = vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)v62, (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v77, vmulq_n_f32((float32x4_t)v77, COERCE_FLOAT(*v15))), v77))), v62);
          float32x4_t v79 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v75));
          v71.i64[0] = v78.i64[0];
          v71.i64[1] = vdupq_laneq_s64((int64x2_t)vminq_f32((float32x4_t)v73, (float32x4_t)v78), 1).u64[0];
          v73.i64[0] = v78.i64[0];
          int8x16_t v80 = vbslq_s8(v18, (int8x16_t)v75, (int8x16_t)vsubq_f32((float32x4_t)v75, vsubq_f32(v79, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v79, (float32x4_t)v75)))));
          int8x16_t v81 = vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v71), (float32x4_t)v51), vextq_s8(v80, v80, 8uLL), v68), v54);
          v80.i64[0] = vbslq_s8(v18, (int8x16_t)v75, (int8x16_t)vsubq_f32((float32x4_t)v31, (float32x4_t)vextq_s8(v81, v81, 8uLL))).u64[0];
          int8x16_t v82 = (int8x16_t)vnegq_f32(*((float32x4_t *)v15 + 11));
          float32x4_t v83 = (float32x4_t)vextq_s8(v82, v82, 8uLL);
          v73.i64[1] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(v83, *(float32x2_t *)v81.i8, 1), 1).u64[0];
          int64x2_t v84 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v51, (float32x4_t)vrev64q_s32(v73)), (int8x16_t)vdupq_lane_s64(v80.i64[0], 0), v81);
          int8x16_t v85 = vextq_s8(v21, v21, 0xCuLL);
          *(float32x2_t *)v80.i8 = vmax_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v25.f32);
          *(int32x2_t *)v73.i8 = vrev64_s32(*(int32x2_t *)v80.i8);
          v73.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), *(float *)v80.i32);
          v71.i64[0] = v74.i64[0];
          v71.i64[1] = vdupq_laneq_s64(v84, 1).u64[0];
          float32x4_t v86 = vminq_f32((float32x4_t)v81, (float32x4_t)vextq_s8(v180, v180, 8uLL));
          v81.i64[1] = v86.i64[1];
          v74.i64[1] = v84.i64[1];
          int32x4_t v87 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vmulq_laneq_f32(v39, v86, 2), v81);
          int8x16_t v88 = (int8x16_t)vmulq_f32(v14, v34);
          float32x4_t v89 = vaddq_f32((float32x4_t)v88, (float32x4_t)vextq_s8(v88, v88, 4uLL));
          float32x4_t v90 = (float32x4_t)vextq_s8(v28, v28, 0xCuLL);
          float32x4_t v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v90), (float32x4_t)v42), v30);
          float32x4_t v92 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v90, v91)), (float32x4_t)v42), v30);
          float32x4_t v93 = vmulq_f32(vaddq_f32(v89, (float32x4_t)vdupq_lane_s64(v89.i64[0], 0)), vmulq_f32(v92, vrecpsq_f32(v90, v92)));
          float32x4_t v94 = (float32x4_t)vextq_s8(v17, v17, 0xCuLL);
          float32x4_t v95 = vminq_f32(vmaxq_f32(vrecpeq_f32(v94), (float32x4_t)v42), v30);
          float32x4_t v96 = vminq_f32(vmaxq_f32(vmulq_f32(v95, vrecpsq_f32(v94, v95)), (float32x4_t)v42), v30);
          v97.i64[0] = v78.i64[0];
          int8x16_t v98 = (int8x16_t)vmulq_f32(vmulq_lane_f32(v93, *(float32x2_t *)v29.f32, 1), vmulq_f32(v96, vrecpsq_f32(v94, v96)));
          *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v78.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL), 4uLL);
          int8x16_t v99 = vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v51, (float32x4_t)vrev64q_s32((int32x4_t)v71))), v74);
          v96.i64[0] = vextq_s8(v98, v78, 0xCuLL).u64[0];
          float32x4_t v100 = (float32x4_t)vextq_s8(v98, v78, 8uLL);
          v97.i64[1] = v98.i64[1];
          int8x16_t v101 = vbslq_s8(v47, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v43, (int8x16_t)vcgeq_f32((float32x4_t)v73, v97))), (int8x16_t)v73);
          v94.i64[1] = v96.i64[0];
          int8x16_t v102 = vandq_s8(v43, (int8x16_t)vcgtq_f32(v97, (float32x4_t)v101));
          float32x4_t v103 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL);
          float32x4_t v104 = (float32x4_t)vbslq_s8(v18, vextq_s8(v102, v102, 8uLL), vandq_s8(v31, (int8x16_t)vcgtq_f32(v103, v94)));
          int8x16_t v105 = (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v104), v104);
          int32x4_t v106 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32(v94, v103), v77);
          float32x4_t v107 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL);
          int8x16_t v108 = vbslq_s8(v18, vandq_s8(v42, (int8x16_t)vcgtq_f32(v107, v100)), v101);
          int8x16_t v109 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v42, (float32x4_t)vrev64q_s32(v106)), v42, (int8x16_t)v97), (int8x16_t)v97);
          int8x16_t v110 = vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v101, v97));
          int8x16_t v111 = vextq_s8(v110, v110, 8uLL);
          int8x16_t v112 = vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v108, (float32x4_t)vbslq_s8(v18, vandq_s8(v42, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v108, v108, 0xCuLL)), (float32x4_t)v51)), v99)), v99), (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v18, v111, v105))), v99);
          int8x16_t v113 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v18, v111, (int8x16_t)vminq_f32((float32x4_t)v87, (float32x4_t)vextq_s8(v112, v112, 4uLL))), (float32x4_t)v42), v42, vextq_s8(v112, v112, 8uLL));
          int8x16_t v114 = vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v112, (float32x4_t)vbslq_s8(v18, v111, v113)), v113);
          float32x4_t v115 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v114, v114, 8uLL), (float32x4_t)v51), v108, v109);
          int8x16_t v116 = vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)v106, (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 4uLL)), (int8x16_t)v106);
          v106.i64[0] = v112.i64[0];
          v106.i64[1] = vdupq_laneq_s64((int64x2_t)v115, 1).u64[0];
          v112.i64[1] = v115.i64[1];
          int8x16_t v117 = vbslq_s8(v47, vandq_s8(v31, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v106), (float32x4_t)v87)), v112);
          int32x4_t v118 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v117, v117, 4uLL), (float32x4_t)v117), v112);
          int8x16_t v119 = (int8x16_t)vrev64q_s32(v87);
          v115.i64[0] = v118.i64[0];
          v115.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v118), *(float32x4_t *)&v51), v119, *(int8x16_t *)&v118).i64[1];
          int32x4_t v120 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vsubq_f32(v107, (float32x4_t)vextq_s8(v108, v108, 8uLL)), v113);
          float32x4_t v121 = (float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
          float32x4_t v122 = vminq_f32(vmaxq_f32(vrecpeq_f32(v121), (float32x4_t)v42), v30);
          float32x4_t v123 = vminq_f32(vmaxq_f32(vmulq_f32(v122, vrecpsq_f32(v121, v122)), (float32x4_t)v42), v30);
          float32x4_t v124 = vmulq_lane_f32((float32x4_t)vbslq_s8(v52, (int8x16_t)vmulq_f32(vmulq_f32(v123, vrecpsq_f32(v121, v123)), (float32x4_t)vbslq_s8(v52, (int8x16_t)vsubq_f32(v115, (float32x4_t)v108), v108)), v108), *(float32x2_t *)v15, 1);
          v121.i64[0] = v118.i64[0];
          v121.i64[1] = v124.i64[1];
          float32x4_t v125 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
          int64x2_t v126 = (int64x2_t)vsubq_f32(v121, vsubq_f32(v125, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v125, v121), v43, (int8x16_t)0)));
          int8x16_t v127 = vbslq_s8(v52, (int8x16_t)vmulq_f32((float32x4_t)v85, (float32x4_t)v31), v108);
          float32x4_t v128 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v127));
          int8x16_t v129 = (int8x16_t)vsubq_f32((float32x4_t)v127, vsubq_f32(v128, (float32x4_t)vandq_s8(v43, (int8x16_t)vcgtq_f32(v128, (float32x4_t)v127))));
          v127.i64[0] = v118.i64[0];
          v127.i64[1] = v126.i64[1];
          v128.i64[0] = vdupq_laneq_s64(v126, 1).u64[0];
          float32x4_t v130 = (float32x4_t)vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL);
          v118.i64[1] = v128.i64[0];
          int8x16_t v131 = *((int8x16_t *)v15 + 24);
          int8x16_t v132 = *((int8x16_t *)v15 + 25);
          int32x4_t v133 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32(v118), vmulq_lane_f32(v19, *(float32x2_t *)v15, 1)), v109), (float32x4_t)v131), v109);
          int8x16_t v134 = vbslq_s8(v52, (int8x16_t)vminq_f32(v130, (float32x4_t)v116), v116);
          int8x16_t v135 = vbslq_s8(v46, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v134, v134, 4uLL), (float32x4_t)v127), v127);
          int8x16_t v136 = vextq_s8((int8x16_t)v120, vandq_s8(v31, (int8x16_t)vcgtq_f32((float32x4_t)v120, (float32x4_t)v31)), 0xCuLL);
          int8x16_t v137 = vbslq_s8(v52, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v134, (float32x4_t)v131), vbslq_s8(v52, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v135, v135, 0xCuLL), (float32x4_t)v131), v131, vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v131, vnegq_f32((float32x4_t)vbslq_s8(v52, v129, v108)))), v108)), v108), v43), v116);
          v134.i64[0] = vdupq_laneq_s64((int64x2_t)v136, 1).u64[0];
          v136.i64[0] = v120.i64[0];
          v120.i64[1] = v134.i64[0];
          int32x4_t v138 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vminq_f32(v103, (float32x4_t)vrev64q_s32(v120)), v135);
          v135.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v137, v137, 8uLL), (float32x4_t)v131), (int8x16_t)vrev64q_s32(v133), (int8x16_t)v133).u64[0];
          v135.i64[1] = v133.i64[1];
          float32x4_t v139 = (float32x4_t)vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL);
          float32x4_t v140 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v135));
          v128.i64[0] = v137.i64[0];
          v128.i64[1] = vdupq_laneq_s64((int64x2_t)vminq_f32(v139, (float32x4_t)v137), 1).u64[0];
          int32x4_t v141 = (int32x4_t)vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v128), (float32x4_t)v51), vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)v135, vsubq_f32(v140, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v140, (float32x4_t)v135)))), v135), (int8x16_t)vrev64q_s32(v138)), v135);
          int8x16_t v142 = (int8x16_t)vrev64q_s32(v141);
          v128.i64[0] = v137.i64[0];
          v128.i64[1] = vmulq_n_f32(v83, *(float *)&v138).i64[1];
          int8x16_t v143 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v131, v128), vbslq_s8(v52, (int8x16_t)vsubq_f32((float32x4_t)v43, (float32x4_t)v142), v108), v142);
          v134.i64[0] = v137.i64[0];
          v134.i64[1] = v143.i64[1];
          int8x16_t v144 = vbslq_s8(v52, (int8x16_t)vminq_f32(v139, (float32x4_t)vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v131, (float32x4_t)v134)), v108)), v108);
          v137.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v144, *(float32x4_t *)&v131), v131, v143).i64[1];
          int8x16_t v145 = vextq_s8(v137, v137, 8uLL);
          int8x16_t v146 = vbslq_s8(v18, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v138, (float32x4_t)vbslq_s8(v18, vandq_s8(v42, (int8x16_t)vcgtq_f32((float32x4_t)v145, (float32x4_t)v42)), (int8x16_t)v141)), (int8x16_t)v141), (float32x4_t)v131), v42, v145),
                   (int8x16_t)v141);
          float32x4_t v147 = (float32x4_t)vextq_s8(v144, v144, 0xCuLL);
          int8x16_t v148 = vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v144, v147), v137);
          int8x16_t v149 = (int8x16_t)vsubq_f32(v147, vmulq_lane_f32((float32x4_t)v85, *(float32x2_t *)v144.i8, 1));
          float32x4_t v150 = (float32x4_t)vbslq_s8(v18, (int8x16_t)v138, vbslq_s8((int8x16_t)vcgtq_f32(v139, (float32x4_t)v131), v31, v136));
          int32x4_t v151 = (int32x4_t)vsubq_f32(v184, (float32x4_t)v182);
          int8x16_t v152 = vbslq_s8(v47, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v182, v182, 4uLL), vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 4uLL), *(float32x2_t *)v150.f32, 1)), v146);
          int8x16_t v153 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v87, (float32x4_t)v131), vextq_s8(v152, v152, 8uLL), v152), v152);
          float32x4_t v154 = (float32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32(vmulq_laneq_f32(v39, (float32x4_t)v87, 2), (float32x4_t)v119), v153);
          int8x16_t v155 = vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v154), v154), v153);
          v154.i64[0] = v148.i64[0];
          v154.i64[1] = v149.i64[1];
          int8x16_t v156 = vbslq_s8(v52, (int8x16_t)vaddq_f32(v154, (float32x4_t)v155), v155);
          float32x4_t v157 = (float32x4_t)vextq_s8(v149, v148, 8uLL);
          int8x16_t v158 = vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v51, v157), v51, v156), v156);
          int32x4_t v159 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32(v25, vmulq_f32(vsubq_f32((float32x4_t)v180, v25), (float32x4_t)v158)), v158);
          v159.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v157, *(float32x4_t *)&v131), *(int8x16_t *)&v159, (int8x16_t)vrev64q_s32(v159)).i64[1];
          int8x16_t v160 = vbslq_s8(v46, (int8x16_t)vmulq_n_f32((float32x4_t)v159, *(float *)v28.i32), (int8x16_t)v159);
          v150.i64[0] = vbslq_s8(v18, (int8x16_t)vmulq_lane_f32((float32x4_t)vbslq_s8(v18, vbslq_s8((int8x16_t)vcgtq_f32(v150, (float32x4_t)v131), v160, vextq_s8(v160, v160, 8uLL)), v160), *(float32x2_t *)v28.i8, 1), v160).u64[0];
          int8x16_t v161 = (int8x16_t)vmulq_lane_f32(v183, *(float32x2_t *)v150.f32, 1);
          v161.i32[3] = 1.0;
          float32x4_t v162 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vmulq_n_f32(v34, v150.f32[0]), v161);
          int8x16_t v163 = (int8x16_t)vmulq_f32(v29, v162);
          *(int8x8_t *)v157.f32 = vqtbl1_s8(v163, *(int8x8_t *)v132.i8);
          v154.i64[0] = vextq_s8(v132, v132, 8uLL).u64[0];
          *(int8x8_t *)v163.i8 = vqtbl1_s8(v163, *(int8x8_t *)v154.f32);
          v151.i64[0] = v157.i64[0];
          *(int8x8_t *)v149.i8 = vext_s8(*(int8x8_t *)v163.i8, *(int8x8_t *)v157.f32, 4uLL);
          v144.i64[0] = v157.i64[0];
          v144.i64[1] = v163.i64[0];
          v151.i64[1] = v163.i64[0];
          *(int8x8_t *)v163.i8 = vext_s8(*(int8x8_t *)v157.f32, *(int8x8_t *)v163.i8, 4uLL);
          v163.i64[1] = v149.i64[0];
          int8x16_t v164 = (int8x16_t)vaddq_f32((float32x4_t)v163, vaddq_f32((float32x4_t)vrev64q_s32(v151), (float32x4_t)v144));
          int8x16_t v165 = (int8x16_t)vmulq_f32(v181, v162);
          *(int8x8_t *)v157.f32 = vqtbl1_s8(v165, *(int8x8_t *)v132.i8);
          *(int8x8_t *)v165.i8 = vqtbl1_s8(v165, *(int8x8_t *)v154.f32);
          v154.i64[0] = v157.i64[0];
          v154.i64[1] = v165.i64[0];
          v151.i64[0] = v157.i64[0];
          v151.i64[1] = v165.i64[0];
          v165.i64[1] = v157.i64[0];
          uint64_t v166 = *((int *)a2 + 22);
          float32x4_t v167 = vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)v165, vaddq_f32(v154, (float32x4_t)vrev64q_s32(v151))), v164), v179);
          uint64_t v168 = *((void *)a2 + 10);
          if (v5)
          {
            int32x4_t v169 = vaddq_s32(vcvtq_s32_f32(v167), vcltzq_f32(v167));
            float32x2_t v170 = (float32x2_t)vsubq_f32(v167, vcvtq_f32_s32(v169)).u64[0];
            float32x4_t v171 = (float32x4_t *)(v168 + 16 * (v169.i32[0] + v169.i32[1] * (int)v166));
            float32x4_t v172 = vaddq_f32(*v171, vmulq_n_f32(vsubq_f32(v171[1], *v171), v170.f32[0]));
            float32x4_t v173 = vaddq_f32(v172, vmulq_lane_f32(vsubq_f32(vaddq_f32(v171[v166], vmulq_n_f32(vsubq_f32(v171[(int)v166 + 1], v171[v166]), v170.f32[0])), v172), v170, 1));
          }
          else
          {
            v174.i64[0] = 0x3F0000003F000000;
            v174.i64[1] = 0x3F0000003F000000;
            float32x4_t v175 = vaddq_f32(v167, v174);
            int32x4_t v176 = vcvtq_s32_f32(v175);
            v175.i64[0] = vaddq_s32(v176, vcgtq_f32(vcvtq_f32_s32(v176), v175)).u64[0];
            float32x4_t v173 = *(float32x4_t *)(v168 + 16 * (v175.i32[0] + v175.i32[1] * (int)v166));
          }
          *(float32x4_t *)(v11 + v13) = v173;
          float32x4_t v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736B0);
          v13 += 16;
        }
        while (16 * v10 != v13);
      }
      float32x4_t v178 = vaddq_f32(v178, (float32x4_t)xmmword_1B7E736C0);
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSlicedTile::GetDOD(HgcSlicedTile *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    if ((*(int (**)(HgcSlicedTile *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcSlicedTile::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcSlicedTile::HgcSlicedTile(HgcSlicedTile *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1096818;
  operator new();
}

void sub_1B7556728(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSlicedTile::~HgcSlicedTile(HGNode *this)
{
  *(void *)this = &unk_1F1096818;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4003455651);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcSlicedTile::~HgcSlicedTile(this);

  HGObject::operator delete(v1);
}

uint64_t HgcSlicedTile::SetParameter(HgcSlicedTile *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      *uint64_t v7 = a3.n128_f32[0];
      v7[1] = a4;
      double v7[2] = a5;
      void v7[3] = a6;
      goto LABEL_73;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      unsigned char v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      _OWORD v9[6] = a5;
      v9[7] = a6;
      goto LABEL_73;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_73;
    case 3:
      uint64_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_73;
    case 4:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_73;
    case 5:
      uint64_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_73;
    case 6:
      float32x4_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_73;
    case 7:
      float v15 = (float *)*((void *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6) {
        return 0;
      }
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_73;
    case 8:
      int8x16_t v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_73;
    case 9:
      int8x16_t v17 = (float *)*((void *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6) {
        return 0;
      }
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_73;
    case 10:
      float v18 = -fabsf(a3.n128_f32[0]);
      float32x4_t v19 = (__n128 *)*((void *)this + 51);
      if (v19[10].n128_f32[0] == 0.0
        && v19[10].n128_f32[1] == 0.0
        && v19[10].n128_f32[2] == v18
        && v19[10].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v19[10].n128_u64[0] = 0;
      v19[10].n128_f32[2] = v18;
      a3.n128_f32[1] = a4;
      v19[10].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v19[26] = a3;
      goto LABEL_73;
    case 11:
      int8x16_t v20 = (float *)*((void *)this + 51);
      if (v20[44] == a3.n128_f32[0] && v20[45] == a4 && v20[46] == a5 && v20[47] == a6) {
        return 0;
      }
      v20[44] = a3.n128_f32[0];
      v20[45] = a4;
      v20[46] = a5;
      v20[47] = a6;
      goto LABEL_73;
    case 12:
      int8x16_t v21 = (float *)*((void *)this + 51);
      if (v21[48] == a3.n128_f32[0] && v21[49] == a4 && v21[50] == a5 && v21[51] == a6) {
        return 0;
      }
      v21[48] = a3.n128_f32[0];
      v21[49] = a4;
      v21[50] = a5;
      v21[51] = a6;
      goto LABEL_73;
    case 13:
      int8x16_t v22 = (float *)*((void *)this + 51);
      if (v22[52] == a3.n128_f32[0] && v22[53] == a4 && v22[54] == a5 && v22[55] == a6) {
        return 0;
      }
      v22[52] = a3.n128_f32[0];
      v22[53] = a4;
      v22[54] = a5;
      v22[55] = a6;
LABEL_73:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSlicedTile::GetParameter(HgcSlicedTile *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      uint64_t v4 = v3 + 3;
      goto LABEL_16;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      uint64_t v4 = v5 + 7;
      goto LABEL_16;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      uint64_t v4 = v6 + 11;
      goto LABEL_16;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      uint64_t v4 = v7 + 15;
      goto LABEL_16;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      uint64_t v4 = v8 + 19;
      goto LABEL_16;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      uint64_t v4 = v9 + 23;
      goto LABEL_16;
    case 6:
      uint64_t v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      uint64_t v4 = v10 + 27;
      goto LABEL_16;
    case 7:
      uint64_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      uint64_t v4 = v11 + 31;
      goto LABEL_16;
    case 8:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      uint64_t v4 = v12 + 35;
      goto LABEL_16;
    case 9:
      uint64_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      uint64_t v4 = v13 + 39;
      goto LABEL_16;
    case 10:
      float32x4_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[104];
      a3[1] = v14[105];
      a3[2] = v14[106];
      uint64_t v4 = v14 + 107;
      goto LABEL_16;
    case 11:
      float v15 = (float *)*((void *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      uint64_t v4 = v15 + 47;
      goto LABEL_16;
    case 12:
      int8x16_t v16 = (float *)*((void *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      uint64_t v4 = v16 + 51;
      goto LABEL_16;
    case 13:
      int8x16_t v17 = (float *)*((void *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      uint64_t v4 = v17 + 55;
LABEL_16:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcColorAndGradientStroke::GetProgram(HgcColorAndGradientStroke *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000007ff\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.CGFloat y = half(half(hg_Params[0].x) < r0.x);\n"
             "    r0.w = half(half(hg_Params[0].y) >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.z = half(hg_Params[0].y) - half(hg_Params[0].x);\n"
             "    r0.CGFloat y = r0.z*half(hg_Params[0].w);\n"
             "    CGFloat r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    CGFloat r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000h);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + half(hg_Params[0].y);\n"
             "    r0.w = -r0.z*half(hg_Params[1].x) + r0.w;\n"
             "    r2.CGFloat x = half(hg_Params[0].x) - r0.y;\n"
             "    r0.z = r0.z*half(hg_Params[1].y) + r2.x;\n"
             "    r2.xCGFloat y = half2(r0.zx >= r0.xw);\n"
             "    r2.CGFloat x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.CGFloat y = 1.00000h / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000h);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.CGFloat y = r0.z + r0.y;\n"
             "    r3.CGFloat x = half(r0.x < r1.w);\n"
             "    r0.z = half(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.CGFloat y = half(r0.y >= r0.x);\n"
             "    r1.w = half(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.CGFloat x = half(-r2.x >= c0.x);\n"
             "    r0.z = half(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.CGFloat y = fmin(r0.z, r0.y);\n"
             "    r0.CGFloat y = select(r2.z, r2.w, -r0.y < 0.00000h);\n"
             "    r0.CGFloat x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000h);\n"
             "    r1.w = pow(r1.w, half(hg_Params[0].z));\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=7ea8a260:fb019ba9:e5fc926e:40b5962c\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000007ba\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.CGFloat y = float(hg_Params[0].x < r0.x);\n"
             "    r0.w = float(hg_Params[0].y >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
             "    r0.CGFloat y = r0.z*hg_Params[0].w;\n"
             "    CGFloat r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    CGFloat r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + hg_Params[0].y;\n"
             "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
             "    r2.CGFloat x = hg_Params[0].x - r0.y;\n"
             "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
             "    r2.xCGFloat y = float2(r0.zx >= r0.xw);\n"
             "    r2.CGFloat x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.CGFloat y = 1.00000f / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.CGFloat y = r0.z + r0.y;\n"
             "    r3.CGFloat x = float(r0.x < r1.w);\n"
             "    r0.z = float(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.CGFloat y = float(r0.y >= r0.x);\n"
             "    r1.w = float(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.CGFloat x = float(-r2.x >= c0.x);\n"
             "    r0.z = float(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.CGFloat y = fmin(r0.z, r0.y);\n"
             "    r0.CGFloat y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
             "    r0.CGFloat x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
             "    r1.w = pow(r1.w, hg_Params[0].z);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e34a4054:e6495867:d6bd89f9:dc9d02a3\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007fc\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.CGFloat x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.CGFloat y = float(hg_ProgramLocal0.x < r0.x);\n"
           "    r0.w = float(hg_ProgramLocal0.y >= r0.x);\n"
           "    r0.w = min(r0.y, r0.w);\n"
           "    r0.z = hg_ProgramLocal0.y - hg_ProgramLocal0.x;\n"
           "    r0.CGFloat y = r0.z*hg_ProgramLocal0.w;\n"
           "    CGFloat r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    CGFloat r1 = vec4(-r0.w < 0.00000 ? r1.x : c0.x, -r0.w < 0.00000 ? r1.y : c0.x, -r0.w < 0.00000 ? r1.z : c0.x, -r"
           "0.w < 0.00000 ? r1.w : c0.x);\n"
           "    r0.z = r0.z + r0.y;\n"
           "    r0.w = r0.y + hg_ProgramLocal0.y;\n"
           "    r0.w = -r0.z*hg_ProgramLocal1.x + r0.w;\n"
           "    r2.CGFloat x = hg_ProgramLocal0.x - r0.y;\n"
           "    r0.z = r0.z*hg_ProgramLocal1.y + r2.x;\n"
           "    r2.xCGFloat y = vec2(greaterThanEqual(r0.zx, r0.xw));\n"
           "    r2.CGFloat x = max(r2.x, r2.y);\n"
           "    r2.z = r0.x - r0.z;\n"
           "    r2.CGFloat y = 1.00000 / r0.y;\n"
           "    r2.w = r2.z*r2.y;\n"
           "    r2.z = -r2.x < 0.00000 ? c0.x : r1.w;\n"
           "    r1.w = r0.w - r0.y;\n"
           "    r0.CGFloat y = r0.z + r0.y;\n"
           "    r3.CGFloat x = float(r0.x < r1.w);\n"
           "    r0.z = float(r0.y < r0.x);\n"
           "    r0.w = r0.w - r0.x;\n"
           "    r0.z = min(r0.z, r3.x);\n"
           "    r0.CGFloat y = float(r0.y >= r0.x);\n"
           "    r1.w = float(r0.x >= r1.w);\n"
           "    r2.w = r2.z*r2.w;\n"
           "    r2.CGFloat x = float(-r2.x >= c0.x);\n"
           "    r0.z = float(-r0.z >= c0.x);\n"
           "    r0.zw = r2.xy*r0.zw;\n"
           "    r0.CGFloat y = min(r0.z, r0.y);\n"
           "    r0.CGFloat y = -r0.y < 0.00000 ? r2.w : r2.z;\n"
           "    r0.CGFloat x = r0.y*r0.w;\n"
           "    r1.w = min(r0.z, r1.w);\n"
           "    r1.w = -r1.w < 0.00000 ? r0.x : r0.y;\n"
           "    r1.w = pow(r1.w, hg_ProgramLocal0.z);\n"
           "    r1.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=dd2282e2:5a8e8dd1:40c1b0d2:633ea21e\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcColorAndGradientStroke::InitProgramDescriptor(HgcColorAndGradientStroke *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorAndGradientStroke_hgc_visible", "//Metal1.0     \n//LEN=0000000622\n[[ visible ]] FragmentOut HgcColorAndGradientStroke_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.CGFloat x = color0.x;\n"
    "    r0.CGFloat y = float(hg_Params[0].x < r0.x);\n"
    "    r0.w = float(hg_Params[0].y >= r0.x);\n"
    "    r0.w = fmin(r0.y, r0.w);\n"
    "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
    "    r0.CGFloat y = r0.z*hg_Params[0].w;\n"
    "    CGFloat r1 = color1;\n"
    "    CGFloat r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
    "    r0.z = r0.z + r0.y;\n"
    "    r0.w = r0.y + hg_Params[0].y;\n"
    "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
    "    r2.CGFloat x = hg_Params[0].x - r0.y;\n"
    "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
    "    r2.xCGFloat y = float2(r0.zx >= r0.xw);\n"
    "    r2.CGFloat x = fmax(r2.x, r2.y);\n"
    "    r2.z = r0.x - r0.z;\n"
    "    r2.CGFloat y = 1.00000f / r0.y;\n"
    "    r2.w = r2.z*r2.y;\n"
    "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
    "    r1.w = r0.w - r0.y;\n"
    "    r0.CGFloat y = r0.z + r0.y;\n"
    "    r3.CGFloat x = float(r0.x < r1.w);\n"
    "    r0.z = float(r0.y < r0.x);\n"
    "    r0.w = r0.w - r0.x;\n"
    "    r0.z = fmin(r0.z, r3.x);\n"
    "    r0.CGFloat y = float(r0.y >= r0.x);\n"
    "    r1.w = float(r0.x >= r1.w);\n"
    "    r2.w = r2.z*r2.w;\n"
    "    r2.CGFloat x = float(-r2.x >= c0.x);\n"
    "    r0.z = float(-r0.z >= c0.x);\n"
    "    r0.zw = r2.xy*r0.zw;\n"
    "    r0.CGFloat y = fmin(r0.z, r0.y);\n"
    "    r0.CGFloat y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
    "    r0.CGFloat x = r0.y*r0.w;\n"
    "    r1.w = fmin(r0.z, r1.w);\n"
    "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
    "    r1.w = pow(r1.w, hg_Params[0].z);\n"
    "    r1.xyz = r1.xyz*r1.www;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcColorAndGradientStroke");
}

void sub_1B7556F84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75630;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B75570C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B755710C()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7557104);
}

void *HgcColorAndGradientStroke::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorAndGradientStroke [hgc1]");
}

uint64_t HgcColorAndGradientStroke::BindTexture(HgcColorAndGradientStroke *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    uint64_t v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    uint64_t v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcColorAndGradientStroke::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcColorAndGradientStroke::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 96);
    uint64_t v7 = 16 * *(int *)(a2 + 88);
    uint64_t v8 = *(void *)(a2 + 80);
    uint64_t v9 = 16 * *(int *)(a2 + 24);
    uint64_t v10 = 16 * *(int *)(a2 + 104);
    do
    {
      if (v4 < 2)
      {
        unsigned int v152 = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 16;
        do
        {
          uint64_t v13 = *(void *)(a1 + 408);
          int8x16_t v14 = *(int8x16_t *)v13;
          int8x16_t v15 = *(int8x16_t *)(v13 + 16);
          int8x16_t v17 = *(int8x16_t *)(v13 + 32);
          int8x16_t v16 = *(int8x16_t *)(v13 + 48);
          int8x16_t v18 = vbslq_s8(v16, *(int8x16_t *)(v8 + v12 - 16), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13))));
          int8x16_t v19 = vbslq_s8(v16, *(int8x16_t *)(v8 + v12), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13))));
          float32x4_t v20 = (float32x4_t)vextq_s8(v14, v14, 8uLL);
          int8x16_t v21 = vandq_s8(v17, (int8x16_t)vcgeq_f32(v20, (float32x4_t)vextq_s8(v18, v18, 4uLL)));
          int8x16_t v22 = vandq_s8(v17, (int8x16_t)vcgeq_f32(v20, (float32x4_t)vextq_s8(v19, v19, 4uLL)));
          v23.i64[0] = v18.i64[0];
          v23.i64[1] = v21.i64[1];
          v24.i64[0] = v19.i64[0];
          v24.i64[1] = v22.i64[1];
          v18.i64[1] = vminq_f32((float32x4_t)vextq_s8(v21, v18, 8uLL), v23).i64[1];
          v19.i64[1] = vminq_f32((float32x4_t)vextq_s8(v22, v19, 8uLL), v24).i64[1];
          int8x16_t v25 = *(int8x16_t *)(v13 + 64);
          int8x16_t v26 = *(int8x16_t *)(v13 + 80);
          int8x16_t v27 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v14, v14, 0xCuLL), v20);
          float32x4_t v28 = (float32x4_t)vbslq_s8(v25, v27, v18);
          float32x4_t v29 = (float32x4_t)vbslq_s8(v25, v27, v19);
          float32x4_t v30 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_laneq_f32(v20, v28, 2), (int8x16_t)v28);
          float32x4_t v31 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_laneq_f32(v20, v29, 2), (int8x16_t)v29);
          float32x4_t v32 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3);
          float32x4_t v33 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3);
          v30.i64[1] = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v13, *(int8x16_t *)&v30, 0xCuLL), v30).i64[1];
          v31.i64[1] = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v13, *(int8x16_t *)&v31, 0xCuLL), v31).i64[1];
          int8x16_t v34 = (int8x16_t)vaddq_f32(*(float32x4_t *)v13, v30);
          int8x16_t v35 = (int8x16_t)vaddq_f32(*(float32x4_t *)v13, v31);
          int8x16_t v36 = vextq_s8(v34, v34, 8uLL);
          int8x16_t v37 = vextq_s8(v35, v35, 8uLL);
          float32x4_t v39 = *(float32x4_t *)(v13 + 96);
          int8x16_t v38 = *(int8x16_t *)(v13 + 112);
          float32x4_t v40 = (float32x4_t)vbslq_s8(v38, v36, (int8x16_t)v30);
          float32x4_t v41 = (float32x4_t)vbslq_s8(v38, v37, (int8x16_t)v31);
          float32x4_t v42 = (float32x4_t)vextq_s8(v15, v15, 4uLL);
          float32x4_t v43 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v40, vmulq_laneq_f32(v42, v40, 2)), (int8x16_t)v30);
          float32x4_t v44 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v41, vmulq_laneq_f32(v42, v41, 2)), (int8x16_t)v31);
          int8x16_t v45 = (int8x16_t)vsubq_f32(*(float32x4_t *)v13, (float32x4_t)vrev64q_s32((int32x4_t)v43));
          int8x16_t v46 = (int8x16_t)vsubq_f32(*(float32x4_t *)v13, (float32x4_t)vrev64q_s32((int32x4_t)v44));
          int8x16_t v47 = (int8x16_t)vaddq_f32(vmulq_lane_f32(v43, *(float32x2_t *)v15.i8, 1), (float32x4_t)vextq_s8(v45, v45, 8uLL));
          int8x16_t v48 = (int8x16_t)vaddq_f32(vmulq_lane_f32(v44, *(float32x2_t *)v15.i8, 1), (float32x4_t)vextq_s8(v46, v46, 8uLL));
          float32x4_t v49 = (float32x4_t)vbslq_s8(v25, v47, (int8x16_t)v43);
          float32x4_t v50 = (float32x4_t)vbslq_s8(v25, v48, (int8x16_t)v44);
          int32x4_t v51 = *(int32x4_t *)(v13 + 128);
          int8x16_t v52 = *(int8x16_t *)(v13 + 144);
          *(int8x8_t *)v53.f32 = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v51.i8);
          v48.i64[0] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
          *(int8x8_t *)&v53.u32[2] = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v48.i8);
          *(int8x8_t *)v54.f32 = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v51.i8);
          *(int8x8_t *)&v54.u32[2] = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v48.i8);
          int8x16_t v55 = (int8x16_t)vcgtq_f32(v32, v39);
          *(int8x8_t *)v32.f32 = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v52.i8);
          v44.i64[0] = vextq_s8(v52, v52, 8uLL).u64[0];
          *(int8x8_t *)&v32.u32[2] = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v44.f32);
          *(int8x8_t *)v56.f32 = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v52.i8);
          *(int8x8_t *)&v56.u32[2] = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v44.f32);
          int32x4_t v57 = (int32x4_t)vbslq_s8(v55, *(int8x16_t *)(v6 + v12 - 16), (int8x16_t)v39);
          int32x4_t v58 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v39), *(int8x16_t *)(v6 + v12), (int8x16_t)v39);
          float32x4_t v59 = (float32x4_t)vandq_s8(v17, (int8x16_t)vcgeq_f32(v32, v53));
          float32x4_t v60 = (float32x4_t)vandq_s8(v17, (int8x16_t)vcgeq_f32(v56, v54));
          float32x4_t v61 = (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL);
          float32x4_t v62 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL);
          v53.i64[0] = vmaxq_f32(v59, (float32x4_t)vrev64q_s32((int32x4_t)v59)).u64[0];
          float32x4_t v64 = *(float32x4_t *)(v13 + 160);
          float32x4_t v63 = *(float32x4_t *)(v13 + 176);
          v60.i64[0] = vmaxq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)v60)).u64[0];
          v53.i64[1] = vsubq_f32(v61, v49).i64[1];
          float32x4_t v65 = *(float32x4_t *)(v13 + 192);
          float32x4_t v66 = *(float32x4_t *)(v13 + 208);
          float32x4_t v67 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v49), v64), v63), v65);
          float32x4_t v68 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v50), v64), v63), v65);
          v60.i64[1] = vsubq_f32(v62, v50).i64[1];
          float32x4_t v69 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_f32(v67, vrecpsq_f32(v49, v67)), (int8x16_t)v53);
          float32x4_t v70 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_f32(v68, vrecpsq_f32(v50, v68)), (int8x16_t)v60);
          int8x16_t v71 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v69.i64[0], 0), v69, 2);
          int8x16_t v72 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v70.i64[0], 0), v70, 2);
          float32x4_t v73 = (float32x4_t)vextq_s8(v71, (int8x16_t)v69, 8uLL);
          float32x4_t v74 = (float32x4_t)vextq_s8(v72, (int8x16_t)v70, 8uLL);
          float32x4_t v75 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v49, v61), (int8x16_t)v57);
          float32x4_t v76 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v50, v62), (int8x16_t)v58);
          v69.i64[1] = v71.i64[1];
          float32x4_t v77 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL), v49), (int8x16_t)v49);
          float32x4_t v78 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL), v50), (int8x16_t)v50);
          v70.i64[1] = v72.i64[1];
          float32x4_t v79 = (float32x4_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 0xCuLL), v77);
          float32x4_t v80 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL))), (int8x16_t)v77);
          int8x16_t v81 = (int8x16_t)vcgtq_f32(v74, v63);
          int8x16_t v82 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 0xCuLL), v78);
          float32x4_t v83 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL))), (int8x16_t)v78);
          float32x4_t v84 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v80, (float32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL)), (int8x16_t)v80);
          float32x4_t v85 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL)), (int8x16_t)v83);
          int8x16_t v86 = vandq_s8((int8x16_t)v63, (int8x16_t)v79);
          int8x16_t v87 = vandq_s8((int8x16_t)v63, v82);
          float32x4_t v88 = (float32x4_t)vbslq_s8(v25, vbslq_s8((int8x16_t)vcgtq_f32(v73, v63), (int8x16_t)v63, (int8x16_t)vrev64q_s32(v57)), (int8x16_t)v69);
          float32x4_t v89 = (float32x4_t)vbslq_s8(v25, (int8x16_t)vminq_f32(v84, (float32x4_t)vextq_s8(v86, v86, 8uLL)), (int8x16_t)v84);
          float32x4_t v90 = (float32x4_t)vbslq_s8(v25, (int8x16_t)vminq_f32(v85, (float32x4_t)vextq_s8(v87, v87, 8uLL)), (int8x16_t)v85);
          float32x4_t v91 = (float32x4_t)vbslq_s8(v25, vbslq_s8(v81, (int8x16_t)v63, (int8x16_t)vrev64q_s32(v58)), (int8x16_t)v70);
          float32x4_t v92 = (float32x4_t)vbslq_s8(v26, vandq_s8(v17, (int8x16_t)vcgeq_f32(v89, (float32x4_t)vrev64q_s32((int32x4_t)v89))), (int8x16_t)v89);
          float32x4_t v93 = (float32x4_t)vbslq_s8(v26, vandq_s8(v17, (int8x16_t)vcgeq_f32(v90, (float32x4_t)vrev64q_s32((int32x4_t)v90))), (int8x16_t)v90);
          int8x16_t v94 = vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v75));
          int8x16_t v95 = vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76));
          float32x4_t v96 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vmulq_laneq_f32(v88, v88, 2), (int8x16_t)v88);
          float32x4_t v97 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vmulq_laneq_f32(v91, v91, 2), (int8x16_t)v91);
          float32x4_t v98 = (float32x4_t)vbslq_s8(v16, vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32(vnegq_f32(v96), v64)), (int8x16_t)v96);
          int8x16_t v99 = vbslq_s8(v16, vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32(vnegq_f32(v97), v64)), (int8x16_t)v97);
          float32x4_t v100 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgeq_f32(vnegq_f32(v92), v63)), (int8x16_t)v92);
          float32x4_t v101 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgeq_f32(vnegq_f32(v93), v63)), (int8x16_t)v93);
          float32x4_t v102 = (float32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL);
          float32x4_t v103 = (float32x4_t)vextq_s8(v99, v99, 8uLL);
          int8x16_t v104 = (int8x16_t)vmulq_f32(v102, v100);
          int8x16_t v105 = (int8x16_t)vmulq_f32(v103, v101);
          v86.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          v73.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
          *(int8x8_t *)v106.f32 = vext_s8(*(int8x8_t *)v100.f32, *(int8x8_t *)v86.i8, 4uLL);
          v106.i64[1] = vextq_s8(v104, (int8x16_t)v100, 0xCuLL).u64[0];
          *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v101.f32, *(int8x8_t *)v73.f32, 4uLL);
          v79.i64[1] = vextq_s8(v105, (int8x16_t)v101, 0xCuLL).u64[0];
          v100.i64[1] = v104.i64[1];
          v101.i64[1] = v105.i64[1];
          v100.i64[0] = vminq_f32(v106, v100).u64[0];
          v101.i64[0] = vminq_f32(v79, v101).u64[0];
          v100.i64[1] = v104.i64[1];
          v101.i64[1] = v105.i64[1];
          int8x16_t v107 = (int8x16_t)vcgtq_f32(v101, v39);
          int8x16_t v108 = vbslq_s8((int8x16_t)vcgtq_f32(v100, v39), (int8x16_t)v102, vextq_s8((int8x16_t)v98, *(int8x16_t *)v13, 4uLL));
          int8x16_t v109 = vbslq_s8(v107, (int8x16_t)v103, vextq_s8(v99, *(int8x16_t *)v13, 4uLL));
          v100.i64[0] = vextq_s8(v104, v108, 0xCuLL).u64[0];
          *(int8x8_t *)&v100.u32[2] = vext_s8(*(int8x8_t *)v108.i8, *(int8x8_t *)v86.i8, 4uLL);
          v98.i64[0] = vextq_s8(v105, v109, 0xCuLL).u64[0];
          *(int8x8_t *)&v98.u32[2] = vext_s8(*(int8x8_t *)v109.i8, *(int8x8_t *)v73.f32, 4uLL);
          v108.i64[1] = v104.i64[1];
          v109.i64[1] = v105.i64[1];
          int32x4_t v110 = (int32x4_t)vbslq_s8(v16, (int8x16_t)vmulq_lane_f32(v100, *(float32x2_t *)v108.i8, 1), v108);
          int32x4_t v111 = (int32x4_t)vbslq_s8(v16, (int8x16_t)vmulq_lane_f32(v98, *(float32x2_t *)v109.i8, 1), v109);
          float32x4_t v112 = (float32x4_t)vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v38, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v110), (float32x4_t)vbslq_s8(v38, v94, (int8x16_t)v57)), (int8x16_t)v57), v64), vextq_s8((int8x16_t)v110, (int8x16_t)v110, 4uLL), vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL)), (int8x16_t)v57);
          float32x4_t v113 = (float32x4_t)vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v38, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v111), (float32x4_t)vbslq_s8(v38, v95, (int8x16_t)v58)), (int8x16_t)v58), v64), vextq_s8((int8x16_t)v111, (int8x16_t)v111, 4uLL), vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL)), (int8x16_t)v58);
          float32x4_t v114 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v112, v52), (int8x16_t)v63);
          int8x16_t v115 = *(int8x16_t *)(v13 + 224);
          float32x4_t v116 = *(float32x4_t *)(v13 + 240);
          float32x4_t v117 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v113, v52), (int8x16_t)v63);
          float32x4_t v118 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v112, 0x17uLL)), (float32x4_t)vandq_s8(v115, (int8x16_t)vcgtq_f32(v66, v112))), v116);
          float32x4_t v119 = *(float32x4_t *)(v13 + 256);
          float32x4_t v120 = *(float32x4_t *)(v13 + 272);
          float32x4_t v121 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v113, 0x17uLL)), (float32x4_t)vandq_s8(v115, (int8x16_t)vcgtq_f32(v66, v113))), v116);
          float32x4_t v122 = (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v114, v119));
          float32x4_t v123 = (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v117, v119));
          float32x4_t v124 = vsubq_f32(vsubq_f32(v114, v63), vmulq_f32(vmulq_f32(v120, v122), v114));
          float32x4_t v125 = vsubq_f32(vsubq_f32(v117, v63), vmulq_f32(vmulq_f32(v120, v123), v117));
          float32x4_t v126 = *(float32x4_t *)(v13 + 288);
          float32x4_t v127 = *(float32x4_t *)(v13 + 304);
          float32x4_t v128 = vaddq_f32(v126, vmulq_f32(v127, v124));
          float32x4_t v129 = vaddq_f32(v126, vmulq_f32(v127, v125));
          float32x4_t v131 = *(float32x4_t *)(v13 + 320);
          float32x4_t v130 = *(float32x4_t *)(v13 + 336);
          float32x4_t v132 = vmulq_laneq_f32(vaddq_f32(vaddq_f32(v118, v122), vmulq_f32(v124, vaddq_f32(vaddq_f32(v131, vmulq_f32(v130, v124)), vmulq_f32(vmulq_f32(v124, v124), v128)))), *(float32x4_t *)v13, 2);
          float32x4_t v133 = vmulq_laneq_f32(vaddq_f32(vaddq_f32(v121, v123), vmulq_f32(v125, vaddq_f32(vaddq_f32(v131, vmulq_f32(v130, v125)), vmulq_f32(vmulq_f32(v125, v125), v129)))), *(float32x4_t *)v13, 2);
          float32x4_t v134 = *(float32x4_t *)(v13 + 352);
          float32x4_t v135 = *(float32x4_t *)(v13 + 368);
          float32x4_t v136 = vmaxq_f32(v132, v134);
          float32x4_t v137 = vmaxq_f32(v133, v134);
          float32x4_t v138 = vcvtq_f32_s32(vcvtq_s32_f32(v136));
          float32x4_t v139 = vcvtq_f32_s32(vcvtq_s32_f32(v137));
          float32x4_t v140 = vsubq_f32(v138, (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v138, v136)));
          float32x4_t v141 = vsubq_f32(v139, (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v139, v137)));
          float32x4_t v142 = vsubq_f32(v136, v140);
          float32x4_t v143 = vsubq_f32(v137, v141);
          float32x4_t v144 = *(float32x4_t *)(v13 + 384);
          float32x4_t v145 = *(float32x4_t *)(v13 + 400);
          float32x4_t v146 = vaddq_f32(v63, vmulq_f32(v143, vaddq_f32(v145, vmulq_f32(v143, vaddq_f32(v135, vmulq_f32(v144, v143))))));
          int8x16_t v147 = (int8x16_t)vmulq_f32(vaddq_f32(v63, vmulq_f32(v142, vaddq_f32(v145, vmulq_f32(v142, vaddq_f32(v135, vmulq_f32(v144, v142)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v140), v51), 0x17uLL));
          int8x16_t v148 = (int8x16_t)vmulq_f32(v146, (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v141), v51), 0x17uLL));
          float32x4_t v149 = (float32x4_t)vbslq_s8(v38, v147, (int8x16_t)v57);
          float32x4_t v150 = (float32x4_t)vbslq_s8(v38, v148, (int8x16_t)v58);
          int32x4_t v151 = (int8x16_t *)(v5 + v12);
          v151[-1] = vbslq_s8(v38, v147, (int8x16_t)vmulq_laneq_f32(v149, v149, 3));
          *int32x4_t v151 = vbslq_s8(v38, v148, (int8x16_t)vmulq_laneq_f32(v150, v150, 3));
          v11 -= 2;
          v12 += 32;
        }
        while (v4 + v11 > 1);
        unsigned int v152 = -v11;
      }
      if ((int)v152 < v4)
      {
        uint64_t v153 = *(void *)(a1 + 408);
        int8x16_t v154 = *(int8x16_t *)v153;
        int8x16_t v155 = *(int8x16_t *)(v153 + 16);
        int8x16_t v157 = *(int8x16_t *)(v153 + 32);
        int8x16_t v156 = *(int8x16_t *)(v153 + 48);
        int8x16_t v158 = vbslq_s8(v156, *(int8x16_t *)(v8 + 16 * v152), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v157, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v8 + 16 * v152), *(float32x4_t *)v153))));
        float32x4_t v159 = (float32x4_t)vextq_s8(v154, v154, 8uLL);
        int8x16_t v160 = vandq_s8(v157, (int8x16_t)vcgeq_f32(v159, (float32x4_t)vextq_s8(v158, v158, 4uLL)));
        v161.i64[0] = v158.i64[0];
        v161.i64[1] = v160.i64[1];
        v158.i64[1] = vminq_f32((float32x4_t)vextq_s8(v160, v158, 8uLL), v161).i64[1];
        int8x16_t v162 = *(int8x16_t *)(v153 + 64);
        int8x16_t v163 = *(int8x16_t *)(v153 + 80);
        float32x4_t v164 = (float32x4_t)vbslq_s8(v162, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v154, v154, 0xCuLL), v159), v158);
        float32x4_t v165 = (float32x4_t)vbslq_s8(v163, (int8x16_t)vmulq_laneq_f32(v159, v164, 2), (int8x16_t)v164);
        float32x4_t v167 = *(float32x4_t *)(v153 + 96);
        int8x16_t v166 = *(int8x16_t *)(v153 + 112);
        int32x4_t v168 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v165, 3), v167), *(int8x16_t *)(v6 + 16 * v152), (int8x16_t)v167);
        v165.i64[1] = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v153, *(int8x16_t *)&v165, 0xCuLL), v165).i64[1];
        int8x16_t v169 = (int8x16_t)vaddq_f32(*(float32x4_t *)v153, v165);
        float32x4_t v170 = (float32x4_t)vbslq_s8(v166, vextq_s8(v169, v169, 8uLL), (int8x16_t)v165);
        float32x4_t v171 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vsubq_f32(v170, vmulq_laneq_f32((float32x4_t)vextq_s8(v155, v155, 4uLL), v170, 2)), (int8x16_t)v165);
        int8x16_t v172 = (int8x16_t)vsubq_f32(*(float32x4_t *)v153, (float32x4_t)vrev64q_s32((int32x4_t)v171));
        float32x4_t v173 = (float32x4_t)vbslq_s8(v162, (int8x16_t)vaddq_f32(vmulq_lane_f32(v171, *(float32x2_t *)v155.i8, 1), (float32x4_t)vextq_s8(v172, v172, 8uLL)), (int8x16_t)v171);
        int32x4_t v174 = *(int32x4_t *)(v153 + 128);
        int8x16_t v175 = *(int8x16_t *)(v153 + 144);
        *(int8x8_t *)v171.f32 = vqtbl1_s8((int8x16_t)v173, *(int8x8_t *)v174.i8);
        *(int8x8_t *)&v171.u32[2] = vqtbl1_s8((int8x16_t)v173, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL));
        *(int8x8_t *)v176.f32 = vqtbl1_s8((int8x16_t)v173, *(int8x8_t *)v175.i8);
        *(int8x8_t *)&v176.u32[2] = vqtbl1_s8((int8x16_t)v173, (int8x8_t)*(_OWORD *)&vextq_s8(v175, v175, 8uLL));
        float32x4_t v177 = (float32x4_t)vandq_s8(v157, (int8x16_t)vcgeq_f32(v176, v171));
        v178.i64[0] = vmaxq_f32(v177, (float32x4_t)vrev64q_s32((int32x4_t)v177)).u64[0];
        float32x4_t v179 = (float32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL);
        v178.i64[1] = vsubq_f32(v179, v173).i64[1];
        float32x4_t v181 = *(float32x4_t *)(v153 + 160);
        float32x4_t v180 = *(float32x4_t *)(v153 + 176);
        float32x4_t v182 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v173), v181), v180), *(float32x4_t *)(v153 + 192));
        float32x4_t v183 = (float32x4_t)vbslq_s8(v163, (int8x16_t)vmulq_f32(v182, vrecpsq_f32(v173, v182)), v178);
        int8x16_t v184 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v183.i64[0], 0), v183, 2);
        float32x4_t v185 = (float32x4_t)vextq_s8(v184, (int8x16_t)v183, 8uLL);
        v183.i64[1] = v184.i64[1];
        float32x4_t v186 = (float32x4_t)vbslq_s8(v162, vbslq_s8((int8x16_t)vcgtq_f32(v185, v180), (int8x16_t)v180, (int8x16_t)vrev64q_s32(v168)), (int8x16_t)v183);
        float32x4_t v187 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vsubq_f32(v173, v179), (int8x16_t)v168);
        float32x4_t v188 = (float32x4_t)vbslq_s8(v163, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v173, 4uLL), v173), (int8x16_t)v173);
        float32x4_t v189 = (float32x4_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 0xCuLL), v188);
        float32x4_t v190 = (float32x4_t)vbslq_s8(v162, vandq_s8((int8x16_t)v181, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 0xCuLL))), (int8x16_t)v188);
        float32x4_t v191 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vsubq_f32(v190, (float32x4_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 4uLL)), (int8x16_t)v190);
        int8x16_t v192 = vandq_s8((int8x16_t)v180, (int8x16_t)v189);
        float32x4_t v193 = (float32x4_t)vbslq_s8(v162, (int8x16_t)vminq_f32(v191, (float32x4_t)vextq_s8(v192, v192, 8uLL)), (int8x16_t)v191);
        float32x4_t v194 = (float32x4_t)vbslq_s8(v163, vandq_s8(v157, (int8x16_t)vcgeq_f32(v193, (float32x4_t)vrev64q_s32((int32x4_t)v193))), (int8x16_t)v193);
        float32x4_t v195 = (float32x4_t)vbslq_s8(v166, vandq_s8((int8x16_t)v180, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v194, (int8x16_t)v194, 4uLL), v187)), (int8x16_t)v168);
        float32x4_t v196 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vmulq_laneq_f32(v186, v186, 2), (int8x16_t)v186);
        int8x16_t v197 = vbslq_s8(v156, vandq_s8((int8x16_t)v180, (int8x16_t)vcgeq_f32(vnegq_f32(v196), v181)), (int8x16_t)v196);
        float32x4_t v198 = (float32x4_t)vbslq_s8(v162, vandq_s8((int8x16_t)v181, (int8x16_t)vcgeq_f32(vnegq_f32(v194), v180)), (int8x16_t)v194);
        float32x4_t v199 = (float32x4_t)vextq_s8(v197, v197, 8uLL);
        int8x16_t v200 = (int8x16_t)vmulq_f32(v199, v198);
        v186.i64[0] = vextq_s8(v200, v200, 8uLL).u64[0];
        v192.i64[0] = vextq_s8(v200, (int8x16_t)v198, 0xCuLL).u64[0];
        *(int8x8_t *)v189.f32 = vext_s8(*(int8x8_t *)v198.f32, *(int8x8_t *)v186.f32, 4uLL);
        v198.i64[1] = v200.i64[1];
        v189.i64[1] = v192.i64[0];
        v198.i64[0] = vminq_f32(v189, v198).u64[0];
        v198.i64[1] = v200.i64[1];
        int8x16_t v201 = vbslq_s8((int8x16_t)vcgtq_f32(v198, v167), (int8x16_t)v199, vextq_s8(v197, *(int8x16_t *)v153, 4uLL));
        v199.i64[0] = vextq_s8(v200, v201, 0xCuLL).u64[0];
        *(int8x8_t *)&v199.u32[2] = vext_s8(*(int8x8_t *)v201.i8, *(int8x8_t *)v186.f32, 4uLL);
        v201.i64[1] = v200.i64[1];
        int32x4_t v202 = (int32x4_t)vbslq_s8(v156, (int8x16_t)vmulq_lane_f32(v199, *(float32x2_t *)v201.i8, 1), v201);
        float32x4_t v203 = (float32x4_t)vbslq_s8(v166, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v166, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v202), v195), (int8x16_t)v168), v181), vextq_s8((int8x16_t)v202, (int8x16_t)v202, 4uLL), vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL)), (int8x16_t)v168);
        float32x4_t v204 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v203, v175), (int8x16_t)v180);
        float32x4_t v205 = (float32x4_t)vandq_s8((int8x16_t)v180, (int8x16_t)vcgtq_f32(v204, *(float32x4_t *)(v153 + 256)));
        float32x4_t v206 = vsubq_f32(vsubq_f32(v204, v180), vmulq_f32(vmulq_f32(*(float32x4_t *)(v153 + 272), v205), v204));
        float32x4_t v207 = vmaxq_f32(vmulq_laneq_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v203, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v153 + 224), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v153 + 208), v203))), *(float32x4_t *)(v153 + 240)), v205), vmulq_f32(v206, vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + 320), vmulq_f32(*(float32x4_t *)(v153 + 336), v206)), vmulq_f32(vmulq_f32(v206, v206), vaddq_f32(*(float32x4_t *)(v153 + 288), vmulq_f32(*(float32x4_t *)(v153 + 304), v206)))))), *(float32x4_t *)v153,
                   2),
                 *(float32x4_t *)(v153 + 352));
        float32x4_t v208 = vcvtq_f32_s32(vcvtq_s32_f32(v207));
        float32x4_t v209 = vsubq_f32(v208, (float32x4_t)vandq_s8((int8x16_t)v180, (int8x16_t)vcgtq_f32(v208, v207)));
        float32x4_t v210 = vsubq_f32(v207, v209);
        int8x16_t v211 = (int8x16_t)vmulq_f32(vaddq_f32(v180, vmulq_f32(v210, vaddq_f32(*(float32x4_t *)(v153 + 400), vmulq_f32(v210, vaddq_f32(*(float32x4_t *)(v153 + 368), vmulq_f32(*(float32x4_t *)(v153 + 384), v210)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v209), v174), 0x17uLL));
        float32x4_t v212 = (float32x4_t)vbslq_s8(v166, v211, (int8x16_t)v168);
        *(int8x16_t *)(v5 + 16 * v152) = vbslq_s8(v166, v211, (int8x16_t)vmulq_laneq_f32(v212, v212, 3));
      }
      v8 += v7;
      v6 += v10;
      v5 += v9;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcColorAndGradientStroke::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HgcColorAndGradientStroke::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

void HgcColorAndGradientStroke::HgcColorAndGradientStroke(HgcColorAndGradientStroke *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1096A80;
  operator new();
}

void sub_1B7557DA0(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorAndGradientStroke::~HgcColorAndGradientStroke(HGNode *this)
{
  *(void *)this = &unk_1F1096A80;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C407DC911DDLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcColorAndGradientStroke::~HgcColorAndGradientStroke(this);

  HGObject::operator delete(v1);
}

uint64_t HgcColorAndGradientStroke::SetParameter(HgcColorAndGradientStroke *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  double v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcColorAndGradientStroke::GetParameter(HgcColorAndGradientStroke *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double HgcColorAndGradientStroke::State::State(HgcColorAndGradientStroke::State *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_1B7E75640;
  *((_OWORD *)this + 3) = xmmword_1B7E751A0;
  *((_OWORD *)this + 4) = xmmword_1B7E75350;
  *((_OWORD *)this + 5) = xmmword_1B7E75360;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_1B7E752F0;
  *((_OWORD *)this + 8) = xmmword_1B7E75650;
  *((_OWORD *)this + 9) = xmmword_1B7E75660;
  *((_OWORD *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E75670;
  *((_OWORD *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = xmmword_1B7E75680;
  *((int32x4_t *)this + 12) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 13) = xmmword_1B7E751C0;
  *((_OWORD *)this + 14) = xmmword_1B7E751D0;
  *((_OWORD *)this + 15) = xmmword_1B7E751E0;
  *((_OWORD *)this + 16) = xmmword_1B7E751F0;
  *((_OWORD *)this + 17) = xmmword_1B7E75200;
  *((_OWORD *)this + 18) = xmmword_1B7E75690;
  *((_OWORD *)this + 19) = xmmword_1B7E756A0;
  *((_OWORD *)this + 2pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E756B0;
  *((_OWORD *)this + 2HGRenderQueue::CancelAllRenderJobs(*this, 1) = xmmword_1B7E756C0;
  *((_OWORD *)this + 22) = xmmword_1B7E75280;
  *((_OWORD *)this + 23) = xmmword_1B7E756D0;
  *((_OWORD *)this + 24) = xmmword_1B7E756E0;
  double result = 0.0;
  *((_OWORD *)this + 25) = xmmword_1B7E756F0;
  return result;
}

const char *HgcOutlineGradientStroke::GetProgram(HgcOutlineGradientStroke *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000008d1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.z = half(hg_Params[0].y) - half(hg_Params[0].x);\n"
             "    r1.CGFloat x = r0.x - half(hg_Params[0].x);\n"
             "    r1.CGFloat x = clamp(r1.x/r0.z, 0.00000h, 1.00000h);\n"
             "    r0.CGFloat y = half(half(hg_Params[0].x) < r0.x);\n"
             "    r0.w = half(half(hg_Params[0].y) >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.CGFloat y = r0.z*half(hg_Params[0].w);\n"
             "    r1.CGFloat x = r0.z*r1.x;\n"
             "    r1.CGFloat y = c0.y;\n"
             "    r1.xCGFloat y = r1.xy + half2(hg_Params[2].xy);\n"
             "    r1.xCGFloat y = r1.xy*half2(hg_Params[2].zw);\n"
             "    CGFloat r1 = (half4) hg_Texture1.sample(hg_Sampler1, float2(r1.xy));\n"
             "    CGFloat r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000h);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + half(hg_Params[0].y);\n"
             "    r0.w = -r0.z*half(hg_Params[1].x) + r0.w;\n"
             "    r2.CGFloat x = half(hg_Params[0].x) - r0.y;\n"
             "    r0.z = r0.z*half(hg_Params[1].y) + r2.x;\n"
             "    r2.xCGFloat y = half2(r0.zx >= r0.xw);\n"
             "    r2.CGFloat x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.CGFloat y = 1.00000h / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000h);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.CGFloat y = r0.z + r0.y;\n"
             "    r3.CGFloat x = half(r0.x < r1.w);\n"
             "    r0.z = half(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.CGFloat y = half(r0.y >= r0.x);\n"
             "    r1.w = half(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.CGFloat x = half(-r2.x >= c0.x);\n"
             "    r0.z = half(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.CGFloat y = fmin(r0.z, r0.y);\n"
             "    r0.CGFloat y = select(r2.z, r2.w, -r0.y < 0.00000h);\n"
             "    r0.CGFloat x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000h);\n"
             "    r1.w = pow(r1.w, half(hg_Params[0].z));\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=23aec663:a1006d38:1aab4f17:4fa0d840\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0003:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000870\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
             "    r1.CGFloat x = r0.x - hg_Params[0].x;\n"
             "    r1.CGFloat x = clamp(r1.x/r0.z, 0.00000f, 1.00000f);\n"
             "    r0.CGFloat y = float(hg_Params[0].x < r0.x);\n"
             "    r0.w = float(hg_Params[0].y >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.CGFloat y = r0.z*hg_Params[0].w;\n"
             "    r1.CGFloat x = r0.z*r1.x;\n"
             "    r1.CGFloat y = c0.y;\n"
             "    r1.xCGFloat y = r1.xy + hg_Params[2].xy;\n"
             "    r1.xCGFloat y = r1.xy*hg_Params[2].zw;\n"
             "    CGFloat r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
             "    CGFloat r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + hg_Params[0].y;\n"
             "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
             "    r2.CGFloat x = hg_Params[0].x - r0.y;\n"
             "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
             "    r2.xCGFloat y = float2(r0.zx >= r0.xw);\n"
             "    r2.CGFloat x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.CGFloat y = 1.00000f / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.CGFloat y = r0.z + r0.y;\n"
             "    r3.CGFloat x = float(r0.x < r1.w);\n"
             "    r0.z = float(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.CGFloat y = float(r0.y >= r0.x);\n"
             "    r1.w = float(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.CGFloat x = float(-r2.x >= c0.x);\n"
             "    r0.z = float(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.CGFloat y = fmin(r0.z, r0.y);\n"
             "    r0.CGFloat y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
             "    r0.CGFloat x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
             "    r1.w = pow(r1.w, hg_Params[0].z);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2d2bf367:a80b0c77:40425e29:ddb955b0\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000008c5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.CGFloat x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.z = hg_ProgramLocal0.y - hg_ProgramLocal0.x;\n"
           "    r1.CGFloat x = r0.x - hg_ProgramLocal0.x;\n"
           "    r1.CGFloat x = clamp(r1.x/r0.z, 0.00000, 1.00000);\n"
           "    r0.CGFloat y = float(hg_ProgramLocal0.x < r0.x);\n"
           "    r0.w = float(hg_ProgramLocal0.y >= r0.x);\n"
           "    r0.w = min(r0.y, r0.w);\n"
           "    r0.CGFloat y = r0.z*hg_ProgramLocal0.w;\n"
           "    r1.CGFloat x = r0.z*r1.x;\n"
           "    r1.CGFloat y = c0.y;\n"
           "    r1.xCGFloat y = r1.xy + hg_ProgramLocal2.xy;\n"
           "    r1.xCGFloat y = r1.xy*hg_ProgramLocal2.zw;\n"
           "    CGFloat r1 = texture2D(hg_Texture1, r1.xy);\n"
           "    CGFloat r1 = vec4(-r0.w < 0.00000 ? r1.x : c0.x, -r0.w < 0.00000 ? r1.y : c0.x, -r0.w < 0.00000 ? r1.z : c0.x, -r"
           "0.w < 0.00000 ? r1.w : c0.x);\n"
           "    r0.z = r0.z + r0.y;\n"
           "    r0.w = r0.y + hg_ProgramLocal0.y;\n"
           "    r0.w = -r0.z*hg_ProgramLocal1.x + r0.w;\n"
           "    r2.CGFloat x = hg_ProgramLocal0.x - r0.y;\n"
           "    r0.z = r0.z*hg_ProgramLocal1.y + r2.x;\n"
           "    r2.xCGFloat y = vec2(greaterThanEqual(r0.zx, r0.xw));\n"
           "    r2.CGFloat x = max(r2.x, r2.y);\n"
           "    r2.z = r0.x - r0.z;\n"
           "    r2.CGFloat y = 1.00000 / r0.y;\n"
           "    r2.w = r2.z*r2.y;\n"
           "    r2.z = -r2.x < 0.00000 ? c0.x : r1.w;\n"
           "    r1.w = r0.w - r0.y;\n"
           "    r0.CGFloat y = r0.z + r0.y;\n"
           "    r3.CGFloat x = float(r0.x < r1.w);\n"
           "    r0.z = float(r0.y < r0.x);\n"
           "    r0.w = r0.w - r0.x;\n"
           "    r0.z = min(r0.z, r3.x);\n"
           "    r0.CGFloat y = float(r0.y >= r0.x);\n"
           "    r1.w = float(r0.x >= r1.w);\n"
           "    r2.w = r2.z*r2.w;\n"
           "    r2.CGFloat x = float(-r2.x >= c0.x);\n"
           "    r0.z = float(-r0.z >= c0.x);\n"
           "    r0.zw = r2.xy*r0.zw;\n"
           "    r0.CGFloat y = min(r0.z, r0.y);\n"
           "    r0.CGFloat y = -r0.y < 0.00000 ? r2.w : r2.z;\n"
           "    r0.CGFloat x = r0.y*r0.w;\n"
           "    r1.w = min(r0.z, r1.w);\n"
           "    r1.w = -r1.w < 0.00000 ? r0.x : r0.y;\n"
           "    r1.w = pow(r1.w, hg_ProgramLocal0.z);\n"
           "    r1.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=a3aaa346:e66c7ddd:eac16ee8:b26dc26e\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcOutlineGradientStroke::InitProgramDescriptor(HgcOutlineGradientStroke *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcOutlineGradientStroke_hgc_visible", "//Metal1.0     \n//LEN=0000000730\n[[ visible ]] FragmentOut HgcOutlineGradientStroke_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1)\n{\n    const float4 c0 = float4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.CGFloat x = color0.x;\n"
    "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
    "    r1.CGFloat x = r0.x - hg_Params[0].x;\n"
    "    r1.CGFloat x = clamp(r1.x/r0.z, 0.00000f, 1.00000f);\n"
    "    r0.CGFloat y = float(hg_Params[0].x < r0.x);\n"
    "    r0.w = float(hg_Params[0].y >= r0.x);\n"
    "    r0.w = fmin(r0.y, r0.w);\n"
    "    r0.CGFloat y = r0.z*hg_Params[0].w;\n"
    "    r1.CGFloat x = r0.z*r1.x;\n"
    "    r1.CGFloat y = c0.y;\n"
    "    r1.xCGFloat y = r1.xy + hg_Params[2].xy;\n"
    "    r1.xCGFloat y = r1.xy*hg_Params[2].zw;\n"
    "    CGFloat r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
    "    CGFloat r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
    "    r0.z = r0.z + r0.y;\n"
    "    r0.w = r0.y + hg_Params[0].y;\n"
    "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
    "    r2.CGFloat x = hg_Params[0].x - r0.y;\n"
    "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
    "    r2.xCGFloat y = float2(r0.zx >= r0.xw);\n"
    "    r2.CGFloat x = fmax(r2.x, r2.y);\n"
    "    r2.z = r0.x - r0.z;\n"
    "    r2.CGFloat y = 1.00000f / r0.y;\n"
    "    r2.w = r2.z*r2.y;\n"
    "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
    "    r1.w = r0.w - r0.y;\n"
    "    r0.CGFloat y = r0.z + r0.y;\n"
    "    r3.CGFloat x = float(r0.x < r1.w);\n"
    "    r0.z = float(r0.y < r0.x);\n"
    "    r0.w = r0.w - r0.x;\n"
    "    r0.z = fmin(r0.z, r3.x);\n"
    "    r0.CGFloat y = float(r0.y >= r0.x);\n"
    "    r1.w = float(r0.x >= r1.w);\n"
    "    r2.w = r2.z*r2.w;\n"
    "    r2.CGFloat x = float(-r2.x >= c0.x);\n"
    "    r0.z = float(-r0.z >= c0.x);\n"
    "    r0.zw = r2.xy*r0.zw;\n"
    "    r0.CGFloat y = fmin(r0.z, r0.y);\n"
    "    r0.CGFloat y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
    "    r0.CGFloat x = r0.y*r0.w;\n"
    "    r1.w = fmin(r0.z, r1.w);\n"
    "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
    "    r1.w = pow(r1.w, hg_Params[0].z);\n"
    "    r1.xyz = r1.xyz*r1.www;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcOutlineGradientStroke");
}

void sub_1B7558128(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75720;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B75582A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B75582F8()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B75582F0);
}

void *HgcOutlineGradientStroke::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcOutlineGradientStroke [hgc1]");
}

uint64_t HgcOutlineGradientStroke::BindTexture(HgcOutlineGradientStroke *this, HGHandler *a2, int a3)
{
  if (a3 == 1)
  {
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 2, v6, v7, v8, v9);
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    int v4 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
    uint64_t result = 0;
    if (v4) {
      return result;
    }
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcOutlineGradientStroke::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcOutlineGradientStroke::RenderTile(HgcOutlineGradientStroke *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcOutlineGradientStroke *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = *((void *)a2 + 10);
    uint64_t v13 = 16 * *((int *)a2 + 6);
    uint64_t v14 = 16 * *((int *)a2 + 22);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 < 2)
      {
        unsigned int v197 = 0;
      }
      else
      {
        int v16 = 0;
        uint64_t v17 = 16;
        do
        {
          int8x16_t v18 = *(int8x16_t *)(v12 + v17 - 16);
          uint64_t v19 = *((void *)this + 51);
          int8x16_t v20 = *(int8x16_t *)v19;
          float32x4_t v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          int8x16_t v22 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)v19, 0xCuLL), v21);
          float32x4_t v23 = (float32x4_t)vextq_s8(v22, v18, 8uLL);
          v18.i64[1] = v22.i64[1];
          float32x4_t v24 = (float32x4_t)vextq_s8(v22, *(int8x16_t *)(v12 + v17), 8uLL);
          v25.i64[0] = *(void *)(v12 + v17);
          v25.i64[1] = v22.i64[1];
          int8x16_t v26 = *(int8x16_t *)(v19 + 32);
          int8x16_t v27 = *(int8x16_t *)(v19 + 48);
          float32x4_t v29 = *(float32x4_t *)(v19 + 64);
          int8x16_t v28 = *(int8x16_t *)(v19 + 80);
          float32x4_t v30 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v23), (float32x4_t)v26), (float32x4_t)v27), v29);
          float32x4_t v31 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v24), (float32x4_t)v26), (float32x4_t)v27), v29);
          float32x4_t v32 = vmulq_f32(vsubq_f32(v25, *(float32x4_t *)v19), vmulq_f32(v31, vrecpsq_f32(v24, v31)));
          float32x4_t v33 = vmaxq_f32(vmulq_f32(vsubq_f32((float32x4_t)v18, *(float32x4_t *)v19), vmulq_f32(v30, vrecpsq_f32(v23, v30))), (float32x4_t)v28);
          int8x16_t v34 = *(int8x16_t *)(v19 + 96);
          int8x16_t v35 = *(int8x16_t *)(v19 + 112);
          float32x4_t v36 = vminq_f32(v33, (float32x4_t)v34);
          float32x4_t v37 = vminq_f32(vmaxq_f32(v32, (float32x4_t)v28), (float32x4_t)v34);
          int8x16_t v38 = vmvnq_s8(v35);
          int8x16_t v39 = vbslq_s8(v35, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32((float32x4_t)v18, *(float32x4_t *)v19))), v18);
          int8x16_t v40 = vbslq_s8(v35, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v25, *(float32x4_t *)v19))), (int8x16_t)v25);
          int8x16_t v41 = *(int8x16_t *)(v19 + 128);
          int8x16_t v42 = vmvnq_s8(v41);
          int8x16_t v43 = vbslq_s8(v41, vandq_s8(v34, (int8x16_t)vcgeq_f32(v21, (float32x4_t)vextq_s8(v39, v39, 4uLL))), v39);
          int8x16_t v44 = vbslq_s8(v41, vandq_s8(v34, (int8x16_t)vcgeq_f32(v21, (float32x4_t)vextq_s8(v40, v40, 4uLL))), v40);
          int8x16_t v45 = vbslq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v43, v43, 8uLL), (float32x4_t)v43), v39);
          int8x16_t v46 = vbslq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v44, v44, 8uLL), (float32x4_t)v44), v40);
          int32x4_t v47 = (int32x4_t)vbslq_s8(v35, (int8x16_t)vmulq_laneq_f32(v21, (float32x4_t)v45, 2), v45);
          int32x4_t v48 = (int32x4_t)vbslq_s8(v35, (int8x16_t)vmulq_laneq_f32(v21, (float32x4_t)v46, 2), v46);
          float32x4_t v49 = vmulq_laneq_f32(v36, (float32x4_t)v47, 2);
          v49.i32[1] = 0.5;
          float32x4_t v50 = vmulq_laneq_f32(v37, (float32x4_t)v48, 2);
          v50.i32[1] = 0.5;
          uint64_t v51 = *((int *)a2 + 26);
          float32x4_t v52 = vsubq_f32(v49, (float32x4_t)v9);
          uint64_t v53 = *((void *)a2 + 12);
          if (v5)
          {
            int32x4_t v54 = vaddq_s32(vcvtq_s32_f32(v52), vcltzq_f32(v52));
            float32x2_t v55 = (float32x2_t)vsubq_f32(v52, vcvtq_f32_s32(v54)).u64[0];
            float32x4_t v56 = (float32x4_t *)(v53 + 16 * (v54.i32[0] + v54.i32[1] * (int)v51));
            float32x4_t v57 = vaddq_f32(*v56, vmulq_n_f32(vsubq_f32(v56[1], *v56), v55.f32[0]));
            int8x16_t v58 = (int8x16_t)vaddq_f32(v57, vmulq_lane_f32(vsubq_f32(vaddq_f32(v56[v51], vmulq_n_f32(vsubq_f32(v56[(int)v51 + 1], v56[v51]), v55.f32[0])), v57), v55, 1));
            float32x4_t v59 = vsubq_f32(v50, (float32x4_t)v9);
            int32x4_t v60 = vaddq_s32(vcvtq_s32_f32(v59), vcltzq_f32(v59));
            v59.i64[0] = vsubq_f32(v59, vcvtq_f32_s32(v60)).u64[0];
            float32x4_t v61 = (float32x4_t *)(v53 + 16 * (v60.i32[0] + v60.i32[1] * (int)v51));
            float32x4_t v62 = vaddq_f32(*v61, vmulq_n_f32(vsubq_f32(v61[1], *v61), v59.f32[0]));
            int8x16_t v63 = (int8x16_t)vaddq_f32(v62, vmulq_lane_f32(vsubq_f32(vaddq_f32(v61[v51], vmulq_n_f32(vsubq_f32(v61[(int)v51 + 1], v61[v51]), v59.f32[0])), v62), *(float32x2_t *)v59.f32, 1));
          }
          else
          {
            float32x4_t v64 = vaddq_f32(v52, v15);
            int32x4_t v65 = vcvtq_s32_f32(v64);
            v64.i64[0] = vaddq_s32(v65, vcgtq_f32(vcvtq_f32_s32(v65), v64)).u64[0];
            int8x16_t v58 = *(int8x16_t *)(v53 + 16 * (v64.i32[0] + v64.i32[1] * (int)v51));
            float32x4_t v66 = vaddq_f32(vsubq_f32(v50, (float32x4_t)v9), v15);
            int32x4_t v67 = vcvtq_s32_f32(v66);
            v66.i64[0] = vaddq_s32(v67, vcgtq_f32(vcvtq_f32_s32(v67), v66)).u64[0];
            int8x16_t v63 = *(int8x16_t *)(v53 + 16 * (v66.i32[0] + v66.i32[1] * (int)v51));
          }
          int32x4_t v68 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v47, 3), (float32x4_t)v28), v58, v28);
          int32x4_t v69 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v48, 3), (float32x4_t)v28), v63, v28);
          v47.i64[1] = vaddq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)&v47, 0xCuLL), *(float32x4_t *)&v47).i64[1];
          v48.i64[1] = vaddq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)&v48, 0xCuLL), *(float32x4_t *)&v48).i64[1];
          int8x16_t v70 = (int8x16_t)vaddq_f32((float32x4_t)v20, (float32x4_t)v47);
          int8x16_t v71 = (int8x16_t)vaddq_f32((float32x4_t)v20, (float32x4_t)v48);
          int8x16_t v72 = vandq_s8((int8x16_t)v47, v42);
          float32x4_t v73 = (float32x4_t)vorrq_s8(vandq_s8(v41, vextq_s8(v70, v70, 8uLL)), v72);
          int8x16_t v74 = vandq_s8((int8x16_t)v48, v42);
          float32x4_t v75 = (float32x4_t)vorrq_s8(vandq_s8(v41, vextq_s8(v71, v71, 8uLL)), v74);
          int8x16_t v76 = *(int8x16_t *)(v19 + 16);
          float32x4_t v77 = (float32x4_t)vextq_s8(v76, v76, 4uLL);
          int32x4_t v78 = (int32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32(v73, vmulq_laneq_f32(v77, v73, 2))), v72);
          int32x4_t v79 = (int32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32(v75, vmulq_laneq_f32(v77, v75, 2))), v74);
          int8x16_t v80 = (int8x16_t)vsubq_f32((float32x4_t)v20, (float32x4_t)vrev64q_s32(v78));
          int8x16_t v81 = (int8x16_t)vsubq_f32((float32x4_t)v20, (float32x4_t)vrev64q_s32(v79));
          int8x16_t v82 = (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v78, *(float32x2_t *)v76.i8, 1), (float32x4_t)vextq_s8(v80, v80, 8uLL));
          int8x16_t v83 = (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v79, *(float32x2_t *)v76.i8, 1), (float32x4_t)vextq_s8(v81, v81, 8uLL));
          int8x16_t v85 = *(int8x16_t *)(v19 + 144);
          int32x4_t v84 = *(int32x4_t *)(v19 + 160);
          int8x16_t v86 = vbslq_s8(v85, v82, (int8x16_t)v78);
          *(int8x8_t *)v77.f32 = vqtbl1_s8(v86, *(int8x8_t *)v84.i8);
          v78.i64[0] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
          *(int8x8_t *)&v77.u32[2] = vqtbl1_s8(v86, *(int8x8_t *)v78.i8);
          int8x16_t v87 = vbslq_s8(v85, v83, (int8x16_t)v79);
          *(int8x8_t *)v79.i8 = vqtbl1_s8(v87, *(int8x8_t *)v84.i8);
          v79.u64[1] = (unint64_t)vqtbl1_s8(v87, *(int8x8_t *)v78.i8);
          int8x16_t v88 = *(int8x16_t *)(v19 + 176);
          int8x16_t v89 = *(int8x16_t *)(v19 + 192);
          *(int8x8_t *)v90.f32 = vqtbl1_s8(v86, *(int8x8_t *)v88.i8);
          int8x8_t v91 = (int8x8_t)vextq_s8(v88, v88, 8uLL).u64[0];
          *(int8x8_t *)&v90.u32[2] = vqtbl1_s8(v86, v91);
          *(int8x8_t *)v92.f32 = vqtbl1_s8(v87, *(int8x8_t *)v88.i8);
          *(int8x8_t *)&v92.u32[2] = vqtbl1_s8(v87, v91);
          int32x4_t v93 = (int32x4_t)vandq_s8(v34, (int8x16_t)vcgeq_f32(v90, v77));
          int32x4_t v94 = (int32x4_t)vandq_s8(v34, (int8x16_t)vcgeq_f32(v92, (float32x4_t)v79));
          v93.i64[0] = vmaxq_f32((float32x4_t)v93, (float32x4_t)vrev64q_s32(v93)).u64[0];
          v94.i64[0] = vmaxq_f32((float32x4_t)v94, (float32x4_t)vrev64q_s32(v94)).u64[0];
          float32x4_t v95 = (float32x4_t)vextq_s8(v86, v86, 8uLL);
          float32x4_t v96 = (float32x4_t)vextq_s8(v87, v87, 8uLL);
          v93.i64[1] = vsubq_f32(v95, *(float32x4_t *)&v86).i64[1];
          v94.i64[1] = vsubq_f32(v96, *(float32x4_t *)&v87).i64[1];
          float32x4_t v97 = vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v27, vrecpeq_f32((float32x4_t)v86)), (float32x4_t)v26), v29);
          float32x4_t v98 = vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v27, vrecpeq_f32((float32x4_t)v87)), (float32x4_t)v26), v29);
          int8x16_t v99 = vorrq_s8(vandq_s8(v35, (int8x16_t)vmulq_f32(v97, vrecpsq_f32((float32x4_t)v86, v97))), vandq_s8((int8x16_t)v93, v38));
          int8x16_t v100 = vorrq_s8(vandq_s8(v35, (int8x16_t)vmulq_f32(v98, vrecpsq_f32((float32x4_t)v87, v98))), vandq_s8((int8x16_t)v94, v38));
          int8x16_t v101 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v99.i64[0], 0), (float32x4_t)v99, 2);
          int8x16_t v102 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v100.i64[0], 0), (float32x4_t)v100, 2);
          float32x4_t v103 = (float32x4_t)vextq_s8(v101, v99, 8uLL);
          v99.i64[1] = v101.i64[1];
          float32x4_t v104 = (float32x4_t)vextq_s8(v102, v100, 8uLL);
          v100.i64[1] = v102.i64[1];
          int8x16_t v105 = vbslq_s8(v85, vbslq_s8((int8x16_t)vcgtq_f32(v103, (float32x4_t)v34), v34, (int8x16_t)vrev64q_s32(v68)), v99);
          int8x16_t v106 = vbslq_s8(v85, vbslq_s8((int8x16_t)vcgtq_f32(v104, (float32x4_t)v34), v34, (int8x16_t)vrev64q_s32(v69)), v100);
          int8x16_t v107 = (int8x16_t)vsubq_f32((float32x4_t)v86, v95);
          int8x16_t v108 = (int8x16_t)vsubq_f32((float32x4_t)v87, v96);
          int8x16_t v109 = vandq_s8((int8x16_t)v68, v42);
          int8x16_t v110 = vorrq_s8(vandq_s8(v41, v107), v109);
          int8x16_t v111 = vandq_s8((int8x16_t)v69, v42);
          int8x16_t v112 = vorrq_s8(vandq_s8(v41, v108), v111);
          int8x16_t v113 = vorrq_s8(vandq_s8(v35, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v86, v86, 4uLL), (float32x4_t)v86)), vandq_s8(v86, v38));
          int8x16_t v114 = vorrq_s8(vandq_s8(v35, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v87, v87, 4uLL), (float32x4_t)v87)), vandq_s8(v87, v38));
          int8x16_t v115 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v110, v110, 0xCuLL), (float32x4_t)v113);
          int8x16_t v116 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v112, v112, 0xCuLL), (float32x4_t)v114);
          int8x16_t v117 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v113, v113, 8uLL), (float32x4_t)vextq_s8(v113, v113, 0xCuLL))), v113);
          int8x16_t v118 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v114, v114, 8uLL), (float32x4_t)vextq_s8(v114, v114, 0xCuLL))), v114);
          int8x16_t v119 = vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32((float32x4_t)v117, (float32x4_t)vextq_s8(v117, v117, 4uLL))), vandq_s8(v117, v42));
          int8x16_t v120 = vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32((float32x4_t)v118, (float32x4_t)vextq_s8(v118, v118, 4uLL))), vandq_s8(v118, v42));
          int8x16_t v121 = vandq_s8(v34, v115);
          int8x16_t v122 = vandq_s8(v34, v116);
          int32x4_t v123 = (int32x4_t)vbslq_s8(v85, (int8x16_t)vminq_f32((float32x4_t)v119, (float32x4_t)vextq_s8(v121, v121, 8uLL)), v119);
          int32x4_t v124 = (int32x4_t)vbslq_s8(v85, (int8x16_t)vminq_f32((float32x4_t)v120, (float32x4_t)vextq_s8(v122, v122, 8uLL)), v120);
          int8x16_t v125 = vandq_s8(v34, v35);
          int8x16_t v126 = vorrq_s8(vandq_s8(v125, (int8x16_t)vcgeq_f32((float32x4_t)v123, (float32x4_t)vrev64q_s32(v123))), vandq_s8((int8x16_t)v123, v38));
          int8x16_t v127 = vorrq_s8(vandq_s8(v125, (int8x16_t)vcgeq_f32((float32x4_t)v124, (float32x4_t)vrev64q_s32(v124))), vandq_s8((int8x16_t)v124, v38));
          int8x16_t v128 = vandq_s8(v34, v41);
          float32x4_t v129 = (float32x4_t)vorrq_s8(vandq_s8(v128, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v126, v126, 4uLL), (float32x4_t)v110)), v109);
          float32x4_t v130 = (float32x4_t)vorrq_s8(vandq_s8(v128, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v127, v127, 4uLL), (float32x4_t)v112)), v111);
          int8x16_t v131 = vorrq_s8(vandq_s8(v41, (int8x16_t)vmulq_laneq_f32((float32x4_t)v105, (float32x4_t)v105, 2)), vandq_s8(v105, v42));
          int8x16_t v132 = vorrq_s8(vandq_s8(v41, (int8x16_t)vmulq_laneq_f32((float32x4_t)v106, (float32x4_t)v106, 2)), vandq_s8(v106, v42));
          int8x16_t v133 = vbslq_s8(v89, vandq_s8(v34, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v131), (float32x4_t)v28)), v131);
          int8x16_t v134 = vbslq_s8(v89, vandq_s8(v34, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v132), (float32x4_t)v28)), v132);
          int8x16_t v135 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v126), (float32x4_t)v34)), v126);
          int8x16_t v136 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v127), (float32x4_t)v34)), v127);
          int8x16_t v137 = vextq_s8(v133, v133, 8uLL);
          int8x16_t v138 = vextq_s8(v134, v134, 8uLL);
          int8x16_t v139 = (int8x16_t)vmulq_f32((float32x4_t)v137, (float32x4_t)v135);
          int8x16_t v140 = (int8x16_t)vmulq_f32((float32x4_t)v138, (float32x4_t)v136);
          v122.i64[0] = vextq_s8(v139, v139, 8uLL).u64[0];
          v103.i64[0] = vextq_s8(v139, v135, 0xCuLL).u64[0];
          *(int8x8_t *)v141.f32 = vext_s8(*(int8x8_t *)v135.i8, *(int8x8_t *)v122.i8, 4uLL);
          v135.i64[1] = v139.i64[1];
          int8x8_t v142 = (int8x8_t)vextq_s8(v140, v140, 8uLL).u64[0];
          v141.i64[1] = v103.i64[0];
          v103.i64[0] = vextq_s8(v140, v136, 0xCuLL).u64[0];
          *(int8x8_t *)v143.f32 = vext_s8(*(int8x8_t *)v136.i8, v142, 4uLL);
          v136.i64[1] = v140.i64[1];
          v143.i64[1] = v103.i64[0];
          v135.i64[0] = vminq_f32(v141, (float32x4_t)v135).u64[0];
          v136.i64[0] = vminq_f32(v143, (float32x4_t)v136).u64[0];
          v135.i64[1] = v139.i64[1];
          v136.i64[1] = v140.i64[1];
          int8x16_t v144 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v135, (float32x4_t)v28), v137, vextq_s8(v133, v9, 4uLL));
          int8x16_t v145 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v136, (float32x4_t)v28), v138, vextq_s8(v134, v9, 4uLL));
          v133.i64[0] = vextq_s8(v139, v144, 0xCuLL).u64[0];
          v133.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v144.i8, *(int8x8_t *)v122.i8, 4uLL);
          v144.i64[1] = v139.i64[1];
          v134.i64[0] = vextq_s8(v140, v145, 0xCuLL).u64[0];
          v134.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v145.i8, v142, 4uLL);
          v145.i64[1] = v140.i64[1];
          int32x4_t v146 = (int32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_lane_f32((float32x4_t)v133, *(float32x2_t *)v144.i8, 1), v144);
          int32x4_t v147 = (int32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_lane_f32((float32x4_t)v134, *(float32x2_t *)v145.i8, 1), v145);
          int8x16_t v148 = (int8x16_t)vcgtq_f32((float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v146), v129)), v109), (float32x4_t)v28);
          int8x16_t v149 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v147), v130)), v111), (float32x4_t)v28), vextq_s8((int8x16_t)v147, (int8x16_t)v147, 4uLL), vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL));
          int8x16_t v150 = vorrq_s8(vandq_s8(vbslq_s8(v148, vextq_s8((int8x16_t)v146, (int8x16_t)v146, 4uLL), vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL)), v41), v109);
          int8x16_t v151 = vorrq_s8(vandq_s8(v149, v41), v111);
          float32x4_t v152 = (float32x4_t)vorrq_s8(vandq_s8(v150, v88), v34);
          float32x4_t v153 = (float32x4_t)vorrq_s8(vandq_s8(v151, v88), v34);
          float32x4_t v154 = (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v150));
          float32x4_t v155 = (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v151));
          float32x4_t v156 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v150, 0x17uLL)), v154);
          float32x4_t v157 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v151, 0x17uLL)), v155);
          float32x4_t v158 = *(float32x4_t *)(v19 + 208);
          float32x4_t v159 = *(float32x4_t *)(v19 + 224);
          float32x4_t v160 = vsubq_f32(v156, v158);
          float32x4_t v161 = vsubq_f32(v157, v158);
          float32x4_t v162 = (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v152, v159));
          float32x4_t v163 = (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v153, v159));
          float32x4_t v164 = vaddq_f32(v160, v162);
          float32x4_t v165 = vaddq_f32(v161, v163);
          float32x4_t v166 = *(float32x4_t *)(v19 + 240);
          float32x4_t v167 = *(float32x4_t *)(v19 + 256);
          float32x4_t v168 = vsubq_f32(vsubq_f32(v152, (float32x4_t)v34), vmulq_f32(vmulq_f32(v166, v162), v152));
          float32x4_t v169 = vsubq_f32(vsubq_f32(v153, (float32x4_t)v34), vmulq_f32(vmulq_f32(v166, v163), v153));
          float32x4_t v170 = *(float32x4_t *)(v19 + 272);
          float32x4_t v171 = *(float32x4_t *)(v19 + 288);
          float32x4_t v172 = vaddq_f32(v167, vmulq_f32(v170, v168));
          float32x4_t v173 = vaddq_f32(v167, vmulq_f32(v170, v169));
          float32x4_t v174 = *(float32x4_t *)(v19 + 304);
          float32x4_t v175 = *(float32x4_t *)(v19 + 320);
          float32x4_t v176 = vmulq_laneq_f32(vaddq_f32(v164, vmulq_f32(v168, vaddq_f32(vaddq_f32(v171, vmulq_f32(v174, v168)), vmulq_f32(vmulq_f32(v168, v168), v172)))), (float32x4_t)v20, 2);
          float32x4_t v177 = vmulq_laneq_f32(vaddq_f32(v165, vmulq_f32(v169, vaddq_f32(vaddq_f32(v171, vmulq_f32(v174, v169)), vmulq_f32(vmulq_f32(v169, v169), v173)))), (float32x4_t)v20, 2);
          float32x4_t v178 = vmaxq_f32(v176, v175);
          float32x4_t v179 = vmaxq_f32(v177, v175);
          float32x4_t v180 = vcvtq_f32_s32(vcvtq_s32_f32(v178));
          float32x4_t v181 = vcvtq_f32_s32(vcvtq_s32_f32(v179));
          float32x4_t v182 = vsubq_f32(v180, (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v180, v178)));
          float32x4_t v183 = vsubq_f32(v181, (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v181, v179)));
          float32x4_t v184 = vsubq_f32(v178, v182);
          float32x4_t v185 = vsubq_f32(v179, v183);
          float32x4_t v186 = *(float32x4_t *)(v19 + 336);
          float32x4_t v187 = *(float32x4_t *)(v19 + 352);
          float32x4_t v188 = vaddq_f32(v186, vmulq_f32(v187, v184));
          float32x4_t v189 = vaddq_f32(v186, vmulq_f32(v187, v185));
          float32x4_t v190 = *(float32x4_t *)(v19 + 368);
          float32x4_t v191 = vaddq_f32((float32x4_t)v34, vmulq_f32(v185, vaddq_f32(v190, vmulq_f32(v185, v189))));
          int8x16_t v192 = vandq_s8(v41, (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)v34, vmulq_f32(v184, vaddq_f32(v190, vmulq_f32(v184, v188)))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v182), v84), 0x17uLL)));
          float32x4_t v193 = (float32x4_t)vorrq_s8(v192, v109);
          int8x16_t v194 = vandq_s8(v41, (int8x16_t)vmulq_f32(v191, (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v183), v84), 0x17uLL)));
          float32x4_t v195 = (float32x4_t)vorrq_s8(v194, v111);
          float32x4_t v196 = (int8x16_t *)(v11 + v17);
          v196[-1] = vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32(v193, v193, 3), v42), v192);
          *float32x4_t v196 = vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32(v195, v195, 3), v42), v194);
          v16 -= 2;
          v17 += 32;
        }
        while (v10 + v16 > 1);
        unsigned int v197 = -v16;
      }
      if ((int)v197 < v10)
      {
        uint64_t v198 = *((void *)this + 51);
        int8x16_t v199 = *(int8x16_t *)v198;
        float32x4_t v200 = (float32x4_t)vextq_s8(v199, v199, 8uLL);
        int8x16_t v201 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)v198, 0xCuLL), v200);
        float32x4_t v202 = (float32x4_t)vextq_s8(v201, *(int8x16_t *)(v12 + 16 * v197), 8uLL);
        v203.i64[0] = *(void *)(v12 + 16 * v197);
        v203.i64[1] = v201.i64[1];
        int8x16_t v204 = *(int8x16_t *)(v198 + 32);
        int8x16_t v205 = *(int8x16_t *)(v198 + 48);
        float32x4_t v207 = *(float32x4_t *)(v198 + 64);
        int8x16_t v206 = *(int8x16_t *)(v198 + 80);
        float32x4_t v208 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v202), (float32x4_t)v204), (float32x4_t)v205), v207);
        float32x4_t v209 = vmaxq_f32(vmulq_f32(vsubq_f32(v203, *(float32x4_t *)v198), vmulq_f32(v208, vrecpsq_f32(v202, v208))), (float32x4_t)v206);
        int8x16_t v210 = *(int8x16_t *)(v198 + 96);
        int8x16_t v211 = *(int8x16_t *)(v198 + 112);
        float32x4_t v212 = vminq_f32(v209, (float32x4_t)v210);
        int8x16_t v213 = vbslq_s8(v211, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v210, (int8x16_t)vcgtq_f32(v203, *(float32x4_t *)v198))), (int8x16_t)v203);
        int8x16_t v214 = *(int8x16_t *)(v198 + 128);
        int8x16_t v215 = vbslq_s8(v214, vandq_s8(v210, (int8x16_t)vcgeq_f32(v200, (float32x4_t)vextq_s8(v213, v213, 4uLL))), v213);
        int8x16_t v216 = vbslq_s8(v214, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v215, v215, 8uLL), (float32x4_t)v215), v213);
        int32x4_t v217 = (int32x4_t)vbslq_s8(v211, (int8x16_t)vmulq_laneq_f32(v200, (float32x4_t)v216, 2), v216);
        float32x4_t v218 = vmulq_laneq_f32(v212, (float32x4_t)v217, 2);
        v218.i32[1] = 0.5;
        uint64_t v219 = *((int *)a2 + 26);
        float32x4_t v220 = vsubq_f32(v218, (float32x4_t)v9);
        uint64_t v221 = *((void *)a2 + 12);
        if (v5)
        {
          int32x4_t v222 = vaddq_s32(vcvtq_s32_f32(v220), vcltzq_f32(v220));
          float32x2_t v223 = (float32x2_t)vsubq_f32(v220, vcvtq_f32_s32(v222)).u64[0];
          float32x4_t v224 = (float32x4_t *)(v221 + 16 * (v222.i32[0] + v222.i32[1] * (int)v219));
          float32x4_t v225 = vaddq_f32(*v224, vmulq_n_f32(vsubq_f32(v224[1], *v224), v223.f32[0]));
          int8x16_t v226 = (int8x16_t)vaddq_f32(v225, vmulq_lane_f32(vsubq_f32(vaddq_f32(v224[v219], vmulq_n_f32(vsubq_f32(v224[(int)v219 + 1], v224[v219]), v223.f32[0])), v225), v223, 1));
        }
        else
        {
          float32x4_t v227 = vaddq_f32(v220, v15);
          int32x4_t v228 = vcvtq_s32_f32(v227);
          v227.i64[0] = vaddq_s32(v228, vcgtq_f32(vcvtq_f32_s32(v228), v227)).u64[0];
          int8x16_t v226 = *(int8x16_t *)(v221 + 16 * (v227.i32[0] + v227.i32[1] * (int)v219));
        }
        int8x16_t v229 = vmvnq_s8(v211);
        int8x16_t v230 = vmvnq_s8(v214);
        int32x4_t v231 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v217, 3), (float32x4_t)v206), v226, v206);
        v217.i64[1] = vaddq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)&v217, 0xCuLL), *(float32x4_t *)&v217).i64[1];
        int8x16_t v232 = (int8x16_t)vaddq_f32((float32x4_t)v199, (float32x4_t)v217);
        int8x16_t v233 = vandq_s8((int8x16_t)v217, v230);
        float32x4_t v234 = (float32x4_t)vorrq_s8(vandq_s8(v214, vextq_s8(v232, v232, 8uLL)), v233);
        int8x16_t v235 = *(int8x16_t *)(v198 + 16);
        int32x4_t v236 = (int32x4_t)vorrq_s8(vandq_s8(v214, (int8x16_t)vsubq_f32(v234, vmulq_laneq_f32((float32x4_t)vextq_s8(v235, v235, 4uLL), v234, 2))), v233);
        int8x16_t v237 = (int8x16_t)vsubq_f32((float32x4_t)v199, (float32x4_t)vrev64q_s32(v236));
        int8x16_t v238 = (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v236, *(float32x2_t *)v235.i8, 1), (float32x4_t)vextq_s8(v237, v237, 8uLL));
        int8x16_t v240 = *(int8x16_t *)(v198 + 144);
        int32x4_t v239 = *(int32x4_t *)(v198 + 160);
        int8x16_t v241 = vbslq_s8(v240, v238, (int8x16_t)v236);
        *(int8x8_t *)v242.f32 = vqtbl1_s8(v241, *(int8x8_t *)v239.i8);
        *(int8x8_t *)&v242.u32[2] = vqtbl1_s8(v241, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL));
        int8x16_t v243 = *(int8x16_t *)(v198 + 176);
        int8x16_t v244 = *(int8x16_t *)(v198 + 192);
        *(int8x8_t *)v245.f32 = vqtbl1_s8(v241, *(int8x8_t *)v243.i8);
        *(int8x8_t *)&v245.u32[2] = vqtbl1_s8(v241, (int8x8_t)*(_OWORD *)&vextq_s8(v243, v243, 8uLL));
        int32x4_t v246 = (int32x4_t)vandq_s8(v210, (int8x16_t)vcgeq_f32(v245, v242));
        v246.i64[0] = vmaxq_f32((float32x4_t)v246, (float32x4_t)vrev64q_s32(v246)).u64[0];
        float32x4_t v247 = (float32x4_t)vextq_s8(v241, v241, 8uLL);
        v246.i64[1] = vsubq_f32(v247, *(float32x4_t *)&v241).i64[1];
        float32x4_t v248 = vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v205, vrecpeq_f32((float32x4_t)v241)), (float32x4_t)v204), v207);
        int8x16_t v249 = vorrq_s8(vandq_s8((int8x16_t)v246, v229), vandq_s8(v211, (int8x16_t)vmulq_f32(v248, vrecpsq_f32((float32x4_t)v241, v248))));
        int8x16_t v250 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v249.i64[0], 0), (float32x4_t)v249, 2);
        float32x4_t v251 = (float32x4_t)vextq_s8(v250, v249, 8uLL);
        v249.i64[1] = v250.i64[1];
        int8x16_t v252 = vbslq_s8(v240, vbslq_s8((int8x16_t)vcgtq_f32(v251, (float32x4_t)v210), v210, (int8x16_t)vrev64q_s32(v231)), v249);
        int8x16_t v253 = vandq_s8((int8x16_t)v231, v230);
        int8x16_t v254 = vorrq_s8(vandq_s8(v214, (int8x16_t)vsubq_f32((float32x4_t)v241, v247)), v253);
        int8x16_t v255 = vorrq_s8(vandq_s8(v211, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v241, v241, 4uLL), (float32x4_t)v241)), vandq_s8(v241, v229));
        int8x16_t v256 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v254, v254, 0xCuLL), (float32x4_t)v255);
        int8x16_t v257 = vbslq_s8(v240, vandq_s8(v205, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v255, v255, 8uLL), (float32x4_t)vextq_s8(v255, v255, 0xCuLL))), v255);
        int8x16_t v258 = vorrq_s8(vandq_s8(v214, (int8x16_t)vsubq_f32((float32x4_t)v257, (float32x4_t)vextq_s8(v257, v257, 4uLL))), vandq_s8(v257, v230));
        int8x16_t v259 = vandq_s8(v210, v256);
        int32x4_t v260 = (int32x4_t)vbslq_s8(v240, (int8x16_t)vminq_f32((float32x4_t)v258, (float32x4_t)vextq_s8(v259, v259, 8uLL)), v258);
        int8x16_t v261 = vorrq_s8(vandq_s8(vandq_s8(v210, v211), (int8x16_t)vcgeq_f32((float32x4_t)v260, (float32x4_t)vrev64q_s32(v260))), vandq_s8((int8x16_t)v260, v229));
        int8x16_t v262 = (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v261, v261, 4uLL), (float32x4_t)v254);
        int8x16_t v263 = vorrq_s8(vandq_s8(v214, (int8x16_t)vmulq_laneq_f32((float32x4_t)v252, (float32x4_t)v252, 2)), vandq_s8(v252, v230));
        int8x16_t v264 = vbslq_s8(v244, vandq_s8(v210, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v263), (float32x4_t)v206)), v263);
        int8x16_t v265 = vbslq_s8(v240, vandq_s8(v205, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v261), (float32x4_t)v210)), v261);
        int8x16_t v266 = vextq_s8(v264, v264, 8uLL);
        int8x16_t v267 = (int8x16_t)vmulq_f32((float32x4_t)v266, (float32x4_t)v265);
        v252.i64[0] = vextq_s8(v267, v267, 8uLL).u64[0];
        *(int8x8_t *)v256.i8 = vext_s8(*(int8x8_t *)v265.i8, *(int8x8_t *)v252.i8, 4uLL);
        v256.i64[1] = vextq_s8(v267, v265, 0xCuLL).u64[0];
        v265.i64[1] = v267.i64[1];
        v265.i64[0] = vminq_f32((float32x4_t)v256, (float32x4_t)v265).u64[0];
        v265.i64[1] = v267.i64[1];
        int8x16_t v268 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v265, (float32x4_t)v206), v266, vextq_s8(v264, v9, 4uLL));
        v266.i64[0] = vextq_s8(v267, v268, 0xCuLL).u64[0];
        v266.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v268.i8, *(int8x8_t *)v252.i8, 4uLL);
        v268.i64[1] = v267.i64[1];
        int32x4_t v269 = (int32x4_t)vbslq_s8(v244, (int8x16_t)vmulq_lane_f32((float32x4_t)v266, *(float32x2_t *)v268.i8, 1), v268);
        int8x16_t v270 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vorrq_s8(vandq_s8(v214, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v269), (float32x4_t)vorrq_s8(vandq_s8(vandq_s8(v210, v214), v262), v253))), v253), (float32x4_t)v206), vextq_s8((int8x16_t)v269, (int8x16_t)v269, 4uLL), vextq_s8((int8x16_t)v269, (int8x16_t)v269, 8uLL)), v214), v253);
        float32x4_t v271 = (float32x4_t)vorrq_s8(vandq_s8(v270, v243), v210);
        float32x4_t v272 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v270, 0x17uLL)), (float32x4_t)vandq_s8(v204, (int8x16_t)vcgtq_f32((float32x4_t)v205, (float32x4_t)v270))), *(float32x4_t *)(v198 + 208));
        float32x4_t v273 = (float32x4_t)vandq_s8(v210, (int8x16_t)vcgtq_f32(v271, *(float32x4_t *)(v198 + 224)));
        float32x4_t v274 = vaddq_f32(v272, v273);
        float32x4_t v275 = vsubq_f32(vsubq_f32(v271, (float32x4_t)v210), vmulq_f32(vmulq_f32(*(float32x4_t *)(v198 + 240), v273), v271));
        float32x4_t v276 = vmaxq_f32(vmulq_laneq_f32(vaddq_f32(v274, vmulq_f32(v275, vaddq_f32(vaddq_f32(*(float32x4_t *)(v198 + 288), vmulq_f32(*(float32x4_t *)(v198 + 304), v275)), vmulq_f32(vmulq_f32(v275, v275), vaddq_f32(*(float32x4_t *)(v198 + 256), vmulq_f32(*(float32x4_t *)(v198 + 272), v275)))))), (float32x4_t)v199, 2), *(float32x4_t *)(v198 + 320));
        float32x4_t v277 = vcvtq_f32_s32(vcvtq_s32_f32(v276));
        float32x4_t v278 = vsubq_f32(v277, (float32x4_t)vandq_s8(v210, (int8x16_t)vcgtq_f32(v277, v276)));
        float32x4_t v279 = vsubq_f32(v276, v278);
        int8x16_t v280 = vandq_s8(v214, (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)v210, vmulq_f32(v279, vaddq_f32(*(float32x4_t *)(v198 + 368), vmulq_f32(v279, vaddq_f32(*(float32x4_t *)(v198 + 336), vmulq_f32(*(float32x4_t *)(v198 + 352), v279)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v278), v239), 0x17uLL)));
        float32x4_t v281 = (float32x4_t)vorrq_s8(v280, v253);
        *(int8x16_t *)(v11 + 16 * v197) = vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32(v281, v281, 3), v230), v280);
      }
      v12 += v14;
      v11 += v13;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcOutlineGradientStroke::GetDOD(HgcOutlineGradientStroke *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcOutlineGradientStroke *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    int32x2_t v6 = &HGRectInfinite;
    return *(void *)v6;
  }
  if (a3)
  {
    int32x2_t v6 = &HGRectNull;
    return *(void *)v6;
  }
  return v5;
}

uint64_t HgcOutlineGradientStroke::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    uint64_t DOD = HGRenderer::GetDOD(a2, Input);
    uint64_t v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(void *)&a4.var0;
  }
  return DOD;
}

void HgcOutlineGradientStroke::HgcOutlineGradientStroke(HgcOutlineGradientStroke *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1096CE8;
  operator new();
}

void sub_1B75594F0(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcOutlineGradientStroke::~HgcOutlineGradientStroke(HGNode *this)
{
  *(void *)this = &unk_1F1096CE8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C400F47AF14);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcOutlineGradientStroke::~HgcOutlineGradientStroke(this);

  HGObject::operator delete(v1);
}

uint64_t HgcOutlineGradientStroke::SetParameter(HgcOutlineGradientStroke *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  double v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcOutlineGradientStroke::GetParameter(HgcOutlineGradientStroke *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double HgcOutlineGradientStroke::State::State(HgcOutlineGradientStroke::State *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_1B7E75730;
  *((_OWORD *)this + 3) = xmmword_1B7E75740;
  *((int32x4_t *)this + 4) = vdupq_n_s32(0x7F7FFFFFu);
  *((void *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0;
  *((void *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
  *((_OWORD *)this + 6) = xmmword_1B7E75640;
  *((_OWORD *)this + 7) = xmmword_1B7E75360;
  *((_OWORD *)this + 8) = xmmword_1B7E752F0;
  *((_OWORD *)this + 9) = xmmword_1B7E75350;
  *((_OWORD *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E75650;
  *((_OWORD *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = xmmword_1B7E75660;
  *((_OWORD *)this + 12) = xmmword_1B7E751A0;
  *((_OWORD *)this + 13) = xmmword_1B7E751E0;
  *((_OWORD *)this + 14) = xmmword_1B7E751F0;
  *((_OWORD *)this + 15) = xmmword_1B7E75200;
  *((_OWORD *)this + 16) = xmmword_1B7E75690;
  *((_OWORD *)this + 17) = xmmword_1B7E756A0;
  *((_OWORD *)this + 18) = xmmword_1B7E756B0;
  *((_OWORD *)this + 19) = xmmword_1B7E756C0;
  *((_OWORD *)this + 2pthread_cond_init((pthread_cond_t *)this, 0) = xmmword_1B7E75280;
  *((_OWORD *)this + 2HGRenderQueue::CancelAllRenderJobs(*this, 1) = xmmword_1B7E756D0;
  double result = 0.0;
  *((_OWORD *)this + 22) = xmmword_1B7E756E0;
  *((_OWORD *)this + 23) = xmmword_1B7E756F0;
  return result;
}

const char *HgcReconstructDT::GetProgram(HgcReconstructDT *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002e9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.CGFloat x = r0.x*half(hg_Params[0].x);\n"
             "    output.color0.xyz = float3(r0.xxx);\n"
             "    output.color0.w = float(-float(fabs(r0.x)) < float(c0.w));\n"
             "    return output;\n"
             "}\n"
             "//MD5=278b20d3:6e9f84aa:893390ef:ca59203b\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ca\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.CGFloat x = r0.x*hg_Params[0].x;\n"
             "    output.color0.xyz = r0.xxx;\n"
             "    output.color0.w = float(-fabs(r0.x) < c0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9bf17ba0:58c9dc9b:59940475:6450d3b5\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000029b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.CGFloat x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.CGFloat x = r0.x*hg_ProgramLocal0.x;\n"
           "    gl_FragColor.xyz = r0.xxx;\n"
           "    gl_FragColor.w = float(-abs(r0.x) < c0.w);\n"
           "}\n"
           "//MD5=82f7c31d:b098a326:2e8e493b:e1c33954\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcReconstructDT::InitProgramDescriptor(HgcReconstructDT *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcReconstructDT_hgc_visible", "//Metal1.0     \n//LEN=00000001a4\n[[ visible ]] FragmentOut HgcReconstructDT_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.CGFloat x = color0.x;\n"
    "    r0.CGFloat x = r0.x*hg_Params[0].x;\n"
    "    output.color0.xyz = r0.xxx;\n"
    "    output.color0.w = float(-fabs(r0.x) < c0.w);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcReconstructDT");
}

void sub_1B7559864(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7559964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B75599A4()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B755999CLL);
}

void *HgcReconstructDT::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcReconstructDT [hgc1]");
}

uint64_t HgcReconstructDT::BindTexture(HgcReconstructDT *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcReconstructDT::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcReconstructDT::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 80);
    uint64_t v7 = 16 * *(int *)(a2 + 88);
    uint64_t v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v3HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *(void *)(a1 + 408);
          float32x4_t v12 = *(float32x4_t *)(v11 + 16);
          int8x16_t v13 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          int8x16_t v14 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          int8x16_t v15 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          int8x16_t v16 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          int8x16_t v17 = *(int8x16_t *)(v11 + 32);
          int8x16_t v18 = *(int8x16_t *)(v11 + 48);
          float32x4_t v19 = (float32x4_t)vorrq_s8(v17, v13);
          int8x16_t v20 = (int8x16_t)vcgtq_f32(v12, (float32x4_t)vorrq_s8(v17, v14));
          int8x16_t v21 = (int8x16_t)vcgtq_f32(v12, (float32x4_t)vorrq_s8(v17, v15));
          int8x16_t v22 = (int8x16_t)vcgtq_f32(v12, (float32x4_t)vorrq_s8(v17, v16));
          int8x16_t v23 = vandq_s8(v18, (int8x16_t)vcgtq_f32(v12, v19));
          int8x16_t v24 = vandq_s8(v18, v20);
          int8x16_t v25 = vandq_s8(v18, v21);
          int8x16_t v26 = vandq_s8(v18, v22);
          int8x16_t v27 = vextq_s8(v24, v24, 4uLL);
          int8x16_t v28 = vextq_s8(v25, v25, 4uLL);
          int8x16_t v29 = *(int8x16_t *)(v11 + 64);
          float32x4_t v30 = (int8x16_t *)(v5 + v10);
          v30[-2] = vbslq_s8(v29, vextq_s8(v23, v23, 4uLL), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 0));
          v30[-1] = vbslq_s8(v29, v27, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 0));
          int8x16_t *v30 = vbslq_s8(v29, v28, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 0));
          v30[1] = vbslq_s8(v29, vextq_s8(v26, v26, 4uLL), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 0));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v3HGRenderQueue::CancelAllRenderJobs(*this, 1) = -v9;
      }
      if ((int)v31 < v4)
      {
        uint64_t v31 = v31;
        do
        {
          uint64_t v32 = *(void *)(a1 + 408);
          int8x16_t v33 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v31), *(float32x4_t *)v32);
          int8x16_t v34 = vandq_s8(*(int8x16_t *)(v32 + 48), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v32 + 16), (float32x4_t)vorrq_s8(*(int8x16_t *)(v32 + 32), v33)));
          *(int8x16_t *)(v5 + 16 * v31++) = vbslq_s8(*(int8x16_t *)(v32 + 64), vextq_s8(v34, v34, 4uLL), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 0));
        }
        while (v31 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcReconstructDT::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HgcReconstructDT::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

void HgcReconstructDT::HgcReconstructDT(HgcReconstructDT *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1096F50;
  operator new();
}

void sub_1B7559D9C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcReconstructDT::~HgcReconstructDT(HGNode *this)
{
  *(void *)this = &unk_1F1096F50;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcReconstructDT::~HgcReconstructDT(this);

  HGObject::operator delete(v1);
}

uint64_t HgcReconstructDT::SetParameter(HgcReconstructDT *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (__n128 *)*((void *)this + 51);
  if (v8->n128_f32[0] == a4 && v8->n128_f32[1] == 0.0 && v8->n128_f32[2] == 0.0 && v8->n128_f32[3] == 0.0) {
    return 0;
  }
  v8->n128_f32[0] = a4;
  v8->n128_u64[1] = 0;
  v8->n128_u32[1] = 0;
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  v8[5] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcReconstructDT::GetParameter(HgcReconstructDT *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = v3[20];
    a3[1] = v3[21];
    a3[2] = v3[22];
    float result = v3[23];
    a3[3] = result;
  }
  return result;
}

const char *HgcMaskAlpha::GetProgram(HgcMaskAlpha *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004d5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.CGFloat y = half(r0.w < half(hg_Params[0].y));\n"
             "    r0.z = r0.y;\n"
             "    r0.w = half(r0.w >= half(hg_Params[0].y));\n"
             "    r1.CGFloat x = r0.w;\n"
             "    r0.CGFloat x = half(hg_Params[0].x) - c0.x;\n"
             "    r0.CGFloat x = abs(r0.x);\n"
             "    r0.xz = half2(-r0.xz >= c0.yy);\n"
             "    r0.xCGFloat y = fmin(r0.xx, r0.zy);\n"
             "    r0.CGFloat y = half(-r0.y < c0.y);\n"
             "    r0.z = half(-half(fabs(hg_Params[0].x)) >= c0.y);\n"
             "    r0.w = fmin(r0.z, r0.w);\n"
             "    r0.xCGFloat y = select(r0.yy, c0.yx, -r0.xx < 0.00000h);\n"
             "    r1.CGFloat x = half(-r1.x >= c0.y);\n"
             "    r0.xCGFloat y = select(r0.xy, c0.xx, -r0.ww < 0.00000h);\n"
             "    r0.z = fmin(r0.z, r1.x);\n"
             "    output.color0 = select(float4(r0.xxxy), float4(c0.yyyx), -float4(r0.zzzz) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f7c1f6b7:91423e38:7c42cf0b:124028ba\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004a8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.CGFloat y = float(r0.w < hg_Params[0].y);\n"
             "    r0.z = r0.y;\n"
             "    r0.w = float(r0.w >= hg_Params[0].y);\n"
             "    r1.CGFloat x = r0.w;\n"
             "    r0.CGFloat x = hg_Params[0].x - c0.x;\n"
             "    r0.CGFloat x = abs(r0.x);\n"
             "    r0.xz = float2(-r0.xz >= c0.yy);\n"
             "    r0.xCGFloat y = fmin(r0.xx, r0.zy);\n"
             "    r0.CGFloat y = float(-r0.y < c0.y);\n"
             "    r0.z = float(-fabs(hg_Params[0].x) >= c0.y);\n"
             "    r0.w = fmin(r0.z, r0.w);\n"
             "    r0.xCGFloat y = select(r0.yy, c0.yx, -r0.xx < 0.00000f);\n"
             "    r1.CGFloat x = float(-r1.x >= c0.y);\n"
             "    r0.xCGFloat y = select(r0.xy, c0.xx, -r0.ww < 0.00000f);\n"
             "    r0.z = fmin(r0.z, r1.x);\n"
             "    output.color0 = select(r0.xxxy, c0.yyyx, -r0.zzzz < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e3c547bd:c3842600:67a3067c:f3d81428\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000051a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0.CGFloat y = float(r0.w < hg_ProgramLocal0.y);\n"
           "    r0.z = r0.y;\n"
           "    r0.w = float(r0.w >= hg_ProgramLocal0.y);\n"
           "    r1.CGFloat x = r0.w;\n"
           "    r0.CGFloat x = hg_ProgramLocal0.x - c0.x;\n"
           "    r0.CGFloat x = abs(r0.x);\n"
           "    r0.xz = vec2(greaterThanEqual(-r0.xz, c0.yy));\n"
           "    r0.xCGFloat y = min(r0.xx, r0.zy);\n"
           "    r0.CGFloat y = float(-r0.y < c0.y);\n"
           "    r0.z = float(-abs(hg_ProgramLocal0.x) >= c0.y);\n"
           "    r0.w = min(r0.z, r0.w);\n"
           "    r0.xCGFloat y = vec2(-r0.x < 0.00000 ? c0.y : r0.y, -r0.x < 0.00000 ? c0.x : r0.y);\n"
           "    r1.CGFloat x = float(-r1.x >= c0.y);\n"
           "    r0.xCGFloat y = vec2(-r0.w < 0.00000 ? c0.x : r0.x, -r0.w < 0.00000 ? c0.x : r0.y);\n"
           "    r0.z = min(r0.z, r1.x);\n"
           "    gl_FragColor = vec4(-r0.z < 0.00000 ? c0.y : r0.x, -r0.z < 0.00000 ? c0.y : r0.x, -r0.z < 0.00000 ? c0.y "
           ": r0.x, -r0.z < 0.00000 ? c0.x : r0.y);\n"
           "}\n"
           "//MD5=bdb2a379:fd50a540:3ea1bf96:8406a7ed\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcMaskAlpha::InitProgramDescriptor(HgcMaskAlpha *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskAlpha_hgc_visible", "//Metal1.0     \n//LEN=000000037e\n[[ visible ]] FragmentOut HgcMaskAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0.CGFloat y = float(r0.w < hg_Params[0].y);\n"
    "    r0.z = r0.y;\n"
    "    r0.w = float(r0.w >= hg_Params[0].y);\n"
    "    r1.CGFloat x = r0.w;\n"
    "    r0.CGFloat x = hg_Params[0].x - c0.x;\n"
    "    r0.CGFloat x = abs(r0.x);\n"
    "    r0.xz = float2(-r0.xz >= c0.yy);\n"
    "    r0.xCGFloat y = fmin(r0.xx, r0.zy);\n"
    "    r0.CGFloat y = float(-r0.y < c0.y);\n"
    "    r0.z = float(-fabs(hg_Params[0].x) >= c0.y);\n"
    "    r0.w = fmin(r0.z, r0.w);\n"
    "    r0.xCGFloat y = select(r0.yy, c0.yx, -r0.xx < 0.00000f);\n"
    "    r1.CGFloat x = float(-r1.x >= c0.y);\n"
    "    r0.xCGFloat y = select(r0.xy, c0.xx, -r0.ww < 0.00000f);\n"
    "    r0.z = fmin(r0.z, r1.x);\n"
    "    output.color0 = select(r0.xxxy, c0.yyyx, -r0.zzzz < 0.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcMaskAlpha");
}

void sub_1B755A020(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75770;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755A120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B755A160()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B755A158);
}

void *HgcMaskAlpha::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskAlpha [hgc1]");
}

uint64_t HgcMaskAlpha::BindTexture(HgcMaskAlpha *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskAlpha::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcMaskAlpha::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 80);
    uint64_t v7 = 16 * *(int *)(a2 + 88);
    uint64_t v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v78) = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 32;
        do
        {
          uint64_t v11 = *(void *)(a1 + 408);
          float32x4_t v12 = *(float32x4_t *)(v11 + 16);
          v13.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10 - 32), *(int8x16_t *)(v6 + v10 - 32), 8uLL))).u64[0];
          v14.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10 - 16), *(int8x16_t *)(v6 + v10 - 16), 8uLL))).u64[0];
          v15.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10), *(int8x16_t *)(v6 + v10), 8uLL))).u64[0];
          v16.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10 + 16), *(int8x16_t *)(v6 + v10 + 16), 8uLL))).u64[0];
          v13.i64[1] = *(void *)(v6 + v10 - 24);
          v14.i64[1] = *(void *)(v6 + v10 - 8);
          v15.i64[1] = *(void *)(v6 + v10 + 8);
          v16.i64[1] = *(void *)(v6 + v10 + 24);
          int8x16_t v17 = *(int8x16_t *)(v11 + 32);
          int8x16_t v18 = *(int8x16_t *)(v11 + 48);
          float32x4_t v19 = (float32x4_t)vbslq_s8(v17, vextq_s8(v13, v13, 0xCuLL), v13);
          float32x4_t v20 = (float32x4_t)vbslq_s8(v17, vextq_s8(v14, v14, 0xCuLL), v14);
          float32x4_t v21 = (float32x4_t)vbslq_s8(v17, vextq_s8(v15, v15, 0xCuLL), v15);
          float32x4_t v22 = (float32x4_t)vbslq_s8(v17, vextq_s8(v16, v16, 0xCuLL), v16);
          float32x4_t v23 = (float32x4_t)vextq_s8(*(int8x16_t *)v11, *(int8x16_t *)v11, 8uLL);
          int8x16_t v24 = vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v19, v23)), (int8x16_t)v19);
          int8x16_t v25 = vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v20, v23)), (int8x16_t)v20);
          int8x16_t v26 = vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v21, v23)), (int8x16_t)v21);
          float32x4_t v27 = (float32x4_t)vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v22, v23)), (int8x16_t)v22);
          float32x4_t v28 = (float32x4_t)vextq_s8(v24, v24, 0xCuLL);
          float32x4_t v29 = (float32x4_t)vextq_s8(v25, v25, 0xCuLL);
          float32x4_t v30 = (float32x4_t)vextq_s8(v26, v26, 0xCuLL);
          int8x16_t v31 = (int8x16_t)vsubq_f32(*(float32x4_t *)v11, v12);
          int8x16_t v32 = *(int8x16_t *)(v11 + 64);
          float32x4_t v33 = *(float32x4_t *)(v11 + 80);
          int8x16_t v34 = vbslq_s8(v32, v31, v24);
          float32x4_t v35 = (float32x4_t)vbslq_s8(v32, v31, v25);
          int8x16_t v36 = vbslq_s8(v32, v31, v26);
          *(int8x8_t *)v37.f32 = vand_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v33.f32);
          *(int8x8_t *)v38.f32 = vand_s8(*(int8x8_t *)v35.f32, *(int8x8_t *)v33.f32);
          v37.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
          v38.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
          *(int8x8_t *)v35.f32 = vand_s8(*(int8x8_t *)v36.i8, *(int8x8_t *)v33.f32);
          v35.i64[1] = vextq_s8(v36, v36, 8uLL).u64[0];
          int8x16_t v39 = vbslq_s8(v32, v31, (int8x16_t)v27);
          *(int8x8_t *)v33.f32 = vand_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v33.f32);
          v33.i64[1] = vextq_s8(v39, v39, 8uLL).u64[0];
          float32x4_t v40 = *(float32x4_t *)(v11 + 96);
          int8x16_t v41 = *(int8x16_t *)(v11 + 112);
          int8x16_t v42 = vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v37), v40)), (int8x16_t)v37);
          int8x16_t v43 = vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v38), v40)), (int8x16_t)v38);
          int8x16_t v44 = vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v35), v40)), (int8x16_t)v35);
          float32x4_t v45 = (float32x4_t)vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v33), v40)), (int8x16_t)v33);
          int8x16_t v46 = *(int8x16_t *)(v11 + 128);
          int8x16_t v47 = *(int8x16_t *)(v11 + 144);
          *(int8x8_t *)v48.f32 = vqtbl1_s8(v42, *(int8x8_t *)v46.i8);
          int8x8_t v49 = (int8x8_t)vextq_s8(v46, v46, 8uLL).u64[0];
          *(int8x8_t *)&v48.u32[2] = vqtbl1_s8(v42, v49);
          *(int8x8_t *)v50.f32 = vqtbl1_s8(v43, *(int8x8_t *)v46.i8);
          *(int8x8_t *)v51.f32 = vqtbl1_s8(v44, *(int8x8_t *)v46.i8);
          *(int8x8_t *)&v50.u32[2] = vqtbl1_s8(v43, v49);
          *(int8x8_t *)&v51.u32[2] = vqtbl1_s8(v44, v49);
          *(int8x8_t *)v52.f32 = vqtbl1_s8((int8x16_t)v45, *(int8x8_t *)v46.i8);
          *(int8x8_t *)&v52.u32[2] = vqtbl1_s8((int8x16_t)v45, v49);
          float32x4_t v53 = (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL);
          v37.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 0), v48).u64[0];
          v38.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 0), v50).u64[0];
          v54.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.i8, 0), v51).u64[0];
          v37.i64[1] = v42.i64[1];
          v38.i64[1] = v43.i64[1];
          v54.i64[1] = v44.i64[1];
          v27.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0), v52).u64[0];
          v27.i64[1] = v45.i64[1];
          int8x16_t v55 = vorrq_s8(v46, *(int8x16_t *)v11);
          int8x16_t v56 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v55, v55, 8uLL), v40));
          float32x4_t v57 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v37))), (int8x16_t)v37));
          float32x4_t v58 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v38))), (int8x16_t)v38));
          float32x4_t v59 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v54))), (int8x16_t)v54));
          float32x4_t v60 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v27))), (int8x16_t)v27));
          float32x4_t v61 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v57), v57), (int8x16_t)v57);
          float32x4_t v62 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v58), v58), (int8x16_t)v58);
          int32x4_t v63 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v59), v59), (int8x16_t)v59);
          int32x4_t v64 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v60), v60), (int8x16_t)v60);
          float32x4_t v65 = vnegq_f32(v53);
          float32x4_t v66 = *(float32x4_t *)(v11 + 160);
          int8x16_t v67 = *(int8x16_t *)(v11 + 176);
          v57.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).u64[0];
          v58.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).u64[0];
          v59.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v63, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.i8, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v63.i8, 1))).u64[0];
          v60.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v64, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1))).u64[0];
          v45.i64[0] = v57.i64[0];
          v45.i64[1] = v61.i64[1];
          v61.i64[0] = v58.i64[0];
          v38.i64[0] = v59.i64[0];
          v61.i64[1] = v62.i64[1];
          v38.i64[1] = v63.i64[1];
          v62.i64[0] = v60.i64[0];
          v62.i64[1] = v64.i64[1];
          int8x16_t v68 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v28), v66));
          int8x16_t v69 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v29), v66));
          int8x16_t v70 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v30), v66));
          int8x16_t v71 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v65, v66));
          int32x4_t v72 = (int32x4_t)vminq_f32(v45, (float32x4_t)vextq_s8(v68, v68, 8uLL));
          int32x4_t v73 = (int32x4_t)vminq_f32(v61, (float32x4_t)vextq_s8(v69, v69, 8uLL));
          int32x4_t v74 = (int32x4_t)vminq_f32(v38, (float32x4_t)vextq_s8(v70, v70, 8uLL));
          int32x4_t v75 = (int32x4_t)vminq_f32(v62, (float32x4_t)vextq_s8(v71, v71, 8uLL));
          v57.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
          *(int8x8_t *)v62.f32 = vqtbl1_s8((int8x16_t)v57, *(int8x8_t *)v67.i8);
          v45.i64[0] = vextq_s8(v67, v67, 8uLL).u64[0];
          v58.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
          *(int8x8_t *)v28.f32 = vqtbl1_s8((int8x16_t)v58, *(int8x8_t *)v67.i8);
          v59.i64[1] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
          *(int8x8_t *)v64.i8 = vqtbl1_s8((int8x16_t)v59, *(int8x8_t *)v67.i8);
          *(int8x8_t *)&v62.u32[2] = vqtbl1_s8((int8x16_t)v57, *(int8x8_t *)v45.f32);
          v60.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
          *(int8x8_t *)v61.f32 = vqtbl1_s8((int8x16_t)v60, *(int8x8_t *)v67.i8);
          *(int8x8_t *)&v28.u32[2] = vqtbl1_s8((int8x16_t)v58, *(int8x8_t *)v45.f32);
          v64.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v59, *(int8x8_t *)v45.f32);
          *(int8x8_t *)&v61.u32[2] = vqtbl1_s8((int8x16_t)v60, *(int8x8_t *)v45.f32);
          float32x4_t v76 = *(float32x4_t *)(v11 + 192);
          float32x4_t v77 = (int8x16_t *)(v5 + v10);
          v77[-2] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v72, 2), v76), (int8x16_t)v40, (int8x16_t)v62);
          v77[-1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v73, 2), v76), (int8x16_t)v40, (int8x16_t)v28);
          int8x16_t *v77 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v74, 2), v76), (int8x16_t)v40, (int8x16_t)v64);
          v77[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v75, 2), v76), (int8x16_t)v40, (int8x16_t)v61);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v78) = -v9;
      }
      if ((int)v78 < v4)
      {
        uint64_t v78 = v78;
        do
        {
          uint64_t v79 = *(void *)(a1 + 408);
          float32x4_t v80 = *(float32x4_t *)(v79 + 16);
          v81.i64[0] = vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(*(float32x4_t *)v79, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + 16 * v78), *(int8x16_t *)(v6 + 16 * v78), 8uLL))).u64[0];
          v81.i64[1] = *(void *)(v6 + 16 * v78 + 8);
          int8x16_t v82 = *(int8x16_t *)(v79 + 32);
          float32x4_t v83 = *(float32x4_t *)(v79 + 48);
          float32x4_t v84 = (float32x4_t)vbslq_s8(v82, vextq_s8(v81, v81, 0xCuLL), v81);
          int8x16_t v85 = vbslq_s8((int8x16_t)v83, vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32(v84, (float32x4_t)vextq_s8(*(int8x16_t *)v79, *(int8x16_t *)v79, 8uLL))), (int8x16_t)v84);
          int8x16_t v86 = vbslq_s8(*(int8x16_t *)(v79 + 64), (int8x16_t)vsubq_f32(*(float32x4_t *)v79, v80), v85);
          *(int8x8_t *)v87.f32 = vand_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)(v79 + 80));
          v87.i64[1] = vextq_s8(v86, v86, 8uLL).u64[0];
          float32x4_t v88 = *(float32x4_t *)(v79 + 96);
          int8x16_t v89 = vbslq_s8(*(int8x16_t *)(v79 + 112), vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32(vnegq_f32(v87), v88)), (int8x16_t)v87);
          int8x16_t v90 = *(int8x16_t *)(v79 + 128);
          *(int8x8_t *)v91.f32 = vqtbl1_s8(v89, *(int8x8_t *)v90.i8);
          *(int8x8_t *)&v91.u32[2] = vqtbl1_s8(v89, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
          v91.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.i8, 0), v91).u64[0];
          v91.i64[1] = v89.i64[1];
          int8x16_t v92 = vorrq_s8(v90, *(int8x16_t *)v79);
          float32x4_t v93 = (float32x4_t)vbslq_s8(v82, vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v92, v92, 8uLL), v88)), vbslq_s8(*(int8x16_t *)(v79 + 144), vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v88, vnegq_f32(v91))), (int8x16_t)v91));
          int32x4_t v94 = (int32x4_t)vbslq_s8((int8x16_t)v83, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v93), v93), (int8x16_t)v93);
          float32x4_t v95 = *(float32x4_t *)(v79 + 160);
          int8x16_t v96 = *(int8x16_t *)(v79 + 176);
          v82.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v94, 3), v88), (int8x16_t)v80, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 0), v88), (int8x16_t)v95, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 1))).u64[0];
          v83.i64[0] = v82.i64[0];
          v83.i64[1] = v94.i64[1];
          int8x16_t v97 = vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v85, v85, 0xCuLL)), v95));
          int32x4_t v98 = (int32x4_t)vminq_f32(v83, (float32x4_t)vextq_s8(v97, v97, 8uLL));
          v82.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
          *(int8x8_t *)v85.i8 = vqtbl1_s8(v82, *(int8x8_t *)v96.i8);
          v85.u64[1] = (unint64_t)vqtbl1_s8(v82, (int8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL));
          *(int8x16_t *)(v5 + 16 * v78++) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v98, 2), *(float32x4_t *)(v79 + 192)), (int8x16_t)v88, v85);
        }
        while (v78 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskAlpha::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HgcMaskAlpha::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

void HgcMaskAlpha::HgcMaskAlpha(HgcMaskAlpha *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10971B8;
  operator new();
}

void sub_1B755A9D8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskAlpha::~HgcMaskAlpha(HGNode *this)
{
  *(void *)this = &unk_1F10971B8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C400F93440CLL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcMaskAlpha::~HgcMaskAlpha(this);

  HGObject::operator delete(v1);
}

uint64_t HgcMaskAlpha::SetParameter(HgcMaskAlpha *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (float *)*((void *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  float *v8 = a3;
  v8[1] = a4;
  double v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcMaskAlpha::GetParameter(HgcMaskAlpha *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcSimpleAdd::GetProgram(HgcSimpleAdd *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002e0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    CGFloat r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r1) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b9d0f3ff:6eb0ab3e:bf9eb7ca:83d31c9c\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002c3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    CGFloat r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=c8c34beb:ec63a391:4a47a9b1:6168da55\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000241\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    CGFloat r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1 + r0;\n"
           "}\n"
           "//MD5=eda39bd3:057505f8:05bb095c:802de8a1\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcSimpleAdd::InitProgramDescriptor(HgcSimpleAdd *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSimpleAdd_hgc_visible", "//Metal1.0     \n//LEN=000000011e\n[[ visible ]] FragmentOut HgcSimpleAdd_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    CGFloat r1 = color0;\n"
    "    output.color0 = r1 + r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcSimpleAdd");
}

void sub_1B755AC48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755AD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B755ADD0()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B755ADC8);
}

void *HgcSimpleAdd::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSimpleAdd [hgc1]");
}

uint64_t HgcSimpleAdd::BindTexture(HgcSimpleAdd *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSimpleAdd::Bind(uint64_t a1)
{
  return 0;
}

uint64_t HgcSimpleAdd::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 80);
    uint64_t v7 = 16 * *(int *)(a2 + 104);
    uint64_t v8 = *(void *)(a2 + 96);
    uint64_t v9 = 16 * *(int *)(a2 + 88);
    uint64_t v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = 32;
        do
        {
          float32x4_t v13 = vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16));
          float32x4_t v14 = vaddq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12));
          float32x4_t v15 = vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16));
          int8x16_t v16 = (float32x4_t *)(v5 + v12);
          v16[-2] = vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)(v6 + v12 - 32));
          v16[-1] = v13;
          *int8x16_t v16 = v14;
          v16[1] = v15;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v17) = -v11;
      }
      if ((int)v17 < v4)
      {
        uint64_t v17 = v17;
        do
        {
          *(float32x4_t *)(v5 + 16 * v17) = vaddq_f32(*(float32x4_t *)(v8 + 16 * v17), *(float32x4_t *)(v6 + 16 * v17));
          ++v17;
        }
        while (v17 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSimpleAdd::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HgcSimpleAdd::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return a4;
  }
}

void HgcSimpleAdd::HgcSimpleAdd(HgcSimpleAdd *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1097420;
  operator new();
}

void sub_1B755B144(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSimpleAdd::~HgcSimpleAdd(HGNode *this)
{
  *(void *)this = &unk_1F1097420;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0xC400A2AC0F1);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcSimpleAdd::~HgcSimpleAdd(this);

  HGObject::operator delete(v1);
}

uint64_t HgcSimpleAdd::SetParameter(HgcSimpleAdd *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcSimpleAdd::GetParameter(HgcSimpleAdd *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcLevels::GetProgram(HgcLevels *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000059a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    CGFloat r1 = half4(hg_Params[0]) - half4(hg_Params[2]);\n"
             "    CGFloat r1 = r1 + c0.xxxx;\n"
             "    r2 = half4(hg_Params[1]) - half4(hg_Params[3]);\n"
             "    r3 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    CGFloat r1 = r2/r1;\n"
             "    r2 = r1*-half4(hg_Params[0]) + half4(hg_Params[1]);\n"
             "    CGFloat r1 = clamp(r3*r1 + r2, 0.00000h, 1.00000h);\n"
             "    CGFloat r1 = clamp(r1 + c0.xxxx, 0.00000h, 1.00000h);\n"
             "    r3 = half4(hg_Params[5]) - half4(hg_Params[7]);\n"
             "    r3 = r3 + c0.xxxx;\n"
             "    r2 = half4(hg_Params[6]) - half4(hg_Params[8]);\n"
             "    CGFloat r1 = pow(r1, half4(hg_Params[4]));\n"
             "    r3 = r2/r3;\n"
             "    r2 = r3*-half4(hg_Params[5]) + half4(hg_Params[6]);\n"
             "    CGFloat r1 = clamp(r1*r3 + r2, 0.00000h, 1.00000h);\n"
             "    CGFloat r1 = clamp(r1 + c0.xxxx, 0.00000h, 1.00000h);\n"
             "    CGFloat r1 = pow(r1, half4(hg_Params[9]));\n"
             "    r1.xyz = r1.www*r1.xyz;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[10]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a7a0e798:4ed60d72:7be40f84:21b0661b\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000b:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000525\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    CGFloat r1 = hg_Params[0] - hg_Params[2];\n"
             "    CGFloat r1 = r1 + c0.xxxx;\n"
             "    r2 = hg_Params[1] - hg_Params[3];\n"
             "    r3 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    CGFloat r1 = r2/r1;\n"
             "    r2 = r1*-hg_Params[0] + hg_Params[1];\n"
             "    CGFloat r1 = clamp(r3*r1 + r2, 0.00000f, 1.00000f);\n"
             "    CGFloat r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
             "    r3 = hg_Params[5] - hg_Params[7];\n"
             "    r3 = r3 + c0.xxxx;\n"
             "    r2 = hg_Params[6] - hg_Params[8];\n"
             "    CGFloat r1 = pow(r1, hg_Params[4]);\n"
             "    r3 = r2/r3;\n"
             "    r2 = r3*-hg_Params[5] + hg_Params[6];\n"
             "    CGFloat r1 = clamp(r1*r3 + r2, 0.00000f, 1.00000f);\n"
             "    CGFloat r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
             "    CGFloat r1 = pow(r1, hg_Params[9]);\n"
             "    r1.xyz = r1.www*r1.xyz;\n"
             "    output.color0 = mix(r0, r1, hg_Params[10]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c23151d5:de73ee7f:ff1ea122:1f2df5d9\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000b:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006d8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "uniform mediump vec4 hg_ProgramLocal5;\n"
           "uniform mediump vec4 hg_ProgramLocal6;\n"
           "uniform mediump vec4 hg_ProgramLocal7;\n"
           "uniform mediump vec4 hg_ProgramLocal8;\n"
           "uniform mediump vec4 hg_ProgramLocal9;\n"
           "uniform mediump vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    CGFloat r1 = hg_ProgramLocal0 - hg_ProgramLocal2;\n"
           "    CGFloat r1 = r1 + c0.xxxx;\n"
           "    r2 = hg_ProgramLocal1 - hg_ProgramLocal3;\n"
           "    r3 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    CGFloat r1 = r2/r1;\n"
           "    r2 = r1*-hg_ProgramLocal0 + hg_ProgramLocal1;\n"
           "    CGFloat r1 = clamp(r3*r1 + r2, vec4(0.00000), vec4(1.00000));\n"
           "    CGFloat r1 = clamp(r1 + c0.xxxx, vec4(0.00000), vec4(1.00000));\n"
           "    r3 = hg_ProgramLocal5 - hg_ProgramLocal7;\n"
           "    r3 = r3 + c0.xxxx;\n"
           "    r2 = hg_ProgramLocal6 - hg_ProgramLocal8;\n"
           "    CGFloat r1 = pow(r1, hg_ProgramLocal4);\n"
           "    r3 = r2/r3;\n"
           "    r2 = r3*-hg_ProgramLocal5 + hg_ProgramLocal6;\n"
           "    CGFloat r1 = clamp(r1*r3 + r2, vec4(0.00000), vec4(1.00000));\n"
           "    CGFloat r1 = clamp(r1 + c0.xxxx, vec4(0.00000), vec4(1.00000));\n"
           "    CGFloat r1 = pow(r1, hg_ProgramLocal9);\n"
           "    r1.xyz = r1.www*r1.xyz;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal10);\n"
           "}\n"
           "//MD5=52a0e8cd:61c1d4cc:431cd2e4:db34cb52\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000b:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLevels::InitProgramDescriptor(HgcLevels *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLevels_hgc_visible", "//Metal1.0     \n//LEN=00000003f8\n[[ visible ]] FragmentOut HgcLevels_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    CGFloat r1 = hg_Params[0] - hg_Params[2];\n"
    "    CGFloat r1 = r1 + c0.xxxx;\n"
    "    r2 = hg_Params[1] - hg_Params[3];\n"
    "    r3 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    CGFloat r1 = r2/r1;\n"
    "    r2 = r1*-hg_Params[0] + hg_Params[1];\n"
    "    CGFloat r1 = clamp(r3*r1 + r2, 0.00000f, 1.00000f);\n"
    "    CGFloat r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
    "    r3 = hg_Params[5] - hg_Params[7];\n"
    "    r3 = r3 + c0.xxxx;\n"
    "    r2 = hg_Params[6] - hg_Params[8];\n"
    "    CGFloat r1 = pow(r1, hg_Params[4]);\n"
    "    r3 = r2/r3;\n"
    "    r2 = r3*-hg_Params[5] + hg_Params[6];\n"
    "    CGFloat r1 = clamp(r1*r3 + r2, 0.00000f, 1.00000f);\n"
    "    CGFloat r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
    "    CGFloat r1 = pow(r1, hg_Params[9]);\n"
    "    r1.xyz = r1.www*r1.xyz;\n"
    "    output.color0 = mix(r0, r1, hg_Params[10]);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcLevels");
}

void sub_1B755B314(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75800;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755B414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B755B454()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B755B44CLL);
}

void *HgcLevels::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLevels [hgc1]");
}

uint64_t HgcLevels::BindTexture(HgcLevels *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLevels::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcLevels::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 80);
    uint64_t v7 = 16 * *(int *)(a2 + 24);
    uint64_t v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        unsigned int v108 = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 16;
        do
        {
          float32x4_t v11 = *(float32x4_t *)(v6 + v10 - 16);
          float32x4_t v12 = *(float32x4_t *)(v6 + v10);
          uint64_t v13 = *(void *)(a1 + 408);
          float32x4_t v14 = *(float32x4_t *)(v13 + 16);
          float32x4_t v16 = *(float32x4_t *)(v13 + 160);
          float32x4_t v15 = *(float32x4_t *)(v13 + 176);
          float32x4_t v17 = vaddq_f32(vsubq_f32(*(float32x4_t *)v13, *(float32x4_t *)(v13 + 32)), v15);
          float32x4_t v19 = *(float32x4_t *)(v13 + 192);
          float32x4_t v18 = *(float32x4_t *)(v13 + 208);
          float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v19);
          float32x4_t v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v19);
          float32x4_t v22 = vmulq_f32(vrecpeq_f32(v20), v18);
          float32x4_t v23 = vmulq_f32(vrecpeq_f32(v21), v18);
          int8x16_t v24 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v20));
          int8x16_t v25 = (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v21));
          int8x16_t v26 = *(int8x16_t *)(v13 + 224);
          int8x16_t v27 = *(int8x16_t *)(v13 + 240);
          float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v26, v24), v27);
          float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(v26, v25), v27);
          float32x4_t v30 = vmulq_f32(v11, v28);
          float32x4_t v32 = *(float32x4_t *)(v13 + 256);
          float32x4_t v31 = *(float32x4_t *)(v13 + 272);
          float32x4_t v33 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v17)), v32), v31);
          float32x4_t v34 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)(v13 + 48)), vmulq_f32(v33, vrecpsq_f32(v17, v33)));
          float32x4_t v35 = vsubq_f32(v14, vmulq_f32(*(float32x4_t *)v13, v34));
          float32x4_t v36 = vaddq_f32(vmulq_f32(v30, v34), v35);
          float32x4_t v37 = vaddq_f32(vmulq_f32(vmulq_f32(v12, v29), v34), v35);
          float32x4_t v39 = *(float32x4_t *)(v13 + 288);
          float32x4_t v38 = *(float32x4_t *)(v13 + 304);
          float32x4_t v40 = vminq_f32(vmaxq_f32(vaddq_f32(v15, vminq_f32(vmaxq_f32(v36, v39), v38)), v39), v38);
          float32x4_t v41 = *(float32x4_t *)(v13 + 96);
          float32x4_t v43 = *(float32x4_t *)(v13 + 64);
          float32x4_t v42 = *(float32x4_t *)(v13 + 80);
          float32x4_t v44 = vminq_f32(vmaxq_f32(vaddq_f32(v15, vminq_f32(vmaxq_f32(v37, v39), v38)), v39), v38);
          float32x4_t v45 = vaddq_f32(v15, vsubq_f32(v42, *(float32x4_t *)(v13 + 112)));
          int8x16_t v47 = *(int8x16_t *)(v13 + 320);
          float32x4_t v46 = *(float32x4_t *)(v13 + 336);
          float32x4_t v48 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v40), (int8x16_t)v38);
          float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v44), (int8x16_t)v38);
          int8x16_t v51 = *(int8x16_t *)(v13 + 352);
          float32x4_t v50 = *(float32x4_t *)(v13 + 368);
          float32x4_t v52 = *(float32x4_t *)(v13 + 384);
          float32x4_t v53 = *(float32x4_t *)(v13 + 400);
          float32x4_t v54 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v48, v52));
          float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v49, v52));
          float32x4_t v56 = vsubq_f32(vsubq_f32(v48, v38), vmulq_f32(vmulq_f32(v53, v54), v48));
          float32x4_t v57 = vsubq_f32(vsubq_f32(v49, v38), vmulq_f32(vmulq_f32(v53, v55), v49));
          float32x4_t v58 = *(float32x4_t *)(v13 + 416);
          float32x4_t v59 = *(float32x4_t *)(v13 + 432);
          float32x4_t v60 = *(float32x4_t *)(v13 + 448);
          float32x4_t v61 = *(float32x4_t *)(v13 + 464);
          float32x4_t v62 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v44, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v44))), v50), v55), vmulq_f32(v57, vaddq_f32(vaddq_f32(v60, vmulq_f32(v57, v61)), vmulq_f32(vmulq_f32(v57, v57), vaddq_f32(v58, vmulq_f32(v59, v57))))));
          float32x4_t v63 = vmulq_f32(v43, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v40, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v40))), v50), v54), vmulq_f32(v56, vaddq_f32(vaddq_f32(v60, vmulq_f32(v56, v61)), vmulq_f32(vmulq_f32(v56, v56), vaddq_f32(v58, vmulq_f32(v59, v56)))))));
          float32x4_t v64 = vmulq_f32(v43, v62);
          float32x4_t v66 = *(float32x4_t *)(v13 + 480);
          float32x4_t v65 = *(float32x4_t *)(v13 + 496);
          float32x4_t v67 = vmaxq_f32(v63, v66);
          float32x4_t v68 = vmaxq_f32(v64, v66);
          float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
          float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
          float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v69, v67)));
          float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v70, v68)));
          float32x4_t v73 = vsubq_f32(v67, v71);
          float32x4_t v74 = *(float32x4_t *)(v13 + 512);
          float32x4_t v75 = *(float32x4_t *)(v13 + 528);
          float32x4_t v76 = vsubq_f32(v68, v72);
          int32x4_t v77 = *(int32x4_t *)(v13 + 544);
          int8x16_t v78 = *(int8x16_t *)(v13 + 560);
          float32x4_t v79 = vmulq_f32(vaddq_f32(v38, vmulq_f32(v73, vaddq_f32(v75, vmulq_f32(v73, vaddq_f32(v65, vmulq_f32(v74, v73)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v77, vcvtq_s32_f32(v71)), 0x17uLL));
          float32x4_t v80 = *(float32x4_t *)(v13 + 144);
          float32x4_t v81 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v45)), v32), v31);
          float32x4_t v82 = vmulq_f32(vsubq_f32(v41, *(float32x4_t *)(v13 + 128)), vmulq_f32(v81, vrecpsq_f32(v45, v81)));
          float32x4_t v83 = vsubq_f32(v41, vmulq_f32(v42, v82));
          float32x4_t v84 = vaddq_f32(v15, vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v79, v82), v83), v39), v38));
          float32x4_t v85 = vmaxq_f32(vaddq_f32(v15, vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(vmulq_f32(vaddq_f32(v38, vmulq_f32(v76, vaddq_f32(v75, vmulq_f32(v76, vaddq_f32(v65, vmulq_f32(v74, v76)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v77, vcvtq_s32_f32(v72)), 0x17uLL)), v82), v83), v39), v38)), v39);
          float32x4_t v86 = vminq_f32(vmaxq_f32(v84, v39), v38);
          float32x4_t v87 = vminq_f32(v85, v38);
          float32x4_t v88 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v86), (int8x16_t)v38);
          float32x4_t v89 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v87), (int8x16_t)v38);
          float32x4_t v90 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v86))), v50);
          float32x4_t v91 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v87, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v87))), v50);
          float32x4_t v92 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v88, v52));
          float32x4_t v93 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v89, v52));
          float32x4_t v94 = vaddq_f32(v91, v93);
          float32x4_t v95 = vsubq_f32(vsubq_f32(v88, v38), vmulq_f32(vmulq_f32(v53, v92), v88));
          float32x4_t v96 = vsubq_f32(vsubq_f32(v89, v38), vmulq_f32(vmulq_f32(v53, v93), v89));
          float32x4_t v97 = vmaxq_f32(vmulq_f32(v80, vaddq_f32(vaddq_f32(v90, v92), vmulq_f32(v95, vaddq_f32(vaddq_f32(v60, vmulq_f32(v61, v95)), vmulq_f32(vmulq_f32(v95, v95), vaddq_f32(v58, vmulq_f32(v59, v95))))))), v66);
          float32x4_t v98 = vmaxq_f32(vmulq_f32(v80, vaddq_f32(v94, vmulq_f32(v96, vaddq_f32(vaddq_f32(v60, vmulq_f32(v61, v96)), vmulq_f32(vmulq_f32(v96, v96), vaddq_f32(v58, vmulq_f32(v59, v96))))))), v66);
          float32x4_t v99 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
          float32x4_t v100 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
          float32x4_t v101 = vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v99, v97)));
          float32x4_t v102 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v100, v98)));
          float32x4_t v103 = vsubq_f32(v97, v101);
          float32x4_t v104 = vsubq_f32(v98, v102);
          float32x4_t v105 = vmulq_f32(vaddq_f32(v38, vmulq_f32(v103, vaddq_f32(v75, vmulq_f32(v103, vaddq_f32(v65, vmulq_f32(v74, v103)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v101), v77), 0x17uLL));
          float32x4_t v106 = vmulq_f32(vaddq_f32(v38, vmulq_f32(v104, vaddq_f32(v75, vmulq_f32(v104, vaddq_f32(v65, vmulq_f32(v74, v104)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v102), v77), 0x17uLL));
          int8x16_t v107 = (float32x4_t *)(v5 + v10);
          v107[-1] = vaddq_f32(v11, vmulq_f32(v16, vsubq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v105, (int8x16_t)vmulq_laneq_f32(v105, v105, 3)), v11)));
          *int8x16_t v107 = vaddq_f32(v12, vmulq_f32(v16, vsubq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v106, (int8x16_t)vmulq_laneq_f32(v106, v106, 3)), v12)));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        unsigned int v108 = -v9;
      }
      if ((int)v108 < v4)
      {
        float32x4_t v109 = *(float32x4_t *)(v6 + 16 * v108);
        uint64_t v110 = *(void *)(a1 + 408);
        float32x4_t v111 = *(float32x4_t *)(v110 + 16);
        float32x4_t v112 = *(float32x4_t *)(v110 + 176);
        float32x4_t v113 = vaddq_f32(vsubq_f32(*(float32x4_t *)v110, *(float32x4_t *)(v110 + 32)), v112);
        float32x4_t v114 = *(float32x4_t *)(v110 + 208);
        float32x4_t v115 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 3), *(float32x4_t *)(v110 + 192));
        float32x4_t v116 = vmulq_f32(vrecpeq_f32(v115), v114);
        float32x4_t v117 = vmulq_f32(v109, (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v110 + 224), (int8x16_t)vmulq_f32(v116, vrecpsq_f32(v116, v115))), *(int8x16_t *)(v110 + 240)));
        float32x4_t v118 = *(float32x4_t *)(v110 + 256);
        float32x4_t v119 = *(float32x4_t *)(v110 + 272);
        float32x4_t v120 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpeq_f32(v113)), v118), v119);
        float32x4_t v121 = vmulq_f32(vsubq_f32(v111, *(float32x4_t *)(v110 + 48)), vmulq_f32(v120, vrecpsq_f32(v113, v120)));
        float32x4_t v122 = vaddq_f32(vmulq_f32(v117, v121), vsubq_f32(v111, vmulq_f32(*(float32x4_t *)v110, v121)));
        float32x4_t v123 = *(float32x4_t *)(v110 + 288);
        float32x4_t v124 = *(float32x4_t *)(v110 + 304);
        float32x4_t v125 = vminq_f32(vmaxq_f32(vaddq_f32(v112, vminq_f32(vmaxq_f32(v122, v123), v124)), v123), v124);
        float32x4_t v126 = *(float32x4_t *)(v110 + 96);
        float32x4_t v127 = *(float32x4_t *)(v110 + 80);
        float32x4_t v128 = vaddq_f32(v112, vsubq_f32(v127, *(float32x4_t *)(v110 + 112)));
        int8x16_t v129 = *(int8x16_t *)(v110 + 320);
        float32x4_t v130 = *(float32x4_t *)(v110 + 336);
        float32x4_t v131 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v125), (int8x16_t)v124);
        int8x16_t v132 = *(int8x16_t *)(v110 + 352);
        float32x4_t v133 = *(float32x4_t *)(v110 + 368);
        float32x4_t v134 = *(float32x4_t *)(v110 + 384);
        float32x4_t v135 = *(float32x4_t *)(v110 + 400);
        float32x4_t v136 = (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v131, v134));
        float32x4_t v137 = vsubq_f32(vsubq_f32(v131, v124), vmulq_f32(vmulq_f32(v135, v136), v131));
        float32x4_t v138 = *(float32x4_t *)(v110 + 416);
        float32x4_t v139 = *(float32x4_t *)(v110 + 432);
        float32x4_t v140 = *(float32x4_t *)(v110 + 448);
        float32x4_t v141 = *(float32x4_t *)(v110 + 464);
        float32x4_t v142 = vmulq_f32(*(float32x4_t *)(v110 + 64), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v125, 0x17uLL)), (float32x4_t)vandq_s8(v132, (int8x16_t)vcgtq_f32(v130, v125))), v133), v136), vmulq_f32(v137, vaddq_f32(vaddq_f32(v140, vmulq_f32(v137, v141)), vmulq_f32(vmulq_f32(v137, v137), vaddq_f32(v138, vmulq_f32(v139, v137)))))));
        float32x4_t v143 = *(float32x4_t *)(v110 + 480);
        float32x4_t v144 = *(float32x4_t *)(v110 + 496);
        float32x4_t v145 = vmaxq_f32(v142, v143);
        float32x4_t v146 = vcvtq_f32_s32(vcvtq_s32_f32(v145));
        float32x4_t v147 = vsubq_f32(v146, (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v146, v145)));
        float32x4_t v148 = vsubq_f32(v145, v147);
        float32x4_t v150 = *(float32x4_t *)(v110 + 512);
        float32x4_t v149 = *(float32x4_t *)(v110 + 528);
        int32x4_t v151 = *(int32x4_t *)(v110 + 544);
        float32x4_t v152 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpeq_f32(v128)), v118), v119);
        float32x4_t v153 = vmulq_f32(vsubq_f32(v126, *(float32x4_t *)(v110 + 128)), vmulq_f32(v152, vrecpsq_f32(v128, v152)));
        float32x4_t v154 = vminq_f32(vmaxq_f32(vaddq_f32(v112, vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v153, vmulq_f32(vaddq_f32(v124, vmulq_f32(v148, vaddq_f32(v149, vmulq_f32(v148, vaddq_f32(v144, vmulq_f32(v150, v148)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v151, vcvtq_s32_f32(v147)), 0x17uLL))), vsubq_f32(v126, vmulq_f32(v127, v153))), v123), v124)), v123),
                 v124);
        float32x4_t v155 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v154), (int8x16_t)v124);
        float32x4_t v156 = (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v155, v134));
        float32x4_t v157 = vsubq_f32(vsubq_f32(v155, v124), vmulq_f32(vmulq_f32(v135, v156), v155));
        float32x4_t v158 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v110 + 144), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v154, 0x17uLL)), (float32x4_t)vandq_s8(v132, (int8x16_t)vcgtq_f32(v130, v154))), v133), v156), vmulq_f32(v157, vaddq_f32(vaddq_f32(v140, vmulq_f32(v141, v157)), vmulq_f32(vmulq_f32(v157, v157), vaddq_f32(v138, vmulq_f32(v139, v157))))))), v143);
        float32x4_t v159 = vcvtq_f32_s32(vcvtq_s32_f32(v158));
        float32x4_t v160 = vsubq_f32(v159, (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v159, v158)));
        float32x4_t v161 = vsubq_f32(v158, v160);
        float32x4_t v162 = vmulq_f32(vaddq_f32(v124, vmulq_f32(v161, vaddq_f32(v149, vmulq_f32(v161, vaddq_f32(v144, vmulq_f32(v150, v161)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v160), v151), 0x17uLL));
        *(float32x4_t *)(v5 + 16 * v108) = vaddq_f32(v109, vmulq_f32(*(float32x4_t *)(v110 + 160), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v110 + 560), (int8x16_t)v162, (int8x16_t)vmulq_laneq_f32(v162, v162, 3)), v109)));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLevels::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HgcLevels::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

void HgcLevels::HgcLevels(HgcLevels *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F1097688;
  operator new();
}

void sub_1B755C044(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLevels::~HgcLevels(HGNode *this)
{
  *(void *)this = &unk_1F1097688;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4044C9E2E8);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcLevels::~HgcLevels(this);

  HGObject::operator delete(v1);
}

uint64_t HgcLevels::SetParameter(HgcLevels *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  float *v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  double v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcLevels::GetParameter(HgcLevels *this, unsigned int a2, float *a3)
{
  if (a2 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double HgcLevels::State::State(HgcLevels::State *this)
{
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0u;
  *((_OWORD *)this + 1pthread_cond_init((pthread_cond_t *)this, 0) = 0u;
  *((int32x4_t *)this + 1HGRenderQueue::CancelAllRenderJobs(*this, 1) = vdupq_n_s32(0x3727C5ACu);
  *((int32x4_t *)this + 12) = vdupq_n_s32(0x358637BDu);
  *((int32x4_t *)this + 13) = vdupq_n_s32(0x3F804020u);
  *((_OWORD *)this + 14) = xmmword_1B7E75810;
  *((_OWORD *)this + 15) = xmmword_1B7E734D0;
  *(void *)&long long v1 = 0x80000000800000;
  *((void *)&v1 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x80000000800000;
  *((_OWORD *)this + 16) = v1;
  *((int32x4_t *)this + 17) = vdupq_n_s32(0x7F7FFFFFu);
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 19) = _Q0;
  *((int32x4_t *)this + 2pthread_cond_init((pthread_cond_t *)this, 0) = vdupq_n_s32(0x807FFFFF);
  *(void *)&_Q0 = 0x80000000800000;
  *((void *)&_Q0 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x80000000800000;
  *((_OWORD *)this + 2HGRenderQueue::CancelAllRenderJobs(*this, 1) = _Q0;
  *((int32x4_t *)this + 22) = vdupq_n_s32(0x7F800000u);
  *((int32x4_t *)this + 23) = vdupq_n_s32(0x42FE0000u);
  *((int32x4_t *)this + 24) = vdupq_n_s32(0x3FB504F3u);
  *(void *)&_Q0 = 0x3F0000003F000000;
  *((void *)&_Q0 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x3F0000003F000000;
  *((_OWORD *)this + 25) = _Q0;
  *((int32x4_t *)this + 26) = vdupq_n_s32(0x3F047D53u);
  *((int32x4_t *)this + 27) = vdupq_n_s32(0xBEA9AC62);
  *((int32x4_t *)this + 28) = vdupq_n_s32(0x3FB89666u);
  *((int32x4_t *)this + 29) = vdupq_n_s32(0xBF398D4B);
  *((int32x4_t *)this + 3pthread_cond_init((pthread_cond_t *)this, 0) = vdupq_n_s32(0xC2FE0000);
  *((int32x4_t *)this + 3HGRenderQueue::CancelAllRenderJobs(*this, 1) = vdupq_n_s32(0x3E6E687Cu);
  *((int32x4_t *)this + 32) = vdupq_n_s32(0x3D96C2DFu);
  *(void *)&long long v7 = 0x7F0000007FLL;
  *((void *)&v7 + HGRenderQueue::CancelAllRenderJobs(*this, 1) = 0x7F0000007FLL;
  *((int32x4_t *)this + 33) = vdupq_n_s32(0x3F318D85u);
  *((_OWORD *)this + 34) = v7;
  double result = 0.0;
  *((_OWORD *)this + 35) = xmmword_1B7E752F0;
  return result;
}

const char *HgcSatCurves::GetProgram(HgcSatCurves *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return aMetal10Len0000_33;
    }
    else {
      return aMetal10Len0000_34;
    }
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_10;
  }
}

void HgcSatCurves::InitProgramDescriptor(HgcSatCurves *this, HGProgramDescriptor *a2)
{
}

void sub_1B755C400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75830;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755C700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B755C780()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B755C778);
}

void *HgcSatCurves::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSatCurves [hgc1]");
}

uint64_t HgcSatCurves::BindTexture(HgcSatCurves *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 0, 0, 0, 0);
      int v4 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v4)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        goto LABEL_18;
      }
      return result;
    case 1:
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
        (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
      }
      v6.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v7.n128_u64[0] = 0;
      v8.n128_u64[0] = 0;
      v9.n128_u64[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 15, v6, v7, v8, v9);
      goto LABEL_18;
    case 2:
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
        (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
      }
      v10.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v11.n128_u64[0] = 0;
      v12.n128_u64[0] = 0;
      v13.n128_u64[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 16, v10, v11, v12, v13);
      goto LABEL_18;
    case 3:
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
        (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
      }
      v14.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v15.n128_u64[0] = 0;
      v16.n128_u64[0] = 0;
      v17.n128_u64[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 18, v14, v15, v16, v17);
      goto LABEL_18;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))
      {
        float32x4_t v22 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136);
        v20.n128_u32[0] = 1.0;
        v21.n128_u32[0] = 1.0;
      }
      else
      {
        v20.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        float32x4_t v22 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136);
        v21.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v18.n128_f32[0] = (float)*((int *)a2 + 60);
      v19.n128_f32[0] = (float)*((int *)a2 + 61);
      v22(a2, 17, v18, v19, v20, v21);
LABEL_18:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcSatCurves::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcSatCurves::RenderTile(HgcSatCurves *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcSatCurves *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = *((void *)a2 + 10);
    __asm { FMOV            V1.2S, #-1.0 }
    float32x2_t v159 = (float32x2_t)COERCE_UNSIGNED_INT((float)(*((_DWORD *)a2 + 66) - *((_DWORD *)a2 + 64)));
    float32x2_t v160 = (float32x2_t)COERCE_UNSIGNED_INT((float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56)));
    float32x2_t v157 = vadd_f32(v160, _D1);
    float32x2_t v158 = (float32x2_t)COERCE_UNSIGNED_INT((float)(*((_DWORD *)a2 + 62) - *((_DWORD *)a2 + 60)));
    float32x2_t v156 = vadd_f32(v158, _D1);
    float32x2_t v153 = vadd_f32(v156, _D1);
    float32x2_t v154 = vadd_f32(v157, _D1);
    float32x2_t v155 = vadd_f32(v159, _D1);
    float32x2_t v152 = vadd_f32(v155, _D1);
    uint64_t v18 = 16 * *((int *)a2 + 6);
    uint64_t v19 = 16 * *((int *)a2 + 22);
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 >= 1)
      {
        uint64_t v21 = 0;
        do
        {
          int8x16_t v22 = *(int8x16_t *)(v12 + v21);
          uint64_t v23 = *((void *)this + 51);
          float32x4_t v24 = *(float32x4_t *)(v23 + 48);
          int32x4_t v25 = (int32x4_t)vmulq_f32((float32x4_t)v22, v24);
          float32x4_t v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v25, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)));
          float32x4_t v27 = *(float32x4_t *)(v23 + 144);
          float32x4_t v28 = *(float32x4_t *)(v23 + 160);
          float32x2_t v29 = vmul_f32(v160, vmin_f32(vmax_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v27.f32), *(float32x2_t *)v28.f32));
          if (v5)
          {
            float32x2_t v30 = vmin_f32(vmax_f32(vadd_f32(v29, (float32x2_t)0xBF000000BF000000), 0), v157);
            int32x2_t v31 = vcvt_s32_f32(vmin_f32(v30, v154));
            uint64_t v32 = (float32x4_t *)(*((void *)a2 + 12) + 16 * v31.i32[0]);
            *(void *)&long long v33 = vaddq_f32(*v32, vmulq_n_f32(vsubq_f32(v32[1], *v32), vsub_f32(v30, vcvt_f32_s32(v31)).f32[0])).u64[0];
          }
          else
          {
            long long v33 = *(_OWORD *)(*((void *)a2 + 12) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v29, 0), v157)).i32[0]);
          }
          float32x4_t v34 = vsubq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0));
          float32x4_t v36 = *(float32x4_t *)(v23 + 240);
          int8x16_t v35 = *(int8x16_t *)(v23 + 256);
          float32x4_t v37 = vsubq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
          float32x4_t v38 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v36, v37), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1), vmulq_laneq_f32(vminq_f32(v37, v36), v27, 2))), vbslq_s8((int8x16_t)vcgtq_f32(v36, v34), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v33, 0), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1), vmulq_laneq_f32(vmaxq_f32(v34, v36), v28, 2)))));
          int32x4_t v39 = *(int32x4_t *)(v23 + 16);
          float32x4_t v41 = *(float32x4_t *)(v23 + 272);
          int8x16_t v40 = *(int8x16_t *)(v23 + 288);
          int32x4_t v42 = (int32x4_t)vaddq_f32(v26, vmulq_f32(vsubq_f32((float32x4_t)v22, v26), vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 0), vmulq_f32(v41, v38)), v36)));
          float32x4_t v43 = (float32x4_t)vrev64q_s32(v42);
          int8x16_t v44 = (int8x16_t)vminq_f32(vminq_f32((float32x4_t)v42, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), v43);
          int32x4_t v45 = (int32x4_t)vbslq_s8(v40, v44, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v40, v44, (int8x16_t)vmaxq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL))), (float32x4_t)v42));
          v46.i64[0] = v45.i64[0];
          v46.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v45, 0), (float32x4_t)vextq_s8(v9, *(int8x16_t *)&v45, 0xCuLL)).i64[1];
          int32x4_t v47 = (int32x4_t)vextq_s8(v46, v46, 8uLL);
          float32x4_t v48 = *(float32x4_t *)(v23 + 320);
          int64x2_t v49 = (int64x2_t)vmulq_f32(*(float32x4_t *)(v23 + 304), (float32x4_t)v46);
          v34.i64[0] = v45.i64[0];
          v34.i64[1] = v49.i64[1];
          v45.i64[1] = vdupq_laneq_s64(v49, 1).u64[0];
          int8x16_t v50 = vbslq_s8(v40, (int8x16_t)v47, (int8x16_t)vsubq_f32(v41, (float32x4_t)vrev64q_s32(v47)));
          int8x16_t v51 = vbslq_s8((int8x16_t)vcgtq_f32(v36, vsubq_f32(v34, (float32x4_t)vextq_s8(v35, v35, 8uLL))), vextq_s8(v50, v50, 8uLL), vextq_s8(v50, v50, 0xCuLL));
          float32x4_t v52 = (float32x4_t)vextq_s8(v51, v51, 8uLL);
          float32x4_t v53 = *(float32x4_t *)(v23 + 336);
          float32x4_t v54 = *(float32x4_t *)(v23 + 352);
          float32x4_t v55 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v52), v48), v53), v54);
          float32x4_t v56 = vmulq_f32(vmulq_f32(v55, vrecpsq_f32(v52, v55)), vsubq_f32((float32x4_t)vrev64q_s32(v45), v34));
          float32x4_t v57 = *(float32x4_t *)(v23 + 176);
          float32x4_t v58 = *(float32x4_t *)(v23 + 192);
          float32x2_t v59 = vmul_f32(v158, vmin_f32(vmax_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v57.f32), *(float32x2_t *)v58.f32));
          if (v5)
          {
            float32x2_t v60 = vmin_f32(vmax_f32(vadd_f32(v59, (float32x2_t)0xBF000000BF000000), 0), v156);
            int32x2_t v61 = vcvt_s32_f32(vmin_f32(v60, v153));
            float32x4_t v62 = (float32x4_t *)(*((void *)a2 + 14) + 16 * v61.i32[0]);
            *(void *)&long long v63 = vaddq_f32(*v62, vmulq_n_f32(vsubq_f32(v62[1], *v62), vsub_f32(v60, vcvt_f32_s32(v61)).f32[0])).u64[0];
          }
          else
          {
            long long v63 = *(_OWORD *)(*((void *)a2 + 14) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v59, 0), v156)).i32[0]);
          }
          int8x16_t v64 = vmvnq_s8(v40);
          float32x4_t v65 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v56, v58), 0);
          float32x4_t v66 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v56, v57), 0);
          int8x16_t v67 = vbslq_s8((int8x16_t)vcgtq_f32(v36, v65), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v63, 0), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1), vmulq_laneq_f32(vmaxq_f32(v65, v36), v58, 2))));
          int32x4_t v68 = (int32x4_t)vmulq_f32(v24, (float32x4_t)v42);
          float32x4_t v69 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v36, v66), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1), vmulq_laneq_f32(vminq_f32(v66, v36), v57, 2))), v67);
          float32x4_t v70 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v68, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.i8, 1)));
          int8x16_t v71 = *(int8x16_t *)(v23 + 368);
          float32x4_t v72 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v23, 2), vmulq_laneq_f32(vaddq_f32(v70, vmulq_f32(vsubq_f32((float32x4_t)v42, v70), vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 1), vmulq_f32(v41, v69)), v36))), *(float32x4_t *)v23, 3)), v36), (float32x4_t)v71);
          int32x4_t v73 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23, 0), vmulq_lane_f32(v72, *(float32x2_t *)v23, 1));
          float32x4_t v74 = (float32x4_t)vrev64q_s32(v73);
          int8x16_t v75 = vandq_s8(v40, (int8x16_t)vminq_f32(vminq_f32((float32x4_t)v73, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), v74));
          int8x16_t v76 = vorrq_s8(vandq_s8((int8x16_t)vmaxq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL)), v64), v75), (float32x4_t)v73), v64), v75);
          float32x4_t v77 = (float32x4_t)vextq_s8(v76, v76, 8uLL);
          float32x4_t v78 = (float32x4_t)vextq_s8(v76, v76, 0xCuLL);
          int32x4_t v79 = (int32x4_t)vaddq_f32(v78, vmulq_f32(v53, vsubq_f32(v77, v78)));
          float32x4_t v80 = *(float32x4_t *)(v23 + 208);
          float32x4_t v81 = *(float32x4_t *)(v23 + 224);
          float32x2_t v82 = vmul_f32(v159, vmin_f32(vmax_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), *(float32x2_t *)v80.f32), *(float32x2_t *)v81.f32));
          if (v5)
          {
            float32x2_t v83 = vmin_f32(vmax_f32(vadd_f32(v82, (float32x2_t)0xBF000000BF000000), 0), v155);
            int32x2_t v84 = vcvt_s32_f32(vmin_f32(v83, v152));
            float32x4_t v85 = (float32x4_t *)(*((void *)a2 + 16) + 16 * v84.i32[0]);
            *(void *)&long long v86 = vaddq_f32(*v85, vmulq_n_f32(vsubq_f32(v85[1], *v85), vsub_f32(v83, vcvt_f32_s32(v84)).f32[0])).u64[0];
          }
          else
          {
            long long v86 = *(_OWORD *)(*((void *)a2 + 16) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v82, 0), v155)).i32[0]);
          }
          float32x4_t v87 = *(float32x4_t *)(v23 + 384);
          float32x4_t v88 = *(float32x4_t *)(v23 + 400);
          float32x4_t v89 = vminq_f32(vmaxq_f32(vmulq_f32(v72, v87), v36), v87);
          float32x4_t v90 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
          int8x16_t v91 = (int8x16_t)vsubq_f32(v90, (float32x4_t)vandq_s8(v71, (int8x16_t)vcgtq_f32(v90, v89)));
          int32x4_t v92 = (int32x4_t)vmulq_f32(v88, vsubq_f32(vminq_f32(vaddq_f32((float32x4_t)v71, (float32x4_t)v91), v87), (float32x4_t)v91));
          float32x4_t v93 = vmulq_f32(v88, (float32x4_t)v91);
          int8x16_t v94 = (int8x16_t)vaddq_f32((float32x4_t)v35, (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32(v93, (float32x4_t)vrev64q_s32((int32x4_t)v93))), vandq_s8(vextq_s8(v91, v91, 4uLL), v64)));
          int v95 = *((_DWORD *)a2 + 38);
          float32x4_t v96 = vaddq_f32(vsubq_f32((float32x4_t)v94, (float32x4_t)v9), v20);
          int32x4_t v97 = vcvtq_s32_f32(v96);
          v96.i64[0] = vaddq_s32(v97, vcgtq_f32(vcvtq_f32_s32(v97), v96)).u64[0];
          uint64_t v98 = *((void *)a2 + 18);
          float32x4_t v99 = *(float32x4_t *)(v98 + 16 * (v96.i32[0] + v96.i32[1] * v95));
          int8x16_t v100 = vandq_s8(v94, v64);
          float32x4_t v101 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)v92, (float32x4_t)v94)), v100);
          float32x4_t v102 = vaddq_f32(vsubq_f32(v101, (float32x4_t)v9), v20);
          int32x4_t v103 = vcvtq_s32_f32(v102);
          unint64_t v104 = vaddq_s32(v103, vcgtq_f32(vcvtq_f32_s32(v103), v102)).u64[0];
          float32x4_t v105 = *(float32x4_t *)(v98 + 16 * ((int)v104 + HIDWORD(v104) * v95));
          float32x4_t v106 = (float32x4_t)vrev64q_s32(v92);
          float32x4_t v107 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32(v106, v101)), v100);
          float32x4_t v108 = vaddq_f32(vsubq_f32(v107, (float32x4_t)v9), v20);
          int32x4_t v109 = vcvtq_s32_f32(v108);
          v108.i64[0] = vaddq_s32(v109, vcgtq_f32(vcvtq_f32_s32(v109), v108)).u64[0];
          int8x16_t v110 = vandq_s8(v40, (int8x16_t)vsubq_f32(v107, (float32x4_t)v92));
          float32x4_t v111 = (float32x4_t)vorrq_s8(v110, v100);
          float32x4_t v112 = vaddq_f32(vsubq_f32(v111, (float32x4_t)v9), v20);
          int32x4_t v113 = vcvtq_s32_f32(v112);
          v112.i64[0] = vaddq_s32(v113, vcgtq_f32(vcvtq_f32_s32(v113), v112)).u64[0];
          float32x4_t v114 = *(float32x4_t *)(v98 + 16 * (v112.i32[0] + v112.i32[1] * v95));
          int8x16_t v115 = vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v111), v64);
          float32x4_t v116 = (float32x4_t)vorrq_s8(v115, v110);
          float32x4_t v117 = vaddq_f32(vsubq_f32(v116, (float32x4_t)v9), v20);
          int32x4_t v118 = vcvtq_s32_f32(v117);
          v117.i64[0] = vaddq_s32(v118, vcgtq_f32(vcvtq_f32_s32(v118), v117)).u64[0];
          __int32 v119 = v117.i32[0] + v117.i32[1] * v95;
          float32x4_t v120 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vsubq_f32(v116, v106)), v115);
          float32x4_t v121 = vaddq_f32(vsubq_f32(v120, (float32x4_t)v9), v20);
          int32x4_t v122 = vcvtq_s32_f32(v121);
          float32x4_t v123 = *(float32x4_t *)(v98 + 16 * v119);
          v121.i64[0] = vaddq_s32(v122, vcgtq_f32(vcvtq_f32_s32(v122), v121)).u64[0];
          __int32 v124 = v121.i32[0] + v121.i32[1] * v95;
          float32x4_t v125 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)v92, v120)), v115);
          float32x4_t v126 = vaddq_f32(vsubq_f32(v125, (float32x4_t)v9), v20);
          int32x4_t v127 = vcvtq_s32_f32(v126);
          v126.i64[0] = vaddq_s32(v127, vcgtq_f32(vcvtq_f32_s32(v127), v126)).u64[0];
          float32x4_t v128 = vaddq_f32(vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32(v106, v125)), v115), (float32x4_t)v9), v20);
          int32x4_t v129 = vcvtq_s32_f32(v128);
          v128.i64[0] = vaddq_s32(v129, vcgtq_f32(vcvtq_f32_s32(v129), v128)).u64[0];
          float32x4_t v130 = vsubq_f32(v89, (float32x4_t)v91);
          float32x4_t v131 = vaddq_f32(v99, vmulq_n_f32(vsubq_f32(v105, v99), v130.f32[0]));
          float32x4_t v132 = vaddq_f32(v114, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v98 + 16 * (v108.i32[0] + v108.i32[1] * v95)), v114), v130.f32[0]));
          float32x4_t v133 = vaddq_f32(*(float32x4_t *)(v98 + 16 * v124), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v98 + 16 * (v126.i32[0] + v126.i32[1] * v95)), *(float32x4_t *)(v98 + 16 * v124)), v130.f32[0]));
          float32x4_t v134 = vaddq_f32(v131, vmulq_lane_f32(vsubq_f32(v132, v131), *(float32x2_t *)v130.f32, 1));
          int8x16_t v135 = (int8x16_t)vsubq_f32(vaddq_f32(v134, vmulq_laneq_f32(vsubq_f32(vaddq_f32(v133, vmulq_lane_f32(vsubq_f32(vaddq_f32(v123, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v98 + 16 * (v128.i32[0] + v128.i32[1] * v95)), v123), v130.f32[0])), v133), *(float32x2_t *)v130.f32, 1)), v134),
                                  v130,
                                  2)),
                              v53);
          int8x16_t v136 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v135, v135, 4uLL), *(float32x4_t *)(v23 + 32));
          float32x4_t v137 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vmulq_f32((float32x4_t)v136, (float32x4_t)v136)), vandq_s8(v136, v64));
          float32x4_t v138 = vaddq_f32(vmulq_lane_f32((float32x4_t)vrev64q_s32((int32x4_t)v137), *(float32x2_t *)v137.f32, 1), v137);
          float32x4_t v139 = vminq_f32(vmulq_f32(v48, vrsqrteq_f32(v138)), v54);
          float32x4_t v140 = vsubq_f32(v88, vmulq_f32(vminq_f32(vmulq_f32(v139, vrsqrtsq_f32(vmulq_f32(v139, v138), v139)), v54), v138));
          int32x4_t v141 = (int32x4_t)vmulq_f32(v24, (float32x4_t)v73);
          int32x4_t v142 = (int32x4_t)vmulq_f32((float32x4_t)v73, *(float32x4_t *)(v23 + 64));
          int8x16_t v143 = (int8x16_t)vmulq_f32((float32x4_t)v73, *(float32x4_t *)(v23 + 80));
          v141.i64[0] = vorrq_s8(vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v142, v9, 4uLL), vaddq_f32((float32x4_t)v142, (float32x4_t)vrev64q_s32(v142))), v64), vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v141, 1), vaddq_f32((float32x4_t)v141, (float32x4_t)vrev64q_s32(v141))))).u64[0];
          v141.i64[1] = vaddq_f32(*(float32x4_t *)&v143, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v143, 0), (float32x4_t)vextq_s8(v9, v143, 0xCuLL))).i64[1];
          float32x4_t v144 = (float32x4_t)vdupq_laneq_s32(v79, 2);
          float32x4_t v145 = vsubq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 0));
          float32x4_t v146 = vsubq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 0));
          float32x4_t v147 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32(v48, vmulq_f32(vsubq_f32((float32x4_t)v141, v48), vmaxq_f32(vaddq_f32((float32x4_t)v71, vmulq_n_f32(vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v39, 2), vmulq_f32(v41, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v48, v146), (int8x16_t)vaddq_f32(v53, vaddq_f32(
                                                                                           (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1),
                                                                                           vmulq_laneq_f32(vminq_f32(v146, v48), v80, 2))), vbslq_s8((int8x16_t)vcgtq_f32(v48, v145), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v86, 0), (int8x16_t)vaddq_f32(v53, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1), vmulq_laneq_f32(vmaxq_f32(v145, v48), v81, 2))))))), (float32x4_t)v71), vmaxq_f32(v140, v36).f32[0])), v48))),
                                  v64),
                                vandq_s8(v40, (int8x16_t)v141));
          int32x4_t v148 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v23 + 96), v147);
          int32x4_t v149 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v23 + 112), v147);
          int8x16_t v150 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v23 + 128), v147);
          v148.i64[0] = vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v148, 1), vaddq_f32((float32x4_t)v148, (float32x4_t)vrev64q_s32(v148)))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v149, v9, 4uLL), vaddq_f32((float32x4_t)v149, (float32x4_t)vrev64q_s32(v149))), v64)).u64[0];
          v148.i64[1] = vaddq_f32(*(float32x4_t *)&v150, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v150, 0), (float32x4_t)vextq_s8(v9, v150, 0xCuLL))).i64[1];
          *(int8x16_t *)(v11 + v2HGRenderQueue::CancelAllRenderJobs(*this, 1) = vbslq_s8(*(int8x16_t *)(v23 + 416), v22, (int8x16_t)v148);
          v21 += 16;
        }
        while (16 * v10 != v21);
      }
      ++v8;
      v11 += v18;
      v12 += v19;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSatCurves::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  switch(a3)
  {
    case 0:
      return v5;
    case 1:
      int v8 = a2;
      int8x16_t v9 = this;
      unsigned int v10 = 1;
      goto LABEL_5;
    case 2:
      int v8 = a2;
      int8x16_t v9 = this;
      unsigned int v10 = 2;
      goto LABEL_5;
    case 3:
      int v8 = a2;
      int8x16_t v9 = this;
      unsigned int v10 = 3;
LABEL_5:
      Input = HGRenderer::GetInput(v8, v9, v10);
      uint64_t DOD = HGRenderer::GetDOD(a2, Input);
      uint64_t v14 = HGRectIntersection(v5, v4, DOD, v13);
      if (HGRectIsNull(v14, v15)) {
        goto LABEL_6;
      }
      __n128 v17 = HGRenderer::GetInput(a2, this, 0);
      uint64_t v18 = HGRenderer::GetDOD(a2, v17);
      uint64_t v20 = v19;
      uint64_t v21 = HGRenderer::GetInput(a2, this, 4u);
      uint64_t v22 = HGRenderer::GetDOD(a2, v21);
      uint64_t v24 = HGRectUnion(v22, v23, 0, 0);
      uint64_t v5 = HGRectUnion(v18, v20, v24, v25);
      break;
    case 4:
      __n128 v16 = &HGRectInfinite;
      goto LABEL_8;
    default:
LABEL_6:
      __n128 v16 = &HGRectNull;
LABEL_8:
      uint64_t v5 = *(void *)v16;
      break;
  }
  return v5;
}

uint64_t HgcSatCurves::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  switch(a3)
  {
    case 0:
      return *(void *)&a4.var0;
    case 1:
      int32x2_t v6 = a2;
      unsigned int v7 = 1;
      goto LABEL_7;
    case 2:
      int32x2_t v6 = a2;
      unsigned int v7 = 2;
      goto LABEL_7;
    case 3:
      int32x2_t v6 = a2;
      unsigned int v7 = 3;
      goto LABEL_7;
    case 4:
      int32x2_t v6 = a2;
      unsigned int v7 = 4;
LABEL_7:
      Input = HGRenderer::GetInput(v6, this, v7);
      *(void *)&a4.int var0 = HGRenderer::GetDOD(a2, Input);
      break;
    default:
      *(void *)&a4.int var0 = 0;
      break;
  }
  return *(void *)&a4.var0;
}

void HgcSatCurves::HgcSatCurves(HgcSatCurves *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F10978F0;
  operator new();
}

void sub_1B755DD30(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSatCurves::~HgcSatCurves(HGNode *this)
{
  *(void *)this = &unk_1F10978F0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40502CBA4ALL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcSatCurves::~HgcSatCurves(this);

  HGObject::operator delete(v1);
}

uint64_t HgcSatCurves::SetParameter(HgcSatCurves *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      unsigned int v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      *unsigned int v7 = a3.n128_f32[0];
      v7[1] = a4;
      double v7[2] = a5;
      void v7[3] = a6;
      goto LABEL_78;
    case 1:
      int8x16_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      unsigned char v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      _OWORD v9[6] = a5;
      v9[7] = a6;
      goto LABEL_78;
    case 2:
      unsigned int v10 = (__n128 *)*((void *)this + 51);
      if (v10[2].n128_f32[0] == a4
        && v10[2].n128_f32[1] == a5
        && v10[2].n128_f32[2] == 0.0
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_f32[0] = a4;
      v10[2].n128_f32[1] = a5;
      a3.n128_f32[1] = a4;
      v10[2].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[27] = a3;
      goto LABEL_78;
    case 3:
      uint64_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_78;
    case 4:
      uint64_t v12 = (float *)*((void *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6) {
        return 0;
      }
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_78;
    case 5:
      uint64_t v13 = (float *)*((void *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6) {
        return 0;
      }
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_78;
    case 6:
      uint64_t v14 = (float *)*((void *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6) {
        return 0;
      }
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_78;
    case 7:
      uint64_t v15 = (float *)*((void *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6) {
        return 0;
      }
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_78;
    case 8:
      __n128 v16 = (float *)*((void *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6) {
        return 0;
      }
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_78;
    case 9:
      __n128 v17 = (float *)*((void *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6) {
        return 0;
      }
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_78;
    case 10:
      uint64_t v18 = (float *)*((void *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6) {
        return 0;
      }
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_78;
    case 11:
      uint64_t v19 = (float *)*((void *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6) {
        return 0;
      }
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
      goto LABEL_78;
    case 12:
      uint64_t v20 = (float *)*((void *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6) {
        return 0;
      }
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
      goto LABEL_78;
    case 13:
      uint64_t v21 = (float *)*((void *)this + 51);
      if (v21[52] == a3.n128_f32[0] && v21[53] == a4 && v21[54] == a5 && v21[55] == a6) {
        return 0;
      }
      v21[52] = a3.n128_f32[0];
      v21[53] = a4;
      v21[54] = a5;
      v21[55] = a6;
      goto LABEL_78;
    case 14:
      uint64_t v22 = (float *)*((void *)this + 51);
      if (v22[56] == a3.n128_f32[0] && v22[57] == a4 && v22[58] == a5 && v22[59] == a6) {
        return 0;
      }
      v22[56] = a3.n128_f32[0];
      v22[57] = a4;
      v22[58] = a5;
      v22[59] = a6;
LABEL_78:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSatCurves::GetParameter(HgcSatCurves *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      uint64_t v4 = v3 + 3;
      goto LABEL_17;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      uint64_t v4 = v5 + 7;
      goto LABEL_17;
    case 2:
      int32x2_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[108];
      a3[1] = v6[109];
      a3[2] = v6[110];
      uint64_t v4 = v6 + 111;
      goto LABEL_17;
    case 3:
      unsigned int v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      uint64_t v4 = v7 + 15;
      goto LABEL_17;
    case 4:
      int v8 = (float *)*((void *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      uint64_t v4 = v8 + 19;
      goto LABEL_17;
    case 5:
      int8x16_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      uint64_t v4 = v9 + 23;
      goto LABEL_17;
    case 6:
      unsigned int v10 = (float *)*((void *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      uint64_t v4 = v10 + 27;
      goto LABEL_17;
    case 7:
      uint64_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      uint64_t v4 = v11 + 31;
      goto LABEL_17;
    case 8:
      uint64_t v12 = (float *)*((void *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      uint64_t v4 = v12 + 35;
      goto LABEL_17;
    case 9:
      uint64_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      uint64_t v4 = v13 + 39;
      goto LABEL_17;
    case 10:
      uint64_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      uint64_t v4 = v14 + 43;
      goto LABEL_17;
    case 11:
      uint64_t v15 = (float *)*((void *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      uint64_t v4 = v15 + 47;
      goto LABEL_17;
    case 12:
      __n128 v16 = (float *)*((void *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      uint64_t v4 = v16 + 51;
      goto LABEL_17;
    case 13:
      __n128 v17 = (float *)*((void *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      uint64_t v4 = v17 + 55;
      goto LABEL_17;
    case 14:
      uint64_t v18 = (float *)*((void *)this + 51);
      *a3 = v18[56];
      a3[1] = v18[57];
      a3[2] = v18[58];
      uint64_t v4 = v18 + 59;
LABEL_17:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcStyleTransferANEPost::GetProgram(HgcStyleTransferANEPost *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004e3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r1.CGFloat x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r0.w = (half) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy).w;\n"
             "    r2.CGFloat x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r2.z = r1.x;\n"
             "    r2.CGFloat y = r0.x;\n"
             "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f52d0ab7:1384f653:b903e6f0:1d860112\n"
             "//SIG=00400000:0000000f:0000000f:0000000f:0001:0000:0003:0000:0000:0000:001e:0000:0004:04:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004c6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r1.CGFloat x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r0.w = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy).w;\n"
             "    r2.CGFloat x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r2.z = r1.x;\n"
             "    r2.CGFloat y = r0.x;\n"
             "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=602bc2e9:4d81d660:e5a9a1ef:810a49a3\n"
             "//SIG=00000000:0000000f:0000000f:00000000:0001:0000:0003:0000:0000:0000:001e:0000:0004:04:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000401\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.CGFloat x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r1.CGFloat x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    r0.w = texture2D(hg_Texture3, hg_TexCoord3.xy).w;\n"
           "    r2.CGFloat x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r2.z = r1.x;\n"
           "    r2.CGFloat y = r0.x;\n"
           "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
           "    r0.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=9773afd2:7c1ee8b3:e770e7da:fd748111\n"
           "//SIG=00000000:0000000f:0000000f:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:04:0:1:0\n";
  }
}

void HgcStyleTransferANEPost::InitProgramDescriptor(HgcStyleTransferANEPost *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcStyleTransferANEPost_hgc_visible", "//Metal1.0     \n//LEN=0000000236\n[[ visible ]] FragmentOut HgcStyleTransferANEPost_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.CGFloat x = color1.x;\n"
    "    r1.CGFloat x = color2.x;\n"
    "    r0.w = color3.w;\n"
    "    r2.CGFloat x = color0.x;\n"
    "    r2.z = r1.x;\n"
    "    r2.CGFloat y = r0.x;\n"
    "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcStyleTransferANEPost");
}

void sub_1B755E5EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E757E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  long long v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755E7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B755E804()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B755E7FCLL);
}

void *HgcStyleTransferANEPost::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcStyleTransferANEPost [hgc1]");
}

uint64_t HgcStyleTransferANEPost::BindTexture(HgcStyleTransferANEPost *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      uint64_t v4 = a2;
      int v5 = 0;
      goto LABEL_7;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      uint64_t v4 = a2;
      int v5 = 1;
      goto LABEL_7;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      uint64_t v4 = a2;
      int v5 = 2;
      goto LABEL_7;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      uint64_t v4 = a2;
      int v5 = 3;
LABEL_7:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcStyleTransferANEPost::Bind(uint64_t a1)
{
  return 0;
}

uint64_t HgcStyleTransferANEPost::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 80);
    uint64_t v8 = *(int *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 128);
    uint64_t v10 = *(void *)(a2 + 112);
    uint64_t v11 = 16 * *(int *)(a2 + 136);
    uint64_t v12 = 16 * *(int *)(a2 + 120);
    uint64_t v13 = 16 * *(int *)(a2 + 104);
    uint64_t v14 = *(void *)(a2 + 96);
    uint64_t v15 = 16 * v8;
    uint64_t v16 = 16 * v5;
    do
    {
      if (v4 < 4)
      {
        LODWORD(v39) = 0;
      }
      else
      {
        uint64_t v17 = 0;
        int v18 = 0;
        do
        {
          int32x4_t v19 = *(int32x4_t *)(v14 + v17);
          int32x4_t v20 = *(int32x4_t *)(v14 + v17 + 16);
          int32x4_t v21 = *(int32x4_t *)(v14 + v17 + 32);
          int32x4_t v22 = *(int32x4_t *)(v14 + v17 + 48);
          v23.i64[0] = *(void *)(v14 + v17);
          v24.i64[0] = *(void *)(v14 + v17 + 16);
          v25.i64[0] = *(void *)(v14 + v17 + 32);
          int8x16_t v26 = *(int8x16_t *)(v7 + v17);
          int8x16_t v27 = *(int8x16_t *)(v7 + v17 + 16);
          int8x16_t v28 = *(int8x16_t *)(v7 + v17 + 32);
          int8x16_t v29 = *(int8x16_t *)(v7 + v17 + 48);
          v26.i64[1] = *(void *)(v10 + v17);
          v27.i64[1] = *(void *)(v10 + v17 + 16);
          v28.i64[1] = *(void *)(v10 + v17 + 32);
          v23.i64[1] = *(void *)(v9 + v17 + 8);
          v29.i64[1] = *(void *)(v10 + v17 + 48);
          v24.i64[1] = *(void *)(v9 + v17 + 24);
          v19.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17), 1).u64[0];
          v20.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17 + 16), 1).u64[0];
          v30.i64[0] = *(void *)(v14 + v17 + 48);
          v21.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17 + 32), 1).u64[0];
          v22.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17 + 48), 1).u64[0];
          uint64_t v31 = *(void *)(a1 + 408);
          float32x4_t v32 = *(float32x4_t *)(v31 + 16);
          v25.i64[1] = *(void *)(v9 + v17 + 40);
          v30.i64[1] = *(void *)(v9 + v17 + 56);
          int8x16_t v33 = *(int8x16_t *)(v31 + 32);
          float32x4_t v34 = (float32x4_t)vbslq_s8(v33, v23, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v19), v26))));
          float32x4_t v35 = (float32x4_t)vbslq_s8(v33, v24, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v20), v27))));
          float32x4_t v36 = (float32x4_t)vbslq_s8(v33, v25, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v21), v28))));
          float32x4_t v37 = (float32x4_t)vbslq_s8(v33, v30, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v22), v29))));
          float32x4_t v38 = (int8x16_t *)(v6 + v17);
          *float32x4_t v38 = vbslq_s8(v33, v23, (int8x16_t)vmulq_laneq_f32(v34, v34, 3));
          v38[1] = vbslq_s8(v33, v24, (int8x16_t)vmulq_laneq_f32(v35, v35, 3));
          float64x2_t v38[2] = vbslq_s8(v33, v25, (int8x16_t)vmulq_laneq_f32(v36, v36, 3));
          v38[3] = vbslq_s8(v33, v30, (int8x16_t)vmulq_laneq_f32(v37, v37, 3));
          v18 -= 4;
          v17 += 64;
        }
        while (v4 + v18 > 3);
        LODWORD(v39) = -v18;
      }
      if ((int)v39 < v4)
      {
        uint64_t v39 = v39;
        do
        {
          int32x4_t v40 = *(int32x4_t *)(v14 + 16 * v39);
          v41.i64[0] = *(void *)(v14 + 16 * v39);
          v41.i64[1] = *(void *)(v9 + 16 * v39 + 8);
          int8x16_t v42 = *(int8x16_t *)(v7 + 16 * v39);
          v42.i64[1] = *(void *)(v10 + 16 * v39);
          v40.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + 16 * v39), 1).u64[0];
          uint64_t v43 = *(void *)(a1 + 408);
          int8x16_t v44 = *(int8x16_t *)(v43 + 32);
          float32x4_t v45 = (float32x4_t)vbslq_s8(v44, v41, (int8x16_t)vaddq_f32(*(float32x4_t *)(v43 + 16), vmulq_f32(*(float32x4_t *)(v43 + 16), (float32x4_t)vbslq_s8(*(int8x16_t *)v43, (int8x16_t)vrev64q_s32(v40), v42))));
          *(int8x16_t *)(v6 + 16 * v39++) = vbslq_s8(v44, v41, (int8x16_t)vmulq_laneq_f32(v45, v45, 3));
        }
        while (v39 < v4);
      }
      ++v3;
      v9 += v11;
      v10 += v12;
      v14 += v13;
      v7 += v15;
      v6 += v16;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcStyleTransferANEPost::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 4) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HgcStyleTransferANEPost::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 4) {
    return 0;
  }
  else {
    return a4;
  }
}

void HgcStyleTransferANEPost::HgcStyleTransferANEPost(HgcStyleTransferANEPost *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1097B58;
  operator new();
}

void sub_1B755EDE4(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcStyleTransferANEPost::~HgcStyleTransferANEPost(HGNode *this)
{
  *(void *)this = &unk_1F1097B58;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40EED21634);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcStyleTransferANEPost::~HgcStyleTransferANEPost(this);

  HGObject::operator delete(v1);
}

uint64_t HgcStyleTransferANEPost::SetParameter(HgcStyleTransferANEPost *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcStyleTransferANEPost::GetParameter(HgcStyleTransferANEPost *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcASC_CDL::GetProgram(HgcASC_CDL *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003aa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[2].xyz));\n"
             "    r2.xyz = half3(dot(r1.xyz, c0.xyz));\n"
             "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, half3(hg_Params[3].xyz)), 0.00000h, 1.00000h);\n"
             "    r1.w = r0.w;\n"
             "    output.color0 = float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5ba0f389:acdf4bc8:beb086b0:fb53554a\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000383\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz, 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
             "    r2.xyz = float3(dot(r1.xyz, c0.xyz));\n"
             "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, hg_Params[3].xyz), 0.00000f, 1.00000f);\n"
             "    r1.w = r0.w;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2e44c5e3:f30a6789:564267a0:1f6c5899\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003e6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = clamp(r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.xyz = vec3(dot(r1.xyz, c0.xyz));\n"
           "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, hg_ProgramLocal3.xyz), vec3(0.00000), vec3(1.00000));\n"
           "    r1.w = r0.w;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=f796bbb7:48b83b79:d126ddf0:4c8345b2\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcASC_CDL::InitProgramDescriptor(HgcASC_CDL *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcASC_CDL_hgc_visible", "//Metal1.0     \n//LEN=0000000257\n[[ visible ]] FragmentOut HgcASC_CDL_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = clamp(r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz, 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
    "    r2.xyz = float3(dot(r1.xyz, c0.xyz));\n"
    "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, hg_Params[3].xyz), 0.00000f, 1.00000f);\n"
    "    r1.w = r0.w;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcASC_CDL");
}

void sub_1B755EFB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E758F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int8x16_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755F0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B755F0F4()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B755F0ECLL);
}

void *HgcASC_CDL::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcASC_CDL [hgc1]");
}

uint64_t HgcASC_CDL::BindTexture(HgcASC_CDL *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcASC_CDL::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcASC_CDL::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 80);
    uint64_t v7 = 16 * *(int *)(a2 + 24);
    uint64_t v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        unsigned int v72 = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = 16;
        do
        {
          float32x4_t v12 = *(float32x4_t *)(v6 + v10 - 16);
          float32x4_t v11 = *(float32x4_t *)(v6 + v10);
          uint64_t v13 = *(void *)(a1 + 408);
          float32x4_t v14 = *(float32x4_t *)(v13 + 16);
          float32x4_t v15 = vaddq_f32(v14, vmulq_f32(v12, *(float32x4_t *)v13));
          float32x4_t v16 = vaddq_f32(v14, vmulq_f32(v11, *(float32x4_t *)v13));
          float32x4_t v17 = *(float32x4_t *)(v13 + 64);
          float32x4_t v18 = *(float32x4_t *)(v13 + 80);
          float32x4_t v19 = vminq_f32(vmaxq_f32(v15, v17), v18);
          float32x4_t v20 = vminq_f32(vmaxq_f32(v16, v17), v18);
          int8x16_t v21 = *(int8x16_t *)(v13 + 96);
          float32x4_t v22 = *(float32x4_t *)(v13 + 112);
          float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v19), (int8x16_t)v18);
          float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v18);
          int8x16_t v25 = *(int8x16_t *)(v13 + 128);
          float32x4_t v26 = *(float32x4_t *)(v13 + 144);
          float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v19)));
          float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v20)));
          float32x4_t v29 = *(float32x4_t *)(v13 + 160);
          float32x4_t v30 = *(float32x4_t *)(v13 + 176);
          float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v23, v29));
          float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v24, v29));
          float32x4_t v33 = vaddq_f32(vsubq_f32(v27, v26), v31);
          float32x4_t v34 = vsubq_f32(vsubq_f32(v23, v18), vmulq_f32(vmulq_f32(v30, v31), v23));
          float32x4_t v35 = vsubq_f32(vsubq_f32(v24, v18), vmulq_f32(vmulq_f32(v30, v32), v24));
          float32x4_t v36 = *(float32x4_t *)(v13 + 192);
          float32x4_t v37 = *(float32x4_t *)(v13 + 208);
          float32x4_t v38 = *(float32x4_t *)(v13 + 224);
          float32x4_t v39 = *(float32x4_t *)(v13 + 240);
          float32x4_t v40 = vaddq_f32(vaddq_f32(vsubq_f32(v28, v26), v32), vmulq_f32(v35, vaddq_f32(vaddq_f32(v38, vmulq_f32(v35, v39)), vmulq_f32(vmulq_f32(v35, v35), vaddq_f32(v36, vmulq_f32(v37, v35))))));
          float32x4_t v41 = *(float32x4_t *)(v13 + 32);
          float32x4_t v42 = *(float32x4_t *)(v13 + 48);
          float32x4_t v43 = vmulq_f32(v41, vaddq_f32(v33, vmulq_f32(v34, vaddq_f32(vaddq_f32(v38, vmulq_f32(v34, v39)), vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(v36, vmulq_f32(v37, v34)))))));
          float32x4_t v44 = vmulq_f32(v41, v40);
          float32x4_t v45 = *(float32x4_t *)(v13 + 256);
          float32x4_t v46 = *(float32x4_t *)(v13 + 272);
          float32x4_t v47 = vmaxq_f32(v43, v45);
          float32x4_t v48 = vmaxq_f32(v44, v45);
          float32x4_t v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          float32x4_t v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          float32x4_t v51 = vsubq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v49, v47)));
          float32x4_t v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v50, v48)));
          float32x4_t v53 = vsubq_f32(v47, v51);
          float32x4_t v54 = vsubq_f32(v48, v52);
          float32x4_t v55 = *(float32x4_t *)(v13 + 288);
          float32x4_t v56 = *(float32x4_t *)(v13 + 304);
          float32x4_t v57 = vmulq_f32(v54, vaddq_f32(v56, vmulq_f32(v54, vaddq_f32(v46, vmulq_f32(v55, v54)))));
          float32x4_t v58 = vaddq_f32(v18, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, vaddq_f32(v46, vmulq_f32(v55, v53))))));
          int32x4_t v59 = vcvtq_s32_f32(v52);
          int32x4_t v60 = *(int32x4_t *)(v13 + 320);
          float32x4_t v61 = *(float32x4_t *)(v13 + 336);
          float32x4_t v62 = vmulq_f32(v58, (float32x4_t)vshlq_n_s32(vaddq_s32(v60, vcvtq_s32_f32(v51)), 0x17uLL));
          float32x4_t v63 = vmulq_f32(vaddq_f32(v18, v57), (float32x4_t)vshlq_n_s32(vaddq_s32(v60, v59), 0x17uLL));
          int32x4_t v64 = (int32x4_t)vmulq_f32(v61, v62);
          int32x4_t v65 = (int32x4_t)vmulq_f32(v61, v63);
          float32x4_t v66 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v64, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)));
          float32x4_t v67 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v65, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 1)));
          int8x16_t v68 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v66, vmulq_f32(v42, vsubq_f32(v62, v66))), v17), v18);
          int8x16_t v69 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v67, vmulq_f32(v42, vsubq_f32(v63, v67))), v17), v18);
          int8x16_t v70 = *(int8x16_t *)(v13 + 352);
          int8x16_t v71 = (int8x16_t *)(v5 + v10);
          v71[-1] = vbslq_s8(v70, (int8x16_t)v12, v68);
          int8x16_t *v71 = vbslq_s8(v70, (int8x16_t)v11, v69);
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        unsigned int v72 = -v9;
      }
      if ((int)v72 < v4)
      {
        float32x4_t v73 = *(float32x4_t *)(v6 + 16 * v72);
        uint64_t v74 = *(void *)(a1 + 408);
        float32x4_t v75 = *(float32x4_t *)(v74 + 64);
        float32x4_t v76 = *(float32x4_t *)(v74 + 80);
        float32x4_t v77 = vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v74 + 16), vmulq_f32(v73, *(float32x4_t *)v74)), v75), v76);
        float32x4_t v78 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v74 + 96), (int8x16_t)v77), (int8x16_t)v76);
        float32x4_t v79 = (float32x4_t)vandq_s8((int8x16_t)v76, (int8x16_t)vcgtq_f32(v78, *(float32x4_t *)(v74 + 160)));
        float32x4_t v80 = vsubq_f32(vsubq_f32(v78, v76), vmulq_f32(vmulq_f32(*(float32x4_t *)(v74 + 176), v79), v78));
        float32x4_t v81 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v74 + 32), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v77, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v74 + 128), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v74 + 112), v77))), *(float32x4_t *)(v74 + 144)), v79), vmulq_f32(v80, vaddq_f32(vaddq_f32(*(float32x4_t *)(v74 + 224), vmulq_f32(v80, *(float32x4_t *)(v74 + 240))), vmulq_f32(vmulq_f32(v80, v80), vaddq_f32(*(float32x4_t *)(v74 + 192), vmulq_f32(*(float32x4_t *)(v74 + 208), v80))))))),
                *(float32x4_t *)(v74 + 256));
        float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
        float32x4_t v83 = vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v76, (int8x16_t)vcgtq_f32(v82, v81)));
        float32x4_t v84 = vsubq_f32(v81, v83);
        float32x4_t v85 = vmulq_f32(vaddq_f32(v76, vmulq_f32(v84, vaddq_f32(*(float32x4_t *)(v74 + 304), vmulq_f32(v84, vaddq_f32(*(float32x4_t *)(v74 + 272), vmulq_f32(*(float32x4_t *)(v74 + 288), v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v74 + 320), vcvtq_s32_f32(v83)), 0x17uLL));
        int32x4_t v86 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v74 + 336), v85);
        float32x4_t v87 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v86, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)));
        *(int8x16_t *)(v5 + 16 * v72) = vbslq_s8(*(int8x16_t *)(v74 + 352), (int8x16_t)v73, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v87, vmulq_f32(*(float32x4_t *)(v74 + 48), vsubq_f32(v85, v87))), v75), v76));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcASC_CDL::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t HgcASC_CDL::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  else {
    return a4;
  }
}

void HgcASC_CDL::HgcASC_CDL(HgcASC_CDL *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1097DC0;
  operator new();
}

void sub_1B755F888(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcASC_CDL::~HgcASC_CDL(HGNode *this)
{
  *(void *)this = &unk_1F1097DC0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C400F47AF14);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcASC_CDL::~HgcASC_CDL(this);

  HGObject::operator delete(v1);
}

uint64_t HgcASC_CDL::SetParameter(HgcASC_CDL *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      *uint64_t v7 = a3.n128_f32[0];
      v7[1] = a4;
      double v7[2] = a5;
      void v7[3] = a6;
      goto LABEL_23;
    case 1:
      int v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      unsigned char v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      _OWORD v9[6] = a5;
      v9[7] = a6;
      goto LABEL_23;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_23;
    case 3:
      float32x4_t v11 = (__n128 *)*((void *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a3.n128_f32[0]
        && v11[3].n128_f32[2] == a3.n128_f32[0]
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      int32x4_t v12 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v12.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3] = (__n128)v12;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[23] = a3;
LABEL_23:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcASC_CDL::GetParameter(HgcASC_CDL *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      int v4 = v3 + 3;
      goto LABEL_6;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      int v4 = v5 + 7;
      goto LABEL_6;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      int v4 = v6 + 11;
      goto LABEL_6;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[92];
      a3[1] = v7[93];
      a3[2] = v7[94];
      int v4 = v7 + 95;
LABEL_6:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcColorCurves::GetProgram(HgcColorCurves *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return aMetal10Len0000_42;
    }
    else {
      return aMetal10Len0000_43;
    }
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_13;
  }
}

void HgcColorCurves::InitProgramDescriptor(HgcColorCurves *this, HGProgramDescriptor *a2)
{
}

void sub_1B755FCB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75A00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  float32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B755FFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7560030()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7560028);
}

void *HgcColorCurves::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorCurves [hgc1]");
}

uint64_t HgcColorCurves::BindTexture(HgcColorCurves *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 0, 0, 0, 0);
      int v4 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v4)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        goto LABEL_17;
      }
      return result;
    case 1:
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
        (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
      }
      v6.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v7.n128_u64[0] = 0;
      v8.n128_u64[0] = 0;
      v9.n128_u64[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 18, v6, v7, v8, v9);
      goto LABEL_17;
    case 2:
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
        (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
      }
      v10.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v11.n128_u64[0] = 0;
      v12.n128_u64[0] = 0;
      v13.n128_u64[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 19, v10, v11, v12, v13);
      goto LABEL_17;
    case 3:
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
        (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
      }
      v14.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v15.n128_u64[0] = 0;
      v16.n128_u64[0] = 0;
      v17.n128_u64[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 20, v14, v15, v16, v17);
      goto LABEL_17;
    case 4:
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 4, 0);
        (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
      }
      v18.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v19.n128_u64[0] = 0;
      v20.n128_u64[0] = 0;
      v21.n128_u64[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 21, v18, v19, v20, v21);
LABEL_17:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcColorCurves::Bind(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t HgcColorCurves::RenderTile(HgcColorCurves *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcColorCurves *, uint64_t))(*(void *)this + 312))(this, v4);
  int v6 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v6 >= 1)
  {
    int v7 = 0;
    v8.i32[1] = 0;
    v8.f32[0] = (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    v11.i32[1] = 0;
    v9.i32[1] = 0;
    v9.f32[0] = (float)(*((_DWORD *)a2 + 62) - *((_DWORD *)a2 + 60));
    v10.i32[1] = 0;
    v10.f32[0] = (float)(*((_DWORD *)a2 + 66) - *((_DWORD *)a2 + 64));
    v11.f32[0] = (float)(*((_DWORD *)a2 + 70) - *((_DWORD *)a2 + 68));
    int v12 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v14 = *((void *)a2 + 10);
    __asm { FMOV            V0.2S, #-1.0 }
    float32x2_t v332 = vadd_f32((float32x2_t)v8.u32[0], _D0);
    float32x2_t v330 = vadd_f32(v332, _D0);
    float32x2_t v20 = vadd_f32((float32x2_t)v9.u32[0], _D0);
    float32x2_t v333 = vadd_f32(v20, _D0);
    float32x2_t v21 = vadd_f32((float32x2_t)v10.u32[0], _D0);
    float32x2_t v22 = vadd_f32(v21, _D0);
    float32x2_t v23 = vadd_f32((float32x2_t)v11.u32[0], _D0);
    float32x2_t v24 = vadd_f32(v23, _D0);
    uint64_t v25 = 16 * *((int *)a2 + 6);
    uint64_t v26 = 16 * *((int *)a2 + 22);
    float32x2_t v331 = (float32x2_t)v8.u32[0];
    do
    {
      if (v12 < 2)
      {
        unsigned int v231 = 0;
      }
      else
      {
        int v27 = 0;
        uint64_t v28 = 16;
        do
        {
          int8x16_t v29 = *(int8x16_t *)(v14 + v28 - 16);
          int8x16_t v30 = *(int8x16_t *)(v14 + v28);
          uint64_t v31 = *((void *)this + 51);
          float32x4_t v32 = *(float32x4_t *)(v31 + 64);
          int32x4_t v33 = (int32x4_t)vmulq_f32((float32x4_t)v29, v32);
          int32x4_t v34 = (int32x4_t)vmulq_f32((float32x4_t)v30, v32);
          float32x4_t v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v33, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)));
          float32x4_t v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v34, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1)));
          float32x4_t v37 = *(float32x4_t *)(v31 + 160);
          float32x4_t v38 = *(float32x4_t *)(v31 + 176);
          float32x2_t v39 = (float32x2_t)vminq_f32(vmaxq_f32(v36, v37), v38).u64[0];
          float32x2_t v40 = vmul_f32(v8, vmin_f32(vmax_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v37.f32), *(float32x2_t *)v38.f32));
          if (v5)
          {
            float32x2_t v41 = vmin_f32(vmax_f32(vadd_f32(v40, (float32x2_t)0xBF000000BF000000), 0), v332);
            int32x2_t v42 = vcvt_s32_f32(vmin_f32(v41, v330));
            uint64_t v43 = *((void *)a2 + 12);
            *(void *)&long long v44 = vaddq_f32(*(float32x4_t *)(v43 + 16 * v42.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v43 + 16 * v42.i32[0] + 16), *(float32x4_t *)(v43 + 16 * v42.i32[0])), vsub_f32(v41, vcvt_f32_s32(v42)).f32[0])).u64[0];
            float32x2_t v45 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v8, v39), (float32x2_t)0xBF000000BF000000), 0), v332);
            int32x2_t v46 = vcvt_s32_f32(vmin_f32(v45, v330));
            *(void *)&long long v47 = vaddq_f32(*(float32x4_t *)(v43 + 16 * v46.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v43 + 16 * v46.i32[0] + 16), *(float32x4_t *)(v43 + 16 * v46.i32[0])), vsub_f32(v45, vcvt_f32_s32(v46)).f32[0])).u64[0];
          }
          else
          {
            uint64_t v48 = *((void *)a2 + 12);
            long long v44 = *(_OWORD *)(v48 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v40, 0), v332)).i32[0]);
            long long v47 = *(_OWORD *)(v48 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v8, v39), 0), v332)).i32[0]);
          }
          float32x4_t v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 0);
          float32x4_t v50 = vsubq_f32(v35, v49);
          float32x4_t v51 = vsubq_f32(v36, v49);
          float32x4_t v52 = *(float32x4_t *)(v31 + 288);
          float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1);
          int8x16_t v54 = (int8x16_t)vaddq_f32(v53, vmulq_laneq_f32(vmaxq_f32(v50, v52), v38, 2));
          int8x16_t v55 = (int8x16_t)vaddq_f32(v53, vmulq_laneq_f32(vmaxq_f32(v51, v52), v38, 2));
          float32x4_t v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 0);
          float32x4_t v57 = vsubq_f32(v35, v56);
          float32x4_t v58 = vsubq_f32(v36, v56);
          float32x4_t v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1);
          float32x4_t v60 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v58), (int8x16_t)vaddq_f32(v59, vmulq_laneq_f32(vminq_f32(v58, v52), v37, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v51), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v47, 0), v55)), v36);
          float32x4_t v61 = vaddq_f32((float32x4_t)v29, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v57), (int8x16_t)vaddq_f32(v59, vmulq_laneq_f32(vminq_f32(v57, v52), v37, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v50), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v44, 0), v54)), v35));
          float32x4_t v62 = vaddq_f32((float32x4_t)v30, v60);
          float32x4_t v64 = *(float32x4_t *)(v31 + 192);
          float32x4_t v63 = *(float32x4_t *)(v31 + 208);
          float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 0);
          float32x4_t v66 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 0);
          int8x16_t v67 = (int8x16_t)vminq_f32(vmaxq_f32(v61, v65), v66);
          int8x16_t v68 = (int8x16_t)vminq_f32(vmaxq_f32(v62, v65), v66);
          float32x2_t v69 = vmul_f32(v9, *(float32x2_t *)v67.i8);
          if (v5)
          {
            float32x2_t v70 = vmin_f32(vmax_f32(vadd_f32(v69, (float32x2_t)0xBF000000BF000000), 0), v20);
            int32x2_t v71 = vcvt_s32_f32(vmin_f32(v70, v333));
            uint64_t v72 = *((void *)a2 + 14);
            int8x16_t v73 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v71.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v71.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v71.i32[0])), vsub_f32(v70, vcvt_f32_s32(v71)).f32[0]));
            float32x2_t v74 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v9, *(float32x2_t *)v68.i8), (float32x2_t)0xBF000000BF000000), 0), v20);
            int32x2_t v75 = vcvt_s32_f32(vmin_f32(v74, v333));
            int8x16_t v76 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v75.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v75.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v75.i32[0])), vsub_f32(v74, vcvt_f32_s32(v75)).f32[0]));
          }
          else
          {
            uint64_t v72 = *((void *)a2 + 14);
            int8x16_t v73 = *(int8x16_t *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v69, 0), v20)).i32[0]);
            int8x16_t v76 = *(int8x16_t *)(v72
                               + 16
                               * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v9, *(float32x2_t *)v68.i8), 0), v20)).i32[0]);
          }
          int8x16_t v77 = *(int8x16_t *)(v31 + 304);
          int8x16_t v78 = vbslq_s8(v77, v73, v67);
          int32x4_t v79 = (int32x4_t)vbslq_s8(v77, v76, v68);
          float32x2_t v80 = (float32x2_t)vrev64q_s32(v79).u64[0];
          float32x2_t v81 = vmul_f32(v9, (float32x2_t)vrev64_s32(*(int32x2_t *)v78.i8));
          if (v5)
          {
            float32x2_t v82 = vmin_f32(vmax_f32(vadd_f32(v81, (float32x2_t)0xBF000000BF000000), 0), v20);
            int32x2_t v83 = vcvt_s32_f32(vmin_f32(v82, v333));
            int32x4_t v84 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v83.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v83.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v83.i32[0])), vsub_f32(v82, vcvt_f32_s32(v83)).f32[0]));
            float32x2_t v85 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v9, v80), (float32x2_t)0xBF000000BF000000), 0), v20);
            int32x2_t v86 = vcvt_s32_f32(vmin_f32(v85, v333));
            int32x4_t v87 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v86.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v86.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v86.i32[0])), vsub_f32(v85, vcvt_f32_s32(v86)).f32[0]));
          }
          else
          {
            int32x4_t v84 = *(int32x4_t *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v81, 0), v20)).i32[0]);
            int32x4_t v87 = *(int32x4_t *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v9, v80), 0), v20)).i32[0]);
          }
          int8x16_t v88 = *(int8x16_t *)(v31 + 320);
          int8x16_t v89 = vbslq_s8(v88, (int8x16_t)vrev64q_s32(v84), v78);
          int8x16_t v90 = vbslq_s8(v88, (int8x16_t)vrev64q_s32(v87), (int8x16_t)v79);
          float32x2_t v91 = (float32x2_t)vextq_s8(v90, v90, 8uLL).u64[0];
          float32x2_t v92 = vmul_f32(v9, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
          if (v5)
          {
            float32x2_t v93 = vmin_f32(vmax_f32(vadd_f32(v92, (float32x2_t)0xBF000000BF000000), 0), v20);
            int32x2_t v94 = vcvt_s32_f32(vmin_f32(v93, v333));
            *(void *)&long long v95 = vaddq_f32(*(float32x4_t *)(v72 + 16 * v94.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v94.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v94.i32[0])), vsub_f32(v93, vcvt_f32_s32(v94)).f32[0])).u64[0];
            float32x2_t v96 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v9, v91), (float32x2_t)0xBF000000BF000000), 0), v20);
            int32x2_t v97 = vcvt_s32_f32(vmin_f32(v96, v333));
            *(void *)&long long v98 = vaddq_f32(*(float32x4_t *)(v72 + 16 * v97.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v97.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v97.i32[0])), vsub_f32(v96, vcvt_f32_s32(v97)).f32[0])).u64[0];
          }
          else
          {
            long long v95 = *(_OWORD *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v92, 0), v20)).i32[0]);
            long long v98 = *(_OWORD *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v9, v91), 0), v20)).i32[0]);
          }
          v89.i64[1] = v95;
          v90.i64[1] = v98;
          float32x4_t v99 = vsubq_f32(v61, v66);
          float32x4_t v100 = vsubq_f32(v62, v66);
          float32x4_t v101 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1);
          int8x16_t v102 = (int8x16_t)vaddq_f32(v101, vmulq_laneq_f32(vmaxq_f32(v99, v52), v63, 2));
          int8x16_t v103 = vbslq_s8((int8x16_t)vcgtq_f32(v52, v100), v90, (int8x16_t)vaddq_f32(v101, vmulq_laneq_f32(vmaxq_f32(v100, v52), v63, 2)));
          float32x4_t v104 = vsubq_f32(v61, v65);
          float32x4_t v105 = vsubq_f32(v62, v65);
          float32x4_t v106 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1);
          float32x4_t v107 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v105), (int8x16_t)vaddq_f32(v106, vmulq_laneq_f32(vminq_f32(v105, v52), v64, 2)), v103), v62);
          float32x4_t v108 = vaddq_f32(v61, vmulq_f32(*(float32x4_t *)v31, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v104), (int8x16_t)vaddq_f32(v106, vmulq_laneq_f32(vminq_f32(v104, v52), v64, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v99), v89, v102)), v61)));
          float32x4_t v109 = vaddq_f32(v62, vmulq_f32(*(float32x4_t *)v31, v107));
          float32x4_t v110 = *(float32x4_t *)(v31 + 224);
          float32x4_t v111 = *(float32x4_t *)(v31 + 240);
          float32x4_t v112 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 0);
          float32x4_t v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 0);
          int8x16_t v114 = (int8x16_t)vminq_f32(vmaxq_f32(v108, v112), v113);
          int8x16_t v115 = (int8x16_t)vminq_f32(vmaxq_f32(v109, v112), v113);
          float32x2_t v116 = vmul_f32(v10, *(float32x2_t *)v114.i8);
          if (v5)
          {
            float32x2_t v117 = vmin_f32(vmax_f32(vadd_f32(v116, (float32x2_t)0xBF000000BF000000), 0), v21);
            int32x2_t v118 = vcvt_s32_f32(vmin_f32(v117, v22));
            uint64_t v119 = *((void *)a2 + 16);
            int8x16_t v120 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v118.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v118.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v118.i32[0])), vsub_f32(v117, vcvt_f32_s32(v118)).f32[0]));
            float32x2_t v121 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, *(float32x2_t *)v115.i8), (float32x2_t)0xBF000000BF000000), 0), v21);
            int32x2_t v122 = vcvt_s32_f32(vmin_f32(v121, v22));
            int8x16_t v123 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v122.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v122.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v122.i32[0])), vsub_f32(v121, vcvt_f32_s32(v122)).f32[0]));
          }
          else
          {
            uint64_t v119 = *((void *)a2 + 16);
            int8x16_t v120 = *(int8x16_t *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v116, 0), v21)).i32[0]);
            int8x16_t v123 = *(int8x16_t *)(v119
                                + 16
                                * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, *(float32x2_t *)v115.i8), 0), v21)).i32[0]);
          }
          int8x16_t v124 = vmvnq_s8(v77);
          int8x16_t v125 = vorrq_s8(vandq_s8(v77, v120), vandq_s8(v114, v124));
          int32x4_t v126 = (int32x4_t)vorrq_s8(vandq_s8(v77, v123), vandq_s8(v115, v124));
          float32x2_t v127 = (float32x2_t)vrev64q_s32(v126).u64[0];
          float32x2_t v128 = vmul_f32(v10, (float32x2_t)vrev64_s32(*(int32x2_t *)v125.i8));
          if (v5)
          {
            float32x2_t v129 = vmin_f32(vmax_f32(vadd_f32(v128, (float32x2_t)0xBF000000BF000000), 0), v21);
            int32x2_t v130 = vcvt_s32_f32(vmin_f32(v129, v22));
            int32x4_t v131 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v130.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v130.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v130.i32[0])), vsub_f32(v129, vcvt_f32_s32(v130)).f32[0]));
            float32x2_t v132 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, v127), (float32x2_t)0xBF000000BF000000), 0), v21);
            int32x2_t v133 = vcvt_s32_f32(vmin_f32(v132, v22));
            int32x4_t v134 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v133.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v133.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v133.i32[0])), vsub_f32(v132, vcvt_f32_s32(v133)).f32[0]));
          }
          else
          {
            int32x4_t v131 = *(int32x4_t *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v128, 0), v21)).i32[0]);
            int32x4_t v134 = *(int32x4_t *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, v127), 0), v21)).i32[0]);
          }
          int8x16_t v135 = vmvnq_s8(v88);
          int8x16_t v136 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v131), v88), vandq_s8(v125, v135));
          int8x16_t v137 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v134), v88), vandq_s8((int8x16_t)v126, v135));
          float32x2_t v138 = (float32x2_t)vextq_s8(v137, v137, 8uLL).u64[0];
          float32x2_t v139 = vmul_f32(v10, (float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL));
          if (v5)
          {
            float32x2_t v140 = vmin_f32(vmax_f32(vadd_f32(v139, (float32x2_t)0xBF000000BF000000), 0), v21);
            int32x2_t v141 = vcvt_s32_f32(vmin_f32(v140, v22));
            *(void *)&long long v142 = vaddq_f32(*(float32x4_t *)(v119 + 16 * v141.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v141.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v141.i32[0])), vsub_f32(v140, vcvt_f32_s32(v141)).f32[0])).u64[0];
            float32x2_t v143 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, v138), (float32x2_t)0xBF000000BF000000), 0), v21);
            int32x2_t v144 = vcvt_s32_f32(vmin_f32(v143, v22));
            *(void *)&long long v145 = vaddq_f32(*(float32x4_t *)(v119 + 16 * v144.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v144.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v144.i32[0])), vsub_f32(v143, vcvt_f32_s32(v144)).f32[0])).u64[0];
          }
          else
          {
            long long v142 = *(_OWORD *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v139, 0), v21)).i32[0]);
            long long v145 = *(_OWORD *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, v138), 0), v21)).i32[0]);
          }
          v136.i64[1] = v142;
          v137.i64[1] = v145;
          float32x4_t v146 = vsubq_f32(v108, v113);
          float32x4_t v147 = vsubq_f32(v109, v113);
          float32x4_t v148 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1);
          int8x16_t v149 = vbslq_s8((int8x16_t)vcgtq_f32(v52, v146), v136, (int8x16_t)vaddq_f32(v148, vmulq_laneq_f32(vmaxq_f32(v146, v52), v111, 2)));
          int8x16_t v150 = vbslq_s8((int8x16_t)vcgtq_f32(v52, v147), v137, (int8x16_t)vaddq_f32(v148, vmulq_laneq_f32(vmaxq_f32(v147, v52), v111, 2)));
          float32x4_t v151 = vsubq_f32(v108, v112);
          float32x4_t v152 = vsubq_f32(v109, v112);
          float32x4_t v153 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1);
          float32x4_t v154 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v151), (int8x16_t)vaddq_f32(v153, vmulq_laneq_f32(vminq_f32(v151, v52), v110, 2)), v149), v108);
          float32x4_t v155 = *(float32x4_t *)(v31 + 16);
          float32x4_t v156 = vaddq_f32(v108, vmulq_f32(v155, v154));
          float32x4_t v157 = vaddq_f32(v109, vmulq_f32(v155, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v152), (int8x16_t)vaddq_f32(v153, vmulq_laneq_f32(vminq_f32(v152, v52), v110, 2)), v150), v109)));
          float32x4_t v158 = *(float32x4_t *)(v31 + 256);
          float32x4_t v159 = *(float32x4_t *)(v31 + 272);
          float32x4_t v160 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 0);
          float32x4_t v161 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v159.f32, 0);
          int8x16_t v162 = (int8x16_t)vminq_f32(vmaxq_f32(v156, v160), v161);
          int8x16_t v163 = (int8x16_t)vminq_f32(vmaxq_f32(v157, v160), v161);
          float32x2_t v164 = vmul_f32(v11, *(float32x2_t *)v162.i8);
          if (v5)
          {
            float32x2_t v165 = vmin_f32(vmax_f32(vadd_f32(v164, (float32x2_t)0xBF000000BF000000), 0), v23);
            int32x2_t v166 = vcvt_s32_f32(vmin_f32(v165, v24));
            uint64_t v167 = *((void *)a2 + 18);
            int8x16_t v168 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v166.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v166.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v166.i32[0])), vsub_f32(v165, vcvt_f32_s32(v166)).f32[0]));
            float32x2_t v169 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, *(float32x2_t *)v163.i8), (float32x2_t)0xBF000000BF000000), 0), v23);
            int32x2_t v170 = vcvt_s32_f32(vmin_f32(v169, v24));
            int8x16_t v171 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v170.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v170.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v170.i32[0])), vsub_f32(v169, vcvt_f32_s32(v170)).f32[0]));
          }
          else
          {
            uint64_t v167 = *((void *)a2 + 18);
            int8x16_t v168 = *(int8x16_t *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v164, 0), v23)).i32[0]);
            int8x16_t v171 = *(int8x16_t *)(v167
                                + 16
                                * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, *(float32x2_t *)v163.i8), 0), v23)).i32[0]);
          }
          int8x16_t v172 = vorrq_s8(vandq_s8(v77, v168), vandq_s8(v162, v124));
          int32x4_t v173 = (int32x4_t)vorrq_s8(vandq_s8(v77, v171), vandq_s8(v163, v124));
          float32x2_t v174 = (float32x2_t)vrev64q_s32(v173).u64[0];
          float32x2_t v175 = vmul_f32(v11, (float32x2_t)vrev64_s32(*(int32x2_t *)v172.i8));
          if (v5)
          {
            float32x2_t v176 = vmin_f32(vmax_f32(vadd_f32(v175, (float32x2_t)0xBF000000BF000000), 0), v23);
            int32x2_t v177 = vcvt_s32_f32(vmin_f32(v176, v24));
            int32x4_t v178 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v177.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v177.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v177.i32[0])), vsub_f32(v176, vcvt_f32_s32(v177)).f32[0]));
            float32x2_t v179 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, v174), (float32x2_t)0xBF000000BF000000), 0), v23);
            int32x2_t v180 = vcvt_s32_f32(vmin_f32(v179, v24));
            int32x4_t v181 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v180.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v180.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v180.i32[0])), vsub_f32(v179, vcvt_f32_s32(v180)).f32[0]));
          }
          else
          {
            int32x4_t v178 = *(int32x4_t *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v175, 0), v23)).i32[0]);
            int32x4_t v181 = *(int32x4_t *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, v174), 0), v23)).i32[0]);
          }
          float32x4_t v182 = vmulq_f32(v32, v61);
          float32x4_t v183 = vmulq_f32(v32, v62);
          int8x16_t v184 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v182, 1), vaddq_f32(v182, (float32x4_t)vrev64q_s32((int32x4_t)v182)));
          int8x16_t v185 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v183, 1), vaddq_f32(v183, (float32x4_t)vrev64q_s32((int32x4_t)v183)));
          int8x16_t v186 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v178), v88), vandq_s8(v172, v135));
          int8x16_t v187 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v181), v88), vandq_s8((int8x16_t)v173, v135));
          float32x2_t v188 = (float32x2_t)vextq_s8(v187, v187, 8uLL).u64[0];
          float32x2_t v189 = vmul_f32(v11, (float32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL));
          if (v5)
          {
            float32x2_t v190 = vmin_f32(vmax_f32(vadd_f32(v189, (float32x2_t)0xBF000000BF000000), 0), v23);
            int32x2_t v191 = vcvt_s32_f32(vmin_f32(v190, v24));
            *(void *)&long long v192 = vaddq_f32(*(float32x4_t *)(v167 + 16 * v191.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v191.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v191.i32[0])), vsub_f32(v190, vcvt_f32_s32(v191)).f32[0])).u64[0];
            float32x2_t v193 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, v188), (float32x2_t)0xBF000000BF000000), 0), v23);
            int32x2_t v194 = vcvt_s32_f32(vmin_f32(v193, v24));
            *(void *)&long long v195 = vaddq_f32(*(float32x4_t *)(v167 + 16 * v194.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v194.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v194.i32[0])), vsub_f32(v193, vcvt_f32_s32(v194)).f32[0])).u64[0];
          }
          else
          {
            long long v192 = *(_OWORD *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v189, 0), v23)).i32[0]);
            long long v195 = *(_OWORD *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, v188), 0), v23)).i32[0]);
          }
          float32x2_t v8 = v331;
          v186.i64[1] = v192;
          v187.i64[1] = v195;
          float32x4_t v196 = vsubq_f32(v156, v161);
          float32x4_t v197 = vsubq_f32(v157, v161);
          float32x4_t v198 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v159.f32, 1);
          float32x4_t v199 = vsubq_f32(v156, v160);
          float32x4_t v200 = vsubq_f32(v157, v160);
          float32x4_t v201 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 1);
          float32x4_t v202 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v199), (int8x16_t)vaddq_f32(v201, vmulq_laneq_f32(vminq_f32(v199, v52), v158, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v196), v186, (int8x16_t)vaddq_f32(v198, vmulq_laneq_f32(vmaxq_f32(v196, v52), v159, 2)))), v156);
          float32x4_t v203 = *(float32x4_t *)(v31 + 32);
          int8x16_t v204 = (int8x16_t)vaddq_f32(v156, vmulq_f32(v203, v202));
          float32x4_t v205 = vaddq_f32(v157, vmulq_f32(v203, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v200), (int8x16_t)vaddq_f32(v201, vmulq_laneq_f32(vminq_f32(v200, v52), v158, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v197), v187, (int8x16_t)vaddq_f32(v198, vmulq_laneq_f32(vmaxq_f32(v197, v52), v159, 2)))), v157)));
          float32x4_t v206 = vmulq_f32(v32, (float32x4_t)v204);
          float32x4_t v207 = vmulq_f32(v32, v205);
          int8x16_t v208 = (int8x16_t)vcgtq_f32(v52, *(float32x4_t *)(v31 + 48));
          int8x16_t v209 = vbslq_s8(v208, v184, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v206, 1), vaddq_f32(v206, (float32x4_t)vrev64q_s32((int32x4_t)v206))));
          int8x16_t v210 = vbslq_s8(v208, v185, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v207, 1), vaddq_f32(v207, (float32x4_t)vrev64q_s32((int32x4_t)v207))));
          float32x4_t v211 = *(float32x4_t *)(v31 + 80);
          float32x4_t v212 = *(float32x4_t *)(v31 + 96);
          int32x4_t v213 = (int32x4_t)vmulq_f32(v211, (float32x4_t)v204);
          int32x4_t v214 = (int32x4_t)vmulq_f32(v211, v205);
          v209.i64[0] = vorrq_s8(vandq_s8(v209, v77), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v213, v204, 4uLL), vaddq_f32((float32x4_t)v213, (float32x4_t)vrev64q_s32(v213))), v124)).u64[0];
          v210.i64[0] = vorrq_s8(vandq_s8(v210, v77), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v214, v204, 4uLL), vaddq_f32((float32x4_t)v214, (float32x4_t)vrev64q_s32(v214))), v124)).u64[0];
          int8x16_t v215 = (int8x16_t)vmulq_f32(v212, (float32x4_t)v204);
          int8x16_t v216 = (int8x16_t)vmulq_f32(v212, v205);
          v209.i64[1] = vaddq_f32(*(float32x4_t *)&v215, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v215, 0), (float32x4_t)vextq_s8(v215, v215, 0xCuLL))).i64[1];
          v210.i64[1] = vaddq_f32(*(float32x4_t *)&v216, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v216, 0), (float32x4_t)vextq_s8(v215, v216, 0xCuLL))).i64[1];
          float32x4_t v217 = *(float32x4_t *)(v31 + 112);
          float32x4_t v218 = *(float32x4_t *)(v31 + 128);
          int32x4_t v219 = (int32x4_t)vmulq_f32(v217, (float32x4_t)v209);
          float32x4_t v220 = vmulq_f32(v217, (float32x4_t)v210);
          int8x16_t v221 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v220, 1), vaddq_f32(v220, (float32x4_t)vrev64q_s32((int32x4_t)v220)));
          int32x4_t v222 = (int32x4_t)vmulq_f32(v218, (float32x4_t)v209);
          int32x4_t v223 = (int32x4_t)vmulq_f32(v218, (float32x4_t)v210);
          v219.i64[0] = vorrq_s8(vandq_s8(v77, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v219, 1), vaddq_f32((float32x4_t)v219, (float32x4_t)vrev64q_s32(v219)))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v222, v221, 4uLL), vaddq_f32((float32x4_t)v222, (float32x4_t)vrev64q_s32(v222))), v124)).u64[0];
          int8x16_t v224 = vorrq_s8(vandq_s8(v77, v221), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v223, v221, 4uLL), vaddq_f32((float32x4_t)v223, (float32x4_t)vrev64q_s32(v223))), v124));
          float32x4_t v225 = *(float32x4_t *)(v31 + 144);
          int8x16_t v226 = (int8x16_t)vmulq_f32(v225, (float32x4_t)v209);
          int8x16_t v227 = (int8x16_t)vmulq_f32(v225, (float32x4_t)v210);
          v219.i64[1] = vaddq_f32(*(float32x4_t *)&v226, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v226, 0), (float32x4_t)vextq_s8(v224, v226, 0xCuLL))).i64[1];
          v224.i64[1] = vaddq_f32(*(float32x4_t *)&v227, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v227, 0), (float32x4_t)vextq_s8(v224, v227, 0xCuLL))).i64[1];
          int8x16_t v228 = vbslq_s8(*(int8x16_t *)(v31 + 336), v29, (int8x16_t)v219);
          int8x16_t v229 = vbslq_s8(*(int8x16_t *)(v31 + 336), v30, v224);
          int8x16_t v230 = (int8x16_t *)(v13 + v28);
          v230[-1] = v228;
          *int8x16_t v230 = v229;
          v27 -= 2;
          v28 += 32;
        }
        while (v12 + v27 > 1);
        unsigned int v231 = -v27;
      }
      if ((int)v231 < v12)
      {
        int8x16_t v232 = *(int8x16_t *)(v14 + 16 * v231);
        uint64_t v233 = *((void *)this + 51);
        float32x4_t v234 = *(float32x4_t *)(v233 + 64);
        int32x4_t v235 = (int32x4_t)vmulq_f32((float32x4_t)v232, v234);
        float32x4_t v236 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v235, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.i8, 1)));
        float32x4_t v238 = *(float32x4_t *)(v233 + 160);
        float32x4_t v237 = *(float32x4_t *)(v233 + 176);
        float32x2_t v239 = vmul_f32(v8, vmin_f32(vmax_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v238.f32), *(float32x2_t *)v237.f32));
        if (v5)
        {
          float32x2_t v240 = vmin_f32(vmax_f32(vadd_f32(v239, (float32x2_t)0xBF000000BF000000), 0), v332);
          int32x2_t v241 = vcvt_s32_f32(vmin_f32(v240, v330));
          float32x4_t v242 = (float32x4_t *)(*((void *)a2 + 12) + 16 * v241.i32[0]);
          *(void *)&long long v243 = vaddq_f32(*v242, vmulq_n_f32(vsubq_f32(v242[1], *v242), vsub_f32(v240, vcvt_f32_s32(v241)).f32[0])).u64[0];
        }
        else
        {
          long long v243 = *(_OWORD *)(*((void *)a2 + 12) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v239, 0), v332)).i32[0]);
        }
        float32x4_t v244 = vsubq_f32(v236, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 0));
        float32x4_t v245 = *(float32x4_t *)(v233 + 288);
        float32x4_t v246 = vsubq_f32(v236, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.f32, 0));
        float32x4_t v247 = *(float32x4_t *)(v233 + 192);
        float32x4_t v248 = *(float32x4_t *)(v233 + 208);
        float32x4_t v249 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v247.f32, 0);
        float32x4_t v250 = vaddq_f32((float32x4_t)v232, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v246), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.f32, 1), vmulq_laneq_f32(vminq_f32(v246, v245), v238, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v244), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v243, 0), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 1), vmulq_laneq_f32(vmaxq_f32(v244, v245), v237, 2)))), v236));
        float32x4_t v251 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v248.f32, 0);
        int8x16_t v252 = (int8x16_t)vminq_f32(vmaxq_f32(v250, v249), v251);
        float32x2_t v253 = vmul_f32(v9, *(float32x2_t *)v252.i8);
        if (v5)
        {
          float32x2_t v254 = vmin_f32(vmax_f32(vadd_f32(v253, (float32x2_t)0xBF000000BF000000), 0), v20);
          int32x2_t v255 = vcvt_s32_f32(vmin_f32(v254, v333));
          uint64_t v256 = *((void *)a2 + 14);
          int8x16_t v257 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v256 + 16 * v255.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v256 + 16 * v255.i32[0] + 16), *(float32x4_t *)(v256 + 16 * v255.i32[0])), vsub_f32(v254, vcvt_f32_s32(v255)).f32[0]));
        }
        else
        {
          uint64_t v256 = *((void *)a2 + 14);
          int8x16_t v257 = *(int8x16_t *)(v256 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v253, 0), v20)).i32[0]);
        }
        int8x16_t v258 = *(int8x16_t *)(v233 + 304);
        int8x16_t v259 = vbslq_s8(v258, v257, v252);
        float32x2_t v260 = vmul_f32(v9, (float32x2_t)vrev64_s32(*(int32x2_t *)v259.i8));
        if (v5)
        {
          float32x2_t v261 = vmin_f32(vmax_f32(vadd_f32(v260, (float32x2_t)0xBF000000BF000000), 0), v20);
          int32x2_t v262 = vcvt_s32_f32(vmin_f32(v261, v333));
          int32x4_t v263 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v256 + 16 * v262.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v256 + 16 * v262.i32[0] + 16), *(float32x4_t *)(v256 + 16 * v262.i32[0])), vsub_f32(v261, vcvt_f32_s32(v262)).f32[0]));
        }
        else
        {
          int32x4_t v263 = *(int32x4_t *)(v256 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v260, 0), v20)).i32[0]);
        }
        int8x16_t v264 = *(int8x16_t *)(v233 + 320);
        int8x16_t v265 = vbslq_s8(v264, (int8x16_t)vrev64q_s32(v263), v259);
        float32x2_t v266 = vmul_f32(v9, (float32x2_t)*(_OWORD *)&vextq_s8(v265, v265, 8uLL));
        if (v5)
        {
          float32x2_t v267 = vmin_f32(vmax_f32(vadd_f32(v266, (float32x2_t)0xBF000000BF000000), 0), v20);
          int32x2_t v268 = vcvt_s32_f32(vmin_f32(v267, v333));
          *(void *)&long long v269 = vaddq_f32(*(float32x4_t *)(v256 + 16 * v268.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v256 + 16 * v268.i32[0] + 16), *(float32x4_t *)(v256 + 16 * v268.i32[0])), vsub_f32(v267, vcvt_f32_s32(v268)).f32[0])).u64[0];
        }
        else
        {
          long long v269 = *(_OWORD *)(v256 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v266, 0), v20)).i32[0]);
        }
        v265.i64[1] = v269;
        int8x16_t v270 = vmvnq_s8(v258);
        float32x4_t v271 = vsubq_f32(v250, v251);
        float32x4_t v272 = vsubq_f32(v250, v249);
        float32x4_t v273 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v272), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v247.f32, 1), vmulq_laneq_f32(vminq_f32(v272, v245), v247, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v271), v265, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v248.f32, 1), vmulq_laneq_f32(vmaxq_f32(v271, v245), v248, 2)))), v250);
        float32x4_t v275 = *(float32x4_t *)(v233 + 224);
        float32x4_t v274 = *(float32x4_t *)(v233 + 240);
        float32x4_t v276 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v275.f32, 0);
        float32x4_t v277 = vaddq_f32(v250, vmulq_f32(*(float32x4_t *)v233, v273));
        float32x4_t v278 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v274.f32, 0);
        int8x16_t v279 = (int8x16_t)vminq_f32(vmaxq_f32(v277, v276), v278);
        float32x2_t v280 = vmul_f32(v10, *(float32x2_t *)v279.i8);
        if (v5)
        {
          float32x2_t v281 = vmin_f32(vmax_f32(vadd_f32(v280, (float32x2_t)0xBF000000BF000000), 0), v21);
          int32x2_t v282 = vcvt_s32_f32(vmin_f32(v281, v22));
          uint64_t v283 = *((void *)a2 + 16);
          int8x16_t v284 = vorrq_s8(vandq_s8(v258, (int8x16_t)vaddq_f32(*(float32x4_t *)(v283 + 16 * v282.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v283 + 16 * v282.i32[0] + 16), *(float32x4_t *)(v283 + 16 * v282.i32[0])), vsub_f32(v281, vcvt_f32_s32(v282)).f32[0]))), vandq_s8(v279, v270));
          float32x2_t v285 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, (float32x2_t)vrev64_s32(*(int32x2_t *)v284.i8)), (float32x2_t)0xBF000000BF000000), 0), v21);
          int32x2_t v286 = vcvt_s32_f32(vmin_f32(v285, v22));
          int32x4_t v287 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v283 + 16 * v286.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v283 + 16 * v286.i32[0] + 16), *(float32x4_t *)(v283 + 16 * v286.i32[0])), vsub_f32(v285, vcvt_f32_s32(v286)).f32[0]));
        }
        else
        {
          uint64_t v283 = *((void *)a2 + 16);
          int8x16_t v284 = vorrq_s8(vandq_s8(*(int8x16_t *)(v283 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v280, 0), v21)).i32[0]), v258), vandq_s8(v279, v270));
          int32x4_t v287 = *(int32x4_t *)(v283
                              + 16
                              * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, (float32x2_t)vrev64_s32(*(int32x2_t *)v284.i8)), 0), v21)).i32[0]);
        }
        int8x16_t v288 = vmvnq_s8(v264);
        int8x16_t v289 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v287), v264), vandq_s8(v284, v288));
        float32x2_t v290 = vmul_f32(v10, (float32x2_t)*(_OWORD *)&vextq_s8(v289, v289, 8uLL));
        if (v5)
        {
          float32x2_t v291 = vmin_f32(vmax_f32(vadd_f32(v290, (float32x2_t)0xBF000000BF000000), 0), v21);
          int32x2_t v292 = vcvt_s32_f32(vmin_f32(v291, v22));
          *(void *)&long long v293 = vaddq_f32(*(float32x4_t *)(v283 + 16 * v292.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v283 + 16 * v292.i32[0] + 16), *(float32x4_t *)(v283 + 16 * v292.i32[0])), vsub_f32(v291, vcvt_f32_s32(v292)).f32[0])).u64[0];
        }
        else
        {
          long long v293 = *(_OWORD *)(v283 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v290, 0), v21)).i32[0]);
        }
        v289.i64[1] = v293;
        float32x4_t v294 = vsubq_f32(v277, v278);
        float32x4_t v295 = vsubq_f32(v277, v276);
        float32x4_t v296 = vmulq_f32(*(float32x4_t *)(v233 + 16), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v295), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v275.f32, 1), vmulq_laneq_f32(vminq_f32(v295, v245), v275, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v294), v289, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v274.f32, 1), vmulq_laneq_f32(vmaxq_f32(v294, v245), v274, 2)))), v277));
        float32x4_t v298 = *(float32x4_t *)(v233 + 256);
        float32x4_t v297 = *(float32x4_t *)(v233 + 272);
        float32x4_t v299 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v298.f32, 0);
        float32x4_t v300 = vaddq_f32(v277, v296);
        float32x4_t v301 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v297.f32, 0);
        int8x16_t v302 = (int8x16_t)vminq_f32(vmaxq_f32(v300, v299), v301);
        float32x2_t v303 = vmul_f32(v11, *(float32x2_t *)v302.i8);
        if (v5)
        {
          float32x2_t v304 = vmin_f32(vmax_f32(vadd_f32(v303, (float32x2_t)0xBF000000BF000000), 0), v23);
          int32x2_t v305 = vcvt_s32_f32(vmin_f32(v304, v24));
          uint64_t v306 = *((void *)a2 + 18);
          int8x16_t v307 = vorrq_s8(vandq_s8(v258, (int8x16_t)vaddq_f32(*(float32x4_t *)(v306 + 16 * v305.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v306 + 16 * v305.i32[0] + 16), *(float32x4_t *)(v306 + 16 * v305.i32[0])), vsub_f32(v304, vcvt_f32_s32(v305)).f32[0]))), vandq_s8(v302, v270));
          float32x2_t v308 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, (float32x2_t)vrev64_s32(*(int32x2_t *)v307.i8)), (float32x2_t)0xBF000000BF000000), 0), v23);
          int32x2_t v309 = vcvt_s32_f32(vmin_f32(v308, v24));
          int32x4_t v310 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v306 + 16 * v309.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v306 + 16 * v309.i32[0] + 16), *(float32x4_t *)(v306 + 16 * v309.i32[0])), vsub_f32(v308, vcvt_f32_s32(v309)).f32[0]));
        }
        else
        {
          uint64_t v306 = *((void *)a2 + 18);
          int8x16_t v307 = vorrq_s8(vandq_s8(*(int8x16_t *)(v306 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v303, 0), v23)).i32[0]), v258), vandq_s8(v302, v270));
          int32x4_t v310 = *(int32x4_t *)(v306
                              + 16
                              * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, (float32x2_t)vrev64_s32(*(int32x2_t *)v307.i8)), 0), v23)).i32[0]);
        }
        int8x16_t v311 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v310), v264), vandq_s8(v307, v288));
        float32x2_t v312 = vmul_f32(v11, (float32x2_t)*(_OWORD *)&vextq_s8(v311, v311, 8uLL));
        if (v5)
        {
          float32x2_t v313 = vmin_f32(vmax_f32(vadd_f32(v312, (float32x2_t)0xBF000000BF000000), 0), v23);
          int32x2_t v314 = vcvt_s32_f32(vmin_f32(v313, v24));
          *(void *)&long long v315 = vaddq_f32(*(float32x4_t *)(v306 + 16 * v314.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v306 + 16 * v314.i32[0] + 16), *(float32x4_t *)(v306 + 16 * v314.i32[0])), vsub_f32(v313, vcvt_f32_s32(v314)).f32[0])).u64[0];
        }
        else
        {
          long long v315 = *(_OWORD *)(v306 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v312, 0), v23)).i32[0]);
        }
        float32x4_t v316 = vmulq_f32(v234, v250);
        v311.i64[1] = v315;
        int8x16_t v317 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v316, 1), vaddq_f32(v316, (float32x4_t)vrev64q_s32((int32x4_t)v316)));
        float32x4_t v318 = vsubq_f32(v300, v301);
        float32x4_t v319 = vsubq_f32(v300, v299);
        float32x4_t v320 = vaddq_f32(v300, vmulq_f32(*(float32x4_t *)(v233 + 32), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v319), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v298.f32, 1), vmulq_laneq_f32(vminq_f32(v319, v245), v298, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v318), v311, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v297.f32, 1), vmulq_laneq_f32(vmaxq_f32(v318, v245), v297, 2)))), v300)));
        float32x4_t v321 = vmulq_f32(v234, v320);
        int8x16_t v322 = vbslq_s8((int8x16_t)vcgtq_f32(v245, *(float32x4_t *)(v233 + 48)), v317, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v321, 1), vaddq_f32(v321, (float32x4_t)vrev64q_s32((int32x4_t)v321))));
        int32x4_t v323 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v233 + 80), v320);
        int8x16_t v324 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v233 + 96), v320);
        int8x16_t v325 = vorrq_s8(vandq_s8(v258, v322), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v323, v322, 4uLL), vaddq_f32((float32x4_t)v323, (float32x4_t)vrev64q_s32(v323))), v270));
        v325.i64[1] = vaddq_f32(*(float32x4_t *)&v324, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v324, 0), (float32x4_t)vextq_s8(v325, v324, 0xCuLL))).i64[1];
        int32x4_t v326 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v233 + 112), (float32x4_t)v325);
        int32x4_t v327 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v233 + 128), (float32x4_t)v325);
        v326.i64[0] = vorrq_s8(vandq_s8(v258, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v326, 1), vaddq_f32((float32x4_t)v326, (float32x4_t)vrev64q_s32(v326)))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v327, v325, 4uLL), vaddq_f32((float32x4_t)v327, (float32x4_t)vrev64q_s32(v327))), v270)).u64[0];
        int8x16_t v328 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v233 + 144), (float32x4_t)v325);
        v326.i64[1] = vaddq_f32(*(float32x4_t *)&v328, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v328, 0), (float32x4_t)vextq_s8(v328, v328, 0xCuLL))).i64[1];
        *(int8x16_t *)(v13 + 16 * v23HGRenderQueue::CancelAllRenderJobs(*this, 1) = vbslq_s8(*(int8x16_t *)(v233 + 336), v232, (int8x16_t)v326);
      }
      v14 += v26;
      v13 += v25;
      ++v7;
    }
    while (v7 != v6);
  }
  return 0;
}

uint64_t HgcColorCurves::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  switch(a3)
  {
    case 0:
      return v5;
    case 1:
      float32x2_t v8 = a2;
      float32x2_t v9 = this;
      unsigned int v10 = 1;
      goto LABEL_6;
    case 2:
      float32x2_t v8 = a2;
      float32x2_t v9 = this;
      unsigned int v10 = 2;
      goto LABEL_6;
    case 3:
      float32x2_t v8 = a2;
      float32x2_t v9 = this;
      unsigned int v10 = 3;
      goto LABEL_6;
    case 4:
      float32x2_t v8 = a2;
      float32x2_t v9 = this;
      unsigned int v10 = 4;
LABEL_6:
      Input = HGRenderer::GetInput(v8, v9, v10);
      uint64_t DOD = HGRenderer::GetDOD(a2, Input);
      uint64_t v14 = HGRectIntersection(v5, v4, DOD, v13);
      if (HGRectIsNull(v14, v15)) {
        goto LABEL_7;
      }
      __n128 v16 = HGRenderer::GetInput(a2, this, 0);
      uint64_t v17 = HGRenderer::GetDOD(a2, v16);
      uint64_t v5 = HGRectUnion(v17, v18, 0, 0);
      break;
    default:
LABEL_7:
      uint64_t v5 = 0;
      break;
  }
  return v5;
}

uint64_t HgcColorCurves::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  switch(a3)
  {
    case 0:
      return *(void *)&a4.var0;
    case 1:
      int v6 = a2;
      unsigned int v7 = 1;
      goto LABEL_7;
    case 2:
      int v6 = a2;
      unsigned int v7 = 2;
      goto LABEL_7;
    case 3:
      int v6 = a2;
      unsigned int v7 = 3;
      goto LABEL_7;
    case 4:
      int v6 = a2;
      unsigned int v7 = 4;
LABEL_7:
      Input = HGRenderer::GetInput(v6, this, v7);
      *(void *)&a4.int var0 = HGRenderer::GetDOD(a2, Input);
      break;
    default:
      *(void *)&a4.int var0 = 0;
      break;
  }
  return *(void *)&a4.var0;
}

void HgcColorCurves::HgcColorCurves(HgcColorCurves *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1098028;
  operator new();
}

void sub_1B75620B0(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorCurves::~HgcColorCurves(HGNode *this)
{
  *(void *)this = &unk_1F1098028;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40AF73A19ALL);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcColorCurves::~HgcColorCurves(this);

  HGObject::operator delete(v1);
}

uint64_t HgcColorCurves::SetParameter(HgcColorCurves *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7 = 0xFFFFFFFFLL;
  switch((int)a2)
  {
    case 0:
      float32x2_t v8 = (float *)*((void *)this + 51);
      if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
        return 0;
      }
      float *v8 = a3;
      v8[1] = a4;
      float32x2_t v9 = v8 + 3;
      double v8[2] = a5;
      goto LABEL_92;
    case 1:
      unsigned int v10 = (float *)*((void *)this + 51);
      if (v10[4] == a3 && v10[5] == a4 && v10[6] == a5 && v10[7] == a6) {
        return 0;
      }
      _OWORD v10[4] = a3;
      v10[5] = a4;
      float32x2_t v9 = v10 + 7;
      v10[6] = a5;
      goto LABEL_92;
    case 2:
      float32x2_t v11 = (float *)*((void *)this + 51);
      if (v11[8] == a3 && v11[9] == a4 && v11[10] == a5 && v11[11] == a6) {
        return 0;
      }
      v11[8] = a3;
      v11[9] = a4;
      float32x2_t v9 = v11 + 11;
      v11[10] = a5;
      goto LABEL_92;
    case 3:
      int v12 = (float *)*((void *)this + 51);
      if (v12[12] == a3 && v12[13] == a4 && v12[14] == a5 && v12[15] == a6) {
        return 0;
      }
      v12[12] = a3;
      v12[13] = a4;
      float32x2_t v9 = v12 + 15;
      v12[14] = a5;
      goto LABEL_92;
    case 5:
      uint64_t v13 = (float *)*((void *)this + 51);
      if (v13[16] == a3 && v13[17] == a4 && v13[18] == a5 && v13[19] == a6) {
        return 0;
      }
      unsigned char v13[16] = a3;
      v13[17] = a4;
      float32x2_t v9 = v13 + 19;
      v13[18] = a5;
      goto LABEL_92;
    case 6:
      uint64_t v14 = (float *)*((void *)this + 51);
      if (v14[20] == a3 && v14[21] == a4 && v14[22] == a5 && v14[23] == a6) {
        return 0;
      }
      v14[20] = a3;
      v14[21] = a4;
      float32x2_t v9 = v14 + 23;
      v14[22] = a5;
      goto LABEL_92;
    case 7:
      uint64_t v15 = (float *)*((void *)this + 51);
      if (v15[24] == a3 && v15[25] == a4 && v15[26] == a5 && v15[27] == a6) {
        return 0;
      }
      v15[24] = a3;
      v15[25] = a4;
      float32x2_t v9 = v15 + 27;
      v15[26] = a5;
      goto LABEL_92;
    case 8:
      __n128 v16 = (float *)*((void *)this + 51);
      if (v16[28] == a3 && v16[29] == a4 && v16[30] == a5 && v16[31] == a6) {
        return 0;
      }
      v16[28] = a3;
      v16[29] = a4;
      float32x2_t v9 = v16 + 31;
      v16[30] = a5;
      goto LABEL_92;
    case 9:
      uint64_t v17 = (float *)*((void *)this + 51);
      if (v17[32] == a3 && v17[33] == a4 && v17[34] == a5 && v17[35] == a6) {
        return 0;
      }
      v17[32] = a3;
      v17[33] = a4;
      float32x2_t v9 = v17 + 35;
      v17[34] = a5;
      goto LABEL_92;
    case 10:
      uint64_t v18 = (float *)*((void *)this + 51);
      if (v18[36] == a3 && v18[37] == a4 && v18[38] == a5 && v18[39] == a6) {
        return 0;
      }
      v18[36] = a3;
      v18[37] = a4;
      float32x2_t v9 = v18 + 39;
      v18[38] = a5;
      goto LABEL_92;
    case 11:
      __n128 v19 = (float *)*((void *)this + 51);
      if (v19[40] == a3 && v19[41] == a4 && v19[42] == a5 && v19[43] == a6) {
        return 0;
      }
      v19[40] = a3;
      v19[41] = a4;
      float32x2_t v9 = v19 + 43;
      v19[42] = a5;
      goto LABEL_92;
    case 12:
      float32x2_t v20 = (float *)*((void *)this + 51);
      if (v20[44] == a3 && v20[45] == a4 && v20[46] == a5 && v20[47] == a6) {
        return 0;
      }
      v20[44] = a3;
      v20[45] = a4;
      float32x2_t v9 = v20 + 47;
      v20[46] = a5;
      goto LABEL_92;
    case 13:
      float32x2_t v21 = (float *)*((void *)this + 51);
      if (v21[48] == a3 && v21[49] == a4 && v21[50] == a5 && v21[51] == a6) {
        return 0;
      }
      v21[48] = a3;
      v21[49] = a4;
      float32x2_t v9 = v21 + 51;
      v21[50] = a5;
      goto LABEL_92;
    case 14:
      float32x2_t v22 = (float *)*((void *)this + 51);
      if (v22[52] == a3 && v22[53] == a4 && v22[54] == a5 && v22[55] == a6) {
        return 0;
      }
      v22[52] = a3;
      v22[53] = a4;
      float32x2_t v9 = v22 + 55;
      v22[54] = a5;
      goto LABEL_92;
    case 15:
      float32x2_t v23 = (float *)*((void *)this + 51);
      if (v23[56] == a3 && v23[57] == a4 && v23[58] == a5 && v23[59] == a6) {
        return 0;
      }
      v23[56] = a3;
      v23[57] = a4;
      float32x2_t v9 = v23 + 59;
      v23[58] = a5;
      goto LABEL_92;
    case 16:
      float32x2_t v24 = (float *)*((void *)this + 51);
      if (v24[60] == a3 && v24[61] == a4 && v24[62] == a5 && v24[63] == a6) {
        return 0;
      }
      v24[60] = a3;
      v24[61] = a4;
      float32x2_t v9 = v24 + 63;
      v24[62] = a5;
      goto LABEL_92;
    case 17:
      uint64_t v25 = (float *)*((void *)this + 51);
      if (v25[64] == a3 && v25[65] == a4 && v25[66] == a5 && v25[67] == a6) {
        return 0;
      }
      unsigned char v25[64] = a3;
      v25[65] = a4;
      float32x2_t v9 = v25 + 67;
      v25[66] = a5;
      goto LABEL_92;
    case 18:
      uint64_t v26 = (float *)*((void *)this + 51);
      if (v26[68] == a3 && v26[69] == a4 && v26[70] == a5 && v26[71] == a6) {
        return 0;
      }
      v26[68] = a3;
      v26[69] = a4;
      float32x2_t v9 = v26 + 71;
      v26[70] = a5;
LABEL_92:
      float *v9 = a6;
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return v7;
  }
}

uint64_t HgcColorCurves::GetParameter(HgcColorCurves *this, int a2, float *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  switch(a2)
  {
    case 0:
      uint64_t v4 = (float *)*((void *)this + 51);
      *a3 = *v4;
      a3[1] = v4[1];
      a3[2] = v4[2];
      uint64_t v5 = v4 + 3;
      goto LABEL_20;
    case 1:
      int v6 = (float *)*((void *)this + 51);
      *a3 = v6[4];
      a3[1] = v6[5];
      a3[2] = v6[6];
      uint64_t v5 = v6 + 7;
      goto LABEL_20;
    case 2:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[8];
      a3[1] = v7[9];
      a3[2] = v7[10];
      uint64_t v5 = v7 + 11;
      goto LABEL_20;
    case 3:
      float32x2_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[12];
      a3[1] = v8[13];
      a3[2] = v8[14];
      uint64_t v5 = v8 + 15;
      goto LABEL_20;
    case 5:
      float32x2_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[16];
      a3[1] = v9[17];
      a3[2] = v9[18];
      uint64_t v5 = v9 + 19;
      goto LABEL_20;
    case 6:
      unsigned int v10 = (float *)*((void *)this + 51);
      *a3 = v10[20];
      a3[1] = v10[21];
      a3[2] = v10[22];
      uint64_t v5 = v10 + 23;
      goto LABEL_20;
    case 7:
      float32x2_t v11 = (float *)*((void *)this + 51);
      *a3 = v11[24];
      a3[1] = v11[25];
      a3[2] = v11[26];
      uint64_t v5 = v11 + 27;
      goto LABEL_20;
    case 8:
      int v12 = (float *)*((void *)this + 51);
      *a3 = v12[28];
      a3[1] = v12[29];
      a3[2] = v12[30];
      uint64_t v5 = v12 + 31;
      goto LABEL_20;
    case 9:
      uint64_t v13 = (float *)*((void *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      uint64_t v5 = v13 + 35;
      goto LABEL_20;
    case 10:
      uint64_t v14 = (float *)*((void *)this + 51);
      *a3 = v14[36];
      a3[1] = v14[37];
      a3[2] = v14[38];
      uint64_t v5 = v14 + 39;
      goto LABEL_20;
    case 11:
      uint64_t v15 = (float *)*((void *)this + 51);
      *a3 = v15[40];
      a3[1] = v15[41];
      a3[2] = v15[42];
      uint64_t v5 = v15 + 43;
      goto LABEL_20;
    case 12:
      __n128 v16 = (float *)*((void *)this + 51);
      *a3 = v16[44];
      a3[1] = v16[45];
      a3[2] = v16[46];
      uint64_t v5 = v16 + 47;
      goto LABEL_20;
    case 13:
      uint64_t v17 = (float *)*((void *)this + 51);
      *a3 = v17[48];
      a3[1] = v17[49];
      a3[2] = v17[50];
      uint64_t v5 = v17 + 51;
      goto LABEL_20;
    case 14:
      uint64_t v18 = (float *)*((void *)this + 51);
      *a3 = v18[52];
      a3[1] = v18[53];
      a3[2] = v18[54];
      uint64_t v5 = v18 + 55;
      goto LABEL_20;
    case 15:
      __n128 v19 = (float *)*((void *)this + 51);
      *a3 = v19[56];
      a3[1] = v19[57];
      a3[2] = v19[58];
      uint64_t v5 = v19 + 59;
      goto LABEL_20;
    case 16:
      float32x2_t v20 = (float *)*((void *)this + 51);
      *a3 = v20[60];
      a3[1] = v20[61];
      a3[2] = v20[62];
      uint64_t v5 = v20 + 63;
      goto LABEL_20;
    case 17:
      float32x2_t v21 = (float *)*((void *)this + 51);
      *a3 = v21[64];
      a3[1] = v21[65];
      a3[2] = v21[66];
      uint64_t v5 = v21 + 67;
      goto LABEL_20;
    case 18:
      float32x2_t v22 = (float *)*((void *)this + 51);
      *a3 = v22[68];
      a3[1] = v22[69];
      a3[2] = v22[70];
      uint64_t v5 = v22 + 71;
LABEL_20:
      uint64_t v3 = 0;
      a3[3] = *v5;
      break;
    default:
      return v3;
  }
  return v3;
}

const char *HgcEquirectToSinusoidal::GetProgram(HgcEquirectToSinusoidal *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005e0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
             "    const half4 c1 = half4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xCGFloat y = half2(hg_Params[0].xy);\n"
             "    s0.CGFloat y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s0.CGFloat x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    s0.xCGFloat y = float2(r0.xy)*float2(c0.xx) + s0.xy;\n"
             "    s0.xz = s0.xy*hg_Params[1].xy;\n"
             "    s0.xz = s0.xz - float2(c0.yz);\n"
             "    s0.z = cos(s0.z);\n"
             "    s0.w = 1.00000f / s0.z;\n"
             "    s0.w = s0.x*s0.w;\n"
             "    s0.z = abs(s0.z);\n"
             "    s0.CGFloat x = select(s0.x, s0.w, -s0.z < 0.00000h);\n"
             "    s0.CGFloat x = s0.x + float(c0.y);\n"
             "    s0.z = s0.x*float(c0.w);\n"
             "    s0.z = floor(s0.z);\n"
             "    s0.w = 1.00000f / hg_Params[1].x;\n"
             "    s0.CGFloat x = s0.z*float(c1.x) + s0.x;\n"
             "    s0.CGFloat x = s0.x*s0.w;\n"
             "    s0.xCGFloat y = float2(r0.xy)*-float2(c0.xx) + s0.xy;\n"
             "    s0.w = float(c1.y);\n"
             "    s1.CGFloat y = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s1.CGFloat x = dot(s0.xyw, hg_Params[4].xyz);\n"
             "    s1.xCGFloat y = s1.xy + hg_Params[6].xy;\n"
             "    s1.xCGFloat y = s1.xy*hg_Params[6].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=739ef7cd:ec497388:410f5cf9:f088d68f\n"
             "//SIG=00400000:00000000:00000000:00000001:0002:0007:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000583\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
             "    const float4 c1 = float4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xCGFloat y = hg_Params[0].xy;\n"
             "    r1.CGFloat y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r1.CGFloat x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r1.xCGFloat y = r0.xy*c0.xx + r1.xy;\n"
             "    r1.xz = r1.xy*hg_Params[1].xy;\n"
             "    r1.xz = r1.xz - c0.yz;\n"
             "    r1.z = cos(r1.z);\n"
             "    r1.w = 1.00000f / r1.z;\n"
             "    r1.w = r1.x*r1.w;\n"
             "    r1.z = abs(r1.z);\n"
             "    r1.CGFloat x = select(r1.x, r1.w, -r1.z < 0.00000f);\n"
             "    r1.CGFloat x = r1.x + c0.y;\n"
             "    r1.z = r1.x*c0.w;\n"
             "    r1.z = floor(r1.z);\n"
             "    r1.w = 1.00000f / hg_Params[1].x;\n"
             "    r1.CGFloat x = r1.z*c1.x + r1.x;\n"
             "    r1.CGFloat x = r1.x*r1.w;\n"
             "    r1.xCGFloat y = r0.xy*-c0.xx + r1.xy;\n"
             "    r1.w = c1.y;\n"
             "    r0.CGFloat y = dot(r1.xyw, hg_Params[5].xyz);\n"
             "    r0.CGFloat x = dot(r1.xyw, hg_Params[4].xyz);\n"
             "    r0.xCGFloat y = r0.xy + hg_Params[6].xy;\n"
             "    r0.xCGFloat y = r0.xy*hg_Params[6].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=aeeac98c:3c5d117d:e39fb2a0:534a5e83\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0007:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000641\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
           "    const highp vec4 c1 = vec4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xCGFloat y = hg_ProgramLocal0.xy;\n"
           "    r1.CGFloat y = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r1.CGFloat x = dot(hg_TexCoord0, hg_ProgramLocal2);\n"
           "    r1.xCGFloat y = r0.xy*c0.xx + r1.xy;\n"
           "    r1.xz = r1.xy*hg_ProgramLocal1.xy;\n"
           "    r1.xz = r1.xz - c0.yz;\n"
           "    r1.z = cos(r1.z);\n"
           "    r1.w = 1.00000 / r1.z;\n"
           "    r1.w = r1.x*r1.w;\n"
           "    r1.z = abs(r1.z);\n"
           "    r1.CGFloat x = -r1.z < 0.00000 ? r1.w : r1.x;\n"
           "    r1.CGFloat x = r1.x + c0.y;\n"
           "    r1.z = r1.x*c0.w;\n"
           "    r1.z = floor(r1.z);\n"
           "    r1.w = 1.00000 / hg_ProgramLocal1.x;\n"
           "    r1.CGFloat x = r1.z*c1.x + r1.x;\n"
           "    r1.CGFloat x = r1.x*r1.w;\n"
           "    r1.xCGFloat y = r0.xy*-c0.xx + r1.xy;\n"
           "    r1.w = c1.y;\n"
           "    r0.CGFloat y = dot(r1.xyw, hg_ProgramLocal5.xyz);\n"
           "    r0.CGFloat x = dot(r1.xyw, hg_ProgramLocal4.xyz);\n"
           "    r0.xCGFloat y = r0.xy + hg_ProgramLocal6.xy;\n"
           "    r0.xCGFloat y = r0.xy*hg_ProgramLocal6.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=3a4335bf:4b19fd84:3008ac39:3dc1cae3\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:0007:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcEquirectToSinusoidal::InitProgramDescriptor(HgcEquirectToSinusoidal *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcEquirectToSinusoidal_hgc_visible", "//Metal1.0     \n//LEN=00000004c7\n[[ visible ]] FragmentOut HgcEquirectToSinusoidal_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
    "    const float4 c1 = float4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xCGFloat y = hg_Params[0].xy;\n"
    "    r1.CGFloat y = dot(texCoord0, hg_Params[3]);\n"
    "    r1.CGFloat x = dot(texCoord0, hg_Params[2]);\n"
    "    r1.xCGFloat y = r0.xy*c0.xx + r1.xy;\n"
    "    r1.xz = r1.xy*hg_Params[1].xy;\n"
    "    r1.xz = r1.xz - c0.yz;\n"
    "    r1.z = cos(r1.z);\n"
    "    r1.w = 1.00000f / r1.z;\n"
    "    r1.w = r1.x*r1.w;\n"
    "    r1.z = abs(r1.z);\n"
    "    r1.CGFloat x = select(r1.x, r1.w, -r1.z < 0.00000f);\n"
    "    r1.CGFloat x = r1.x + c0.y;\n"
    "    r1.z = r1.x*c0.w;\n"
    "    r1.z = floor(r1.z);\n"
    "    r1.w = 1.00000f / hg_Params[1].x;\n"
    "    r1.CGFloat x = r1.z*c1.x + r1.x;\n"
    "    r1.CGFloat x = r1.x*r1.w;\n"
    "    r1.xCGFloat y = r0.xy*-c0.xx + r1.xy;\n"
    "    r1.w = c1.y;\n"
    "    r0.CGFloat y = dot(r1.xyw, hg_Params[5].xyz);\n"
    "    r0.CGFloat x = dot(r1.xyw, hg_Params[4].xyz);\n"
    "    r0.xCGFloat y = r0.xy + hg_Params[6].xy;\n"
    "    r0.xCGFloat y = r0.xy*hg_Params[6].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcEquirectToSinusoidal");
}

void sub_1B7562AF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B7E75170;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E753B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  long long v36 = xmmword_1B7E75170;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  int32x4_t v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B7562C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B7562CC8()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1B7562CC0);
}

void *HgcEquirectToSinusoidal::shaderDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcEquirectToSinusoidal [hgc1]");
}

uint64_t HgcEquirectToSinusoidal::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 144) + 128))(*(void *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcEquirectToSinusoidal::Bind(HgcEquirectToSinusoidal *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcEquirectToSinusoidal::RenderTile(HgcEquirectToSinusoidal *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcEquirectToSinusoidal *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = v9;
    do
    {
      if (v10 < 2)
      {
        uint64_t v15 = 0;
        float32x4_t v17 = v14;
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = v10;
        float32x4_t v17 = v14;
        do
        {
          float32x4_t v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B7E736B0);
          uint64_t v19 = *((void *)this + 51);
          float32x4_t v21 = *(float32x4_t *)(v19 + 32);
          float32x4_t v20 = *(float32x4_t *)(v19 + 48);
          int8x16_t v22 = (int8x16_t)vmulq_f32(v17, v20);
          int8x16_t v23 = (int8x16_t)vmulq_f32(v18, v20);
          int8x16_t v24 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v22, v22, 4uLL));
          int8x16_t v25 = (int8x16_t)vaddq_f32((float32x4_t)v23, (float32x4_t)vextq_s8(v23, v23, 4uLL));
          int8x16_t v26 = (int8x16_t)vmulq_f32(v17, v21);
          int8x16_t v27 = (int8x16_t)vmulq_f32(v18, v21);
          int8x16_t v28 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)vextq_s8(v26, v26, 4uLL));
          int8x16_t v29 = (int8x16_t)vaddq_f32((float32x4_t)v27, (float32x4_t)vextq_s8(v27, v27, 4uLL));
          int8x16_t v30 = (int8x16_t)vaddq_f32((float32x4_t)v28, (float32x4_t)vextq_s8(v28, v28, 8uLL));
          int8x16_t v31 = *(int8x16_t *)(v19 + 96);
          float32x4_t v32 = *(float32x4_t *)(v19 + 112);
          float32x4_t v33 = (float32x4_t)vbslq_s8(v31, v30, (int8x16_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vextq_s8(v24, v24, 8uLL)));
          float32x4_t v34 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)v29, (float32x4_t)vextq_s8(v29, v29, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v25, (float32x4_t)vextq_s8(v25, v25, 8uLL)));
          int8x16_t v35 = *(int8x16_t *)(v19 + 16);
          float32x4_t v36 = vmulq_laneq_f32(*(float32x4_t *)v19, v32, 2);
          int8x16_t v37 = (int8x16_t)vaddq_f32(v36, v33);
          int32x2_t v38 = (int32x2_t)vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v37.i8);
          *(int32x2_t *)v39.i8 = vdup_lane_s32(v38, 0);
          v39.u64[1] = (unint64_t)vdup_lane_s32(v38, 1);
          int8x16_t v40 = (int8x16_t)vaddq_f32(v36, v34);
          int32x2_t v41 = (int32x2_t)vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v40.i8);
          *(int32x2_t *)v42.i8 = vdup_lane_s32(v41, 0);
          v42.u64[1] = (unint64_t)vdup_lane_s32(v41, 1);
          int8x16_t v43 = *(int8x16_t *)(v19 + 128);
          float32x4_t v44 = *(float32x4_t *)(v19 + 144);
          int8x16_t v45 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v43, v40, v42), v44);
          float32x4_t v46 = (float32x4_t)vbslq_s8(v43, v37, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v43, v37, v39), v44));
          float32x4_t v47 = (float32x4_t)vbslq_s8(v43, v40, v45);
          float32x4_t v49 = *(float32x4_t *)(v19 + 160);
          int8x16_t v48 = *(int8x16_t *)(v19 + 176);
          float32x4_t v50 = vmulq_f32(v49, v46);
          float32x4_t v51 = vmulq_f32(v49, v47);
          float32x4_t v52 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
          float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
          float32x4_t v54 = vabdq_f32(vsubq_f32(v50, vsubq_f32(v52, (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v52, v50)))), v32);
          float32x4_t v55 = vabdq_f32(vsubq_f32(v51, vsubq_f32(v53, (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v53, v51)))), v32);
          float32x4_t v56 = *(float32x4_t *)(v19 + 192);
          float32x4_t v57 = *(float32x4_t *)(v19 + 208);
          float32x4_t v58 = vsubq_f32(v54, v56);
          float32x4_t v59 = vsubq_f32(v55, v56);
          float32x4_t v60 = vmulq_f32(v58, v58);
          int8x16_t v61 = (int8x16_t)vmulq_f32(v59, v59);
          float32x4_t v62 = *(float32x4_t *)(v19 + 224);
          float32x4_t v63 = *(float32x4_t *)(v19 + 240);
          int8x16_t v64 = (int8x16_t)vaddq_f32(v63, vmulq_f32((float32x4_t)v61, vaddq_f32(v57, vmulq_f32(v62, (float32x4_t)v61))));
          int8x16_t v65 = (int8x16_t)vmulq_f32(v60, vaddq_f32(v63, vmulq_f32(v60, vaddq_f32(v57, vmulq_f32(v62, v60)))));
          float32x4_t v66 = *(float32x4_t *)(v19 + 256);
          float32x4_t v67 = *(float32x4_t *)(v19 + 272);
          int64x2_t v68 = (int64x2_t)vmulq_f32(v58, vaddq_f32(v66, (float32x4_t)v65));
          v65.i64[0] = v46.i64[0];
          v65.i64[1] = v68.i64[1];
          int64x2_t v69 = (int64x2_t)vmulq_f32(v59, vaddq_f32(v66, vmulq_f32((float32x4_t)v61, (float32x4_t)v64)));
          v61.i64[0] = v47.i64[0];
          v61.i64[1] = v69.i64[1];
          v46.i64[1] = vdupq_laneq_s64(v68, 1).u64[0];
          v47.i64[1] = vdupq_laneq_s64(v69, 1).u64[0];
          float32x4_t v70 = (float32x4_t)vrev64q_s32((int32x4_t)v46);
          float32x4_t v71 = (float32x4_t)vrev64q_s32((int32x4_t)v47);
          float32x4_t v72 = vminq_f32(vmaxq_f32(vrecpeq_f32(v70), v66), v67);
          float32x4_t v73 = vminq_f32(vmaxq_f32(vrecpeq_f32(v71), v66), v67);
          float32x4_t v74 = vminq_f32(vmaxq_f32(vmulq_f32(v72, vrecpsq_f32(v70, v72)), v66), v67);
          float32x4_t v75 = vminq_f32(vmaxq_f32(vmulq_f32(v73, vrecpsq_f32(v71, v73)), v66), v67);
          int8x16_t v76 = (int8x16_t)vmulq_f32(v74, vrecpsq_f32(v70, v74));
          int8x16_t v77 = *(int8x16_t *)(v19 + 288);
          float32x4_t v78 = (float32x4_t)vbslq_s8(v77, v76, v65);
          float32x4_t v79 = (float32x4_t)vbslq_s8(v77, (int8x16_t)vmulq_f32(v75, vrecpsq_f32(v71, v75)), v61);
          int8x16_t v80 = vbslq_s8(v77, (int8x16_t)vmulq_n_f32(v78, v78.f32[0]), v65);
          int8x16_t v81 = vbslq_s8(v77, (int8x16_t)vmulq_n_f32(v79, v79.f32[0]), v61);
          v61.i64[0] = *(void *)(v19 + 312);
          *(int8x8_t *)v75.f32 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), *(int8x8_t *)v61.i8);
          v65.i64[0] = v80.i64[0];
          v65.i64[1] = v75.i64[0];
          *(int8x8_t *)v61.i8 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), *(int8x8_t *)v61.i8);
          v64.i64[0] = v81.i64[0];
          v64.i64[1] = v61.i64[0];
          v75.i64[1] = v80.i64[0];
          v61.i64[1] = v81.i64[0];
          v81.i64[0] = vbslq_s8(v31, (int8x16_t)vaddq_f32(v63, (float32x4_t)vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32(v75, v66), vextq_s8(v65, v65, 0xCuLL), v65), v65)), v65).u64[0];
          v80.i64[0] = vbslq_s8(v31, (int8x16_t)vaddq_f32(v63, (float32x4_t)vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v61, v66), vextq_s8(v64, v64, 0xCuLL), v64), v64)), v64).u64[0];
          v61.i64[0] = v81.i64[0];
          v61.i64[1] = vmulq_f32(v49, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v81, 0)).i64[1];
          v75.i64[0] = v80.i64[0];
          v75.i64[1] = vmulq_f32(v49, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v80, 0)).i64[1];
          float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v61));
          float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
          v81.i64[1] = vsubq_f32(v82, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v82, *(float32x4_t *)&v61), v48, (int8x16_t)0)).i64[1];
          v80.i64[1] = vsubq_f32(v83, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v83, v75), v48, (int8x16_t)0)).i64[1];
          float32x4_t v84 = (float32x4_t)vextq_s8(v35, v35, 4uLL);
          float32x4_t v85 = vminq_f32(vmaxq_f32(vmulq_f32(v63, vrecpeq_f32(v84)), v66), v67);
          int8x16_t v86 = (int8x16_t)vmulq_f32(v85, vrecpsq_f32(v84, v85));
          int8x16_t v87 = vbslq_s8(v77, v86, v81);
          int8x16_t v88 = vbslq_s8(v77, v86, v80);
          float32x4_t v89 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v62, (float32x4_t)v87, 2), (float32x4_t)v87), v87);
          float32x4_t v90 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v62, (float32x4_t)v88, 2), (float32x4_t)v88), v88);
          float32x4_t v91 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_laneq_f32(v90, v90, 3), v88);
          int8x16_t v92 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_laneq_f32(v89, v89, 3), v87), v36);
          int8x16_t v93 = (int8x16_t)vsubq_f32(v91, v36);
          int8x16_t v94 = v92;
          v94.i32[3] = 1.0;
          int8x16_t v95 = v93;
          v95.i32[3] = 1.0;
          int8x16_t v96 = *(int8x16_t *)(v19 + 320);
          v92.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
          *(int8x8_t *)v94.i8 = vqtbl1_s8(v92, *(int8x8_t *)v96.i8);
          v63.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          v94.u64[1] = (unint64_t)vqtbl1_s8(v92, *(int8x8_t *)v63.f32);
          v93.i64[1] = vextq_s8(v95, v95, 8uLL).u64[0];
          *(int8x8_t *)v92.i8 = vqtbl1_s8(v93, *(int8x8_t *)v96.i8);
          v92.u64[1] = (unint64_t)vqtbl1_s8(v93, *(int8x8_t *)v63.f32);
          float32x4_t v98 = *(float32x4_t *)(v19 + 64);
          float32x4_t v97 = *(float32x4_t *)(v19 + 80);
          int32x4_t v99 = (int32x4_t)vmulq_f32((float32x4_t)v94, v97);
          int32x4_t v100 = (int32x4_t)vmulq_f32(v97, (float32x4_t)v92);
          int32x4_t v101 = (int32x4_t)vmulq_f32((float32x4_t)v94, v98);
          int32x4_t v102 = (int32x4_t)vmulq_f32((float32x4_t)v92, v98);
          float32x4_t v103 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), vaddq_f32((float32x4_t)v102, (float32x4_t)vrev64q_s32(v102))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 4uLL), vaddq_f32((float32x4_t)v100, (float32x4_t)vrev64q_s32(v100))));
          uint64_t v104 = *((int *)a2 + 22);
          float32x4_t v105 = vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), vaddq_f32((float32x4_t)v101, (float32x4_t)vrev64q_s32(v101))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), vaddq_f32((float32x4_t)v99, (float32x4_t)vrev64q_s32(v99)))), v9);
          uint64_t v106 = *((void *)a2 + 10);
          if (v5)
          {
            int32x4_t v107 = vaddq_s32(vcvtq_s32_f32(v105), vcltzq_f32(v105));
            float32x2_t v108 = (float32x2_t)vsubq_f32(v105, vcvtq_f32_s32(v107)).u64[0];
            float32x4_t v109 = (float32x4_t *)(v106 + 16 * (v107.i32[0] + v107.i32[1] * (int)v104));
            float32x4_t v110 = vaddq_f32(*v109, vmulq_n_f32(vsubq_f32(v109[1], *v109), v108.f32[0]));
            float32x4_t v111 = vaddq_f32(v110, vmulq_lane_f32(vsubq_f32(vaddq_f32(v109[v104], vmulq_n_f32(vsubq_f32(v109[(int)v104 + 1], v109[v104]), v108.f32[0])), v110), v108, 1));
            float32x4_t v112 = vsubq_f32(v103, v9);
            int32x4_t v113 = vaddq_s32(vcvtq_s32_f32(v112), vcltzq_f32(v112));
            v112.i64[0] = vsubq_f32(v112, vcvtq_f32_s32(v113)).u64[0];
            int8x16_t v114 = (float32x4_t *)(v106 + 16 * (v113.i32[0] + v113.i32[1] * (int)v104));
            float32x4_t v115 = vaddq_f32(*v114, vmulq_n_f32(vsubq_f32(v114[1], *v114), v112.f32[0]));
            float32x4_t v116 = vaddq_f32(v115, vmulq_lane_f32(vsubq_f32(vaddq_f32(v114[v104], vmulq_n_f32(vsubq_f32(v114[(int)v104 + 1], v114[v104]), v112.f32[0])), v115), *(float32x2_t *)v112.f32, 1));
          }
          else
          {
            float32x4_t v117 = vaddq_f32(v105, v13);
            int32x4_t v118 = vcvtq_s32_f32(v117);
            v117.i64[0] = vaddq_s32(v118, vcgtq_f32(vcvtq_f32_s32(v118), v117)).u64[0];
            float32x4_t v111 = *(float32x4_t *)(v106 + 16 * (v117.i32[0] + v117.i32[1] * (int)v104));
            float32x4_t v119 = vaddq_f32(vsubq_f32(v103, v9), v13);
            int32x4_t v120 = vcvtq_s32_f32(v119);
            v119.i64[0] = vaddq_s32(v120, vcgtq_f32(vcvtq_f32_s32(v120), v119)).u64[0];
            float32x4_t v116 = *(float32x4_t *)(v106 + 16 * (v119.i32[0] + v119.i32[1] * (int)v104));
          }
          float32x2_t v121 = (float32x4_t *)(v11 + 16 * v15);
          *float32x2_t v121 = v111;
          v121[1] = v116;
          float32x4_t v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B7E736B0);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        uint64_t v15 = v15;
      }
      if ((int)v15 < v10)
      {
        uint64_t v122 = *((void *)this + 51);
        int8x16_t v123 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v122 + 48));
        int8x16_t v124 = (int8x16_t)vaddq_f32((float32x4_t)v123, (float32x4_t)vextq_s8(v123, v123, 4uLL));
        int8x16_t v125 = (int8x16_t)vaddq_f32((float32x4_t)v124, (float32x4_t)vextq_s8(v124, v124, 8uLL));
        int8x16_t v126 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v122 + 32));
        int8x16_t v127 = (int8x16_t)vaddq_f32((float32x4_t)v126, (float32x4_t)vextq_s8(v126, v126, 4uLL));
        int8x16_t v128 = (int8x16_t)vaddq_f32((float32x4_t)v127, (float32x4_t)vextq_s8(v127, v127, 8uLL));
        int8x16_t v129 = *(int8x16_t *)(v122 + 96);
        float32x4_t v130 = *(float32x4_t *)(v122 + 112);
        float32x4_t v131 = (float32x4_t)vbslq_s8(v129, v128, v125);
        int8x16_t v132 = *(int8x16_t *)(v122 + 16);
        float32x4_t v133 = vmulq_laneq_f32(*(float32x4_t *)v122, v130, 2);
        int8x16_t v134 = (int8x16_t)vaddq_f32(v133, v131);
        int32x2_t v135 = (int32x2_t)vmul_f32(*(float32x2_t *)v132.i8, *(float32x2_t *)v134.i8);
        *(int32x2_t *)v136.i8 = vdup_lane_s32(v135, 0);
        v136.u64[1] = (unint64_t)vdup_lane_s32(v135, 1);
        float32x4_t v137 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v122 + 128), v134, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v122 + 128), v134, v136), *(float32x4_t *)(v122 + 144)));
        float32x4_t v138 = *(float32x4_t *)(v122 + 160);
        int8x16_t v139 = *(int8x16_t *)(v122 + 176);
        float32x4_t v140 = vmulq_f32(v138, v137);
        float32x4_t v141 = vcvtq_f32_s32(vcvtq_s32_f32(v140));
        float32x4_t v142 = vsubq_f32(vabdq_f32(vsubq_f32(v140, vsubq_f32(v141, (float32x4_t)vandq_s8(v139, (int8x16_t)vcgtq_f32(v141, v140)))), v130), *(float32x4_t *)(v122 + 192));
        float32x4_t v143 = vmulq_f32(v142, v142);
        float32x4_t v144 = *(float32x4_t *)(v122 + 224);
        float32x4_t v145 = *(float32x4_t *)(v122 + 240);
        int8x16_t v146 = (int8x16_t)vmulq_f32(v143, vaddq_f32(v145, vmulq_f32(v143, vaddq_f32(*(float32x4_t *)(v122 + 208), vmulq_f32(v144, v143)))));
        float32x4_t v147 = *(float32x4_t *)(v122 + 256);
        float32x4_t v148 = *(float32x4_t *)(v122 + 272);
        int64x2_t v149 = (int64x2_t)vmulq_f32(v142, vaddq_f32(v147, (float32x4_t)v146));
        v146.i64[0] = v137.i64[0];
        v146.i64[1] = v149.i64[1];
        v137.i64[1] = vdupq_laneq_s64(v149, 1).u64[0];
        float32x4_t v150 = (float32x4_t)vrev64q_s32((int32x4_t)v137);
        float32x4_t v151 = vminq_f32(vmaxq_f32(vrecpeq_f32(v150), v147), v148);
        float32x4_t v152 = vminq_f32(vmaxq_f32(vmulq_f32(v151, vrecpsq_f32(v150, v151)), v147), v148);
        int8x16_t v153 = (int8x16_t)vmulq_f32(v152, vrecpsq_f32(v150, v152));
        int8x16_t v154 = *(int8x16_t *)(v122 + 288);
        float32x4_t v155 = (float32x4_t)vbslq_s8(v154, v153, v146);
        int8x16_t v156 = vbslq_s8(v154, (int8x16_t)vmulq_n_f32(v155, v155.f32[0]), v146);
        *(int8x8_t *)v146.i8 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), *(int8x8_t *)(v122 + 312));
        v157.i64[0] = v156.i64[0];
        v157.i64[1] = v146.i64[0];
        v146.i64[1] = v156.i64[0];
        v156.i64[0] = vbslq_s8(v129, (int8x16_t)vaddq_f32(v145, (float32x4_t)vbslq_s8(v129, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v146, v147), vextq_s8(v157, v157, 0xCuLL), v157), v157)), v157).u64[0];
        v146.i64[0] = v156.i64[0];
        v146.i64[1] = vmulq_f32(v138, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v156, 0)).i64[1];
        float32x4_t v158 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v146));
        v156.i64[1] = vsubq_f32(v158, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v158, *(float32x4_t *)&v146), v139, (int8x16_t)0)).i64[1];
        float32x4_t v159 = (float32x4_t)vextq_s8(v132, v132, 4uLL);
        float32x4_t v160 = vminq_f32(vmaxq_f32(vmulq_f32(v145, vrecpeq_f32(v159)), v147), v148);
        int8x16_t v161 = vbslq_s8(v154, (int8x16_t)vmulq_f32(v160, vrecpsq_f32(v159, v160)), v156);
        float32x4_t v162 = (float32x4_t)vbslq_s8(v129, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v144, (float32x4_t)v161, 2), (float32x4_t)v161), v161);
        int8x16_t v163 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v129, (int8x16_t)vmulq_laneq_f32(v162, v162, 3), v161), v133);
        int8x16_t v164 = v163;
        v164.i32[3] = 1.0;
        int8x16_t v165 = *(int8x16_t *)(v122 + 320);
        v163.i64[1] = vextq_s8(v164, v164, 8uLL).u64[0];
        *(int8x8_t *)v164.i8 = vqtbl1_s8(v163, *(int8x8_t *)v165.i8);
        v164.u64[1] = (unint64_t)vqtbl1_s8(v163, (int8x8_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL));
        int32x4_t v166 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v122 + 80), (float32x4_t)v164);
        int32x4_t v167 = (int32x4_t)vmulq_f32((float32x4_t)v164, *(float32x4_t *)(v122 + 64));
        uint64_t v168 = *((int *)a2 + 22);
        float32x4_t v169 = vsubq_f32((float32x4_t)vbslq_s8(v129, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL), vaddq_f32((float32x4_t)v167, (float32x4_t)vrev64q_s32(v167))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 4uLL), vaddq_f32((float32x4_t)v166, (float32x4_t)vrev64q_s32(v166)))), v9);
        uint64_t v170 = *((void *)a2 + 10);
        if (v5)
        {
          int32x4_t v171 = vaddq_s32(vcvtq_s32_f32(v169), vcltzq_f32(v169));
          float32x2_t v172 = (float32x2_t)vsubq_f32(v169, vcvtq_f32_s32(v171)).u64[0];
          int32x4_t v173 = (float32x4_t *)(v170 + 16 * (v171.i32[0] + v171.i32[1] * (int)v168));
          float32x4_t v174 = vaddq_f32(*v173, vmulq_n_f32(vsubq_f32(v173[1], *v173), v172.f32[0]));
          float32x4_t v175 = vaddq_f32(v174, vmulq_lane_f32(vsubq_f32(vaddq_f32(v173[v168], vmulq_n_f32(vsubq_f32(v173[(int)v168 + 1], v173[v168]), v172.f32[0])), v174), v172, 1));
        }
        else
        {
          float32x4_t v176 = vaddq_f32(v169, v13);
          int32x4_t v177 = vcvtq_s32_f32(v176);
          v176.i64[0] = vaddq_s32(v177, vcgtq_f32(vcvtq_f32_s32(v177), v176)).u64[0];
          float32x4_t v175 = *(float32x4_t *)(v170 + 16 * (v176.i32[0] + v176.i32[1] * (int)v168));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v175;
      }
      float32x4_t v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B7E736C0);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcEquirectToSinusoidal::GetDOD(HgcEquirectToSinusoidal *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
  {
    uint64_t v4 = &HGRectNull;
  }
  else
  {
    uint64_t v5 = *(void *)&a4.var2;
    uint64_t v6 = *(void *)&a4.var0;
    if ((*(int (**)(HgcEquirectToSinusoidal *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    uint64_t v4 = &HGRectInfinite;
  }
  return *(void *)v4;
}

uint64_t HgcEquirectToSinusoidal::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcEquirectToSinusoidal::HgcEquirectToSinusoidal(HgcEquirectToSinusoidal *this)
{
  HGNode::HGNode((HGNode *)this);
  *long long v1 = &unk_1F1098290;
  operator new();
}

void sub_1B7563A94(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcEquirectToSinusoidal::~HgcEquirectToSinusoidal(HGNode *this)
{
  *(void *)this = &unk_1F1098290;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C409BD2D9E4);
  }

  HGNode::~HGNode(this);
}

{
  void *v1;
  uint64_t vars8;

  HgcEquirectToSinusoidal::~HgcEquirectToSinusoidal(this);

  HGObject::operator delete(v1);
}

uint64_t HgcEquirectToSinusoidal::SetParameter(HgcEquirectToSinusoidal *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v7 = (float *)*((void *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6) {
        return 0;
      }
      *uint64_t v7 = a3.n128_f32[0];
      v7[1] = a4;
      double v7[2] = a5;
      void v7[3] = a6;
      goto LABEL_33;
    case 1:
      uint64_t v9 = (float *)*((void *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6) {
        return 0;
      }
      unsigned char v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      _OWORD v9[6] = a5;
      v9[7] = a6;
      goto LABEL_33;
    case 2:
      uint64_t v10 = (float *)*((void *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6) {
        return 0;
      }
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_33;
    case 3:
      uint64_t v11 = (float *)*((void *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6) {
        return 0;
      }
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_33;
    case 4:
      uint64_t v12 = (__n128 *)*((void *)this + 51);
      if (v12[4].n128_f32[0] == a3.n128_f32[0]
        && v12[4].n128_f32[1] == a4
        && v12[4].n128_f32[2] == a6
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u32[0] = a3.n128_u32[0];
      v12[4].n128_f32[1] = a4;
      v12[4].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[21] = a3;
      goto LABEL_33;
    case 5:
      float32x4_t v13 = (__n128 *)*((void *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[22] = a3;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcEquirectToSinusoidal::GetParameter(HgcEquirectToSinusoidal *this, int a2, float *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = (float *)*((void *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      uint64_t v4 = v3 + 3;
      goto LABEL_8;
    case 1:
      uint64_t v5 = (float *)*((void *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      uint64_t v4 = v5 + 7;
      goto LABEL_8;
    case 2:
      uint64_t v6 = (float *)*((void *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      uint64_t v4 = v6 + 11;
      goto LABEL_8;
    case 3:
      uint64_t v7 = (float *)*((void *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      uint64_t v4 = v7 + 15;
      goto LABEL_8;
    case 4:
      uint64_t v8 = (float *)*((void *)this + 51);
      *a3 = v8[84];
      a3[1] = v8[85];
      a3[2] = v8[86];
      uint64_t v4 = v8 + 87;
      goto LABEL_8;
    case 5:
      uint64_t v9 = (float *)*((void *)this + 51);
      *a3 = v9[88];
      a3[1] = v9[89];
      a3[2] = v9[90];
      uint64_t v4 = v9 + 91;
LABEL_8:
      float result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcSinusoidalToEquirect::GetProgram(HgcSinusoidalToEquirect *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000477\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.CGFloat y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s0.CGFloat x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    s0.xCGFloat y = hg_Params[0].xy*float2(c0.xx) + s0.xy;\n"
             "    s0.xz = s0.xy*hg_Params[1].xy;\n"
             "    s0.xz = s0.xz - float2(c0.yz);\n"
             "    s0.z = cos(s0.z);\n"
             "    s0.CGFloat x = s0.x*s0.z + float(c0.y);\n"
             "    s0.CGFloat x = s0.x/hg_Params[1].x;\n"
             "    s0.xCGFloat y = hg_Params[0].xy*-float2(c0.xx) + s0.xy;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.CGFloat y = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s1.CGFloat x = dot(s0.xyw, hg_Params[4].xyz);\n"
             "    s1.xCGFloat y = s1.xy + hg_Params[6].xy;\n"
             "    s1.xCGFloat y = s1.xy*hg_Params[6].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=907f1e3b:69c9b012:9e08d289:d3acd372\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0007:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000044b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.CGFloat y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r0.CGFloat x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r0.xCGFloat y = hg_Params[0].xy*c0.xx + r0.xy;\n"
             "    r0.xz = r0.xy*hg_Params[1].xy;\n"
             "    r0.xz = r0.xz - c0.yz;\n"
             "    r0.z = cos(r0.z);\n"
             "    r0.CGFloat x = r0.x*r0.z + c0.y;\n"
             "    r0.CGFloat x = r0.x/hg_Params[1].x;\n"
             "    r0.xCGFloat y = hg_Params[0].xy*-c0.xx + r0.xy;\n"
             "    r0.w = c0.w;\n"
             "    r1.CGFloat y = dot(r0.xyw, hg_Params[5].xyz);\n"
             "    r1.CGFloat x = dot(r0.xyw, hg_Params[4].xyz);\n"
             "    r1.xCGFloat y = r1.xy + hg_Params[6].xy;\n"
             "    r1.xCGFloat y = r1.xy*hg_Params[6].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=de8c2ebc:47618ec8:de3c5c19:82ba5b0b\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0007:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000514\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.CGFloat y = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r0.CGFloat x = dot(hg_TexCoord0, hg_ProgramLocal2);\n"
           "    r0.xCGFloat y = hg_ProgramLocal0.xy*c0.xx + r0.xy;\n"
           "    r0.xz = r0.xy*hg_ProgramLocal1.xy;\n"
           "    r0.xz = r0.xz - c0.yz;\n"
           "    r0.z = cos(r0.z);\n"
           "    r0.CGFloat x = r0.x*r0.z + c0.y;\n"
           "    r0.CGFloat x = r0.x/hg_ProgramLocal1.x;\n"
           "    r0.xCGFloat y = hg_ProgramLocal0.xy*-c0.xx + r0.xy;\n"
           "    r0.w = c0.w;\n"
           "    r1.CGFloat y = dot(r0.xyw, hg_ProgramLocal5.xyz);\n"
           "    r1.CGFloat x = dot(r0.xyw, hg_ProgramLocal4.xyz);\n"
           "    r1.xCGFloat y = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r1.xCGFloat y = r1.xy*hg_ProgramLocal6.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r1.xy);\n"
           "}\n"
           "//MD5=ad3a381e:4e10c63a:6e43c5d0:f30a6f2c\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0007:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSinusoidalToEquirect::InitProgramDescriptor(HgcSinusoidalToEquirect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSinusoidalToEquirect_hgc_visible", "//Metal1.0     \n//LEN=000000038f\n[[ visible ]] FragmentOut HgcSinusoidalToEquirect_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.CGFloat y = dot(texCoord0, hg_Params[3]);\n"
    "    r0.CGFloat x = dot(texCoord0, hg_Params[2]);\n"
    "    r0.xCGFloat y = hg_Params[0].xy*c0.xx + r0.xy;\n"
    "    r0.xz = r0.xy*hg_Params[1].xy;\n"
    "    r0.xz = r0.xz - c0.yz;\n"
    "    r0.z = cos(r0.z);\n"
    "    r0.CGFloat x = r0.x*r0.z + c0.y;\n"
    "    r0.CGFloat x = r0.x/hg_Params[1].x;\n"
    "    r0.xCGFloat y = hg_Params[0].xy*-c0.xx + r0.xy;\n"
    "    r0.w = c0.w;\n"
    "    r1.CGFloat y = dot(r0.xyw, hg_Params[5].xyz);\n"
    "    r1.CGFloat x = dot(r0.xyw, hg_Params[4].xyz);\n"
    "    r1.xCGFloat y = r1.xy + hg_Params[6].xy;\n"
    "    r1.xCGFloat y = r1.xy*hg_Params[6].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcSinusoidalToEquirect");
}