uint64_t p_TSSPropertyEntryCompare(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 8) - *(unsigned __int16 *)(a2 + 8);
}

void sub_2234CC6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a2);
}

BOOL TSWPStyleAttributeArray::isEmpty(TSWPStyleAttributeArray *this)
{
  return *((void *)this + 2) == 0;
}

void *TSWPStyleAttributeArray::compressLeadingNull(void *this, TSWPStorageTransaction *a2)
{
  if (this[2] == 1 && !*(void *)(this[4] + 8)) {
    return (void *)(*(uint64_t (**)(void *, void, uint64_t, TSWPStorageTransaction *))(*this + 56))(this, 0, 1, a2);
  }
  return this;
}

void sub_2234CCCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPParagraphAttributeArray::didReplaceCharactersInRangeWithString(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v12 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 80))(result, 5, a2, a3, a4, a5);
    if (a5)
    {
      uint64_t v13 = result;
      if (result != 0x7FFFFFFFFFFFFFFFLL)
      {
        result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 168))(v12);
        if (result)
        {
          v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 160);
          return v14(v12, a2, a3, a5, v13, a6, a7);
        }
      }
    }
  }
  return result;
}

unint64_t TSWPParagraphAttributeArray::adjustCharIndexForCharRangeWithString(TSWPAttributeArray *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(a1, a3);
  if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v10;
  }
  if (a6 != a4) {
    TSWPAttributeArray::adjustCharIndexStartingAtAttributeIndex((uint64_t)a1, a2, v11 + 1, a6 - a4);
  }
  return v11;
}

uint64_t TSWPAttributeArray::adjustCharIndexStartingAtAttributeIndex(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(result + 16);
  BOOL v5 = v4 > a3;
  unint64_t v6 = v4 - a3;
  if (v5)
  {
    v7 = (void *)(*(void *)(result + 32) + 16 * a3);
    do
    {
      *v7 += a4;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

int64x2_t TSWPParagraphAttributeArray::insertAttributesForMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, TSWPStorageTransaction *a7)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1) & 1) == 0)
  {
    uint64_t v13 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", "virtual void TSWPParagraphAttributeArray::insertAttributesForMarkers(NSRange, NSUInteger, TSWPAttributeIndex, markerArray &, TSWPStorageTransaction *)");
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 304, @"insertAttributesForMarkers: we should not be in this method without objects or starts.");
  }
  int v15 = *(_DWORD *)(a1 + 8);
  switch(v15)
  {
    case 0:
      int v56 = [*(id *)(a1 + 40) isInInit];
      int v55 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "documentRoot"), "isBeingLocalized");
      uint64_t v16 = *a6;
      if (*a6 != a6[1])
      {
        v17 = 0;
        uint64_t v18 = a2 + 1;
        do
        {
          if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v16 + 8)))
          {
            uint64_t v19 = v18 + *(void *)v16;
            if (!v17)
            {
              unint64_t v20 = *(void *)(a1 + 72);
              uint64_t v21 = *(void *)(a1 + 32);
              if (v20 == 0x7FFFFFFFFFFFFFFFLL)
              {
                v17 = *(void **)(v21 + 16 * a5 + 8);
                uint64_t v22 = v18 + *(void *)v16;
              }
              else
              {
                v17 = *(void **)(v21 + 16 * v20 + 8);
                uint64_t v22 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a1, v20);
              }
              int v23 = v56;
              if (!*(unsigned char *)(a1 + 56)) {
                int v23 = 1;
              }
              if (((v23 | v55) & 1) == 0)
              {
                uint64_t v24 = [v17 followingParagraphStyle];
                if (v24 && v24 != (void)v17)
                {
                  v26 = (void *)v24;
                  if (*(void *)(a1 + 64) == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    *(void *)(a1 + 64) = v22;
                    uint64_t v27 = [*(id *)(a1 + 40) attributeArrayForKind:2];
                    if (v27) {
                      *(void *)(v27 + 64) = *(void *)(a1 + 64);
                    }
                  }
                  v17 = v26;
                }
              }
            }
            ++a5;
            uint64_t v57 = v19;
            uint64_t v58 = (uint64_t)v17;
            TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)a1, (const TSWPAttributeRecord *)&v57, a5, 0, a7);
          }
          v16 += 16;
        }
        while (v16 != a6[1]);
      }
      break;
    case 1:
      if (*(void *)(a1 + 72) != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v32 = objc_msgSend(*(id *)(a1 + 40), "paragraphLevelAtParIndex:");
        uint64_t v33 = *a6;
        if (*a6 != a6[1])
        {
          uint64_t v34 = v32;
          uint64_t v35 = a2 + 1;
          do
          {
            if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v33 + 8))) {
              objc_msgSend(*(id *)(a1 + 40), "setParagraphLevel:forCharRange:undoTransaction:", v34, v35 + *(void *)v33, 1, a7);
            }
            v33 += 16;
          }
          while (v33 != a6[1]);
        }
      }
      break;
    case 2:
      if (a4 && *(void *)(a1 + 64) != 0x7FFFFFFFFFFFFFFFLL && (v36 = *(void **)(a1 + 40)) != 0)
      {
        uint64_t v37 = objc_msgSend((id)objc_msgSend(v36, "stylesheet"), "defaultListStyle");
        if (!v37) {
          uint64_t v37 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "stylesheet"), "defaultListStyle");
        }
        if ([*(id *)(a1 + 40) listStyleAtCharIndex:*(void *)(a1 + 64) effectiveRange:0] != v37) {
          objc_msgSend(*(id *)(a1 + 40), "setListStyle:forCharRange:undoTransaction:", v37, *(void *)(a1 + 64), a2 + a4 - *(void *)(a1 + 64), a7);
        }
      }
      else
      {
        uint64_t v42 = *(void *)(a1 + 72);
        if (v42 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v43 = [*(id *)(a1 + 40) listStyleAtParIndex:v42 effectiveRange:0];
          uint64_t v44 = *a6;
          if (*a6 != a6[1])
          {
            uint64_t v45 = v43;
            uint64_t v46 = a2 + 1;
            do
            {
              if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v44 + 8)))
              {
                ++a5;
                uint64_t v57 = v46 + *(void *)v44;
                uint64_t v58 = v45;
                TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)a1, (const TSWPAttributeRecord *)&v57, a5, 0, a7);
              }
              v44 += 16;
            }
            while (v44 != a6[1]);
          }
        }
      }
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      break;
    case 8:
      uint64_t v39 = *a6;
      uint64_t v38 = a6[1];
      if (*a6 != v38)
      {
        uint64_t v40 = a2 + 1;
        do
        {
          if (*(_WORD *)(v39 + 8) == 4)
          {
            ++a5;
            uint64_t v57 = v40 + *(void *)v39;
            uint64_t v58 = 0;
            TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)a1, (const TSWPAttributeRecord *)&v57, a5, 0, a7);
            uint64_t v38 = a6[1];
          }
          v39 += 16;
        }
        while (v39 != v38);
      }
      break;
    case 11:
      for (uint64_t i = *a6; i != a6[1]; i += 16)
      {
        if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(i + 8)))
        {
          unint64_t v47 = *(void *)(a1 + 72);
          if (v47 == 0x7FFFFFFFFFFFFFFFLL) {
            unint64_t v47 = a5;
          }
          if (v47 < *(void *)(a1 + 16))
          {
            if (*(_DWORD *)(*(void *)(a1 + 32) + 16 * v47 + 8))
            {
              if (a4)
              {
                uint64_t v48 = a2 + *(void *)i + 1;
                if (a2 + *(void *)i != 0x7FFFFFFFFFFFFFFELL)
                {
                  v49 = *(void **)(a1 + 40);
                  if (v49)
                  {
                    uint64_t v50 = *a6;
                    uint64_t v51 = a6[1] - *a6;
                    if (v51 && (uint64_t v52 = (v51 >> 4) - 1, *(void *)(v50 + 16 * v52) == a4 - 1))
                    {
                      uint64_t v53 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(v50 + 16 * v52 + 8));
                      v49 = *(void **)(a1 + 40);
                    }
                    else
                    {
                      uint64_t v53 = 0;
                    }
                    objc_msgSend(v49, "setListStart:forCharRange:undoTransaction:", 0, v48, a2 + a4 - v48 + v53, a7);
                  }
                }
              }
            }
          }
          goto LABEL_76;
        }
      }
      break;
    default:
      if (v15 == 18 && *(void *)(a1 + 72) != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v28 = objc_msgSend(*(id *)(a1 + 40), "writingDirectionForParagraphAtParIndex:");
        uint64_t v29 = *a6;
        if (*a6 != a6[1])
        {
          uint64_t v30 = v28;
          uint64_t v31 = a2 + 1;
          do
          {
            if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v29 + 8))) {
              objc_msgSend(*(id *)(a1 + 40), "setParagraphWritingDirection:forCharRange:undoTransaction:", v30, v31 + *(void *)v29, 1, a7);
            }
            v29 += 16;
          }
          while (v29 != a6[1]);
        }
      }
      break;
  }
LABEL_76:
  *(unsigned char *)(a1 + 56) = 0;
  int64x2_t result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

uint64_t TSWPParagraphAttributeArray::shouldInsertAttributesForMarkers(TSWPParagraphAttributeArray *this)
{
  return (this->var1 < 0x13) & (0x40907u >> this->var1);
}

void sub_2234CD9A0(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F10](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

double TSWPAttributeArray::TSWPAttributeArray(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26D687880;
  *(_DWORD *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  return result;
}

void TSWPStyleAttributeArray::applyObjectToCharRange(TSWPAttributeArray *this, objc_object *a2, _NSRange a3, TSKAddedToDocumentContext *a4, TSWPStorageTransaction *a5)
{
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  if (a3.location > TSWPAttributeArray::characterCount(this)
    || length > TSWPAttributeArray::characterCount(this) - location)
  {
    unint64_t v11 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "virtual void TSWPStyleAttributeArray::applyObjectToCharRange(id, NSRange, TSKAddedToDocumentContext *, TSWPStorageTransaction *)");
    uint64_t v13 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPStyleAttributeArray.mm"];
    v28.NSUInteger location = location;
    v28.NSUInteger length = length;
    [v11 handleFailureInFunction:v12, v13, 80, @"Bad input char range %@.", NSStringFromRange(v28) file lineNumber description];
  }
  v29.NSUInteger location = location;
  v29.NSUInteger length = length;
  unint64_t v14 = TSWPAttributeArray::calculateAttributeRangeForCharacterRange(this, v29);
  unint64_t v16 = v15;
  unint64_t v17 = location + length;
  unint64_t v18 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, v17);
  if (v18 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = (objc_object *)*((void *)this->var4 + 2 * v18 + 1);
    unint64_t v20 = v19;
  }
  v25 = a4;
  if (v14)
  {
    if (*((objc_object **)this->var4 + 2 * v14 - 1) == a2)
    {
      int v21 = 0;
      ++v16;
      --v14;
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  if (this->var2 && TSWPAttributeArray::charIndexForAttributeIndex(this, 0) == location)
  {
    if (!a2 && *((void *)this->var4 + 1)) {
      goto LABEL_14;
    }
  }
  else if (!a2)
  {
LABEL_14:
    unint64_t v14 = 0;
    int v21 = 1;
    goto LABEL_22;
  }
LABEL_16:
  if (v14 < this->var2 && TSWPAttributeArray::charIndexForAttributeIndex(this, v14) == location)
  {
    if (*((objc_object **)this->var4 + 2 * v14 + 1) != a2) {
      TSWPAttributeArray::replaceObjectForAttributeIndex(this, a2, v14, a4, a5);
    }
    int v21 = 0;
  }
  else
  {
    NSUInteger v26 = location;
    uint64_t v27 = a2;
    TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v26, v14, a4, a5);
    int v21 = 0;
    ++v16;
  }
LABEL_22:
  if (!v16)
  {
    uint64_t v22 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v23 = objc_msgSend(NSString, "stringWithUTF8String:", "virtual void TSWPStyleAttributeArray::applyObjectToCharRange(id, NSRange, TSKAddedToDocumentContext *, TSWPStorageTransaction *)");
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPStyleAttributeArray.mm"), 147, @"applyObjectToCharRange:: length should be greater than zero.");
  }
  if ((v16 + v14 >= this->var2 || TSWPAttributeArray::charIndexForAttributeIndex(this, v16 + v14) != v17)
    && v17 != TSWPAttributeArray::characterCount(this))
  {
    if (v16 < 2)
    {
      NSUInteger v26 = v17;
      uint64_t v27 = v19;
      TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v26, v16 + v14, v25, a5);
      if (!v21) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    TSWPAttributeArray::replaceCharIndexForAttributeIndex(this, v17, v16 + v14 - 1, a5);
    --v16;
  }
  if (!v21) {
    goto LABEL_33;
  }
LABEL_30:
  if (this->var2) {
    TSWPAttributeArray::replaceObjectForAttributeIndex(this, 0, 0, 0, a5);
  }
LABEL_33:
  if (v16 != 1 && v16 + v14 >= v14 + 1) {
    (*((void (**)(TSWPAttributeArray *, unint64_t, unint64_t, TSWPStorageTransaction *))this->var0
  }
     + 7))(this, v14 + 1, v16 - 1, a5);
  unint64_t v24 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, v17);
  (*((void (**)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))this->var0 + 29))(this, v24, a5);
}

uint64_t TSWPAttributeArray::rangeForAttributeIndex(TSWPAttributeArray *this, unint64_t a2)
{
  uint64_t v4 = TSWPAttributeArray::charIndexForAttributeIndex(this, a2);
  if (a2 + 1 >= this->var2)
  {
    id var5 = this->var5;
    if (var5) {
      [var5 characterCount];
    }
  }
  else
  {
    TSWPAttributeArray::charIndexForAttributeIndex(this, a2 + 1);
  }
  return v4;
}

void TSWPParagraphAttributeArray::willReplaceCharactersInRangeWithString(TSWPParagraphAttributeArray *a1, _NSRange a2, uint64_t a3, uint64_t a4, uint64_t a5, TSWPStorageTransaction *a6)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  unint64_t v10 = a1;
  a1->var7 = 0;
  a1->var9 = 0x7FFFFFFFFFFFFFFFLL;
  if (a4 && a1->var1 != 8)
  {
    unint64_t v11 = (TSWPParagraphAttributeArray *)(a2.location + a2.length);
    uint64_t v12 = [a1->var5 paragraphIndexAtCharIndex:a2.location + a2.length];
    a1 = (TSWPParagraphAttributeArray *)(v12 + 1 >= v10->var2
                                       ? TSWPAttributeArray::characterCount((TSWPAttributeArray *)v10)
                                       : objc_msgSend(v10->var5, "textRangeForParagraphAtIndex:") - 1);
    v10->var7 = a1 == v11;
    if (a1 == v11)
    {
      id var5 = v10->var5;
      if (var5) {
        [var5 paragraphEnumeratorAtCharIndex:location + length styleProvider:0];
      }
      else {
        memset(&v30, 0, sizeof(v30));
      }
      unint64_t v14 = TSWPParagraphEnumerator::relevantParagraphIndex(&v30);
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 != v12) {
        uint64_t v15 = v14;
      }
      v10->var9 = v15;
      TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v30);
    }
  }
  if (length)
  {
    unint64_t v16 = v10;
    if (v10->var1)
    {
      a1 = (TSWPParagraphAttributeArray *)[v10->var5 attributeArrayForKind:0];
      unint64_t v16 = a1;
    }
    if (!a4)
    {
      if (v16)
      {
        v31.NSUInteger location = location;
        v31.NSUInteger length = length;
        if (TSWPParagraphAttributeArray::deletingWholeParagraphs(a1, v31, (TSWPAttributeArray *)v16))
        {
          if (v10->var1 != 8)
          {
            v32.NSUInteger location = location;
            v32.NSUInteger length = length;
            TSWPParagraphAttributeArray::assignAttributesAtFrontOfRange(v10, v32, v16, a6);
          }
        }
      }
    }
    unint64_t v17 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, location);
    unint64_t v18 = location + length;
    unint64_t v19 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, location + length);
    unint64_t var2 = v10->var2;
    if (v17 >= var2)
    {
      BOOL v21 = 0;
    }
    else
    {
      BOOL v21 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, v17) == location;
      unint64_t var2 = v10->var2;
    }
    if (v19 >= var2)
    {
      BOOL v22 = 0;
    }
    else
    {
      BOOL v22 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, v19) == v18;
      unint64_t var2 = v10->var2;
    }
    if (v17 + 1 < var2 && v18 >= TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, v17 + 1))
    {
      v23.NSUInteger length = length - v21 + v22;
      if (v23.length)
      {
        v23.NSUInteger location = location + v21;
        unint64_t v24 = TSWPAttributeArray::calculateAttributeRangeForCharacterRange((TSWPAttributeArray *)v10, v23);
        if (v25)
        {
          unint64_t v26 = v24;
          uint64_t v27 = v25;
          if (!v16
            || (v10->var1 | 8) == 8
            || (unint64_t v28 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v16, v18) + 1,
                v28 >= v16->var2)
            || !TSWPParagraphAttributeArray::isParagraphBreakSparse(v10, v28, (TSWPAttributeArray *)v16)
            || (uint64_t v29 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v16, v28),
                --v27,
                TSWPAttributeArray::replaceCharIndexForAttributeIndex((TSWPAttributeArray *)v10, v29, v27 + v26, a6),
                v27))
          {
            (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))v10->var0
             + 7))(v10, v26, v27, a6);
            (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, TSWPStorageTransaction *))v10->var0
             + 29))(v10, v26, a6);
          }
        }
      }
    }
  }
}

void sub_2234CE108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void TSWPLayoutState::~TSWPLayoutState(TSWPLayoutState *this)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24));
}

unint64_t TSWPAttributeArray::characterCount(TSWPAttributeArray *this)
{
  id var5 = this->var5;
  if (var5) {
    return [var5 characterCount];
  }
  else {
    return this->var6;
  }
}

uint64_t TSWPParagraphEnumerator::TSWPParagraphEnumerator(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)double result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 24) = a5;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a4;
  *(unsigned char *)(result + 48) = a6;
  if (a3 == a2) {
    *(void *)(result + 8) = 0;
  }
  *(void *)(result + 16) = a4;
  return result;
}

{
  *(void *)double result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 24) = a5;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a4;
  *(unsigned char *)(result + 48) = a6;
  if (a3 == a2) {
    *(void *)(result + 8) = 0;
  }
  *(void *)(result + 16) = a4;
  return result;
}

unint64_t TSWPParagraphEnumerator::relevantParagraphIndex(TSWPParagraphEnumerator *this)
{
  return this->var2;
}

uint64_t TSWPAttributeArray::rangeForCharIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t v3 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, a2);
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v6 = v3;
    uint64_t v4 = TSWPAttributeArray::charIndexForAttributeIndex(this, v3);
    unint64_t v5 = v6 + 1;
  }
  if (v5 >= this->var2)
  {
    id var5 = this->var5;
    if (var5) {
      [var5 characterCount];
    }
  }
  else
  {
    TSWPAttributeArray::charIndexForAttributeIndex(this, v5);
  }
  return v4;
}

unint64_t TSWPAttributeArray::effectiveAttributeIndexForCharIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t var2 = this->var2;
  if (!var2) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  var4 = this->var4;
  uint64_t v4 = var4;
  unint64_t v5 = this->var2;
  do
  {
    unint64_t v6 = v5 >> 1;
    v7 = (void *)((char *)v4 + 16 * (v5 >> 1));
    unint64_t v9 = *v7;
    v8 = (TSWPAttributeRecord *)(v7 + 2);
    v5 += ~(v5 >> 1);
    if (v9 < a2) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v5 = v6;
    }
  }
  while (v5);
  unint64_t v10 = (v4 - var4) >> 4;
  if (v10 >= var2) {
    return var2 - 1;
  }
  if (TSWPAttributeArray::charIndexForAttributeIndex(this, (v4 - var4) >> 4) != a2)
  {
    if (v4 == var4) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      --v10;
    }
  }
  return v10;
}

uint64_t TSWPAttributeArray::charIndexForAttributeIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t var2 = this->var2;
  if (var2 <= a2)
  {
    unint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"TSWPCharIndex TSWPAttributeArray::charIndexForAttributeIndex(TSWPAttributeIndex) const"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPAttributeArray.mm"), 67, @"TSWPAttributeArray: charIndexForAttributeIndex: bad index.");
    unint64_t var2 = this->var2;
  }
  if (var2 <= a2) {
    return 0;
  }
  else {
    return *((void *)this->var4 + 2 * a2);
  }
}

uint64_t TSWPAttributeArray::collapseAttributesAroundAttributeIndex(TSWPAttributeArray *this, unint64_t a2, TSWPStorageTransaction *a3)
{
  uint64_t result = (*((uint64_t (**)(TSWPAttributeArray *))this->var0 + 25))(this);
  if (result)
  {
    unint64_t var2 = this->var2;
    if (a2 + 1 < var2)
    {
      uint64_t result = (*((uint64_t (**)(TSWPAttributeArray *))this->var0 + 28))(this);
      unint64_t var2 = this->var2;
    }
    if (var2 > a2)
    {
      v8 = (uint64_t (*)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))*((void *)this->var0 + 28);
      return v8(this, a2, a3);
    }
  }
  return result;
}

uint64_t TSWPStyleAttributeArray::supportsAttributeCollapsing(TSWPStyleAttributeArray *this)
{
  return 1;
}

unint64_t TSWPAttributeArray::calculateAttributeRangeForCharacterRange(TSWPAttributeArray *this, _NSRange a2)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  unint64_t v5 = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(this, a2.location);
  TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(this, location + length);
  return v5;
}

unint64_t TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t v4 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, a2);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  unint64_t v6 = v4;
  unint64_t result = this->var2;
  if (v6 < result)
  {
    if (TSWPAttributeArray::charIndexForAttributeIndex(this, v6) >= a2) {
      return v6;
    }
    else {
      return v6 + 1;
    }
  }
  return result;
}

TSWPAttributeArray *TSWPStyleAttributeArray::collapseAttributesAtAttributeIndex(TSWPAttributeArray *this, unint64_t a2, TSWPStorageTransaction *a3)
{
  unint64_t v5 = this;
  if (!a2
    || this->var2 <= a2
    || (this = (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, char *, char *))this->var0 + 26))(this, (char *)this->var4 + 16 * a2, (char *)this->var4 + 16 * a2 - 16), (this & 1) == 0))
  {
    unint64_t var2 = v5->var2;
    if (var2 - 1 != a2)
    {
LABEL_7:
      if (var2 <= a2) {
        return this;
      }
      this = (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, unint64_t))v5->var0
                                    + 27))(v5, (unint64_t)v5->var4 + 16 * a2, a2);
      if (!this) {
        return this;
      }
      goto LABEL_9;
    }
    v7 = (TSWPAttributeArray *)TSWPAttributeArray::charIndexForAttributeIndex(v5, a2);
    this = (TSWPAttributeArray *)TSWPAttributeArray::characterCount(v5);
    if (v7 != this)
    {
      unint64_t var2 = v5->var2;
      goto LABEL_7;
    }
  }
LABEL_9:
  v8 = (uint64_t (*)(TSWPAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))*((void *)v5->var0 + 7);

  return (TSWPAttributeArray *)v8(v5, a2, 1, a3);
}

uint64_t TSWPStyleAttributeArray::canCollapseEmptyAttribute(TSWPStyleAttributeArray *this, const TSWPAttributeRecord *a2)
{
  return 0;
}

uint64_t IsParagraphBreakingCharacter(uint64_t a1)
{
  if (TSWPParagraphBreakingCharacterSet::sTSWPParagraphBreakingCharacterSetOnceToken != -1) {
    dispatch_once(&TSWPParagraphBreakingCharacterSet::sTSWPParagraphBreakingCharacterSetOnceToken, &__block_literal_global_26);
  }
  v2 = (void *)TSWPParagraphBreakingCharacterSet::sParagraphBreakingCharacterSet;

  return [v2 longCharacterIsMember:a1];
}

void sub_2234CF46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t TSWPStyleAttributeArray::willReplaceCharactersInRangeWithString(TSWPAttributeArray *this, _NSRange a2, uint64_t a3, uint64_t a4, uint64_t a5, TSWPStorageTransaction *a6)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  unint64_t result = 1;
  LOBYTE(this[1].var0) = 1;
  if (this->var1 == 14) {
    unint64_t result = TSWPStyleAttributeArray::deleteAttributesInRangeWithString((uint64_t)this, a2, a3, a4, a5, a6);
  }
  if (result)
  {
    if (length)
    {
      v21.NSUInteger location = location;
      v21.NSUInteger length = length;
      unint64_t result = TSWPAttributeArray::calculateAttributeRangeForCharacterRange(this, v21);
      if (v12)
      {
        unint64_t v13 = result;
        uint64_t v14 = v12;
        unint64_t result = TSWPAttributeArray::charIndexForAttributeIndex(this, result);
        if (a4 && result == location)
        {
          if (v13)
          {
            uint64_t v15 = (void *)*((void *)this->var4 + 2 * v13 + 1);
            *(void *)&this[1].var1 = v15;
            if (!v15)
            {
              uint64_t v15 = (void *)[MEMORY[0x263EFF9D0] null];
              *(void *)&this[1].var1 = v15;
            }
            id v16 = v15;
          }
          else
          {
            if (!--v14) {
              return result;
            }
            unint64_t v13 = 1;
          }
        }
        unint64_t v17 = v13 + 1;
        if (v13 + 1 >= this->var2
          || (unint64_t result = TSWPAttributeArray::charIndexForAttributeIndex(this, v13 + 1), result <= location + length))
        {
          unint64_t v17 = v13;
        }
        else if (!--v14)
        {
          return result;
        }
        uint64_t v18 = v14 + v17;
        if (v14 + v17 < this->var2)
        {
          unint64_t result = TSWPAttributeArray::charIndexForAttributeIndex(this, v14 + v17);
          if (result > location + length)
          {
            if (!--v14) {
              return result;
            }
            uint64_t v18 = v14 + v17;
          }
        }
        if (v18 != this->var2
          || (unint64_t result = TSWPAttributeArray::characterCount(this), location + length >= result)
          || (--v14, v14))
        {
          LOBYTE(this[1].var0) = 0;
          (*((void (**)(TSWPAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))this->var0
           + 7))(this, v17, v14, a6);
          unint64_t v19 = (uint64_t (*)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))*((void *)this->var0 + 29);
          return v19(this, v17, a6);
        }
      }
    }
  }
  return result;
}

void TSWPStyleAttributeArray::didReplaceCharactersInRangeWithString(TSWPAttributeArray *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, TSWPStorageTransaction *a7)
{
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v12 = a5 - a3;
    if (a5 != a3)
    {
      if (this->var2)
      {
        if (LOBYTE(this[1].var0)) {
          uint64_t v13 = 5;
        }
        else {
          uint64_t v13 = 4;
        }
        unint64_t v14 = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(this, a2);
        if (v14)
        {
          unint64_t var2 = this->var2;
        }
        else
        {
          uint64_t v16 = TSWPAttributeArray::charIndexForAttributeIndex(this, 0);
          unint64_t var2 = this->var2;
          if (!v16)
          {
            if (!var2)
            {
              BOOL v17 = a3 != 0;
              BOOL v18 = a5 != 0;
              uint64_t v13 = 4;
              unint64_t v14 = 1;
LABEL_15:
              unint64_t v19 = this->var2;
              if (!v18 || !v17 || v14 >= v19)
              {
LABEL_20:
                if (v14 < v19 && v12 + (int)TSWPAttributeArray::charIndexForAttributeIndex(this, v14) < (int)a2) {
                  goto LABEL_22;
                }
                if (v14) {
                  BOOL v20 = this->var1 == 17;
                }
                else {
                  BOOL v20 = 0;
                }
                if (!v20 || !v18) {
                  goto LABEL_44;
                }
                unint64_t v22 = this->var2;
                if (v14 < v22)
                {
                  if (a2 == TSWPAttributeArray::charIndexForAttributeIndex(this, v14))
                  {
                    unint64_t v23 = v14 - 1;
LABEL_41:
                    if (!*((void *)this->var4 + 2 * v23 + 1)) {
                      goto LABEL_44;
                    }
                    if (v14 == this->var2)
                    {
                      unint64_t v33 = a2;
                      uint64_t v34 = 0;
                      TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v33, v14, 0, a7);
                    }
LABEL_23:
                    ++v14;
                    uint64_t v13 = 4;
LABEL_44:
                    TSWPAttributeArray::adjustCharIndexStartingAtAttributeIndex((uint64_t)this, v13, v14, a5 - a3);
                    goto LABEL_45;
                  }
                  unint64_t v22 = this->var2;
                }
                if (v14 != v22) {
                  goto LABEL_44;
                }
                unint64_t v23 = v14 - 1;
                uint64_t v24 = TSWPAttributeArray::rangeForAttributeIndex(this, v14 - 1);
                if (a2 + a5 + a3 != v24 + v25) {
                  goto LABEL_44;
                }
                goto LABEL_41;
              }
              if (TSWPAttributeArray::charIndexForAttributeIndex(this, v14) < a2 + a3)
              {
LABEL_22:
                TSWPAttributeArray::replaceCharIndexForAttributeIndex(this, a2 + a5, v14, a7);
                goto LABEL_23;
              }
LABEL_19:
              unint64_t v19 = this->var2;
              goto LABEL_20;
            }
            uint64_t v13 = 4;
            unint64_t v14 = 1;
            if (*((void *)this->var4 + 1) && !a3)
            {
              unint64_t v33 = 0;
              uint64_t v34 = 0;
              TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v33, 0, 0, a7);
              BOOL v18 = a5 != 0;
              unint64_t v14 = 1;
              goto LABEL_19;
            }
          }
        }
        BOOL v17 = a3 != 0;
        BOOL v18 = a5 != 0;
        if (a5 && v14 < var2 && a3)
        {
          if (TSWPAttributeArray::charIndexForAttributeIndex(this, v14) == a2) {
            goto LABEL_23;
          }
          BOOL v18 = 1;
          BOOL v17 = 1;
        }
        goto LABEL_15;
      }
    }
  }
LABEL_45:
  uint64_t v26 = *(void *)&this[1].var1;
  if (v26)
  {
    if (a3)
    {
      if (v26 == [MEMORY[0x263EFF9D0] null]) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      unint64_t v28 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, a2);
      if (v28 == 0x7FFFFFFFFFFFFFFFLL
        || *((void *)this->var4 + 2 * v28 + 1) != v27
        || (unint64_t v29 = TSWPAttributeArray::rangeForAttributeIndex(this, v28), v29 > a2)
        || v29 + v30 < a2 + a5)
      {
        (*((void (**)(TSWPAttributeArray *, uint64_t, unint64_t, uint64_t, void, TSWPStorageTransaction *))this->var0
         + 8))(this, v27, a2, a5, 0, a7);
      }
    }
    else
    {
      _NSRange v31 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v32 = objc_msgSend(NSString, "stringWithUTF8String:", "virtual void TSWPStyleAttributeArray::didReplaceCharactersInRangeWithString(NSRange, NSString *, NSUInteger, markerArray &, TSWPStorageTransaction *, TSWPStyleInsertionBehavior)");
      objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPStyleAttributeArray.mm"), 406, @"TSWPStyleAttributeArray::didReplaceCharactersInRangeWithString: we should have a range selection.");
    }

    *(void *)&this[1].var1 = 0;
  }
}

TSWPAttributeArray *TSWPAttachmentAttributeArray::insertAttributesForMarkers(TSWPAttributeArray *this, uint64_t a2, int a3, int a4, unint64_t a5, uint64_t *a6, TSWPStorageTransaction *a7)
{
  uint64_t v8 = *a6;
  uint64_t v7 = a6[1];
  if (*a6 != v7)
  {
    uint64_t v13 = this;
    while (1)
    {
      int v14 = *(unsigned __int16 *)(v8 + 8);
      if (v14 != 14) {
        break;
      }
      if (v13->var1 == 5) {
        goto LABEL_8;
      }
LABEL_9:
      v8 += 16;
      if (v8 == v7) {
        return this;
      }
    }
    if (v14 != 65532 || v13->var1 != 4) {
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v15 = a5 + 1;
    v16[0] = *(void *)v8 + a2;
    v16[1] = 0;
    this = (TSWPAttributeArray *)TSWPAttributeArray::insertAttribute(v13, (const TSWPAttributeRecord *)v16, a5, 0, a7);
    uint64_t v7 = a6[1];
    a5 = v15;
    goto LABEL_9;
  }
  return this;
}

TSWPAttributeArray *TSWPAttributeArray::willReplaceCharactersInRangeWithString(TSWPAttributeArray *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    unint64_t v10 = result;
    unint64_t v11 = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(result, a2);
    unint64_t result = (TSWPAttributeArray *)TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(v10, a2 + a3);
    if (result != (TSWPAttributeArray *)v11)
    {
      uint64_t v12 = (uint64_t (*)(TSWPAttributeArray *, unint64_t, char *, uint64_t))*((void *)v10->var0 + 7);
      return (TSWPAttributeArray *)v12(v10, v11, (char *)result - v11, a7);
    }
  }
  return result;
}

BOOL TSWPParagraphAttributeArray::supportsAttributeCollapsing(TSWPParagraphAttributeArray *this)
{
  return (this->var1 & 0xFFFFFFF7) != 0;
}

uint64_t TSWPLineFragmentArray::logicalLineCount(TSWPLineFragmentArray *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 == *(void *)this) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(*(void *)(v1 - 16) + 552) + 1;
  }
}

uint64_t TSWPResolveIntPropertyForStyles(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      unint64_t v10 = *(void **)(a1 + 8 * v8);
      if (v10) {
        unsigned int v11 = [v10 intValueForProperty:a3];
      }
      else {
        unsigned int v11 = 0x80000000;
      }
      uint64_t v8 = v9;
      if (v9 >= a2) {
        break;
      }
      ++v9;
    }
    while (v11 == 0x80000000);
    if (v11 == 0x80000000) {
      return a4;
    }
    else {
      return v11;
    }
  }
  return a4;
}

void *TSWPResolveFloatPropertyForStyles(void *result, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v5 = result;
    uint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      unint64_t result = (void *)v5[v6];
      if (result)
      {
        unint64_t result = (void *)[result floatValueForProperty:a3];
        double v9 = v8;
      }
      else
      {
        double v9 = INFINITY;
      }
      uint64_t v6 = v7;
      if (v7 >= a2) {
        break;
      }
      ++v7;
    }
    while (v9 == INFINITY);
  }
  return result;
}

void TSWPLayoutChore::protectedSetupLayoutState(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  float v8 = a2;
  *(void *)(a1 + 2056) = a2;
  id v10 = a5;
  TSWPParagraphEnumerator::TSWPParagraphEnumerator(v41);
  bzero(v40, 0x2B0uLL);
  TSWPLayoutState::operator=((id *)(a1 + 80), v40);
  TSWPLayoutState::setPreviousPartHint((void *)(a1 + 80), a5);

  *(void *)(a1 + 80) = a4;
  unsigned int v11 = (void *)[v8 columns];
  if ([v11 count])
  {
    *(void *)(a1 + 184) = [v11 objectAtIndexedSubscript:a3];
    uint64_t v12 = *(void **)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = [*(id *)(a1 + 24) styleProvider];
    if (v12) {
      [v12 paragraphEnumeratorAtCharIndex:v13 styleProvider:v14];
    }
    else {
      memset(&v39, 0, sizeof(v39));
    }
    long long v15 = *(_OWORD *)&v39.var2;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v39.var0;
    *(_OWORD *)(a1 + 120) = v15;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)&v39.var4;
    *(unsigned char *)(a1 + 152) = v39.var6;
    TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v39);
  }
  *(void *)(a1 + 88) = a4;
  if (a3)
  {
    if ([v11 count])
    {
      uint64_t v16 = objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", a3 - 1), "anchoredRange");
LABEL_11:
      *(void *)(a1 + 88) = v16 + v17;
    }
  }
  else
  {
    BOOL v18 = (void *)[v8 previousTargetLastColumn];
    if (v18)
    {
      uint64_t v16 = [v18 anchoredRange];
      goto LABEL_11;
    }
  }
  *(void *)(a1 + 96) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 680) = [v8 footnoteHeightMeasurer];
  *(void *)(a1 + 688) = [v8 footnoteMarkProvider];
  TSWPLayoutChore::pSetupStateForParagraphIndex((TSWPLayoutChore *)a1, 0);
  TSWPLayoutChore::pSetupStateForColumnMetrics((id *)a1);
  unint64_t v19 = *(void **)(a1 + 184);
  if (v19)
  {
    uint64_t v20 = [v19 columnIndex];
    *(void *)(a1 + 240) = v20;
    if (v20 != a3)
    {
      _NSRange v21 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPLayoutChore::protectedSetupLayoutState(TSDLayout<TSWPLayoutTarget> *, NSUInteger, TSWPCharIndex, id<TSDHint>, uint)");
      objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 706, @"Column index mismatch");
    }
  }
  *(void *)(a1 + 712) = [*(id *)(a1 + 16) textWrapper];
  unint64_t v23 = (void *)[*(id *)(a1 + 16) lineHintsForTarget:v8];
  *(void *)(a1 + 720) = v23;
  if (v23)
  {
    if (([v23 valid] & 1) == 0)
    {
      uint64_t v24 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v25 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPLayoutChore::protectedSetupLayoutState(TSDLayout<TSWPLayoutTarget> *, NSUInteger, TSWPCharIndex, id<TSDHint>, uint)");
      [v24 handleFailureInFunction:v25, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 714, @"lintHints %p invalid:\n%@", *(void *)(a1 + 720), objc_msgSend(*(id *)(a1 + 720), "descriptionWithStorage:", *(void *)(a1 + 8)) file lineNumber description];
    }
    if (([*(id *)(a1 + 720) valid] & 1) == 0) {
      *(void *)(a1 + 720) = 0;
    }
  }
  objc_opt_class();
  uint64_t v26 = TSUDynamicCast();
  if (v26)
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v26 = [*(id *)(a1 + 16) textColorOverride];
    }
    else {
      uint64_t v26 = 0;
    }
  }
  *(void *)(a1 + 728) = v26;
  [v8 position];
  double v28 = v27;
  double v30 = v29;
  uint64_t v31 = [v8 maxSize];
  *(double *)(a1 + 648) = TSDRectWithOriginAndSize(v31, v28, v30, v32, v33);
  *(void *)(a1 + 656) = v34;
  *(void *)(a1 + 664) = v35;
  *(void *)(a1 + 672) = v36;
  *(unsigned char *)(a1 + 414) = (*(unsigned char *)(a1 + 32) & 0x20) != 0;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    float v8 = (void *)[*(id *)(a1 + 8) documentRoot];
  }
  *(unsigned char *)(a1 + 425) = [v8 shouldHyphenate];
  if (*(_DWORD *)(a1 + 56) >= 3u)
  {
    uint64_t v38 = *(void **)(a1 + 184);
    if (v38) {
      [v38 frameBounds];
    }
    else {
      unint64_t v37 = 0;
    }
  }
  else
  {
    unint64_t v37 = 0xFFF0000000000000;
  }
  *(void *)(a1 + 400) = v37;
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v40);
}

void sub_2234D088C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)va);
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::pSetupStateForColumnMetrics(id *this)
{
  uint64_t result = [this[257] columnMetricsForCharIndex:this[10] outRange:this + 25];
  if (result)
  {
    if ((id)result != this[24])
    {
      this[24] = (id)result;
      this[32] = 0;
      [(id)result adjustedInsets];
      this[27] = v3;
      this[29] = (id)[this[24] columnCount];
      *((unsigned char *)this + 248) = [this[24] shrinkTextToFit];
      uint64_t result = objc_opt_respondsToSelector();
      if (result)
      {
        uint64_t result = [this[24] textScaleFactor];
        this[32] = v4;
      }
    }
  }
  else
  {
    unint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"void TSWPLayoutChore::pSetupStateForColumnMetrics()"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 5814, @"invalid nil value for '%s'", "newColumnMetrics");
    this[24] = 0;
    this[32] = 0;
    this[27] = 0;
    uint64_t result = [this[1] characterCount];
    this[25] = 0;
    this[26] = (id)result;
    this[29] = (id)1;
    *((unsigned char *)this + 248) = 0;
  }
  this[30] = 0;
  return result;
}

id TSWPLayoutChore::pSetupStateForParagraphIndex(TSWPLayoutChore *this, TSWPLayoutState *a2)
{
  if (a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = (TSWPLayoutChore *)((char *)this + 80);
  }
  if (!TSWPParagraphEnumerator::paragraphStyle((TSWPParagraphEnumerator *)((char *)v3 + 24), 0))
  {
    unint64_t v4 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"void TSWPLayoutChore::pSetupStateForParagraphIndex(TSWPLayoutState *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 5845, @"Bad paragraphEnumerator");
  }
  *((void *)v3 + 62) = 0;
  *((void *)v3 + 63) = 0;
  *((void *)v3 + 59) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (void *)TSWPParagraphEnumerator::paragraphStyle((TSWPParagraphEnumerator *)((char *)v3 + 24), (_NSRange *)v3 + 5);
  uint64_t v7 = *((void *)v3 + 10);
  unint64_t v8 = *((void *)this + 8);
  if (*((void *)v3 + 11) + v7 > v8) {
    *((void *)v3 + 11) = v8 - v7;
  }
  *((void *)v3 + 24) = TSWPParagraphEnumerator::paragraphLevel((TSWPParagraphEnumerator *)((char *)v3 + 24));
  *((unsigned char *)v3 + 512) = *(void *)v3 == *((void *)v3 + 10);
  unint64_t v9 = [*((id *)this + 23) scaleTextPercent];
  if (v6 != *((void **)v3 + 12))
  {
    *((void *)v3 + 12) = v6;
    [v6 floatValueForProperty:87];
    *((double *)v3 + 35) = v10;
    [v6 floatValueForProperty:88];
    *((double *)v3 + 36) = v11;
    uint64_t v12 = (void *)[v6 valueForProperty:85];
    uint64_t v13 = v12;
    if (v12) {
      [v12 amount];
    }
    else {
      double v14 = 1.0;
    }
    *((double *)v3 + 34) = v14;
    *((_DWORD *)v3 + 64) = [v13 mode];
    [v13 baselineRule];
    *((void *)v3 + 33) = v15;
    [v6 floatValueForProperty:81];
    *((double *)v3 + 26) = v16;
    [v6 floatValueForProperty:82];
    *((double *)v3 + 27) = v17;
    [v6 floatValueForProperty:80];
    *((double *)v3 + 28) = v18;
    *((unsigned char *)v3 + 384) = [v6 intValueForProperty:91] != 0;
    *((unsigned char *)v3 + 328) = [v6 intValueForProperty:92] != 0;
    *((unsigned char *)v3 + 329) = [v6 intValueForProperty:89] != 0;
    *((unsigned char *)v3 + 330) = [v6 intValueForProperty:90] != 0;
    uint64_t v19 = [v6 valueForProperty:98];
    if (v19) {
      BOOL v20 = v19 != [MEMORY[0x263EFF9D0] null];
    }
    else {
      BOOL v20 = 0;
    }
    *((unsigned char *)v3 + 368) = v20;
    *((_DWORD *)v3 + 87) = [v6 intValueForProperty:102];
    uint64_t v21 = [v6 valueForProperty:103];
    if (v21)
    {
      uint64_t v22 = v21;
      if (v21 == [MEMORY[0x263EFF9D0] null]) {
        unint64_t v23 = 0;
      }
      else {
        unint64_t v23 = (void *)v22;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    if (*((_DWORD *)v3 + 87)) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    *((void *)v3 + 44) = v24;
    if (v24)
    {
      [v24 width];
      uint64_t v25 = *((void *)v3 + 44);
      *((void *)v3 + 47) = v26;
      if (v25)
      {
        objc_msgSend((id)objc_msgSend(v6, "valueForProperty:", 105), "sizeValue");
        goto LABEL_28;
      }
    }
    else
    {
      *((void *)v3 + 47) = 0;
    }
    uint64_t v27 = 0;
LABEL_28:
    *((void *)v3 + 45) = v27;
    *((unsigned char *)v3 + 346) = [v6 intValueForProperty:93] != 0;
    int v28 = [v6 intValueForProperty:94];
    if (v28 == 0x80000000) {
      int v29 = 2;
    }
    else {
      int v29 = v28;
    }
    *((void *)v3 + 54) = v29;
    int v30 = [v6 intValueForProperty:95];
    if (v30 == 0x80000000) {
      int v31 = 3;
    }
    else {
      int v31 = v30;
    }
    *((void *)v3 + 55) = v31;
    int v32 = [v6 intValueForProperty:96];
    if (v32 == 0x80000000) {
      int v33 = 3;
    }
    else {
      int v33 = v32;
    }
    *((void *)v3 + 56) = v33;
    [v6 floatValueForProperty:97];
    if (v34 == INFINITY) {
      float v34 = 18.0;
    }
    *((double *)v3 + 52) = v34;
    *((void *)v3 + 49) = [v6 valueForProperty:84];
    [v6 floatValueForProperty:83];
    double v36 = v35;
    BOOL v37 = v35 == 0.0;
    double v38 = 36.0;
    if (!v37) {
      double v38 = v36;
    }
    *((double *)v3 + 50) = v38;
    uint64_t v39 = [*((id *)v3 + 49) count];
    if (v39)
    {
      unint64_t v40 = v39;
      uint64_t v41 = 0;
      unsigned int v42 = 1;
      while (objc_msgSend((id)objc_msgSend(*((id *)v3 + 49), "tabAtIndex:", v41), "alignment") != 3)
      {
        uint64_t v41 = v42;
        if (v40 <= v42++) {
          goto LABEL_47;
        }
      }
      *((void *)v3 + 51) = [v6 valueForProperty:101];
    }
LABEL_47:
    uint64_t v44 = (const void *)*((void *)this + 258);
    if (v44)
    {
      CFRelease(v44);
      *((void *)this + 258) = 0;
    }
    if (*((unsigned char *)v3 + 346))
    {
      uint64_t v45 = (__CFString *)[v6 valueForProperty:39];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        || [(__CFString *)v45 isEqualToString:@"__multilingual"])
      {
        CFLocaleRef System = (CFLocaleRef)objc_msgSend((id)objc_msgSend(*((id *)this + 1), "documentRoot"), "hyphenationLocale");
        *((void *)this + 258) = System;
        if (!System)
        {
          CFLocaleRef System = CFLocaleGetSystem();
          *((void *)this + 258) = System;
        }
        CFRetain(System);
      }
      else if (v45 && ([(__CFString *)v45 isEqualToString:@"__none"] & 1) == 0)
      {
        CFLocaleRef v47 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v45);
        *((void *)this + 258) = v47;
        if (v47) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
    CFLocaleRef v47 = (CFLocaleRef)*((void *)this + 258);
    if (v47)
    {
LABEL_57:
      *((void *)v3 + 53) = v47;
      goto LABEL_58;
    }
LABEL_56:
    *((unsigned char *)v3 + 346) = 0;
    goto LABEL_57;
  }
LABEL_58:
  float v48 = (float)v9 / 100.0;
  double v49 = v48;
  *((float64x2_t *)this + 24) = vmulq_n_f64(*(float64x2_t *)((char *)this + 360), v48);
  if (!*((_DWORD *)this + 84)) {
    double v49 = 1.0;
  }
  *((double *)this + 47) = *((double *)this + 44) * v49;
  uint64_t v50 = (void *)TSWPParagraphEnumerator::paragraphListStyle((TSWPParagraphEnumerator *)((char *)v3 + 24));
  *((void *)v3 + 23) = v50;
  [v50 labelIndentForLevel:*((void *)v3 + 24)];
  *((void *)v3 + 30) = v51;
  uint64_t v52 = (void *)*((void *)v3 + 23);
  uint64_t v53 = *((void *)v3 + 24);
  [*((id *)v3 + 12) floatValueForProperty:17];
  [v52 textIndentForLevel:v53 fontSize:(float)(v48 * v54)];
  double v56 = v55 + *((double *)v3 + 30);
  *((double *)v3 + 29) = v56;
  *((double *)v3 + 31) = v56 + *((double *)v3 + 26);
  if (*((void *)v3 + 23)
    && (TSWPParagraphEnumerator::isFirstParagraph((TSWPParagraphEnumerator *)((char *)v3 + 24))
     || [*((id *)this + 1) characterAtIndex:*((void *)v3 + 10) - 1] != 11))
  {
    *((unsigned char *)v3 + 332) = [*((id *)v3 + 23) labelTypeForLevel:*((void *)v3 + 24)] != 0;
    *((unsigned char *)v3 + 344) = TSWPParagraphEnumerator::listRunsRightToLeft((TSWPParagraphEnumerator *)((char *)v3 + 24));
  }
  else
  {
    *((unsigned char *)v3 + 332) = 0;
    *((unsigned char *)v3 + 344) = 0;
  }
  *((unsigned char *)v3 + 333) = TSWPParagraphEnumerator::paragraphRunsRightToLeft((TSWPParagraphEnumerator *)((char *)v3 + 24));
  int v57 = [v6 intValueForProperty:86];
  if (*((void *)this + 257) && v57 == 4) {
    int v57 = [*((id *)this + 257) naturalAlignment];
  }
  *((_DWORD *)v3 + 97) = v57;
  if (v57 == 4) {
    *((_DWORD *)v3 + 97) = *((unsigned __int8 *)v3 + 333);
  }
  *((_WORD *)v3 + 244) = 0;
  uint64_t v59 = *((void *)v3 + 10);
  uint64_t v58 = *((void *)v3 + 11);
  if (v59 != TSWPCoreTextTypesetter::paragraphRange(*((TSWPCoreTextTypesetter **)this + 253)) || v58 != v60) {
    (*(void (**)(void))(**((void **)this + 253) + 24))(*((void *)this + 253));
  }
  if (TSWPCoreTextTypesetter::isParagraphSetUp(*((TSWPCoreTextTypesetter **)this + 253)))
  {
    unint64_t v61 = objc_msgSend(*((id *)this + 1), "attachmentIndexRangeForTextRange:", *((void *)v3 + 10), *((void *)v3 + 11));
    if (v61 < v61 + v62)
    {
      unint64_t v63 = v61;
      uint64_t v64 = v62;
      do
      {
        if (*((unsigned char *)v3 + 488)) {
          break;
        }
        uint64_t v72 = 0x7FFFFFFFFFFFFFFFLL;
        [*((id *)this + 1) attachmentAtAttachmentIndex:v63 outCharIndex:&v72];
        if (v72 != 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(*((id *)this + 1), "characterAtIndex:") == 65532) {
          *((unsigned char *)v3 + 488) = 1;
        }
        ++v63;
        --v64;
      }
      while (v64);
    }
    unint64_t v65 = objc_msgSend(*((id *)this + 1), "footnoteRangeForTextRange:", *((void *)v3 + 10), *((void *)v3 + 11));
    if (v65 < v65 + v66)
    {
      unint64_t v67 = v65;
      uint64_t v68 = v66;
      do
      {
        if (*((unsigned char *)v3 + 489)) {
          break;
        }
        uint64_t v72 = 0x7FFFFFFFFFFFFFFFLL;
        [*((id *)this + 1) footnoteAtFootnoteIndex:v67 outCharIndex:&v72];
        if (v72 != 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(*((id *)this + 1), "characterAtIndex:") == 14) {
          *((unsigned char *)v3 + 489) = 1;
        }
        ++v67;
        --v68;
      }
      while (v68);
    }
  }
  id result = *((id *)this + 1);
  *((void *)this + 35) = result;
  if (__CFADD__(*((void *)v3 + 10), *((void *)v3 + 11)))
  {
    v70 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v71 = [NSString stringWithUTF8String:"void TSWPLayoutChore::pSetupStateForParagraphIndex(TSWPLayoutState *)"];
    return (id)objc_msgSend(v70, "handleFailureInFunction:file:lineNumber:description:", v71, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 6065, @"Bad _state.paragraphRange.length");
  }
  return result;
}

uint64_t String(size_t *a1, unsigned __int16 a2)
{
  v2 = (unsigned int *)p_TSSPropertyStoreSearch(a1, a2);
  if (!v2) {
    return 0x80000000;
  }

  return String(v2);
}

size_t *p_TSSPropertyStoreSearch(size_t *result, unsigned __int16 a2)
{
  if (result)
  {
    unint64_t v3 = (const void *)result[1];
    if (v3)
    {
      v4[0] = 0;
      v4[1] = a2;
      return (size_t *)bsearch(v4, v3, *result, 0x10uLL, (int (__cdecl *)(const void *, const void *))p_TSSPropertyEntryCompare);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t String(unsigned int *a1)
{
  if (!a1)
  {
    v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 56, @"invalid nil value for '%s'", "entry");
  }
  int v4 = *((unsigned __int8 *)a1 + 10);
  if ((v4 - 2) < 2)
  {
LABEL_6:
    uint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)"];
    [v5 handleFailureInFunction:v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 68, @"Asked for int value of a %@-valued property.", String(*((unsigned __int8 *)a1 + 10)) file lineNumber description];
LABEL_10:
    float v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = [NSString stringWithUTF8String:"int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)"];
    [v10 handleFailureInFunction:v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 75, @"Undefined value in entry for property %d %@", *((unsigned __int16 *)a1 + 4), String(*((unsigned __int16 *)a1 + 4)) file lineNumber description];
    return 0x80000000;
  }
  if (v4 != 1)
  {
    if (*((unsigned char *)a1 + 10))
    {
      unint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v9 = [NSString stringWithUTF8String:"int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)"];
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 71, @"Unexpected entry type", v12);
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  uint64_t result = *a1;
  if (result == 0x80000000) {
    goto LABEL_10;
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  objc_class *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((unsigned __int16 *)a1 + 4);
  switch(*((unsigned char *)a1 + 10))
  {
    case 0:
      uint64_t v3 = NSString;
      int v4 = String(*((unsigned __int16 *)a1 + 4));
      uint64_t v5 = *(id *)a1;
      uint64_t v6 = (objc_class *)objc_opt_class();
      uint64_t result = [v3 stringWithFormat:@"%@  %3d (%@) = %p (%@) '%@'", @"Object", v2, v4, v5, NSStringFromClass(v6), objc_msgSend(*(id *)a1, "description")];
      break;
    case 1:
      uint64_t result = [NSString stringWithFormat:@"int     %3d (%@) = %d", v2, String(*((unsigned __int16 *)a1 + 4)), *a1, v10, v11, v12];
      break;
    case 2:
      uint64_t result = [NSString stringWithFormat:@"float   %3d (%@) = %f", v2, String(*((unsigned __int16 *)a1 + 4)), *(float *)a1, v10, v11, v12];
      break;
    case 3:
      uint64_t result = [NSString stringWithFormat:@"double  %3d (%@) = %g", v2, String(*((unsigned __int16 *)a1 + 4)), *(void *)a1, v10, v11, v12];
      break;
    default:
      unint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v9 = [NSString stringWithUTF8String:"NSString *TSSPropertyEntryDescription(TSSPropertyEntry *)"];
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 651, @"Invalid property type value");
      uint64_t result = 0;
      break;
  }
  return result;
}

float String(size_t *a1, unsigned __int16 a2)
{
  v2 = p_TSSPropertyStoreSearch(a1, a2);
  if (!v2) {
    return INFINITY;
  }

  return String((uint64_t)v2, v3);
}

float String(uint64_t a1, double a2)
{
  if (!a1)
  {
    double v3 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 81, @"invalid nil value for '%s'", "entry");
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 10);
  if (v5 < 2) {
    goto LABEL_6;
  }
  if (v5 != 2)
  {
    if (v5 != 3)
    {
      unint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v9 = [NSString stringWithUTF8String:"float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)"];
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 96, @"Unexpected entry type", v13);
      goto LABEL_10;
    }
LABEL_6:
    uint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = [NSString stringWithUTF8String:"float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)"];
    [v6 handleFailureInFunction:v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 93, @"Asked for float value of a %@-valued property.", String(*(unsigned __int8 *)(a1 + 10)) file lineNumber description];
LABEL_10:
    float v10 = objc_msgSend(MEMORY[0x263F7C7F0], "currentHandler", a2);
    uint64_t v11 = [NSString stringWithUTF8String:"float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)"];
    [v10 handleFailureInFunction:v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 100, @"Undefined value in entry for property %d %@", *(unsigned __int16 *)(a1 + 8), String(*(unsigned __int16 *)(a1 + 8)) file lineNumber description];
    LODWORD(a2) = 2139095040;
    return *(float *)&a2;
  }
  LODWORD(a2) = *(_DWORD *)a1;
  if (*(float *)a1 == INFINITY) {
    goto LABEL_10;
  }
  return *(float *)&a2;
}

uint64_t TSWPParagraphEnumerator::paragraphStyle(TSWPParagraphEnumerator *this, _NSRange *a2)
{
  if (a2)
  {
    a2->NSUInteger location = TSWPParagraphEnumerator::paragraphTextRange(this);
    a2->NSUInteger length = v4;
  }
  if (this->var2 >= this->var3) {
    return 0;
  }
  id var1 = this->var1;
  if (!var1) {
    return *(void *)(*(void *)([this->var0 attributeArrayForKind:0] + 32) + 16 * this->var2 + 8);
  }

  return objc_msgSend(var1, "paragraphStyleAtParIndex:effectiveRange:");
}

uint64_t *String(size_t *a1, unsigned __int16 a2)
{
  uint64_t result = (uint64_t *)p_TSSPropertyStoreSearch(a1, a2);
  if (result)
  {
    return (uint64_t *)String(result);
  }
  return result;
}

uint64_t String(uint64_t *a1)
{
  if (!a1)
  {
    v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 131, @"invalid nil value for '%s'", "entry");
  }
  if (*((unsigned __int8 *)a1 + 10) - 1 >= 3)
  {
    if (*((unsigned char *)a1 + 10))
    {
      uint64_t v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v8 = [NSString stringWithUTF8String:"id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)"];
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 146, @"Unexpected entry type", v11);
    }
    else
    {
      uint64_t result = *a1;
      if (*a1) {
        return result;
      }
    }
  }
  else
  {
    NSUInteger v4 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)"];
    [v4 handleFailureInFunction:v5, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 143, @"Asked for object value of a %@-valued property.", String(*((unsigned __int8 *)a1 + 10)) file lineNumber description];
  }
  uint64_t v9 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
  uint64_t v10 = [NSString stringWithUTF8String:"id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)"];
  [v9 handleFailureInFunction:v10, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 150, @"Undefined value in entry for property %d %@", *((unsigned __int16 *)a1 + 4), String(*((unsigned __int16 *)a1 + 4)) file lineNumber description];
  return 0;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __CFString *v6;

  v2 = (void *)[MEMORY[0x263F089D8] string];
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      NSUInteger v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = &stru_26D688A48;
      do
      {
        [v2 appendFormat:@"%@%@", v6, String((unsigned int *)(a1[1] + v4))];
        ++v5;
        uint64_t v3 = *a1;
        v4 += 16;
        uint64_t v6 = @"\n";
      }
      while (v5 < *a1);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  return [NSString stringWithFormat:@"TSSPropertyStoreDescription(%p) %lu entries {\n%@\n}", a1, v3, objc_msgSend(NSString, "tsu_stringByIndentingString:", v2)];
}

double TSDMultiplySizeScalar(double a1, double a2, double a3)
{
  return a1 * a3;
}

uint64_t TSWPCoreTextTypesetter::isParagraphSetUp(TSWPCoreTextTypesetter *this)
{
  return *((unsigned __int8 *)this + 34);
}

uint64_t TSWPLayoutChore::pFillSingleLineFragment@<X0>(uint64_t a1@<X0>, char a2@<W4>, uint64_t a3@<X5>, uint64_t **a4@<X6>, uint64_t **a5@<X7>, TSWPLineFragment **a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, _WORD *a11, unsigned char *a12)
{
  *a6 = 0;
  a6[1] = 0;
  *(double *)(a1 + 600) = a7;
  *(double *)(a1 + 608) = a8;
  *(double *)(a1 + 616) = a9;
  *(double *)(a1 + 624) = a10;
  uint64_t v15 = (unint64_t *)(a1 + 80);
  if (a9 < 0.0)
  {
    *(void *)(a1 + 616) = 0;
    a9 = 0.0;
  }
  unint64_t v16 = *v15;
  *(unsigned char *)(a3 + 145) = a2;
  *(unsigned char *)(a3 + 146) = a2 ^ 1;
  for (uint64_t i = *a4; ; *a4 = i)
  {
    if (i == *a5)
    {
      float v18 = 0;
LABEL_8:
      *(void *)(a3 + 152) = v18;
      goto LABEL_9;
    }
    float v18 = (void *)*i;
    unint64_t v19 = *(void *)*i;
    if (v19 >= v16) {
      break;
    }
    i += 2;
  }
  if (v18[25] == v18[24] && (*(unsigned char *)(a3 + 58) & 1) == 0) {
    goto LABEL_8;
  }
  unsigned int v38 = *((_DWORD *)v18 + 6);
  if ((v38 & 4) != 0 || v16 != v19 || ((v38 >> 13) & 1) != (*(unsigned char *)(a1 + 32) & 0x10) >> 4) {
    goto LABEL_8;
  }
  BOOL v39 = *((double *)v18 + 6) == a7 && *((double *)v18 + 7) == a8;
  if (!v39 || *((double *)v18 + 8) != a9) {
    goto LABEL_8;
  }
  std::shared_ptr<TSWPLineFragment>::operator=[abi:ne180100](a6, i);
  TSWPLineFragment::setWasReused(*a6);
  unint64_t v40 = *a6;
  *(void *)(a3 + 152) = v18;
  if (!v40) {
LABEL_9:
  }
    operator new();
  *(void *)(a3 + 200) = v40;
  unint64_t v41 = TSWPCoreTextTypesetter::skipLine(*(void *)(a1 + 2024), v15, a3);
  *uint64_t v15 = v41;
  unint64_t v20 = *(void *)(a1 + 168) + *(void *)(a1 + 160);
  if (v41 > v20)
  {
    uint64_t v21 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1778, @"Bad _state.charIndex");
    unint64_t v20 = *(void *)(a1 + 168) + *(void *)(a1 + 160);
  }
  unint64_t v23 = *a6;
  if (*((void *)*a6 + 1) + *(void *)*a6 > v20)
  {
    uint64_t v24 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v25 = objc_msgSend(NSString, "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1779, @"Bad line end");
    unint64_t v23 = *a6;
  }
  if (*((void *)v23 + 25) == *((void *)v23 + 24) && (*(unsigned char *)(a3 + 58) & 1) == 0)
  {
    uint64_t v26 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v27 = objc_msgSend(NSString, "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1780, @"Bad glyphCount");
    unint64_t v23 = *a6;
    if (!*a6)
    {
      int v28 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v29 = objc_msgSend(NSString, "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
      objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1782, @"failed to create a line fragment");
      unint64_t v23 = *a6;
    }
  }
  if ((*(unsigned char *)(a3 + 32) & 4) != 0)
  {
    int v30 = (double *)((char *)v23 + 216);
    double v31 = *((double *)v23 + 27);
    if (*(double *)(a1 + 632) >= v31) {
      double v31 = *(double *)(a1 + 632);
    }
    *(double *)(a1 + 632) = v31;
    if (*((void *)v23 + 22))
    {
      if (v31 >= *v30) {
        int v30 = (double *)(a1 + 632);
      }
      *(double *)(a1 + 632) = *v30;
    }
  }
  int v32 = TSWPLayoutChore::pApplySpaceAfterToLineFragment((TSWPLayoutChore *)a1, v23, 0, *(unsigned __int16 *)(a3 + 208), *(void *)(a3 + 216));
  if (v32)
  {
    BOOL Paragraph = TSWPLayoutChore::pSetupNextParagraph((TSWPLayoutChore *)a1);
    *a12 = 0;
    if (Paragraph && *v15 > v16)
    {
      LOBYTE(v32) = [*(id *)(a1 + 8) hasColumnStyleForParagraphBreakAtCharIndex:*(void *)(a3 + 216)];
      goto LABEL_29;
    }
  }
  else
  {
LABEL_29:
    *a12 = v32;
  }
  int v34 = *(unsigned __int16 *)(a3 + 208);
  uint64_t result = IsParagraphBreakingCharacter(*(unsigned __int16 *)(a3 + 208));
  if (v34 == 8232) {
    int v36 = 1;
  }
  else {
    int v36 = result;
  }
  if (v36) {
    __int16 v37 = *(_WORD *)(a3 + 208);
  }
  else {
    __int16 v37 = 0;
  }
  *a11 = v37;
  return result;
}

void sub_2234D3204(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPParagraphEnumerator::paragraphRunsRightToLeft(TSWPParagraphEnumerator *this)
{
  return [this->var0 isWritingDirectionRightToLeftForParagraphAtParIndex:this->var2];
}

uint64_t TSWPLayoutChore::pApplySpaceAfterToLineFragment(TSWPLayoutChore *this, const TSWPLineFragment *a2, TSWPLineFragment *a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    BOOL v10 = *((double *)a3 + 20) == 0.0;
  }
  else {
    BOOL v10 = 0;
  }
  double v11 = *((double *)this + 57);
  int v12 = [*((id *)this + 1) wpKind];
  double v13 = 6.0;
  if (v12 == 5) {
    double v13 = 0.0;
  }
  double v14 = fmax(*((double *)this + 55) + v11 + v13, 0.0);
  if (*((_DWORD *)this + 107) == 4 && v10) {
    *(CGRect *)((char *)a3 + 80) = CGRectInset(*(CGRect *)((char *)a2 + 80), -v14, 0.0);
  }
  if (*((void *)this + 10) < *((void *)this + 21) + *((void *)this + 20)) {
    goto LABEL_12;
  }
  if (*((double *)this + 57) != 0.0)
  {
    if (TSWPParagraphEnumerator::isLastParagraph((TSWPParagraphEnumerator *)((char *)this + 104))
      || (v17 = [*((id *)this + 1) characterAtIndex:*((void *)this + 20) + *((void *)this + 21) - 1]- 4, v17 < 0xC)&& ((0x907u >> v17) & 1) != 0|| (TSWPParagraphEnumerator::next((TSWPParagraphEnumerator *)((char *)this + 104), (uint64_t)&v27), float v18 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v27, 0), TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v27), objc_msgSend(v18, "intValueForProperty:", 102) != 4))
    {
      uint64_t v19 = 0;
      if (!v10) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v19 = [v18 valueForProperty:103];
      if (!v10) {
        goto LABEL_25;
      }
    }
    int v20 = *((_DWORD *)this + 107);
    if ((v20 - 2) < 2 || v20 == 4 && ([*((id *)this + 54) isEqual:v19] & 1) == 0)
    {
      *((double *)a3 + 20) = v14 + *((double *)a3 + 20);
      *((double *)a3 + 9) = v14 + *((double *)a3 + 9);
      *((double *)a3 + 13) = v14 + *((double *)a3 + 13);
    }
  }
LABEL_25:
  *((void *)this + 88) = 0;
  uint64_t v21 = IsParagraphBreakingCharacter(a4);
  if (v21)
  {
    double v22 = *((double *)this + 49);
    if (v22 <= 0.0 || *((void *)this + 26) + *((void *)this + 25) == a5)
    {
      uint64_t result = 1;
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t result = 0;
    if (a4 == 8232 || *((void *)this + 10) != *((void *)this + 8)) {
      goto LABEL_38;
    }
    double v22 = *((double *)this + 49);
    if (v22 <= 0.0)
    {
LABEL_12:
      uint64_t result = 0;
      goto LABEL_38;
    }
  }
  if (v10)
  {
    *((double *)a3 + 20) = v22 + *((double *)a3 + 20);
    *((double *)a3 + 9) = v22 + *((double *)a3 + 9);
    *((double *)a3 + 13) = v22 + *((double *)a3 + 13);
  }
  double Line = TSWPLineFragment::calculateOffsetForNextLine((uint64_t)a2, *((_DWORD *)this + 84), *((double *)this + 47));
  double v24 = *((double *)a2 + 20);
  double v25 = *((double *)a2 + 14)
      + *((double *)a2 + 18)
      + *((double *)a2 + 16)
      + *((double *)a2 + 17)
      + *((double *)a2 + 19)
      + v24
      - Line;
  if (v25 > 0.0)
  {
    double v26 = fmin(v25, v24);
    *((double *)this + 88) = -v26;
    if (a3) {
      *((double *)a3 + 9) = *((double *)a3 + 9) - v26;
    }
  }
  uint64_t result = v21;
LABEL_38:
  *((unsigned char *)this + 592) = 0;
  return result;
}

void sub_2234D3518(_Unwind_Exception *a1, TSWPParagraphEnumerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::shared_ptr<TSWPLineFragment>::reset[abi:ne180100]<TSWPLineFragment,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<TSWPLineFragment>::shared_ptr[abi:ne180100]<TSWPLineFragment,void>(&v2, a2);
}

void std::shared_ptr<TSWPLineFragment>::shared_ptr[abi:ne180100]<TSWPLineFragment,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2234D35E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<TSWPLineFragment>::reset[abi:ne180100]((TSWPLineFragment **)va, 0);
  _Unwind_Resume(a1);
}

void TSWPLineFragment::TSWPLineFragment(TSWPLineFragment *this)
{
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 48) = 0;
  *((_OWORD *)this + 10) = unk_22383B2C0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = *(_OWORD *)&qword_22383B2A0;
  *((_OWORD *)this + 9) = xmmword_22383B2B0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  long long v2 = *MEMORY[0x263F001A0];
  long long v1 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *((_OWORD *)this + 2) = xmmword_22383AD90;
  *((_OWORD *)this + 3) = v2;
  *((_OWORD *)this + 6) = v1;
  *((_OWORD *)this + 7) = gZeroHeightInfo;
  *((_OWORD *)this + 4) = v1;
  *((_OWORD *)this + 5) = v2;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
}

{
  long long v1;
  long long v2;

  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 48) = 0;
  *((_OWORD *)this + 10) = unk_22383B2C0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = *(_OWORD *)&qword_22383B2A0;
  *((_OWORD *)this + 9) = xmmword_22383B2B0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  long long v2 = *MEMORY[0x263F001A0];
  long long v1 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *((_OWORD *)this + 2) = xmmword_22383AD90;
  *((_OWORD *)this + 3) = v2;
  *((_OWORD *)this + 6) = v1;
  *((_OWORD *)this + 7) = gZeroHeightInfo;
  *((_OWORD *)this + 4) = v1;
  *((_OWORD *)this + 5) = v2;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
}

uint64_t TSWPParagraphEnumerator::listRunsRightToLeft(TSWPParagraphEnumerator *this)
{
  return [this->var0 isWritingDirectionRightToLeftForListAtParIndex:this->var2];
}

BOOL TSWPParagraphEnumerator::isFirstParagraph(TSWPParagraphEnumerator *this)
{
  return this->var4 == 0;
}

uint64_t TSWPCoreTextTypesetter::paragraphRange(TSWPCoreTextTypesetter *this)
{
  return *((void *)this + 5);
}

void sub_2234D38CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TSWPParagraphEnumerator::paragraphListStyle(TSWPParagraphEnumerator *this)
{
  if (this->var1 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id var1 = this->var1;
    unint64_t var2 = this->var2;
    return [var1 listStyleAtParIndex:var2];
  }
  else
  {
    id var0 = this->var0;
    unint64_t v6 = this->var2;
    return [var0 listStyleAtParIndex:v6 effectiveRange:0];
  }
}

uint64_t TSWPParagraphEnumerator::paragraphLevel(TSWPParagraphEnumerator *this)
{
  unint64_t var2 = this->var2;
  if (var2 >= this->var3) {
    return 0;
  }
  if (this->var1)
  {
    char v3 = objc_opt_respondsToSelector();
    unint64_t var2 = this->var2;
    if (v3)
    {
      uint64_t result = [this->var1 paragraphLevelAtParIndex:var2];
      if (result != 0x7FFFFFFFFFFFFFFFLL) {
        return result;
      }
      unint64_t var2 = this->var2;
    }
  }
  id var0 = this->var0;

  return [var0 paragraphLevelAtParIndex:var2];
}

void TSWPLayoutChore::TSWPLayoutChore(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)a1 = &unk_26D6879E0;
  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)(a1 + 104));
  bzero((void *)(a1 + 80), 0x2B0uLL);
  TSWPTopicNumberHints::TSWPTopicNumberHints(a1 + 768, [a4 styleProvider]);
  TSWPTopicNumberHints::TSWPTopicNumberHints(a1 + 816, [a4 styleProvider]);
  TSWPDropCapLayoutState::TSWPDropCapLayoutState();
  TSWPLineBalancingLayoutState::TSWPLineBalancingLayoutState((TSWPLineBalancingLayoutState *)(a1 + 1128));
  TSWPLineStylingLayoutState::TSWPLineStylingLayoutState(a1 + 1928, 0, 0);
  *(void *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a6;
  *(void *)(a1 + 2032) = a7;
  *(void *)(a1 + 2040) = a8;
  *(void *)(a1 + 2048) = a9;
  *(_DWORD *)(a1 + 56) = [a2 wpKind];
  *(void *)(a1 + 64) = [a2 characterCount];
  *(void *)(a1 + 72) = [a2 attachmentCount];
  *(void *)&long long v16 = 0xFFFFFFFFLL;
  *((void *)&v16 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 40) = v16;
  if (objc_opt_respondsToSelector()) {
    [a3 forceWesternLineBreaking];
  }
  operator new();
}

{
  TSWPLayoutChore::TSWPLayoutChore(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_2234D3F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, TSWPDropCapLayoutState *a10, TSWPTopicNumberHints *a11, TSWPTopicNumberHints *a12, uint64_t a13, uint64_t a14)
{
  TSWPLineBalancingLayoutState::~TSWPLineBalancingLayoutState(v15);
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState(a10);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(a11);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(a12);
  TSWPLayoutState::~TSWPLayoutState(v14);
  _Unwind_Resume(a1);
}

uint64_t TSWPTopicNumberHints::TSWPTopicNumberHints(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 40) = a2;
  return a1;
}

void sub_2234D3FE4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *TSWPLayoutState::setPreviousPartHint(void *result, void *a2)
{
  long long v2 = (void *)result[85];
  if (v2 != a2)
  {
    NSUInteger v4 = result;

    uint64_t result = a2;
    v4[85] = result;
  }
  return result;
}

void TSWPLineBalancingLayoutState::TSWPLineBalancingLayoutState(TSWPLineBalancingLayoutState *this)
{
  *((_OWORD *)this + 43) = 0u;
  *((_DWORD *)this + 182) = 0;
  *((void *)this + 92) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((unsigned char *)this + 792) = 0;
}

{
  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24));
  bzero(this, 0x2B0uLL);
  *((_OWORD *)this + 43) = 0u;
  *((_DWORD *)this + 182) = 0;
  *((void *)this + 92) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((unsigned char *)this + 792) = 0;
}

void TSWPCoreTextTypesetter::TSWPCoreTextTypesetter(TSWPCoreTextTypesetter *this, TSWPStorage *a2, TSWPLayoutChore *a3, TSWPCTTypesetterCache *a4, char a5, char a6)
{
  *(void *)this = &unk_26D687FB0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  TSWPDropCapCTState::TSWPDropCapCTState((char *)this + 288, 0, 0);
  TSWPLineStylingCTState::TSWPLineStylingCTState((char *)this + 328, 0, 0);
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = [(TSWPStorage *)a2 wpKind];
  *((void *)this + 1) = a3;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 30) = a5;
  *((unsigned char *)this + 31) = a6;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = a4;
  *((void *)this + 35) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
}

void sub_2234D416C(_Unwind_Exception *a1)
{
  TSWPDropCapCTState::~TSWPDropCapCTState(v2);
  NSUInteger v4 = *(std::__shared_weak_count **)(v1 + 240);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
  _Unwind_Resume(a1);
}

unsigned char *TSWPCoreTextTypesetter::beginLayout(unsigned char *this, char a2)
{
  this[32] = 1;
  this[34] = 0;
  this[33] = a2;
  return this;
}

CTTypesetterRef TSWPParagraphTypesetter::createCTTypesetter(TSWPParagraphTypesetter *this)
{
  TSWPParagraphTypesetter::pSetupRubyLinesForParagraph(this);
  TSWPParagraphTypesetter::pApplyRubyRunDelegatesToAttributedString(this);
  if (*((unsigned char *)this + 74)) {
    TSWPParagraphTypesetter::pSetupTateChuYokoForParagraph(this);
  }
  CTTypesetterRef result = CTTypesetterCreateWithAttributedString(*((CFAttributedStringRef *)this + 7));
  *((void *)this + 8) = result;
  return result;
}

TSWPParagraphTypesetter *TSWPParagraphTypesetter::pApplyRubyRunDelegatesToAttributedString(TSWPParagraphTypesetter *this)
{
  if (*((void *)this + 11) != *((void *)this + 10)) {
    TSWPParagraphTypesetter::pAddRubyRunDelegateAtIndexForRun();
  }
  return this;
}

void TSWPParagraphTypesetter::pSetupRubyLinesForParagraph(TSWPParagraphTypesetter *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unsigned int v38 = (char *)this + 80;
  if (*((void *)this + 11) != *((void *)this + 10))
  {
    long long v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void TSWPParagraphTypesetter::pSetupRubyLinesForParagraph()"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm"), 395, @"expected zero ruby runs when setting up typesetter");
  }
  NSUInteger v4 = objc_msgSend(*(id *)this, "smartFieldsWithAttributeKind:intersectingRange:", 7, *((void *)this + 2), *((void *)this + 3), v38);
  if (v4)
  {
    uint64_t v5 = v4;
    if ([v4 count])
    {
      CFAttributedStringRef aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      uint64_t v6 = [v5 countByEnumeratingWithState:&v46 objects:v50 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v47;
        do
        {
          uint64_t v8 = 0;
          do
          {
            if (*(void *)v47 != v7) {
              objc_enumerationMutation(v5);
            }
            uint64_t v9 = *(void **)(*((void *)&v46 + 1) + 8 * v8);
            id v10 = *(id *)this;
            uint64_t v11 = [v9 range];
            unint64_t v13 = objc_msgSend(v10, "charRangeMappedFromStorage:", v11, v12);
            unint64_t v15 = v13;
            unint64_t v16 = *((void *)this + 2);
            if (v16 <= v13 && (uint64_t v17 = v14, *((void *)this + 3) + v16 >= v13 + v14))
            {
              if (v14)
              {
                CFIndex Length = CFAttributedStringGetLength(aStr);
                CFStringRef v21 = (const __CFString *)[v9 rubyText];
                v52.NSUInteger location = Length;
                v52.NSUInteger length = 0;
                CFAttributedStringReplaceString(aStr, v52, v21);
                long long cf = 0u;
                memset(v45, 0, sizeof(v45));
                unint64_t v41 = v9;
                unint64_t v42 = v15;
                uint64_t v43 = v17;
                unint64_t v22 = *((void *)this + 11);
                if (v22 >= *((void *)this + 12))
                {
                  uint64_t v23 = std::vector<_TSWPRubyRun>::__push_back_slow_path<_TSWPRubyRun const&>(v39, (uint64_t)&v41);
                }
                else
                {
                  _TSWPRubyRun::_TSWPRubyRun(*((void *)this + 11), (uint64_t)&v41);
                  uint64_t v23 = v22 + 72;
                  *((void *)this + 11) = v22 + 72;
                }
                *((void *)this + 11) = v23;
                double v24 = (void *)[*(id *)this paragraphStyleAtCharIndex:*((void *)this + 2) effectiveRange:0];
                CFDictionaryRef v25 = (const __CFDictionary *)objc_msgSend(v24, "getTypesetterAttributes:scalePercent:isRightToLeft:", objc_msgSend(*(id *)this, "characterStyleAtCharIndex:effectiveRange:", v42, 0), *((void *)this + 1) >> 1, 0);
                v53.NSUInteger length = objc_msgSend((id)objc_msgSend(v9, "rubyText"), "length");
                v53.NSUInteger location = Length;
                CFAttributedStringSetAttributes(aStr, v53, v25, 1u);
                if ((void)cf) {
                  CFRelease((CFTypeRef)cf);
                }
              }
            }
            else
            {
              float v18 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
              uint64_t v19 = [NSString stringWithUTF8String:"void TSWPParagraphTypesetter::pSetupRubyLinesForParagraph()"];
              objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm"), 428, @"ruby field crossed paragraph boundary");
            }
            ++v8;
          }
          while (v6 != v8);
          uint64_t v26 = [v5 countByEnumeratingWithState:&v46 objects:v50 count:16];
          uint64_t v6 = v26;
        }
        while (v26);
      }
      if (*((unsigned char *)this + 74)) {
        ApplyVerticalFormsToAttributedString(aStr, 0);
      }
      TSWPParagraphEnumerator v27 = CTTypesetterCreateWithAttributedString(aStr);
      uint64_t v28 = *((void *)this + 11) - *((void *)this + 10);
      if (v28)
      {
        uint64_t v29 = 0;
        CFIndex v30 = 0;
        unint64_t v31 = v28 / 72;
        if (v31 <= 1) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = v31;
        }
        do
        {
          uint64_t v33 = *v39;
          CFIndex v34 = objc_msgSend((id)objc_msgSend(*(id *)(*v39 + v29), "rubyText"), "length");
          if (v34)
          {
            v54.NSUInteger location = v30;
            v54.NSUInteger length = v34;
            double Line = CTTypesetterCreateLine(v27, v54);
            *(void *)(v33 + v29 + 24) = Line;
            double TypographicBounds = CTLineGetTypographicBounds(Line, (CGFloat *)(v33 + v29 + 40), (CGFloat *)(v33 + v29 + 48), 0);
          }
          else
          {
            __int16 v37 = (void *)(v33 + v29);
            v37[3] = 0;
            v37[5] = 0;
            v37[6] = 0;
            double TypographicBounds = 0.0;
          }
          *(double *)(v33 + v29 + 32) = TypographicBounds;
          v30 += v34;
          v29 += 72;
          --v32;
        }
        while (v32);
      }
      CFRelease(v27);
      CFRelease(aStr);
    }
  }
}

void sub_2234D47B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_2234D48B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TSWPParagraphTypesetter::TSWPParagraphTypesetter(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v8 = (_WORD **)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  unint64_t v9 = [a2 length];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v9;
  if (v9)
  {
    std::vector<unsigned short>::resize((uint64_t)v8, v9);
    objc_msgSend(*(id *)a1, "getCharacters:range:", *(void *)(a1 + 32), 0, v9);
    uint64_t v10 = *(void *)(a1 + 32);
    if (v9 - 1 >= (*(void *)(a1 + 40) - v10) >> 1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(unsigned __int16 *)(v10 + 2 * (v9 - 1));
    }
  }
  else
  {
    std::vector<unsigned short>::resize((uint64_t)v8, 1uLL);
    uint64_t v11 = 0;
    *void *v8 = 0;
  }
  if (IsParagraphBreakingCharacter(v11)) {
    __int16 v12 = v11;
  }
  else {
    __int16 v12 = 0;
  }
  *(_WORD *)(a1 + 72) = v12;
  if (v9)
  {
    unint64_t v13 = v9 - 1;
    if ([*(id *)a1 hasColumnBreakAtCharIndex:v13]) {
      (*v8)[v13] = 8233;
    }
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 74) = a4;
  return a1;
}

void sub_2234D4A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = v11 + 9;
  std::vector<_TSWPTateChuYokoRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  std::vector<_TSWPRubyRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  unint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      abort();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[2 * v11];
    unint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a2);
}

uint64_t TSWPLineFragment::getCharIndexData(TSWPLineFragment *this)
{
  if (*((void *)this + 25) != *((void *)this + 24) && (*((unsigned char *)this + 25) & 0x40) == 0)
  {
    unint64_t v2 = (void *)*((void *)this + 64);
    objc_sync_enter(v2);
    if (*((void *)this + 61) == *((void *)this + 62))
    {
      v89 = v2;
      if (!*((void *)this + 23))
      {
        uint64_t v3 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v4 = [NSString stringWithUTF8String:"const std::vector<TSWPLFCharIndexData> &TSWPLineFragment::getCharIndexData() const"];
        objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2278, @"invalid nil value for '%s'", "_textSource");
      }
      if (!*((void *)this + 64))
      {
        uint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v6 = [NSString stringWithUTF8String:"const std::vector<TSWPLFCharIndexData> &TSWPLineFragment::getCharIndexData() const"];
        objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2279, @"invalid nil value for '%s'", "_paragraphString");
      }
      v98 = 0;
      v99 = 0;
      uint64_t v100 = 0;
      TSWPLineFragment::fillWritingDirectionRuns((uint64_t *)this, &v98);
      uint64_t v7 = (const __CTLine *)**((void **)this + 24);
      if ((*((unsigned char *)this + 26) & 0x80) != 0
        && (GlyphRuns = CTLineGetGlyphRuns(**((CTLineRef **)this + 24)), (CFArrayRef v9 = GlyphRuns) != 0)
        && (CFIndex Count = CFArrayGetCount(GlyphRuns), Count >= 1))
      {
        CFIndex v11 = 0;
        while (1)
        {
          ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(v9, v11);
          CFDictionaryRef Attributes = CTRunGetAttributes(ValueAtIndex);
          if (CFDictionaryContainsKey(Attributes, @"__TSWPTruncationKey")) {
            break;
          }
          if (Count == ++v11) {
            goto LABEL_14;
          }
        }
        unint64_t location = CTRunGetStringRange(ValueAtIndex).location;
      }
      else
      {
LABEL_14:
        unint64_t location = 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v14 = *(void *)this;
      uint64_t v15 = *((void *)this + 1);
      unint64_t v16 = [*((id *)this + 23) charIndexRemappedFromStorage:*(void *)this];
      unint64_t v90 = v15 + v14;
      v91 = (long long **)((char *)this + 488);
      if (v16 < v15 + v14)
      {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        while (1)
        {
          unint64_t v19 = objc_msgSend(*((id *)this + 23), "charRangeMappedFromStorage:", v16, 1);
          unint64_t v20 = v19;
          if (location != 0x7FFFFFFFFFFFFFFFLL && location <= v19) {
            goto LABEL_84;
          }
          CGFloat secondaryOffset = 0.0;
          *(void *)&long long v94 = CTLineGetOffsetForStringIndex(v7, v19, &secondaryOffset);
          *((CGFloat *)&v94 + 1) = secondaryOffset;
          v96.n128_u8[0] = 1;
          v96.n128_u64[1] = 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((v99 - (unsigned char *)v98) >> 3);
          if (v18 < v21)
          {
            unint64_t v22 = (char *)&v98[5 * v18];
            unint64_t v24 = *((void *)v22 + 2);
            unint64_t v23 = *((void *)v22 + 3);
            BOOL v26 = v16 >= v24;
            unint64_t v25 = v16 - v24;
            BOOL v26 = !v26 || v25 >= v23;
            if (!v26) {
              goto LABEL_38;
            }
          }
          if (v99 != (unsigned char *)v98) {
            break;
          }
          unint64_t v18 = 0;
LABEL_39:
          if (v18 >= v21 || v98[5 * v18 + 2] != v16 || v18 >= v21 - 1)
          {
LABEL_42:
            if ((*((_DWORD *)this + 6) & 0x1000) != 0)
            {
              int v32 = [*((id *)this + 23) characterAtIndex:v20];
              if (v32 == 9 || v32 == 65532 || v32 == 14) {
                *(void *)&long long v94 = TSWPLineFragment::getLocalRunOffsetForCharIndex(this, v20, (double *)&v94 + 1);
              }
            }
          }
          uint64_t v33 = v7;
          CFIndex v34 = (void *)*((void *)this + 64);
          unint64_t v35 = [*((id *)this + 23) charIndexMappedFromStorage:v16];
          if ([v34 length] <= v35)
          {
            unint64_t v42 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
            uint64_t v43 = objc_msgSend(NSString, "stringWithUTF8String:", "NSUInteger countOfComposedCharacters(NSString *, NSUInteger)");
            objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v43, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1944, @"Index exceeds bounds. index: %ld string length: %ld", v35, objc_msgSend(v34, "length"));
            uint64_t v41 = 0;
          }
          else
          {
            uint64_t v36 = [v34 rangeOfComposedCharacterSequenceAtIndex:v35];
            uint64_t v38 = v37;
            if (v36 == 0x7FFFFFFFFFFFFFFFLL || !v37)
            {
              BOOL v39 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
              uint64_t v40 = objc_msgSend(NSString, "stringWithUTF8String:", "NSUInteger countOfComposedCharacters(NSString *, NSUInteger)");
              objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v40, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1951, @"Unexpected 0 length for composed sequence.");
            }
            if (v38) {
              uint64_t v41 = v38;
            }
            else {
              uint64_t v41 = 1;
            }
          }
          unint64_t v44 = [*((id *)this + 23) charIndexMappedToStorage:v41 + v20];
          unint64_t v45 = v41 + v16;
          unint64_t v46 = v20 + v41;
          unint64_t v48 = v90;
          long long v47 = (void **)((char *)this + 488);
          do
          {
            if (v44 >= v45) {
              break;
            }
            unint64_t v44 = [*((id *)this + 23) charIndexMappedToStorage:++v46];
          }
          while (v46 < [*((id *)this + 23) length]);
          if (v16 <= v44) {
            unint64_t v49 = v44;
          }
          else {
            unint64_t v49 = v16;
          }
          if (v16 >= v44) {
            CGFloat v50 = *(double *)&v44;
          }
          else {
            CGFloat v50 = *(double *)&v16;
          }
          v93[0] = v50;
          *(void *)&v93[1] = v49 - *(void *)&v50;
          uint64_t v51 = (_OWORD *)*((void *)this + 62);
          unint64_t v52 = *((void *)this + 63);
          if ((unint64_t)v51 >= v52)
          {
            uint64_t v54 = ((char *)v51 - (char *)*v91) >> 6;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 58) {
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v52 - (void)*v91;
            if (v56 >> 5 > v55) {
              unint64_t v55 = v56 >> 5;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v57 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TSWPLFCharIndexData>>((uint64_t)this + 504, v57);
              unint64_t v48 = v90;
              long long v47 = (void **)((char *)this + 488);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v59 = &v58[64 * v54];
            *(_OWORD *)uint64_t v59 = *(_OWORD *)v93;
            *((_OWORD *)v59 + 1) = v94;
            *((_OWORD *)v59 + 2) = v95;
            __n128 v17 = v96;
            *((__n128 *)v59 + 3) = v96;
            unint64_t v61 = (__n128 *)*((void *)this + 61);
            uint64_t v60 = (__n128 *)*((void *)this + 62);
            uint64_t v62 = v59;
            if (v60 != v61)
            {
              do
              {
                __n128 v17 = v60[-4];
                __n128 v63 = v60[-3];
                __n128 v64 = v60[-1];
                *((__n128 *)v62 - 2) = v60[-2];
                *((__n128 *)v62 - 1) = v64;
                *((__n128 *)v62 - 4) = v17;
                *((__n128 *)v62 - 3) = v63;
                v62 -= 64;
                v60 -= 4;
              }
              while (v60 != v61);
              uint64_t v60 = (__n128 *)*v47;
            }
            CFRange v53 = v59 + 64;
            *((void *)this + 61) = v62;
            *((void *)this + 62) = v59 + 64;
            *((void *)this + 63) = &v58[64 * v57];
            if (v60) {
              operator delete(v60);
            }
          }
          else
          {
            *uint64_t v51 = *(_OWORD *)v93;
            v51[1] = v94;
            v51[2] = v95;
            __n128 v17 = v96;
            v51[3] = v96;
            CFRange v53 = v51 + 4;
          }
          *((void *)this + 62) = v53;
          if (v16 >= v44)
          {
            unint64_t v65 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
            uint64_t v7 = v33;
            uint64_t v66 = [NSString stringWithUTF8String:"const std::vector<TSWPLFCharIndexData> &TSWPLineFragment::getCharIndexData() const"];
            objc_msgSend(v65, "handleFailureInFunction:file:lineNumber:description:", v66, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2385, @"textSource failed to advance");
            goto LABEL_84;
          }
          unint64_t v16 = v49;
          uint64_t v7 = v33;
          if (v49 >= v48) {
            goto LABEL_84;
          }
        }
        unint64_t v27 = 0;
        if (v21 <= 1) {
          unint64_t v18 = 1;
        }
        else {
          unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v99 - (unsigned char *)v98) >> 3);
        }
        uint64_t v28 = v98 + 3;
        while (1)
        {
          unint64_t v29 = *(v28 - 1);
          BOOL v26 = v16 >= v29;
          unint64_t v30 = v16 - v29;
          if (v26 && v30 < *v28) {
            break;
          }
          v28 += 5;
          if (v18 == ++v27) {
            goto LABEL_42;
          }
        }
        unint64_t v18 = v27;
LABEL_38:
        v96.n128_u8[0] = v98[5 * v18 + 4];
        v96.n128_u64[1] = v18;
        goto LABEL_39;
      }
LABEL_84:
      unint64_t v67 = (__n128 *)*((void *)this + 62);
      uint64_t v68 = (uint64_t)v67 - *((void *)this + 61);
      if (v68)
      {
        uint64_t v69 = 0;
        unint64_t v70 = v68 >> 6;
        unint64_t v71 = v70 - 1;
        if (v70 <= 1) {
          uint64_t v72 = 1;
        }
        else {
          uint64_t v72 = v70;
        }
        int v73 = *((_DWORD *)this + 6);
        do
        {
          v74 = *v91;
          v75 = &(*v91)[4 * v69];
          v76 = (double *)(v75 + 1);
          if ((v73 & 0x1000) == 0) {
            v76 = (double *)v75 + 3;
          }
          double v77 = *v76;
          if (v69 == v71)
          {
            v93[0] = 0.0;
            v17.n128_f64[0] = CTLineGetOffsetForStringIndex(v7, [*((id *)this + 23) charIndexMappedFromStorage:v90], v93);
            int v73 = *((_DWORD *)this + 6);
            if ((v73 & 0x1000) != 0 && LOBYTE(v74[4 * v71 + 3])) {
              v17.n128_f64[0] = v93[0];
            }
            int v78 = LOBYTE(v74[4 * v71 + 3]);
            v74 = *v91;
            uint64_t v79 = v69 + 1;
          }
          else
          {
            uint64_t v79 = v69 + 1;
            int v78 = *((unsigned __int8 *)v75 + 48);
            v80 = &v74[4 * v69 + 4];
            if (v78 == *((unsigned __int8 *)v80 + 48) || (v73 & 0x1000) == 0) {
              uint64_t v82 = 16;
            }
            else {
              uint64_t v82 = 24;
            }
            v17.n128_u64[0] = *(void *)((char *)v80 + v82);
          }
          BOOL v83 = v78 == 0;
          if (v78) {
            double v84 = v77;
          }
          else {
            double v84 = v17.n128_f64[0];
          }
          v85 = &v74[4 * v69];
          if (v83) {
            v17.n128_f64[0] = v77;
          }
          *((double *)v85 + 4) = v84;
          *((void *)v85 + 5) = v17.n128_u64[0];
          uint64_t v69 = v79;
        }
        while (v79 != v72);
        unint64_t v67 = (__n128 *)*((void *)this + 62);
      }
      else
      {
        v74 = (long long *)*((void *)this + 62);
      }
      *(void *)&v93[0] = compareByGlyphPosition;
      unint64_t v86 = 126 - 2 * __clz(((char *)v67 - (char *)v74) >> 6);
      if (v67 == (__n128 *)v74) {
        uint64_t v87 = 0;
      }
      else {
        uint64_t v87 = v86;
      }
      unint64_t v2 = v89;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,false>(v74, v67, (uint64_t (**)(long long *, long long *))v93, v87, 1, v17);
      if (v98)
      {
        v99 = v98;
        operator delete(v98);
      }
    }
    objc_sync_exit(v2);
  }
  return (uint64_t)this + 488;
}

void sub_2234D55A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  uint64_t v14 = *(void **)(v12 - 128);
  if (v14)
  {
    *(void *)(v12 - 120) = v14;
    operator delete(v14);
  }
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TSWPLFCharIndexData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

void TSWPLineFragment::fillWritingDirectionRuns(uint64_t *a1, void *a2)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  uint64_t v3 = (const __CTLine **)a1[24];
  if ((const __CTLine **)a1[25] != v3 && (*((unsigned char *)a1 + 25) & 0x40) == 0)
  {
    uint64_t v4 = *v3;
    if (!a1[23])
    {
      uint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"void TSWPLineFragment::fillWritingDirectionRuns(vector<TSWPLFWritingDirectionRun> &) const"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1973, @"invalid nil value for '%s'", "_textSource");
    }
    if (!a1[64])
    {
      uint64_t v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v8 = [NSString stringWithUTF8String:"void TSWPLineFragment::fillWritingDirectionRuns(vector<TSWPLFWritingDirectionRun> &) const"];
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1974, @"invalid nil value for '%s'", "_paragraphString");
    }
    uint64_t v111 = a1[28];
    uint64_t v112 = a1[29];
    int v108 = *((_DWORD *)a1 + 6);
    long long v119 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    obuint64_t j = CTLineGetGlyphRuns(v4);
    uint64_t v113 = [(__CFArray *)obj countByEnumeratingWithState:&v119 objects:v123 count:16];
    if (v113)
    {
      uint64_t v109 = 0;
      uint64_t v110 = *(void *)v120;
      uint64_t v106 = (uint64_t)(a2 + 2);
      char v9 = 1;
      uint64_t v10 = -1;
      uint64_t v11 = -1;
      BOOL v115 = 1;
      while (1)
      {
        for (uint64_t i = 0; i != v113; ++i)
        {
          if (*(void *)v120 != v110) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(const __CTRun **)(*((void *)&v119 + 1) + 8 * i);
          CFRange StringRange = CTRunGetStringRange(v13);
          if (StringRange.length == 1 && v112 != v111)
          {
            CFDictionaryRef Attributes = CTRunGetAttributes(v13);
            if (CFDictionaryContainsKey(Attributes, @"TSWPRubySpacingRunAttribute")) {
              continue;
            }
          }
          if ((v108 & 0x800000) != 0)
          {
            CFDictionaryRef v17 = CTRunGetAttributes(v13);
            if (CFDictionaryContainsKey(v17, @"__TSWPTruncationKey")) {
              goto LABEL_70;
            }
          }
          CTRunStatus v18 = CTRunGetStatus(v13) & 1;
          BOOL v114 = v18 == 0;
          if (v9) {
            BOOL v115 = (*((unsigned char *)a1 + 25) & 0x10) == 0;
          }
          TSWPComposedCharacterAtIndexForTextSource(StringRange.location, (void *)a1[23]);
          int v19 = TSWPGetBidiClass();
          int v20 = v19;
          BOOL v21 = v19 == 3;
          if (v19 == 3 && StringRange.location != 0)
          {
            BOOL v23 = v19 == 3;
            CFStringRef v24 = (const __CFString *)a1[64];
            CFIndex location = CTRunGetStringRange(v13).location;
            CFIndex v26 = CFStringGetRangeOfComposedCharactersAtIndex(v24, location - 1).location;
            TSWPComposedCharacterAtIndexForTextSource(v26, (void *)a1[23]);
            BOOL v27 = TSWPGetBidiClass() != 0;
            BOOL v21 = v23;
            goto LABEL_29;
          }
          BOOL v27 = 0;
          if ((v18 ^ 1) != v115 || BYTE4(v109) & 1 | (v19 == 3))
          {
LABEL_29:
            if ((v9 & 1) == 0)
            {
              BOOL v28 = v115;
              unint64_t v30 = a2[1];
              unint64_t v29 = a2[2];
              if (v30 >= v29)
              {
                BOOL v116 = v21;
                unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v30 - *a2) >> 3);
                unint64_t v34 = v33 + 1;
                if (v33 + 1 > 0x666666666666666) {
                  std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - *a2) >> 3);
                if (2 * v35 > v34) {
                  unint64_t v34 = 2 * v35;
                }
                if (v35 >= 0x333333333333333) {
                  unint64_t v36 = 0x666666666666666;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36) {
                  uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(v106, v36);
                }
                else {
                  uint64_t v37 = 0;
                }
                uint64_t v38 = &v37[40 * v33];
                *(void *)uint64_t v38 = v11;
                *((void *)v38 + 1) = v10;
                v38[32] = v28;
                v38[33] = v109 & 1;
                int v32 = a2;
                uint64_t v40 = (char *)*a2;
                BOOL v39 = (char *)a2[1];
                uint64_t v41 = v38;
                if (v39 != (char *)*a2)
                {
                  do
                  {
                    long long v42 = *(_OWORD *)(v39 - 40);
                    long long v43 = *(_OWORD *)(v39 - 24);
                    *((void *)v41 - 1) = *((void *)v39 - 1);
                    *(_OWORD *)(v41 - 24) = v43;
                    *(_OWORD *)(v41 - 40) = v42;
                    v41 -= 40;
                    v39 -= 40;
                  }
                  while (v39 != v40);
                  BOOL v39 = (char *)*a2;
                }
                unint64_t v31 = v38 + 40;
                *a2 = v41;
                a2[1] = v38 + 40;
                a2[2] = &v37[40 * v36];
                if (v39) {
                  operator delete(v39);
                }
                BOOL v21 = v116;
              }
              else
              {
                *(void *)unint64_t v30 = v11;
                *(void *)(v30 + 8) = v10;
                *(unsigned char *)(v30 + 32) = v115;
                unint64_t v31 = (char *)(v30 + 40);
                *(unsigned char *)(v30 + 33) = v109 & 1;
                int v32 = a2;
              }
              v32[1] = v31;
            }
            BOOL v44 = v20 == 3 && v27;
            LOBYTE(v109) = v44;
            BYTE4(v109) = v21;
            uint64_t v10 = -1;
            uint64_t v11 = -1;
            BOOL v115 = v114;
          }
          else
          {
            BYTE4(v109) = 0;
          }
          GlyphCFIndex Count = CTRunGetGlyphCount(v13);
          std::vector<long>::vector(buffer, GlyphCount);
          v125.CFIndex location = 0;
          v125.NSUInteger length = GlyphCount;
          CTRunGetStringIndices(v13, v125, buffer[0]);
          if (GlyphCount >= 1)
          {
            for (uint64_t j = 0; j != GlyphCount; ++j)
            {
              uint64_t v47 = [(id)a1[23] charIndexMappedToStorage:buffer[0][j]];
              if (v47 < v11 || v11 == -1) {
                uint64_t v11 = v47;
              }
              if (v47 > v10 || v10 == -1) {
                uint64_t v10 = v47;
              }
            }
          }
          if (buffer[0])
          {
            buffer[1] = buffer[0];
            operator delete(buffer[0]);
          }
          char v9 = 0;
          continue;
        }
        uint64_t v113 = [(__CFArray *)obj countByEnumeratingWithState:&v119 objects:v123 count:16];
        if (!v113)
        {
LABEL_70:
          if (v11 != -1 && v10 != -1)
          {
            char v50 = v109 & 1;
            unint64_t v52 = a2[1];
            unint64_t v51 = a2[2];
            if (v52 >= v51)
            {
              unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - *a2) >> 3);
              unint64_t v55 = v54 + 1;
              if (v54 + 1 > 0x666666666666666) {
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - *a2) >> 3);
              if (2 * v56 > v55) {
                unint64_t v55 = 2 * v56;
              }
              if (v56 >= 0x333333333333333) {
                unint64_t v57 = 0x666666666666666;
              }
              else {
                unint64_t v57 = v55;
              }
              if (v57) {
                uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(v106, v57);
              }
              else {
                uint64_t v58 = 0;
              }
              uint64_t v59 = &v58[40 * v54];
              uint64_t v60 = &v58[40 * v57];
              *(void *)uint64_t v59 = v11;
              *((void *)v59 + 1) = v10;
              v59[32] = v115;
              v59[33] = v50;
              CFRange v53 = v59 + 40;
              uint64_t v62 = (char *)*a2;
              unint64_t v61 = (char *)a2[1];
              if (v61 == (char *)*a2)
              {
                unint64_t v65 = (char **)a2;
              }
              else
              {
                do
                {
                  long long v63 = *(_OWORD *)(v61 - 40);
                  long long v64 = *(_OWORD *)(v61 - 24);
                  *((void *)v59 - 1) = *((void *)v61 - 1);
                  *(_OWORD *)(v59 - 24) = v64;
                  *(_OWORD *)(v59 - 40) = v63;
                  v59 -= 40;
                  v61 -= 40;
                }
                while (v61 != v62);
                unint64_t v65 = (char **)a2;
                unint64_t v61 = (char *)*a2;
              }
              *unint64_t v65 = v59;
              v65[1] = v53;
              v65[2] = v60;
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v11;
              *(void *)(v52 + 8) = v10;
              *(unsigned char *)(v52 + 32) = v115;
              CFRange v53 = (char *)(v52 + 40);
              *(unsigned char *)(v52 + 33) = v50;
            }
            a2[1] = v53;
          }
          break;
        }
      }
    }
  }
  unint64_t v67 = (char *)*a2;
  uint64_t v66 = (char *)a2[1];
  if (v66 != (char *)*a2)
  {
    uint64_t v68 = 0;
    unsigned int v69 = 0;
    unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v66[-*a2] >> 3);
    do
    {
      uint64_t v71 = *a1;
      uint64_t v72 = a1[1] + *a1;
      int v73 = (uint64_t *)&v67[40 * v68];
      uint64_t v74 = *v73;
      uint64_t v75 = v73[1];
      v76 = (uint64_t *)(v67 + 8);
      uint64_t v77 = 1;
      do
      {
        uint64_t v79 = *(v76 - 1);
        uint64_t v78 = *v76;
        BOOL v80 = *v76 > v71 && v78 <= v74;
        int v81 = !v80;
        if (v79 <= v78) {
          uint64_t v82 = *v76;
        }
        else {
          uint64_t v82 = *(v76 - 1);
        }
        if (v79 >= v78) {
          uint64_t v83 = *v76;
        }
        else {
          uint64_t v83 = *(v76 - 1);
        }
        BOOL v84 = v81 == 0;
        if (v81) {
          uint64_t v85 = v71;
        }
        else {
          uint64_t v85 = *v76;
        }
        if (!v84) {
          uint64_t v82 = *(v76 - 1);
        }
        if (v79 > v74 || v79 <= v71) {
          uint64_t v71 = v85;
        }
        else {
          uint64_t v71 = v82;
        }
        if (v75) {
          BOOL v87 = v78 < v72;
        }
        else {
          BOOL v87 = 0;
        }
        char v88 = v87;
        if ((v88 & (v78 > v75)) != 0)
        {
          uint64_t v89 = v83;
        }
        else
        {
          uint64_t v78 = v72;
          uint64_t v89 = *(v76 - 1);
        }
        if (v79 > v75 && v79 < v72) {
          uint64_t v72 = v89;
        }
        else {
          uint64_t v72 = v78;
        }
        v76 += 5;
        BOOL v80 = v70 > v77++;
      }
      while (v80);
      if (v72 >= v71)
      {
        long long v94 = &v67[40 * v68];
        *((void *)v94 + 2) = v71;
        *((void *)v94 + 3) = v72 - v71;
        v93 = (char **)a2;
      }
      else
      {
        v91 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v92 = [NSString stringWithUTF8String:"void TSWPLineFragment::fillWritingDirectionRuns(vector<TSWPLFWritingDirectionRun> &) const"];
        objc_msgSend(v91, "handleFailureInFunction:file:lineNumber:description:", v92, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2113, @"Bad ranges in runs.");
        v93 = (char **)a2;
        *(_OWORD *)(*a2 + 40 * v68 + 16) = xmmword_223837AD0;
        uint64_t v66 = (char *)a2[1];
      }
      unint64_t v67 = *v93;
      unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - v67) >> 3);
      uint64_t v68 = ++v69;
    }
    while (v70 > v69);
    long long v95 = a2;
    if (v66 != v67)
    {
      unint64_t v96 = 0;
      unsigned int v97 = 0;
      do
      {
        if (v70 - 1 > v96
          && (v98 = *(void *)&v67[40 * v97 + 56], v99 = &v67[40 * v96], unint64_t v100 = *((void *)v99 + 2), v98 <= v100)
          && *(void *)&v67[40 * v97 + 64] + v98 >= *(void *)&v67[40 * v96 + 24] + v100)
        {
          v105 = (char *)(v66 - (v99 + 40));
          if (v66 != v99 + 40) {
            memmove(&v67[40 * v96], v99 + 40, v66 - (v99 + 40));
          }
          uint64_t v66 = &v105[(void)v99];
          long long v95 = a2;
          a2[1] = &v105[(void)v99];
          --v97;
        }
        else if (v97)
        {
          unint64_t v101 = *(void *)&v67[40 * v97 - 24];
          v102 = &v67[40 * v96];
          unint64_t v103 = *((void *)v102 + 2);
          if (v101 <= v103 && *(void *)&v67[40 * v97 - 16] + v101 >= *(void *)&v67[40 * v96 + 24] + v103)
          {
            int64_t v104 = v66 - (v102 + 40);
            if (v66 != v102 + 40) {
              memmove(v102, v102 + 40, v66 - (v102 + 40));
            }
            uint64_t v66 = &v102[v104];
            long long v95 = a2;
            a2[1] = &v102[v104];
            --v97;
          }
        }
        unint64_t v67 = (char *)*v95;
        unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v66[-*v95] >> 3);
        unint64_t v96 = ++v97;
      }
      while (v70 > v97);
    }
  }
}

void sub_2234D6250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPGetBidiClass()
{
  unsigned int v0 = MEMORY[0x223CB9D00]();
  if (v0 > 0x12) {
    return 0;
  }
  else {
    return dword_22383BB68[v0];
  }
}

uint64_t TSWPComposedCharacterAtIndexForTextSource(unint64_t a1, void *a2)
{
  if (!a2)
  {
    uint64_t v4 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v5 = objc_msgSend(NSString, "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"), 1416, @"invalid nil value for '%s'", "source");
  }
  unint64_t v6 = [a2 length];
  if (v6 <= a1)
  {
    unint64_t v16 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"), 1418, @"index out of bounds");
    return 0;
  }
  unint64_t v7 = v6;
  uint64_t v8 = [a2 characterAtIndex:a1];
  if ((v8 & 0xFC00) == 0xDC00)
  {
    uint64_t v9 = [MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    uint64_t v11 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"];
    uint64_t v12 = @"index inside surrogate pair";
    uint64_t v13 = (void *)v9;
    uint64_t v14 = v10;
    uint64_t v15 = 1423;
LABEL_6:
    [v13 handleFailureInFunction:v14 file:v11 lineNumber:v15 description:v12];
    return v8;
  }
  if (a1 + 1 < v7 && (v8 & 0xFC00) == 0xD800)
  {
    int v19 = objc_msgSend(a2, "characterAtIndex:");
    if ((v19 & 0xFC00) == 0xDC00) {
      return (v19 + (v8 << 10) - 56613888);
    }
    uint64_t v20 = [MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    uint64_t v11 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"];
    uint64_t v12 = @"invalid surrogate pair";
    uint64_t v13 = (void *)v20;
    uint64_t v14 = v21;
    uint64_t v15 = 1428;
    goto LABEL_6;
  }
  return v8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,false>(long long *a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  uint64_t v12 = (long long *)&a2[-4];
  uint64_t v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    uint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = ((char *)a2 - (char *)v13) >> 6;
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-4], v13))
          {
            long long v34 = v13[2];
            long long v36 = v13[3];
            long long v30 = *v13;
            long long v32 = v13[1];
            long long v26 = *v12;
            long long v27 = (__int128)a2[-3];
            long long v28 = (__int128)a2[-1];
            v13[2] = (__int128)a2[-2];
            v13[3] = v28;
            *uint64_t v13 = v26;
            v13[1] = v27;
            *uint64_t v12 = v30;
            a2[-3] = (__n128)v32;
            a2[-2] = (__n128)v34;
            a2[-1] = (__n128)v36;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v13, v13 + 4, (long long *)&a2[-4], a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v13, v13 + 4, v13 + 8, (long long *)&a2[-4], a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v13, v13 + 4, v13 + 8, v13 + 12, (long long *)&a2[-4], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 1535) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,TSWPLFCharIndexData*>((uint64_t)v13, a2, a2, (unsigned int (**)(__n128 *, __n128 *))a3, a6);
      }
      return;
    }
    unint64_t v18 = v17 >> 1;
    int v19 = &v13[4 * (v17 >> 1)];
    if ((unint64_t)v16 > 0x2000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v13, &v13[4 * (v17 >> 1)], (long long *)&a2[-4], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v13 + 4, v19 - 4, (long long *)&a2[-8], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v13 + 8, &v13[4 * v18 + 4], (long long *)&a2[-12], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v19 - 4, v19, &v13[4 * v18 + 4], a3);
      long long v33 = v13[2];
      long long v35 = v13[3];
      long long v29 = *v13;
      long long v31 = v13[1];
      long long v20 = *v19;
      long long v21 = v19[1];
      long long v22 = v19[3];
      v13[2] = v19[2];
      v13[3] = v22;
      *uint64_t v13 = v20;
      v13[1] = v21;
      v19[2] = v33;
      v19[3] = v35;
      *int v19 = v29;
      v19[1] = v31;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(&v13[4 * (v17 >> 1)], v13, (long long *)&a2[-4], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v13 - 4, v13) & 1) == 0)
    {
      uint64_t v13 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TSWPLFCharIndexData *,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&)>(v13, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    BOOL v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TSWPLFCharIndexData *,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&)>(v13, (long long *)a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v13, v23, a3);
    uint64_t v13 = v23 + 4;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v23 + 4, (long long *)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v25)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,false>(a1, v23, a3, -v15, a5 & 1);
      uint64_t v13 = v23 + 4;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v13, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v13, a2, a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    uint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((EQKit::StemStretch::Key *)((char *)a2 - 40), v11))
          {
            std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v11, (uint64_t)a2 - 40);
          }
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40), (uint64_t)a2 - 40, a3);
          break;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40), (EQKit::StemStretch::Key *)((char *)v11 + 80), (uint64_t)a2 - 40, a3);
          break;
        case 5uLL:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40), (EQKit::StemStretch::Key *)((char *)v11 + 80), (EQKit::StemStretch::Key *)((char *)v11 + 120), (uint64_t)a2 - 40, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, a2, a2, (uint64_t (**)(uint64_t, uint64_t))a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (EQKit::StemStretch::Key *)((char *)v11 + 40 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v11, (EQKit::StemStretch::Key *)((char *)v11 + 40 * (v15 >> 1)), (uint64_t)a2 - 40, a3);
      unint64_t v18 = 5 * v16;
      int v19 = (EQKit::StemStretch::Key *)((char *)v11 + 40 * v16 - 40);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)((char *)v11 + 40), v19, (uint64_t)a2 - 80, a3);
      long long v20 = (EQKit::StemStretch::Key *)((char *)v11 + 80);
      long long v21 = (EQKit::StemStretch::Key *)((char *)v11 + 8 * v18 + 40);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v20, v21, (uint64_t)a2 - 120, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v19, v17, (uint64_t)v21, a3);
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)((char *)v11 + 40 * (v15 >> 1)), v11, (uint64_t)a2 - 40, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((EQKit::StemStretch::Key *)((char *)a1 - 40), a1) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(const void **, EQKit::StemStretch::Key *))a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v22 = (EQKit::StemStretch::Key *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(char *, const void **))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    char v24 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v22, a3);
    uint64_t v11 = (EQKit::StemStretch::Key *)((char *)v22 + 40);
    if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v22 + 40, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v24 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(a1, v22, a3, -v13, a5 & 1);
      uint64_t v11 = (EQKit::StemStretch::Key *)((char *)v22 + 40);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v11, a2, (uint64_t (**)(const void **, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v11, a2, (uint64_t (**)(const void **, uint64_t))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    uint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((EQKit::OpticalKern::Glyph::Key *)((char *)a2 - 40), v11))
          {
            std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v11, (uint64_t)a2 - 40);
          }
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40), (uint64_t)a2 - 40, a3);
          break;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40), (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 80), (uint64_t)a2 - 40, a3);
          break;
        case 5uLL:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40), (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 80), (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 120), (uint64_t)a2 - 40, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, a2, a2, (uint64_t (**)(uint64_t, uint64_t))a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v11, (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40 * (v15 >> 1)), (uint64_t)a2 - 40, a3);
      unint64_t v18 = 5 * v16;
      int v19 = (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40 * v16 - 40);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40), v19, (uint64_t)a2 - 80, a3);
      long long v20 = (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 80);
      long long v21 = (EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 8 * v18 + 40);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v20, v21, (uint64_t)a2 - 120, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v19, v17, (uint64_t)v21, a3);
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)((char *)v11 + 40 * (v15 >> 1)), v11, (uint64_t)a2 - 40, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((EQKit::OpticalKern::Glyph::Key *)((char *)a1 - 40), a1) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(const void **, EQKit::OpticalKern::Glyph::Key *))a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v22 = (EQKit::OpticalKern::Glyph::Key *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(char *, const void **))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    char v24 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, v22, a3);
    uint64_t v11 = (EQKit::OpticalKern::Glyph::Key *)((char *)v22 + 40);
    if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)v22 + 40, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v24 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(a1, v22, a3, -v13, a5 & 1);
      uint64_t v11 = (EQKit::OpticalKern::Glyph::Key *)((char *)v22 + 40);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)v11, a2, (uint64_t (**)(const void **, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)v11, a2, (uint64_t (**)(const void **, uint64_t))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          long long v26 = *a3;
          long long v27 = (std::__shared_weak_count *)*(a2 - 1);
          uint64_t v38 = *(a2 - 2);
          BOOL v39 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v28 = (std::__shared_weak_count *)v11[1];
          long long v36 = *v11;
          uint64_t v37 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v29 = v26(&v38, &v36);
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v37);
          }
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v39);
          }
          if (v29)
          {
            long long v30 = *v11;
            *uint64_t v11 = *(a2 - 2);
            *(a2 - 2) = v30;
            long long v31 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v11 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v11 + 2, v11 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383)
    {
      if (a5) {
        std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, a2, a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, &v11[2 * (v15 >> 1)], a2 - 2, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11 + 2, v17 - 2, a2 - 4, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11 + 4, &v11[2 * v16 + 2], a2 - 6, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      unint64_t v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_21;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(&v11[2 * (v15 >> 1)], v11, a2 - 2, a3);
      if (a5) {
        goto LABEL_21;
      }
    }
    int v19 = *a3;
    long long v20 = (std::__shared_weak_count *)*(v11 - 1);
    long long v34 = *(v11 - 2);
    long long v35 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = (std::__shared_weak_count *)v11[1];
    long long v32 = *v11;
    long long v33 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v22 = v19(&v34, &v32);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v33);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    }
    if ((v22 & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(v11, a2, a3);
      goto LABEL_26;
    }
LABEL_21:
    BOOL v23 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(v11, a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_24;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, v23, a3);
    uint64_t v11 = v23 + 2;
    if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v23 + 2, a2, a3))
    {
      a4 = -v13;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_24:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(a1, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 2;
LABEL_26:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (v11 != a2) {
    std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v11, a2, a2, a3);
  }
}

  uint64_t v11 = (long long *)((char *)a2 - 40);
  uint64_t v12 = (int *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)a2 - 10, v12))
          {
            long long v35 = *((void *)v12 + 4);
            long long v31 = *(_OWORD *)v12;
            long long v33 = *((_OWORD *)v12 + 1);
            long long v28 = *v11;
            long long v29 = *(long long *)((char *)a2 - 24);
            *((void *)v12 + 4) = *((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v28;
            *((_OWORD *)v12 + 1) = v29;
            *uint64_t v11 = v31;
            *(long long *)((char *)a2 - 24) = v33;
            *((void *)a2 - 1) = v35;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v12, v12 + 10, (int *)a2 - 10, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, v12 + 10, v12 + 20, (long long *)((char *)a2 - 40), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, v12 + 10, v12 + 20, (long long *)(v12 + 30), (long long *)((char *)a2 - 40), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (int *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,boost::polygon::detail::site_event<int>*>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[10 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v12, &v12[10 * (v16 >> 1)], (int *)a2 - 10, a3);
      int v19 = 5 * v17;
      long long v20 = &v12[10 * v17 - 10];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v12 + 10, v20, (int *)a2 - 20, a3);
      long long v21 = v12 + 20;
      long long v22 = &v12[2 * v19 + 10];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v21, v22, (int *)a2 - 30, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v20, v18, v22, a3);
      long long v34 = *(void *)(a1 + 32);
      long long v30 = *(_OWORD *)a1;
      long long v32 = *(_OWORD *)(a1 + 16);
      BOOL v23 = *(_OWORD *)v18;
      char v24 = *((_OWORD *)v18 + 1);
      *(void *)(a1 + 32) = *((void *)v18 + 4);
      *(_OWORD *)a1 = v23;
      *(_OWORD *)(a1 + 16) = v24;
      *((void *)v18 + 4) = v34;
      *(_OWORD *)unint64_t v18 = v30;
      *((_OWORD *)v18 + 1) = v32;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(&v12[10 * (v16 >> 1)], v12, (int *)a2 - 10, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)(a1 - 40), (int *)a1) & 1) == 0)
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((int *)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    BOOL v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((long long *)a1, (int *)a2, a3);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    long long v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, v25, a3);
    uint64_t v12 = (int *)(v25 + 40);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v25 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v27)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(a1, v25, a3, -v14, a5 & 1);
      uint64_t v12 = (int *)(v25 + 40);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, (uint64_t)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, (uint64_t)a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 6;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 4;
      if (!(*a3)(a2 - 4, a1)) {
        return 1;
      }
      long long v10 = a1[2];
      long long v9 = a1[3];
      long long v12 = *a1;
      long long v11 = a1[1];
      long long v13 = *(a2 - 1);
      long long v15 = *v8;
      long long v14 = *(a2 - 3);
      a1[2] = *(a2 - 2);
      a1[3] = v13;
      *a1 = v15;
      a1[1] = v14;
      long long *v8 = v12;
      *(a2 - 3) = v11;
      BOOL result = 1;
      *(a2 - 2) = v10;
      *(a2 - 1) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      uint64_t v16 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(a1, a1 + 4, a1 + 8, a3);
      unint64_t v17 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v17, v16))
    {
      long long v20 = v17[1];
      long long v29 = *v17;
      long long v30 = v20;
      long long v21 = v17[3];
      long long v31 = v17[2];
      long long v32 = v21;
      uint64_t v22 = v18;
      while (1)
      {
        BOOL v23 = (long long *)((char *)a1 + v22);
        long long v24 = *(long long *)((char *)a1 + v22 + 144);
        v23[12] = *(long long *)((char *)a1 + v22 + 128);
        v23[13] = v24;
        long long v25 = *(long long *)((char *)a1 + v22 + 176);
        v23[14] = *(long long *)((char *)a1 + v22 + 160);
        v23[15] = v25;
        if (v22 == -128) {
          break;
        }
        v22 -= 64;
        if (((*a3)(&v29, v23 + 4) & 1) == 0)
        {
          long long v26 = (long long *)((char *)a1 + v22 + 192);
          goto LABEL_12;
        }
      }
      long long v26 = a1;
LABEL_12:
      long long v27 = v30;
      long long *v26 = v29;
      v26[1] = v27;
      long long v28 = v32;
      v26[2] = v31;
      v26[3] = v28;
      if (++v19 == 8) {
        return v17 + 4 == a2;
      }
    }
    uint64_t v16 = v17;
    v18 += 64;
    v17 += 4;
    if (v17 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v11 = a1[2];
      long long v10 = a1[3];
      long long v13 = *a1;
      long long v12 = a1[1];
      long long v14 = a3[3];
      long long v16 = *a3;
      long long v15 = a3[1];
      a1[2] = a3[2];
      a1[3] = v14;
      *a1 = v16;
      a1[1] = v15;
      *a3 = v13;
      a3[1] = v12;
      uint64_t result = 1;
LABEL_9:
      a3[2] = v11;
      a3[3] = v10;
      return result;
    }
    long long v32 = a1[2];
    long long v31 = a1[3];
    long long v34 = *a1;
    long long v33 = a1[1];
    long long v35 = a2[3];
    long long v37 = *a2;
    long long v36 = a2[1];
    a1[2] = a2[2];
    a1[3] = v35;
    *a1 = v37;
    a1[1] = v36;
    *a2 = v34;
    a2[1] = v33;
    a2[2] = v32;
    a2[3] = v31;
    if ((*a4)(a3, a2))
    {
      long long v11 = a2[2];
      long long v10 = a2[3];
      long long v39 = *a2;
      long long v38 = a2[1];
      long long v40 = a3[3];
      long long v42 = *a3;
      long long v41 = a3[1];
      a2[2] = a3[2];
      a2[3] = v40;
      *a2 = v42;
      a2[1] = v41;
      *a3 = v39;
      a3[1] = v38;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    long long v18 = a2[2];
    long long v17 = a2[3];
    long long v20 = *a2;
    long long v19 = a2[1];
    long long v21 = a3[3];
    long long v23 = *a3;
    long long v22 = a3[1];
    a2[2] = a3[2];
    a2[3] = v21;
    *a2 = v23;
    a2[1] = v22;
    *a3 = v20;
    a3[1] = v19;
    a3[2] = v18;
    a3[3] = v17;
    if ((*a4)(a2, a1))
    {
      long long v25 = a1[2];
      long long v24 = a1[3];
      long long v27 = *a1;
      long long v26 = a1[1];
      long long v28 = a2[3];
      long long v30 = *a2;
      long long v29 = a2[1];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v30;
      a1[1] = v29;
      *a2 = v27;
      a2[1] = v26;
      uint64_t result = 2;
      a2[2] = v25;
      a2[3] = v24;
      return result;
    }
  }
  return 1;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TSWPLFCharIndexData *,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v27 = *a1;
  long long v28 = v7;
  long long v8 = a1[3];
  long long v29 = a1[2];
  long long v30 = v8;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v27) & 1) != 0);
  long long v9 = &a1[v6];
  long long v10 = &a1[v6 - 4];
  if (v6 == 4)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 4;
    }
    while (((*a3)(a2, &v27) & 1) == 0);
  }
  else
  {
    do
      a2 -= 4;
    while (!(*a3)(a2, &v27));
  }
  if (v9 < a2)
  {
    long long v11 = &a1[v6];
    long long v12 = a2;
    do
    {
      long long v14 = v11[1];
      long long v31 = *v11;
      long long v13 = v31;
      long long v32 = v14;
      long long v16 = v11[3];
      long long v33 = v11[2];
      long long v15 = v33;
      long long v34 = v16;
      long long v18 = v12[2];
      long long v17 = v12[3];
      long long v19 = v12[1];
      *long long v11 = *v12;
      v11[1] = v19;
      v11[2] = v18;
      v11[3] = v17;
      v12[2] = v15;
      v12[3] = v16;
      *long long v12 = v13;
      v12[1] = v14;
      do
        v11 += 4;
      while (((*a3)(v11, &v27) & 1) != 0);
      do
        v12 -= 4;
      while (!(*a3)(v12, &v27));
    }
    while (v11 < v12);
    long long v10 = v11 - 4;
  }
  if (v10 != a1)
  {
    long long v20 = *v10;
    long long v21 = v10[1];
    long long v22 = v10[3];
    a1[2] = v10[2];
    a1[3] = v22;
    *a1 = v20;
    a1[1] = v21;
  }
  long long v23 = v27;
  long long v24 = v28;
  long long v25 = v30;
  v10[2] = v29;
  v10[3] = v25;
  *long long v10 = v23;
  v10[1] = v24;
  return v10;
}

BOOL compareByGlyphPosition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = a1[7];
  unint64_t v3 = a2[7];
  BOOL v4 = v2 >= v3;
  if (v2 == v3)
  {
    if (*((unsigned char *)a1 + 48))
    {
      unint64_t v5 = *a1;
      unint64_t v6 = *a2;
    }
    else
    {
      unint64_t v5 = *a2;
      unint64_t v6 = *a1;
    }
    BOOL v4 = v5 >= v6;
  }
  return !v4;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    unint64_t v6 = (_OWORD *)result;
    long long v7 = (_OWORD *)(result + 64);
    if ((_OWORD *)(result + 64) != a2)
    {
      uint64_t v9 = 0;
      long long v10 = (_OWORD *)result;
      do
      {
        long long v11 = v10;
        long long v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v12 = v10[1];
          long long v21 = *v10;
          long long v22 = v12;
          long long v13 = v10[3];
          long long v23 = v10[2];
          long long v24 = v13;
          uint64_t v14 = v9;
          while (1)
          {
            long long v15 = (_OWORD *)((char *)v6 + v14);
            long long v16 = *(_OWORD *)((char *)v6 + v14 + 16);
            v15[4] = *(_OWORD *)((char *)v6 + v14);
            v15[5] = v16;
            long long v17 = *(_OWORD *)((char *)v6 + v14 + 48);
            v15[6] = *(_OWORD *)((char *)v6 + v14 + 32);
            v15[7] = v17;
            if (!v14) {
              break;
            }
            v14 -= 64;
            uint64_t result = (*a3)(&v21, (char *)v6 + v14);
            if ((result & 1) == 0)
            {
              long long v18 = (_OWORD *)((char *)v6 + v14 + 64);
              goto LABEL_10;
            }
          }
          long long v18 = v6;
LABEL_10:
          long long v19 = v22;
          *long long v18 = v21;
          v18[1] = v19;
          long long v20 = v24;
          v18[2] = v23;
          v18[3] = v20;
        }
        long long v7 = v10 + 4;
        v9 += 64;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

double TSWPLineFragmentArray::topOfCapForLogicalLineIndex(TSWPLineFragmentArray *this, unint64_t a2)
{
  NSUInteger v3 = TSWPLineFragmentArray::lineFragmentRangeForLogicalLineIndex(this, a2);
  NSUInteger v5 = v4;
  v6.CFIndex location = v3;
  v6.NSUInteger length = v5;

  return TSWPLineFragmentArray::topOfCapForForLineFragmentRange(this, v6);
}

uint64_t TSWPLineFragmentArray::lineFragmentRangeForLogicalLineIndex(TSWPLineFragmentArray *this, unint64_t a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this == v3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    unint64_t v7 = *(unsigned __int16 *)(*(void *)v2 + 552);
    if (v7 == a2)
    {
      if (result == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t result = v5;
      }
      ++v4;
    }
    else if (v7 > a2)
    {
      return result;
    }
    ++v5;
    v2 += 16;
  }
  while (v2 != v3);
  return result;
}

unint64_t TSWPCoreTextTypesetter::beginParagraphLayout(TSWPCoreTextTypesetter *this, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    long long v12 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 282, @"invalid nil value for '%s'", "state");
  }
  if (!*(void *)(a2 + 96))
  {
    uint64_t v14 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 283, @"invalid nil value for '%s'", "state->paragraphStyle");
  }
  if (*((unsigned char *)this + 34)) {
    TSWPCoreTextTypesetter::endParagraphLayout(this);
  }
  TSWPDropCapCTState::operator=((uint64_t)this + 288, *a4);
  TSWPLineStylingCTState::operator=((uint64_t)this + 328, a4[1]);
  *((unsigned char *)this + 34) = 1;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(a2 + 80);
  uint64_t v16 = *((void *)this + 5);
  if ((unint64_t)(*(void *)(a2 + 16) - v16) >= *((void *)this + 6)) {
    uint64_t v17 = *((void *)this + 6);
  }
  else {
    uint64_t v17 = *(void *)(a2 + 16) - v16;
  }
  *((void *)this + 6) = v17;
  *((void *)this + 8) = (id)objc_msgSend(*((id *)this + 2), "textSourceForLayoutInRange:");
  *((void *)this + 9) = (id)TSWPParagraphEnumerator::coreTextPropertiesFilterDelegate((TSWPParagraphEnumerator *)(a2 + 24));
  *((void *)this + 7) = [*((id *)this + 8) length];
  char v18 = *(unsigned char *)(a2 + 345);
  if (v18)
  {
    if (*(unsigned char *)(a2 + 333)) {
      char v18 = 0;
    }
    else {
      char v18 = *(unsigned char *)(a2 + 346) != 0;
    }
  }
  *((unsigned char *)this + 88) = v18;
  *((double *)this + 17) = a6;
  *((double *)this + 18) = a7;
  *((void *)this + 12) = (id)TSWPParagraphEnumerator::paragraphLanguage((TSWPParagraphEnumerator *)(a2 + 24), 1, 0);
  *((unsigned char *)this + 104) = TSUHasCJKLanguage();
  uint64_t v121 = [*(id *)(a2 + 104) scaleTextPercent];
  long long v19 = (std::__shared_weak_count *)*((void *)this + 30);
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v19);
  }
  long long v20 = (void *)*((void *)this + 28);
  v132 = (TSWPLayoutState *)a2;
  if (v20
    && v121 == 100
    && (!*((void *)this + 40) || *((double *)this + 38) == 1.0 && (*((unsigned char *)this + 296) & 1) == 0)
    && (!*((void *)this + 44) || (*((unsigned char *)this + 336) & 1) == 0)
    && *((_DWORD *)this + 6) != 1
    && *(void *)(a2 + 16) == 0x7FFFFFFFFFFFFFFFLL)
  {
    [v20 cachedTypesetterForParagraphIdentifier:a5];
    long long v21 = v139;
    long long v139 = 0uLL;
    long long v22 = (std::__shared_weak_count *)*((void *)this + 30);
    *(_OWORD *)((char *)this + 232) = v21;
    if (v22)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v22);
      if (*((void *)&v139 + 1)) {
        std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v139 + 1));
      }
    }
  }
  uint64_t v23 = *((void *)this + 29);
  uint64_t v113 = v23;
  if (!v23) {
    operator new();
  }
  if (*((void *)this + 7) != (uint64_t)(*(void *)(v23 + 40) - *(void *)(v23 + 32)) >> 1)
  {
    long long v24 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v25 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 326, @"cached paragraph typesetter has wrong char count");
  }
  uint64_t v26 = *((void *)this + 29);
  if (!v26)
  {
    long long v27 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v28 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
    objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 328, @"invalid nil value for '%s'", "_paragraphTypesetter.get()");
    uint64_t v26 = *((void *)this + 29);
  }
  uint64_t v29 = *(void *)(v26 + 32);
  *((_DWORD *)this + 28) = 100;
  *((void *)this + 10) = v29;
  NSUInteger v130 = *((void *)this + 7);
  *((void *)this + 15) = malloc_type_malloc(0x28A0uLL, 0x10E0040261DCC7AuLL);
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  char v119 = 0;
  uint64_t v116 = 0;
  unsigned int v131 = 0;
  NSUInteger v30 = 0;
  *((void *)this + 16) = malloc_type_malloc(8 * *((unsigned int *)this + 28), 0x100004000313F17uLL);
  char v149 = *((unsigned char *)this + 33);
  __int16 v150 = 0;
  char v151 = v149 ^ 1;
  uint64_t v152 = 0;
  char v153 = 0;
  char v154 = v149 ^ 1;
  int v155 = 16843008;
  char v156 = 0;
  uint64_t v148 = 0;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  long long v141 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  double v31 = *((double *)this + 38);
  key = (void *)*MEMORY[0x263F039A0];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  v117 = (void *)*MEMORY[0x263F03C60];
  BOOL v114 = (void *)*MEMORY[0x263F03D88];
  BOOL v115 = (void *)*MEMORY[0x263F03CA8];
  NSUInteger v129 = *((void *)this + 40);
  NSUInteger v126 = *((void *)this + 45);
  do
  {
    [*((id *)this + 8) attributesAtCharIndex:v30 attributesOfInterest:&v149 attributesTable:&v139 effectiveRange:&v136];
    if (v137) {
      BOOL v32 = 1;
    }
    else {
      BOOL v32 = v30 == v130;
    }
    if (!v32)
    {
      long long v33 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v34 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
      objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", v34, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 360, @"Empty effectiveRange");
    }
    if (v126 > v30 && *((void *)this + 44) && (*((unsigned char *)this + 336) & 1) != 0 && v137 + v136 > v126) {
      NSUInteger v137 = v126 - v30;
    }
    long long v35 = v132;
    if (v129 > v30
      && *((void *)this + 40)
      && (*((double *)this + 38) != 1.0 || (*((unsigned char *)this + 296) & 1) != 0)
      && v137 + v136 > v129)
    {
      NSUInteger v137 = v129 - v30;
    }
    long long v36 = (void *)*((void *)&v146 + 1);
    long long v37 = v147;
    uint64_t v38 = *((void *)&v140 + 1);
    uint64_t v39 = *((void *)&v145 + 1);
    if (v126 > v30 && *((void *)this + 44) && (*((unsigned char *)this + 336) & 1) != 0)
    {
      uint64_t v38 = (uint64_t)TSWPLineStylingCTState::modifiedCharacterStyle((TSWPCoreTextTypesetter *)((char *)this + 328), (TSSStylesheet *)[*((id *)this + 2) stylesheet], *((TSWPCharacterStyle **)&v140 + 1));
      long long v35 = v132;
    }
    if (v129 > v30 && *((void *)this + 40) && (*((unsigned char *)this + 296) & 1) != 0)
    {
      uint64_t v38 = (uint64_t)TSWPDropCapCTState::modifiedCharacterStyle((TSWPCoreTextTypesetter *)((char *)this + 288), (TSSStylesheet *)[*((id *)this + 2) stylesheet], (TSWPCharacterStyle *)v38);
      long long v35 = v132;
    }
    if (v38)
    {
      [*((id *)v35 + 13) styleProvider];
      if (objc_opt_respondsToSelector()) {
        uint64_t v38 = objc_msgSend((id)objc_msgSend(*((id *)v132 + 13), "styleProvider"), "modifiedCharacterStyle:atCharIndex:", v38, v30);
      }
      long long v35 = v132;
    }
    NSUInteger v40 = v136;
    NSUInteger v41 = v137 + v136;
    if (v137 + v136 >= v130) {
      NSUInteger v41 = v130;
    }
    if (v136 <= v30) {
      NSUInteger v40 = v30;
    }
    NSUInteger v136 = v40;
    NSUInteger v137 = v41 - v40;
    long long v42 = (void *)*((void *)v35 + 12);
    if (!v42)
    {
      long long v43 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v44 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
      objc_msgSend(v43, "handleFailureInFunction:file:lineNumber:description:", v44, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 413, @"invalid nil value for '%s'", "state->paragraphStyle");
      long long v35 = v132;
      long long v42 = (void *)*((void *)v132 + 12);
    }
    CFDictionaryRef v45 = (const __CFDictionary *)objc_msgSend(*((id *)this + 8), "createFilteredCoreTextAttributes:effectiveRange:filterDelegate:", objc_msgSend(v42, "getTypesetterAttributes:scalePercent:isRightToLeft:", v38, v121, *((unsigned __int8 *)v35 + 333)), &v136, *((void *)this + 9));
    CFTypeRef cf = CFDictionaryGetValue(v45, key);
    if (([(id)v37 showsMarkup] & 1) != 0 || objc_msgSend(v36, "showsMarkup"))
    {
      if ([(id)v37 showsMarkup]) {
        long long v36 = (void *)v37;
      }
      uint64_t v46 = objc_msgSend((id)objc_msgSend(v36, "session"), "author");
      if (v123 != v46)
      {
        uint64_t v122 = [v36 textMarkupColor];
        uint64_t v123 = v46;
      }
      int v47 = [v36 isDeletion];
      unint64_t v48 = (void *)v122;
      if (v47) {
        unint64_t v49 = (const void *)v122;
      }
      else {
        unint64_t v49 = 0;
      }
    }
    else
    {
      unint64_t v48 = 0;
      unint64_t v49 = 0;
    }
    char v50 = v132;
    if (v49) {
      unint64_t v51 = (const void *)*((void *)v132 + 81);
    }
    else {
      unint64_t v51 = 0;
    }
    if (*((void *)v132 + 81))
    {
      unint64_t v48 = (void *)*((void *)v132 + 81);
      unint64_t v52 = v51;
    }
    else
    {
      unint64_t v52 = v49;
    }
    BOOL v53 = v31 != 1.0 && v129 > v30;
    int v54 = v53;
    uint64_t v124 = v48;
    if (v48 || v52 || *((void *)&v37 + 1) || v54)
    {
      BOOL v56 = v48 != 0;
      MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, v45);
      CFRelease(v45);
      if (v56) {
        CFDictionarySetValue(MutableCopy, v117, (const void *)[v124 CGColor]);
      }
      if (v52)
      {
        CFDictionarySetValue(MutableCopy, @"TSWPStrikethroughColor", v52);
        CFDictionarySetValue(MutableCopy, @"TSWPStrikethrough", &unk_26D73A140);
      }
      if (*((void *)&v37 + 1)) {
        CFDictionarySetValue((CFMutableDictionaryRef)v37, @"TSWPTextHighlightAuthorAttribute", (const void *)[*((id *)&v37 + 1) author]);
      }
      if (v54)
      {
        unint64_t v57 = (const __CTFont *)CFDictionaryGetValue(MutableCopy, key);
        CGFloat Size = CTFontGetSize(v57);
        CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(v57, v31 * Size, 0, 0);
        CFDictionarySetValue(MutableCopy, key, CopyWithAttributes);
        CFRelease(CopyWithAttributes);
      }
      char v50 = v132;
    }
    else
    {
      MutableCopy = v45;
    }
    if (!(v38 | v39)) {
      goto LABEL_120;
    }
    int v60 = *((unsigned __int8 *)v50 + 333);
    if (v38)
    {
      int v61 = [(id)v38 writingDirection];
      char v50 = v132;
    }
    else
    {
      int v61 = -1;
    }
    if (v61 == -1 && v39)
    {
      int v61 = [MEMORY[0x263EFF960] characterDirectionForLanguage:v39] == 2;
      char v50 = v132;
    }
    if (v61 == -1 || v61 == v60)
    {
LABEL_120:
      theDict = MutableCopy;
      goto LABEL_127;
    }
    if (!v137) {
      goto LABEL_125;
    }
    uint64_t v62 = 0;
    NSUInteger v63 = 0;
    NSUInteger v64 = v136;
    do
    {
      if (!IsWhitespaceCharacter(*(unsigned __int16 *)(*((void *)this + 10) + 2 * (v62 + v64)))) {
        break;
      }
      uint64_t v62 = ++v63;
    }
    while (v137 > v63);
    if (!v63)
    {
      unint64_t v65 = v137;
      if (v137 >= 2)
      {
        NSUInteger v66 = v64 - 1;
        do
        {
          if (!IsWhitespaceCharacter(*(unsigned __int16 *)(*((void *)this + 10) + 2 * (v66 + v65)))) {
            break;
          }
          unint64_t v65 = v137 - 1;
          NSUInteger v137 = v65;
        }
        while (v65 > 1);
      }
LABEL_125:
      theDict = CFDictionaryCreateMutableCopy(allocator, 0, MutableCopy);
      CFRelease(MutableCopy);
      uint64_t v138 = [NSNumber numberWithInt:v61 == 1];
      CFDictionarySetValue(theDict, v114, (const void *)[MEMORY[0x263EFF8C0] arrayWithObjects:&v138 count:1]);
      goto LABEL_126;
    }
    NSUInteger v137 = v63;
    theDict = MutableCopy;
LABEL_126:
    char v50 = v132;
LABEL_127:
    if (v30 < *((void *)this + 7))
    {
      int v67 = *(unsigned __int16 *)(*((void *)this + 10) + 2 * v30);
      if (v67 == 65532)
      {
        uint64_t v68 = (TSWPDrawableAttachment *)[*((id *)this + 8) attachmentAtCharIndex:v30];
        if (v68)
        {
          value = 0;
          ++HIDWORD(v116);
LABEL_145:
          if (![(TSWPDrawableAttachment *)v68 isDrawable]
            || [(TSWPDrawableAttachment *)v68 isAnchored]
            || [(TSWPDrawableAttachment *)v68 isPartitioned])
          {
            uint64_t v74 = 0;
          }
          else
          {
            uint64_t v74 = TSWPLayoutChore::validatedLayoutForInlineAttachment(*((id **)this + 1), v68, (id *)v132, theDict);
          }
          uint64_t v75 = +[TSWPTypesetterAttachmentMap mapWithAttachment:layout:pageNumber:pageCount:footnoteMarkProvider:styleProvider:colorOverride:](TSWPTypesetterAttachmentMap, "mapWithAttachment:layout:pageNumber:pageCount:footnoteMarkProvider:styleProvider:colorOverride:", v68, v74, [*((id *)v132 + 13) pageNumber], *((void *)v132 + 82), *((void *)v132 + 76), objc_msgSend(*((id *)v132 + 13), "styleProvider"), v124);
          BOOL v76 = [(TSWPDrawableAttachment *)v68 isDrawable];
          uint64_t v77 = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
          CFRelease(theDict);
          CTRunDelegateRef v78 = CTRunDelegateCreate(&gRunDelegateCallBacks, v75);
          CFDictionarySetValue(v77, v115, v78);
          CFDictionarySetValue(v77, kTSWPAttachmentMap, v75);
          if (value) {
            CFDictionarySetValue(v77, key, value);
          }
          CFRelease(v78);
          v119 |= !v76;
          int v73 = 1;
          NSUInteger v137 = 1;
          theDict = v77;
          goto LABEL_153;
        }
LABEL_152:
        uint64_t v79 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v80 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
        [v79 handleFailureInFunction:v80, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 552, @"We have an attachment character, but no attachment" file lineNumber description];
        int v73 = 0;
LABEL_153:
        char v50 = v132;
        goto LABEL_154;
      }
      if (v67 == 14)
      {
        uint64_t v68 = (TSWPDrawableAttachment *)[*((id *)this + 8) footnoteReferenceAtCharIndex:v30];
        if (v68)
        {
          *(_WORD *)(*((void *)this + 10) + 2 * v30) = 160;
          if (TSWPPlaceholderFont(void)::onceToken != -1) {
            dispatch_once(&TSWPPlaceholderFont(void)::onceToken, &__block_literal_global_77);
          }
          LODWORD(v116) = v116 + 1;
          value = (void *)TSWPPlaceholderFont(void)::placeholderFont;
          goto LABEL_145;
        }
        goto LABEL_152;
      }
    }
    if (v137 < 2)
    {
LABEL_141:
      int v73 = 0;
    }
    else
    {
      unsigned int v69 = 2;
      uint64_t v70 = 1;
      while (1)
      {
        int v71 = *(unsigned __int16 *)(*((void *)this + 10) + 2 * (v70 + v136));
        if (v71 == 65532 || v71 == 14) {
          break;
        }
        uint64_t v70 = v69;
        BOOL v53 = v137 > v69++;
        if (!v53) {
          goto LABEL_141;
        }
      }
      int v73 = 0;
      NSUInteger v137 = v70;
    }
LABEL_154:
    unsigned int v81 = *((_DWORD *)this + 28);
    if (v131 >= v81)
    {
      unsigned int v82 = 2 * v81;
      *((_DWORD *)this + 28) = v82;
      *((void *)this + 16) = malloc_type_realloc(*((void **)this + 16), 8 * v82, 0x100004000313F17uLL);
      *((void *)this + 15) = malloc_type_realloc(*((void **)this + 15), 104 * *((unsigned int *)this + 28), 0x10E0040261DCC7AuLL);
      char v50 = v132;
    }
    uint64_t v83 = (void *)TSWPResolvePropertyForStyles(v38, *((void *)v50 + 12), 40, 0);
    if (v83)
    {
      if ([v83 isEnabled]) {
        int v84 = v73 | 4;
      }
      else {
        int v84 = v73;
      }
    }
    else
    {
      int v84 = v73;
    }
    CFRetain(cf);
    uint64_t v85 = *((void *)this + 15);
    *(void *)(*((void *)this + 16) + 8 * v131) = v137;
    uint64_t v86 = v85 + 104 * v131;
    *(void *)uint64_t v86 = v30;
    *(void *)(v86 + 16) = v38;
    *(void *)(v86 + 24) = cf;
    *(void *)(v86 + 32) = theDict;
    *(_DWORD *)(v86 + 8) = v84;
    TSWPFontHeightInfoForFont((const __CTFont *)cf, v135);
    uint64_t v87 = *((void *)this + 15) + 104 * v131;
    long long v88 = v135[0];
    long long v89 = v135[1];
    long long v90 = v135[2];
    *(_OWORD *)(v87 + 88) = v135[3];
    *(_OWORD *)(v87 + 72) = v90;
    *(_OWORD *)(v87 + 56) = v89;
    *(_OWORD *)(v87 + 40) = v88;
    ++v131;
    if (!*(void *)(*((void *)this + 29) + 64))
    {
      int v93 = TSWPResolveIntPropertyForStyles(v38, *((void *)v132 + 12), 21, 0);
      int v94 = TSWPResolveIntPropertyForStyles(v38, *((void *)v132 + 12), 48, 0);
      v95.NSUInteger length = v137;
      switch(v93)
      {
        case 3:
          v95.CFIndex location = v30;
          TSWPCoreTextTypesetter::pChangeTextToTitledForRange(this, v95);
          break;
        case 2:
          if (v137) {
            char v96 = v73;
          }
          else {
            char v96 = 1;
          }
          if ((v96 & 1) == 0)
          {
            v95.CFIndex location = v30;
            unsigned int v131 = TSWPCoreTextTypesetter::pChangeToSmallCapsForRange(this, v95, v131, v94 != 0);
          }
          break;
        case 1:
          v95.CFIndex location = v30;
          TSWPCoreTextTypesetter::pChangeTextToUppercaseForRange(this, v95);
          break;
      }
    }
    NSUInteger v30 = v137 + v136;
    if (v137 + v136 > v130)
    {
      v91 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v92 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
      objc_msgSend(v91, "handleFailureInFunction:file:lineNumber:description:", v92, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 679, @"Bad curCharIndex");
    }
  }
  while (v30 < v130);
  *((_DWORD *)this + 27) = v131;
  unsigned int v97 = *((_DWORD *)v132 + 97);
  uint64_t v98 = *((unsigned __int8 *)v132 + 333);
  if (!v113)
  {
    TSWPParagraphTypesetter::createAttributedString(*((TSWPParagraphTypesetter **)this + 29));
    uint64_t v99 = *((void *)this + 29);
    if (*(void *)(v99 + 64))
    {
      unint64_t v100 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v101 = [NSString stringWithUTF8String:"CFMutableAttributedStringRef TSWPParagraphTypesetter::mutableAttributedString() const"];
      objc_msgSend(v100, "handleFailureInFunction:file:lineNumber:description:", v101, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.h"), 256, @"expected nil value for '%s'", "_ctTypesetter");
    }
    v102 = *(__CFAttributedString **)(v99 + 56);
    if (*((_DWORD *)this + 27))
    {
      uint64_t v103 = 0;
      unint64_t v104 = 0;
      do
      {
        uint64_t v105 = *((void *)this + 15) + v103;
        v158.CFIndex location = *(void *)v105;
        v158.NSUInteger length = *(void *)(*((void *)this + 16) + 8 * v104);
        CFAttributedStringSetAttributes(v102, v158, *(CFDictionaryRef *)(v105 + 32), 0);
        ++v104;
        v103 += 104;
      }
      while (v104 < *((unsigned int *)this + 27));
    }
    if (*((unsigned char *)this + 30)) {
      ApplyVerticalFormsToAttributedString(v102, *((const unsigned __int16 **)this + 10));
    }
    TSWPParagraphTypesetter::createCTTypesetter(*((TSWPParagraphTypesetter **)this + 29));
    uint64_t v106 = (void *)*((void *)this + 28);
    if (v106) {
      BOOL v107 = v121 == 100;
    }
    else {
      BOOL v107 = 0;
    }
    if (v107
      && (!*((void *)this + 40) || *((double *)this + 38) == 1.0 && (*((unsigned char *)this + 296) & 1) == 0)
      && (!*((void *)this + 44) || (*((unsigned char *)this + 336) & 1) == 0)
      && !((*((_DWORD *)this + 6) != 0) | v119 & 1)
      && *(void *)(*((void *)this + 29) + 88) == *(void *)(*((void *)this + 29) + 80)
      && *((void *)v132 + 2) == 0x7FFFFFFFFFFFFFFFLL)
    {
      int v108 = (std::__shared_weak_count *)*((void *)this + 30);
      uint64_t v133 = *((void *)this + 29);
      v134 = v108;
      if (v108) {
        atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v106 addTypesetterForParagraphIdentifier:a5 typesetter:&v133];
      if (v134) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v134);
      }
    }
  }
  if (v97 == 4) {
    uint64_t v109 = v98;
  }
  else {
    uint64_t v109 = v97;
  }
  *((void *)this + 35) = a3;
  return ((unint64_t)(v116 != 0) << 48) | ((unint64_t)(HIDWORD(v116) != 0) << 40) | (v98 << 32) | v109;
}

void sub_2234D8608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a39);
  }
  _Unwind_Resume(exception_object);
}

double TSWPFontHeightInfoForFont@<D0>(const __CTFont *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = +[TSWPFontHeightCache sharedCache];
  if (v4)
  {
    [v4 fontHeightInfoForFont:a1];
  }
  else
  {
    double result = 0.0;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_2234D877C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSWPResolvePropertyForStyles(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (!a2) {
    return 0;
  }
  unint64_t v8 = 0;
  unsigned int v9 = 1;
  while (1)
  {
    long long v10 = *(void **)(a1 + 8 * v8);
    if (v10)
    {
      uint64_t v11 = [v10 boxedValueForProperty:a3];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = [MEMORY[0x263EFF9D0] null];
        if (v12 != v13 || (a4 & 1) != 0) {
          break;
        }
      }
    }
    unint64_t v8 = v9++;
    if (v8 >= a2) {
      return 0;
    }
  }
  if (v12 == v13) {
    return 0;
  }
  else {
    return v12;
  }
}

double *String(size_t *a1, unsigned __int16 a2)
{
  double result = (double *)p_TSSPropertyStoreSearch(a1, a2);
  if (result)
  {
    return (double *)String(result, v3);
  }
  return result;
}

uint64_t TSWPResolveIntPropertyForStyles(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = 0;
  v11[2] = *MEMORY[0x263EF8340];
  v11[0] = a1;
  v11[1] = a2;
  char v7 = 1;
  do
  {
    unint64_t v8 = (void *)v11[v6];
    if (v8) {
      LODWORD(result) = [v8 intValueForProperty:a3];
    }
    else {
      LODWORD(result) = 0x80000000;
    }
    char v10 = v7 & (result == 0x80000000);
    uint64_t v6 = 1;
    char v7 = 0;
  }
  while ((v10 & 1) != 0);
  if (result == 0x80000000) {
    return a4;
  }
  else {
    return result;
  }
}

uint64_t String(double *a1, double a2)
{
  if (!a1)
  {
    double v3 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"id TSSPropertyEntryGetBoxedObjectValue(const TSSPropertyEntry *)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 156, @"invalid nil value for '%s'", "entry");
  }
  switch(*((unsigned char *)a1 + 10))
  {
    case 0:
      uint64_t result = *(void *)a1;
      if (!*(void *)a1) {
        goto LABEL_12;
      }
      break;
    case 1:
      uint64_t result = [NSNumber numberWithInt:*(unsigned int *)a1];
      if (!result) {
        goto LABEL_12;
      }
      break;
    case 2:
      LODWORD(a2) = *(_DWORD *)a1;
      uint64_t result = [NSNumber numberWithFloat:a2];
      if (!result) {
        goto LABEL_12;
      }
      break;
    case 3:
      uint64_t result = [NSNumber numberWithDouble:*a1];
      if (!result) {
        goto LABEL_12;
      }
      break;
    default:
      uint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v7 = [NSString stringWithUTF8String:"id TSSPropertyEntryGetBoxedObjectValue(const TSSPropertyEntry *)"];
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 176, @"Unexpected entry type");
LABEL_12:
      unint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v9 = [NSString stringWithUTF8String:"id TSSPropertyEntryGetBoxedObjectValue(const TSSPropertyEntry *)"];
      [v8 handleFailureInFunction:v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 180, @"Undefined value in entry for property %d %@", *((unsigned __int16 *)a1 + 4), String(*((unsigned __int16 *)a1 + 4)) file lineNumber description];
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_2234D92D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSWPResolvePropertyForStyles(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5[2] = *MEMORY[0x263EF8340];
  v5[0] = a1;
  v5[1] = a2;
  return TSWPResolvePropertyForStyles((uint64_t)v5, 2uLL, a3, a4);
}

uint64_t TSWPAttributeArray::appliesToRange(TSWPAttributeArray *this)
{
  return 1;
}

void sub_2234D9CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  TSWPAttributeEnumerator::~TSWPAttributeEnumerator((TSWPAttributeEnumerator *)va);
  _Unwind_Resume(a1);
}

void std::vector<_TSWPCharIndexAndAffinity>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    char v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      char v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void TSWPLayoutChore::pSetupStateForDropCap(id *this, id *a2)
{
  objc_opt_class();
  [this[22] objectForProperty:109];
  uint64_t v4 = TSUDynamicCast();
  TSWPDropCapLayoutState::TSWPDropCapLayoutState(v6, v4, objc_msgSend(this[1], "textSourceForLayoutInRange:", this[20], this[21]));
  TSWPDropCapLayoutState::operator=((uint64_t)a2, (uint64_t)v6);
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState((TSWPDropCapLayoutState *)v6);
  if (this[20] < this[10]
    || (unint64_t v5 = (unint64_t)this[21], v5 <= [*a2 charCount])
    || [this[33] effectiveTypeForLevel:this[34]])
  {
    TSWPDropCapLayoutState::clear(a2);
  }
}

void sub_2234DA364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState((TSWPDropCapLayoutState *)va);
  _Unwind_Resume(a1);
}

void TSWPDropCapLayoutState::~TSWPDropCapLayoutState(id *this)
{
  *this = 0;
  uint64_t v2 = (std::__shared_weak_count *)this[32];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  this[1] = 0;
}

void sub_2234DA3C0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }

  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t TSWPDropCapLayoutState::operator=(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2)
  {

    *(void *)a1 = *(id *)a2;
  }
  TSWPDropCapCTState::operator=(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  long long v7 = *(_OWORD *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  long long v10 = *(_OWORD *)(a2 + 192);
  long long v11 = *(_OWORD *)(a2 + 208);
  long long v12 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 192) = v10;
  uint64_t v14 = *(void *)(a2 + 248);
  uint64_t v13 = *(void *)(a2 + 256);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = v14;
  *(void *)(a1 + 256) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  }
  return a1;
}

uint64_t TSWPDropCapCTState::operator=(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2)
  {

    *(void *)a1 = *(id *)a2;
  }
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

void TSWPLayoutChore::pSetupStateForLineStyling(id *this, id *a2)
{
  objc_opt_class();
  [this[22] objectForProperty:111];
  uint64_t v4 = TSUDynamicCast();
  TSWPLineStylingLayoutState::TSWPLineStylingLayoutState(v5, v4, objc_msgSend(this[1], "textSourceForLayoutInRange:", this[20], this[21]));
  TSWPLineStylingLayoutState::operator=((uint64_t)a2, (uint64_t)v5);
  TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState((TSWPLineStylingLayoutState *)v5);
  if (this[20] < this[10] || [this[33] effectiveTypeForLevel:this[34]]) {
    TSWPLineStylingLayoutState::clear(a2);
  }
}

void sub_2234DA5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState((TSWPLineStylingLayoutState *)va);
  _Unwind_Resume(a1);
}

void TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState(id *this)
{
  *this = 0;
  this[1] = 0;
}

void sub_2234DA770(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t TSWPLineStylingLayoutState::TSWPLineStylingLayoutState(uint64_t a1, void *a2, void *a3)
{
  TSWPLineStylingCTState::TSWPLineStylingCTState(a1 + 8, a2, a3);
  *(void *)a1 = a2;
  if (a2) {
    uint64_t v5 = [a2 lineCount];
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) &= ~1u;
  return a1;
}

void sub_2234DA7F4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t TSWPDropCapLayoutState::TSWPDropCapLayoutState(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = xmmword_223837AD0;
  *(void *)(a1 + 232) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 240) &= 0xE0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  TSWPDropCapLayoutState::updateSpacing((TSWPDropCapLayoutState *)a1, 0);
  TSWPDropCapLayoutState::validate((id *)a1);
  return a1;
}

void sub_2234DA8A8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }

  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void TSWPDropCapLayoutState::clear(id *this)
{
  *this = 0;
  this[1] = 0;
  *((unsigned char *)this + 16) &= ~1u;
  *((_OWORD *)this + 2) = xmmword_223837AD0;
  this[3] = (id)0x3FF0000000000000;
  this[7] = 0;
  this[8] = 0;
  this[9] = (id)0x7FFFFFFFFFFFFFFFLL;
  this[11] = 0;
  this[12] = 0;
  *((unsigned char *)this + 80) = 1;
  this[23] = 0;
  this[25] = 0;
  this[26] = 0;
  *((_OWORD *)this + 14) = xmmword_22383ACF0;
  *((unsigned char *)this + 240) &= 0xE0u;
  *((_DWORD *)this + 26) = 0;
  this[20] = 0;
  this[21] = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  uint64_t v2 = (std::__shared_weak_count *)this[32];
  this[31] = 0;
  this[32] = 0;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

uint64_t TSWPDropCapCTState::TSWPDropCapCTState(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) & 0xFE | objc_msgSend((id)objc_msgSend(v5, "characterStyleOverridePropertyMap"), "containsAnyPropertyInProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  unint64_t v6 = [*(id *)a1 charCount];
  unint64_t v7 = [a3 length];
  uint64_t v8 = objc_msgSend(a3, "charRangeMappedToStorage:", 0, objc_msgSend(a3, "length"));
  if (!v7 || !v6) {
    goto LABEL_13;
  }
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  unint64_t v11 = 1;
  do
  {
    uint64_t v12 = v10 + 1;
    if ([a3 characterAtIndex:v11 - 1] == 65532)
    {
      uint64_t v13 = (void *)[a3 attachmentAtCharIndex:v11 - 1];
      if ([v13 isDrawable])
      {
        unsigned int v14 = [v13 isAnchored];
        if (v14) {
          uint64_t v12 = v10;
        }
        v6 += v14;
      }
    }
    uint64_t v10 = v12;
    if (v11 >= v7) {
      break;
    }
  }
  while (v11++ < v6);
  if (!v12)
  {
LABEL_13:
    unint64_t v6 = 0;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  return a1;
}

uint64_t TSWPLineStylingCTState::TSWPLineStylingCTState(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) & 0xFE | objc_msgSend((id)objc_msgSend(a2, "overrideCharacterStylePropertyMap"), "containsAnyPropertyInProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  char v6 = [a2 options];
  uint64_t v7 = [a3 length];
  uint64_t v8 = objc_msgSend(a3, "charRangeMappedToStorage:", 0, objc_msgSend(a3, "length"));
  if (!a2 || !v7) {
    goto LABEL_19;
  }
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    unint64_t v12 = v11++;
    uint64_t v13 = [a3 characterAtIndex:v10];
    uint64_t v14 = v13;
    if (v6 & 1) == 0 && v11 <= 1 && (IsWhitespaceCharacter(v13))
    {
      unint64_t v11 = v12;
      goto LABEL_15;
    }
    if ((v6 & 1) == 0 && v14 == 65532)
    {
      uint64_t v15 = (void *)[a3 attachmentAtCharIndex:v10];
      if ([v15 isDrawable] && objc_msgSend(v15, "isAnchored")) {
        unint64_t v11 = v12;
      }
      goto LABEL_15;
    }
    if (IsParagraphBreakingCharacter(v14)) {
      break;
    }
LABEL_15:
    if (v7 == ++v10)
    {
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = v10 + 1;
  if (v12)
  {
LABEL_17:
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v7;
    uint64_t v16 = v7 + v9;
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v16 = 0;
  *(_OWORD *)(a1 + 16) = xmmword_223837AD0;
LABEL_20:
  *(void *)(a1 + 32) = v16;
  return a1;
}

void TSWPDropCapLayoutState::validate(id *this)
{
  if ((unint64_t)this[7] < 2 || ![*this charCount] || this[8] >= this[7])
  {
    TSWPDropCapLayoutState::clear(this);
  }
}

void TSWPDropCapLayoutState::updateSpacing(TSWPDropCapLayoutState *this, unint64_t a2)
{
  if (objc_msgSend((id)objc_msgSend(*(id *)this, "spacings"), "count") <= a2)
  {
    *((void *)this + 6) = 0x7FFFFFFFFFFFFFFFLL;
    TSWPDropCapLayoutState::clear((id *)this);
  }
  else
  {
    uint64_t v4 = objc_msgSend((id)objc_msgSend(*(id *)this, "spacings"), "objectAtIndexedSubscript:", a2);
    *((void *)this + 6) = a2;
    *((void *)this + 7) = [v4 lineCount];
    *((void *)this + 8) = [v4 elevatedLineCount];
    *((void *)this + 9) = [v4 followingLineCount];
    *((unsigned char *)this + 80) = [v4 allowSpanParagraphs];
    [v4 padding];
    *((void *)this + 11) = v5;
    *((void *)this + 12) = [*(id *)this computedFlagsForSpacing:v4];
    *((_DWORD *)this + 26) = 0;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((void *)this + 20) = 0;
  }
}

uint64_t TSWPLineStylingLayoutState::operator=(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2)
  {

    *(void *)a1 = *(id *)a2;
  }
  TSWPLineStylingCTState::operator=(a1 + 8, a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t TSWPLineStylingCTState::operator=(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2)
  {

    *(void *)a1 = *(id *)a2;
  }
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

BOOL String(size_t *a1, unsigned __int16 a2)
{
  return p_TSSPropertyStoreSearch(a1, a2) != 0;
}

void TSWPLineStylingLayoutState::clear(id *this)
{
  *this = 0;
  this[1] = 0;
  *((unsigned char *)this + 16) &= ~1u;
  this[3] = (id)0x7FFFFFFFFFFFFFFFLL;
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  *((unsigned char *)this + 64) &= ~1u;
}

void TSWPParagraphTypesetter::createAttributedString(TSWPParagraphTypesetter *this)
{
  if (!*((void *)this + 7)
    || (uint64_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler],
        uint64_t v3 = [NSString stringWithUTF8String:"void TSWPParagraphTypesetter::createAttributedString()"], objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm"), 96, @"expected nil value for '%s'", "_attributedString"), !*((void *)this + 7)))
  {
    long long v4 = (const UniChar *)*((void *)this + 4);
    CFIndex v5 = (uint64_t)(*((void *)this + 5) - (void)v4) >> 1;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v7 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v4, v5, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    Mutable = CFAttributedStringCreateMutable(v6, v5);
    *((void *)this + 7) = Mutable;
    v10.CFIndex location = 0;
    v10.NSUInteger length = 0;
    CFAttributedStringReplaceString(Mutable, v10, v7);
    CFRelease(v7);
  }
}

void std::shared_ptr<TSWPParagraphTypesetter>::shared_ptr[abi:ne180100]<TSWPParagraphTypesetter,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2234DB158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<TSWPParagraphTypesetter>::reset[abi:ne180100]((TSWPParagraphTypesetter **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t TSWPParagraphEnumerator::coreTextPropertiesFilterDelegate(TSWPParagraphEnumerator *this)
{
  if (!this->var1 || (objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  id var1 = this->var1;
  unint64_t var2 = this->var2;

  return [var1 coreTextPropertiesFilterDelegateAtParIndex:var2];
}

uint64_t TSWPParagraphEnumerator::paragraphLanguage(TSWPParagraphEnumerator *this, uint64_t a2, uint64_t a3)
{
  return [this->var0 languageAtParIndex:this->var2 useStringTokenizer:a2 useCreationLanguage:a3];
}

double TSWPDefaultLineHeightForFont(const __CTFont *a1)
{
  double Ascent = CTFontGetAscent(a1);
  double Descent = CTFontGetDescent(a1);
  double Leading = CTFontGetLeading(a1);
  BoundingBoCGFloat x = CTFontGetBoundingBox(a1);
  CGFloat x = BoundingBox.origin.x;
  CGFloat y = BoundingBox.origin.y;
  CGFloat width = BoundingBox.size.width;
  CGFloat height = BoundingBox.size.height;
  double v9 = floor(Leading + 0.5);
  if (Leading <= 0.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = v9;
  }
  double v19 = floor(Ascent + 0.5) + floor(Descent + 0.5);
  CGFloat v11 = y;
  if (CGRectGetMaxY(BoundingBox) <= Ascent)
  {
    v23.origin.CGFloat x = x;
    v23.origin.CGFloat y = y;
    v23.size.CGFloat width = width;
    v23.size.CGFloat height = height;
    BOOL v12 = CGRectGetMinY(v23) < -(Descent + Leading);
  }
  else
  {
    BOOL v12 = 1;
  }
  double v13 = v19 + v10;
  CGGlyph glyphs = 0;
  UniChar characters = 192;
  if (v12 && v10 == 0.0 && CTFontGetGlyphsForCharacters(a1, &characters, &glyphs, 1))
  {
    CGRect BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs(a1, kCTFontOrientationDefault, &glyphs, 0, 1);
    CGFloat v14 = BoundingRectsForGlyphs.origin.x;
    CGFloat v15 = BoundingRectsForGlyphs.origin.y;
    CGFloat v16 = BoundingRectsForGlyphs.size.width;
    CGFloat v17 = BoundingRectsForGlyphs.size.height;
    if (CGRectGetMaxY(BoundingRectsForGlyphs) > Ascent
      || (v25.origin.CGFloat x = v14,
          v25.origin.CGFloat y = v15,
          v25.size.CGFloat width = v16,
          v25.size.CGFloat height = v17,
          CGRectGetMinY(v25) < -Descent))
    {
      double v13 = v13 + floor(v19 * 0.200000003 + 0.5);
    }
  }
  return fmax(v13, 1.0);
}

void TSWPCoreTextTypesetter::createLineRefsForLineFragment(uint64_t a1, TSWPLineFragment *this, uint64_t a3, int a4, int a5)
{
  uint64_t v366 = *MEMORY[0x263EF8340];
  double v350 = 0.0;
  double v349 = 0.0;
  TSWPLineFragment::getTypesetterPos(this, &v350, &v349);
  if (v349 - v350 <= 32000.0) {
    double v5 = v349 - v350;
  }
  else {
    double v5 = 32000.0;
  }
  if ((~*((_DWORD *)this + 6) & 0x800002) == 0)
  {
    CFAllocatorRef v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2438, @"Hyphenation and line truncation should not occur at the same time");
  }
  if (TSWPLineFragment::isHyphenated(this))
  {
    attributes.double width = 0.0;
    v317[0] = 0;
    TSWPLineFragment::getHyphenInfo(this, (const __CFDictionary **)&attributes, v317);
    if (!v317[0])
    {
      v317[0] = 45;
      CFArrayRef GlyphRuns = CTLineGetGlyphRuns(0);
      CFArrayRef v9 = GlyphRuns;
      if (GlyphRuns)
      {
        CFIndex Count = CFArrayGetCount(GlyphRuns);
        ValueAtIndedouble x = (const __CTRun *)CFArrayGetValueAtIndex(v9, Count - 1);
        *(void *)&attributes.double width = CTRunGetAttributes(ValueAtIndex);
      }
    }
    if ((v317[0] - 0x10000) >> 20)
    {
      CFIndex v13 = 1;
      LOWORD(v12) = v317[0];
    }
    else
    {
      unsigned int v12 = ((v317[0] + 67043328) >> 10) - 10240;
      chars[1] = v317[0] & 0x3FF | 0xDC00;
      CFIndex v13 = 2;
    }
    chars[0] = v12;
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v16 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], chars, v13);
    CFAttributedStringRef v17 = CFAttributedStringCreate(v15, v16, *(CFDictionaryRef *)&attributes.width);
    line = CTLineCreateWithAttributedString(v17);
    double TypographicBounds = CTLineGetTypographicBounds(line, 0, 0, 0);
    CFRelease(v17);
    CFRelease(v16);
  }
  else
  {
    line = 0;
    double TypographicBounds = 0.0;
  }
  if (TSWPParagraphEnumerator::paragraphTextRange((TSWPParagraphEnumerator *)(a3 + 24)) != *((void *)this + 2))
  {
    char v18 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2472, @"line fragment isn't from the current paragraph");
  }
  unint64_t v20 = objc_msgSend(*(id *)(a1 + 64), "charRangeMappedFromStorage:", *(void *)this, *((void *)this + 1));
  uint64_t v22 = v21;
  if (v21 < 0)
  {
    CGRect v23 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v24 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    [v23 handleFailureInFunction:v24, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2474, @"Bad range length, goodbye cruel world." file lineNumber description];
  }
  unint64_t v25 = v20 + v22;
  if (*(_WORD *)(*(void *)(a1 + 232) + 72)) {
    BOOL v26 = v20 + v22 == *(void *)(a1 + 56);
  }
  else {
    BOOL v26 = 0;
  }
  charIndedouble x = (TSWPLineFragment *)(v20 + v22);
  if (v25) {
    BOOL v27 = *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v25 - 2) == 8232;
  }
  else {
    BOOL v27 = 0;
  }
  BOOL v28 = *(_DWORD *)(a3 + 388) == 3 && v25 < *(void *)(a1 + 56) || TSWPLineFragment::getOikomiSquish(this);
  unsigned int v277 = *((_DWORD *)this + 6);
  uint64_t v29 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
  NSUInteger v30 = (const __CTLine *)MEMORY[0x223CB8500](v29, v20, v22, v350);
  if (!CTLineGetGlyphCount(v30))
  {
    double v31 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v32 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2485, @"bad lineGlyphCount");
  }
  *((_DWORD *)this + 6) = *((_DWORD *)this + 6) & 0xFBFFFFFF | ((objc_msgSend((id)TSWPParagraphEnumerator::paragraphStyle((TSWPParagraphEnumerator *)(a3 + 24), 0), "intValueForProperty:", 110) != 0) << 26);
  uint64_t v345 = 0;
  v346 = &v345;
  uint64_t v347 = 0x2020000000;
  char v348 = 1;
  uint64_t v341 = 0;
  v342 = &v341;
  uint64_t v343 = 0x2020000000;
  uint64_t v344 = 0;
  v336[0] = MEMORY[0x263EF8330];
  v336[1] = 3221225472;
  v337 = ___ZNK22TSWPCoreTextTypesetter29createLineRefsForLineFragmentEP16TSWPLineFragmentPK15TSWPLayoutStateb15TSWPLayoutFlags_block_invoke;
  v338 = &unk_2646B30C0;
  v339 = &v345;
  v340 = &v341;
  if (objc_msgSend(*(id *)(*(void *)(a1 + 232) + 56), "hasColorGlyphsInRange:", v20, v22))
  {
LABEL_32:
    *((unsigned char *)v346 + 24) = 0;
    goto LABEL_39;
  }
  if (*(unsigned char *)(a3 + 512))
  {
    long long v33 = *(void **)(a3 + 184);
    if (v33)
    {
      if (*(unsigned char *)(a3 + 332))
      {
        int v34 = [v33 labelTypeForLevel:*(void *)(a3 + 192)];
        if ((v34 - 2) < 2)
        {
          CGFloat v35 = *(double *)(a3 + 96);
          attributes.double width = *(CGFloat *)(a3 + 184);
          attributes.CGFloat height = v35;
          uint64_t v36 = objc_msgSend((id)TSWPResolvePropertyForStyles((uint64_t)&attributes, 2uLL, 18, 0), "CGColor");
          v337((uint64_t)v336, (CGColorRef)v36);
          goto LABEL_39;
        }
        if (v34 != 1) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
    }
  }
LABEL_39:
  double v37 = 0.0;
  if ((*((unsigned char *)this + 26) & 0x80) == 0) {
    goto LABEL_44;
  }
  CFDictionaryRef v38 = *(const __CFDictionary **)(*(void *)(a1 + 120)
                                 + 104
                                 * TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex((TSWPCoreTextTypesetter *)a1, [*(id *)(a1 + 64) charIndexMappedFromStorage:*((void *)this + 1) + *(void *)this])+ 32);
  CFIndex v39 = CFDictionaryGetCount(v38);
  CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  MutableCopCGFloat y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v39 + 1, v38);
  CFDictionarySetValue(MutableCopy, @"__TSWPTruncationKey", MEMORY[0x263EFFA88]);
  CFAttributedStringRef v42 = CFAttributedStringCreate(v40, @"…", MutableCopy);
  CFRelease(MutableCopy);
  truncationToken = CTLineCreateWithAttributedString(v42);
  CFRelease(v42);
  if (truncationToken)
  {
    double v37 = CTLineGetTypographicBounds(truncationToken, 0, 0, 0);
    double v43 = CTLineGetTypographicBounds(v30, 0, 0, 0);
    double TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(v30);
    double v45 = *(double *)(a3 + 336);
    if (v37 + v43 + v45 - TrailingWhitespaceWidth <= v5)
    {
      char v49 = 1;
    }
    else
    {
      double v46 = v43 - (TrailingWhitespaceWidth + v37 + v45);
      if (v37 <= v46)
      {
        Truncateddouble Line = CTLineCreateTruncatedLine(v30, v46, kCTLineTruncationEnd, truncationToken);
        CFRelease(truncationToken);
        truncationToken = 0;
        double v37 = 0.0;
      }
      else
      {
        CFAttributedStringRef v47 = CFAttributedStringCreate(v40, &stru_26D688A48, v38);
        Truncateddouble Line = CTLineCreateWithAttributedString(v47);
        CFRelease(v47);
      }
      CFRelease(v30);
      char v49 = 1;
      NSUInteger v30 = TruncatedLine;
    }
  }
  else
  {
LABEL_44:
    char v49 = 0;
    truncationToken = 0;
  }
  if (v28 && !v26 && !v27)
  {
    double v5 = v5 - (TypographicBounds + v37);
    Justifieddouble Line = CTLineCreateJustifiedLine(v30, 1.0, v5);
    if (JustifiedLine)
    {
      CFRelease(v30);
      *((_DWORD *)this + 6) &= ~0x8000u;
      NSUInteger v30 = JustifiedLine;
    }
    else
    {
      *((_DWORD *)this + 6) |= 0x8000u;
      TSWPLineFragment::getOikomiSquish(this);
    }
  }
  int v51 = *(_DWORD *)(a3 + 388);
  double v52 = TypographicBounds + v37;
  double v53 = v5 - (TypographicBounds + v37);
  if ((v277 & 0x1000) != 0) {
    double v54 = 1.0;
  }
  else {
    double v54 = 0.0;
  }
  if ((v277 & 0x1000) != 0) {
    double v55 = TypographicBounds;
  }
  else {
    double v55 = 0.0;
  }
  double v56 = v5 - v55;
  double v57 = 0.5;
  if (v51 == 2)
  {
    double v58 = v5 - (TypographicBounds + v37);
  }
  else
  {
    double v57 = 0.0;
    double v58 = v5;
  }
  if (v51 != 3)
  {
    double v54 = v57;
    double v56 = v58;
  }
  if (v51 == 1) {
    double v59 = 1.0;
  }
  else {
    double v59 = v54;
  }
  if (v51 != 1) {
    double v53 = v56;
  }
  if (a4) {
    double v60 = 0.0;
  }
  else {
    double v60 = v53;
  }
  double PenOffsetForFlush = CTLineGetPenOffsetForFlush(v30, v59, v60);
  if (v49)
  {
    uint64_t v62 = (id *)a3;
    if ((v277 & 0x1000) != 0) {
      double PenOffsetForFlush = PenOffsetForFlush + *(double *)(a3 + 336) * (1.0 - v59);
    }
    else {
      double PenOffsetForFlush = PenOffsetForFlush - *(double *)(a3 + 336) * v59;
    }
  }
  else
  {
    uint64_t v62 = (id *)a3;
  }
  double v63 = TSWPCoreTextTypesetter::pAdditionalOffsetForLineFragment(a1, (uint64_t)v62, this, a5);
  double v65 = TSWPCoreTextTypesetter::pLineRefStartForLineFragment(v64, v62, this, v350);
  CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(v30, 0);
  double x = BoundsWithOptions.origin.x;
  double width = BoundsWithOptions.size.width;
  double v68 = PenOffsetForFlush + v63 + v65;
  *((double *)this + 27) = v68 + CTLineGetTypographicBounds(v30, 0, 0, 0);
  if ((unint64_t)charIndex <= v20)
  {
    int v71 = 0;
    if (!v30) {
      goto LABEL_417;
    }
    goto LABEL_81;
  }
  uint64_t v69 = [*(id *)(a1 + 64) characterAtIndex:(char *)charIndex - 1];
  char v70 = IsParagraphBreakingCharacter(v69);
  int v71 = v69;
  char v72 = v70 ^ 1;
  if (v69 == 8232) {
    char v72 = 0;
  }
  if ((v72 & 1) == 0) {
    *((_DWORD *)this + 6) |= 0x800u;
  }
  if (v30)
  {
LABEL_81:
    int v251 = v71;
    if (!*((void *)this + 64)) {
      *((void *)this + 64) = (id)CFAttributedStringGetString(*(CFAttributedStringRef *)(*(void *)(a1 + 232) + 56));
    }
    CTLineRef v331 = v30;
    double v332 = PenOffsetForFlush + v63 + v65;
    uint64_t v333 = 0;
    long long v334 = *MEMORY[0x263F7C7C8];
    int v335 = 0;
    CFRetain(v30);
    v255 = (uint64_t *)((char *)this + 192);
    if (*((void *)this + 25) != *((void *)this + 24))
    {
      int v73 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v74 = [NSString stringWithUTF8String:"void TSWPLineFragment::setLineRef(const TSWPLineRef &)"];
      objc_msgSend(v73, "handleFailureInFunction:file:lineNumber:description:", v74, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.h"), 518, @"Line ref is already set");
    }
    std::vector<TSWPLineRef>::assign((uint64_t)v255, 1uLL, (uint64_t)&v331);
    CFArrayRef v75 = CTLineGetGlyphRuns(v30);
    uint64_t v76 = [(__CFArray *)v75 count];
    double v261 = CTLineGetTrailingWhitespaceWidth(v331);
    CFArrayRef v268 = v75;
    if ((v277 & 0x1000) != 0)
    {
      if (v261 == 0.0
        && v76
        && objc_msgSend(*(id *)(a1 + 64), "characterAtIndex:", objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:", TSWPLineFragment::leftMostCharIndex(this))) == 9)
      {
        uint64_t v77 = (const __CTRun *)[(__CFArray *)v75 objectAtIndex:0];
        v367.CFIndex location = 0;
        v367.NSUInteger length = 1;
        CTRunGetAdvances(v77, v367, &attributes);
        double v261 = attributes.width;
        double v78 = -attributes.width;
      }
      else
      {
        *(void *)&double v78 = (unint64_t)CTLineGetBoundsWithOptions(v30, 1uLL);
      }
      if (iOSIsGreaterThan7(void)::onceToken != -1) {
        dispatch_once(&iOSIsGreaterThan7(void)::onceToken, &__block_literal_global_251);
      }
      double v79 = 0.0;
      if (iOSIsGreaterThan7(void)::result) {
        double v79 = v78;
      }
    }
    else
    {
      double v79 = 0.0;
    }
    double v275 = v79;
    *((double *)this + 65) = v79;
    uint64_t v80 = +[TSWPRenderer invisiblesFont];
    *(void *)&attributes.double width = 0x100000001;
    CGColorRef v353 = 0;
    attributes.CGFloat height = 0.0;
    CFTypeRef cf = v80;
    *(_OWORD *)v355 = 0u;
    *(_OWORD *)v356 = 0u;
    long long v357 = 0u;
    *(_OWORD *)v358 = 0u;
    *(_OWORD *)v359 = 0u;
    long long v360 = 0u;
    *(_OWORD *)v361 = 0u;
    long long v362 = 0u;
    long long v81 = *MEMORY[0x263F00148];
    long long v363 = 0u;
    long long v364 = v81;
    char v365 = 0;
    CGColorRetain(0);
    if (cf) {
      CFRetain(cf);
    }
    *(void *)v317 = 0x100000003;
    CGColorRef v319 = 0;
    uint64_t v318 = 0;
    CFTypeRef v320 = v80;
    long long v321 = 0u;
    long long v322 = 0u;
    long long v323 = 0u;
    long long v324 = 0u;
    long long v325 = 0u;
    long long v326 = 0u;
    long long __p = 0u;
    memset(v328, 0, sizeof(v328));
    long long v329 = *MEMORY[0x263F00148];
    char v330 = 0;
    CGColorRetain(0);
    if (v320) {
      CFRetain(v320);
    }
    long long v315 = 0u;
    long long v316 = 0u;
    long long v313 = 0u;
    long long v314 = 0u;
    CFArrayRef v82 = v268;
    uint64_t v83 = [(__CFArray *)v268 countByEnumeratingWithState:&v313 objects:v351 count:16];
    if (!v83)
    {
      double v271 = INFINITY;
      goto LABEL_361;
    }
    uint64_t v273 = 0;
    uint64_t v259 = v76 - 1;
    double v254 = width + x;
    double v271 = INFINITY;
    uint64_t v266 = *(void *)v314;
    uint64_t v263 = *MEMORY[0x263F03C60];
    uint64_t v258 = *MEMORY[0x263F03CB8];
    uint64_t v257 = *MEMORY[0x263F03CB0];
    uint64_t v260 = *MEMORY[0x263F039A0];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    double v256 = v68;
    while (1)
    {
      uint64_t v274 = 0;
      uint64_t v267 = v83;
      do
      {
        if (*(void *)v314 != v266) {
          objc_enumerationMutation(v82);
        }
        int v84 = *(const __CTRun **)(*((void *)&v313 + 1) + 8 * v274);
        CTRunRef run = v84;
        CFRange StringRange = CTRunGetStringRange(v84);
        GlyphCFIndex Count = CTRunGetGlyphCount(v84);
        CFDictionaryRef v86 = CTRunGetAttributes(v84);
        uint64_t v87 = (TSWPLineFragment *)v86;
        if (*((unsigned char *)v346 + 24))
        {
          uint64_t v88 = [(__CFDictionary *)v86 objectForKey:v263];
          v337((uint64_t)v336, (CGColorRef)v88);
          if (*((unsigned char *)v346 + 24))
          {
            objc_msgSend((id)-[TSWPLineFragment objectForKey:](v87, "objectForKey:", v258), "floatValue");
            if (v89 != 0.0)
            {
              if ([(TSWPLineFragment *)v87 objectForKey:v257]) {
                ((void (*)(void *))v337)(v336);
              }
            }
          }
        }
        int v90 = [*(id *)(a1 + 64) characterAtIndex:StringRange.location];
        *(void *)chars = 0x100000004;
        long long v299 = 0u;
        long long v300 = 0u;
        long long v301 = 0u;
        long long v302 = 0u;
        long long v303 = 0u;
        long long v304 = 0u;
        long long v305 = 0u;
        long long v306 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        uint64_t v309 = 0;
        long long v310 = *MEMORY[0x263F00148];
        char v311 = 0;
        CGColorRetain(0);
        if ((void)v300) {
          CFRetain((CFTypeRef)v300);
        }
        CGSize v297 = (CGSize)*MEMORY[0x263F001B0];
        unsigned __int16 v296 = 0;
        v91 = (NSString *)[(TSWPLineFragment *)v87 objectForKeyedSubscript:@"emphasisMarks"];
        uint64_t v92 = v91;
        if (v91)
        {
          BOOL v283 = 0;
          if ([(NSString *)v91 length] && GlyphCount) {
            BOOL v283 = TSWPCoreTextTypesetter::pSetUpEmphasisMarkAdornments((id *)a1, (const TSWPLayoutState *)a3, (TSWPAdornments *)chars, &run, this, v92, &v296, &v297);
          }
        }
        else
        {
          BOOL v283 = 0;
        }
        if (v90 == 65532 || v90 == 14)
        {
          if (GlyphCount != 1)
          {
            int v93 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
            uint64_t v94 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
            objc_msgSend(v93, "handleFailureInFunction:file:lineNumber:description:", v94, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2783, @"Attachment or footnote spanning multiple characters");
          }
          _NSRange v95 = (TSWPDrawableAttachment *)[*(id *)(a1 + 64) attachmentOrFootnoteAtCharIndex:StringRange.location];
          char v96 = (TSWPLineFragment *)[*(id *)(a1 + 64) charIndexMappedToStorage:StringRange.location];
          objc_opt_class();
          [(id)TSUDynamicCast() drawable];
          objc_opt_class();
          int isKindOfClass = objc_opt_isKindOfClass();
          if (![(TSWPDrawableAttachment *)v95 isDrawable]
            || [(TSWPDrawableAttachment *)v95 isAnchored]
            || [(TSWPDrawableAttachment *)v95 isPartitioned])
          {
            if (([(TSWPDrawableAttachment *)v95 elementKind] & 0x1E0) != 0)
            {
              uint64_t v98 = (void *)[(TSWPLineFragment *)v87 objectForKeyedSubscript:kTSWPAttachmentMap];
              uint64_t v99 = v98;
              if (v98)
              {
                if (![v98 lineRef])
                {
                  unint64_t v100 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
                  uint64_t v101 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                  objc_msgSend(v100, "handleFailureInFunction:file:lineNumber:description:", v101, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2808, @"invalid nil value for '%s'", "attachmentMap.lineRef");
                }
                if ([v99 lineRef])
                {
                  v368.CFIndex location = 0;
                  v368.NSUInteger length = 1;
                  CTRunGetPositions(v84, v368, &buffer.var0);
                  double v102 = TSWPLineFragment::baselineAdjustAtCharIndex(v96, *(void **)(a1 + 16), *(TSWPStorage **)(a3 + 104), 0, [*(id *)(a3 + 104) scaleTextPercent]);
                  buffer.var0.double x = buffer.var0.x + v275 + v332;
                  buffer.var0.CGFloat y = v102 + buffer.var0.y;
                  uint64_t v103 = (const void *)[v99 lineRef];
                  *(void *)&v288.var0.double x = v103;
                  *(CGPoint *)&v288.var0.CGFloat y = buffer.var0;
                  v288.unint64_t var2 = (CGColor *)v96;
                  *(void *)&v288.var3 = 1;
                  v288.var4 = 0;
                  if (v103) {
                    CFRetain(v103);
                  }
                  unint64_t v104 = *((void *)this + 25);
                  if (v104 >= *((void *)this + 26))
                  {
                    uint64_t v105 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v255, (uint64_t)&v288);
                  }
                  else
                  {
                    std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v255, (uint64_t)&v288);
                    uint64_t v105 = v104 + 48;
                  }
                  *((void *)this + 25) = v105;
                  if (objc_msgSend((id)objc_msgSend(v99, "attachment"), "changesWithPageCount")) {
                    *((_DWORD *)this + 6) |= 0x100000u;
                  }
                  if (*(void *)&v288.var0.x) {
                    CFRelease(*(CFTypeRef *)&v288.var0.x);
                  }
                }
              }
              else
              {
                uint64_t v113 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
                uint64_t v114 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                objc_msgSend(v113, "handleFailureInFunction:file:lineNumber:description:", v114, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2806, @"invalid nil value for '%s'", "attachmentMap");
              }
            }
            else if (([(TSWPDrawableAttachment *)v95 elementKind] & 0x10) != 0)
            {
              v369.CFIndex location = 0;
              v369.NSUInteger length = 1;
              CTRunGetPositions(v84, v369, &buffer.var0);
              buffer.var0.double x = v332 + buffer.var0.x;
              objc_opt_class();
              CGFloat v106 = COERCE_DOUBLE(TSUDynamicCast());
              *(CGPoint *)&v288.var0.CGFloat y = buffer.var0;
              v288.var0.double x = v106;
              v288.unint64_t var2 = (CGColor *)StringRange.location;
              if (v106 == 0.0)
              {
                BOOL v107 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
                uint64_t v108 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPUIAttachmentData::TSWPUIAttachmentData(TSWPUIGraphicalAttachment *, CGPoint &, CFIndex)");
                objc_msgSend(v107, "handleFailureInFunction:file:lineNumber:description:", v108, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.h"), 58, @"invalid nil value for '%s'", "_attachment");
                CGFloat v106 = v288.var0.x;
              }
              id v109 = *(id *)&v106;
              unint64_t v110 = *((void *)this + 47);
              if (v110 >= *((void *)this + 48))
              {
                uint64_t v111 = std::vector<TSWPUIAttachmentData>::__push_back_slow_path<TSWPUIAttachmentData const&>((uint64_t *)this + 46, (uint64_t)&v288);
                uint64_t v112 = this;
              }
              else
              {
                std::allocator<TSWPUIAttachmentData>::construct[abi:ne180100]<TSWPUIAttachmentData,TSWPUIAttachmentData const&>((uint64_t)this + 384, *((void *)this + 47), (uint64_t)&v288);
                uint64_t v111 = v110 + 32;
                uint64_t v112 = this;
                *((void *)this + 47) = v110 + 32;
              }
              *((void *)v112 + 47) = v111;
            }
          }
          else
          {
            BOOL v115 = TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v95, 0, 0);
            double v116 = TSWPLineFragment::wpOffsetForCharIndex(this, (unint64_t)v96, 0, a4, 0);
            if (CTRunGetStatus(v84))
            {
              TSWPLineFragment::wpOffsetForInsertionPoint(this, (unint64_t)v96, 0, 1, 0);
              double v116 = v117;
            }
            [v115 setAdjustedInterimPositionX:v116];
          }
        }
        else
        {
          int isKindOfClass = 0;
        }
        int v118 = objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", @"TSWPUnderline"), "integerValue");
        uint64_t v272 = objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", @"TSWPStrikethrough"), "integerValue");
        char v119 = (void *)[(TSWPLineFragment *)v87 objectForKeyedSubscript:@"TSWPTextBackgroundColor"];
        objc_opt_class();
        [(TSWPLineFragment *)v87 objectForKeyedSubscript:@"TSWPTextHighlightAuthorAttribute"];
        v269 = (TSKAnnotationAuthor *)TSUDynamicCast();
        if (GlyphCount)
        {
          std::vector<long>::vector(v295, GlyphCount);
          v370.CFIndex location = 0;
          v370.NSUInteger length = GlyphCount;
          CTRunGetStringIndices(v84, v370, v295[0]);
          std::vector<CGPoint>::vector(v294, GlyphCount);
          v371.CFIndex location = 0;
          v371.NSUInteger length = GlyphCount;
          CTRunGetPositions(v84, v371, v294[0]);
          std::vector<CGSize>::vector(v293, GlyphCount);
          v372.CFIndex location = 0;
          v372.NSUInteger length = GlyphCount;
          CTRunGetAdvances(v84, v372, v293[0]);
          if (*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * *v295[0]) == (unsigned __int16)kTateChuYokoDummySpaceCharacter
            && GlyphCount == 1
            && (long long v120 = *(TSWPParagraphTypesetter **)(a1 + 232)) != 0)
          {
            TateChuYokoLineRefsForCharIndedouble x = (double *)TSWPParagraphTypesetter::findTateChuYokoLineRefsForCharIndex(v120, *v295[0]);
            uint64_t v122 = TateChuYokoLineRefsForCharIndex;
            CGFloat ascent = 0.0;
            CGFloat descent = 0.0;
            CGFloat leading = 0.0;
            if (TateChuYokoLineRefsForCharIndex)
            {
              double v123 = TateChuYokoLineRefsForCharIndex[4];
              CGFloat ascent = TateChuYokoLineRefsForCharIndex[3] * 0.5;
              CGFloat descent = ascent;
              double v124 = v123 + TateChuYokoLineRefsForCharIndex[5] + TateChuYokoLineRefsForCharIndex[6];
              int v282 = 1;
              goto LABEL_158;
            }
          }
          else
          {
            CGFloat ascent = 0.0;
            CGFloat descent = 0.0;
            CGFloat leading = 0.0;
          }
          v373.CFIndex location = 0;
          v373.NSUInteger length = 0;
          double v124 = CTRunGetTypographicBounds(v84, v373, &ascent, &descent, &leading);
          int v282 = 0;
          uint64_t v122 = 0;
LABEL_158:
          CFIndex range = (CFIndex)v122;
          CTRunStatus v125 = (CTRunGetStatus(v84) >> 2) & 1;
          if (!*(unsigned char *)(a1 + 30)) {
            CTRunStatus v125 = 0;
          }
          *(_DWORD *)v280 = v125;
          NSUInteger v126 = *(__CTFont **)(*(void *)(a1 + 120)
                              + 104
                              * TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex((TSWPCoreTextTypesetter *)a1, *v295[0])+ 24);
          uint64_t v127 = [(TSWPLineFragment *)v87 objectForKeyedSubscript:v260];
          font = (const __CTFont *)v127;
          v265 = v126;
          if ((__CTFont *)v127 != v126) {
            *((_DWORD *)this + 6) |= 0x80u;
          }
          if ((v277 & 0x1000) != 0 || v273 != v259)
          {
            double v129 = 0.0;
            if (((v273 == 0) & (v277 >> 12)) != 0) {
              double v130 = v261;
            }
            else {
              double v130 = 0.0;
            }
          }
          else
          {
            double v129 = TSWPCoreTextTypesetter::pCalculateTrailingWhiteSpace((TSWPCoreTextTypesetter *)a1, v261, 0, *(unsigned char *)(a1 + 30), GlyphCount, v294[0], v293[0], v295[0]);
            double v130 = 0.0;
          }
          if (*(_DWORD *)v280)
          {
            LOWORD(buffer.var0.x) = 0;
            LOWORD(buffer.var0.x) = *(_WORD *)(*(void *)(a1 + 80) + 2 * *v295[0]);
            CGGlyph glyphs = 0;
            if (CTFontGetGlyphsForCharacters(font, (const UniChar *)&buffer, &glyphs, 1))
            {
              CTFontGetVerticalTranslationsForGlyphs(font, &glyphs, (CGSize *)&v288, 1);
              PositionForLocalCharIndedouble x = v68 - v294[0]->y + v288.var0.y;
            }
            else
            {
              v132 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
              uint64_t v133 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
              objc_msgSend(v132, "handleFailureInFunction:file:lineNumber:description:", v133, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2908, @"CTFontGetGlyphsForCharacters failed. Using fallback.");
              PositionForLocalCharIndedouble x = TSWPParagraphTypesetter::getPositionForLocalCharIndex(*(TSWPParagraphTypesetter **)(a1 + 232), this, StringRange.location);
            }
          }
          else
          {
            PositionForLocalCharIndedouble x = v275 + v68 + v294[0]->x;
          }
          double v134 = v124 - (v130 + v129);
          if ((*((_DWORD *)this + 6) & 0x800002) != 0)
          {
            double v135 = -0.0;
            if ((TSWPLineFragment *)(LODWORD(StringRange.location) + LODWORD(StringRange.length)) == charIndex) {
              double v135 = v52;
            }
            double v134 = v134 + v135;
          }
          double v136 = v130 + PositionForLocalCharIndex;
          BOOL v138 = v134 <= 0.0 && v272 != -1;
          if ((v138 | isKindOfClass))
          {
            long long v139 = v269;
            if (!v119) {
              goto LABEL_241;
            }
LABEL_236:
            v178 = (CGColor *)[v119 CGColor];
            double v179 = v129 + v134;
            v288.var0.double x = v136;
            v288.var0.CGFloat y = 0.0;
            v288.id var1 = v179;
            v288.unint64_t var2 = v178;
            v288.var7 = 0.0;
            v288.var8 = 0;
            v288.var9 = 0;
            memset(&v288.var3, 0, 20);
            CGColorRetain(v178);
            if (*((double *)this + 8) - v136 < v179) {
              double v179 = *((double *)this + 8) - v136;
            }
            if (v179 > 0.0)
            {
              v180 = (CGColor *)[v119 CGColor];
              buffer.var0.double x = v136;
              buffer.var0.CGFloat y = 0.0;
              buffer.id var1 = v179;
              buffer.unint64_t var2 = v180;
              buffer.var7 = 0.0;
              buffer.var8 = 0;
              buffer.var9 = 0;
              memset(&buffer.var3, 0, 20);
              CGColorRetain(v180);
              id v181 = buffer.var9;
              addAdornmentLine((uint64_t *)this + 40, &buffer);
              CGColorRelease(buffer.var2);
            }
            *((unsigned char *)v346 + 24) = 0;
            CGColorRelease(v178);
          }
          else
          {
            if (v118)
            {
              long long v140 = (CGColor *)objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", @"TSWPUnderlineColor"), "CGColor");
              if (!v140) {
                long long v140 = (CGColor *)[(TSWPLineFragment *)v87 objectForKeyedSubscript:v263];
              }
              v337((uint64_t)v336, v140);
              int v141 = TSWPGetAdornmentLocation(*(void **)(a1 + 96), *(unsigned __int8 *)(a1 + 30), 5);
              if (v141 != 1
                || (v288.id var0 = (CGPoint)*MEMORY[0x263F7C7C8], *(void *)&v288.var0.x != *MEMORY[0x263F7C7C8])
                || *(void *)&v288.var0.y != *(void *)(MEMORY[0x263F7C7C8] + 8)
                || (uint64_t v127 = [*(id *)(a1 + 64) smartFieldAtCharIndex:*v295[0] attributeKind:7 effectiveRange:&v288]) == 0|| *v295[0] < *(void *)&v288.var0.x|| *v295[0] - *(void *)&v288.var0.x >= *(void *)&v288.var0.y)
              {
                double v142 = TSWPLineFragment::baselineShiftFromRunAttributes(v87, v128);
                uint64_t v143 = 0;
                double v144 = -v142;
                unsigned int v145 = 1;
                do
                {
                  char v146 = IsWhitespaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v295[0][v143]));
                  BOOL v147 = v146;
                  uint64_t v143 = v145;
                  if (GlyphCount > v145) {
                    char v148 = v146;
                  }
                  else {
                    char v148 = 0;
                  }
                  ++v145;
                }
                while ((v148 & 1) != 0);
                char v149 = (void *)[(TSWPLineFragment *)v87 objectForKeyedSubscript:@"TSWPUnderlineWidthAttribute"];
                if (v149)
                {
                  [v149 floatValue];
                  double v151 = v150;
                }
                else
                {
                  double v151 = 0.0;
                }
                double v152 = TSWPUnderlineAdornmentMetricsForFont(font, v265, v118, *(unsigned __int8 *)(a1 + 30), *(void **)(a1 + 96), v141, v144, ascent, descent, leading, v151);
                if (v118 == 2) {
                  unsigned int v155 = 2;
                }
                else {
                  unsigned int v155 = 1;
                }
                v288.var0.double x = v136;
                v288.var0.CGFloat y = v152;
                v288.id var1 = v134;
                v288.unint64_t var2 = v140;
                v288.var3 = v153;
                v288.var4 = v155;
                v288.id var5 = v118;
                v288.var6 = v141;
                v288.var7 = v154;
                v288.var8 = v147;
                v288.var9 = 0;
                CGColorRetain(v140);
                id v156 = v288.var9;
                unint64_t v157 = addAdornmentLine((uint64_t *)this + 34, &v288);
                BOOL v158 = v283;
                if (v141 != *(_DWORD *)&chars[2]) {
                  BOOL v158 = 0;
                }
                if (v158) {
                  *(void *)&long long v299 = *(void *)(v157 + 56);
                }
                CGColorRelease(v288.var2);
              }
            }
            long long v139 = v269;
            if (v272)
            {
              double v159 = TSWPLineFragment::baselineShiftFromRunAttributes(v87, v128);
              v160 = (CGColor *)objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", @"TSWPStrikethroughColor"), "CGColor");
              if (!v160) {
                v160 = (CGColor *)[(TSWPLineFragment *)v87 objectForKeyedSubscript:v263];
              }
              v337((uint64_t)v336, v160);
              double v161 = v124;
              double v162 = v136;
              double v163 = v52;
              TSWPStrikethroughAdornmentMetricsForFont(v265, -v159, ascent, descent, leading);
              double v166 = v165;
              double v167 = v164;
              if (v272 == 2) {
                double v168 = v164;
              }
              else {
                double v168 = 0.0;
              }
              if (v272 == -1)
              {
                uint64_t v127 = [*(id *)(a1 + 64) characterAtIndex:StringRange.length + StringRange.location - 1];
                int v169 = v127;
                if (v127 <= 0xC && ((1 << v127) & 0x1030) != 0)
                {
                  double v134 = v349 - v162;
                }
                else
                {
                  uint64_t v127 = IsParagraphBreakingCharacter(v127);
                  char v170 = v127 ^ 1;
                  if (v169 == 8232) {
                    char v170 = 0;
                  }
                  double v171 = v129;
                  if ((v170 & 1) == 0)
                  {
                    unint64_t v172 = GlyphCount;
                    uint64_t v173 = GlyphCount;
                    do
                    {
                      if (v173 <= 0)
                      {
                        double v171 = v129;
                        goto LABEL_229;
                      }
                      CFIndex v174 = v295[0][--v173];
                      --v172;
                    }
                    while (v174 != StringRange.length + StringRange.location - 1);
                    double v171 = v129 - v293[0][v172].width + 7.0;
                  }
LABEL_229:
                  double v175 = v134 + v171;
                  if (v349 - v162 >= v175) {
                    double v134 = v175;
                  }
                  else {
                    double v134 = v349 - v162;
                  }
                }
                LODWORD(v272) = 1;
              }
              if (v134 <= 0.0)
              {
                double v52 = v163;
                double v68 = v256;
                double v136 = v162;
                double v124 = v161;
                if (!v119) {
                  goto LABEL_241;
                }
                goto LABEL_236;
              }
              CGFloat v176 = v166 - v168;
              double v136 = v162;
              v288.var0.double x = v162;
              v288.var0.CGFloat y = v176;
              v288.id var1 = v134;
              v288.unint64_t var2 = v160;
              v288.var3 = v167;
              v288.var6 = 0;
              v288.var4 = v272;
              v288.id var5 = 0;
              v288.var7 = 0.0;
              v288.var8 = 0;
              v288.var9 = 0;
              CGColorRetain(v160);
              id v177 = v288.var9;
              addAdornmentLine((uint64_t *)this + 37, &v288);
              double v124 = v161;
              CGColorRelease(v288.var2);
              double v52 = v163;

              double v68 = v256;
            }
            if (v119) {
              goto LABEL_236;
            }
          }
LABEL_241:
          if (v139 && v124 > 0.0) {
            TSWPCoreTextTypesetter::pAddHighlightAdornmentToLineFragment((TSWPCoreTextTypesetter *)v127, this, v124, v136, v139);
          }
          CFIndex v182 = 0;
          unsigned int v183 = 0;
          while (2)
          {
            v184 = v30;
            unsigned int v185 = 0;
            CFIndex v186 = v295[0][v182];
            uint64_t v187 = *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v186);
            int v188 = 1;
            if (*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v186) > 0x205Eu)
            {
              if (*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v186) <= 0xFEFEu)
              {
                if (v187 != 8287 && v187 != 12288)
                {
LABEL_278:
                  int v188 = 0;
                  goto LABEL_279;
                }
LABEL_267:
                double v194 = v294[0][v182].x;
                double v195 = v293[0][v182].width;
                if (*((unsigned char *)&gInvisibles + 40 * v185 + 2))
                {
                  v196 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
                  uint64_t v197 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                  objc_msgSend(v196, "handleFailureInFunction:file:lineNumber:description:", v197, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 3240, @"Shouldn't be handling invisible breaks here.");
                }
                double v198 = *((double *)&gInvisibles + 5 * v185 + 1);
                double v199 = v194 + (v195 - v198) * 0.5;
                if ((a4 & 1) == 0)
                {
                  if ((v277 & 0x1000) != 0)
                  {
                    if (v199 < -v332) {
                      double v199 = -v332;
                    }
                    double v199 = v275 + v199;
                  }
                  else
                  {
                    double v200 = *((double *)this + 8) - v332 - v198;
                    if (v200 < v199) {
                      double v199 = v200;
                    }
                  }
                }
                v288.var0.double x = v199;
                v288.var0.CGFloat y = 0.0;
                TSWPAdornments::add((TSWPAdornments *)&attributes, &v288.var0, (const unsigned __int16 *)&gInvisibles + 20 * v185 + 16);
                int v201 = 0;
LABEL_280:
                NSUInteger v30 = v184;
LABEL_301:
                if (((v201 | v282 & v188) & v283) == 1)
                {
                  v374.CFIndex location = v182;
                  v374.NSUInteger length = range;
                  TSWPCoreTextTypesetter::pAddEmphasisMarkGlyph(a1, (TSWPAdornments *)chars, (uint64_t)&v331, run, v374, v187, font, v294[0][v182].x, v294[0][v182].y, v293[0][v182].width, v293[0][v182].height, v297.width, v295[0][v182], v280[0], v296);
                }
                CFIndex v182 = ++v183;
                if (GlyphCount <= v183)
                {
                  CFArrayRef v82 = v268;
                  v226 = (__CFString *)CTFontCopyFamilyName(font);
                  if ([(__CFString *)v226 isEqualToString:@"Zapfino"]) {
                    *((_DWORD *)this + 6) |= 0x40000u;
                  }

                  if (v293[0])
                  {
                    v293[1] = v293[0];
                    operator delete(v293[0]);
                  }
                  if (v294[0])
                  {
                    v294[1] = v294[0];
                    operator delete(v294[0]);
                  }
                  if (v295[0])
                  {
                    v295[1] = v295[0];
                    operator delete(v295[0]);
                  }
                  goto LABEL_337;
                }
                continue;
              }
              if (v187 != 65532)
              {
                if (v187 != 65279) {
                  goto LABEL_278;
                }
                goto LABEL_252;
              }
              NSUInteger v30 = v184;
              if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:", v295[0][v182]), "isAnchored"))
              {
                uint64_t v189 = [*(id *)(a1 + 64) charIndexMappedToStorage:v186];
                uint64_t v190 = v189;
                double v191 = v275 + v294[0][v182].x;
                v192 = (double *)*((void *)&__p + 1);
                if (*((void *)&__p + 1) >= v328[0])
                {
                  v202 = (double *)__p;
                  uint64_t v203 = (uint64_t)(*((void *)&__p + 1) - __p) >> 4;
                  unint64_t v204 = v203 + 1;
                  if ((unint64_t)(v203 + 1) >> 60) {
                    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v205 = v328[0] - __p;
                  if ((uint64_t)(v328[0] - __p) >> 3 > v204) {
                    unint64_t v204 = v205 >> 3;
                  }
                  if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v206 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v206 = v204;
                  }
                  if (v206)
                  {
                    v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v328, v206);
                    v192 = (double *)*((void *)&__p + 1);
                    v202 = (double *)__p;
                  }
                  else
                  {
                    v207 = 0;
                  }
                  v208 = (double *)&v207[16 * v203];
                  *(void *)v208 = v190;
                  v208[1] = v191;
                  v209 = v208;
                  if (v192 != v202)
                  {
                    do
                    {
                      *((_OWORD *)v209 - 1) = *((_OWORD *)v192 - 1);
                      v209 -= 2;
                      v192 -= 2;
                    }
                    while (v192 != v202);
                    v202 = (double *)__p;
                  }
                  v193 = v208 + 2;
                  *(void *)&long long __p = v209;
                  *((void *)&__p + 1) = v208 + 2;
                  v328[0] = &v207[16 * v206];
                  if (v202) {
                    operator delete(v202);
                  }
                }
                else
                {
                  **((void **)&__p + 1) = v189;
                  v192[1] = v191;
                  v193 = v192 + 2;
                }
                int v188 = 0;
                *((void *)&__p + 1) = v193;
              }
              else
              {
                int v188 = 0;
              }
LABEL_300:
              int v201 = 1;
              goto LABEL_301;
            }
            break;
          }
          if ((v187 - 0x2000) <= 0x2F)
          {
            if (((1 << v187) & 0xF7F) != 0) {
              goto LABEL_267;
            }
            if (((1 << v187) & 0x30000000000) == 0)
            {
              if (((1 << v187) & 0x800000000080) != 0) {
                goto LABEL_252;
              }
              goto LABEL_258;
            }
LABEL_260:
            if ((v277 & 0x1000) == 0)
            {
              double v271 = v294[0][v182].x;
              goto LABEL_278;
            }
            int v188 = 0;
            double v271 = v294[0][v182].x + v275 + v293[0][v182].width;
LABEL_279:
            int v201 = 1;
            goto LABEL_280;
          }
LABEL_258:
          if (v187 <= 0x20)
          {
            if (((1 << v187) & 0x3C30) != 0) {
              goto LABEL_260;
            }
            if (v187 == 9)
            {
              double v210 = v294[0][v182].x;
              double v211 = v210;
              if ((v277 & 0x1000) != 0) {
                double v211 = v275 + v254 - (v210 + v293[0][v182].width);
              }
              id v212 = (id)objc_msgSend((id)objc_msgSend(*(id *)(a3 + 392), "tabAfterPosition:", v211), "leader");
              if ([v212 length])
              {
                double v213 = v293[0][v182].width;
                CFDictionaryRef v214 = CFDictionaryCreateMutableCopy(allocator, 0, (CFDictionaryRef)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 64), "paragraphStyleAtCharIndex:effectiveRange:", v186, 0), "getTypesetterAttributes:scalePercent:isRightToLeft:", objc_msgSend(*(id *)(a1 + 64), "characterStyleAtCharIndex:effectiveRange:", v186, 0), objc_msgSend(*(id *)(a3 + 104), "scaleTextPercent"), objc_msgSend(*(id *)(a1 + 64), "isWritingDirectionRightToLeftForParagraphAtCharIndex:", v186)));
                if (v214)
                {
                  if (v213 > 0.0)
                  {
                    if (*(unsigned char *)(a3 + 333)
                      && objc_msgSend(v212, "isEqualToString:", +[TSWPTab kTabStopLeaderStringArrow](TSWPTab, "kTabStopLeaderStringArrow")))
                    {
                      id v212 = +[TSWPTab kTabStopLeaderStringArrowRTL];
                    }
                    v215 = 0;
                    double v216 = v275 + v210;
                    double v217 = 0.0;
                    for (uint64_t i = 1; ; ++i)
                    {
                      CFAttributedStringRef v219 = CFAttributedStringCreate(allocator, (CFStringRef)[&stru_26D688A48 stringByPaddingToLength:i withString:v212 startingAtIndex:0], v214);
                      v220 = CTLineCreateWithAttributedString(v219);
                      double v221 = CTLineGetTypographicBounds(v220, 0, 0, 0);
                      CFRelease(v219);
                      if (v221 > v213) {
                        break;
                      }
                      if (v215) {
                        CFRelease(v215);
                      }
                      v215 = v220;
                      double v217 = v221;
                    }
                    if (v220) {
                      CFRelease(v220);
                    }
                    if (v215)
                    {
                      *(void *)&v288.var0.double x = v215;
                      v288.var0.CGFloat y = v213 + v216 + v332 - v217;
                      v288.id var1 = 0.0;
                      *(_OWORD *)&v288.unint64_t var2 = *MEMORY[0x263F7C7C8];
                      v288.var4 = 0;
                      CFRetain(v215);
                      unint64_t v224 = *((void *)this + 25);
                      if (v224 >= *((void *)this + 26))
                      {
                        uint64_t v225 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v255, (uint64_t)&v288);
                      }
                      else
                      {
                        std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v255, (uint64_t)&v288);
                        uint64_t v225 = v224 + 48;
                      }
                      *((void *)this + 25) = v225;
                      CFRelease(v215);
                      if (*(void *)&v288.var0.x) {
                        CFRelease(*(CFTypeRef *)&v288.var0.x);
                      }
                    }
                  }
                  CFRelease(v214);
                }
                else
                {
                  v222 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
                  uint64_t v223 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                  objc_msgSend(v222, "handleFailureInFunction:file:lineNumber:description:", v223, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 3135, @"invalid nil value for '%s'", "tabLeaderAttrs");
                }
              }
              int v188 = 0;
              unsigned int v185 = 1;
              goto LABEL_267;
            }
            if (v187 == 32) {
              goto LABEL_267;
            }
          }
          if (v187 != 160) {
            goto LABEL_278;
          }
LABEL_252:
          int v188 = 0;
          if (![*(id *)(a1 + 64) footnoteReferenceAtCharIndex:v295[0][v182]])
          {
            unsigned int v185 = 8;
            goto LABEL_267;
          }
          NSUInteger v30 = v184;
          goto LABEL_300;
        }
LABEL_337:
        if (*((void *)&v305 + 1) != (void)v305)
        {
          unint64_t v228 = *((void *)this + 56);
          if (v228 >= *((void *)this + 57))
          {
            uint64_t v229 = std::vector<TSWPAdornments>::__push_back_slow_path<TSWPAdornments const&>((uint64_t *)this + 55, (const TSWPAdornments *)chars);
            CFArrayRef v82 = v268;
            v230 = this;
          }
          else
          {
            TSWPAdornments::TSWPAdornments(*((TSWPAdornments **)this + 56), (const TSWPAdornments *)chars);
            uint64_t v229 = v228 + 200;
            v230 = this;
            *((void *)this + 56) = v228 + 200;
            CFArrayRef v82 = v268;
          }
          *((void *)v230 + 56) = v229;
        }
        CGColorRelease(*((CGColorRef *)&v299 + 1));
        if ((void)v300) {
          CFRelease((CFTypeRef)v300);
        }
        if (*((void *)&v306 + 1))
        {
          *(void *)&long long v307 = *((void *)&v306 + 1);
          operator delete(*((void **)&v306 + 1));
        }
        if ((void)v305)
        {
          *((void *)&v305 + 1) = v305;
          operator delete((void *)v305);
        }
        if (*((void *)&v303 + 1))
        {
          *(void *)&long long v304 = *((void *)&v303 + 1);
          operator delete(*((void **)&v303 + 1));
        }
        if ((void)v302)
        {
          *((void *)&v302 + 1) = v302;
          operator delete((void *)v302);
        }
        if (*((void *)&v300 + 1))
        {
          *(void *)&long long v301 = *((void *)&v300 + 1);
          operator delete(*((void **)&v300 + 1));
        }
        ++v273;
        ++v274;
      }
      while (v274 != v267);
      uint64_t v83 = [(__CFArray *)v82 countByEnumeratingWithState:&v313 objects:v351 count:16];
      if (!v83)
      {
LABEL_361:
        if ((*((unsigned char *)this + 25) & 8) != 0) {
          TSWPCoreTextTypesetter::pAddInvisibleBreakToLineFragment((id *)a1, (const TSWPLayoutState *)a3, this, v251, v271, a4);
        }
        if ((void *)v360 != v359[1])
        {
          unint64_t v231 = *((void *)this + 56);
          if (v231 >= *((void *)this + 57))
          {
            uint64_t v232 = std::vector<TSWPAdornments>::__push_back_slow_path<TSWPAdornments const&>((uint64_t *)this + 55, (const TSWPAdornments *)&attributes);
            v233 = this;
          }
          else
          {
            TSWPAdornments::TSWPAdornments(*((TSWPAdornments **)this + 56), (const TSWPAdornments *)&attributes);
            uint64_t v232 = v231 + 200;
            v233 = this;
            *((void *)this + 56) = v231 + 200;
          }
          *((void *)v233 + 56) = v232;
        }
        v234 = this;
        if (*((void *)&__p + 1) != (void)__p)
        {
          unint64_t v235 = *((void *)this + 56);
          if (v235 >= *((void *)this + 57))
          {
            uint64_t v236 = std::vector<TSWPAdornments>::__push_back_slow_path<TSWPAdornments const&>((uint64_t *)this + 55, (const TSWPAdornments *)v317);
            v234 = this;
          }
          else
          {
            TSWPAdornments::TSWPAdornments(*((TSWPAdornments **)this + 56), (const TSWPAdornments *)v317);
            uint64_t v236 = v235 + 200;
            v234 = this;
            *((void *)this + 56) = v235 + 200;
          }
          *((void *)v234 + 56) = v236;
        }
        if (TSWPLineFragment::isHyphenated(v234))
        {
          OffsetForStringIndedouble x = CTLineGetOffsetForStringIndex(v30, (CFIndex)charIndex, 0);
          double v238 = v332;
          double v239 = TSWPLineFragment::baselineAdjustAtCharIndex(charIndex, *(void **)(a1 + 16), *(TSWPStorage **)(a3 + 104), 0, [*(id *)(a3 + 104) scaleTextPercent]);
          *(void *)chars = line;
          *(double *)&long long v299 = OffsetForStringIndex + v238;
          *((double *)&v299 + 1) = v239;
          long long v300 = *MEMORY[0x263F7C7C8];
          LODWORD(v301) = 2;
          if (line) {
            CFRetain(line);
          }
          unint64_t v240 = *((void *)this + 25);
          if (v240 >= *((void *)this + 26))
          {
            uint64_t v241 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v255, (uint64_t)chars);
          }
          else
          {
            std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v255, (uint64_t)chars);
            uint64_t v241 = v240 + 48;
          }
          *((void *)this + 25) = v241;
          if (line) {
            CFRelease(line);
          }
          if (*(void *)chars) {
            CFRelease(*(CFTypeRef *)chars);
          }
        }
        TSWPCoreTextTypesetter::pApplyChangeTrackingToLineFragment((id *)a1, this);
        if ((*((unsigned char *)this + 26) & 0x80) != 0 && truncationToken)
        {
          double v242 = CTLineGetOffsetForStringIndex(v30, (CFIndex)charIndex, 0);
          double v243 = CTLineGetTrailingWhitespaceWidth(v30);
          double v244 = v332;
          double v245 = TSWPLineFragment::baselineAdjustAtCharIndex(charIndex, *(void **)(a1 + 16), *(TSWPStorage **)(a3 + 104), 0, [*(id *)(a3 + 104) scaleTextPercent]);
          *(void *)chars = truncationToken;
          *(double *)&long long v299 = v242 - v243 + v244;
          *((double *)&v299 + 1) = v245;
          long long v300 = *MEMORY[0x263F7C7C8];
          LODWORD(v301) = 4;
          CFRetain(truncationToken);
          unint64_t v246 = *((void *)this + 25);
          if (v246 >= *((void *)this + 26))
          {
            uint64_t v248 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v255, (uint64_t)chars);
            v247 = truncationToken;
          }
          else
          {
            std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v255, (uint64_t)chars);
            v247 = truncationToken;
            uint64_t v248 = v246 + 48;
          }
          *((void *)this + 25) = v248;
          CFRelease(v247);
          if (*(void *)chars) {
            CFRelease(*(CFTypeRef *)chars);
          }
        }
        CFRelease(v30);
        CGColorRelease(v319);
        if (v320) {
          CFRelease(v320);
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (*((void *)&v325 + 1))
        {
          *(void *)&long long v326 = *((void *)&v325 + 1);
          operator delete(*((void **)&v325 + 1));
        }
        if ((void)v324)
        {
          *((void *)&v324 + 1) = v324;
          operator delete((void *)v324);
        }
        if (*((void *)&v322 + 1))
        {
          *(void *)&long long v323 = *((void *)&v322 + 1);
          operator delete(*((void **)&v322 + 1));
        }
        if ((void)v321)
        {
          *((void *)&v321 + 1) = v321;
          operator delete((void *)v321);
        }
        CGColorRelease(v353);
        if (cf) {
          CFRelease(cf);
        }
        if (v361[0])
        {
          v361[1] = v361[0];
          operator delete(v361[0]);
        }
        if (v359[1])
        {
          *(void **)&long long v360 = v359[1];
          operator delete(v359[1]);
        }
        if (v358[0])
        {
          v358[1] = v358[0];
          operator delete(v358[0]);
        }
        if (v356[1])
        {
          *(void **)&long long v357 = v356[1];
          operator delete(v356[1]);
        }
        if (v355[0])
        {
          v355[1] = v355[0];
          operator delete(v355[0]);
        }
        if (v331) {
          CFRelease(v331);
        }
        break;
      }
    }
  }
LABEL_417:
  int v249 = *((_DWORD *)this + 6);
  if (*((unsigned char *)v346 + 24))
  {
    *((_DWORD *)this + 6) = v249 | 0x8000000;
    v250 = (CGColor *)v342[3];
  }
  else
  {
    v250 = 0;
    *((_DWORD *)this + 6) = v249 & 0xF7FFFFFF;
  }
  TSWPLineFragment::setSingleColor(this, v250);
  TSWPLineFragment::clearTypesetterState(this);
  _Block_object_dispose(&v341, 8);
  _Block_object_dispose(&v345, 8);
}

void sub_2234DE214(_Unwind_Exception *a1)
{
}

void *std::vector<long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2234DE6D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void sub_2234DEA38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL String(unint64_t *a1, unint64_t *a2, double a3)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2)
  {
    unint64_t v6 = *a1;
    if (*a1 == *a2)
    {
      if (v6)
      {
        uint64_t v7 = 0;
        for (unint64_t i = 0; i < v6; ++i)
        {
          int v9 = String(a1[1] + v7, a2[1] + v7, a3);
          unint64_t v6 = *a1;
          if (!v9) {
            break;
          }
          v7 += 16;
        }
      }
      else
      {
        unint64_t i = 0;
      }
      return i == v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t String(uint64_t a1, uint64_t a2, double a3)
{
  if (*(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10))
  {
    return 0;
  }
  switch(*(unsigned char *)(a1 + 10))
  {
    case 0:
      uint64_t v4 = *(void **)a1;
      if (v4 != *(void **)a2 && (objc_msgSend(v4, "isEqual:") & 1) == 0) {
        return 0;
      }
      break;
    case 1:
      int v7 = String((unsigned int *)a1);
      if (v7 != String((unsigned int *)a2)) {
        return 0;
      }
      break;
    case 2:
      *(float *)&double v9 = String(a1, a3);
      if (*(float *)&v9 != String(a2, v9)) {
        return 0;
      }
      break;
    case 3:
      double v10 = String(a1);
      if (v10 != String(a2)) {
        return 0;
      }
      break;
    default:
      double v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSSPropertyEntryEqual(const TSSPropertyEntry *, const TSSPropertyEntry *)");
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 239, @"Unexpected entry type");
      return 0;
  }
  return 1;
}

{
  void *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  if (a2 >> 4 >= 0x121)
  {
    uint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    int v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 94, @"Property ID <%d> out of range.", a2);
  }
  BOOL result = String(a2);
  if (result != 3)
  {
    double v9 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    double v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
    CGFloat v11 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
    unsigned int v12 = String(a2);
    CFIndex v13 = String(v12);
    CGFloat v14 = String(a2);
    BOOL result = [v9 handleFailureInFunction:v10, v11, 95, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v13, v14, String(3u) file lineNumber description];
  }
  if (a3 == INFINITY)
  {
    CFAllocatorRef v15 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    CFStringRef v16 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
    BOOL result = [v15 handleFailureInFunction:v16, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 96, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
  }
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(unsigned char *)(a1 + 10) = 3;
  *(double *)a1 = a3;
  return result;
}

void String(void *a1)
{
  if (a1)
  {
    unint64_t v2 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = 0;
      int v4 = 0;
      do
      {
        uint64_t v5 = *((void *)a1 + 1);
        if (!*(unsigned char *)(v5 + 16 * v3 + 10)) {

        }
        uint64_t v3 = (unsigned __int16)++v4;
      }
      while (v2 > (unsigned __int16)v4);
    }
    free(*((void **)a1 + 1));
    free(a1);
  }
}

void TSWPAdornments::add(TSWPAdornments *this, const CGPoint *a2, const unsigned __int16 *a3)
{
  unint64_t v8 = *((void *)this + 15);
  uint64_t v6 = (char *)this + 120;
  unint64_t v7 = v8;
  double v9 = (CGPoint *)*((void *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    CGFloat v11 = (void **)(v6 - 16);
    uint64_t v12 = *((void *)v6 - 2);
    uint64_t v13 = ((uint64_t)v9 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v7 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      CFAttributedStringRef v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v6, v16);
    }
    else {
      CFAttributedStringRef v17 = 0;
    }
    char v18 = (CGPoint *)&v17[16 * v13];
    uint64_t v19 = &v17[16 * v16];
    *char v18 = *a2;
    double v10 = v18 + 1;
    uint64_t v21 = (CGPoint *)*((void *)this + 13);
    unint64_t v20 = (CGPoint *)*((void *)this + 14);
    if (v20 != v21)
    {
      do
      {
        v18[-1] = v20[-1];
        --v18;
        --v20;
      }
      while (v20 != v21);
      unint64_t v20 = (CGPoint *)*v11;
    }
    *((void *)this + 13) = v18;
    *((void *)this + 14) = v10;
    *((void *)this + 15) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *double v9 = *a2;
    double v10 = v9 + 1;
  }
  unint64_t v22 = *((void *)this + 9);
  *((void *)this + 14) = v10;
  CGRect v23 = (char *)*((void *)this + 8);
  if ((unint64_t)v23 >= v22)
  {
    unint64_t v25 = (char *)*((void *)this + 7);
    uint64_t v26 = v23 - v25;
    if (v23 - v25 <= -3) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v26 >> 1;
    unint64_t v28 = v22 - (void)v25;
    if (v28 <= (v26 >> 1) + 1) {
      unint64_t v29 = v27 + 1;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v28 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v30 = v29;
    }
    if (v30)
    {
      double v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 72, v30);
      unint64_t v25 = (char *)*((void *)this + 7);
      CGRect v23 = (char *)*((void *)this + 8);
    }
    else
    {
      double v31 = 0;
    }
    uint64_t v32 = &v31[2 * v27];
    long long v33 = &v31[2 * v30];
    *(_WORD *)uint64_t v32 = *a3;
    uint64_t v24 = v32 + 2;
    while (v23 != v25)
    {
      __int16 v34 = *((_WORD *)v23 - 1);
      v23 -= 2;
      *((_WORD *)v32 - 1) = v34;
      v32 -= 2;
    }
    *((void *)this + 7) = v32;
    *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = v24;
    *((void *)this + 9) = v33;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *(_WORD *)CGRect v23 = *a3;
    uint64_t v24 = v23 + 2;
  }
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = v24;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TSWPLayoutState>,std::reverse_iterator<TSWPLayoutState*>,std::reverse_iterator<TSWPLayoutState*>,std::reverse_iterator<TSWPLayoutState*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 688;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (TSWPLayoutState *)(v11 + v10);
    v10 -= 688;
    TSWPLayoutState::TSWPLayoutState(v12, (const TSWPLayoutState *)(v10 + a3));
  }
  return a6;
}

void TSWPLayoutState::TSWPLayoutState(TSWPLayoutState *this, const TSWPLayoutState *a2)
{
  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24));
  memcpy(this, a2, 0x2B0uLL);
  id v4 = *((id *)this + 85);
}

void sub_2234DF104(_Unwind_Exception *a1)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator(v1);
  _Unwind_Resume(a1);
}

void TSWPParagraphEnumerator::TSWPParagraphEnumerator(TSWPParagraphEnumerator *this)
{
  *(_OWORD *)&this->unint64_t var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  *(_OWORD *)&this->id var0 = 0u;
  this->var6 = 1;
}

{
  *(_OWORD *)&this->unint64_t var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  *(_OWORD *)&this->id var0 = 0u;
  this->var6 = 1;
}

void p_TSSPropertyStoreAddNewEntries(uint64_t *a1, const void *a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v6 = (char *)malloc_type_calloc(*a1 + a3, 0x10uLL, 0x10820400B94AB5FuLL);
        if (v6)
        {
          unint64_t v7 = v6;
          uint64_t v8 = *a1;
          if (*a1)
          {
            double v9 = (const void *)a1[1];
            if (v9)
            {
              memcpy(v6, v9, 16 * v8);
              uint64_t v8 = *a1;
            }
          }
          memcpy(&v7[16 * v8], a2, 16 * a3);
          if (mergesort(v7, *a1 + a3, 0x10uLL, (int (__cdecl *)(const void *, const void *))p_TSSPropertyEntryCompare))
          {
            free(v7);
          }
          else
          {
            free((void *)a1[1]);
            *a1 += a3;
            a1[1] = (uint64_t)v7;
          }
        }
      }
    }
  }
}

uint64_t String(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

unint64_t *String(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = p_TSSPropertyStoreAllocateWithCapacity(*(void *)a1);
  uint64_t v3 = v2;
  if (v2)
  {
    if (*(void *)a1)
    {
      memcpy((void *)v2[1], *(const void **)(a1 + 8), 16 * *(void *)a1);
      unint64_t v4 = *(void *)a1;
      *uint64_t v3 = *(void *)a1;
      if (v4)
      {
        uint64_t v5 = 0;
        unsigned int v6 = 1;
        do
        {
          unint64_t v7 = v3[1];
          if (!*(unsigned char *)(v7 + 16 * v5 + 10))
          {
            id v8 = *(id *)(v7 + 16 * v5);
            unint64_t v4 = *v3;
          }
          uint64_t v5 = v6;
        }
        while (v4 > v6++);
      }
    }
  }
  return v3;
}

void *p_TSSPropertyStoreAllocateWithCapacity(size_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    void *v2 = a1;
    if (a1)
    {
      unint64_t v4 = malloc_type_calloc(a1, 0x10uLL, 0x10820400B94AB5FuLL);
      v3[1] = v4;
      if (!v4)
      {
        free(v3);
        return 0;
      }
    }
    else
    {
      v2[1] = 0;
    }
  }
  return v3;
}

uint64_t TSWPLineFragment::isHyphenated(TSWPLineFragment *this)
{
  return (*((unsigned __int8 *)this + 24) >> 1) & 1;
}

uint64_t TSWPCoreTextTypesetter::pCTTypesetter(TSWPCoreTextTypesetter *this)
{
  if (!*((unsigned char *)this + 34))
  {
    unint64_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"CTTypesetterRef TSWPCoreTextTypesetter::pCTTypesetter() const"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 240, @"paragraph must be set up before requesting typesetter");
  }
  return *(void *)(*((void *)this + 29) + 64);
}

void *std::vector<CGPoint>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2234DF7A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGSize>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2234DF81C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex(TSWPCoreTextTypesetter *this, unint64_t a2)
{
  unsigned int v4 = *((_DWORD *)this + 27);
  if (!v4)
  {
    uint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"uint TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex(TSWPCharIndex) const"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 3745, @"Bad runCount");
    unsigned int v4 = *((_DWORD *)this + 27);
  }
  uint64_t v7 = v4;
  if (v4 > 1)
  {
    id v8 = (unint64_t *)(*((void *)this + 15) + 104);
    uint64_t v9 = 1;
    while (1)
    {
      unint64_t v10 = *v8;
      v8 += 13;
      if (v10 > a2) {
        break;
      }
      if (v7 == ++v9) {
        return (v7 - 1);
      }
    }
    LODWORD(v7) = v9;
  }
  return (v7 - 1);
}

uint64_t ___ZNK22TSWPCoreTextTypesetter29createLineRefsForLineFragmentEP16TSWPLineFragmentPK15TSWPLayoutStateb15TSWPLayoutFlags_block_invoke(uint64_t result, CGColorRef color2)
{
  if (color2)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24))
    {
      uint64_t v4 = *(void *)(*(void *)(result + 40) + 8);
      BOOL result = *(void *)(v4 + 24);
      if (!result)
      {
LABEL_6:
        *(void *)(v4 + 24) = color2;
        return result;
      }
      BOOL result = CGColorEqualToColor((CGColorRef)result, color2);
      if (result)
      {
        uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 8);
        goto LABEL_6;
      }
      *(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 0;
    }
  }
  return result;
}

TSWPLineFragment *TSWPLineFragment::clearTypesetterState(TSWPLineFragment *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 49);
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 16);
    if (v3) {
      CFRelease(v3);
    }
    this = (TSWPLineFragment *)MEMORY[0x223CB8F20](v2, 0x1060C4051B6AA0BLL);
  }
  *((void *)v1 + 49) = 0;
  return this;
}

CGColor *TSWPLineFragment::setSingleColor(TSWPLineFragment *this, CGColor *a2)
{
  BOOL result = (CGColor *)*((void *)this + 67);
  if (result != a2)
  {
    CGColorRelease(result);
    BOOL result = CGColorRetain(a2);
    *((void *)this + 67) = result;
  }
  return result;
}

double TSWPCoreTextTypesetter::pCalculateTrailingWhiteSpace(TSWPCoreTextTypesetter *this, double result, int a3, char a4, uint64_t a5, const CGPoint *a6, const CGSize *a7, uint64_t *a8)
{
  if ((a4 & 1) == 0 && a6 && !a3 && a7 && a8 && result > 0.0 && a5 && a5 - 1 >= 0)
  {
    double v8 = a6[a5 - 1].x + a7[a5 - 1].width;
    uint64_t v9 = 16 * a5 - 16;
    unint64_t v10 = (double *)((char *)&a7->width + v9);
    uint64_t v11 = (double *)((char *)&a6->x + v9);
    do
    {
      double v12 = v8 - (*v11 + *v10);
      if (v12 >= result) {
        break;
      }
      if (*(_WORD *)(*((void *)this + 10) + 2 * a8[a5 - 1]) == 9)
      {
        if (v12 >= 0.0) {
          return v8 - (*v11 + *v10);
        }
        return result;
      }
      --a5;
      v10 -= 2;
      v11 -= 2;
    }
    while (a5 >= 1);
  }
  return result;
}

void std::vector<TSWPLineRef>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(CFTypeRef **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a2)
  {
    std::vector<TSWPLineRef>::__vdeallocate((CFTypeRef **)a1);
    if (a2 > 0x555555555555555) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v8 <= a2) {
      unint64_t v8 = a2;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v9 = 0x555555555555555;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<TSWPLineRef>::__vallocate[abi:ne180100]((void *)a1, v9);
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = 3 * a2;
    uint64_t v12 = v10 + 48 * a2;
    uint64_t v13 = 16 * v11;
    do
    {
      CFTypeRef v14 = *(CFTypeRef *)a3;
      *(void *)uint64_t v10 = *(void *)a3;
      *(_OWORD *)(v10 + _Block_object_dispose(&STACK[0x560], 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 24);
      *(_DWORD *)(v10 + 40) = *(_DWORD *)(a3 + 40);
      if (v14) {
        CFRetain(v14);
      }
      v10 += 48;
      v13 -= 48;
    }
    while (v13);
    goto LABEL_12;
  }
  unint64_t v15 = (*(void *)(a1 + 8) - (void)v7) / 48;
  if (v15 >= a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = (*(void *)(a1 + 8) - (void)v7) / 48;
  }
  if (v16)
  {
    CFAttributedStringRef v17 = (_OWORD *)(a3 + 24);
    do
    {
      if (*(void *)a3) {
        CFRetain(*(CFTypeRef *)a3);
      }
      if (*v7) {
        CFRelease(*v7);
      }
      CFTypeRef *v7 = *(CFTypeRef *)a3;
      *((_DWORD *)v7 + 10) = *(_DWORD *)(a3 + 40);
      *(_OWORD *)(v7 + 1) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v7 + 3) = *v17;
      v7 += 6;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    unint64_t v22 = *(CFTypeRef **)(a1 + 8);
    uint64_t v12 = *(void *)a1 + 48 * a2;
    while (v22 != (CFTypeRef *)v12)
    {
      v22 -= 6;
      std::allocator<TSWPLineRef>::destroy[abi:ne180100](v6, v22);
    }
LABEL_12:
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v12;
    return;
  }
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = v18 + 48 * (a2 - v15);
  uint64_t v20 = -48 * v15 + 48 * a2;
  do
  {
    CFTypeRef v21 = *(CFTypeRef *)a3;
    *(void *)uint64_t v18 = *(void *)a3;
    *(_OWORD *)(v18 + _Block_object_dispose(&STACK[0x560], 8) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(a3 + 24);
    *(_DWORD *)(v18 + 40) = *(_DWORD *)(a3 + 40);
    if (v21) {
      CFRetain(v21);
    }
    v18 += 48;
    v20 -= 48;
  }
  while (v20);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v19;
}

void sub_2234DFD3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<TSWPLineRef>::__vdeallocate(CFTypeRef **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 6;
        std::allocator<TSWPLineRef>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<TSWPLineRef>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

double TSWPCoreTextTypesetter::pLineRefStartForLineFragment(TSWPCoreTextTypesetter *this, id *a2, const TSWPLineFragment *a3, double a4)
{
  double v5 = *((double *)a3 + 6);
  [a2[13] wpBounds];
  double v7 = a4 - (v5 - v6);
  if (v7 < 0.0)
  {
    unint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat TSWPCoreTextTypesetter::pLineRefStartForLineFragment(const TSWPLayoutState *, const TSWPLineFragment *, CGFloat) const");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 4481, @"Negative lineRef start position");
  }
  return v7;
}

double TSWPLineFragment::getTypesetterPos(TSWPLineFragment *this, double *a2, double *a3)
{
  *a2 = *((double *)this + 50);
  double result = *((double *)this + 51);
  *a3 = result;
  return result;
}

BOOL TSWPLineFragment::getOikomiSquish(TSWPLineFragment *this)
{
  uint64_t v1 = *((void *)this + 49);
  return v1 && *(unsigned char *)(v1 + 28) != 0;
}

void String(unint64_t *a1, uint64_t *a2, double a3)
{
  unint64_t v4 = *a1;
  if (*a2 >= 1)
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = v6 + 16 * *a2;
    unint64_t v8 = a1[1];
LABEL_3:
    uint64_t v9 = *a1;
    while (2)
    {
      v6 += 16;
      while (1)
      {
        if (v8 < a1[1] + 16 * *a1)
        {
          unsigned int v10 = *(unsigned __int16 *)(v8 + 8);
          unsigned int v11 = *(unsigned __int16 *)(v6 - 8);
          if (v10 == v11)
          {
            if (String(v8, v6 - 16, a3))
            {
              if (!*(unsigned char *)(v8 + 10)) {

              }
              *(_WORD *)(v8 + _Block_object_dispose(&STACK[0x560], 8) = 0;
              --v4;
            }
            v8 += 16;
            unint64_t v7 = a2[1] + 16 * *a2;
            if (v6 >= v7)
            {
              uint64_t v9 = *a1;
              goto LABEL_19;
            }
            goto LABEL_3;
          }
          if (v10 < v11) {
            break;
          }
        }
        BOOL v12 = v6 >= v7;
        v6 += 16;
        if (v12) {
          goto LABEL_19;
        }
      }
      v8 += 16;
      v6 -= 16;
      if (v6 < v7) {
        continue;
      }
      break;
    }
LABEL_19:
    if (v4 < v9)
    {
      uint64_t v13 = (_OWORD *)a1[1];
      CFTypeRef v14 = v13;
      if (v9 >= 1)
      {
        unint64_t v15 = a1[1];
        do
        {
          if (*(_WORD *)(v15 + 8))
          {
            if ((_OWORD *)v15 != v14)
            {
              *CFTypeRef v14 = *(_OWORD *)v15;
              uint64_t v9 = *a1;
              uint64_t v13 = (_OWORD *)a1[1];
            }
            ++v14;
          }
          v15 += 16;
        }
        while (v15 < (unint64_t)&v13[v9]);
      }
      if (v14 - v13 != (int)v4)
      {
        uint64_t v16 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyStoreRemovePropertiesFromStore(TSSPropertyStoreRef, TSSPropertyStoreRef)");
        objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 958, @"mismatch in entry count");
      }
    }
  }
  if (v4)
  {
    uint64_t v18 = malloc_type_realloc((void *)a1[1], 16 * v4, 0x10820400B94AB5FuLL);
    if (!v18) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (*a1)
  {
    free((void *)a1[1]);
    uint64_t v18 = 0;
LABEL_34:
    a1[1] = (unint64_t)v18;
  }
LABEL_35:
  *a1 = v4;
}

double TSWPLineFragment::wpOffsetForCharIndex(TSWPLineFragment *this, unint64_t a2, BOOL a3, char a4, double *a5)
{
  unint64_t v9 = *(void *)this;
  uint64_t v10 = *((void *)this + 1);
  if (a5) {
    *a5 = 0.0;
  }
  if (*((void *)this + 54))
  {
    uint64_t v11 = *((void *)this + 6);
    uint64_t v12 = *((void *)this + 7);
    uint64_t v13 = *((void *)this + 8);
    uint64_t v14 = *((void *)this + 9);
    if ((*((unsigned char *)this + 25) & 0x10) != 0)
    {
      if (v9 == a2) {
        goto LABEL_6;
      }
    }
    else if (v9 != a2)
    {
LABEL_6:
      double MaxX = CGRectGetMaxX(*(CGRect *)&v11);
      goto LABEL_20;
    }
    double MaxX = CGRectGetMinX(*(CGRect *)&v11);
LABEL_20:
    double v25 = MaxX;
    if (a5)
    {
      *a5 = MaxX;
      if (a4) {
        return v25;
      }
      goto LABEL_56;
    }
LABEL_55:
    if (a4) {
      return v25;
    }
    goto LABEL_56;
  }
  uint64_t v16 = *((void *)this + 24);
  uint64_t v17 = *((void *)this + 25) - v16;
  if (!v17)
  {
    double v25 = 0.0;
    if (a4) {
      return v25;
    }
    goto LABEL_56;
  }
  if (v10 + v9 != a2) {
    goto LABEL_23;
  }
  int v18 = *((_DWORD *)this + 6);
  if ((v18 & 0x800) != 0)
  {
    __int16 v34 = (void *)*((void *)this + 23);
    if (!v34)
    {
      CGFloat v35 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v36 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat TSWPLineFragment::wpOffsetForCharIndex(TSWPCharIndex, BOOL, BOOL, CGFloat *) const");
      objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1089, @"invalid nil value for '%s'", "_textSource");
      __int16 v34 = (void *)*((void *)this + 23);
    }
    uint64_t v37 = [v34 charIndexMappedFromStorage:a2 - 1];
    CFIndex v38 = v37;
    CGFloat secondaryOffset = 0.0;
    if ((*((unsigned char *)this + 25) & 0x40) != 0) {
      CFIndex v38 = v37 - *(void *)this + *((void *)this + 2);
    }
    OffsetForStringIndedouble x = CTLineGetOffsetForStringIndex(*(CTLineRef *)v16, v38, &secondaryOffset);
    double v40 = *(double *)(v16 + 8);
    double v41 = OffsetForStringIndex + v40;
    double v42 = v40 + secondaryOffset;
    CGFloat secondaryOffset = v40 + secondaryOffset;
    if (a5)
    {
      *a5 = v42;
    }
    else if ((v18 & 0x1000) == 0)
    {
      double v41 = v42;
    }
    unsigned int v43 = [*((id *)this + 23) characterAtIndex:v38];
    if (v43 <= 0xC && ((1 << v43) & 0x1030) != 0)
    {
      double v44 = 0.0;
      if ((v18 & 0x1000) == 0) {
        double v44 = *((double *)this + 8);
      }
      double v26 = v44;
      if (!a5) {
        goto LABEL_52;
      }
    }
    else
    {
      double v45 = 7.0;
      if ((v18 & 0x1000) != 0) {
        double v45 = -7.0;
      }
      double v26 = v45 + v41;
      if (!a5) {
        goto LABEL_52;
      }
      double v44 = v45 + *a5;
    }
    *a5 = v44;
LABEL_52:
    double v46 = *((double *)this + 6);
    double v25 = v26 + v46;
    if (!a5) {
      goto LABEL_55;
    }
    double v47 = v46 + *a5;
    goto LABEL_54;
  }
  if ((*((_DWORD *)this + 6) & 0x1002) != 2)
  {
LABEL_23:
    double v26 = 0.0;
    if (v9 <= a2)
    {
      uint64_t v27 = (void *)*((void *)this + 23);
      if (!v27)
      {
        unint64_t v28 = objc_msgSend(MEMORY[0x263F7C7F0], "currentHandler", 0.0);
        uint64_t v29 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat TSWPLineFragment::wpOffsetForCharIndex(TSWPCharIndex, BOOL, BOOL, CGFloat *) const");
        objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1144, @"invalid nil value for '%s'", "_textSource");
        uint64_t v27 = (void *)*((void *)this + 23);
      }
      uint64_t v30 = objc_msgSend(v27, "charIndexMappedFromStorage:", a2, v26);
      CFIndex v31 = v30;
      if ((*((unsigned char *)this + 25) & 0x40) != 0) {
        CFIndex v31 = v30 - *(void *)this + *((void *)this + 2);
      }
      CGFloat secondaryOffset = 0.0;
      double v32 = CTLineGetOffsetForStringIndex(*(CTLineRef *)v16, v31, &secondaryOffset);
      double v33 = *(double *)(v16 + 8);
      if (a5) {
        *a5 = v33 + secondaryOffset;
      }
      double v26 = v32 + v33;
    }
    goto LABEL_52;
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 4);
  if (v19 <= 1)
  {
    uint64_t v20 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat TSWPLineFragment::wpOffsetForCharIndex(TSWPCharIndex, BOOL, BOOL, CGFloat *) const");
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1129, @"Missing hyphen line ref");
    uint64_t v16 = *((void *)this + 24);
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 25) - v16) >> 4);
  }
  double v22 = 0.0;
  if (v19 >= 2)
  {
    uint64_t v23 = v16 + 48;
    unint64_t v24 = v19 - 1;
    while ((*(unsigned char *)(v23 + 40) & 2) == 0)
    {
      v23 += 48;
      if (!--v24) {
        goto LABEL_60;
      }
    }
    double v51 = *(double *)(v23 + 8);
    double v22 = v51 + CTLineGetTypographicBounds(*(CTLineRef *)v23, 0, 0, 0);
  }
LABEL_60:
  if (a5)
  {
    *a5 = v22;
    double v47 = v22 + *((double *)this + 6);
    double v25 = v47;
LABEL_54:
    *a5 = v47;
    goto LABEL_55;
  }
  double v25 = v22 + *((double *)this + 6);
  if (a4) {
    return v25;
  }
LABEL_56:
  double v48 = fmin(v25, CGRectGetMaxX(*(CGRect *)((char *)this + 48)) + -1.0);
  double v25 = fmax(v48, CGRectGetMinX(*(CGRect *)((char *)this + 48)));
  if (a5)
  {
    double v49 = fmin(*a5, CGRectGetMaxX(*(CGRect *)((char *)this + 48)) + -1.0);
    *a5 = fmax(v49, CGRectGetMinX(*(CGRect *)((char *)this + 48)));
  }
  return v25;
}

double TSWPInvisibleFontSize(void)
{
  return 10.0;
}

uint64_t std::default_delete<TSWPLineFragmentArray>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    unint64_t v4 = a2;
    std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&v4);
    return MEMORY[0x223CB8F20](a2, 0x1020C40D1034F40);
  }
  return result;
}

void std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
  a1[1] = v2;
}

double TSWPRunDelegateGetAscentCallback(TSWPTypesetterAttachmentMap *a1)
{
  uint64_t v2 = [(TSWPTypesetterAttachmentMap *)a1 attachment];
  uint64_t v3 = [(TSWPTypesetterAttachmentMap *)a1 layout];
  double v4 = 0.0;
  if (v2)
  {
    double v5 = (void *)v3;
    if (![(TSWPAttachment *)v2 isPartitioned])
    {
      if ([(TSWPAttachment *)v2 isDrawable])
      {
        [v5 alignmentFrame];
        double v7 = v6;
        [(TSWPAttachment *)v2 descent];
        return v7 - v8;
      }
      else
      {
        objc_opt_class();
        unint64_t v9 = (void *)TSUDynamicCast();
        if (v9)
        {
          uint64_t v10 = v9;
          [v9 size];
          double v12 = v11;
          [v10 baselineOffset];
          double v4 = v12 + v13;
        }
        objc_opt_class();
        if (TSUDynamicCast())
        {
          TSWPMeasureTextualAttachment(a1);
          return v14;
        }
      }
    }
  }
  return v4;
}

double TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v95 = *(void *)(a3 + 200);
  if (*(_DWORD *)(a1 + 108) <= a4)
  {
    uint64_t v16 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(const TSWPLayoutState *, TSWPTypesetterParamBlock *, CGRect, uint, NSRange)");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1998, @"Bad run index");
  }
  int v18 = *(CTLineRef **)(v95 + 192);
  if (*(CTLineRef **)(v95 + 200) == v18) {
    CFArrayRef GlyphRuns = 0;
  }
  else {
    CFArrayRef GlyphRuns = CTLineGetGlyphRuns(*v18);
  }
  CFArrayRef v88 = GlyphRuns;
  unint64_t v20 = [(__CFArray *)GlyphRuns count];
  unsigned int v21 = 0;
  kedouble y = (void *)*MEMORY[0x263F039A0];
  uint64_t v94 = (void *)*MEMORY[0x263F03D80];
  unint64_t v97 = a5 + a6;
  unsigned int v22 = a4;
  double x = a7;
  double y = a8;
  double width = a9;
  double height = a10;
  uint64_t v91 = a6;
  unint64_t v92 = v20;
  do
  {
    while (1)
    {
      unsigned int v100 = v21;
      if (v20 <= v21 || (*(unsigned char *)(v95 + 25) & 0x40) != 0)
      {
        BOOL v38 = 0;
        uint64_t v98 = 0;
        CFDictionaryRef Attributes = 0;
        uint64_t v37 = *(void *)(a1 + 120);
        LODWORD(v32) = v22;
        unint64_t v30 = *(void *)(v37 + 104 * v22);
        int v39 = 1;
      }
      else
      {
        uint64_t v27 = (const __CTRun *)[(__CFArray *)v88 objectAtIndexedSubscript:v21];
        CFDictionaryRef Attributes = CTRunGetAttributes(v27);
        unint64_t location = CTRunGetStringRange(v27).location;
        unint64_t v30 = location;
        unsigned int v31 = *(_DWORD *)(a1 + 108) - 1;
        if (a4 <= v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = a4;
        }
        unsigned int v22 = v32;
        uint64_t v34 = 104 * a4 + 104;
        uint64_t v33 = a4 - 1;
        while (v33 - v32 != -1)
        {
          unint64_t v35 = *(void *)(*(void *)(a1 + 120) + v34);
          ++v33;
          v34 += 104;
          if (v35 > location)
          {
            LODWORD(v32) = v33;
            unsigned int v22 = v33;
            break;
          }
        }
        uint64_t v36 = (__CTFont *)CFDictionaryGetValue(Attributes, key);
        uint64_t v37 = *(void *)(a1 + 120);
        if (v36 == *(__CTFont **)(v37 + 104 * v32 + 24))
        {
          BOOL v38 = 0;
          uint64_t v98 = 0;
          int v39 = 0;
        }
        else
        {
          value = 0;
          uint64_t v98 = v36;
          if (CFDictionaryGetValueIfPresent(Attributes, v94, (const void **)&value)
            && CFBooleanGetValue((CFBooleanRef)value))
          {
            BOOL v38 = 0;
          }
          else
          {
            GlyphCFIndex Count = CTRunGetGlyphCount(v27);
            if (GlyphCount < 1)
            {
              BOOL v38 = 0;
            }
            else
            {
              CFIndex v55 = GlyphCount;
              std::vector<long>::vector(BOOLean, GlyphCount);
              v103.unint64_t location = 0;
              v103.NSUInteger length = 0;
              CTRunGetStringIndices(v27, v103, (CFIndex *)BOOLean[0]);
              BOOL v38 = 0;
              for (i = 0; i != v55; BOOL v38 = i >= v55)
              {
                if ((IsWhitespaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80)
                                                                + 2 * *((void *)BOOLean[0] + i))) & 1) == 0)
                  break;
                ++i;
              }
              if (BOOLean[0])
              {
                BOOLean[1] = BOOLean[0];
                operator delete(BOOLean[0]);
              }
            }
            unint64_t v20 = v92;
          }
          int v39 = 0;
          uint64_t v37 = *(void *)(a1 + 120);
        }
      }
      BOOL v40 = 0;
      BOOLean[0] = 0;
      if (*(unsigned char *)(a1 + 30) && Attributes)
      {
        uint64_t v41 = a6;
        int v42 = v39;
        if (CFDictionaryGetValueIfPresent(Attributes, v94, (const void **)BOOLean)) {
          BOOL v40 = CFBooleanGetValue(BOOLean[0]) != 0;
        }
        else {
          BOOL v40 = 0;
        }
        int v39 = v42;
        a6 = v41;
      }
      unint64_t v43 = *(void *)(v37 + 104 * v32);
      BOOL v45 = v43 != a5 || a6 != 0;
      if (v43 >= v97 && v45)
      {
        unsigned int v46 = v100;
        goto LABEL_72;
      }
      char v47 = v40;
      int v96 = v39;
      uint64_t v48 = v37 + 104 * v32;
      char v50 = *(unsigned char *)(v48 + 8);
      double v49 = (unsigned char *)(v48 + 8);
      if ((v50 & 1) != 0 && v43 >= a5)
      {
        double v51 = (TSWPDrawableAttachment *)objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:");
        if (v51)
        {
          double v52 = v51;
          if (![(TSWPDrawableAttachment *)v51 isDrawable])
          {
            objc_opt_class();
            if (!TSUDynamicCast()) {
              goto LABEL_56;
            }
            double v86 = height;
            double v57 = width;
            double v58 = y;
            double v59 = x;
            objc_opt_class();
            double v60 = (void *)TSUDynamicCast();
            [v60 baselineOffset];
            double v62 = v61;
            [v60 size];
            double v64 = fmax(*(double *)(a1 + 160), v62 + fmax(v63, 1.0));
            *(double *)(a1 + 160) = v64;
            uint64_t v65 = a3;
            if (v64 > *(double *)(a3 + 192))
            {
              *(double *)(a3 + 192) = v64;
              *(void *)(a1 + 184) = 0;
            }
            double v66 = fmax(*(double *)(a1 + 176), -v62);
            *(double *)(a1 + 176) = v66;
            if (v66 > *(double *)(a3 + 104)) {
              goto LABEL_53;
            }
LABEL_54:
            int v53 = 4;
            double x = v59;
            double y = v58;
            double width = v57;
            double height = v86;
LABEL_55:
            *(_DWORD *)(v95 + 24) |= v53;
            goto LABEL_56;
          }
          if ([(TSWPDrawableAttachment *)v52 isAnchored])
          {
            int v53 = 8;
            goto LABEL_55;
          }
          if (![(TSWPDrawableAttachment *)v52 isPartitioned])
          {
            double v85 = a7;
            double v86 = height;
            double v57 = width;
            double v58 = y;
            double v59 = x;
            int v84 = TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v52, 0, 0);
            [(TSWPDrawableAttachment *)v52 descent];
            double v76 = v75;
            TSWPResolveFloatPropertyForStyles(*(void *)(v37 + 104 * v32 + 16), *(void *)(a2 + 96), 33);
            double v78 = v77;
            [v84 inlineVerticalOffset];
            double v80 = v76 + v79;
            objc_msgSend(TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v52, 0, 0), "alignmentFrame");
            double v82 = fmax(*(double *)(a1 + 160), v78 + fmax(v81, 1.0) - v80);
            *(double *)(a1 + 160) = v82;
            uint64_t v65 = a3;
            if (v82 > *(double *)(a3 + 192))
            {
              *(double *)(a3 + 192) = v82;
              *(void *)(a1 + 184) = 0;
            }
            double v66 = fmax(*(double *)(a1 + 176), v80 - v78);
            *(double *)(a1 + 176) = v66;
            a7 = v85;
            if (v66 <= *(double *)(a3 + 104)) {
              goto LABEL_54;
            }
LABEL_53:
            *(double *)(v65 + 104) = v66;
            goto LABEL_54;
          }
        }
      }
LABEL_56:
      BOOL v67 = v30 < *(void *)(a1 + 56) - 1 || v30 == a5;
      if (v67 || (IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v30)) & 1) == 0)
      {
        if (v38) {
          double v68 = 0;
        }
        else {
          double v68 = v98;
        }
        TSWPCoreTextTypesetter::pAdjustMaxHeightInfo(a1, a2, a3, v37 + 104 * v32, v68, v47);
      }
      unint64_t v20 = v92;
      if ((*v49 & 4) != 0)
      {
        uint64_t v69 = (void *)TSWPResolvePropertyForStyles(*(void *)(v37 + 104 * v32 + 16), *(void *)(a2 + 96), 40, 0);
        a6 = v91;
        if (v69)
        {
          char v70 = v69;
          unsigned int v46 = v100;
          if ([v69 isEnabled])
          {
            objc_msgSend(v70, "shadowBoundsForRect:", a7, a8, a9, a10);
            v106.origin.double x = v71;
            v106.origin.double y = v72;
            v106.size.double width = v73;
            v106.size.double height = v74;
            v104.origin.double x = x;
            v104.origin.double y = y;
            v104.size.double width = width;
            v104.size.double height = height;
            CGRect v105 = CGRectUnion(v104, v106);
            double x = v105.origin.x;
            double y = v105.origin.y;
            double width = v105.size.width;
            double height = v105.size.height;
            *(_DWORD *)(v95 + 24) |= 0x20u;
          }
          goto LABEL_71;
        }
      }
      else
      {
        a6 = v91;
      }
      unsigned int v46 = v100;
LABEL_71:
      int v39 = v96;
LABEL_72:
      unsigned int v21 = v46 + 1;
      v22 += v39;
      if (!v20) {
        break;
      }
      if (v20 <= v21) {
        return x;
      }
    }
  }
  while (v22 < *(_DWORD *)(a1 + 108));
  return x;
}

void sub_2234E1214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPCoreTextTypesetter::pAdjustMaxHeightInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CTFont *a5, char a6)
{
  double v7 = a5;
  if (!a5) {
    double v7 = *(const __CTFont **)(a4 + 24);
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  TSWPFontHeightInfoForFont(v7, &v27);
  int v12 = TSWPResolveIntPropertyForStyles(*(void *)(a4 + 16), *(void *)(a2 + 96), 36, 0);
  BOOL v13 = v12 != 0;
  if (v12)
  {
    CGFloat Size = CTFontGetSize(v7);
    CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(v7, Size * 1.5, 0, 0);
    TSWPFontHeightInfoForFont(CopyWithAttributes, v26);
    long long v27 = v26[0];
    long long v28 = v26[1];
    long long v29 = v26[2];
    long long v30 = v26[3];
  }
  else
  {
    CopyWithCFDictionaryRef Attributes = 0;
  }
  TSWPResolveFloatPropertyForStyles(*(void *)(a4 + 16), *(void *)(a2 + 96), 33);
  if (v16 != 0.0)
  {
    double v17 = v16;
    if (v12 == 2)
    {
      if (v16 >= 0.0)
      {
        double Descent = CTFontGetDescent(CopyWithAttributes);
        double v23 = v17 - (Descent - CTFontGetDescent(v7));
        if (v23 <= 0.0) {
          goto LABEL_21;
        }
        double v24 = v23 + *(double *)&v28;
LABEL_17:
        *(double *)&long long v28 = v24;
        goto LABEL_21;
      }
    }
    else
    {
      if (v12 == 1)
      {
        if (v16 <= 0.0)
        {
          double v18 = -v16;
          double Ascent = CTFontGetAscent(CopyWithAttributes);
          double v20 = v18 - (Ascent - CTFontGetAscent(v7));
          if (v20 > 0.0)
          {
            double v21 = v20 + *((double *)&v28 + 1);
LABEL_20:
            *((double *)&v28 + 1) = v21;
          }
LABEL_21:
          BOOL v13 = 1;
          goto LABEL_22;
        }
        goto LABEL_16;
      }
      if (v16 > 0.0)
      {
LABEL_16:
        double v24 = v16 + *(double *)&v28;
        goto LABEL_17;
      }
      if (v16 >= 0.0) {
        goto LABEL_21;
      }
    }
    double v21 = *((double *)&v28 + 1) - v16;
    goto LABEL_20;
  }
LABEL_22:
  if (CopyWithAttributes) {
    CFRelease(CopyWithAttributes);
  }
  if (v13) {
    *(_DWORD *)(*(void *)(a3 + 200) + 24) |= 0x400u;
  }
  return TSWPCoreTextTypesetter::pAdjustMaxHeightInfoForHeightInfo(a1, (uint64_t)&v27, a3, a6);
}

void *TSWPResolveFloatPropertyForStyles(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  v10[2] = *MEMORY[0x263EF8340];
  v10[0] = a1;
  v10[1] = a2;
  char v5 = 1;
  do
  {
    uint64_t result = (void *)v10[v4];
    if (result)
    {
      uint64_t result = (void *)[result floatValueForProperty:a3];
      double v8 = v7;
    }
    else
    {
      double v8 = INFINITY;
    }
    char v9 = v5 & (v8 == INFINITY);
    uint64_t v4 = 1;
    char v5 = 0;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint64_t TSWPCoreTextTypesetter::pAdjustMaxHeightInfoForHeightInfo(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (!*(unsigned char *)(result + 30) || (a4 & 1) != 0)
  {
    *(float64x2_t *)(result + 16_Block_object_dispose(&STACK[0x560], 8) = vmaxnmq_f64(*(float64x2_t *)(result + 168), *(float64x2_t *)(a2 + 16));
    double v4 = 0.0;
  }
  else
  {
    double v4 = (*(double *)(a2 + 16) + *(double *)(a2 + 24)) * 0.5;
    double v5 = (*(double *)(result + 168) + *(double *)(result + 176)) * 0.5;
    if (v5 < v4) {
      double v5 = (*(double *)(a2 + 16) + *(double *)(a2 + 24)) * 0.5;
    }
    *(double *)(result + 16_Block_object_dispose(&STACK[0x560], 8) = v5;
    *(double *)(result + 176) = v5;
  }
  *(double *)(result + 152) = fmax(*(double *)(result + 152), *(double *)a2);
  *(float64x2_t *)(result + 192) = vmaxnmq_f64(*(float64x2_t *)(result + 192), *(float64x2_t *)(a2 + 40));
  *(double *)(result + 20_Block_object_dispose(&STACK[0x560], 8) = fmax(*(double *)(result + 208), *(double *)(a2 + 56));
  if (v4 == 0.0) {
    double v4 = *(double *)(a2 + 16);
  }
  double v6 = v4 + *(double *)(a2 + 32);
  if (*(double *)(a3 + 192) >= v6) {
    double v6 = *(double *)(a3 + 192);
  }
  *(double *)(a3 + 192) = v6;
  return result;
}

void TSWPLayoutChore::pPostProcessAttachments(uint64_t a1, TSWPLineFragment ****a2)
{
  unint64_t v4 = [*(id *)(a1 + 184) anchoredRange];
  unint64_t v30 = v5;
  double v6 = (__int16 *)malloc_type_malloc(0x190uLL, 0x1000040BDFB0063uLL);
  float v7 = *a2;
  double v8 = **a2;
  char v9 = v7[1];
  if (v8 != v9)
  {
    uint64_t v27 = -(uint64_t)v4;
    long long v28 = v7[1];
    unint64_t v10 = 200;
    do
    {
      if (*(unsigned char *)(a1 + 700)) {
        break;
      }
      double v11 = *v8;
      if ((*((unsigned char *)*v8 + 24) & 0xC) != 0)
      {
        uint64_t v12 = *(void *)v11;
        unint64_t v13 = *((void *)v11 + 1);
        if (v10 < v13)
        {
          double v6 = (__int16 *)malloc_type_realloc(v6, 2 * v13, 0x1000040BDFB0063uLL);
          objc_msgSend(*(id *)(a1 + 8), "getCharacters:range:", v6, v12, v13);
          unint64_t v10 = v13;
LABEL_8:
          long long v29 = v11;
          unint64_t v31 = v10;
          uint64_t v32 = v8;
          uint64_t v14 = 0;
          uint64_t v33 = v27 + v12;
          do
          {
            if (v6[v14] == -4)
            {
              unint64_t v15 = (void *)[*(id *)(a1 + 8) attachmentAtCharIndex:v12 + v14];
              if ([v15 isDrawable])
              {
                if (([v15 isPartitioned] & 1) == 0
                  && (![v15 isAnchored] || v4 <= v12 + v14 && v33 + v14 < v30)
                  && ((objc_opt_respondsToSelector() & 1) == 0
                   || (objc_msgSend(*(id *)(a1 + 2056), "siblingTargetIsManipulatingDrawable:", objc_msgSend(v15, "drawable")) & 1) == 0))
                {
                  unint64_t v16 = v4;
                  char v17 = objc_msgSend(v15, "isAnchored", v27);
                  double v18 = *(void **)(a1 + 2056);
                  uint64_t v19 = [v15 drawable];
                  if (v17)
                  {
                    double v20 = (void *)[v18 validatedLayoutForAnchoredDrawable:v19];
                  }
                  else
                  {
                    double v20 = (void *)[v18 layoutForInlineDrawable:v19];
                    objc_msgSend((id)objc_msgSend(v20, "layoutController"), "validateLayoutWithDependencies:", v20);
                  }
                  unint64_t v4 = v16;
                  if (v20)
                  {
                    if (([v15 isAnchored] & 1) == 0)
                    {
                      double v21 = TSWPLineFragment::baselineAtCharIndex(v29, (TSWPLineFragment *)(v12 + v14), *(TSWPStorage **)(a1 + 184), 0);
                      [v20 inlineVerticalOffset];
                      double v23 = v21 + v22;
                      [v20 alignmentFrame];
                      double v25 = v23 - v24;
                      [v15 descent];
                      [v20 setAdjustedInterimPositionY:v26 + v25];
                      [v20 fixTransformFromInterimPosition];
                    }
                  }
                }
              }
            }
            ++v14;
          }
          while (v13 != v14);
          unint64_t v10 = v31;
          double v8 = v32;
          char v9 = v28;
          goto LABEL_25;
        }
        objc_msgSend(*(id *)(a1 + 8), "getCharacters:range:", v6, *(void *)v11, *((void *)v11 + 1));
        if (v13) {
          goto LABEL_8;
        }
      }
LABEL_25:
      v8 += 2;
    }
    while (v8 != v9);
  }

  free(v6);
}

void *TSWPLayoutChore::validatedLayoutForInlineAttachment(id *this, TSWPDrawableAttachment *a2, id *a3, const __CFDictionary *a4)
{
  float v7 = objc_msgSend(this[257], "layoutForInlineDrawable:", -[TSWPDrawableAttachment drawable](a2, "drawable"));
  if (a3 && a4)
  {
    [a3[13] wpBounds];
    double Width = CGRectGetWidth(v11);
    if (([this[257] autosizeFlags] & 0xC) != 0)
    {
      [this[257] maxSize];
      double Width = v9;
    }
    objc_msgSend(v7, "willLayoutInlineWithTextAttributes:columnWidth:", a4, fmax(Width - *((double *)a3 + 31) - *((double *)a3 + 27), 18.0));
  }
  objc_msgSend((id)objc_msgSend(v7, "layoutController"), "validateLayoutWithDependencies:", v7);
  return v7;
}

double TSWPRunDelegateGetWidthCallback(TSWPTypesetterAttachmentMap *a1)
{
  uint64_t v2 = [(TSWPTypesetterAttachmentMap *)a1 attachment];
  double v3 = 0.0;
  if (v2)
  {
    unint64_t v4 = v2;
    if ([(TSWPAttachment *)v2 isDrawable])
    {
      if ([(TSWPAttachment *)v4 isPartitioned])
      {
        return 16000.0;
      }
      else if (![(TSWPAttachment *)v4 isAnchored])
      {
        [(TSDAbstractLayout *)[(TSWPTypesetterAttachmentMap *)a1 layout] alignmentFrame];
        return v7;
      }
    }
    else
    {
      objc_opt_class();
      unint64_t v5 = (void *)TSUDynamicCast();
      if (v5)
      {
        [v5 size];
        double v3 = v6;
      }
      objc_opt_class();
      if (TSUDynamicCast()) {
        return TSWPMeasureTextualAttachment(a1);
      }
    }
  }
  return v3;
}

double TSDRectWithSize()
{
  return 0.0;
}

double TSWPCoreTextTypesetter::pAdditionalOffsetForLineFragment(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  if ((a4 & 0x20000) != 0) {
    return 0.0;
  }
  uint64_t v6 = objc_msgSend(*(id *)(a1 + 64), "charRangeMappedFromStorage:", *a3, a3[1]);
  uint64_t v8 = v7;
  double v9 = (TSWPDrawableAttachment *)[*(id *)(a1 + 64) attachmentAtCharIndex:v6];
  if (![(TSWPDrawableAttachment *)v9 isDrawable]
    || [(TSWPDrawableAttachment *)v9 isAnchored]
    || [(TSWPDrawableAttachment *)v9 isPartitioned])
  {
    return 0.0;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10 == 1)
  {
    char v11 = 0;
  }
  else
  {
    if (v10 != 2) {
      return 0.0;
    }
    char v11 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * (v8 + v6) - 2)) ^ 1;
  }
  if (*(_DWORD *)(a2 + 388) != 2 || (v11 & 1) != 0) {
    return 0.0;
  }
  uint64_t v12 = TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v9, 0, 0);

  [v12 inlineCenteredAlignmentOffset];
  return result;
}

uint64_t TSWPLayoutChore::pLayoutPiece(uint64_t a1, void *a2, int a3, double *a4, _DWORD *a5, _WORD *a6, int *a7, double a8, double a9)
{
  double v9 = a7;
  double v12 = a9;
  uint64_t v14 = a2;
  uint64_t v16 = 0;
  uint64_t v142 = *MEMORY[0x263EF8340];
  double v140 = a9;
  uint64_t v139 = 0x4028000000000000;
  char v17 = (long long *)MEMORY[0x263F001A8];
  do
  {
    double v18 = &v141[v16];
    *(void *)double v18 = 0;
    *((void *)v18 + 1) = 0;
    long long v19 = *v17;
    long long v20 = v17[1];
    *((_OWORD *)v18 + 1) = *v17;
    *((_OWORD *)v18 + 2) = v20;
    *((_OWORD *)v18 + 3) = v19;
    *((_OWORD *)v18 + 4) = v20;
    *((void *)v18 + 10) = 0;
    v16 += 88;
  }
  while (v16 != 880);
  TSWPLayoutChore::pCacheErasableInfos(a1, a2, *a7, (uint64_t)v141);
  long long v120 = (TSWPLayoutState *)(a1 + 80);
  if (*(void *)(a1 + 232) < 2uLL || v21 == 0.0)
  {
    BOOL v24 = 0;
    double v22 = v12;
  }
  else
  {
    double v22 = rint(v21 + *(double *)(a1 + 216) * 2.0);
    double v23 = rint(v12);
    BOOL v24 = v22 < v23;
    if (v22 >= v23) {
      double v22 = v12;
    }
  }
  double v138 = v22;
  BOOL v137 = v24;
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v135, v120);
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v135);
  int v121 = v24;
  TSWPTopicNumberHints::TSWPTopicNumberHints(&v134, (const TSWPTopicNumberHints *)(a1 + 768));
  unsigned int v25 = 0;
  char v26 = 0;
  char v27 = 0;
  char v124 = v24;
  char v125 = 0;
  LOBYTE(v122) = 0;
  int v123 = a3;
  int v118 = a4;
  char v119 = a6;
  NSUInteger v126 = v9;
  double v116 = v14;
  while (1)
  {
    *a6 = 0;
    char v132 = 0;
    *(void *)(a1 + 240) = *v9;
    unsigned int v133 = v25 + 1;
    if (v26)
    {
      id v28 = *(id *)(a1 + 80);
      if (v135[0] <= v28) {
        long long v29 = *(unsigned char **)(a1 + 80);
      }
      else {
        long long v29 = v135[0];
      }
      if (v135[0] >= v28) {
        unint64_t v30 = *(unsigned char **)(a1 + 80);
      }
      else {
        unint64_t v30 = v135[0];
      }
      TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v135);
      TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), &v134);
      if (*(void *)(a1 + 680))
      {
        v143.NSUInteger length = v29 - v30;
        v143.unint64_t location = (NSUInteger)v30;
        TSWPLayoutChore::removeFootnotesInRange((id *)a1, v143);
      }
      TSWPCoreTextTypesetter::endParagraphLayout(*(TSWPCoreTextTypesetter **)(a1 + 2024));
    }
    unint64_t v31 = *(void *)(a1 + 80);
    if (v31 > *(void *)(a1 + 64))
    {
      uint64_t v32 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v33 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
      objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3597, @"Bad _state.charIndex");
      unint64_t v31 = *(void *)v120;
    }
    uint64_t v34 = *(void *)(a1 + 2056);
    uint64_t v35 = *(void *)(a1 + 8);
    uint64_t v36 = *v126;
    double v37 = *a4;
    double v38 = v138;
    uint64_t v39 = [*(id *)(a1 + 24) styleProvider];
    LOBYTE(v113) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:v34 storage:v35 charIndex:v31 firstColumnIndex:v36 precedingHeight:0 height:v39 alreadyHasMargins:v37 styleProvider:v38 vertical:v113];
    BOOL v131 = 0;
    unsigned __int8 v130 = 0;
    double v9 = v126;
    uint64_t v40 = *v126;
    uint64_t v41 = *(void *)(a1 + 232);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v14, "columns"), "objectAtIndexedSubscript:", v40), "wpBounds");
    NSUInteger v127 = v41 + v40;
    if (v42 <= 0.0 && ([v14 autosizeFlags] & 1) == 0)
    {
      int v67 = 1;
      goto LABEL_62;
    }
    if ((v124 == 0 || (v125 & 1) == 0) | v27 & 1)
    {
      int v44 = v123;
    }
    else
    {
      int v44 = v123;
      if (!*(unsigned char *)(a1 + 414)) {
        int v44 = v123 | 0x10000;
      }
    }
    int v123 = v44;
    NSUInteger v45 = *v126;
    if (v127 <= v45) {
      unint64_t v46 = *v126;
    }
    else {
      unint64_t v46 = v41 + v40;
    }
    if (v127 >= v45) {
      unint64_t v47 = *v126;
    }
    else {
      unint64_t v47 = v41 + v40;
    }
    int v122 = TSWPLayoutChore::pLayoutColumns(a1, v44 & 0xFFFFFFFE, v47, v46 - v47, *(void **)(a1 + 2056), (uint64_t)a6, (uint64_t)&v132, &v131, &v130);
    if (*(_DWORD *)(a1 + 56) == 2) {
      goto LABEL_43;
    }
    double v49 = *(void **)(a1 + 680);
    if (!v49) {
      goto LABEL_43;
    }
    [v49 footnoteHeight];
    if (v50 <= 0.0) {
      goto LABEL_43;
    }
    double v51 = *(double *)(a1 + 672);
    double v52 = *a4;
    double v53 = v50 + *a4;
    double v54 = v51 - v53;
    if (v38 <= v51 - v53) {
      goto LABEL_43;
    }
    double v138 = v51 - v53;
    uint64_t v55 = *(void *)(a1 + 2056);
    uint64_t v56 = *(void *)(a1 + 8);
    uint64_t v57 = *(void *)(a1 + 80);
    uint64_t v58 = *v126;
    uint64_t v59 = [*(id *)(a1 + 24) styleProvider];
    LOBYTE(v114) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:v55 storage:v56 charIndex:v57 firstColumnIndex:v58 precedingHeight:0 height:v59 alreadyHasMargins:v52 styleProvider:v54 vertical:v114];
    if (v46 - v47 >= 2) {
      break;
    }
    double v12 = v54;
    a4 = v118;
    a6 = v119;
    double v9 = v126;
    uint64_t v14 = v116;
LABEL_43:
    if (v132) {
      BOOL v60 = *a6 == 5;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60) {
      int v61 = 0;
    }
    else {
      int v61 = v122 ^ 1;
    }
    char v62 = TSWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(a1, v61, *v9, (uint64_t)v135, (uint64_t)v141, v12, v48, v127, v121, (double *)&v139, &v140, &v138, a4, &v137, &v133);
    char v124 = v137;
    if ((v62 & 1) == 0)
    {
LABEL_60:
      int v67 = 0;
      goto LABEL_62;
    }
    if (!(!v137 | v125 & 1))
    {
      uint64_t v63 = [v14 columns];
      if (v46 <= v47)
      {
        char v27 = 0;
        char v124 = 1;
        char v125 = 1;
      }
      else
      {
        double v64 = (void *)v63;
        do
        {
          char v65 = objc_msgSend((id)objc_msgSend(v64, "objectAtIndexedSubscript:", v47), "requiresGlyphVectorsForHeightMeasurement");
          char v27 = v65;
          BOOL v60 = v46 - 1 == v47++;
          if (v60) {
            char v66 = 1;
          }
          else {
            char v66 = v65;
          }
        }
        while ((v66 & 1) == 0);
        char v125 = 1;
      }
    }
LABEL_59:
    unsigned int v25 = v133;
    char v26 = 1;
    if (v133 >= 0x10) {
      goto LABEL_60;
    }
  }
  if (*a5 < 2u
    || (v144.unint64_t location = v47,
        v144.NSUInteger length = v46 - v47,
        double v43 = TSWPLayoutChore::pMinimumLayoutHeightForColumnRange((id *)a1, v144, 0),
        v43 <= v54))
  {
    *(unsigned char *)(a1 + 640) = 1;
    double v12 = v54;
    a4 = v118;
    a6 = v119;
    double v9 = v126;
    uint64_t v14 = v116;
    goto LABEL_59;
  }
  int v67 = 1;
  double v12 = v54;
  double v9 = v126;
LABEL_62:
  char v68 = v123;
  if (v124)
  {
    char v68 = a3;
    if ((a3 & 0x10000) == 0)
    {
      TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v129, (const TSWPLayoutState *)v135);
      TSWPLayoutChore::pCreateLineRefsAfterColumnBalancing(a1, (uint64_t)v129, a3);
      TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v129);
    }
  }
  if (*a5 < 2u)
  {
    if (v67) {
      goto LABEL_121;
    }
  }
  else
  {
    BOOL v131 = 0;
    NSUInteger v69 = *v9;
    if (v127 <= v69) {
      NSUInteger v70 = *v9;
    }
    else {
      NSUInteger v70 = v127;
    }
    if (v127 >= v69) {
      NSUInteger v71 = *v9;
    }
    else {
      NSUInteger v71 = v127;
    }
    CGFloat v72 = (void *)[*(id *)(a1 + 2056) columns];
    v145.NSUInteger length = v70 - v71;
    v145.unint64_t location = v71;
    double v43 = TSWPLayoutChore::pMinimumLayoutHeightForColumnRange((id *)a1, v145, &v131);
    if (v43 > v12 || !v131) {
      goto LABEL_106;
    }
    if (v135[19] == (id)1)
    {
      CGFloat v74 = (void *)[v72 objectAtIndexedSubscript:v135[20]];
      [v74 textHeight];
      double v76 = v75;
      BOOL v78 = [v74 countLines] == 1 && v136 != 0;
      double v43 = v12 - v76;
      if (v12 - v76 >= v76) {
        BOOL v78 = 0;
      }
      if ((v67 | v78))
      {
LABEL_106:
        if (*(_DWORD *)(a1 + 56) != 2 && *(void *)(a1 + 680) && v70 != v71)
        {
          uint64_t v99 = objc_msgSend(v72, "objectAtIndexedSubscript:", v71, v43);
          if (!v99)
          {
            unsigned int v100 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
            uint64_t v101 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
            objc_msgSend(v100, "handleFailureInFunction:file:lineNumber:description:", v101, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3709, @"Nil first column in column array");
          }
          double v102 = (void *)[v72 objectAtIndexedSubscript:v70 - 1];
          if (!v102)
          {
            CFRange v103 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
            uint64_t v104 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
            objc_msgSend(v103, "handleFailureInFunction:file:lineNumber:description:", v104, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3712, @"Nil last column in column array");
          }
          NSUInteger v105 = [v99 range];
          uint64_t v106 = [v102 range];
          if (v105 <= v106 + v107) {
            NSUInteger v108 = v106 + v107;
          }
          else {
            NSUInteger v108 = v105;
          }
          if (v105 >= v106 + v107) {
            v109.unint64_t location = v106 + v107;
          }
          else {
            v109.unint64_t location = v105;
          }
          v109.NSUInteger length = v108 - v109.location;
          TSWPLayoutChore::removeFootnotesInRange((id *)a1, v109);
        }
        TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v135);
        *char v119 = 10;
        goto LABEL_121;
      }
    }
    else if (v67)
    {
      goto LABEL_106;
    }
  }
  uint64_t v79 = objc_msgSend(*(id *)(a1 + 2056), "columns", v43);
  if (*(void *)(a1 + 232))
  {
    double v80 = (void *)v79;
    uint64_t v81 = 0;
    unsigned int v82 = 0;
    do
    {
      int v83 = *v126;
      unint64_t v84 = v82 + *v126;
      if ([v80 count] > v84
        && (v85 = (TSWPColumn *)[v80 objectAtIndexedSubscript:v82 + v83], (double v86 = v85) != 0))
      {
        if (v68)
        {
          [(TSWPColumn *)v85 wpBounds];
          v147.origin.double x = v87;
          v147.origin.double y = v88;
          v147.size.double width = v89;
          v147.size.double height = v90;
          if (CGRectEqualToRect(*(CGRect *)&v141[88 * v81 + 16], v147))
          {
            TSWPLayoutChore::pCompareLineFragments(a1, (TSWPLineFragmentArray **)&v141[88 * v81], (TSWPLineFragmentArray **)[(TSWPColumn *)v86 lineFragmentArray], v86, v68, *(double *)&v141[88 * v81 + 80]);
          }
          else
          {
            [(TSWPColumn *)v86 erasableBounds:1];
            v148.origin.double x = v93;
            v148.origin.double y = v94;
            v148.size.double width = v95;
            v148.size.double height = v96;
            CGRect v149 = CGRectUnion(*(CGRect *)&v141[88 * v81 + 48], v148);
            CGRect v146 = CGRectUnion(v149, v149);
            objc_msgSend(*(id *)(a1 + 2056), "setNeedsDisplayInTargetRect:", v146.origin.x, v146.origin.y, v146.size.width, v146.size.height);
          }
        }
      }
      else
      {
        uint64_t v91 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v92 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
        objc_msgSend(v91, "handleFailureInFunction:file:lineNumber:description:", v92, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3737, @"Invalid columnIndex: %lu columns.count: %lu", v84, objc_msgSend(v80, "count"));
      }
      uint64_t v81 = ++v82;
    }
    while (*(void *)(a1 + 232) > (unint64_t)v82);
  }
  *NSUInteger v126 = v127;
  if (v132)
  {
    TSWPLayoutChore::pSetupStateForColumnMetrics((id *)a1);
    uint64_t v97 = *v126;
    *(void *)(a1 + 224) = v97;
    *(void *)(a1 + 240) = v97;
    uint64_t v98 = 1;
    if (!((*v119 == 5) | v122 & 1)
      && *v118 < a8
      && *(void *)(a1 + 80) < *(void *)(a1 + 40)
      && (objc_msgSend(*(id *)(a1 + 192), "alwaysStartsNewTarget", *v118) & 1) == 0)
    {
      uint64_t v98 = 0;
      ++*a5;
    }
  }
  else
  {
LABEL_121:
    uint64_t v98 = 1;
  }
  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)a1, (uint64_t)v128);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v128);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(&v134);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v135);
  for (uint64_t i = 800; i != -80; i -= 88)
  {
    uint64_t v111 = *(std::__shared_weak_count **)&v141[i];
    if (v111) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v111);
    }
  }
  return v98;
}

void sub_2234E27EC(_Unwind_Exception *a1)
{
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)&STACK[0x600]);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0x630]);
  uint64_t v2 = 800;
  while (1)
  {
    double v3 = *(std::__shared_weak_count **)((char *)&STACK[0x900] + v2);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
    v2 -= 88;
    if (v2 == -80) {
      _Unwind_Resume(a1);
    }
  }
}

double TSWPLineFragmentArray::erasableBounds(TSWPLineFragmentArray *this, char a2, TSWPStorage *a3)
{
  double x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v7 = *(NSUInteger ***)this;
  uint64_t v8 = (NSUInteger **)*((void *)this + 1);
  if (v8 != *(NSUInteger ***)this)
  {
    if ((a2 & 2) != 0)
    {
      char v11 = (CGFloat *)*(v8 - 2);
      v8 -= 2;
      v37.origin.double x = v11[10];
      v37.origin.CGFloat y = v11[11];
      v37.size.CGFloat width = v11[12];
      v37.size.CGFloat height = v11[13] - v11[20];
      CGRect v30 = CGRectUnion(*MEMORY[0x263F001A0], v37);
      double x = v30.origin.x;
      CGFloat y = v30.origin.y;
      CGFloat width = v30.size.width;
      CGFloat height = v30.size.height;
      uint64_t v7 = *(NSUInteger ***)this;
    }
    if (v8 != v7)
    {
      double v12 = v8;
      do
      {
        uint64_t v13 = (uint64_t)*(v12 - 2);
        v12 -= 2;
        v31.origin.double x = x;
        v31.origin.CGFloat y = y;
        v31.size.CGFloat width = width;
        v31.size.CGFloat height = height;
        CGRect v32 = CGRectUnion(v31, *(CGRect *)(v13 + 80));
        double x = v32.origin.x;
        CGFloat y = v32.origin.y;
        CGFloat width = v32.size.width;
        CGFloat height = v32.size.height;
        uint64_t v14 = *v12;
        if ((*((unsigned char *)*v12 + 27) & 4) != 0)
        {
          NSUInteger v15 = v14[1];
          if (v15)
          {
            NSUInteger v16 = *v14;
            v28.unint64_t location = *v14;
            v28.NSUInteger length = 1;
            v38.origin.double x = TSWPLineFragment::glyphRectForLineRange((TSWPLineFragment *)v14, v28, a3, 1);
            v38.origin.CGFloat y = v17;
            v38.size.CGFloat width = v18;
            v38.size.CGFloat height = v19;
            v33.origin.double x = x;
            v33.origin.CGFloat y = y;
            v33.size.CGFloat width = width;
            v33.size.CGFloat height = height;
            CGRect v34 = CGRectUnion(v33, v38);
            CGFloat v20 = v34.origin.x;
            CGFloat v21 = v34.origin.y;
            CGFloat v22 = v34.size.width;
            CGFloat v23 = v34.size.height;
            v29.unint64_t location = v15 + v16 - 1;
            v29.NSUInteger length = 1;
            v39.origin.double x = TSWPLineFragment::glyphRectForLineRange((TSWPLineFragment *)*(v8 - 2), v29, a3, 1);
            v39.origin.CGFloat y = v24;
            v39.size.CGFloat width = v25;
            v39.size.CGFloat height = v26;
            v35.origin.double x = v20;
            v35.origin.CGFloat y = v21;
            v35.size.CGFloat width = v22;
            v35.size.CGFloat height = v23;
            CGRect v36 = CGRectUnion(v35, v39);
            double x = v36.origin.x;
            CGFloat y = v36.origin.y;
            CGFloat width = v36.size.width;
            CGFloat height = v36.size.height;
          }
        }
        uint64_t v8 = v12;
      }
      while (v12 != v7);
    }
  }
  return x;
}

void TSWPLayoutChore::~TSWPLayoutChore(TSWPLayoutChore *this)
{
  *(void *)this = &unk_26D6879E0;
  (*(void (**)(void))(**((void **)this + 253) + 24))(*((void *)this + 253));
  uint64_t v2 = *((void *)this + 253);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  double v3 = (const void *)*((void *)this + 258);
  if (v3) {
    CFRelease(v3);
  }
  unint64_t v4 = (void **)((char *)this + 2000);
  std::vector<TSWPLayoutState>::__destroy_vector::operator()[abi:ne180100](&v4);
  TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState((TSWPLayoutChore *)((char *)this + 1928));
  TSWPLineBalancingLayoutState::~TSWPLineBalancingLayoutState((TSWPLayoutChore *)((char *)this + 1128));
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState((TSWPLayoutChore *)((char *)this + 864));
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)this + 17);
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)this + 16);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutChore *)((char *)this + 80));
}

{
  uint64_t vars8;

  TSWPLayoutChore::~TSWPLayoutChore(this);

  JUMPOUT(0x223CB8F20);
}

void TSWPTopicNumberHints::~TSWPTopicNumberHints(TSWPTopicNumberHints *this)
{
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy((uint64_t)this, (void *)this->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
}

void sub_2234E2C1C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void TSWPCoreTextTypesetter::endLayout(TSWPCoreTextTypesetter *this)
{
  if (*((unsigned char *)this + 34)) {
    TSWPCoreTextTypesetter::endParagraphLayout(this);
  }
  *((unsigned char *)this + 32) = 0;
}

void TSWPCoreTextTypesetter::endParagraphLayout(TSWPCoreTextTypesetter *this)
{
  if (*((unsigned char *)this + 34))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
    *((void *)this + 29) = 0;
    *((void *)this + 30) = 0;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v2);
    }
    if (*((_DWORD *)this + 27))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        CFRelease(*(CFTypeRef *)(*((void *)this + 15) + v3 + 32));
        CFRelease(*(CFTypeRef *)(*((void *)this + 15) + v3 + 24));
        ++v4;
        v3 += 104;
      }
      while (v4 < *((unsigned int *)this + 27));
    }
    unint64_t v5 = (void *)*((void *)this + 15);
    if (v5)
    {
      free(v5);
      *((void *)this + 15) = 0;
    }
    uint64_t v6 = (void *)*((void *)this + 16);
    if (v6)
    {
      free(v6);
      *((void *)this + 16) = 0;
    }
    *((_DWORD *)this + 27) = 0;
    *((unsigned char *)this + 34) = 0;

    *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
    *((void *)this + 9) = 0;

    *((void *)this + 12) = 0;
    *((void *)this + 35) = 0;
  }
}

uint64_t TSWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(uint64_t a1, int a2, NSUInteger a3, uint64_t a4, uint64_t a5, double a6, uint64_t a7, NSUInteger a8, int a9, double *a10, double *a11, double *a12, double *a13, unsigned char *a14, _DWORD *a15)
{
  if (!a2
    || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2056), "columnMetricsForCharIndex:outRange:", *(void *)(a1 + 80), 0), "alwaysStartsNewTarget") & 1) != 0)
  {
    if (!*a14) {
      return 0;
    }
    if (*a15 != 1 || a9 == 0)
    {
      double v22 = *a12 + 1.0;
      *a10 = v22;
      double v23 = fmax(*a11, v22);
      *a11 = v23;
      double v40 = rint((v23 + *a10) * 0.5);
    }
    else
    {
      *a14 = 0;
      *a15 = 0;
      *a10 = *a12;
      double v40 = *a11;
    }
    *a12 = v40;
    return 1;
  }
  CGFloat v25 = (void *)[*(id *)(a1 + 2056) columns];
  if (*(void *)(a1 + 232) == 1)
  {
    CGFloat v26 = v25;
    char v27 = (void *)[v25 objectAtIndexedSubscript:a3];
    [v27 contentBottom];
    double v29 = v28;
    uint64_t Object = TSWPLineFragmentArray::lastObject(*(TSWPLineFragmentArray **)[v27 lineFragmentArray]);
    if (Object)
    {
      double MaxY = CGRectGetMaxY(*(CGRect *)(Object + 48));
      if (v29 < MaxY) {
        double v29 = MaxY;
      }
    }
    [v27 wpBounds];
    *a12 = fmin(ceil(v29 - v32), a6);
    uint64_t v33 = *(void *)(a1 + 2056);
    uint64_t v34 = *(void *)(a1 + 8);
    uint64_t v35 = [v27 startCharIndex];
    double v36 = *a13;
    double v37 = *a12;
    uint64_t v38 = [*(id *)(a1 + 24) styleProvider];
    LOBYTE(v57) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:v33 storage:v34 charIndex:v35 firstColumnIndex:a3 precedingHeight:0 height:v38 alreadyHasMargins:v36 styleProvider:v37 vertical:v57];
    CGRect v39 = v26;
    goto LABEL_35;
  }
  uint64_t v58 = v25;
  uint64_t v59 = a5;
  if (a3 <= a8) {
    NSUInteger v41 = a8;
  }
  else {
    NSUInteger v41 = a3;
  }
  if (a3 >= a8) {
    v42.unint64_t location = a8;
  }
  else {
    v42.unint64_t location = a3;
  }
  v42.NSUInteger length = v41 - v42.location;
  double v43 = ceil(fmax(*a10, fmin(TSWPLayoutChore::pMinimumLayoutHeightForColumnRange((id *)a1, v42, 0), *a11)));
  *a10 = v43;
  double v44 = *a12;
  if (*a12 < v43)
  {
    *a12 = v43;
    uint64_t v45 = *(void *)(a1 + 2056);
    uint64_t v46 = *(void *)(a1 + 8);
    uint64_t v47 = *(void *)(a1 + 80);
    double v48 = *a13;
    uint64_t v49 = objc_msgSend(*(id *)(a1 + 24), "styleProvider", v44);
    LOBYTE(v57) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:v45 storage:v46 charIndex:v47 firstColumnIndex:a3 precedingHeight:0 height:v49 alreadyHasMargins:v48 styleProvider:v43 vertical:v57];
    CGRect v39 = v58;
LABEL_35:
    objc_msgSend((id)objc_msgSend(v39, "objectAtIndexedSubscript:", a3), "wpBounds");
    CGFloat v54 = CGRectGetMaxY(v61);
    uint64_t result = 0;
    *a13 = v54 + *(double *)(a1 + 216);
    return result;
  }
  CGRect v39 = v58;
  if (*a12 <= v43) {
    goto LABEL_35;
  }
  if (*a15 == 1 && a9 != 0)
  {
    if (!*(void *)(a1 + 232)) {
      goto LABEL_35;
    }
    uint64_t v51 = 0;
    unsigned int v52 = 1;
    while (1)
    {
      objc_msgSend((id)objc_msgSend(v58, "objectAtIndexedSubscript:", *(void *)(a4 + 160) + v51, v44), "contentBottom");
      if (v44 != *(double *)(v59 + 88 * v51 + 80)) {
        break;
      }
      uint64_t v51 = v52;
      if (*(void *)(a1 + 232) <= (unint64_t)v52++) {
        goto LABEL_35;
      }
    }
    double v44 = *a12;
  }
  uint64_t result = 1;
  *a14 = 1;
  *a11 = v44;
  *a12 = floor((v44 + *a10) * 0.5);
  if (*a10 >= *a11)
  {
    uint64_t v55 = objc_msgSend(MEMORY[0x263F7C7F0], "currentHandler", *a10);
    uint64_t v56 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(const BOOL, const NSUInteger, const TSWPLayoutState &, const tswpColumnErasableInfo *, uint, const NSUInteger, const BOOL, const CGFloat, CGFloat &, CGFloat &, CGFloat &, CGFloat &, BOOL &, uint &)");
    objc_msgSend(v55, "handleFailureInFunction:file:lineNumber:description:", v56, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3883, @"Bad minHeight/maxHeight");
    return 1;
  }
  return result;
}

void std::vector<TSWPLayoutState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)(v4 - 688));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void TSWPLineBalancingLayoutState::~TSWPLineBalancingLayoutState(TSWPLineBalancingLayoutState *this)
{
  uint64_t v2 = (void *)*((void *)this + 92);
  if (v2)
  {
    *((void *)this + 93) = v2;
    operator delete(v2);
  }

  TSWPLayoutState::~TSWPLayoutState(this);
}

void TSWPCoreTextTypesetter::~TSWPCoreTextTypesetter(TSWPCoreTextTypesetter *this)
{
  TSWPCoreTextTypesetter::~TSWPCoreTextTypesetter(this);

  JUMPOUT(0x223CB8F20);
}

{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_26D687FB0;
  if (*((unsigned char *)this + 34))
  {
    uint64_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"virtual TSWPCoreTextTypesetter::~TSWPCoreTextTypesetter()"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 226, @"Didn't end paragraph layout");
  }
  TSWPCoreTextTypesetter::pDestroyCachedLabelFont((id *)this);

  *((void *)this + 27) = 0;
  if (*((unsigned char *)this + 32)) {
    (*(void (**)(TSWPCoreTextTypesetter *))(*(void *)this + 24))(this);
  }
  TSWPLineStylingCTState::~TSWPLineStylingCTState((id *)this + 41);
  TSWPDropCapCTState::~TSWPDropCapCTState((id *)this + 36);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
}

void TSWPLineStylingCTState::~TSWPLineStylingCTState(id *this)
{
  *this = 0;
}

{

  *this = 0;
}

void TSWPCoreTextTypesetter::pDestroyCachedLabelFont(id *this)
{
  this[32] = 0;
  id v2 = this[33];
  if (v2)
  {
    CFRelease(v2);
    this[33] = 0;
  }
  id v3 = this[31];
  if (v3)
  {
    CFRelease(v3);
    this[31] = 0;
  }
  this[34] = 0;
}

void TSWPDropCapCTState::~TSWPDropCapCTState(id *this)
{
  *this = 0;
}

{

  *this = 0;
}

void sub_2234E36FC(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x10E1C405C8FB0CCLL);
  _Unwind_Resume(a1);
}

TSWPTopicNumberHints *TSWPTopicNumberHints::operator=(TSWPTopicNumberHints *this, TSWPTopicNumberHints *a2)
{
  if (this != a2) {
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__tree_node<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,void *> *,long>>((uint64_t **)this, a2->_numbersForListStyle.__tree_.__begin_node_, &a2->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
  }
  TSWPTopicNumberHints::setCharIndexAndValidCharIndex(this, a2->_charIndex, a2->_validThroughCharIndex);

  this->_styleProvider = a2->_styleProvider;
  return this;
}

void TSWPTopicNumberHints::TSWPTopicNumberHints(TSWPTopicNumberHints *this, const TSWPTopicNumberHints *a2)
{
  this->_numbersForListStyle.__tree_.__pair3_.__value_ = 0;
  this->_numbersForListStyle.__tree_.__pair1_.__value_.__left_ = 0;
  this->_numbersForListStyle.__tree_.__begin_node_ = &this->_numbersForListStyle.__tree_.__pair1_;
  if (this != a2) {
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__tree_node<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,void *> *,long>>((uint64_t **)this, a2->_numbersForListStyle.__tree_.__begin_node_, &a2->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
  }
  TSWPTopicNumberHints::setCharIndexAndValidCharIndex(this, a2->_charIndex, a2->_validThroughCharIndex);
  this->_styleProvider = a2->_styleProvider;
}

void sub_2234E37EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

TSWPTopicNumberHints *TSWPTopicNumberHints::setCharIndexAndValidCharIndex(TSWPTopicNumberHints *this, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = this;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL && a2 > a3)
  {
    uint64_t v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPTopicNumberHints::setCharIndexAndValidCharIndex(TSWPCharIndex, TSWPCharIndex)");
    this = (TSWPTopicNumberHints *)objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPTopicNumberHints.mm"), 58, @"Bad charIndex compared to validThroughCharIndex.");
  }
  v5->_charIndedouble x = a2;
  v5->_validThroughCharIndedouble x = a3;
  return this;
}

uint64_t **std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__tree_node<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    NSUInteger v15 = v8;
    NSUInteger v16 = v8;
    if (v8)
    {
      NSUInteger v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        double v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<TSWPListStyle const*&,std::vector<TSWPTopicNumberEntry> &>::operator=[abi:nn180100]<TSWPListStyle const* const,std::vector<TSWPTopicNumberEntry>,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 4));
          std::__tree<unsigned long>::__node_insert_multi(v5, v16);
          NSUInteger v16 = v15;
          if (v15) {
            NSUInteger v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              double v9 = a2;
            }
            while (!v11);
          }
          uint64_t v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          double v9 = a2;
        }
        while (!v11);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__emplace_multi<std::pair<TSWPListStyle const* const,std::vector<TSWPTopicNumberEntry>> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      double v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2234E3A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TSWPTopicNumberHints::reset(TSWPTopicNumberHints *this)
{
  *(int64x2_t *)&this->_charIndedouble x = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  p_pair1 = &this->_numbersForListStyle.__tree_.__pair1_;
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy((uint64_t)this, (void *)this->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
  this->_numbersForListStyle.__tree_.__begin_node_ = p_pair1;
  this->_numbersForListStyle.__tree_.__pair3_.__value_ = 0;
  p_pair1->__value_.__left_ = 0;
}

uint64_t TSWPLayoutChore::layoutIntoTarget(uint64_t a1, void *a2, int a3, char *a4)
{
  double v9 = (const TSWPLayoutState *)(a1 + 80);
  NSUInteger v8 = *(void *)(a1 + 80);
  NSUInteger v10 = *(void *)(a1 + 64);
  if (v8 > v10)
  {
    BOOL v11 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::layoutIntoTarget(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, BOOL *)");
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 220, @"Attempt to lay out past end of storage");
    NSUInteger v8 = *(void *)(a1 + 80);
    NSUInteger v10 = *(void *)(a1 + 64);
  }
  if (v8 > v10) {
    return 0;
  }
  if (*(void *)(a1 + 792) != 0x7FFFFFFFFFFFFFFFLL)
  {
    TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 816), (TSWPTopicNumberHints *)(a1 + 768));
    NSUInteger v8 = *(void *)(a1 + 80);
  }
  TSWPTopicNumberHints::advanceToCharIndex((TSWPTopicNumberHints *)(a1 + 816), v8, *(TSWPStorage **)(a1 + 8));
  TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), (TSWPTopicNumberHints *)(a1 + 816));
  int v13 = *(_DWORD *)(a1 + 32);
  [a2 currentSize];
  if ((v13 & 0x10) != 0) {
    double v16 = v14;
  }
  else {
    double v16 = v15;
  }
  CGFloat v17 = (void *)[a2 columns];
  if (![v17 count])
  {
    uint64_t v38 = a4;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = *(void *)(a1 + 80);
    uint64_t v20 = [*(id *)(a1 + 24) styleProvider];
    LOBYTE(v37) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    uint64_t v21 = v18;
    a4 = v38;
    +[TSWPLayoutManager fixColumnBoundsForTarget:a2 storage:v21 charIndex:v19 firstColumnIndex:0 precedingHeight:0 height:v20 alreadyHasMargins:0.0 styleProvider:v16 vertical:v37];
  }
  if (![v17 count])
  {
    CGRect v39 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::layoutIntoTarget(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, BOOL *)");
    objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v22, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 239, @"No columns to lay out into");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0 && [a2 ignoresEquationAlignment]) {
    a3 |= 0x20000u;
  }
  if (![v17 count]) {
    return 0;
  }
  TSWPLayoutChore::protectedSetupLayoutState(a1, a2, 0, *(void *)(a1 + 80), *(void **)(a1 + 760));
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v47, v9);
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v47);
  [*(id *)(a1 + 680) removeAllFootnoteReferenceStorages];
  uint64_t v46 = 0;
  unint64_t v44 = 0;
  if ([a2 shouldPositionAttachmentsIteratively]) {
    BOOL v23 = [a2 iterativeAttachmentPositioningMaxPassCount] != 0;
  }
  else {
    BOOL v23 = 0;
  }
  double v25 = rint(v16);
  while (1)
  {
    double v43 = 0.0;
    int v42 = 1;
    unsigned int v41 = 0;
    double v26 = v25;
    unsigned __int16 v45 = 0;
    do
    {
      int v27 = TSWPLayoutChore::pLayoutPiece(a1, a2, a3, &v43, &v42, &v45, (int *)&v41, v16, v26);
      double v26 = rint(v16 - v43);
      if (v26 <= 0.0) {
        int v28 = 1;
      }
      else {
        int v28 = v27;
      }
    }
    while (v28 != 1);
    unint64_t v29 = [v17 count];
    if (v29 > v41) {
      objc_msgSend(v17, "removeObjectsInRange:", v41, v29 - v41);
    }
    TSWPLayoutChore::pSetTargetColumnsTransform((id *)a1);
    int HasOverlaps = TSWPLayoutChore::targetHasOverlaps(a1, (unsigned int *)&v46, &v44, a2);
    int v31 = v23 ? TSWPLayoutChore::pPerformIterativeAttachmentPositioning(a1, (_DWORD *)&v46 + 1, a2) : 1;
    if ((HasOverlaps | v31 ^ 1) != 1) {
      break;
    }
    uint64_t v32 = *(void *)(a1 + 744);
    TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v47);
    *(void *)(a1 + 744) = v32;
    TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), (TSWPTopicNumberHints *)(a1 + 816));
    [*(id *)(a1 + 680) removeAllFootnoteReferenceStorages];
  }
  TSWPLayoutChore::postProcessDrawableAttachments(a1, a2);
  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)a1, (uint64_t)v40);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v40);
  TSWPLayoutChore::pHandleSync(a1, a2, a4);
  if (*(void *)(a1 + 80) < *(void *)(a1 + 64)
    || ((int v33 = v45, v34 = IsParagraphBreakingCharacter(v45), v33 == 8232) ? (v35 = 1) : (v35 = v34),
        (v35 & 1) != 0 || *(void *)(a1 + 88) < *(void *)(a1 + 64)))
  {
    uint64_t ColumnContainsOnlyOneAnchoredDrawable = 1;
  }
  else
  {
    uint64_t ColumnContainsOnlyOneAnchoredDrawable = (uint64_t)TSWPLayoutChore::pLastColumnContainsOnlyOneAnchoredDrawable(a1, a2);
  }
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v47);
  return ColumnContainsOnlyOneAnchoredDrawable;
}

void sub_2234E3EC4(_Unwind_Exception *a1)
{
}

void *TSWPLayoutChore::pLastColumnContainsOnlyOneAnchoredDrawable(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "columns"), "lastObject");
  if (result)
  {
    id v3 = (TSWPLineFragmentArray **)[result lineFragmentArray];
    return (void *)TSWPLayoutChore::pContainsOnlyOneAnchoredDrawable((uint64_t)v3, v3);
  }
  return result;
}

uint64_t TSWPLayoutChore::pIsLastColumn(id *this)
{
  if (![this[1] wpKind])
  {
    id v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"BOOL TSWPLayoutChore::pIsLastColumn()"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 5792, @"pIsLastColumn doesn't work on the body");
  }
  uint64_t result = [this[257] isLastTarget];
  if (result) {
    return objc_msgSend((id)objc_msgSend(this[257], "columns"), "lastObject") == (void)this[23];
  }
  return result;
}

void TSWPLineBalancingLayoutState::updateWithNewLineAdded(uint64_t a1, TSWPLineFragmentArray **a2)
{
  if (*(_DWORD *)(a1 + 728))
  {
    uint64_t v4 = TSWPLineFragmentArray::count(*a2);
    unint64_t v5 = *(unsigned int *)(a1 + 732);
    if (v4 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 744);
      unint64_t v7 = *(void *)(a1 + 752);
      if ((unint64_t)v6 < v7)
      {
        *(void *)uint64_t v6 = 0;
        NSUInteger v8 = v6 + 8;
LABEL_48:
        *(void *)(a1 + 744) = v8;
        return;
      }
      BOOL v23 = *(char **)(a1 + 736);
      uint64_t v24 = (v6 - v23) >> 3;
      unint64_t v25 = v24 + 1;
      if (!((unint64_t)(v24 + 1) >> 61))
      {
        uint64_t v26 = v7 - (void)v23;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          int v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(a1 + 752, v27);
          uint64_t v6 = *(char **)(a1 + 744);
          BOOL v23 = *(char **)(a1 + 736);
        }
        else
        {
          int v28 = 0;
        }
        char v35 = &v28[8 * v24];
        double v36 = &v28[8 * v27];
        *(void *)char v35 = 0;
        NSUInteger v8 = v35 + 8;
        while (v6 != v23)
        {
          uint64_t v37 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v35 - 1) = v37;
          v35 -= 8;
        }
        *(void *)(a1 + 736) = v35;
        *(void *)(a1 + 744) = v8;
        *(void *)(a1 + 752) = v36;
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_48;
      }
LABEL_57:
      abort();
    }
    double v9 = 0.0;
    if (TSWPLineFragmentArray::count(*a2) > v5)
    {
      char v10 = 0;
      double v11 = 0.0;
      do
      {
        uint64_t v12 = TSWPLineFragmentArray::objectAtIndex(*a2, v5);
        uint64_t v13 = *(void *)(v12 + 192);
        uint64_t v14 = *(void *)(v12 + 200);
        while (v13 != v14)
        {
          double v15 = *(double *)(v13 + 8);
          double v16 = *(const __CTLine **)v13;
          v13 += 48;
          double v17 = v15 + CTLineGetTypographicBounds(v16, 0, 0, 0);
          if (v15 >= v11) {
            double v18 = v11;
          }
          else {
            double v18 = v15;
          }
          if (v9 >= v17) {
            double v19 = v9;
          }
          else {
            double v19 = v17;
          }
          if (v10) {
            double v11 = v18;
          }
          else {
            double v11 = v15;
          }
          if (v10) {
            double v9 = v19;
          }
          else {
            double v9 = v17;
          }
          char v10 = 1;
        }
        unint64_t v5 = (v5 + 1);
      }
      while (TSWPLineFragmentArray::count(*a2) > v5);
      double v9 = v9 - v11;
    }
    uint64_t v20 = *(double **)(a1 + 744);
    unint64_t v21 = *(void *)(a1 + 752);
    if ((unint64_t)v20 >= v21)
    {
      unint64_t v29 = *(double **)(a1 + 736);
      uint64_t v30 = v20 - v29;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61) {
        goto LABEL_57;
      }
      uint64_t v32 = v21 - (void)v29;
      if (v32 >> 2 > v31) {
        unint64_t v31 = v32 >> 2;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        char v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(a1 + 752, v33);
        uint64_t v20 = *(double **)(a1 + 744);
        unint64_t v29 = *(double **)(a1 + 736);
      }
      else
      {
        char v34 = 0;
      }
      uint64_t v38 = (double *)&v34[8 * v30];
      CGRect v39 = &v34[8 * v33];
      *uint64_t v38 = v9;
      uint64_t v22 = v38 + 1;
      while (v20 != v29)
      {
        uint64_t v40 = *((void *)v20-- - 1);
        *((void *)v38-- - 1) = v40;
      }
      *(void *)(a1 + 736) = v38;
      *(void *)(a1 + 744) = v22;
      *(void *)(a1 + 752) = v39;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *uint64_t v20 = v9;
      uint64_t v22 = v20 + 1;
    }
    *(void *)(a1 + 744) = v22;
    *(_DWORD *)(a1 + 732) = TSWPLineFragmentArray::count(*a2);
  }
}

uint64_t TSWPLayoutChore::pContainsOnlyOneAnchoredDrawable(uint64_t a1, TSWPLineFragmentArray **a2)
{
  if (TSWPLineFragmentArray::count(*a2) != 1) {
    return 0;
  }
  uint64_t result = TSWPLineFragmentArray::objectAtIndex(*a2, 0);
  if (result) {
    return (*(unsigned __int8 *)(result + 24) >> 6) & 1;
  }
  return result;
}

uint64_t TSWPLineFragmentArray::count(TSWPLineFragmentArray *this)
{
  return (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4;
}

uint64_t TSWPLayoutChore::targetHasOverlaps(uint64_t a1, unsigned int *a2, unint64_t *a3, void *a4)
{
  unsigned int v7 = *a2;
  unsigned int v8 = *a2 + 1;
  *a2 = v8;
  if (v7)
  {
    if (v8 <= 1)
    {
      double v9 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL TSWPLayoutChore::targetHasOverlaps(uint &, TSWPCharIndex &, TSDLayout<TSWPLayoutTarget> *, NSString *&)");
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 6386, @"Bad passCount");
    }
    unint64_t v11 = *(void *)(a1 + 88);
    if (v11 <= *a3) {
      unint64_t v11 = *a3;
    }
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = v11;
    uint64_t v12 = objc_msgSend((id)objc_msgSend(a4, "columns"), "lastObject");
    objc_msgSend(v12, "setAnchoredCharCount:", *(void *)(a1 + 88) - objc_msgSend(v12, "anchoredRange"));
    return 0;
  }
  *a3 = *(void *)(a1 + 88);
  if ((objc_opt_respondsToSelector() & 1) == 0 || ![*(id *)(a1 + 16) textWrapper]) {
    return 0;
  }

  return TSWPLayoutChore::pAnchoredGraphicAndTextCollisionsInTarget();
}

uint64_t TSWPLayoutChore::pHandleSync(uint64_t result, void *a2, char *a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    *a3 = 0;
    uint64_t v6 = *(void *)(result + 2032);
    unint64_t v7 = *(void *)(result + 80);
    if ((v6 == 0x7FFFFFFFFFFFFFFFLL || v7 >= *(void *)(result + 2040) + v6) && v7 < *(void *)(result + 64))
    {
      uint64_t result = [*(id *)(result + 2056) nextTargetTopicNumbers];
      if (!result
        || (uint64_t result = TSWPTopicNumberHints::equivalentState((TSWPTopicNumberHints *)result, (const TSWPTopicNumberHints *)(v5 + 768)), result))
      {
        if (*(void *)(v5 + 536))
        {
          char v8 = *(unsigned char *)(v5 + 641);
LABEL_9:
          *a3 = v8;
          return result;
        }
        uint64_t result = [a2 nextTargetFirstColumn];
        if (result)
        {
          double v9 = (void *)result;
          uint64_t result = [(id)result startCharIndex];
          if (result == *(void *)(v5 + 80) - *(void *)(v5 + 2048))
          {
            uint64_t result = [v9 startAnchoredCharIndex];
            if (result == *(void *)(v5 + 88) - *(void *)(v5 + 2048) && !*(unsigned char *)(v5 + 640))
            {
              uint64_t v10 = (void *)[*(id *)(v5 + 2056) nextTargetFirstChildHint];
              uint64_t result = objc_opt_respondsToSelector();
              if ((result & 1) == 0 || (uint64_t result = [v10 isFirstHint], result))
              {
                char v8 = 1;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

TSWPTopicNumberHints *TSWPTopicNumberHints::advanceToCharIndex(TSWPTopicNumberHints *this, NSUInteger a2, TSWPStorage *a3)
{
  if (this->_validThroughCharIndex == 0x7FFFFFFFFFFFFFFFLL) {
    validThroughCharIndedouble x = 0;
  }
  else {
    validThroughCharIndedouble x = this->_validThroughCharIndex;
  }
  if (a3 && validThroughCharIndex < a2)
  {
    if ([(TSWPStorage *)a3 length] <= a2) {
      NSUInteger v7 = a2;
    }
    else {
      NSUInteger v7 = a2 + 1;
    }
    if (validThroughCharIndex <= v7) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = validThroughCharIndex;
    }
    if (validThroughCharIndex >= v7) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = validThroughCharIndex;
    }
    -[TSWPStorage paragraphEnumeratorForCharRange:styleProvider:](a3, "paragraphEnumeratorForCharRange:styleProvider:", v9, v8 - v9, this->_styleProvider);
    charIndedouble x = this->_charIndex;
    if (charIndex == TSWPParagraphEnumerator::paragraphTextRange(&v20)
      && !TSWPParagraphEnumerator::isLastParagraph(&v20))
    {
      TSWPParagraphEnumerator::operator++(&v20);
    }
    NSUInteger v11 = TSWPParagraphEnumerator::paragraphTextRange(&v20);
    if (v11 + v12 < [(TSWPStorage *)a3 length])
    {
      while (1)
      {
        if (TSWPParagraphEnumerator::paragraphTextRange(&v20) >= a2)
        {
          TSWPParagraphEnumerator::paragraphTextRange(&v20);
          if (v13) {
            break;
          }
        }
        unint64_t v14 = TSWPParagraphEnumerator::paragraphLevel(&v20);
        double v15 = (TSWPListStyle *)TSWPParagraphEnumerator::paragraphListStyle(&v20);
        objc_opt_class();
        TSWPParagraphEnumerator::attachmentOrFootnoteAtCharIndex(&v20, 0);
        double v16 = (void *)TSUDynamicCast();
        if ([(TSWPListStyle *)v15 effectiveTypeForLevel:v14] == 3
          && ([v16 isPartitioned] & 1) == 0)
        {
          uint64_t TopicNumberForList = TSWPParagraphEnumerator::paragraphListStart(&v20);
          if (!TopicNumberForList) {
            uint64_t TopicNumberForList = TSWPTopicNumberHints::nextTopicNumberForList(this, v15, v14);
          }
          NSUInteger v18 = TSWPParagraphEnumerator::paragraphTextRange(&v20);
          TSWPTopicNumberHints::setTopicNumberForList(this, v15, v14, TopicNumberForList, v18);
        }
        if (TSWPParagraphEnumerator::isLastParagraph(&v20)) {
          break;
        }
        TSWPParagraphEnumerator::operator++(&v20);
      }
    }
    TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v20);
  }
  return TSWPTopicNumberHints::setCharIndexAndValidCharIndex(this, this->_charIndex, a2);
}

void sub_2234E46C0(_Unwind_Exception *a1, TSWPParagraphEnumerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

double TSWPLineFragment::baselineAtCharIndex(TSWPLineFragment *this, TSWPLineFragment *a2, TSWPStorage *a3, TSWPColumn *a4)
{
  double v4 = *((double *)this + 4) + *((double *)this + 5);
  return v4
       + TSWPLineFragment::baselineAdjustAtCharIndex(a2, (void *)[(TSWPStorage *)a3 storage], a3, a4, [(TSWPStorage *)a3 scaleTextPercent]);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a2);
}

void sub_2234E4D6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TSWPLineFragment::baselineAdjustAtCharIndex(TSWPLineFragment *this, void *a2, TSWPStorage *a3, TSWPColumn *a4, unint64_t a5)
{
  v24[2] = *MEMORY[0x263EF8340];
  uint64_t v9 = [a2 characterStyleAtCharIndex:this left:a4 effectiveRange:0];
  if (![(TSWPStorage *)a3 styleProvider])
  {
    uint64_t v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "static CGFloat TSWPLineFragment::baselineAdjustAtCharIndex(TSWPCharIndex, TSWPStorage *, TSWPColumn *, BOOL, NSUInteger)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 98, @"No style provider.");
  }
  uint64_t v12 = objc_msgSend((id)-[TSWPStorage styleProvider](a3, "styleProvider"), "paragraphStyleAtParIndex:effectiveRange:", objc_msgSend(a2, "paragraphIndexAtCharIndex:", this), 0);
  v24[0] = v9;
  v24[1] = v12;
  int v13 = TSWPResolveIntPropertyForStyles((uint64_t)v24, 2uLL, 36, 0);
  if (v13)
  {
    int v14 = v13;
    FontForStyle = TSWPFastCreateFontForStyle(v9, v12, a5);
    CGFloat Size = CTFontGetSize(FontForStyle);
    CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(FontForStyle, Size * 1.5, 0, 0);
    NSUInteger v18 = CopyWithAttributes;
    if (v14 == 2)
    {
      double Descent = CTFontGetDescent(CopyWithAttributes);
      double v19 = Descent - CTFontGetDescent(FontForStyle);
    }
    else
    {
      double v19 = 0.0;
      if (v14 == 1)
      {
        double Ascent = CTFontGetAscent(CopyWithAttributes);
        double v19 = CTFontGetAscent(FontForStyle) - Ascent;
      }
    }
    CFRelease(v18);
    CFRelease(FontForStyle);
  }
  else
  {
    double v19 = 0.0;
  }
  TSWPResolveFloatPropertyForStyles(v24, 2uLL, 33);
  return v19 - v22;
}

uint64_t TSWPLayoutChore::pGetCharacterStyleAtCharIndex(id *this, uint64_t a2)
{
  uint64_t v4 = [this[1] characterStyleAtCharIndex:a2 effectiveRange:0];
  if (!v4) {
    return v4;
  }
  uint64_t v5 = (void *)[this[3] styleProvider];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return v4;
  }

  return [v5 modifiedCharacterStyle:v4 atCharIndex:a2];
}

void TSWPLayoutChore::pLayoutColumn(uint64_t a1)
{
  [*(id *)(a1 + 2056) autosizeFlags];
  if (*(_DWORD *)(a1 + 56) >= 3u)
  {
    uint64_t v3 = *(void **)(a1 + 184);
    if (v3) {
      [v3 frameBounds];
    }
    else {
      unint64_t v2 = 0;
    }
  }
  else
  {
    unint64_t v2 = 0xFFF0000000000000;
  }
  *(void *)(a1 + 400) = v2;
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v7, (const TSWPLayoutState *)(a1 + 80));
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v7);
  TSWPTopicNumberHints::TSWPTopicNumberHints(&v6, (const TSWPTopicNumberHints *)(a1 + 768));
  uint64_t v4 = *(void *)([*(id *)(a1 + 184) lineFragmentArray] + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  [*(id *)(a1 + 184) contentBottom];
  int v5 = *(unsigned __int8 *)(a1 + 248);
  *(unsigned char *)(a1 + 249) = (([*(id *)(a1 + 184) layoutResultFlags] >> 8) & 1) != v5;
  operator new();
}

void sub_2234E5784(_Unwind_Exception *a1)
{
  if (STACK[0x310]) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)STACK[0x310]);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)&STACK[0x328]);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0x358]);
  _Unwind_Resume(a1);
}

void TSWPLayoutChore::addChangeBarAdornmentsToColumn(void *a1, void *a2)
{
  uint64_t v4 = (TSWPLineFragment ****)[a1 lineFragmentArray];
  int v5 = **v4;
  TSWPTopicNumberHints v6 = (*v4)[1];
  if (v5 == v6) {
    return;
  }
  LOBYTE(v7) = 0;
  unint64_t v8 = 0;
  uint64_t v9 = (double *)MEMORY[0x263F001A0];
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  double x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  do
  {
    uint64_t v14 = (uint64_t)*v5;
    unsigned int v15 = *((_DWORD *)*v5 + 6);
    if ((v15 & 0x80000) != 0)
    {
      id v16 = +[TSDColorFill colorWithColor:TSWPLineFragment::changeAdornmentMarkupColor(*v5)];
      double v17 = pChangeBarRectForLineFragment(v14, a1, a2);
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      v28.origin.double x = v17;
      v28.origin.CGFloat y = v18;
      v28.size.CGFloat width = v20;
      v28.size.CGFloat height = v22;
      *(CGRect *)(v14 + 80) = CGRectUnion(*(CGRect *)(v14 + 80), v28);
      if ((v7 & 1) == 0) {
        goto LABEL_10;
      }
      if ([v16 isEqual:v8]) {
        BOOL v24 = v17 == x;
      }
      else {
        BOOL v24 = 0;
      }
      if (!v24)
      {
        pAddChangeBarAdornmentRect(a1, a2, v8, x, y, width, height);
LABEL_10:
        double x = v17;
        CGFloat y = v19;
        CGFloat width = v21;
        CGFloat height = v23;
        unint64_t v8 = v16;
        goto LABEL_14;
      }
      v26.origin.double x = x;
      v26.origin.CGFloat y = y;
      v26.size.CGFloat width = width;
      v26.size.CGFloat height = height;
      v29.origin.double x = v17;
      v29.origin.CGFloat y = v19;
      v29.size.CGFloat width = v21;
      v29.size.CGFloat height = v23;
      CGRect v27 = CGRectUnion(v26, v29);
      double x = v27.origin.x;
      CGFloat y = v27.origin.y;
      CGFloat width = v27.size.width;
      CGFloat height = v27.size.height;
    }
    else if (v7)
    {
      pAddChangeBarAdornmentRect(a1, a2, v8, x, y, width, height);
      unint64_t v8 = 0;
      double x = *v9;
      CGFloat y = v9[1];
      CGFloat width = v9[2];
      CGFloat height = v9[3];
    }
LABEL_14:
    int v7 = (v15 >> 19) & 1;
    v5 += 2;
  }
  while (v5 != v6);
  if ((v15 & 0x80000) != 0)
  {
    pAddChangeBarAdornmentRect(a1, a2, v8, x, y, width, height);
  }
}

uint64_t TSWPLayoutChore::pSetTargetColumnsTransform(id *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v2 = (void *)[this[257] columns];
  if (((_BYTE)this[4] & 0x10) != 0)
  {
    if (([this[257] autosizeFlags] & 3) != 0)
    {
      uint64_t v5 = [v2 count];
      double v6 = 0.0;
      if (v5 == 1)
      {
        objc_msgSend(this[24], "adjustedInsets", 0.0);
        double v8 = v7;
        objc_msgSend((id)objc_msgSend(v2, "objectAtIndexedSubscript:", 0), "wpBounds");
        double v6 = v8 + CGRectGetMaxY(v24);
      }
    }
    else
    {
      [this[257] currentSize];
    }
    CGAffineTransformMakeTranslation(&v21, v6, 0.0);
    CGAffineTransform v19 = v21;
    CGAffineTransformRotate(&v20, &v19, 1.57079633);
    *(_OWORD *)&v21.a = *(_OWORD *)&v20.a;
    *(_OWORD *)&v21.c = *(_OWORD *)&v20.c;
    long long v4 = *(_OWORD *)&v20.tx;
  }
  else
  {
    long long v3 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
    *(_OWORD *)&v21.a = *MEMORY[0x263F000D0];
    *(_OWORD *)&v21.c = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  }
  *(_OWORD *)&v21.tdouble x = v4;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t result = [v2 countByEnumeratingWithState:&v15 objects:v22 count:16];
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void *)v16;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v2);
        }
        int v13 = *(void **)(*((void *)&v15 + 1) + 8 * v12);
        CGAffineTransform v14 = v21;
        [v13 setTransformFromWP:&v14];
        ++v12;
      }
      while (v10 != v12);
      uint64_t result = [v2 countByEnumeratingWithState:&v15 objects:v22 count:16];
      uint64_t v10 = result;
    }
    while (result);
  }
  return result;
}

void TSWPLayoutChore::postProcessDrawableAttachments(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v2 = (void *)MEMORY[0x263F7C7C8];
  NSUInteger v3 = *MEMORY[0x263F7C7C8];
  NSUInteger v4 = *(void *)(MEMORY[0x263F7C7C8] + 8);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v5 = (void *)[a2 columns];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v26;
    NSUInteger v9 = v3;
    NSUInteger v10 = v4;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t location = [v12 range];
        v15.uint64_t location = location;
        v15.NSUInteger length = length;
        if (v9 != *v2 || v10 != v2[1])
        {
          v31.uint64_t location = v9;
          v31.NSUInteger length = v10;
          NSRange v17 = NSUnionRange(v31, v15);
          NSUInteger length = v17.length;
          uint64_t location = v17.location;
        }
        NSUInteger v9 = location;
        NSUInteger v10 = length;
        uint64_t v18 = [v12 anchoredRange];
        v20.uint64_t location = v18;
        v20.NSUInteger length = v19;
        if (v3 != *v2 || v4 != v2[1])
        {
          v32.uint64_t location = v3;
          v32.NSUInteger length = v4;
          NSRange v22 = NSUnionRange(v32, v20);
          NSUInteger v19 = v22.length;
          uint64_t v18 = v22.location;
        }
        NSUInteger v3 = v18;
        NSUInteger v4 = v19;
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v7);
  }
  else
  {
    NSUInteger v9 = v3;
    NSUInteger v10 = v4;
  }
  TSWPLayoutChore::p_postProcessDrawableAttachments_removeLeftovers(a1, v9, v10, *(void **)(a1 + 8), 0, a2);
  TSWPLayoutChore::p_postProcessDrawableAttachments_removeLeftovers(a1, v3, v4, *(void **)(a1 + 8), 1, a2);
}

void TSWPLayoutChore::p_postProcessDrawableAttachments_removeLeftovers(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, void *a6)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  id v12 = objc_alloc(MEMORY[0x263EFF980]);
  CGRect v39 = a6;
  if (a5) {
    uint64_t v13 = [a6 currentAnchoredDrawableLayouts];
  }
  else {
    uint64_t v13 = [a6 currentInlineDrawableLayouts];
  }
  CGAffineTransform v14 = (void *)[v12 initWithArray:v13];
  if (a2 != *MEMORY[0x263F7C7C8] || a3 != *(void *)(MEMORY[0x263F7C7C8] + 8))
  {
    unint64_t v16 = objc_msgSend(a4, "attachmentIndexRangeForTextRange:", a2, a3);
    uint64_t v18 = v16 + v17;
    if (v16 < v16 + v17)
    {
      unint64_t v19 = v16;
      do
      {
        objc_opt_class();
        [a4 attachmentAtAttachmentIndex:v19 outCharIndex:0];
        NSRange v20 = (void *)TSUDynamicCast();
        if (v20)
        {
          CGAffineTransform v21 = v20;
          if ([v20 isAnchored] == a5)
          {
            uint64_t v22 = [v21 drawable];
            uint64_t v23 = [v14 count];
            if (v23)
            {
              uint64_t v24 = v23;
              uint64_t v25 = 0;
              while (objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", v25), "info") != v22
                   || ([v21 isPartitioned] & 1) != 0)
              {
                if (v24 == ++v25) {
                  goto LABEL_19;
                }
              }
              [v14 removeObjectAtIndex:v25];
            }
          }
        }
LABEL_19:
        ++v19;
      }
      while (v19 != v18);
    }
  }
  if ((a5 & 1) == 0)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v26 = (void *)[v39 columns];
    uint64_t v27 = [v26 countByEnumeratingWithState:&v44 objects:v49 count:16];
    if (v27)
    {
      uint64_t v28 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          if (*(void *)v45 != v28) {
            objc_enumerationMutation(v26);
          }
          uint64_t v30 = [*(id *)(*((void *)&v44 + 1) + 8 * i) lineFragmentArray];
          NSRange v31 = *(uint64_t **)v30;
          NSRange v32 = *(std::__shared_weak_count **)(v30 + 8);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v34 = *v31;
          uint64_t v33 = v31[1];
          while (v34 != v33)
          {
            if (*(unsigned char *)(*(void *)v34 + 24)) {
              [v14 removeObjectIdenticalTo:*(void *)(*(void *)v34 + 432)];
            }
            v34 += 16;
          }
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v32);
          }
        }
        uint64_t v27 = [v26 countByEnumeratingWithState:&v44 objects:v49 count:16];
      }
      while (v27);
    }
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v35 = [v14 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v35)
  {
    uint64_t v36 = *(void *)v41;
    do
    {
      for (uint64_t j = 0; j != v35; ++j)
      {
        if (*(void *)v41 != v36) {
          objc_enumerationMutation(v14);
        }
        uint64_t v38 = *(void **)(*((void *)&v40 + 1) + 8 * j);
        if (!a5 || (pLayoutGeometryIsBeingManipulated(*(TSDLayout **)(*((void *)&v40 + 1) + 8 * j)) & 1) == 0)
        {
          [*(id *)(a1 + 24) willRemoveAttachmentLayout:v38];
          [v38 removeFromParent];
        }
      }
      uint64_t v35 = [v14 countByEnumeratingWithState:&v40 objects:v48 count:16];
    }
    while (v35);
  }
}

void sub_2234E61C0(_Unwind_Exception *exception_object)
{
}

void sub_2234E62EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2234E63D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

TSWPAttributeArray *TSWPAttributeArray::enumerateObjectAttributesInCharacterRange(TSWPAttributeArray *result, unint64_t a2, NSUInteger a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = result;
    unint64_t v8 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(result, a2);
    uint64_t result = (TSWPAttributeArray *)TSWPAttributeArray::effectiveAttributeIndexForCharIndex(v7, a3 + a2 - 1);
    char v16 = 0;
    if (result != (TSWPAttributeArray *)0x7FFFFFFFFFFFFFFFLL)
    {
      NSUInteger v9 = result;
      if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v8 = 0;
      }
      if (v8 <= (unint64_t)result)
      {
        uint64_t v10 = (16 * v8) | 8;
        do
        {
          NSUInteger v11 = TSWPAttributeArray::rangeForAttributeIndex(v7, v8);
          NSUInteger v13 = v12;
          if (!(*((unsigned int (**)(TSWPAttributeArray *))v7->var0 + 2))(v7)) {
            NSUInteger v13 = 1;
          }
          v17.uint64_t location = a2;
          v17.NSUInteger length = a3;
          v18.uint64_t location = v11;
          v18.NSUInteger length = v13;
          NSRange v14 = NSIntersectionRange(v17, v18);
          uint64_t result = (TSWPAttributeArray *)v14.location;
          if (v14.length) {
            uint64_t result = (TSWPAttributeArray *)(*(uint64_t (**)(uint64_t, void, unint64_t, NSUInteger, NSUInteger, char *))(a4 + 16))(a4, *(void *)((char *)v7->var4 + v10), v8, v11, v13, &v16);
          }
          ++v8;
          v10 += 16;
          if (v16) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v8 > (unint64_t)v9;
          }
        }
        while (!v15);
      }
    }
  }
  return result;
}

uint64_t TSWPAttachmentAttributeArray::appliesToRange(TSWPAttachmentAttributeArray *this)
{
  return 0;
}

void TSWPLayoutChore::addParagraphAdornmentsToColumn(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = (TSWPLineFragmentArray **)[a1 lineFragmentArray];
  uint64_t v7 = (void *)[v5 storage];
  NSUInteger v151 = *MEMORY[0x263F7C7C8];
  uint64_t v8 = [v5 range];
  uint64_t v139 = v9;
  uint64_t v10 = [v7 selectionRangeForCharIndex:v8];
  uint64_t v137 = v11;
  unint64_t v138 = v10;
  if (v7) {
    [v7 paragraphEnumeratorAtCharIndex:v8 styleProvider:a3];
  }
  else {
    memset(&v178, 0, sizeof(v178));
  }
  [v5 wpBounds];
  double r1 = v12;
  CGFloat v135 = v14;
  CGFloat v136 = v13;
  double rect = v15;
  CGFloat width = *(double *)(MEMORY[0x263F001A8] + 16);
  CGFloat x = *MEMORY[0x263F001A8];
  double y = *(double *)(MEMORY[0x263F001A8] + 8);
  double v17 = *(double *)(MEMORY[0x263F001A8] + 24);
  NSUInteger v18 = *MEMORY[0x263F7C7C8];
  NSUInteger r2_16 = *(void *)(MEMORY[0x263F7C7C8] + 8);
  int v19 = [v7 wpKind];
  double v20 = 6.0;
  if (v19 == 5) {
    double v20 = 0.0;
  }
  double v158 = v20;
  double v145 = *MEMORY[0x263F001B0];
  double v161 = *(double *)(MEMORY[0x263F001B0] + 8);
  double v141 = v161;
  if (a2)
  {
    [a2 adjustedInsets];
    double v141 = v21;
  }
  uint64_t v140 = v8;
  unsigned int v133 = v7;
  TSWPTopicNumberHints v134 = v6;
  uint64_t v22 = *(double ***)*v6;
  CGRect v146 = (double **)*((void *)*v6 + 1);
  if (v22 != v146)
  {
    uint64_t v23 = 0;
    unint64_t r2_8 = 0;
    unint64_t r2_24 = 0;
    int v24 = 0;
    double v154 = 0.0;
    double v156 = 0.0;
    NSUInteger v25 = v151;
    double v152 = 0.0;
    double v159 = 0.0;
    double height = v17;
    CGFloat r1_16 = width;
    double r1_24 = y;
    CGFloat r1_8 = x;
    _NSRange v143 = v5;
    while (1)
    {
      uint64_t v27 = *v22;
      NSUInteger v28 = *(void *)*v22;
      uint64_t r2 = *((void *)*v22 + 1);
      if (v28 < v18 || v28 - v18 >= r2_16)
      {
        NSUInteger v30 = TSWPParagraphEnumerator::paragraphTextRange(&v178);
        if (v28 >= v30 + v31 && !TSWPParagraphEnumerator::isLastParagraph(&v178))
        {
          TSWPParagraphEnumerator::operator++(&v178);
          if (v28 != TSWPParagraphEnumerator::paragraphTextRange(&v178))
          {
            NSRange v32 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
            uint64_t v33 = objc_msgSend(NSString, "stringWithUTF8String:", "static void TSWPLayoutChore::addParagraphAdornmentsToColumn(TSWPColumn *, id<TSWPColumnMetrics>, id<TSWPStyleProvider>)");
            objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1012, @"paragraph enumerator is out of sync with line fragments");
          }
        }
        NSUInteger v34 = TSWPParagraphEnumerator::paragraphTextRange(&v178);
        NSUInteger r2_16 = v35;
        NSUInteger v18 = v34;
        uint64_t v36 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v178, 0);
        uint64_t v37 = [v36 valueForProperty:98];
        if (r2_8 && ([(id)r2_8 isEqual:v37] & 1) == 0)
        {
          int v171 = 1;
          id v172 = 0;
          id v173 = (id)r2_8;
          double v174 = r1_8;
          double v175 = r1_24;
          CGFloat v176 = r1_16;
          double v177 = height;
          [v5 addAdornmentRect:&v171];
          NSUInteger v151 = *MEMORY[0x263F7C7C8];
        }
        unint64_t v38 = v37 == objc_msgSend(MEMORY[0x263EFF9D0], "null", v133) ? 0 : v37;
        unint64_t r2_8 = v38;
        if (v36 != v23) {
          break;
        }
      }
LABEL_57:
      if (v28 == v18 && (v24 & 0xFFFFFFFD) == 1)
      {
        double v63 = height;
        double v64 = v27[15];
        double v65 = v27[16];
        double v66 = v27[18];
        double v67 = v27[4];
        double v68 = v27[5];
        int v171 = 2;
        id v69 = (id)r2_24;
        double v70 = v65 + v66;
        if (v65 + v66 < v64) {
          double v70 = v64;
        }
        id v172 = v69;
        id v173 = 0;
        double v174 = r1 + v154 + (v156 - v152) * 0.5;
        double v175 = v67 + v68 - (v159 + v161 + v158 + v70);
        CGFloat v176 = v152;
        double v177 = 0.0;
        objc_msgSend(v5, "addAdornmentRect:", &v171, v133);

        double height = v63;
      }
      NSUInteger v71 = r2 + v28;
      if (r2 + v28 == r2_16 + v18 && (v24 & 0xFFFFFFFE) == 2)
      {
        double v73 = height;
        double v74 = v27[17];
        double v75 = v27[4];
        double v76 = v27[5];
        int v171 = 2;
        id v172 = (id)r2_24;
        id v173 = 0;
        double v174 = r1 + v154 + (v156 - v152) * 0.5;
        double v175 = v159 + v161 + v158 + v74 + v75 + v76;
        CGFloat v176 = v152;
        double v177 = 0.0;
        [v5 addAdornmentRect:&v171];

        double height = v73;
      }
      if (r2_8)
      {
        double v78 = v27[7];
        double v80 = v27[20] + v27[17] + v27[4] + v27[5];
        double v81 = v80 - v78;
        if (v151 == 0x7FFFFFFFFFFFFFFFLL)
        {
          CGFloat r1_8 = v27[6];
          CGFloat r1_16 = v27[8];
          double r1_24 = v27[7];
          double height = v80 - v78;
          NSUInteger v151 = v28;
        }
        else
        {
          v181.origin.CGFloat x = r1_8;
          v181.size.CGFloat width = r1_16;
          v181.origin.double y = r1_24;
          v181.size.double height = height;
          uint64_t v77 = *((void *)v27 + 6);
          uint64_t v79 = *((void *)v27 + 8);
          CGRect v182 = CGRectUnion(v181, *(CGRect *)(&v78 - 1));
          CGFloat r1_8 = v182.origin.x;
          CGFloat r1_16 = v182.size.width;
          double r1_24 = v182.origin.y;
          double height = v182.size.height;
        }
      }
      if (v24 == 4 && r2_24)
      {
        double v82 = height;
        double v83 = v27[20];
        CGFloat v84 = v27[6];
        double v85 = v27[7];
        CGFloat v86 = v27[8];
        double v87 = v27[4] + v27[5];
        double v88 = v83 + v27[17] + v87 - v85;
        CGFloat r2a = v84;
        if (v25 == 0x7FFFFFFFFFFFFFFFLL)
        {
          double v89 = v27[18];
          double v90 = v27[15];
          double v91 = v27[16];
          uint64_t v92 = *((void *)v27 + 7);
          uint64_t v93 = *((void *)v27 + 8);
          double v94 = v88;
          double MaxY = CGRectGetMaxY(*(CGRect *)&v84);
          double v96 = v89 + v91;
          if (v89 + v91 < v90) {
            double v96 = v90;
          }
          double v85 = v87 - v96;
          double v88 = MaxY - (v87 - v96);
          CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
          CGFloat x = *MEMORY[0x263F001A0];
          double y = *(double *)(MEMORY[0x263F001A0] + 8);
          double v17 = *(double *)(MEMORY[0x263F001A0] + 24);
          double height = v82;
LABEL_84:
          CGFloat v84 = r2a;
        }
        else
        {
          if (v71 == r2_16 + v18)
          {
            uint64_t v97 = *((void *)v27 + 7);
            uint64_t v98 = *((void *)v27 + 8);
            double v99 = v83 + v27[17] + v87 - v85;
            double height = v82;
            double v88 = CGRectGetMaxY(*(CGRect *)&v84) - v83 - v85;
            NSUInteger v28 = v25;
            goto LABEL_84;
          }
          NSUInteger v28 = v25;
          double height = v82;
        }
        double v100 = v85;
        CGFloat v101 = v86;
        double v102 = v88;
        if (CGRectIsEmpty(*(CGRect *)&v84))
        {
          CFRange v103 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
          uint64_t v104 = objc_msgSend(NSString, "stringWithUTF8String:", "static void TSWPLayoutChore::addParagraphAdornmentsToColumn(TSWPColumn *, id<TSWPColumnMetrics>, id<TSWPStyleProvider>)");
          objc_msgSend(v103, "handleFailureInFunction:file:lineNumber:description:", v104, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1136, @"Adding empty border stroke rect");
        }
        v183.origin.CGFloat x = x;
        v183.origin.double y = y;
        v183.size.CGFloat width = width;
        v183.size.double height = v17;
        v194.origin.CGFloat x = r2a;
        v194.origin.double y = v85;
        v194.size.CGFloat width = v86;
        v194.size.double height = v88;
        CGRect v184 = CGRectUnion(v183, v194);
        CGFloat x = v184.origin.x;
        double y = v184.origin.y;
        CGFloat width = v184.size.width;
        double v17 = v184.size.height;
        goto LABEL_89;
      }
      NSUInteger v28 = v25;
LABEL_89:
      v22 += 2;
      NSUInteger v25 = v28;
      if (v22 == v146) {
        goto LABEL_92;
      }
    }
    int v39 = [v36 intValueForProperty:102];
    int v40 = v39;
    BOOL v42 = v24 == 4 && v39 != 4;
    BOOL v144 = v42;
    if (v39)
    {
      long long v43 = (void *)[v36 valueForProperty:103];
      if (v43)
      {
        BOOL v44 = v43 != (void *)[MEMORY[0x263EFF9D0] null];
        if (!v44) {
          long long v43 = 0;
        }
      }
      else
      {
        BOOL v44 = 0;
      }
      objc_msgSend((id)objc_msgSend(v36, "valueForProperty:", 105), "sizeValue");
      double v45 = v47;
      double v46 = v48;
      double v159 = 0.0;
      if (v44)
      {
        [v43 width];
        double v159 = v49 * 0.5;
      }
      if (v24 == 4)
      {
        uint64_t v5 = v143;
        if (r2_24)
        {
          if (v45 != v145) {
            goto LABEL_49;
          }
          if (v46 != v161) {
            goto LABEL_49;
          }
          uint64_t v5 = v143;
          if (([(id)r2_24 isEqual:v43] & 1) == 0) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        uint64_t v5 = v143;
      }
    }
    else
    {
      long long v43 = 0;
      double v45 = *MEMORY[0x263F001B0];
      double v46 = *(double *)(MEMORY[0x263F001B0] + 8);
    }
    if (!v144)
    {
LABEL_50:
      if ((v40 - 1) > 2)
      {
        double v161 = v46;
      }
      else
      {
        [v36 floatValueForProperty:82];
        float v55 = v54;
        [v36 floatValueForProperty:80];
        float v57 = v56;
        [v36 floatValueForProperty:81];
        float v59 = v58;
        [v36 floatValueForProperty:104];
        if (v57 >= v59) {
          float v61 = v59;
        }
        else {
          float v61 = v57;
        }
        double v161 = v46;
        double v154 = v61;
        double v156 = rect - v61 - v55;
        double v152 = v156 * v60;
      }
      double v145 = v45;
      int v24 = v40;
      unint64_t r2_24 = (unint64_t)v43;
      uint64_t v23 = v36;
      goto LABEL_57;
    }
LABEL_49:
    [(id)r2_24 width];
    double v51 = v50 * 0.5;
    CGFloat v52 = -(v158 + v145 + v51);
    CGFloat v53 = -(v158 + v161 + v51);
    v179.origin.CGFloat x = x;
    v179.origin.double y = y;
    v179.size.CGFloat width = width;
    v179.size.double height = v17;
    CGRect v180 = CGRectInset(v179, v52, v53);
    CGFloat x = v180.origin.x;
    double y = v180.origin.y;
    CGFloat width = v180.size.width;
    double v17 = v180.size.height;
    int v171 = 2;
    id v172 = (id)r2_24;
    id v173 = 0;
    double v174 = x;
    double v175 = y;
    CGFloat v176 = width;
    double v177 = v17;
    [v5 addAdornmentRect:&v171];
    NSUInteger v25 = *MEMORY[0x263F7C7C8];

    goto LABEL_50;
  }
  int v24 = 0;
  unint64_t r2_24 = 0;
  unint64_t r2_8 = 0;
  CGFloat r1_8 = x;
  CGFloat r1_16 = width;
  double r1_24 = y;
  double height = v17;
LABEL_92:
  if (r2_8 | r2_24)
  {
    CGFloat v105 = height;
    uint64_t Object = (double *)TSWPLineFragmentArray::lastObject(*v134);
    double v107 = Object[16];
    double r2b = Object[15];
    double v108 = Object[17];
    double r2_16a = Object[18];
    double v109 = Object[20];
    double v110 = Object[4];
    double v111 = Object[5];
    v185.origin.CGFloat x = r1;
    v185.size.double height = v135;
    v185.origin.double y = v136;
    v185.size.CGFloat width = rect;
    CGFloat v112 = CGRectGetMaxY(v185);
    double v113 = v109 + v108 + v110 + v111;
    double v114 = v141 + v112;
    double v115 = v141 + v112 - v113;
    if (r2_8)
    {
      unint64_t v116 = v140 + v139;
      unint64_t v117 = v138 + v137;
      double v118 = v105;
      if (v140 + v139 <= v138
        || v116 >= v117
        || (unsigned int v119 = [v133 characterAtIndex:v116 - 1], v119 <= 0xF) && ((1 << v119) & 0x9070) != 0)
      {
        if (v116 == v117 && v115 > 0.0 && v115 < v108 + v107 + r2_16a)
        {
          v186.origin.CGFloat x = r1_8;
          v186.size.CGFloat width = r1_16;
          v186.origin.double y = r1_24;
          v186.size.double height = v105;
          double v118 = v114 - CGRectGetMinY(v186);
        }
      }
      else
      {
        CGFloat v157 = *(double *)(MEMORY[0x263F001A0] + 8);
        double v125 = *(double *)(MEMORY[0x263F001A0] + 24);
        CGFloat v153 = *MEMORY[0x263F001A0];
        CGFloat v155 = *(double *)(MEMORY[0x263F001A0] + 16);
        v188.origin.CGFloat x = r1;
        v188.size.double height = v135;
        v188.origin.double y = v136;
        v188.size.CGFloat width = rect;
        double v160 = CGRectGetMaxY(v188);
        v189.origin.CGFloat x = r1_8;
        v189.size.CGFloat width = r1_16;
        v189.origin.double y = r1_24;
        v189.size.double height = v118;
        double v126 = v141 + v160 - CGRectGetMinY(v189);
        if (v118 < v126) {
          double v118 = v126;
        }
        if (v125 != 0.0)
        {
          v190.origin.CGFloat x = v153;
          v190.size.CGFloat width = v155;
          v190.origin.double y = v157;
          v190.size.double height = v125;
          double v127 = CGRectGetMinY(v190) - r1_24;
          if (v127 < v118) {
            double v118 = v127;
          }
        }
      }
      int v171 = 1;
      id v172 = 0;
      id v173 = (id)r2_8;
      double v174 = r1_8;
      double v175 = r1_24;
      CGFloat v176 = r1_16;
      double v177 = v118;
      [v5 addAdornmentRect:&v171];
    }
    if (v24 == 4 && r2_24)
    {
      unint64_t v121 = v140 + v139;
      unint64_t v122 = v138 + v137;
      if (v140 + v139 <= v138
        || v121 >= v122
        || (unsigned int v123 = [v133 characterAtIndex:v121 - 1], v123 <= 0xF) && ((1 << v123) & 0x9070) != 0)
      {
        if (v121 == v122 && v115 > 0.0)
        {
          double v124 = r2b;
          if (v107 >= r2b) {
            double v124 = v107;
          }
          if (v115 < v108 + r2_16a + v124)
          {
            v187.origin.CGFloat x = x;
            v187.origin.double y = y;
            v187.size.CGFloat width = width;
            v187.size.double height = v17;
            double v17 = v114 - CGRectGetMinY(v187);
          }
        }
      }
      else
      {
        v191.origin.CGFloat x = r1;
        v191.size.double height = v135;
        v191.origin.double y = v136;
        v191.size.CGFloat width = rect;
        double v128 = v141 + CGRectGetMaxY(v191) - y;
        if (v17 < v128) {
          double v17 = v128;
        }
      }
      v192.origin.CGFloat x = x;
      v192.origin.double y = y;
      v192.size.CGFloat width = width;
      v192.size.double height = v17;
      CGRect v193 = CGRectInset(v192, -v158 - v145, -v158 - v161);
      CGFloat v129 = v193.origin.x;
      CGFloat v130 = v193.origin.y;
      CGFloat v131 = v193.size.width;
      CGFloat v132 = v193.size.height;
      int v171 = 2;
      id v172 = (id)r2_24;
      id v173 = 0;
      double v174 = v129;
      double v175 = v130;
      CGFloat v176 = v131;
      double v177 = v132;
      [v5 addAdornmentRect:&v171];
    }
  }
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v178);
}

void sub_2234E7280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,TSWPAdornmentRect *a32)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)(v32 - 208));
  _Unwind_Resume(a1);
}

NSUInteger TSWPParagraphEnumerator::paragraphTextRange(TSWPParagraphEnumerator *this)
{
  NSUInteger result = TSWPAttributeArray::rangeForAttributeIndex((TSWPAttributeArray *)[this->var0 attributeArrayForKind:0], this->var4);
  NSUInteger v3 = result;
  NSUInteger v5 = v4;
  if (this->var5 != this->var4)
  {
    v7.uint64_t location = TSWPAttributeArray::rangeForAttributeIndex((TSWPAttributeArray *)[this->var0 attributeArrayForKind:0], this->var5);
    v7.NSUInteger length = v6;
    v8.uint64_t location = v3;
    v8.NSUInteger length = v5;
    return NSUnionRange(v8, v7).location;
  }
  return result;
}

void std::shared_ptr<TSWPLineFragmentArray>::reset[abi:ne180100]<TSWPLineFragmentArray,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<TSWPLineFragmentArray>::shared_ptr[abi:ne180100]<TSWPLineFragmentArray,void>(&v2, a2);
}

void std::shared_ptr<TSWPLineFragmentArray>::shared_ptr[abi:ne180100]<TSWPLineFragmentArray,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_2234E7658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<TSWPLineFragmentArray>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<TSWPLineFragmentArray>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *NSUInteger result = a2;
  if (v2)
  {
    NSUInteger v3 = v2;
    std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (void ***)MEMORY[0x223CB8F20](v2, 0x1020C40D1034F40);
  }
  return result;
}

void TSWPLayoutChore::pCacheErasableInfos(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v37 = (void *)[a2 columns];
  uint64_t v7 = [v37 count];
  if (*(void *)(a1 + 232))
  {
    unint64_t v8 = v7;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    double v11 = 0.0;
    do
    {
      double v39 = v11;
      if (v8 > a3 + v10)
      {
        double v12 = objc_msgSend(v37, "objectAtIndexedSubscript:");
        double v13 = (uint64_t *)[v12 lineFragmentArray];
        uint64_t v14 = *v13;
        uint64_t v15 = v13[1];
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        [v12 wpBounds];
        uint64_t v38 = v16;
        uint64_t v18 = v17;
        uint64_t v20 = v19;
        uint64_t v22 = v21;
        [v12 erasableBounds:1];
        uint64_t v24 = v23;
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        [v12 contentBottom];
        uint64_t v32 = v31;
        uint64_t v33 = (void *)(a4 + 88 * v9);
        NSUInteger v34 = (std::__shared_weak_count *)v33[1];
        *uint64_t v33 = v14;
        v33[1] = v15;
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v34);
        }
        NSUInteger v35 = (void *)(a4 + 88 * v9);
        v35[2] = v38;
        v35[3] = v18;
        v35[4] = v20;
        v35[5] = v22;
        v35[6] = v24;
        v35[7] = v26;
        v35[8] = v28;
        v35[9] = v30;
        v35[10] = v32;
      }
      double v11 = *(double *)(a4 + 88 * v9 + 40);
      if (v39 != 0.0)
      {
        BOOL v36 = v39 == v11;
        double v11 = v39;
        if (!v36) {
          double v11 = 0.0;
        }
      }
      uint64_t v9 = ++v10;
    }
    while (*(void *)(a1 + 232) > (unint64_t)v10);
  }
}

void sub_2234E7844(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>>>::destroy(a1, a2[1]);
    NSUInteger v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
    operator delete(a2);
  }
}

void sub_2234E7D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TSWPLineFragment::singleColor(TSWPLineFragment *this)
{
  return *((void *)this + 67);
}

double TSDTransformXYScale(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

double TSWPLineFragmentArray::topOfCapForForLineFragmentRange(TSWPLineFragmentArray *this, _NSRange a2)
{
  if (a2.location == 0x7FFFFFFFFFFFFFFFLL || a2.length == 0) {
    return NAN;
  }
  NSUInteger length = a2.length;
  NSUInteger v5 = 16 * a2.location;
  double v6 = NAN;
  do
  {
    TSWPLineFragment::topOfCap(*(TSWPLineFragment **)(*(void *)this + v5));
    double v6 = fmin(v6, v7);
    v5 += 16;
    --length;
  }
  while (length);
  return v6;
}

void TSWPLineFragment::topOfCap(TSWPLineFragment *this)
{
  if ((*((unsigned char *)this + 27) & 2) != 0)
  {
    v1.origin.CGFloat x = *((CGFloat *)this + 6);
    v1.origin.double y = *((CGFloat *)this + 7);
    v1.size.CGFloat width = *((CGFloat *)this + 8);
    v1.size.double height = *((CGFloat *)this + 9);
    fmin(*((double *)this + 4) + *((double *)this + 5) - *((double *)this + 21), CGRectGetMinY(v1) + *((double *)this + 68));
  }
}

void sub_2234E88A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2234E8BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

TSWPAttributeArray *TSWPAttributeArray::didInsertAttribute(TSWPAttributeArray *this, const TSWPAttributeRecord *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  unsigned int var1 = this->var1;
  BOOL v5 = var1 > 0x11;
  int v6 = (1 << var1) & 0x38100;
  if (!v5 && v6 != 0)
  {
    unint64_t v8 = (void *)*((void *)a2 + 1);
    if (v8)
    {
      unsigned int v10 = this;
      this = (TSWPAttributeArray *)[(TSKAddedToDocumentContext *)a3 changeTrackingSubstorage];
      if ((this & 1) == 0)
      {
        if (objc_opt_respondsToSelector()) {
          [v8 setParentStorage:v10->var5];
        }
        this = (TSWPAttributeArray *)[v10->var5 isDOLCSuppressed];
        if ((this & 1) == 0)
        {
          this = (TSWPAttributeArray *)[v10->var5 documentRoot];
          if (this)
          {
            return (TSWPAttributeArray *)[v8 wasAddedToDocumentRoot:this context:a3];
          }
        }
      }
    }
  }
  return this;
}

uint64_t TSWPAttributeArray::insertAttribute(TSWPAttributeArray *this, const TSWPAttributeRecord *a2, unint64_t a3, TSKAddedToDocumentContext *a4, TSWPStorageTransaction *a5)
{
  if (this->var2 < a3)
  {
    unsigned int v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPAttributeArray::insertAttribute(const TSWPAttributeRecord &, TSWPAttributeIndex, TSKAddedToDocumentContext *, TSWPStorageTransaction *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPAttributeArray.mm"), 327, @"insertAttribute: bad count.");
  }
  if ((*((unsigned int (**)(TSWPAttributeArray *))this->var0 + 3))(this)) {
    (*((void (**)(TSWPAttributeArray *, void, TSKAddedToDocumentContext *, TSWPStorageTransaction *))this->var0
  }
     + 30))(this, *((void *)a2 + 1), a4, a5);
  (*((void (**)(TSWPAttributeArray *, const TSWPAttributeRecord *))this->var0 + 23))(this, a2);
  unint64_t var2 = this->var2;
  unint64_t v13 = 2 * var2 + 2;
  if (var2 + 1 > this->var3 && var2 < v13)
  {
    this->var3 = v13;
    this->var4 = (TSWPAttributeRecord *)malloc_type_realloc(this->var4, 16 * v13, 0x10820408DE112D3uLL);
    unint64_t var2 = this->var2;
  }
  memmove((char *)this->var4 + 16 * a3 + 16, (char *)this->var4 + 16 * a3, 16 * (var2 - a3));
  *((_OWORD *)this->var4 + a3) = *(_OWORD *)a2;
  ++this->var2;
  uint64_t v15 = (uint64_t (*)(TSWPAttributeArray *, const TSWPAttributeRecord *, TSKAddedToDocumentContext *, TSWPStorageTransaction *))*((void *)this->var0 + 31);

  return v15(this, a2, a4, a5);
}

id TSWPParagraphAttributeArray::retain(TSWPParagraphAttributeArray *this, const TSWPAttributeRecord *a2)
{
  id result = (id)(*((uint64_t (**)(TSWPParagraphAttributeArray *))this->var0 + 3))(this);
  if (result)
  {
    NSUInteger v4 = (void *)*((void *)a2 + 1);
    return v4;
  }
  return result;
}

uint64_t TSWPParagraphAttributeArray::hasObjects(TSWPParagraphAttributeArray *this)
{
  return (this->var1 > 0x12) | (0x3F3FDu >> this->var1) & 1;
}

TSWPAttributeArray *TSWPAttributeArray::willInsertAttributeObject(TSWPAttributeArray *this, objc_object *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  unsigned int var1 = this->var1;
  BOOL v5 = var1 > 0x11;
  int v6 = (1 << var1) & 0x38100;
  if (!v5 && v6 != 0 && a2 != 0)
  {
    uint64_t v11 = this;
    this = (TSWPAttributeArray *)objc_msgSend(this->var5, "isDOLCSuppressed", a3, a4);
    if ((this & 1) == 0)
    {
      this = (TSWPAttributeArray *)[v11->var5 documentRoot];
      if (this)
      {
        return (TSWPAttributeArray *)[(objc_object *)a2 willBeAddedToDocumentRoot:this context:a3];
      }
    }
  }
  return this;
}

id TSWPStyleAttributeArray::retain(TSWPStyleAttributeArray *this, id *a2)
{
  return a2[1];
}

uint64_t TSWPAttributeArray::hasObjects(TSWPAttributeArray *this)
{
  return 1;
}

id TSWPAttachmentAttributeArray::retain(TSWPAttachmentAttributeArray *this, id *a2)
{
  return a2[1];
}

uint64_t TSWPAttachmentAttributeArray::willInsertAttributeObject(uint64_t this, objc_object *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  if (a2)
  {
    uint64_t v6 = this;
    this = objc_msgSend(*(id *)(this + 40), "isDOLCSuppressed", a3, a4);
    if ((this & 1) == 0)
    {
      this = [*(id *)(v6 + 40) documentRoot];
      if (this)
      {
        return [(objc_object *)a2 willBeAddedToDocumentRoot:this context:a3];
      }
    }
  }
  return this;
}

TSWPParagraphAttributeArray *TSWPParagraphAttributeArray::applyObjectToParagraphRange(TSWPParagraphAttributeArray *this, objc_object *a2, _NSRange a3, TSWPParagraphAttributeArray *a4, TSWPStorageTransaction *a5)
{
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  unsigned int v10 = this;
  if (!a3.length || !a4 || a3.location + a3.length > a4->var2)
  {
    uint64_t v11 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPParagraphAttributeArray::applyObjectToParagraphRange(id, NSRange, TSWPParagraphAttributeArray *, TSWPStorageTransaction *)");
    this = (TSWPParagraphAttributeArray *)objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 577, @"Bad par index range.");
  }
  if (!a2 && a4 == v10)
  {
    unint64_t v13 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPParagraphAttributeArray::applyObjectToParagraphRange(id, NSRange, TSWPParagraphAttributeArray *, TSWPStorageTransaction *)");
    uint64_t v15 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"];
    return (TSWPParagraphAttributeArray *)[v13 handleFailureInFunction:v14 file:v15 lineNumber:578 description:@"Now allowed to delete paragraph styles.  Replace only!"];
  }
  if (v10 == a4 || !length)
  {
    if (!a4) {
      return this;
    }
    unint64_t v16 = location + length;
  }
  else
  {
    unint64_t v16 = location + length;
    if (location + length < a4->var2)
    {
      this = (TSWPParagraphAttributeArray *)TSWPParagraphAttributeArray::isParagraphBreakSparse(v10, location + length, (TSWPAttributeArray *)a4);
      if (this)
      {
        unint64_t v17 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, location + length);
        this = (TSWPParagraphAttributeArray *)TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, v17);
        if (this == (TSWPParagraphAttributeArray *)0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v18 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
          uint64_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPParagraphAttributeArray::applyObjectToParagraphRange(id, NSRange, TSWPParagraphAttributeArray *, TSWPStorageTransaction *)");
          this = (TSWPParagraphAttributeArray *)objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 589, @"Bad attribute index.");
        }
        else
        {
          uint64_t v32 = (objc_object *)*((void *)v10->var4 + 2 * (void)this + 1);
          if (v32 != a2)
          {
            unint64_t v34 = v17;
            NSUInteger v35 = v32;
            this = (TSWPParagraphAttributeArray *)TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)v10, (const TSWPAttributeRecord *)&v34, (unint64_t)&this->var0 + 1, 0, a5);
          }
        }
      }
    }
  }
  if (v16 <= a4->var2)
  {
    if (a2)
    {
      if (location < v16)
      {
        unint64_t v20 = location;
        while (1)
        {
          uint64_t v21 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, v20);
          unint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v22 = TSWPParagraphAttributeArray::attributeIndexForParagraphIndex(v10, v20, (TSWPAttributeArray *)a4, &v33);
          uint64_t v23 = v22;
          uint64_t v24 = v22 == 0x7FFFFFFFFFFFFFFFLL ? 0 : (objc_object *)*((void *)v10->var4 + 2 * v22 + 1);
          if (a4 == v10) {
            break;
          }
          if (v33 != v21)
          {
            if (v24 != a2)
            {
              unint64_t v34 = v21;
              NSUInteger v35 = a2;
              TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)v10, (const TSWPAttributeRecord *)&v34, v22 + 1, 0, a5);
            }
            goto LABEL_37;
          }
          if (v24 != a2)
          {
            if (v22) {
              uint64_t v25 = (objc_object *)*((void *)v10->var4 + 2 * v22 - 1);
            }
            else {
              uint64_t v25 = 0;
            }
            if (v25 == a2)
            {
              (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))v10->var0
               + 7))(v10, v22, 1, a5);
              goto LABEL_37;
            }
            uint64_t v26 = (TSWPAttributeArray *)v10;
            goto LABEL_36;
          }
LABEL_37:
          if (v16 == ++v20) {
            goto LABEL_48;
          }
        }
        uint64_t v26 = (TSWPAttributeArray *)a4;
LABEL_36:
        TSWPAttributeArray::replaceObjectForAttributeIndex(v26, a2, v23, 0, a5);
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v27 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, location);
      unint64_t v28 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, v16 - 1);
      unint64_t v29 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, v27);
      if (v29 == 0x7FFFFFFFFFFFFFFFLL || (unint64_t v30 = v29) == 0)
      {
        if (v10->var2 < 2
          || (unint64_t v30 = 1, TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, 1uLL) > v28))
        {
          unint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      unint64_t v31 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, v28);
      if (v31 != 0x7FFFFFFFFFFFFFFFLL && v31 >= v30) {
        (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, unint64_t, TSWPStorageTransaction *))v10->var0
      }
         + 7))(v10, v30, v31 - v30 + 1, a5);
    }
LABEL_48:
    v37.NSUInteger location = location;
    v37.NSUInteger length = length;
    return TSWPParagraphAttributeArray::didApplyAttributes(v10, v37, (TSWPAttributeArray *)a4, a5);
  }
  return this;
}

void TSWPAttributeArray::replaceObjectForAttributeIndex(TSWPAttributeArray *this, objc_object *a2, uint64_t a3, TSKAddedToDocumentContext *a4, TSWPStorageTransaction *a5)
{
  BOOL v5 = (char *)this->var4 + 16 * a3;
  uint64_t v6 = (objc_object *)*((void *)v5 + 1);
  if (v6 != a2)
  {
    (*((void (**)(TSWPAttributeArray *))this->var0 + 30))(this);
    unsigned int v10 = v6;
    uint64_t v11 = a2;
    (*((void (**)(TSWPAttributeArray *, char *, TSWPStorageTransaction *))this->var0 + 32))(this, v5, a5);
    (*((void (**)(TSWPAttributeArray *, char *))this->var0 + 24))(this, v5);
    *((void *)v5 + 1) = a2;
    (*((void (**)(TSWPAttributeArray *, char *))this->var0 + 23))(this, v5);
    (*((void (**)(TSWPAttributeArray *, objc_object *, TSWPStorageTransaction *))this->var0 + 33))(this, v6, a5);
    (*((void (**)(TSWPAttributeArray *, char *, TSKAddedToDocumentContext *, TSWPStorageTransaction *))this->var0
     + 31))(this, v5, a4, a5);
  }
}

TSWPAttributeArray *TSWPAttributeArray::didDeleteAttributeObject(TSWPAttributeArray *this, objc_object *a2, TSWPStorageTransaction *a3)
{
  unsigned int var1 = this->var1;
  BOOL v4 = var1 > 0x11;
  int v5 = (1 << var1) & 0x38100;
  if (!v4 && v5 != 0 && a2 != 0)
  {
    uint64_t v9 = this;
    if ((objc_opt_respondsToSelector() & 1) == 0
      || (this = (TSWPAttributeArray *)[(objc_object *)a2 parentStorage]) == 0)
    {
      this = (TSWPAttributeArray *)[v9->var5 isDOLCSuppressed];
      if ((this & 1) == 0)
      {
        this = (TSWPAttributeArray *)[v9->var5 documentRoot];
        if (this)
        {
          return (TSWPAttributeArray *)[(objc_object *)a2 wasRemovedFromDocumentRoot:this];
        }
      }
    }
  }
  return this;
}

TSWPAttributeArray *TSWPAttributeArray::willDeleteAttribute(TSWPAttributeArray *this, const TSWPAttributeRecord *a2, TSWPStorageTransaction *a3)
{
  unsigned int var1 = this->var1;
  BOOL v4 = var1 > 0x11;
  int v5 = (1 << var1) & 0x38100;
  if (!v4 && v5 != 0)
  {
    double v7 = (void *)*((void *)a2 + 1);
    if (v7)
    {
      unint64_t v8 = this;
      if (objc_opt_respondsToSelector())
      {
        this = (TSWPAttributeArray *)[v7 parentStorage];
        if (this != v8->var5) {
          return this;
        }
        [v7 setParentStorage:0];
      }
      this = (TSWPAttributeArray *)[v8->var5 isDOLCSuppressed];
      if ((this & 1) == 0)
      {
        this = (TSWPAttributeArray *)[v8->var5 documentRoot];
        if (this)
        {
          return (TSWPAttributeArray *)[v7 willBeRemovedFromDocumentRoot:this];
        }
      }
    }
  }
  return this;
}

uint64_t TSWPAttachmentAttributeArray::didInsertAttribute(uint64_t this, const TSWPAttributeRecord *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  BOOL v4 = (void *)*((void *)a2 + 1);
  if (v4)
  {
    uint64_t v6 = this;
    objc_msgSend(*((id *)a2 + 1), "setParentStorage:", *(void *)(this + 40), a4);
    this = [*(id *)(v6 + 40) isDOLCSuppressed];
    if ((this & 1) == 0)
    {
      this = [*(id *)(v6 + 40) documentRoot];
      if (this)
      {
        return [v4 wasAddedToDocumentRoot:this context:a3];
      }
    }
  }
  return this;
}

void TSWPParagraphAttributeArray::release(TSWPParagraphAttributeArray *this, const TSWPAttributeRecord *a2)
{
  if ((*((unsigned int (**)(TSWPParagraphAttributeArray *))this->var0 + 3))(this))
  {
    NSUInteger v3 = (void *)*((void *)a2 + 1);
  }
}

unint64_t TSWPParagraphAttributeArray::attributeIndexForParagraphIndex(TSWPParagraphAttributeArray *this, unint64_t a2, TSWPAttributeArray *a3, unint64_t *a4)
{
  unint64_t v6 = TSWPAttributeArray::charIndexForAttributeIndex(a3, a2);
  unint64_t v7 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)this, v6);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPAttributeIndex TSWPParagraphAttributeArray::attributeIndexForParagraphIndex(TSWPAttributeIndex, TSWPParagraphAttributeArray *, TSWPCharIndex *)");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 546, @"Bad attribute index.");
    unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    if (!a4) {
      return v7;
    }
    goto LABEL_5;
  }
  unint64_t v10 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)this, v7);
  if (a4) {
LABEL_5:
  }
    *a4 = v10;
  return v7;
}

TSWPParagraphAttributeArray *TSWPParagraphAttributeArray::didApplyAttributes(TSWPParagraphAttributeArray *this, _NSRange a2, TSWPAttributeArray *a3, TSWPStorageTransaction *a4)
{
  NSUInteger v4 = a2.location + a2.length;
  if (!__CFADD__(a2.location, a2.length))
  {
    NSUInteger location = a2.location;
    unint64_t v8 = (TSWPAttributeArray *)this;
    do
    {
      if (location < a3->var2)
      {
        unint64_t v9 = TSWPAttributeArray::charIndexForAttributeIndex(a3, location);
        unint64_t v10 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(v8, v9);
        this = (TSWPParagraphAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))v8->var0
                                               + 29))(v8, v10, a4);
      }
      ++location;
    }
    while (location <= v4);
  }
  return this;
}

void TSWPStyleAttributeArray::release(TSWPStyleAttributeArray *this, id *a2)
{
}

void TSWPAttachmentAttributeArray::release(TSWPAttachmentAttributeArray *this, id *a2)
{
}

uint64_t TSWPAttachmentAttributeArray::didDeleteAttributeObject(uint64_t this, objc_object *a2, TSWPStorageTransaction *a3)
{
  if (a2)
  {
    uint64_t v4 = this;
    this = [(objc_object *)a2 parentStorage];
    if (!this)
    {
      this = [*(id *)(v4 + 40) isDOLCSuppressed];
      if ((this & 1) == 0)
      {
        this = [*(id *)(v4 + 40) documentRoot];
        if (this)
        {
          return [(objc_object *)a2 wasRemovedFromDocumentRoot:this];
        }
      }
    }
  }
  return this;
}

uint64_t TSWPAttachmentAttributeArray::willDeleteAttribute(uint64_t this, const TSWPAttributeRecord *a2, TSWPStorageTransaction *a3)
{
  NSUInteger v3 = (void *)*((void *)a2 + 1);
  if (v3)
  {
    uint64_t v4 = this;
    this = objc_msgSend(*((id *)a2 + 1), "parentStorage", a3);
    if (this == *(void *)(v4 + 40))
    {
      [v3 setParentStorage:0];
      this = [*(id *)(v4 + 40) isDOLCSuppressed];
      if ((this & 1) == 0)
      {
        this = [*(id *)(v4 + 40) documentRoot];
        if (this)
        {
          return [v3 willBeRemovedFromDocumentRoot:this];
        }
      }
    }
  }
  return this;
}

const __CTFont *TSWPFastCreateFontForStyle(uint64_t a1, void *a2, unint64_t a3)
{
  v9[2] = *MEMORY[0x263EF8340];
  unint64_t v6 = (const void *)[a2 findCachedFontForCharacterStyle:a1 scalePercent:a3];
  if (v6)
  {
    unint64_t v7 = v6;
    CFRetain(v6);
  }
  else
  {
    v9[0] = a1;
    v9[1] = a2;
    return TSWPCreateFontForStylesWithScale((uint64_t)v9, 2uLL, a3);
  }
  return (const __CTFont *)v7;
}

void TSWPCoreTextTypesetter::pApplyChangeTrackingToLineFragment(id *this, TSWPLineFragment *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if ([this[2] hasTrackedChanges])
  {
    *(_DWORD *)((char *)v21 + 15) = 65793;
    v21[0] = xmmword_22383B250;
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    memset(&v17[3], 0, 64);
    unint64_t v5 = *(void *)a2;
    unint64_t v4 = *((void *)a2 + 1);
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    unint64_t v6 = v4 + v5;
    memset(v17, 0, 48);
    do
    {
      [this[2] attributesAtCharIndex:v5 attributesOfInterest:v21 attributesTable:v17 effectiveRange:&v15];
      if (!v16 && v5 != *((void *)a2 + 1) + *(void *)a2)
      {
        unint64_t v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v8 = [NSString stringWithUTF8String:"void TSWPCoreTextTypesetter::pApplyChangeTrackingToLineFragment(TSWPLineFragment *) const"];
        objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 4574, @"Empty effectiveRange");
      }
      unint64_t v10 = *((void *)&v18 + 1);
      unint64_t v9 = v19;
      if (*((void *)&v18 + 1) && ![*((id *)&v18 + 1) showsMarkup]) {
        unint64_t v10 = 0;
      }
      if (v9)
      {
        if (![(id)v9 isHidden] || (objc_msgSend((id)v9, "showsMarkup") & 1) != 0)
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = 1;
LABEL_18:
          *((_DWORD *)a2 + 6) |= 0x80000u;
          if (v11 && v12)
          {
            if (!objc_msgSend((id)objc_msgSend((id)v10, "changeAdornmentsColor"), "isEqual:", objc_msgSend((id)v9, "changeAdornmentsColor")))
            {
              unint64_t v13 = 0;
              goto LABEL_26;
            }
LABEL_23:
            uint64_t v14 = (void *)v10;
          }
          else
          {
            if (v11) {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)v9;
          }
          unint64_t v13 = (void *)[v14 changeAdornmentsColor];
LABEL_26:
          if (!TSWPLineFragment::markupColorIsDefault(a2)
            && ![v13 isEqual:TSWPLineFragment::changeAdornmentMarkupColor(a2)])
          {
            unint64_t v13 = 0;
          }
          TSWPLineFragment::setChangeAdornmentMarkupColor(a2, (TSUColor *)v13);
          if (v12 && ([(id)v9 showsMarkup] & 1) == 0) {
            TSWPCoreTextTypesetter::pAddHiddenDeletionForLineFragment(this, a2, (TSUColor *)[(id)v9 changeAdornmentsColor], v16 + v15);
          }
          goto LABEL_32;
        }
        if (![(id)v9 showsHiddenDeletionMarkup]) {
          unint64_t v9 = 0;
        }
      }
      BOOL v11 = v10 != 0;
      BOOL v12 = v9 != 0;
      if (v10 | v9) {
        goto LABEL_18;
      }
LABEL_32:
      if (v16) {
        unint64_t v5 = v16 + v15;
      }
      else {
        ++v5;
      }
    }
    while (v5 < v6);
  }
}

void TSWPLineFragment::~TSWPLineFragment(TSWPLineFragment *this)
{
  uint64_t v2 = (TSWPListLabel *)*((void *)this + 22);
  if (v2)
  {
    TSWPListLabel::~TSWPListLabel(v2);
    MEMORY[0x223CB8F20]();
    *((void *)this + 22) = 0;
  }
  uint64_t v3 = *((void *)this + 58);
  if (v3)
  {
    CGColorRelease(*(CGColorRef *)(v3 + 24));

    MEMORY[0x223CB8F20](v3, 0x10A0C406E8A3FE5);
    *((void *)this + 5_Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  uint64_t v4 = *((void *)this + 49);
  if (v4)
  {
    unint64_t v5 = *(const void **)(v4 + 16);
    if (v5) {
      CFRelease(v5);
    }
    MEMORY[0x223CB8F20](v4, 0x1060C4051B6AA0BLL);
    *((void *)this + 49) = 0;
  }

  *((void *)this + 23) = 0;
  *((void *)this + 59) = 0;

  *((void *)this + 64) = 0;
  *((void *)this + 66) = 0;
  unint64_t v6 = (const void *)*((void *)this + 67);
  if (v6)
  {
    CFRelease(v6);
    *((void *)this + 67) = 0;
  }
  unint64_t v7 = (void *)*((void *)this + 61);
  if (v7)
  {
    *((void *)this + 62) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void **)((char *)this + 440);
  std::vector<TSWPAdornments>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 368);
  std::vector<TSWPUIAttachmentData>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 344);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 320);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 296);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 272);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 248);
  std::vector<TSWPLineRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 224);
  std::vector<TSWPLineRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 192);
  std::vector<TSWPLineRef>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CGRect v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<TSWPAdornmentLine>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<TSWPLineRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CGRect v1 = *a1;
  uint64_t v2 = (CFTypeRef *)**a1;
  if (v2)
  {
    uint64_t v4 = (CFTypeRef *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        std::allocator<TSWPLineRef>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<TSWPAdornments>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CGRect v1 = *a1;
  uint64_t v2 = (CGColorRef *)**a1;
  if (v2)
  {
    uint64_t v4 = (CGColorRef *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        TSWPAdornments::~TSWPAdornments(v4 - 25);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<TSWPLineRef>::destroy[abi:ne180100](uint64_t a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
}

void std::vector<TSWPUIAttachmentData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<TSWPUIAttachmentData>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void TSWPAdornments::~TSWPAdornments(CGColorRef *this)
{
  CGColorRelease(this[2]);
  CGColorRef v2 = this[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = this[16];
  if (v3)
  {
    this[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[13];
  if (v4)
  {
    this[14] = v4;
    operator delete(v4);
  }
  unint64_t v5 = this[10];
  if (v5)
  {
    this[11] = v5;
    operator delete(v5);
  }
  unint64_t v6 = this[7];
  if (v6)
  {
    this[8] = v6;
    operator delete(v6);
  }
  unint64_t v7 = this[4];
  if (v7)
  {
    this[5] = v7;
    operator delete(v7);
  }
}

void TSWPParagraphTypesetter::~TSWPParagraphTypesetter(TSWPParagraphTypesetter *this)
{
  *(void *)this = 0;
  CGColorRef v2 = (const void *)*((void *)this + 8);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 7);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 7) = 0;
  }
  unint64_t v5 = (void **)((char *)this + 104);
  std::vector<_TSWPTateChuYokoRun>::__destroy_vector::operator()[abi:nn180100](&v5);
  unint64_t v5 = (void **)((char *)this + 80);
  std::vector<_TSWPRubyRun>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
}

void sub_2234EAB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 104);
  std::vector<_TSWPTateChuYokoRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 80);
  std::vector<_TSWPRubyRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  BOOL v12 = *(void **)(v10 + 32);
  if (v12)
  {
    *(void *)(v10 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void std::vector<_TSWPTateChuYokoRun>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  CGColorRef v2 = *a1;
  if (*v2)
  {
    std::vector<_TSWPTateChuYokoRun>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<_TSWPRubyRun>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  CGColorRef v2 = *a1;
  if (*v2)
  {
    std::vector<_TSWPRubyRun>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void String(unint64_t *a1, int a2)
{
  int v2 = a2;
  String(a1, (uint64_t)&v2, 1uLL);
}

void String(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = *a1;
    do
    {
      if (v10)
      {
        unint64_t v11 = 0;
        int v12 = *(_DWORD *)(a2 + 4 * v8);
        unsigned int v13 = 1;
        while (1)
        {
          unint64_t v14 = v3 + 16 * v11;
          if (v12 == *(unsigned __int16 *)(v14 + 8)) {
            break;
          }
          unint64_t v11 = v13;
          if (v10 <= v13++) {
            goto LABEL_15;
          }
        }
        if (!*(unsigned char *)(v14 + 10)) {

        }
        if (--v10 > v11) {
          *(_OWORD *)unint64_t v14 = *(_OWORD *)(v3 + 16 * v10);
        }
      }
LABEL_15:
      uint64_t v8 = ++v9;
    }
    while (v9 < a3);
    if (v10 != *a1)
    {
      uint64_t v16 = (void *)a1[1];
      if (v10)
      {
        unint64_t v17 = malloc_type_realloc(v16, 16 * v10, 0x10820400B94AB5FuLL);
        if (!v17) {
          goto LABEL_23;
        }
      }
      else
      {
        free(v16);
        unint64_t v17 = 0;
      }
      a1[1] = (unint64_t)v17;
LABEL_23:
      *a1 = v10;
      p_TSSPropertyStoreSort((uint64_t)a1);
    }
  }
}

void String(size_t *a1, uint64_t a2, float a3)
{
  if (!a1)
  {
    unint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyStoreSetFloatValueForProperty(TSSPropertyStoreRef, TSSProperty, float)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 301, @"nil map reference");
  }
  uint64_t v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    String((uint64_t)v8, a2, a3);
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    String((uint64_t)v9, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v9, 1);
  }
}

uint64_t String(uint64_t a1, uint64_t a2, float a3)
{
  if (a2 >> 4 >= 0x121)
  {
    unint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 64, @"Property ID <%d> out of range.", a2);
  }
  uint64_t result = String(a2);
  if (result != 2)
  {
    unsigned int v9 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
    uint64_t v11 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
    unsigned int v12 = String(a2);
    unsigned int v13 = String(v12);
    unint64_t v14 = String(a2);
    uint64_t result = [v9 handleFailureInFunction:v10, v11, 65, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v13, v14, String(2u) file lineNumber description];
  }
  if (a3 == INFINITY)
  {
    uint64_t v15 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v16 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
    uint64_t result = [v15 handleFailureInFunction:v16, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 66, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
  }
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(unsigned char *)(a1 + 10) = 2;
  *(float *)a1 = a3;
  return result;
}

void String(size_t *a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    unint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyStoreSetIntValueForProperty(TSSPropertyStoreRef, TSSProperty, int)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 285, @"nil map reference");
  }
  uint64_t v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    String((uint64_t)v8, a2, a3);
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    String((uint64_t)v9, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v9, 1);
  }
}

uint64_t String(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 >> 4 >= 0x121)
  {
    unint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 53, @"Property ID <%d> out of range.", a2);
  }
  uint64_t result = String(a2);
  if (result != 1)
  {
    unsigned int v9 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
    uint64_t v11 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
    unsigned int v12 = String(a2);
    unsigned int v13 = String(v12);
    unint64_t v14 = String(a2);
    uint64_t result = [v9 handleFailureInFunction:v10, v11, 54, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v13, v14, String(1u) file lineNumber description];
  }
  if (a3 == 0x80000000)
  {
    uint64_t v15 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v16 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
    uint64_t result = [v15 handleFailureInFunction:v16, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 55, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
  }
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(unsigned char *)(a1 + 10) = 1;
  *(_DWORD *)a1 = a3;
  return result;
}

void String(size_t *a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    unint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyStoreSetBoxedObjectForProperty(TSSPropertyStoreRef, TSSProperty, id)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 377, @"nil map reference");
  }
  uint64_t v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!*((unsigned char *)v8 + 10)) {

    }
    String(v9, a2, a3);
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    String((uint64_t)v10, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v10, 1);
  }
}

{
  void *v6;
  uint64_t v7;
  size_t *v8;
  uint64_t v9;
  void v10[2];
  uint64_t vars8;

  if (!a1)
  {
    unint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyStoreSetObjectForProperty(TSSPropertyStoreRef, TSSProperty, id)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 360, @"nil map reference");
  }
  uint64_t v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!*((unsigned char *)v8 + 10)) {

    }
    String(v9, a2, a3);
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    String((uint64_t)v10, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v10, 1);
  }
}

id String(uint64_t a1, uint64_t a2, void *a3)
{
  if (!TSSPropertyEntryInit_nullValue) {
    TSSPropertyEntryInit_nullValue = [MEMORY[0x263EFF9D0] null];
  }
  switch(String(a2))
  {
    case 0u:
      if (a2 >> 4 >= 0x121)
      {
        unint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
        objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 108, @"Property ID <%d> out of range.", a2);
      }
      if (String(a2))
      {
        uint64_t v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
        uint64_t v9 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
        unsigned int v10 = String(a2);
        uint64_t v11 = String(v10);
        unsigned int v12 = String(a2);
        [v7 handleFailureInFunction:v8, v9, 109, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v11, v12, String(0) file lineNumber description];
      }
      unsigned int v13 = a3;
      if (!a3)
      {
        unint64_t v14 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
        [v14 handleFailureInFunction:v15, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 110, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
        unsigned int v13 = 0;
      }
      *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
      *(unsigned char *)(a1 + 10) = 0;
      *(void *)a1 = v13;
      id result = v13;
      break;
    case 1u:
      if (a3) {
        unsigned int v20 = [a3 intValue];
      }
      else {
        unsigned int v20 = 0x80000000;
      }
      if (a2 >> 4 >= 0x121)
      {
        uint64_t v25 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v26 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
        objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 53, @"Property ID <%d> out of range.", a2);
      }
      id result = (id)String(a2);
      if (result != 1)
      {
        unint64_t v27 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v28 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
        uint64_t v29 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
        unsigned int v30 = String(a2);
        unint64_t v31 = String(v30);
        uint64_t v32 = String(a2);
        id result = (id)[v27 handleFailureInFunction:v28, v29, 54, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v31, v32, String(1u) file lineNumber description];
      }
      if (v20 == 0x80000000)
      {
        unint64_t v33 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v34 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
        id result = (id)[v33 handleFailureInFunction:v34, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 55, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
      }
      *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
      *(unsigned char *)(a1 + 10) = 1;
      *(_DWORD *)a1 = v20;
      break;
    case 2u:
      if (a3)
      {
        [a3 floatValue];
        float v22 = v21;
      }
      else
      {
        float v22 = INFINITY;
      }
      if (a2 >> 4 >= 0x121)
      {
        NSUInteger v35 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v36 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
        objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 64, @"Property ID <%d> out of range.", a2);
      }
      id result = (id)String(a2);
      if (result != 2)
      {
        _NSRange v37 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v38 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
        uint64_t v39 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
        unsigned int v40 = String(a2);
        long long v41 = String(v40);
        BOOL v42 = String(a2);
        id result = (id)[v37 handleFailureInFunction:v38, v39, 65, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v41, v42, String(2u) file lineNumber description];
      }
      if (v22 == INFINITY)
      {
        long long v43 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v44 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
        id result = (id)[v43 handleFailureInFunction:v44, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 66, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
      }
      *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
      *(unsigned char *)(a1 + 10) = 2;
      *(float *)a1 = v22;
      break;
    case 3u:
      if (a3)
      {
        [a3 doubleValue];
        double v24 = v23;
      }
      else
      {
        double v24 = INFINITY;
      }
      if (a2 >> 4 >= 0x121)
      {
        double v45 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v46 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
        objc_msgSend(v45, "handleFailureInFunction:file:lineNumber:description:", v46, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 94, @"Property ID <%d> out of range.", a2);
      }
      id result = (id)String(a2);
      if (result != 3)
      {
        double v47 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v48 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
        uint64_t v49 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
        unsigned int v50 = String(a2);
        double v51 = String(v50);
        CGFloat v52 = String(a2);
        id result = (id)[v47 handleFailureInFunction:v48, v49, 95, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v51, v52, String(3u) file lineNumber description];
      }
      if (v24 == INFINITY)
      {
        CGFloat v53 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v54 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
        id result = (id)[v53 handleFailureInFunction:v54, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 96, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
      }
      *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
      *(unsigned char *)(a1 + 10) = 3;
      *(double *)a1 = v24;
      break;
    default:
      unint64_t v17 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInit(TSSPropertyEntry *, TSSProperty, NSObject *)");
      uint64_t v19 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"];
      id result = (id)[v17 handleFailureInFunction:v18 file:v19 lineNumber:49 description:@"Unexpected entry type"];
      break;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t vars8;

  if (a2 >> 4 >= 0x121)
  {
    unint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 108, @"Property ID <%d> out of range.", a2);
  }
  if (String(a2))
  {
    uint64_t v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
    uint64_t v9 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"];
    unsigned int v10 = String(a2);
    uint64_t v11 = String(v10);
    unsigned int v12 = String(a2);
    [v7 handleFailureInFunction:v8, v9, 109, @"Unexpected property type of '%@' for property '%@'. Expected '%@'.", v11, v12, String(0) file lineNumber description];
  }
  unsigned int v13 = a3;
  if (!a3)
  {
    unint64_t v14 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
    [v14 handleFailureInFunction:v15, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 110, @"Illegal to set undefined value for property %d %@", a2, String(a2) file lineNumber description];
    unsigned int v13 = 0;
  }
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(unsigned char *)(a1 + 10) = 0;
  *(void *)a1 = v13;

  return v13;
}

void *i_TSSPropertyStoreCreateWithFirstPropertyAndArgumentList(uint64_t a1, void **a2)
{
  uint64_t v2 = a1;
  uint64_t v18 = a2;
  uint64_t v19 = a2;
  unsigned int v3 = 0;
  if (a1)
  {
    do
    {
      unsigned int v5 = String(a1);
      if (v5 - 2 < 2 || v5 <= 1) {
        ++v19;
      }
      ++v3;
      BOOL v4 = v19++;
      LODWORD(a1) = *(_DWORD *)v4;
    }
    while (*(_DWORD *)v4);
  }
  uint64_t v6 = v3;
  uint64_t v7 = p_TSSPropertyStoreAllocateWithCapacity(v3);
  uint64_t v8 = v7;
  if (v7)
  {
    void *v7 = v6;
    if (v6)
    {
      uint64_t v9 = v7[1];
      while (1)
      {
        uint64_t v10 = v2;
        if (!v2)
        {
          uint64_t v11 = v18++;
          uint64_t v10 = *(unsigned int *)v11;
          if (!v10) {
            break;
          }
        }
        uint64_t v2 = 0;
        switch(String(v10))
        {
          case 0u:
            unsigned int v12 = v18++;
            String(v9, v10, *v12);
            goto LABEL_18;
          case 1u:
            unsigned int v13 = (int *)v18++;
            String(v9, v10, *v13);
            goto LABEL_18;
          case 2u:
            unint64_t v14 = (double *)v18++;
            float v15 = *v14;
            String(v9, v10, v15);
            goto LABEL_18;
          case 3u:
            uint64_t v16 = (double *)v18++;
            String(v9, v10, *v16);
LABEL_18:
            uint64_t v2 = 0;
            v9 += 16;
            break;
          default:
            continue;
        }
      }
      if ((p_TSSPropertyStoreSort((uint64_t)v8) & 1) == 0)
      {
        String(v8);
        return 0;
      }
    }
  }
  return v8;
}

uint64_t String(int a1)
{
  if ((TSSPropertyGetType_typeLookupInitialized & 1) == 0)
  {
    for (uint64_t i = 0; i != 701; ++i)
      TSSPropertyGetType_typeLookup[(unsigned __int16)TSSPropertyGetType_typeTable[i]] = BYTE2(TSSPropertyGetType_typeTable[i]);
    TSSPropertyGetType_typeLookupInitialized = 1;
  }
  return TSSPropertyGetType_typeLookup[a1];
}

uint64_t p_TSSPropertyStoreSort(uint64_t a1)
{
  if (*(void *)a1 < 2uLL) {
    return 1;
  }
  uint64_t v1 = mergesort(*(void **)(a1 + 8), *(void *)a1, 0x10uLL, (int (__cdecl *)(const void *, const void *))p_TSSPropertyEntryCompare);
  if (!v1) {
    return 1;
  }
  NSLog((NSString *)@"p_TSSPropertyStoreSort mergesort failed with error %d", v1);
  return 0;
}

void **TSWPLineFragmentArray::appendObject(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  uint64_t v4 = *(void *)a2;
  *(_WORD *)(*(void *)a2 + 552) = *(_WORD *)(a1 + 24);
  if (*((void *)&v3 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v3 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  id result = (void **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 8);
  if ((unint64_t)v7 >= v6)
  {
    long long v16 = v3;
    uint64_t v9 = ((uint64_t)v7 - *(void *)a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v17[4] = (void *)(a1 + 16);
    unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)result, v12);
    unint64_t v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v15];
    *(_OWORD *)unint64_t v14 = v16;
    void v17[2] = v14 + 16;
    std::vector<std::shared_ptr<TSWPLineFragment>>::__swap_out_circular_buffer((uint64_t *)a1, v17);
    uint64_t v8 = *(void **)(a1 + 8);
    id result = std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer(v17);
  }
  else
  {
    void *v7 = v4;
    v7[1] = *((void *)&v3 + 1);
    uint64_t v8 = v7 + 2;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v7 + 2;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v8;
  return result;
}

void sub_2234EC2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<TSWPLineFragment>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TSWPLineFragment>>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TSWPLineFragment>>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSWPLineFragment>>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSWPLineFragment>>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TSWPLineFragment>>,std::reverse_iterator<std::shared_ptr<TSWPLineFragment>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t TSWPLayoutChore::pAdjustTrailingSpaceAfter(uint64_t a1, TSWPLineFragmentArray **a2)
{
  uint64_t result = TSWPLineFragmentArray::lastObject(*a2);
  if (result)
  {
    uint64_t v5 = (double *)result;
    double v6 = *(double *)(result + 160);
    if (v6 != 0.0)
    {
      unint64_t v7 = *(void *)(a1 + 160);
      BOOL v9 = *(void *)result >= v7;
      unint64_t v8 = *(void *)result - v7;
      BOOL v9 = !v9 || v8 >= *(void *)(a1 + 168);
      if (v9)
      {
        objc_msgSend((id)TSWPLayoutChore::pGetParagraphStyleAtCharIndex((TSWPLayoutChore *)a1, *(void *)result), "floatValueForProperty:", 88);
        double v11 = (float)((float)(v10 * (float)(unint64_t)[*(id *)(a1 + 184) scaleTextPercent]) / 100.0);
        double v6 = v5[20];
      }
      else
      {
        double v11 = *(double *)(a1 + 392);
      }
      if (v6 >= v11) {
        double v12 = v11;
      }
      else {
        double v12 = v6;
      }
      uint64_t v13 = TSWPLineFragmentArray::count(*a2);
      if (v13)
      {
        double v14 = v6 - v12;
        double v15 = v5[4] + v5[5];
        unint64_t v16 = v13 - 1;
        do
        {
          uint64_t v17 = TSWPLineFragmentArray::objectAtIndex(*a2, v16);
          if (*(double *)(v17 + 32) + *(double *)(v17 + 40) != v15) {
            break;
          }
          uint64_t v18 = v17;
          double v19 = v12 + *(double *)(a1 + 704);
          *(double *)(v17 + 72) = *(double *)(v17 + 72) - v19;
          double v20 = *(double *)(v17 + 104) - v19;
          *(double *)(v17 + 104) = v20;
          if (*(void *)(v17 + 176))
          {
            CGFloat v21 = *(double *)(v17 + 80);
            CGFloat v22 = *(double *)(v17 + 88);
            CGFloat v23 = *(double *)(v17 + 96);
            TSWPLineFragment::labelRect((TSWPLineFragment *)v17);
            v29.origin.CGFloat x = v24;
            v29.origin.double y = v25;
            v29.size.CGFloat width = v26;
            v29.size.double height = v27;
            v28.origin.CGFloat x = v21;
            v28.origin.double y = v22;
            v28.size.CGFloat width = v23;
            v28.size.double height = v20;
            *(CGRect *)(v18 + 80) = CGRectUnion(v28, v29);
          }
          *(double *)(v18 + 160) = v14;
          --v16;
        }
        while (v16 != -1);
      }
      return TSWPLineFragmentArray::lastObject(*a2);
    }
  }
  return result;
}

uint64_t TSWPLineFragmentArray::lastObject(TSWPLineFragmentArray *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 == *(void *)this) {
    return 0;
  }
  else {
    return *(void *)(v1 - 16);
  }
}

uint64_t std::vector<TSWPAdornments>::__push_back_slow_path<TSWPAdornments const&>(uint64_t *a1, const TSWPAdornments *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    float v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TSWPAdornments>>(v7, v9);
  }
  else {
    float v10 = 0;
  }
  uint64_t v13 = v10;
  double v14 = (TSWPAdornments *)&v10[200 * v4];
  unint64_t v16 = &v10[200 * v9];
  TSWPAdornments::TSWPAdornments(v14, a2);
  double v15 = (char *)v14 + 200;
  std::vector<TSWPAdornments>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<TSWPAdornments>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2234EC834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TSWPAdornments>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TSWPAdornments>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TSWPAdornments>,std::reverse_iterator<TSWPAdornments*>,std::reverse_iterator<TSWPAdornments*>,std::reverse_iterator<TSWPAdornments*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TSWPAdornments>,std::reverse_iterator<TSWPAdornments*>,std::reverse_iterator<TSWPAdornments*>,std::reverse_iterator<TSWPAdornments*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 200;
  while (a3 + v10 != a5)
  {
    double v12 = (TSWPAdornments *)(v11 + v10);
    v10 -= 200;
    TSWPAdornments::TSWPAdornments(v12, (const TSWPAdornments *)(v10 + a3));
  }
  return a6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TSWPAdornments>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(200 * a2);
}

uint64_t std::__split_buffer<TSWPAdornments>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 200;
    TSWPAdornments::~TSWPAdornments((CGColorRef *)(i - 200));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void TSWPAdornments::TSWPAdornments(TSWPAdornments *this, const TSWPAdornments *a2)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  *((void *)this + 7) = 0;
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 1);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<CGRect>::__init_with_size[abi:ne180100]<CGRect*,CGRect*>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 5);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((void *)this + 13, *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 4);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 1_Block_object_dispose(&STACK[0x560], 8) = 0;
  std::vector<TSWPAttachmentPosition>::__init_with_size[abi:ne180100]<TSWPAttachmentPosition*,TSWPAttachmentPosition*>((void *)this + 16, *((const void **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 4);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((unsigned char *)this + 192) = *((unsigned char *)a2 + 192);
  CGColorRetain(*((CGColorRef *)this + 2));
  unint64_t v4 = (const void *)*((void *)this + 3);
  if (v4) {
    CFRetain(v4);
  }
}

void sub_2234ECB20(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[14] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  unint64_t v9 = *v3;
  if (*v3)
  {
    v1[8] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v2;
  if (*v2)
  {
    v1[5] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2234ECBFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2234ECCB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2234ECD34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGRect>::__init_with_size[abi:ne180100]<CGRect*,CGRect*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<boost::polygon::segment_data<double>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2234ECDB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TSWPAttachmentPosition>::__init_with_size[abi:ne180100]<TSWPAttachmentPosition*,TSWPAttachmentPosition*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2234ECE2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void TSWPLayoutChore::pLayoutColumnWithOldLines()
{
}

void sub_2234F0760(_Unwind_Exception *a1)
{
  if (STACK[0x1468]) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)STACK[0x1468]);
  }
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t TSWPLineFragmentArray::objectAtIndex(TSWPLineFragmentArray *this, unint64_t a2)
{
  if (a2 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4) {
    return 0;
  }
  else {
    return *(void *)(*(void *)this + 16 * a2);
  }
}

void TSWPLayoutChore::pPopLayoutState(TSWPLayoutChore *this@<X0>, uint64_t a2@<X8>)
{
  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)(a2 + 24));
  bzero((void *)a2, 0x2B0uLL);
  uint64_t v4 = *((void *)this + 250);
  uint64_t v5 = *((void *)this + 251) - v4;
  if (v5)
  {
    unint64_t v6 = 0x82FA0BE82FA0BE83 * (v5 >> 4);
    TSWPLayoutState::operator=((id *)a2, (id *)(v4 + 16 * (v5 >> 4) - 688));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TSWPLayoutState *,TSWPLayoutState *,TSWPLayoutState *,0>((id *)(*((void *)this + 250) + 688 * v6), *((id **)this + 251), (id *)(*((void *)this + 250) + 688 * v6 - 688));
    uint64_t v8 = v7;
    for (uint64_t i = *((void *)this + 251); i != v8; TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)(i - 688)))
      ;
    *((void *)this + 251) = v8;
  }
  else
  {
    uint64_t v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = [NSString stringWithUTF8String:"const TSWPLayoutState TSWPLayoutChore::pPopLayoutState()"];
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 754, @"Too many layoutStates popped");
    TSWPLayoutState::operator=((id *)a2, (id *)this + 10);
  }
}

void sub_2234F0B94(_Unwind_Exception *a1)
{
  TSWPLayoutState::~TSWPLayoutState(v1);
  _Unwind_Resume(a1);
}

id *TSWPLayoutState::operator=(id *a1, id *a2)
{
  if (a2 != a1)
  {
    id v4 = a2[85];

    memcpy(a1, a2, 0x2B0uLL);
    id v5 = a1[85];
  }
  return a1;
}

id *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TSWPLayoutState *,TSWPLayoutState *,TSWPLayoutState *,0>(id *a1, id *a2, id *a3)
{
  id v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TSWPLayoutState::operator=(a3, v4);
      v4 += 86;
      a3 += 86;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t TSWPLayoutChore::pPushLayoutState(TSWPLayoutChore *this, const TSWPLayoutState *a2)
{
  id v4 = (TSWPLayoutState *)*((void *)this + 251);
  if (0x82FA0BE82FA0BE83 * (((uint64_t)v4 - *((void *)this + 250)) >> 4) < 6
    || (id v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler],
        v6 = [NSString stringWithUTF8String:"void TSWPLayoutChore::pPushLayoutState(const TSWPLayoutState &)"], result = objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 743, @"Too many layoutStates pushed"), id v4 = (TSWPLayoutState *)*((void *)this + 251), 0x82FA0BE82FA0BE83 * (((uint64_t)v4 - *((void *)this + 250)) >> 4) <= 5))
  {
    if ((unint64_t)v4 >= *((void *)this + 252))
    {
      uint64_t result = std::vector<TSWPLayoutState>::__push_back_slow_path<TSWPLayoutState const&>((uint64_t *)this + 250, a2);
    }
    else
    {
      TSWPLayoutState::TSWPLayoutState(v4, a2);
      uint64_t result = (uint64_t)v4 + 688;
      *((void *)this + 251) = (char *)v4 + 688;
    }
    *((void *)this + 251) = result;
  }
  return result;
}

void sub_2234F0DAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 200_Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<TSWPLayoutState>::__push_back_slow_path<TSWPLayoutState const&>(uint64_t *a1, const TSWPLayoutState *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x5F417D05F417D0) {
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2FA0BE82FA0BE8) {
    unint64_t v9 = 0x5F417D05F417D0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TSWPLayoutState>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  double v14 = (TSWPLayoutState *)&v10[688 * v4];
  unint64_t v16 = &v10[688 * v9];
  TSWPLayoutState::TSWPLayoutState(v14, a2);
  double v15 = (char *)v14 + 688;
  std::vector<TSWPLayoutState>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<TSWPLayoutState>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2234F0EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TSWPLayoutState>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TSWPLayoutState>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TSWPLayoutState>,std::reverse_iterator<TSWPLayoutState*>,std::reverse_iterator<TSWPLayoutState*>,std::reverse_iterator<TSWPLayoutState*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TSWPLayoutState>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5F417D05F417D1) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(688 * a2);
}

uint64_t std::__split_buffer<TSWPLayoutState>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 688;
    TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)(i - 688));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<TSWPLineFragmentArray *,std::shared_ptr<TSWPLineFragmentArray>::__shared_ptr_default_delete<TSWPLineFragmentArray,TSWPLineFragmentArray>,std::allocator<TSWPLineFragmentArray>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<TSWPLineFragmentArray>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

uint64_t TSWPDropCapLayoutState::impactsFragments(TSWPDropCapLayoutState *this, CGFloat a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    if (*((unsigned char *)this + 240)) {
      goto LABEL_5;
    }
    if (*((void *)this + 28) < (unint64_t)(v2 - *((void *)this + 8))) {
      return 1;
    }
    if ((*((unsigned char *)this + 96) & 8) == 0)
    {
LABEL_5:
      uint64_t v3 = *((void *)this + 31);
      if (v3 && CGRectGetMaxY(*(CGRect *)(v3 + 48)) > a2) {
        return 1;
      }
    }
  }
  return 0;
}

TSWPParagraphTypesetter *std::__shared_ptr_pointer<TSWPParagraphTypesetter *,std::shared_ptr<TSWPParagraphTypesetter>::__shared_ptr_default_delete<TSWPParagraphTypesetter,TSWPParagraphTypesetter>,std::allocator<TSWPParagraphTypesetter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(TSWPParagraphTypesetter **)(a1 + 24);
  if (result)
  {
    TSWPParagraphTypesetter::~TSWPParagraphTypesetter(result);
    JUMPOUT(0x223CB8F20);
  }
  return result;
}

double TSWPLineFragment::calculateOffsetForNextLine(uint64_t a1, int a2, double a3)
{
  return TSWPLineFragmentCalculateOffsetForNextLine((double *)(a1 + 112), *(_DWORD *)(a1 + 24), a2, a3);
}

void *TSWPLineStylingLayoutState::updateWithNewLineAdded(void *this, uint64_t a2)
{
  uint64_t v2 = this[7];
  uint64_t v3 = this[6] + 1;
  this[6] = v3;
  if (v3 == v2)
  {
    uint64_t v4 = this[3];
    if (v4 != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v5 = a2 - v4;
      if (v5 < this[5]) {
        this[5] = v5;
      }
    }
  }
  return this;
}

uint64_t TSWPDropCapLayoutState::updateWithBaselineOffset(uint64_t this, double a2)
{
  if (*(void *)(this + 56) >= 2uLL && (*(unsigned char *)(this + 240) & 1) == 0 && !*(void *)(this + 224))
  {
    double v2 = *(double *)(this + 176);
    if (v2 != a2)
    {
      uint64_t v3 = *(void *)(this + 248);
      if (v3)
      {
        *(double *)(v3 + 40) = *(double *)(v3 + 40) - (a2 - v2);
        *(double *)(this + 176) = a2;
      }
    }
  }
  return this;
}

void TSWPDropCapLayoutState::updateWithNewLineAdded(uint64_t a1, TSWPLineFragmentArray **a2, unint64_t a3, unint64_t a4, CGFloat a5, CGFloat a6)
{
  ++*(void *)(a1 + 224);
  if (!*(void *)(a1 + 248)) {
    return;
  }
  uint64_t v12 = TSWPLineFragmentArray::objectAtIndex(*a2, a3);
  double v13 = *(double *)(v12 + 32);
  double v14 = *(double *)(v12 + 40);
  uint64_t v15 = *(void *)(v12 + 48);
  uint64_t v16 = *(void *)(v12 + 56);
  uint64_t v17 = *(void *)(v12 + 64);
  uint64_t v18 = *(void *)(v12 + 72);
  if ((*(unsigned char *)(v12 + 25) & 0x10) != 0) {
    double MaxX = CGRectGetMaxX(*(CGRect *)&v15);
  }
  else {
    double MaxX = CGRectGetMinX(*(CGRect *)&v15);
  }
  unint64_t v20 = *(void *)(a1 + 224);
  if (v20 == 1)
  {
    *(double *)(a1 + 16_Block_object_dispose(&STACK[0x560], 8) = MaxX;
    *(unsigned char *)(a1 + 240) &= ~8u;
    double v21 = *(double *)(v12 + 168);
    if (a4 >= 2)
    {
      unint64_t v22 = a3 + a4;
      unint64_t v23 = a3 + 1;
      if (v23 < v22)
      {
        unint64_t v24 = a4 - 1;
        do
        {
          double v21 = fmax(v21, *(double *)(TSWPLineFragmentArray::objectAtIndex(*a2, v23++) + 168));
          --v24;
        }
        while (v24);
      }
    }
    *(double *)(a1 + 160) = v21;
  }
  else if (v20 <= *(void *)(a1 + 56) - *(void *)(a1 + 64) {
         && vabdd_f64(MaxX, *(double *)(a1 + 168)) >= 0.00999999978)
  }
  {
    *(unsigned char *)(a1 + 240) |= 8u;
  }
  if ((*(unsigned char *)(a1 + 240) & 1) == 0)
  {
    unint64_t v25 = *(void *)(a1 + 224);
    unint64_t v26 = *(void *)(a1 + 56) - *(void *)(a1 + 64);
    if (v25 == v26 || v25 >= v26 && CGRectGetMaxY(*(CGRect *)(*(void *)(a1 + 248) + 48)) > a5)
    {
      double v27 = a6 - CGRectGetMinY(*(CGRect *)(*(void *)(a1 + 248) + 48));
      if (v27 <= 0.0 || v27 <= CGRectGetHeight(*(CGRect *)(*(void *)(a1 + 248) + 48)))
      {
        if (v25 != v26) {
          goto LABEL_26;
        }
        uint64_t v28 = *(void *)(a1 + 248);
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 248);
        *(double *)(v28 + 104) = *(double *)(v28 + 104) + v27 - *(double *)(v28 + 72);
        *(double *)(v28 + 72) = v27;
        if (v25 != v26) {
          goto LABEL_26;
        }
      }
      *(double *)(a1 + 12_Block_object_dispose(&STACK[0x560], 8) = v13 + v14 - (*(double *)(a1 + 112) - *(double *)(a1 + 192));
      *(double *)(a1 + 144) = ceil(CGRectGetMaxY(*(CGRect *)(v28 + 48)));
    }
  }
LABEL_26:
  if (CGRectGetMaxY(*(CGRect *)(*(void *)(a1 + 248) + 48)) <= a6 && *(void *)(a1 + 232) == 0x7FFFFFFFFFFFFFFFLL) {
    *(void *)(a1 + 232) = 0;
  }
  if (CGRectGetMaxY(*(CGRect *)(*(void *)(a1 + 248) + 48)) <= a5)
  {
    uint64_t v29 = *(void *)(a1 + 232);
    if (v29 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v29 + 1;
    }
    *(void *)(a1 + 232) = v30;
  }
}

TSWPLineFragmentArray *TSWPLineFragmentArray::incrementLogicalLineCount(TSWPLineFragmentArray *this)
{
  return this;
}

void fixSpaceAfterForParagraphBorder(uint64_t a1, TSWPLineFragmentArray **a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  if (TSWPLineFragmentArray::count(*a2))
  {
    if (*(void *)(a1 + 352) || *(unsigned char *)(a1 + 368) != 0)
    {
      uint64_t Object = TSWPLineFragmentArray::lastObject(*a2);
      CGFloat v14 = *(double *)(Object + 80);
      CGFloat v15 = *(double *)(Object + 88);
      CGFloat v16 = *(double *)(Object + 96);
      v27.size.double height = *(CGFloat *)(Object + 104);
      CGFloat rect = v27.size.height;
      v27.origin.CGFloat x = v14;
      v27.origin.double y = v15;
      v27.size.CGFloat width = v16;
      double MaxY = CGRectGetMaxY(v27);
      v28.origin.CGFloat x = a3;
      v28.origin.double y = a4;
      v28.size.CGFloat width = a5;
      v28.size.double height = a6;
      double v18 = CGRectGetMaxY(v28);
      [*(id *)(a1 + 352) width];
      double v20 = v18 + v19 + *(double *)(a1 + 376);
      int v21 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "storage"), "wpKind");
      double v22 = 6.0;
      if (v21 == 5) {
        double v22 = 0.0;
      }
      double v23 = v20 + v22;
      if (MaxY >= v23) {
        double v24 = MaxY;
      }
      else {
        double v24 = v23;
      }
      v29.origin.CGFloat x = v14;
      v29.origin.double y = v15;
      v29.size.CGFloat width = v16;
      v29.size.double height = rect;
      CGFloat MinY = CGRectGetMinY(v29);
      *(CGFloat *)(Object + 80) = v14;
      *(CGFloat *)(Object + 8_Block_object_dispose(&STACK[0x560], 8) = v15;
      *(CGFloat *)(Object + 96) = v16;
      *(double *)(Object + 104) = v24 - MinY;
    }
  }
}

double TSWPLineFragmentCalculateOffsetForNextLine(double *a1, char a2, int a3, double a4)
{
  double v4 = a1[3];
  double v5 = a1[4];
  double v6 = a1[1];
  double v7 = a1[2];
  double v8 = v4 + v5 + fmax(v6, v7);
  switch(a3)
  {
    case 0:
      if ((a2 & 0x10) != 0)
      {
        double v9 = v4 + v6;
      }
      else if (a4 <= 1.0)
      {
        double v9 = v8 * a4;
        if (v9 < v6) {
          double v9 = a1[1];
        }
      }
      else
      {
        double v9 = v8 + (a4 + -1.0) * (v5 + v7 + v4);
      }
      a4 = v9 + a1[5];
      break;
    case 1:
      double v10 = v8 + a1[5];
      if (v10 >= a4) {
        a4 = v10;
      }
      break;
    case 2:
      return a4 + *a1 + a1[6];
    case 3:
      a4 = fmin(v8 + a1[5], a4);
      break;
    case 4:
      a4 = fmax(v8 + a1[5] + a4, 0.0);
      break;
    default:
      a4 = v8;
      break;
  }
  return a4 + *a1 + a1[6];
}

BOOL TSWPLineStylingLayoutState::canFinalize(TSWPLineStylingLayoutState *this)
{
  unint64_t v1 = *((void *)this + 7);
  if (!v1) {
    return 0;
  }
  if (*((unsigned char *)this + 64)) {
    return 1;
  }
  return *((void *)this + 6) >= v1;
}

BOOL TSWPDropCapLayoutState::isConflictingWithEndOfColumn(TSWPDropCapLayoutState *this)
{
  uint64_t v1 = *((void *)this + 7);
  return v1
      && (*((unsigned char *)this + 240) & 2) != 0
      && (unint64_t)(v1 - *((void *)this + 8)) > *((void *)this + 28);
}

BOOL TSWPDropCapLayoutState::isSatifyingRequirements(TSWPDropCapLayoutState *this)
{
  if (!*((void *)this + 7)) {
    return 1;
  }
  if ((*((unsigned char *)this + 240) & 1) == 0) {
    return (*((unsigned char *)this + 240) & 8) == 0;
  }
  unint64_t v1 = *((void *)this + 9);
  if (v1 == 0x7FFFFFFFFFFFFFFFLL) {
    return (*((unsigned char *)this + 240) & 8) == 0;
  }
  unint64_t v2 = *((void *)this + 29);
  if (v2 != 0x7FFFFFFFFFFFFFFFLL && v2 >= v1) {
    return (*((unsigned char *)this + 240) & 8) == 0;
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 240) & 4) != 0)
  {
    if (*((unsigned char *)this + 80)) {
      return (*((unsigned char *)this + 240) & 8) == 0;
    }
  }
  return v4;
}

BOOL TSWPDropCapLayoutState::needsLayoutIteration(TSWPDropCapLayoutState *this)
{
  if ((*((unsigned char *)this + 240) & 1) != 0
    || *((void *)this + 28) != *((void *)this + 7) - *((void *)this + 8)
    || *((_DWORD *)this + 26))
  {
    return 0;
  }
  if (vabdd_f64(*((double *)this + 15), *((double *)this + 16)) >= 0.00999999978
    || vabdd_f64(*((double *)this + 19), *((double *)this + 20)) >= 0.00999999978)
  {
    return 1;
  }
  if ((*((unsigned char *)this + 240) & 0x10) == 0) {
    return 0;
  }
  return vabdd_f64(*((double *)this + 17), *((double *)this + 18)) >= 0.00999999978;
}

CGFloat TSWPDropCapLayoutState::dropCapBottom(TSWPDropCapLayoutState *this)
{
  int v1 = *((_DWORD *)this + 26);
  if (v1 == 1) {
    return *((double *)this + 18);
  }
  CGFloat result = 0.0;
  if (!v1)
  {
    uint64_t v3 = *((void *)this + 31);
    if (v3) {
      return CGRectGetMaxY(*(CGRect *)(v3 + 48));
    }
  }
  return result;
}

void TSWPLineStylingCTState::clear(id *this)
{
  *this = 0;
  *((unsigned char *)this + 8) &= ~1u;
  this[3] = 0;
  this[4] = 0;
  this[2] = (id)0x7FFFFFFFFFFFFFFFLL;
}

double TSWPDropCapCTState::clear(TSWPDropCapCTState *this)
{
  *(void *)this = 0;
  *((unsigned char *)this + 8) &= ~1u;
  double result = NAN;
  *(_OWORD *)((char *)this + 24) = xmmword_223837AD0;
  *((void *)this + 2) = 0x3FF0000000000000;
  return result;
}

double TSWPLayoutChore::pCalculateSpaceBefore(TSWPLayoutChore *this, int a2)
{
  double v4 = *((double *)this + 48);
  double v5 = 0.0;
  double v6 = 0;
  if (v4 != 0.0 && a2 && *((unsigned char *)this + 592))
  {
    if (TSWPParagraphEnumerator::isFirstParagraph((TSWPParagraphEnumerator *)((char *)this + 104)))
    {
      double v6 = 0;
      double v5 = v4;
    }
    else
    {
      TSWPParagraphEnumerator::previous((TSWPParagraphEnumerator *)((char *)this + 104), (uint64_t)&v16);
      double v6 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v16, 0);
      TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v16);
      [v6 floatValueForProperty:88];
      double v8 = (float)((float)(v7 * (float)(unint64_t)[*((id *)this + 23) scaleTextPercent]) / 100.0);
      if (v4 <= v8) {
        double v5 = 0.0;
      }
      else {
        double v5 = v4 - v8;
      }
    }
  }
  if (*((double *)this + 57) != 0.0 && (!a2 || *((unsigned char *)this + 592)))
  {
    int v9 = *((_DWORD *)this + 107);
    if ((v9 | 2) != 2)
    {
      if (a2)
      {
        if (TSWPParagraphEnumerator::isFirstParagraph((TSWPParagraphEnumerator *)((char *)this + 104))) {
          goto LABEL_19;
        }
        if (!v6)
        {
          TSWPParagraphEnumerator::previous((TSWPParagraphEnumerator *)((char *)this + 104), (uint64_t)&v16);
          double v6 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v16, 0);
          TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v16);
        }
        if ([v6 intValueForProperty:102] != 4) {
LABEL_19:
        }
          uint64_t v10 = 0;
        else {
          uint64_t v10 = [v6 valueForProperty:103];
        }
        int v9 = *((_DWORD *)this + 107);
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((v9 | 2) == 3 || ([*((id *)this + 54) isEqual:v10] & 1) == 0)
      {
        double v11 = *((double *)this + 57);
        int v12 = [*((id *)this + 1) wpKind];
        double v13 = 6.0;
        if (v12 == 5) {
          double v13 = 0.0;
        }
        double v14 = *((double *)this + 55) + v11 + v13;
        if (v14 <= 0.0) {
          double v14 = -0.0;
        }
        return v5 + v14;
      }
    }
  }
  return v5;
}

void sub_2234F19B4(_Unwind_Exception *a1, TSWPParagraphEnumerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

id *TSWPLineBalancingLayoutState::prepareForRestore(id *this, id *a2, char a3, double a4, int a5, int a6, double a7)
{
  uint64_t v13 = (uint64_t)this;
  if (*((_DWORD *)this + 182))
  {
    double v14 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPLineBalancingLayoutState::prepareForRestore(const TSWPLayoutState &, const BOOL, const CGFloat, const uint, const uint, const CGFloat)");
    this = (id *)objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineBalancingLayoutState.mm"), 64, @"Prepare for rendering line balancing in wrong state: %d", *(unsigned int *)(v13 + 728));
  }
  *(double *)(v13 + 704) = a4;
  *(double *)(v13 + 76_Block_object_dispose(&STACK[0x560], 8) = a4;
  *(unsigned char *)(v13 + 792) = 0;
  if ((a3 & 1) != 0 || (this = (id *)[a2[12] intValueForProperty:51], (int)this < 1))
  {
    *(_DWORD *)(v13 + 72_Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  else
  {
    *(_DWORD *)(v13 + 732) = a5;
    *(_DWORD *)(v13 + 72_Block_object_dispose(&STACK[0x560], 8) = 1;
    this = TSWPLayoutState::operator=((id *)v13, a2);
    *(_DWORD *)(v13 + 68_Block_object_dispose(&STACK[0x560], 8) = a5;
    *(_DWORD *)(v13 + 692) = a6;
    *(double *)(v13 + 696) = a7;
  }
  return this;
}

uint64_t TSWPLayoutChore::pSetupTypesetterIfNeeded(TSWPLayoutChore *this, CGSize a2, CGSize a3)
{
  double height = a3.height;
  double width = a3.width;
  double v5 = a2.height;
  double v6 = a2.width;
  if (!TSWPCoreTextTypesetter::isParagraphSetUp(*((TSWPCoreTextTypesetter **)this + 253))
    || ((uint64_t v8 = *((void *)this + 20),
         uint64_t v9 = *((void *)this + 21),
         v8 == TSWPCoreTextTypesetter::paragraphRange(*((TSWPCoreTextTypesetter **)this + 253)))
      ? (BOOL v11 = v9 == v10)
      : (BOOL v11 = 0),
        !v11
     || !TSWPDropCapCTState::isAffectingCTAttributesEquallyTo((TSWPLayoutChore *)((char *)this + 872), (const TSWPDropCapCTState *)(*((void *)this + 253) + 288))|| (uint64_t result = TSWPLineStylingCTState::isAffectingCTAttributesEquallyTo((TSWPLayoutChore *)((char *)this + 1936), (const TSWPLineStylingCTState *)(*((void *)this + 253) + 328)), (result & 1) == 0)))
  {
    v16[0] = (uint64_t)this + 872;
    v16[1] = (uint64_t)this + 1936;
    uint64_t v13 = (TSWPCoreTextTypesetter *)*((void *)this + 253);
    unint64_t v14 = TSWPParagraphEnumerator::relevantParagraphIndex((TSWPParagraphEnumerator *)((char *)this + 104));
    unint64_t v15 = TSWPCoreTextTypesetter::beginParagraphLayout(v13, (uint64_t)this + 80, (uint64_t)this + 768, v16, v14, v6 - width, v5 - height);
    *((_DWORD *)this + 117) = v15;
    *((unsigned char *)this + 413) = BYTE4(v15) & 1;
    *((unsigned char *)this + 56_Block_object_dispose(&STACK[0x560], 8) = BYTE5(v15) & 1;
    *((unsigned char *)this + 569) = BYTE6(v15) & 1;
    uint64_t result = (uint64_t)*((id *)this + 1);
    *((void *)this + 35) = result;
  }
  return result;
}

uint64_t TSWPLayoutChore::pSetupAnchoredGraphics(TSWPLayoutChore *this, NSMutableArray *a2, _NSRange a3, double a4, TSWPLayoutState *a5, CGSize a6, char a7, double *a8, double *a9, double *a10)
{
  v68[0] = 0;
  if (*((_DWORD *)this + 14))
  {
    uint64_t result = 0;
    *((void *)this + 11) = *((void *)this + 10);
    return result;
  }
  CGFloat height = a6.height;
  CGFloat width = a6.width;
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  float v57 = (char *)this + 80;
  unint64_t v22 = [*((id *)this + 1) attachmentIndexForInsertionAtCharIndex:*((void *)this + 11)];
  uint64_t v67 = *((void *)this + 11);
  [*((id *)this + 23) wpBounds];
  CGFloat x = v69.origin.x;
  CGFloat y = v69.origin.y;
  CGFloat v25 = v69.size.width;
  CGFloat v26 = v69.size.height;
  double v63 = CGRectGetMinX(v69) + *((double *)a5 + 31);
  v70.origin.CGFloat x = x;
  v70.origin.CGFloat y = y;
  v70.size.CGFloat width = v25;
  v70.size.CGFloat height = v26;
  double v64 = CGRectGetMaxX(v70) - *((double *)a5 + 27);
  double v65 = (v64 - v63) * 0.5;
  id v66 = 0;
  if (v22 >= *((void *)this + 9))
  {
    double v53 = a4;
    double v28 = a4;
    uint64_t v54 = a10;
    goto LABEL_36;
  }
  float v56 = a9;
  int v58 = 0;
  unint64_t v27 = location + length;
  double v28 = a4;
  double v59 = a4;
  do
  {
    unint64_t v62 = 0;
    CGRect v29 = (void *)[*((id *)this + 1) attachmentAtAttachmentIndex:v22 outCharIndex:&v62];
    objc_opt_class();
    uint64_t v30 = TSUDynamicCast();
    unint64_t v31 = (TSWPDrawableAttachment *)v30;
    if (v30)
    {
      LODWORD(v30) = [(id)v30 isAnchored];
      if (v30)
      {
        uint64_t v32 = objc_msgSend(*((id *)this + 257), "validatedLayoutForAnchoredDrawable:", -[TSWPDrawableAttachment drawable](v31, "drawable"));
        unint64_t v33 = (void *)[v32 iterativePositioningState];
        if (v33 && [v33 passCount]) {
          goto LABEL_12;
        }
        LOBYTE(v30) = [v32 hasFinishedIterativePositioning];
      }
    }
    if (v62 >= v27 && (v30 & 1) == 0) {
      break;
    }
LABEL_12:
    if ([v29 isDrawable])
    {
      if ([v29 isAnchored])
      {
        if (v62 >= *((void *)this + 11))
        {
          uint64_t v34 = [(TSWPDrawableAttachment *)v31 drawable];
          if (([(NSMutableArray *)a2 containsObject:v34] & 1) == 0
            && ((objc_opt_respondsToSelector() & 1) == 0
             || ([*((id *)this + 257) siblingTargetIsManipulatingDrawable:v34] & 1) == 0))
          {
            long long v61 = *MEMORY[0x263F00148];
            long long v60 = *MEMORY[0x263F001B0];
            v58 |= TSWPLayoutChore::pPositionAnchoredAttachment((uint64_t)this, x, y, v25, v26, a4, width, height, v35, v36, v31, v62, a5, a7, &v67, a2, v68, (double *)&v61, (uint64_t)&v60,
                     (uint64_t)&v63) ^ 1;
            BOOL v37 = [(TSWPDrawableAttachment *)v31 isHTMLWrap];
            double v38 = v59;
            double v39 = fmax(v59, *((double *)&v61 + 1) + *((double *)&v60 + 1));
            double v40 = fmax(v28, *((double *)&v61 + 1) + *((double *)&v60 + 1));
            if (v37) {
              double v38 = v39;
            }
            double v59 = v38;
            if (!v37) {
              double v28 = v40;
            }
          }
        }
      }
    }
    ++v22;
  }
  while (v22 < *((void *)this + 9));
  if (v66)
  {
    uint64_t v41 = [v66 count];
    if (v41)
    {
      unint64_t v42 = v41;
      uint64_t v43 = 0;
      double v44 = 0.0;
      unsigned int v45 = 1;
      do
      {
        double v44 = v44
            + adjustedLayoutSize((TSDLayout *)objc_msgSend(*((id *)this + 257), "validatedLayoutForAnchoredDrawable:", objc_msgSend((id)objc_msgSend(v66, "objectAtIndexedSubscript:", v43), "drawable")));
        uint64_t v43 = v45;
        BOOL v46 = v42 > v45++;
      }
      while (v46);
      uint64_t v47 = 0;
      double v48 = v63 + fmax(v65 + v44 * -0.5, 0.0);
      unsigned int v49 = 1;
      do
      {
        unsigned int v50 = (TSDLayout *)objc_msgSend(*((id *)this + 257), "validatedLayoutForAnchoredDrawable:", objc_msgSend((id)objc_msgSend(v66, "objectAtIndexedSubscript:", v47), "drawable"));
        char v51 = objc_opt_respondsToSelector();
        double v52 = v48;
        if (v51) {
          objc_msgSend(*((id *)this + 257), "layoutPositionFromAnchoredAttachmentPosition:", v48, a4);
        }
        [(TSDLayout *)v50 setAdjustedInterimPositionX:v52];
        [(TSDAbstractLayout *)v50 fixTransformFromInterimPosition];
        double v48 = v48 + adjustedLayoutSize(v50);
        uint64_t v47 = v49;
        BOOL v46 = v42 > v49++;
      }
      while (v46);
    }
    [v66 removeAllObjects];

    a9 = v56;
  }
  else
  {
    a9 = v56;
  }
  uint64_t v54 = a10;
  double v53 = v59;
  if (v58)
  {
    float v55 = &v67;
    goto LABEL_37;
  }
LABEL_36:
  float v55 = (uint64_t *)v57;
LABEL_37:
  *((void *)this + 11) = *v55;
  *a8 = v28;
  *a9 = v53;
  *uint64_t v54 = 0.0;
  return v68[0];
}

TSWPLineFragment *std::__shared_ptr_pointer<TSWPLineFragment *,std::shared_ptr<TSWPLineFragment>::__shared_ptr_default_delete<TSWPLineFragment,TSWPLineFragment>,std::allocator<TSWPLineFragment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(TSWPLineFragment **)(a1 + 24);
  if (result)
  {
    TSWPLineFragment::~TSWPLineFragment(result);
    JUMPOUT(0x223CB8F20);
  }
  return result;
}

double TSWPLineFragment::adjustGlyphsForAlignment(uint64_t a1, int a2, double a3)
{
  if ((a2 - 1) <= 1)
  {
    double v6 = *(CTLineRef **)(a1 + 192);
    if (*(CTLineRef **)(a1 + 200) == v6 || CTLineGetGlyphCount(*v6) != 1 || (double v7 = a3, (*(unsigned char *)(a1 + 25) & 8) == 0))
    {
      uint64_t v8 = *(CTLineRef **)(a1 + 192);
      if (*(CTLineRef **)(a1 + 200) == v8) {
        double v7 = 0.0;
      }
      else {
        double v7 = CTLineGetTrailingWhitespaceWidth(*v8) + a3 - *(double *)(a1 + 216);
      }
    }
    if (a2 == 2) {
      double v7 = v7 * 0.5;
    }
    uint64_t v9 = *(void *)(a1 + 192);
    uint64_t v10 = *(void *)(a1 + 200) - v9;
    if (v10)
    {
      unint64_t v11 = v10 / 48;
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      int v12 = (double *)(v9 + 8);
      do
      {
        *int v12 = v7 + *v12;
        v12 += 6;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = *(void *)(a1 + 224);
    uint64_t v14 = *(void *)(a1 + 232) - v13;
    if (v14)
    {
      unint64_t v15 = v14 / 48;
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      TSWPParagraphEnumerator v16 = (double *)(v13 + 8);
      do
      {
        *TSWPParagraphEnumerator v16 = v7 + *v16;
        v16 += 6;
        --v15;
      }
      while (v15);
    }
    uint64_t v17 = *(double **)(a1 + 272);
    uint64_t v18 = *(void *)(a1 + 280) - (void)v17;
    if (v18)
    {
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (v18 >> 4);
      unsigned int v20 = 1;
      do
      {
        double *v17 = v7 + *v17;
        v17 += 10;
        BOOL v21 = v19 > v20++;
      }
      while (v21);
    }
    unint64_t v22 = *(double **)(a1 + 296);
    uint64_t v23 = *(void *)(a1 + 304) - (void)v22;
    if (v23)
    {
      unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 4);
      unsigned int v25 = 1;
      do
      {
        *unint64_t v22 = v7 + *v22;
        v22 += 10;
        BOOL v21 = v24 > v25++;
      }
      while (v21);
    }
    CGFloat v26 = *(double **)(a1 + 320);
    uint64_t v27 = *(void *)(a1 + 328) - (void)v26;
    if (v27)
    {
      unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (v27 >> 4);
      unsigned int v29 = 1;
      do
      {
        double *v26 = v7 + *v26;
        v26 += 10;
        BOOL v21 = v28 > v29++;
      }
      while (v21);
    }
    uint64_t v30 = *(double **)(a1 + 344);
    uint64_t v31 = *(void *)(a1 + 352) - (void)v30;
    if (v31)
    {
      unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (v31 >> 4);
      unsigned int v33 = 1;
      do
      {
        *uint64_t v30 = v7 + *v30;
        v30 += 10;
        BOOL v21 = v32 > v33++;
      }
      while (v21);
    }
    *(double *)(a1 + 216) = v7 + *(double *)(a1 + 216);
  }
  double v34 = *(double *)(a1 + 64);
  if (v34 == 4294967300.0) {
    double v34 = 0.0;
  }
  double result = *(double *)(a1 + 96) - (v34 - a3);
  *(double *)(a1 + 96) = result;
  *(double *)(a1 + 64) = a3;
  return result;
}

uint64_t TSWPLayoutChore::pGetParagraphStyleAtCharIndex(TSWPLayoutChore *this, NSUInteger a2)
{
  double v4 = (TSWPParagraphEnumerator *)((char *)this + 104);
  NSUInteger v5 = TSWPParagraphEnumerator::paragraphTextRange((TSWPParagraphEnumerator *)((char *)this + 104));
  if (a2 < v5 || a2 - v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1);
    uint64_t v9 = [*((id *)this + 3) styleProvider];
    if (v8) {
      [v8 paragraphEnumeratorAtCharIndex:a2 styleProvider:v9];
    }
    else {
      memset(&v12, 0, sizeof(v12));
    }
    uint64_t v11 = TSWPParagraphEnumerator::paragraphStyle(&v12, 0);
    TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v12);
    return v11;
  }
  else
  {
    return TSWPParagraphEnumerator::paragraphStyle(v4, 0);
  }
}

void sub_2234F23A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double TSWPLineBalancingLayoutState::pUpdateWithEndOfParagraphOrColumn(TSWPLineBalancingLayoutState *this, uint64_t a2, int a3, double result)
{
  int v5 = *((_DWORD *)this + 182);
  switch(v5)
  {
    case 3:
      if (!*((unsigned char *)this + 792) && *((void *)this + 90) != a2)
      {
        unint64_t v19 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v20 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPLineBalancingLayoutState::pUpdateWithEndOfParagraphOrColumn(const TSWPCharIndex, BOOL)");
        objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineBalancingLayoutState.mm"), 224, @"Unexpected char index in final phase when layouting line balancing.");
      }
      *((_DWORD *)this + 182) = 0;
      double result = *((double *)this + 88);
      goto LABEL_17;
    case 2:
      BOOL v21 = (double *)*((void *)this + 93);
      unint64_t v22 = (double *)*((void *)this + 92);
      if (*((void *)this + 89) != v21 - v22 || *((void *)this + 90) != a2)
      {
        double result = *((double *)this + 97);
        *((double *)this + 96) = result;
        int v33 = 3;
LABEL_37:
        *((_DWORD *)this + 182) = v33;
        return result;
      }
      if (v22 == v21)
      {
        double v29 = *((double *)this + 96);
        double v30 = 0.0;
        if (v29 >= 0.0) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v23 = v22 + 1;
        unint64_t v24 = (double *)*((void *)this + 92);
        if (v22 + 1 != v21)
        {
          double v25 = *v22;
          unint64_t v24 = (double *)*((void *)this + 92);
          CGFloat v26 = v22 + 1;
          do
          {
            double v27 = *v26++;
            double v28 = v27;
            if (v25 < v27)
            {
              double v25 = v28;
              unint64_t v24 = v23;
            }
            uint64_t v23 = v26;
          }
          while (v26 != v21);
        }
        double v29 = *((double *)this + 96);
        if (*v24 <= v29)
        {
          double v30 = 0.0;
          uint64_t v31 = (double *)*((void *)this + 92);
          do
          {
            double v32 = *v31++;
            double v30 = v30 + v32 * v32;
          }
          while (v31 != v21);
LABEL_42:
          if (v30 < *((double *)this + 98))
          {
            *((double *)this + 97) = v29;
            *((double *)this + 9_Block_object_dispose(&STACK[0x560], 8) = v30;
          }
          goto LABEL_44;
        }
      }
      *((double *)this + 95) = *((double *)this + 95) + 1.0;
LABEL_44:
      double result = 0.0;
      double v35 = 0.0;
      if (v22 != v21)
      {
        uint64_t v36 = v22 + 1;
        if (v22 + 1 != v21)
        {
          double v37 = *v22;
          double v38 = v22 + 1;
          do
          {
            double v39 = *v38++;
            double v40 = v39;
            if (v37 < v39)
            {
              double v37 = v40;
              unint64_t v22 = v36;
            }
            uint64_t v36 = v38;
          }
          while (v38 != v21);
        }
        double v35 = *v22;
      }
      double v41 = v35 - *((double *)this + 95);
      if (v41 >= 0.0) {
        double result = v41;
      }
LABEL_17:
      *((double *)this + 96) = result;
      return result;
    case 1:
      *((void *)this + 95) = 0x3FF0000000000000;
      NSUInteger v6 = (double *)*((void *)this + 92);
      double v7 = (double *)*((void *)this + 93);
      if (v6 == v7)
      {
        *((void *)this + 97) = 0;
        double v15 = 0.0;
        double v18 = -1.0;
      }
      else
      {
        uint64_t v8 = v6 + 1;
        uint64_t v9 = (double *)*((void *)this + 92);
        if (v6 + 1 != v7)
        {
          double v10 = *v6;
          uint64_t v9 = (double *)*((void *)this + 92);
          uint64_t v11 = v6 + 1;
          do
          {
            double v12 = *v11++;
            double v13 = v12;
            if (v10 < v12)
            {
              double v10 = v13;
              uint64_t v9 = v8;
            }
            uint64_t v8 = v11;
          }
          while (v11 != v7);
        }
        double v14 = *v9;
        *((double *)this + 97) = *v9;
        double v15 = 0.0;
        TSWPParagraphEnumerator v16 = v6;
        do
        {
          double v17 = *v16++;
          double v15 = v15 + v17 * v17;
        }
        while (v16 != v7);
        double v18 = v14 + -1.0;
      }
      *((double *)this + 9_Block_object_dispose(&STACK[0x560], 8) = v15;
      uint64_t v34 = (char *)v7 - (char *)v6;
      *((void *)this + 89) = v34 >> 3;
      *((void *)this + 90) = a2;
      if (v34 != 8 && !a3)
      {
        double result = 0.0;
        if (v18 >= 0.0) {
          double result = v18;
        }
        *((double *)this + 96) = result;
        int v33 = 2;
        goto LABEL_37;
      }
      double result = *((double *)this + 88);
      *((double *)this + 96) = result;
      *((_DWORD *)this + 182) = 0;
      break;
  }
  return result;
}

void sub_2234F2EAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F2F6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F30EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2234F36BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2234F3B58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F3C88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F3E18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F3E78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F3F5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F4048(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const __CTFont *TSWPCreateFontForStylesWithScale(uint64_t a1, unint64_t a2, unint64_t a3)
{
  v59[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = TSWPResolvePropertyForStyles(a1, a2, 16, 0);
  if (!v6)
  {
    double v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "CTFontRef TSWPCreateFontForStylesWithScale(TSSStyle **, NSUInteger, NSUInteger)");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"), 1687, @"Failed to resolve font name");
  }
  double v9 = (double)a3;
  uint64_t v56 = v6;
  if (a2)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      double v12 = *(void **)(a1 + 8 * v10);
      if (v12) {
        unsigned int v13 = [v12 intValueForProperty:19];
      }
      else {
        unsigned int v13 = 0x80000000;
      }
      uint64_t v10 = v11;
      if (v11 >= a2) {
        break;
      }
      ++v11;
    }
    while (v13 == 0x80000000);
    uint64_t v14 = 0;
    unsigned int v15 = 1;
    do
    {
      TSWPParagraphEnumerator v16 = *(void **)(a1 + 8 * v14);
      if (v16) {
        unsigned int v17 = [v16 intValueForProperty:20];
      }
      else {
        unsigned int v17 = 0x80000000;
      }
      uint64_t v14 = v15;
      if (v15 >= a2) {
        break;
      }
      ++v15;
    }
    while (v17 == 0x80000000);
    uint64_t v18 = 0;
    if (v13 == 0x80000000) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = v13;
    }
    unsigned int v20 = 1;
    do
    {
      BOOL v21 = *(void **)(a1 + 8 * v18);
      if (v21)
      {
        [v21 floatValueForProperty:17];
        double v23 = v22;
      }
      else
      {
        double v23 = INFINITY;
      }
      uint64_t v18 = v20;
      if (v20 >= a2) {
        break;
      }
      ++v20;
    }
    while (v23 == INFINITY);
    uint64_t v24 = 0;
    if (v23 == INFINITY) {
      double v23 = 12.0;
    }
    double v25 = v23 * v9;
    unsigned int v26 = 1;
    do
    {
      double v27 = *(void **)(a1 + 8 * v24);
      if (v27)
      {
        [v27 floatValueForProperty:50];
        double v29 = v28;
      }
      else
      {
        double v29 = INFINITY;
      }
      uint64_t v24 = v26;
      if (v26 >= a2) {
        break;
      }
      ++v26;
    }
    while (v29 == INFINITY);
    uint64_t v30 = 0;
    if (v17 == 0x80000000) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = v17;
    }
    unsigned int v32 = 1;
    do
    {
      int v33 = *(void **)(a1 + 8 * v30);
      if (v33) {
        unsigned int v34 = [v33 intValueForProperty:36];
      }
      else {
        unsigned int v34 = 0x80000000;
      }
      uint64_t v30 = v32;
      if (v32 >= a2) {
        break;
      }
      ++v32;
    }
    while (v34 == 0x80000000);
    if (v29 == INFINITY) {
      double v29 = -1000.0;
    }
    double v35 = v25 / 100.0;
    if ((v34 | 0x80000000) != 0x80000000)
    {
      unsigned int v36 = v19;
      double v35 = v35 * 0.666666687;
      goto LABEL_48;
    }
  }
  else
  {
    unsigned int v19 = 0;
    unsigned int v31 = 0;
    double v29 = -1000.0;
    double v35 = v9 * 12.0 / 100.0;
  }
  unsigned int v36 = v19;
LABEL_48:
  double v37 = (void *)TSWPResolvePropertyForStyles(a1, a2, 43, 0);
  id v38 = (id)TSWPResolvePropertyForStyles(a1, a2, 53, 0);
  BOOL v39 = 1;
  uint64_t v40 = TSWPResolvePropertyForStyles(a1, a2, 54, 1);
  uint64_t v41 = TSWPResolvePropertyForStyles(a1, a2, 55, 1);
  if (a2)
  {
    uint64_t v42 = 0;
    unsigned int v43 = 1;
    do
    {
      double v44 = *(void **)(a1 + 8 * v42);
      if (v44) {
        unsigned int v45 = [v44 intValueForProperty:56];
      }
      else {
        unsigned int v45 = 0x80000000;
      }
      uint64_t v42 = v43;
      if (v43 >= a2) {
        break;
      }
      ++v43;
    }
    while (v45 == 0x80000000);
    BOOL v39 = v45 == 0x80000000 || v45 == 0;
  }
  uint64_t v47 = *MEMORY[0x263F03B60];
  uint64_t v48 = objc_msgSend((id)objc_msgSend(v38, "objectForKeyedSubscript:", *MEMORY[0x263F03B60], v56), "mutableCopy");
  unsigned int v49 = (void *)v48;
  if (v40)
  {
    if (!v48) {
      unsigned int v49 = objc_opt_new();
    }
    [v49 setObject:v40 forKeyedSubscript:*MEMORY[0x263F03BA8]];
LABEL_65:
    unsigned int v50 = 0;
    if (!v49) {
      goto LABEL_66;
    }
    goto LABEL_84;
  }
  if (!v41) {
    goto LABEL_65;
  }
  unsigned int v50 = (void *)[v38 mutableCopy];
  if (!v50) {
    unsigned int v50 = objc_opt_new();
  }
  [v50 setObject:v41 forKeyedSubscript:*MEMORY[0x263F03A80]];
  if (!v49)
  {
LABEL_66:
    if (v39) {
      goto LABEL_71;
    }
    goto LABEL_67;
  }
LABEL_84:
  if (!v50)
  {
    unsigned int v50 = (void *)[v38 mutableCopy];
    if (!v50) {
      unsigned int v50 = objc_opt_new();
    }
  }
  [v50 setObject:v49 forKeyedSubscript:v47];

  if (!v39)
  {
LABEL_67:
    if (v37) {
      char v51 = v37;
    }
    else {
      char v51 = (void *)MEMORY[0x263EFFA68];
    }
    uint64_t v52 = *MEMORY[0x263F03A90];
    v58[0] = *MEMORY[0x263F03AA0];
    v58[1] = v52;
    v59[0] = &unk_26D73A188;
    v59[1] = &unk_26D73A1A0;
    double v37 = objc_msgSend(v51, "arrayByAddingObject:", objc_msgSend(NSDictionary, "dictionaryWithObjects:forKeys:count:", v59, v58, 2));
  }
LABEL_71:
  if (v50) {
    id v38 = v50;
  }
  if (v29 == -1000.0) {
    double v53 = *MEMORY[0x263F1D338];
  }
  else {
    double v53 = v29;
  }
  if (v57) {
    uint64_t v54 = v57;
  }
  else {
    uint64_t v54 = @"Helvetica";
  }
  return TSWPCreateFontWithNameAttributesTraitsAndWeight((uint64_t)v54, v36 != 0, v31 != 0, (uint64_t)v38, v37, v29 != -1000.0, v35, v53);
}

const __CTFont *TSWPCreateFontWithNameAttributesTraitsAndWeight(uint64_t a1, int a2, int a3, uint64_t a4, void *a5, char a6, double a7, double a8)
{
  if (!TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache
    || ([(id)TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache containsObject:a1] & 1) == 0)
  {
    UIFontForLanguage = (const __CTFont *)TSWPCreateFontWithNameAttributesAndWeight(a1, a4, a7, a8);
    if (UIFontForLanguage) {
      goto LABEL_8;
    }
    id v17 = (id)TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache;
    if (!TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache)
    {
      id v17 = objc_alloc_init(MEMORY[0x263EFF9C0]);
      TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache = (uint64_t)v17;
    }
    [v17 addObject:a1];
  }
  UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, a7, 0);
LABEL_8:
  CTFontSymbolicTraits SymbolicTraits = CTFontGetSymbolicTraits(UIFontForLanguage);
  CTFontSymbolicTraits v19 = SymbolicTraits;
  if ((a6 & 1) == 0 && ((((SymbolicTraits & 2) == 0) ^ a2) & 1) == 0)
  {
    int v20 = a2 ? 2 : 0;
    CopyWithCTFontSymbolicTraits SymbolicTraits = CTFontCreateCopyWithSymbolicTraits(UIFontForLanguage, a7, 0, SymbolicTraits & 0xFFFFFFFD | v20, 2u);
    if (CopyWithSymbolicTraits)
    {
      float v22 = CopyWithSymbolicTraits;
      if (UIFontForLanguage == CopyWithSymbolicTraits)
      {
        CFRelease(UIFontForLanguage);
      }
      else
      {
        CFRelease(UIFontForLanguage);
        UIFontForLanguage = v22;
      }
    }
  }
  if (((((v19 & 1) == 0) ^ a3) & 1) == 0)
  {
    CTFontRef v23 = CTFontCreateCopyWithSymbolicTraits(UIFontForLanguage, a7, 0, v19 & 0xFFFFFFFE | a3, 1u);
    if (v23)
    {
      uint64_t v24 = v23;
      if (UIFontForLanguage == v23)
      {
        CFRelease(UIFontForLanguage);
      }
      else
      {
        CFRelease(UIFontForLanguage);
        UIFontForLanguage = v24;
      }
    }
  }
  if ([a5 count])
  {
    CTFontDescriptorRef v25 = CTFontCopyFontDescriptor(UIFontForLanguage);
    if (v25)
    {
      unsigned int v26 = v25;
      id v27 = objc_alloc(NSDictionary);
      CFDictionaryRef v28 = (const __CFDictionary *)objc_msgSend(v27, "initWithObjectsAndKeys:", a5, *MEMORY[0x263F03A98], 0);
      CopyWithCFDictionaryRef Attributes = CTFontDescriptorCreateCopyWithAttributes(v26, v28);
      if (CopyWithAttributes)
      {
        uint64_t v30 = CopyWithAttributes;
        CTFontRef v31 = CTFontCreateWithFontDescriptor(CopyWithAttributes, a7, 0);
        if (v31)
        {
          unsigned int v32 = v31;
          CFRelease(UIFontForLanguage);
          UIFontForLanguage = v32;
        }
        CFRelease(v30);
      }
      CFRelease(v26);
    }
  }
  return UIFontForLanguage;
}

uint64_t TSWPCreateFontWithNameAttributesAndWeight(uint64_t result, uint64_t a2, double a3, double a4)
{
  if (result)
  {
    uint64_t v7 = result;
    [+[TSWPLoadableFonts sharedInstance] loadFontWithName:result];
    id v8 = +[TSWPFontCache sharedCache];
    return [v8 createFontWithName:v7 size:a2 weight:a3 attributes:a4];
  }
  return result;
}

void sub_2234F52E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F53D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2234F54B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *String(void *result, uint64_t a2)
{
  if (result && *result)
  {
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    do
    {
      *(_DWORD *)(a2 + 4 * v2) = *(unsigned __int16 *)(result[1] + 16 * v2 + 8);
      uint64_t v2 = v3;
    }
    while (*result > (unint64_t)v3++);
  }
  return result;
}

uint64_t TSWPBundle()
{
  if (TSWPBundle::onceToken != -1) {
    dispatch_once(&TSWPBundle::onceToken, &__block_literal_global_72);
  }
  return TSWPBundle::bundle;
}

void *String()
{
  double result = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
  if (result)
  {
    *double result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_2234F6528(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t TSWPAttributeArray::findObject(TSWPAttributeArray *this, objc_object *a2, unint64_t a3)
{
  unint64_t var2 = this->var2;
  if (var2 <= a3)
  {
    if (!var2) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else if (*((objc_object **)this->var4 + 2 * a3 + 1) == a2)
  {
    return a3;
  }
  a3 = 0;
  for (uint64_t i = (objc_object **)((char *)this->var4 + 8); *i != a2; i += 2)
  {
    if (var2 == ++a3) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return a3;
}

uint64_t TSWPAttributeArray::didReplaceCharactersInRangeWithString(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v12 = result;
    double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 80))(result, 5, a2, a3, a4, a5);
    if (a5)
    {
      uint64_t v13 = result;
      if (result != 0x7FFFFFFFFFFFFFFFLL)
      {
        double result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 168))(v12);
        if (result)
        {
          uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 160);
          return v14(v12, a2, a3, a5, v13, a6, a7);
        }
      }
    }
  }
  return result;
}

uint64_t TSWPAttachmentAttributeArray::shouldInsertAttributesForMarkers(TSWPAttachmentAttributeArray *this)
{
  return 1;
}

unint64_t TSWPAttributeArray::adjustCharIndexForCharRangeWithString(TSWPAttributeArray *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(a1, a3);
  if (a6 != a4 && result != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t var2 = a1->var2;
    BOOL v11 = var2 > result;
    unint64_t v12 = var2 - result;
    if (v11)
    {
      uint64_t v13 = (void *)((char *)a1->var4 + 16 * result);
      do
      {
        *v13 += a6 - a4;
        v13 += 2;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

void std::vector<TSWPAdornmentRect>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<TSWPAdornmentRect>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double TSWPRunDelegateGetDescentCallback(TSWPTypesetterAttachmentMap *a1)
{
  uint64_t v2 = [(TSWPTypesetterAttachmentMap *)a1 attachment];
  double v3 = 0.0;
  if (!v2) {
    return v3;
  }
  uint64_t v4 = v2;
  if ([(TSWPAttachment *)v2 isPartitioned]) {
    return v3;
  }
  if (![(TSWPAttachment *)v4 isDrawable])
  {
    objc_opt_class();
    uint64_t v6 = (void *)TSUDynamicCast();
    if (v6)
    {
      [v6 baselineOffset];
      double v3 = -v7;
    }
    objc_opt_class();
    if (TSUDynamicCast())
    {
      TSWPMeasureTextualAttachment(a1);
      return v8;
    }
    return v3;
  }

  [(TSWPAttachment *)v4 descent];
  return result;
}

uint64_t TSWPLayoutChore::pLayoutColumns(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, unsigned char *a8, unsigned __int8 *a9)
{
  uint64_t v13 = (void *)[a5 columns];
  uint64_t v14 = v13;
  if (*(unsigned char *)(a1 + 248))
  {
    unint64_t v15 = objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", 0), "scaleTextPercent");
    BOOL v16 = v15 < 0x64;
    if (v15 >= 0x64) {
      unint64_t v17 = v15;
    }
    else {
      unint64_t v17 = v15 + 1;
    }
  }
  else
  {
    BOOL v16 = 0;
    double v18 = *(double *)(a1 + 256);
    if (v18 == 0.0) {
      double v19 = 100.0;
    }
    else {
      double v19 = v18 * 100.0;
    }
    unint64_t v17 = (unint64_t)v19;
  }
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v46, (const TSWPLayoutState *)(a1 + 80));
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v46);
  unsigned int v43 = v14;
  TSWPTopicNumberHints::TSWPTopicNumberHints(&v45, (const TSWPTopicNumberHints *)(a1 + 768));
  int v20 = 0;
  unint64_t v21 = a3 + a4;
  uint64_t v22 = 100;
  uint64_t v35 = 40;
  char v23 = v16;
  char v36 = v16;
  unint64_t v38 = a3;
  while (1)
  {
    int v41 = v20;
    char v24 = v23;
    char v25 = v23;
    uint64_t v39 = v22;
    char v37 = v23;
    while (1)
    {
      char v40 = v24;
      if (v25)
      {
        TSWPCoreTextTypesetter::endParagraphLayout(*(TSWPCoreTextTypesetter **)(a1 + 2024));
        objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 0), "setScaleTextPercent:", v17);
        TSWPLayoutChore::pSetupStateForParagraphIndex((TSWPLayoutChore *)a1, 0);
        if (objc_opt_respondsToSelector()) {
          [*(id *)(a1 + 2056) scaleTextPercentDidChange:v17];
        }
      }
      if (objc_opt_respondsToSelector()) {
        uint64_t v26 = [*(id *)(a1 + 2056) anchoredDrawablesForRelayout];
      }
      else {
        uint64_t v26 = 0;
      }
      id v27 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithArray:v26 copyItems:0];
      if (a3 < v21)
      {
        uint64_t v28 = a3;
        do
        {
          *(void *)(a1 + 240) = v28;
          double v29 = (void *)[v43 objectAtIndexedSubscript:v28];
          *(void *)(a1 + 184) = v29;
          [v29 setScaleTextPercent:v17];
          uint64_t v30 = *(void **)(a1 + 184);
          uint64_t v31 = *(void *)(a1 + 80);
          if (!*a8)
          {
            [v30 setStartCharIndex:v31];
            [a5 maxSize];
            [*(id *)(a1 + 184) maxSize];
            [*(id *)(a1 + 8) wpKind];
            TSWPLayoutChore::pLayoutColumn(a1);
          }
          [v30 makeEmpty:v31 layoutResultFlags:16 * *a9];
          ++v28;
        }
        while (v28 != v21);
      }

      a3 = v38;
      uint64_t v22 = v39;
      int v20 = v41 + 1;
      if (*(unsigned char *)(a1 + 248)) {
        break;
      }
      char v24 = 1;
      ++v41;
      char v25 = v37;
      if ((v40 & 1) == 0) {
        goto LABEL_41;
      }
    }
    int v32 = objc_msgSend((id)objc_msgSend(v43, "lastObject"), "layoutResultFlags") & 3;
    if (!(v40 & 1 | (v32 != 0))) {
      break;
    }
    if (((v41 == 0) & v36) == 1)
    {
      if (v32)
      {
        uint64_t v22 = v17 - 1;
        char v36 = 1;
        --v17;
      }
      else
      {
        char v36 = 0;
        unint64_t v17 = 100;
      }
    }
    else
    {
      if (v20 == 2 && (v36 & 1) != 0 && v32 == 0) {
        break;
      }
      uint64_t v33 = v35;
      if ((unint64_t)(v39 - v35) > 1)
      {
        char v36 = 0;
        if (v32) {
          uint64_t v22 = v17;
        }
        else {
          uint64_t v33 = v17;
        }
        uint64_t v35 = v33;
        unint64_t v17 = (unint64_t)(v33 + v22) >> 1;
      }
      else
      {
        if (!v32 || v17 == v35) {
          break;
        }
        char v36 = 0;
        unint64_t v17 = v35;
      }
    }
    TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v46);
    TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), &v45);
    *a8 = 0;
    char v23 = 1;
  }
LABEL_41:
  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)a1, (uint64_t)v44);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v44);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(&v45);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v46);
  return 0;
}

void sub_2234F74C8(_Unwind_Exception *a1)
{
}

void sub_2234F7614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  TSWPAttributeEnumerator::~TSWPAttributeEnumerator((TSWPAttributeEnumerator *)va);
  _Unwind_Resume(a1);
}

uint64_t TSWPCoreTextTypesetter::layoutLine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v229 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 34)
    || ((unint64_t v6 = *(void *)(a1 + 40), *(void *)a2 >= v6) ? (v7 = *(void *)a2 > *(void *)(a1 + 48) + v6) : (v7 = 1),
        v7))
  {
    double v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 801, @"layoutLine called without paragraph being setup correctly");
  }
  if ((*(unsigned char *)(a3 + 58) & 1) != 0
    && *(void *)(*(void *)(a1 + 232) + 88) != *(void *)(*(void *)(a1 + 232) + 80))
  {
    uint64_t v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 802, @"Can't skip glyph vectors with ruby");
  }
  unint64_t v12 = *(uint64_t **)(a3 + 200);
  unint64_t v13 = [*(id *)(a1 + 64) charIndexMappedFromStorage:*(void *)a2];
  uint64_t v219 = *(void *)(a3 + 184);
  v220 = *(TSWPRubyField **)(a3 + 176);
  if (v13 == 0x7FFFFFFFFFFFFFFFLL || (unint64_t v14 = v13, v13 > *(void *)(a1 + 56)))
  {
    if (*(void *)a2 != *(void *)(a1 + 48) + *(void *)(a1 + 40))
    {
      unint64_t v15 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v16 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
      objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 814, @"bad start char index");
    }
    unint64_t v14 = *(void *)(a1 + 56);
  }
  unint64_t v226 = v14;
  *unint64_t v12 = *(void *)a2;
  v12[2] = *(void *)(a1 + 40);
  long long v17 = *(_OWORD *)(a2 + 536);
  *((_OWORD *)v12 + 3) = *(_OWORD *)(a2 + 520);
  *((_OWORD *)v12 + 4) = v17;
  if (*(unsigned char *)(a1 + 30)) {
    *((_DWORD *)v12 + 6) |= 0x2000u;
  }
  if (v12[23])
  {
    double v18 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 825, @"expected nil value for '%s'", "lineFragment->_textSource");
  }
  v12[23] = (uint64_t)*(id *)(a1 + 64);
  long long v20 = *(_OWORD *)(a3 + 112);
  long long v21 = *(_OWORD *)(a3 + 128);
  long long v22 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 200) = v21;
  *(_OWORD *)(a1 + 184) = v20;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x560], 8) = v22;
  int v222 = *(_DWORD *)(a3 + 32) & 0x14;
  int v23 = *((_DWORD *)v12 + 6);
  double v24 = *(double *)(a3 + 16);
  double v25 = *(double *)(a2 + 520);
  double v26 = *(double *)a3;
  *(void *)&long long v21 = *(void *)(a2 + 528);
  *(void *)&long long v22 = *(void *)(a2 + 536);
  uint64_t v27 = *(void *)(a2 + 544);
  *(double *)&long long v20 = v25;
  double MaxX = CGRectGetMaxX(*(CGRect *)&v20);
  double v30 = *(double *)(a2 + 208);
  double v31 = *(double *)(a2 + 216);
  double v32 = v24 - v31;
  double v33 = *(double *)(a3 + 160);
  if ((v23 & 0x1000) != 0)
  {
    double v32 = v32 + v33;
    if (!*(unsigned char *)(a2 + 332) && *(unsigned char *)(a2 + 512) && !*(unsigned char *)(a2 + 513) && v33 == 0.0) {
      double v32 = v24 - *(double *)(a2 + 224);
    }
    if (!*(unsigned char *)(a3 + 146))
    {
      double v30 = fmax(fmin(v30, v32 + -18.0), 0.0);
      if (v222 != 4) {
        double v32 = fmin(fmax(v32, v30 + 18.0), v24);
      }
      goto LABEL_38;
    }
LABEL_27:
    int v34 = 0;
    goto LABEL_39;
  }
  double v30 = v30 + v33;
  if (!*(unsigned char *)(a2 + 332) && *(unsigned char *)(a2 + 512) && !*(unsigned char *)(a2 + 513) && v33 == 0.0) {
    double v30 = *(double *)(a2 + 224);
  }
  if (*(unsigned char *)(a3 + 146)) {
    goto LABEL_27;
  }
  double v32 = fmin(fmax(v32, v30 + 18.0), v24);
  if (v222 != 4) {
    double v30 = fmax(fmin(v30, v32 + -18.0), 0.0);
  }
LABEL_38:
  int v34 = 1;
LABEL_39:
  double v35 = v25 - v26;
  double v29 = *(double *)a3;
  double v36 = MaxX - *(double *)a3;
  if (*(unsigned char *)(a2 + 344))
  {
    if (v34)
    {
      if (v222 != 4)
      {
        double v32 = fmin(fmax(v32 - *(double *)(a2 + 232), v30 + 18.0), v24);
LABEL_58:
        if (v35 >= v30) {
          double v37 = v25 - v26;
        }
        else {
          double v37 = v30;
        }
        if (v32 >= v36) {
          double v38 = MaxX - v29;
        }
        else {
          double v38 = v32;
        }
        goto LABEL_64;
      }
LABEL_45:
      if (v35 >= v30) {
        double v37 = v25 - v26;
      }
      else {
        double v37 = v30;
      }
LABEL_56:
      double v38 = *(double *)(a3 + 40) - v31;
      goto LABEL_64;
    }
    double v32 = v32 - *(double *)(a2 + 232);
  }
  else
  {
    double v30 = v30 + *(double *)(a2 + 232);
    if (v34)
    {
      if (v222 != 4)
      {
        double v30 = fmax(fmin(v30, v32 + -18.0), 0.0);
        goto LABEL_58;
      }
      goto LABEL_45;
    }
  }
  if (v35 >= v30) {
    double v37 = v25 - v26;
  }
  else {
    double v37 = v30;
  }
  if (v32 >= v36) {
    double v38 = MaxX - v29;
  }
  else {
    double v38 = v32;
  }
  if (v222 == 4) {
    goto LABEL_56;
  }
LABEL_64:
  if (*(unsigned char *)(a2 + 512))
  {
    uint64_t v39 = *(void **)(a2 + 184);
    if (v39)
    {
      if (*(unsigned char *)(a2 + 332))
      {
        int v40 = [v39 labelTypeForLevel:*(void *)(a2 + 192)];
        int v41 = (void *)[*(id *)(a2 + 184) valueForProperty:181];
        if (v41) {
          id v42 = (id)[v41 objectAtIndexedSubscript:*(void *)(a2 + 192)];
        }
        else {
          id v42 = +[TSWPListLabelGeometry listLabelGeometry];
        }
        v215 = v42;
        int v216 = v40;
        TSWPResolveFloatPropertyForStyles([*(id *)(a1 + 64) characterStyleAtCharIndex:v14 effectiveRange:0], *(void *)(a2 + 96), 17);
        double v44 = v43 * (float)((float)(unint64_t)[*(id *)(a2 + 104) scaleTextPercent] / 100.0);
        CFDictionaryRef v214 = (TSWPParagraphEnumerator *)(a2 + 24);
        TSWPTopicNumberHints v45 = (void *)TSWPParagraphEnumerator::listLabelParagraphStyleOverride((TSWPParagraphEnumerator *)(a2 + 24));
        if (!v45) {
          TSWPTopicNumberHints v45 = *(void **)(a2 + 96);
        }
        FontForStyle = TSWPFastCreateFontForStyle(0, v45, [*(id *)(a2 + 104) scaleTextPercent]);
        if (v44 != CTFontGetSize(FontForStyle))
        {
          CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(FontForStyle, v44, 0, 0);
          CFRelease(FontForStyle);
          FontForStyle = CopyWithAttributes;
        }
        if (v216 == 3)
        {
          TSWPParagraphEnumerator::TSWPParagraphEnumerator(&v225, v214);
          uint64_t v52 = TSWPCoreTextTypesetter::pNumberedListLabel((TSWPCoreTextTypesetter *)a1, (const TSWPLayoutState *)a2, &v225, *(void *)(a2 + 192), *(unsigned char *)(a1 + 30) == 0);
          TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v225);
          if (v52) {
            goto LABEL_90;
          }
        }
        else
        {
          if (v216 != 2)
          {
            if (v216 == 1)
            {
              uint64_t v48 = FontForStyle;
              unsigned int v49 = (void *)[*(id *)(a2 + 184) valueForProperty:182];
              unint64_t v50 = *(void *)(a2 + 192);
              uint64_t v51 = v50 >= [v49 count]
                  ? 0
                  : [v49 objectAtIndexedSubscript:*(void *)(a2 + 192)];
              objc_opt_class();
              FontForStyle = v48;
              if (objc_opt_isKindOfClass())
              {
                float v55 = objc_msgSend(+[TSDImageProviderPool sharedPool](TSDImageProviderPool, "sharedPool"), "providerForData:shouldValidate:", v51, 1);
                if (v55)
                {
                  if (([v55 isError] & 1) == 0) {
                    operator new();
                  }
                }
              }
            }
            goto LABEL_93;
          }
          double v53 = (void *)[*(id *)(a2 + 184) valueForProperty:183];
          if (v53) {
            uint64_t v54 = (__CFString *)[v53 objectAtIndexedSubscript:*(void *)(a2 + 192)];
          }
          else {
            uint64_t v54 = +[TSWPListStyle defaultLabelString];
          }
          uint64_t v52 = v54;
          if (v54)
          {
LABEL_90:
            CFStringRef alloc = v52;
            CFTypeRef cf = FontForStyle;
            double Size = CTFontGetSize(FontForStyle);
            if (![v215 scaleWithText] || (objc_msgSend(v215, "scale"), v57 == 1.0))
            {
              char v59 = 0;
            }
            else
            {
              [v215 scale];
              double Size = Size * v58;
              char v59 = 1;
            }
            CGRect v182 = (NSString *)[*(id *)(a2 + 184) valueForProperty:16];
            if (-[NSString isEqual:](v182, "isEqual:", [MEMORY[0x263EFF9D0] null])) {
              CGRect v183 = 0;
            }
            else {
              CGRect v183 = v182;
            }
            char v184 = (v183 == 0) & ~v59;
            uint64_t v185 = (uint64_t)cf;
            if ((v184 & 1) == 0) {
              uint64_t v185 = TSWPCoreTextTypesetter::pLabelFont((TSWPCoreTextTypesetter *)a1, v183, cf, Size);
            }
            CFIndex v186 = *(void *)(a2 + 96);
            v228.CFIndex location = *(void *)(a2 + 184);
            v228.NSUInteger length = v186;
            CGRect v187 = (void *)TSWPResolvePropertyForStyles((uint64_t)&v228, 2uLL, 18, 0);
            if (!v187)
            {
              CGRect v188 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
              uint64_t v189 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
              [v188 handleFailureInFunction:v189, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1069, @"Expect label color, or paragraph color as the default." file lineNumber description];
            }
            uint64_t v190 = [v187 CGColor];
            if (*(unsigned char *)(a2 + 344))
            {
              LOBYTE(v224) = 1;
              settings.spec = kCTParagraphStyleSpecifierBaseWritingDirection;
              settings.valuedouble Size = 1;
              settings.value = &v224;
              CTParagraphStyleRef v191 = CTParagraphStyleCreate(&settings, 1uLL);
              id v192 = objc_alloc(NSDictionary);
              CFDictionaryRef attributes = (const __CFDictionary *)objc_msgSend(v192, "initWithObjectsAndKeys:", v185, *MEMORY[0x263F039A0], v190, *MEMORY[0x263F03C60], v191, *MEMORY[0x263F03CA0], 0);
              CFRelease(v191);
            }
            else
            {
              id v194 = objc_alloc(NSDictionary);
              CFDictionaryRef attributes = (const __CFDictionary *)objc_msgSend(v194, "initWithObjectsAndKeys:", v185, *MEMORY[0x263F039A0], v190, *MEMORY[0x263F03C60], 0);
            }
            CFAllocatorRef v211 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFAttributedStringRef attrString = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], alloc, attributes);
            CTLineRef line = CTLineCreateWithAttributedString(attrString);
            if (*(unsigned char *)(a1 + 30))
            {
              if (v216 == 3)
              {
                double v195 = TSWPFastCreateFontForStyle(0, *(void **)(a2 + 96), 0x64uLL);
                TSWPFontGetLineHeight();
                double v197 = v196;
                CFRelease(v195);
                if (CTLineGetTypographicBounds(line, 0, 0, 0) >= v197)
                {
                  unint64_t Length = CFStringGetLength(alloc);
                  CFAttributedStringRef aStr = CFAttributedStringCreateMutable(v211, 0);
                  v232.CFIndex location = 0;
                  v232.NSUInteger length = 0;
                  CFAttributedStringReplaceString(aStr, v232, alloc);
                  v233.CFIndex location = 0;
                  v233.NSUInteger length = Length;
                  CFAttributedStringSetAttributes(aStr, v233, attributes, 1u);
                  if (Length)
                  {
                    CFIndex v201 = 0;
                    CFAllocatorRef v202 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
                    unsigned int v203 = 1;
                    do
                    {
                      CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(alloc, v201);
                      int v205 = CharacterAtIndex;
                      LOWORD(settings.spec) = 0;
                      int v206 = TSWPFullWidthCharacterForCharacter(CharacterAtIndex);
                      LOWORD(settings.spec) = v206;
                      if (v205 != v206)
                      {
                        CFStringRef v207 = CFStringCreateWithCharactersNoCopy(v211, (const UniChar *)&settings, 1, v202);
                        v234.CFIndex location = v201;
                        v234.NSUInteger length = 1;
                        CFAttributedStringReplaceString(aStr, v234, v207);
                        CFRelease(v207);
                      }
                      CFIndex v201 = v203;
                      BOOL v7 = Length > v203++;
                    }
                    while (v7);
                  }
                  ApplyVerticalFormsToAttributedString(aStr, 0);
                  CFRelease(attrString);
                  CFRelease(line);
                  CTLineCreateWithAttributedString(aStr);
                }
              }
            }
            if (TSWPParagraphEnumerator::paragraphListNumber(v214, 0) == 0x7FFFFFFFFFFFFFFFLL
              && !TSWPParagraphEnumerator::paragraphListStart(v214))
            {
              TSWPTopicNumberHints::nextTopicNumberForList(*(TSWPTopicNumberHints **)(a1 + 280), *(TSWPListStyle **)(a2 + 184), *(void *)(a2 + 192));
            }
            operator new();
          }
        }
LABEL_93:
        CFRelease(FontForStyle);
      }
    }
  }
  if (v37 >= v38) {
    double v60 = v37;
  }
  else {
    double v60 = v38;
  }
  double v61 = fmin(v60 - v37, 32000.0);
  double v62 = v37;
  if ((*(unsigned char *)(a3 + 32) & 4) != 0) {
    goto LABEL_104;
  }
  int v63 = *(_DWORD *)(a2 + 388);
  if (v63 == 1) {
    goto LABEL_103;
  }
  if (v63 == 2)
  {
    double v62 = v37 + v61 * 0.5;
    goto LABEL_104;
  }
  double v62 = v37;
  if (v63 == 3)
  {
    double v62 = v37;
    if (*(unsigned char *)(a2 + 333)) {
LABEL_103:
    }
      double v62 = v60;
  }
LABEL_104:
  size_t v64 = *(void *)(a1 + 56);
  if (v61 <= 1.0 && !*(unsigned char *)(a3 + 145) || v64 - 1 < v14)
  {
    TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, 0, v62, v30);
    size_t v64 = v14;
    goto LABEL_328;
  }
  if (v14 >= v64 - (*(_WORD *)(*(void *)(a1 + 232) + 72) != 0))
  {
    v12[1] = [*(id *)(a1 + 64) charIndexMappedToStorage:*(void *)(a1 + 56)] - *v12;
    TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, *(unsigned __int16 *)(*(void *)(a1 + 232) + 72), v62, v181);
    TSWPLineFragment::setTypesetterPos((TSWPLineFragment *)v12, v37, v60);
    goto LABEL_328;
  }
  if (v220 != (TSWPRubyField *)0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v14 = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:");
    v12[1] = v219;
    TSWPLineFragment::setTypesetterPos((TSWPLineFragment *)v12, v37, v60);
    size_t v64 = v14 + v219;
    if (!TSWPLineFragment::shareLineRefs((TSWPLineFragment *)v12, *(const TSWPLineFragment **)(a3 + 152))
      && (*(unsigned char *)(a3 + 58) & 1) == 0)
    {
      FontRunIndexForLocalCharIndeCGFloat x = TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex((TSWPCoreTextTypesetter *)a1, v64 - 1);
      TSWPLineFragment::setHyphenInfo((TSWPLineFragment *)v12, *(CFTypeRef *)(*(void *)(a1 + 120) + 104 * FontRunIndexForLocalCharIndex + 32), 45);
      TSWPCoreTextTypesetter::createLineRefsForLineFragment(a1, (TSWPLineFragment *)v12, a2, v222 == 4, *(_DWORD *)(a3 + 56));
    }
    goto LABEL_328;
  }
  objc_opt_class();
  [*(id *)(a1 + 64) smartFieldAtCharIndex:v226 attributeKind:7 effectiveRange:&settings];
  double v65 = (TSWPRubyField *)TSUDynamicCast();
  if (v65) {
    TSWPParagraphTypesetter::enableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v65);
  }
  TSWPLineFragment::saveLayoutState((TSWPLineFragment *)v12);
  unsigned int v66 = 0;
  CFAllocatorRef alloca = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    unsigned int v223 = v66;
    if (v66) {
      TSWPLineFragment::restoreLayoutState((TSWPLineFragment *)v12);
    }
    if (!*(unsigned char *)(a1 + 88))
    {
LABEL_151:
      if (!*(unsigned char *)(a1 + 31) || !*(unsigned char *)(a1 + 104))
      {
        uint64_t v89 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
        size_t v64 = MEMORY[0x223CB8530](v89, v14, v61, v37) + v14;
        unint64_t v226 = v64;
        if (v64 > *(void *)(a1 + 56))
        {
          double v90 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
          uint64_t v91 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
          objc_msgSend(v90, "handleFailureInFunction:file:lineNumber:description:", v91, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1476, @"Bad endCharIndex");
        }
        if (!v64
          || *(unsigned char *)(a3 + 145)
          || v64 >= *(void *)(a1 + 56)
          || (TSWPCoreTextTypesetter::pCanBreakLineInRange((TSWPCoreTextTypesetter *)a1, v14, v64) & 1) != 0)
        {
          if (v64 > v14)
          {
            CFRange v228 = (CFRange)*MEMORY[0x263F7C7C8];
            objc_opt_class();
            [*(id *)(a1 + 64) smartFieldAtCharIndex:v64 attributeKind:7 effectiveRange:&v228];
            uint64_t v92 = (TSWPRubyField *)TSUDynamicCast();
            if (v92)
            {
              if (v228.length + v228.location > v64)
              {
                BOOL IsDisabledForField = TSWPParagraphTypesetter::rubyLayoutIsDisabledForField(*(TSWPParagraphTypesetter **)(a1 + 232), v92);
                CFIndex location = v228.location;
                if (!IsDisabledForField)
                {
                  if (v228.location <= v14 && *(unsigned char *)(a3 + 145))
                  {
                    TSWPParagraphTypesetter::disableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v92);
                    CFIndex location = v228.location;
                  }
                  else
                  {
                    if (v228.location <= v14) {
                      size_t v64 = v14;
                    }
                    else {
                      size_t v64 = v228.location;
                    }
                    unint64_t v226 = v64;
                  }
                }
                if (v64 == location + v228.length - 1) {
                  unint64_t v226 = ++v64;
                }
              }
            }
          }
        }
        else
        {
          unint64_t v226 = v14;
          CGFloat v95 = (TSWPListLabel *)v12[22];
          size_t v64 = v14;
          if (v95)
          {
            TSWPListLabel::~TSWPListLabel(v95);
            MEMORY[0x223CB8F20]();
            v12[22] = 0;
            size_t v64 = v14;
          }
        }
        goto LABEL_265;
      }
      uint64_t v86 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
      size_t v64 = MEMORY[0x223CB8520](v86, v14, v61, v37) + v14;
      unint64_t v226 = v64;
      unint64_t v87 = [*(id *)(a1 + 64) length];
      objc_opt_class();
      [*(id *)(a1 + 64) smartFieldAtCharIndex:v64 attributeKind:7 effectiveRange:&settings];
      double v221 = (TSWPRubyField *)TSUDynamicCast();
      size_t v88 = v64;
      if (v221)
      {
        size_t v88 = v64;
        if (*(void *)&settings.spec <= v14)
        {
          if (TSWPParagraphTypesetter::isZeroWidthTrailingSpace(*(TSWPParagraphTypesetter **)(a1 + 232), v64))
          {
            size_t v88 = v64 + 1;
            unint64_t v226 = v64 + 1;
          }
          else if (*(unsigned char *)(a3 + 145))
          {
            TSWPParagraphTypesetter::disableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v221);
            size_t v88 = v64;
          }
          else
          {
            size_t v88 = v64;
            if (*(unsigned char *)(a3 + 146))
            {
              unint64_t v226 = v14;
              size_t v88 = v14;
            }
          }
        }
      }
      if (v88 >= v87) {
        goto LABEL_260;
      }
      double v96 = *(void **)(*(void *)(a1 + 232) + 56);
      unint64_t v97 = [v96 length];
      unint64_t v98 = v14;
      if (v97 > v14)
      {
        uint64_t v99 = objc_msgSend((id)objc_msgSend(v96, "string"), "rangeOfComposedCharacterSequenceAtIndex:", v14);
        unint64_t v98 = v99 + v100;
      }
      if (v88 <= v98)
      {
LABEL_260:
        size_t v64 = v226;
        if (v221)
        {
LABEL_261:
          if (settings.valueSize + *(void *)&settings.spec > v64
            && v64 == settings.valueSize + *(void *)&settings.spec - 1)
          {
            unint64_t v226 = ++v64;
LABEL_266:
            unint64_t v126 = v64 - 1;
            if (*(_WORD *)(*(void *)(a1 + 80) + 2 * (v64 - 1)) == 173)
            {
              v230.NSUInteger length = v64 + ~v14;
              v230.CFIndex location = v14;
              if (TSWPCoreTextTypesetter::pRoomForHyphen((TSWPCoreTextTypesetter *)a1, v230, v61, 45, (TSWPLineFragment *)v12))
              {
                TSWPLineFragment::setHyphenated((TSWPLineFragment *)v12, 1);
              }
              else
              {
                unint64_t v127 = [*(id *)(a1 + 64) wordAtCharIndex:v64 includePreviousWord:0];
                if (v14 <= v127) {
                  unint64_t v128 = v127;
                }
                else {
                  unint64_t v128 = v14;
                }
                if (v126 <= v128)
                {
LABEL_278:
                  unint64_t v226 = v126;
                  size_t v64 = v126;
                }
                else
                {
                  size_t v129 = v64 - 2;
                  while (1)
                  {
                    if (*(_WORD *)(*(void *)(a1 + 80) + 2 * v129) == 173)
                    {
                      v231.NSUInteger length = v129 - v14;
                      v231.CFIndex location = v14;
                      if (TSWPCoreTextTypesetter::pRoomForHyphen((TSWPCoreTextTypesetter *)a1, v231, v61, 45, (TSWPLineFragment *)v12))
                      {
                        break;
                      }
                    }
                    size_t v130 = v129 - 1;
                    BOOL v7 = v129-- > v128;
                    if (!v7)
                    {
                      unint64_t v126 = v130 + 1;
                      goto LABEL_278;
                    }
                  }
                  size_t v64 = v129 + 1;
                  unint64_t v226 = v64;
                  TSWPLineFragment::setHyphenated((TSWPLineFragment *)v12, 1);
                }
              }
            }
            goto LABEL_279;
          }
        }
LABEL_265:
        if (!v64) {
          goto LABEL_281;
        }
        goto LABEL_266;
      }
      if (TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v226, (_NSRange *)&settings))
      {
        uint64_t v101 = *(void *)(a1 + 80);
        unint64_t v102 = v226;
        if (v226) {
          uint64_t v103 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v226 - 1);
        }
        else {
          uint64_t v103 = 0;
        }
        int v113 = *(unsigned __int16 *)(v101 + 2 * v103);
        char v114 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(v101 + 2 * v103));
        if (v113 == 8232) {
          char v115 = 1;
        }
        else {
          char v115 = v114;
        }
        if ((v115 & 1) == 0)
        {
          if (v102 < v87)
          {
            while (IsWhitespaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v102)))
            {
              BOOL v116 = IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v102));
              unint64_t v117 = v102 + 1;
              char v118 = v102 + 1 >= v87 || v116;
              if ((v118 & 1) == 0
                && !IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v102 + 2)))
              {
                unint64_t v226 = v102;
                int v148 = *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v102 + 2);
                int v149 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v102 + 2)) ^ 1;
                if (v148 == 8232) {
                  LOBYTE(v149) = 0;
                }
                if ((v149 & 1) == 0)
                {
                  int v112 = 0;
                  ++v102;
                  goto LABEL_235;
                }
                while (1)
                {
LABEL_248:
                  while (v226)
                  {
                    unint64_t v121 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v226 - 1);
                    if (v121 <= v14) {
                      break;
                    }
                    unint64_t v226 = v121;
                    if (TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v226, 0))goto LABEL_260; {
                  }
                    }
                  unint64_t v226 = v64;
                  if (!*(unsigned char *)(a3 + 145)) {
                    goto LABEL_260;
                  }
                  objc_opt_class();
                  unint64_t v122 = *(void **)(a1 + 64);
                  if (v64) {
                    uint64_t v123 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v64 - 1);
                  }
                  else {
                    uint64_t v123 = 0;
                  }
                  [v122 smartFieldAtCharIndex:v123 attributeKind:7 effectiveRange:&settings];
                  double v221 = (TSWPRubyField *)TSUDynamicCast();
                  if (!v221) {
                    goto LABEL_265;
                  }
                  if (TSWPParagraphTypesetter::rubyLayoutIsDisabledForField(*(TSWPParagraphTypesetter **)(a1 + 232), v221))
                  {
                    goto LABEL_261;
                  }
                  TSWPParagraphTypesetter::disableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v221);
                }
              }
              ++v102;
              if (v87 == v117)
              {
                unint64_t v102 = v87;
                break;
              }
            }
          }
          int v112 = 0;
LABEL_235:
          unint64_t v226 = v102;
          goto LABEL_240;
        }
        goto LABEL_224;
      }
      unint64_t v102 = v226;
      uint64_t v104 = *(void **)(*(void *)(a1 + 232) + 56);
      unint64_t v105 = v226;
      if ([v104 length] > v105)
      {
        uint64_t v106 = objc_msgSend((id)objc_msgSend(v104, "string"), "rangeOfComposedCharacterSequenceAtIndex:", v102);
        unint64_t v105 = v106 + v107;
      }
      v228.CFIndex location = v105;
      if (v105 >= *(void *)&settings.spec
        && v105 - *(void *)&settings.spec < settings.valueSize
        && *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v105) == (unsigned __int16)kRubyEndDummySpaceCharacter)
      {
        v228.CFIndex location = ++v105;
      }
      if (v105 < v87)
      {
        if (!TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, (unint64_t *)&v228, 0))
        {
LABEL_194:
          unint64_t v108 = v102;
          if (v102 < v87)
          {
            unint64_t v108 = v102;
            while (IsWhitespaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v108)))
            {
              if (v87 == ++v108) {
                goto LABEL_239;
              }
            }
          }
          unint64_t v224 = v108;
          if (v108 != v87)
          {
            if (!TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v224, 0))
            {
              int v112 = 1;
              goto LABEL_240;
            }
            unint64_t v87 = v224;
          }
LABEL_239:
          int v112 = 0;
          unint64_t v226 = v87;
          unint64_t v102 = v87;
LABEL_240:
          if ((v112 & 1) == 0)
          {
            if (!v102) {
              goto LABEL_260;
            }
            unint64_t v119 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v102 - 1);
            if (v119 && v119 < v102)
            {
              char CanBreak = TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v226, 0);
              if ((CanBreak & 1) == 0) {
                goto LABEL_248;
              }
              goto LABEL_260;
            }
          }
LABEL_247:
          if (v112) {
            goto LABEL_248;
          }
          goto LABEL_260;
        }
        unint64_t v105 = v228.location;
      }
      if (v105 == v87 && IsWhitespaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v102))) {
        goto LABEL_194;
      }
      if (v223)
      {
LABEL_224:
        int v112 = 0;
        goto LABEL_240;
      }
      double v109 = 0.0;
      if (v14 < v102)
      {
        unint64_t v110 = v14;
        do
          double v109 = v109 + OikomiSquishAmountForCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v110++));
        while (v109 < 1.0 && v110 < v102);
      }
      if (v105 < v87)
      {
        while (IsWhitespaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v105)))
        {
          if (v87 == ++v105)
          {
            unint64_t v105 = v87;
            break;
          }
        }
      }
      unint64_t v224 = v105;
      if (v109 < 1.0)
      {
LABEL_218:
        int v112 = 1;
        goto LABEL_240;
      }
      if (v105 != v87)
      {
        if (!TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v224, 0)) {
          goto LABEL_218;
        }
        unint64_t v87 = v224;
      }
      unint64_t v226 = v87;
      TSWPLineFragment::setOikomiSquish((TSWPLineFragment *)v12, 1);
      int v112 = 0;
      goto LABEL_247;
    }
    uint64_t v67 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
    uint64_t v68 = MEMORY[0x223CB8520](v67, v14, v61, v37);
    size_t v64 = v68 + v14;
    unint64_t v226 = v68 + v14;
    size_t v69 = *(void *)(a1 + 56);
    if (v68 + v14 > v69)
    {
      CGRect v70 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v71 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
      objc_msgSend(v70, "handleFailureInFunction:file:lineNumber:description:", v71, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1557, @"Bad endCharIndex");
      size_t v69 = *(void *)(a1 + 56);
    }
    BOOL v72 = v64 < v69;
    if (v64 && v64 < v69)
    {
      int v73 = *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v64 - 2);
      char v74 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v64 - 2));
      if (v73 == 8232) {
        char v75 = 1;
      }
      else {
        char v75 = v74;
      }
      if (v75)
      {
        LOBYTE(v72) = 0;
        goto LABEL_137;
      }
    }
    else if (v64 >= v69)
    {
      goto LABEL_135;
    }
    if (!IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v64))) {
      goto LABEL_136;
    }
    size_t v76 = v14 + 1 + v68;
    while (1)
    {
      size_t v64 = v76;
      size_t v77 = *(void *)(a1 + 56);
      if (v64 >= v77) {
        break;
      }
      BOOL v78 = IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v64));
      size_t v76 = v64 + 1;
      if (!v78)
      {
        size_t v77 = *(void *)(a1 + 56);
        break;
      }
    }
    unint64_t v226 = v64;
    if (v64 < v77)
    {
      int v79 = *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v64);
      int v80 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v64)) ^ 1;
      if (v79 == 8232) {
        LOBYTE(v80) = 0;
      }
      if ((v80 & 1) == 0)
      {
        LOBYTE(v72) = 0;
        unint64_t v226 = ++v64;
LABEL_137:
        UniChar v81 = *(_WORD *)(*(void *)(a1 + 80) + 2 * v64 - 2);
        CFCharacterSetRef v82 = (const __CFCharacterSet *)IsHyphenableCharacter(unsigned short)::sChars;
        if (!IsHyphenableCharacter(unsigned short)::sChars)
        {
          IsHyphenableCharacter(unsigned short)::sChars = (uint64_t)CFCharacterSetCreateWithCharactersInString(alloca, @"-—–‐‒−﹣－﹘");

          CFCharacterSetRef v82 = (const __CFCharacterSet *)IsHyphenableCharacter(unsigned short)::sChars;
        }
        if (CFCharacterSetIsCharacterMember(v82, v81)) {
          BOOL v83 = 0;
        }
        else {
          BOOL v83 = v72;
        }
        if (!v83) {
          goto LABEL_279;
        }
        goto LABEL_145;
      }
    }
LABEL_135:
    BOOL v72 = 0;
LABEL_136:
    if (v64) {
      goto LABEL_137;
    }
    if (!v72) {
      goto LABEL_281;
    }
LABEL_145:
    if (*(__int16 *)(*(void *)(a1 + 80) + 2 * v64) != -4
      || (CGFloat v84 = (void *)[*(id *)(a1 + 64) attachmentAtCharIndex:v64],
          ![v84 isDrawable])
      || [v84 isAnchored])
    {
      v228.CFIndex location = v14;
      v228.NSUInteger length = v64 - v14;
      int v85 = TSWPCoreTextTypesetter::pHyphenateLocalRange((id *)a1, &v228, (const TSWPLayoutState *)a2, v61, (TSWPLineFragment *)v12);
      if (v85 == 1)
      {
        TSWPLineFragment::setHyphenated((TSWPLineFragment *)v12, 1);
        size_t v64 = v228.length + v228.location;
        unint64_t v226 = v228.length + v228.location;
      }
      else if (v85 == -1)
      {
        goto LABEL_151;
      }
    }
LABEL_279:
    if (v64 > *(void *)(a1 + 56))
    {
      CGFloat v131 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v132 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
      objc_msgSend(v131, "handleFailureInFunction:file:lineNumber:description:", v132, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1617, @"Bad localEndCharIndex");
    }
LABEL_281:
    unint64_t v133 = [*(id *)(a1 + 64) charIndexMappedToStorage:v64];
    if (v133 < [*(id *)(a1 + 16) length])
    {
      objc_opt_class();
      [*(id *)(a1 + 64) attachmentAtCharIndex:v64];
      CGFloat v135 = (void *)TSUDynamicCast();
      if (!v135 || ([v135 isPartitioned] & 1) == 0)
      {
        if (v14 < v64)
        {
          while (1)
          {
            unint64_t v136 = v64 - 1;
            if ([*(id *)(a1 + 64) characterAtIndex:v64 - 1] != 65532) {
              break;
            }
            objc_opt_class();
            [*(id *)(a1 + 64) attachmentAtCharIndex:v64 - 1];
            uint64_t v137 = (void *)TSUDynamicCast();
            unint64_t v138 = v137;
            if (!v137
              || ![v137 isAnchored]
              || objc_msgSend((id)objc_msgSend((id)objc_msgSend(v138, "drawable"), "exteriorTextWrap"), "isHTMLWrap"))
            {
              break;
            }
            --v64;
            if (v14 >= v136)
            {
              size_t v64 = v14;
              break;
            }
          }
        }
        unint64_t v226 = v64;
      }
    }
    if (v14 == v64)
    {
      if (!*(void *)(a1 + 56) || !*(unsigned char *)(a3 + 145))
      {
LABEL_301:
        TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, 0, v37, v134);
LABEL_302:
        size_t v64 = v14;
        goto LABEL_308;
      }
      unint64_t v139 = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:", TSWPNextCharFromTextSource(objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", v14), *(void **)(a1 + 64)));
      size_t v64 = v139;
      unint64_t v226 = v139;
      if (*(_WORD *)(*(void *)(a1 + 232) + 72)
        && v139
        && v139 == *(void *)(a1 + 56) - 1
        && *(_WORD *)(*(void *)(a1 + 80) + 2 * v139 - 2) != 8232)
      {
        size_t v64 = v139 + 1;
        unint64_t v226 = v139 + 1;
      }
    }
    if (v14 == v64) {
      goto LABEL_301;
    }
    v12[1] = [*(id *)(a1 + 64) charIndexMappedToStorage:v64] - *v12;
    int v140 = *(_DWORD *)(a3 + 32);
    TSWPLineFragment::setTypesetterPos((TSWPLineFragment *)v12, v37, v60);
    if (!TSWPLineFragment::shareLineRefs((TSWPLineFragment *)v12, *(const TSWPLineFragment **)(a3 + 152)))
    {
      int v141 = *(_DWORD *)(a3 + 56);
      if ((v141 & 0x10000) == 0)
      {
        TSWPCoreTextTypesetter::createLineRefsForLineFragment(a1, (TSWPLineFragment *)v12, a2, (v140 & 0xC) != 0, v141);
        if (!*(unsigned char *)(a3 + 145))
        {
          uint64_t v142 = (CTLineRef *)v12[24];
          double v143 = *((double *)v12 + 6);
          [*(id *)(a2 + 104) wpBounds];
          double v145 = v144;
          double v146 = *((double *)v12 + 27);
          if (v143 - v144 + v146 - CTLineGetTrailingWhitespaceWidth(*v142) > v60 + 0.25)
          {
            unint64_t v226 = v14;
            v12[1] = 0;
            TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, 0, v37, v143 - v145);
            goto LABEL_302;
          }
        }
      }
    }
LABEL_308:
    if ((TSWPParagraphTypesetter::lineNeedsRecutting(*(TSWPParagraphTypesetter **)(a1 + 232), (TSWPLineFragment *)v12, v60 - v37) & 1) == 0)break; {
    if (v223 >= 2)
    }
      goto LABEL_379;
LABEL_315:
    unsigned int v66 = v223 + 1;
  }
  int v147 = *((unsigned __int8 *)v12 + 25) >> 7;
  if (!*(unsigned char *)(a1 + 104)) {
    int v147 = 0;
  }
  if (v223 <= 1 && v147) {
    goto LABEL_315;
  }
  if (!v147) {
    goto LABEL_328;
  }
LABEL_379:
  double v198 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
  uint64_t v199 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
  [v198 handleFailureInFunction:v199, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1705, @"Line not cut correctly, but maximum number of tries (%u) exceeded.", 3 file lineNumber description];
LABEL_328:
  v12[1] = [*(id *)(a1 + 64) charIndexMappedToStorage:v64] - *v12;
  uint64_t v150 = v64 - v14;
  if (v64 <= v14)
  {
    __int16 v151 = 0;
    *(void *)(a3 + 216) = 0;
  }
  else
  {
    *(void *)(a3 + 216) = [*(id *)(a1 + 64) charIndexMappedToStorage:v64 - 1];
    __int16 v151 = [*(id *)(a1 + 64) characterAtIndex:v64 - 1];
  }
  *(_WORD *)(a3 + 20_Block_object_dispose(&STACK[0x560], 8) = v151;
  if (v64 >= *(void *)(a1 + 56)) {
    v150 -= *(_WORD *)(*(void *)(a1 + 232) + 72) != 0;
  }
  TSWPCoreTextTypesetter::pCalcHeightInfo(a1, a2, a3, v14, v150);
  if ((*(unsigned char *)(a3 + 58) & 1) == 0) {
    TSWPLineFragment::adjustBreakLine((TSWPLineFragment *)v12);
  }
  double RubyLineRefsForLineFragment = TSWPParagraphTypesetter::createRubyLineRefsForLineFragment(*(TSWPParagraphTypesetter **)(a1 + 232), (TSWPLineFragment *)v12);
  *(void *)&settings.spec = 0;
  v228.CFIndex location = 0;
  TSWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(a1, a2, v153, *(void *)(a3 + 200), (double *)&settings, (double *)&v228.location);
  TSWPParagraphTypesetter::createTateChuYokoLineRefsForLineFragment(*(TSWPParagraphTypesetter **)(a1 + 232), (TSWPLineFragment *)v12);
  double v154 = *(double *)&settings.spec;
  if (RubyLineRefsForLineFragment >= *(double *)&settings.spec) {
    double v154 = RubyLineRefsForLineFragment;
  }
  if (v154 > 0.0)
  {
    double v155 = *((double *)v12 + 18);
    double v156 = v154 - (*(double *)(a3 + 168) + v155);
    if (v156 > 0.0)
    {
      *((double *)v12 + 1_Block_object_dispose(&STACK[0x560], 8) = v155 + v156;
      *((double *)v12 + 13) = v156 + *((double *)v12 + 13);
      *((double *)v12 + 9) = v156 + *((double *)v12 + 9);
    }
  }
  double v157 = *(double *)&v228.location;
  if (*(double *)&v228.location > 0.0)
  {
    double v158 = *((double *)v12 + 17);
    double v159 = *((double *)v12 + 19);
    double v160 = v158 + v159;
    double v161 = *(double *)&v228.location + v158;
    *((double *)v12 + 17) = v161;
    double v162 = fmax(v159 - v157, 0.0);
    *((double *)v12 + 19) = v162;
    double v163 = v161 + v162 - v160;
    if (v163 > 0.0)
    {
      *((double *)v12 + 13) = v163 + *((double *)v12 + 13);
      *((double *)v12 + 9) = v163 + *((double *)v12 + 9);
    }
  }
  TSWPCoreTextTypesetter::pAdjustErasableBounds((TSWPCoreTextTypesetter *)a1, (const TSWPLayoutState *)a2, (TSWPLineFragment *)v12);
  uint64_t v164 = *v12;
  uint64_t v165 = v12[1];
  uint64_t v166 = [*(id *)(a1 + 16) range];
  if (v165 + v164 == v166 + v167) {
    *((_DWORD *)v12 + 6) |= 0x200000u;
  }
  if (*((double *)v12 + 18) == -3.40282347e38)
  {
    double v168 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v169 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v168, "handleFailureInFunction:file:lineNumber:description:", v169, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1772, @"Bad leading");
  }
  if (v12[25] == v12[24] && (*(unsigned char *)(a3 + 58) & 1) == 0)
  {
    char v170 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v171 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v170, "handleFailureInFunction:file:lineNumber:description:", v171, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1773, @"Bad lineRef count");
  }
  if (v64 > *(void *)(a1 + 56))
  {
    id v172 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v173 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v172, "handleFailureInFunction:file:lineNumber:description:", v173, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1774, @"Bad endCharIndex");
  }
  uint64_t v174 = *v12;
  if (!v14 && v174 != *(void *)(a1 + 40))
  {
    double v175 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v176 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v175, "handleFailureInFunction:file:lineNumber:description:", v176, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1775, @"First line should lie at the beginning of the paragraph");
    uint64_t v174 = *v12;
  }
  uint64_t v177 = v12[1];
  if (v64 == *(void *)(a1 + 56) && v177 + v174 != *(void *)(a1 + 48) + *(void *)(a1 + 40))
  {
    TSWPParagraphEnumerator v178 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v179 = objc_msgSend(NSString, "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v178, "handleFailureInFunction:file:lineNumber:description:", v179, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1776, @"Last line should reach the end of the paragraph");
    uint64_t v174 = *v12;
    uint64_t v177 = v12[1];
  }
  return v177 + v174;
}

void sub_2234F9720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,TSWPParagraphEnumerator *a22)
{
  MEMORY[0x223CB8F20](v22, 0x10E0C40F5225EA9);
  _Unwind_Resume(a1);
}

void TSWPParagraphTypesetter::createTateChuYokoLineRefsForLineFragment(TSWPParagraphTypesetter *this, TSWPLineFragment *a2)
{
  if (*((void *)this + 13) != *((void *)this + 14))
  {
    uint64_t v4 = (TSWPParagraphTypesetter *)objc_msgSend(*(id *)this, "charRangeMappedFromStorage:", *(void *)a2, *((void *)a2 + 1));
    unint64_t v6 = (unint64_t *)*((void *)this + 13);
    BOOL v7 = (unint64_t *)*((void *)this + 14);
    if (v7 != v6)
    {
      unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (v7 - v6);
      do
      {
        unint64_t v9 = v8 >> 1;
        uint64_t v10 = &v6[7 * (v8 >> 1)];
        unint64_t v12 = *v10;
        uint64_t v11 = v10 + 7;
        v8 += ~(v8 >> 1);
        if (v12 < v4) {
          unint64_t v6 = v11;
        }
        else {
          unint64_t v8 = v9;
        }
      }
      while (v8);
    }
    if (v6 != v7)
    {
      unint64_t v13 = (char *)v4 + v5;
      unint64_t v14 = (long long *)MEMORY[0x263F7C7C8];
      do
      {
        if (*v6 >= (unint64_t)v13) {
          break;
        }
        PositionForLocalCharIndeCGFloat x = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v4, a2, *v6);
        uint64_t v16 = (const void *)v6[2];
        double v17 = PositionForLocalCharIndex + *((double *)v6 + 4);
        double v18 = *((double *)v6 + 3) * 0.5;
        cf[0] = v16;
        cf[1] = *(CFTypeRef *)&v17;
        *(double *)&cf[2] = v18;
        long long v22 = *v14;
        int v23 = 0;
        if (v16) {
          CFRetain(v16);
        }
        long long v22 = *(_OWORD *)v6;
        unint64_t v19 = *((void *)a2 + 32);
        if (v19 >= *((void *)a2 + 33))
        {
          uint64_t v20 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>((uint64_t *)a2 + 31, (uint64_t)cf);
        }
        else
        {
          std::vector<TSWPLineRef>::__construct_one_at_end[abi:nn180100]<TSWPLineRef const&>((uint64_t)a2 + 248, (uint64_t)cf);
          uint64_t v20 = v19 + 48;
        }
        *((void *)a2 + 32) = v20;
        uint64_t v4 = (TSWPParagraphTypesetter *)cf[0];
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        v6 += 7;
      }
      while (v6 != v7);
    }
  }
}

void sub_2234F9A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

double TSWPParagraphTypesetter::createRubyLineRefsForLineFragment(TSWPParagraphTypesetter *this, TSWPLineFragment *a2)
{
  uint64_t v2 = *((void *)this + 11) - *((void *)this + 10);
  if (v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = v2 >> 3;
    uint64_t v6 = *((void *)a2 + 34);
    double v7 = 0.0;
    double v8 = 0.0;
    uint64_t v9 = *((void *)a2 + 35) - v6;
    if (v9)
    {
      unint64_t v10 = v9 / 80;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      uint64_t v11 = (double *)(v6 + 56);
      do
      {
        if (*((_DWORD *)v11 - 2) == 1 && v8 < *v11) {
          double v8 = *v11;
        }
        v11 += 10;
        --v10;
      }
      while (v10);
    }
    unint64_t v12 = 0x8E38E38E38E38E39 * v5;
    unint64_t v13 = objc_msgSend(*(id *)this, "charRangeMappedFromStorage:", *(void *)a2, *((void *)a2 + 1));
    unint64_t v15 = v14;
    uint64_t v16 = 0;
    double v60 = (uint64_t *)((char *)a2 + 224);
    unsigned int v17 = 1;
    unint64_t v61 = v12;
    unint64_t v62 = v14;
    uint64_t v63 = (uint64_t)v4;
    while (1)
    {
      uint64_t v18 = *((void *)v4 + 10);
      uint64_t v19 = v18 + 72 * v16;
      unint64_t v20 = *(void *)(v19 + 8);
      if (v20 < v13 || v20 - v13 >= v15) {
        goto LABEL_47;
      }
      unint64_t v22 = v13;
      uint64_t v23 = *(void *)(v19 + 16);
      double v24 = (TSWPParagraphTypesetter *)objc_msgSend((id)objc_msgSend(*(id *)v19, "rubyText"), "length");
      if (v24 && *(unsigned char *)(v18 + 72 * v16 + 64) == 0) {
        break;
      }
      unint64_t v13 = v22;
      unint64_t v15 = v62;
      uint64_t v4 = (TSWPParagraphTypesetter *)v63;
LABEL_47:
      uint64_t v16 = v17;
      if (v12 <= v17++) {
        return v7;
      }
    }
    uint64_t v26 = v18 + 72 * v16;
    uint64_t v27 = *(const void **)(v26 + 24);
    if (!v27 || (double v28 = *(double *)(v26 + 32), v28 <= 0.0))
    {
      unint64_t v13 = v22;
      unint64_t v12 = v61;
      unint64_t v15 = v62;
      uint64_t v4 = (TSWPParagraphTypesetter *)v63;
LABEL_46:
      *((_DWORD *)a2 + 6) |= 0x400u;
      goto LABEL_47;
    }
    PositionForLocalCharIndeCGFloat x = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v24, a2, v20);
    double v31 = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v30, a2, v23 + v20) - PositionForLocalCharIndex;
    uint64_t v32 = v18 + 72 * v16;
    double v34 = *(double *)(v32 + 48);
    double v33 = (double *)(v32 + 48);
    double v35 = v8 + *((double *)a2 + 16) + v34;
    double v36 = v31 - v28;
    if (v28 + 1.0 >= v31)
    {
      if (v31 + 1.0 < v28)
      {
        double v64 = 0.0;
        *(double *)&CFTypeRef cf = 0.0;
        TSWPParagraphTypesetter::pCalculateRubyOverlap(v63, (unint64_t *)a2, v19, &cf, &v64);
        double v45 = v31 + *(double *)&cf + v64;
        if (v28 + 1.0 >= v45 && v45 + 1.0 < v28)
        {
          char v59 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
          uint64_t v48 = v33;
          uint64_t v49 = [NSString stringWithUTF8String:"CGFloat TSWPParagraphTypesetter::createRubyLineRefsForLineFragment(TSWPLineFragment *)"];
          uint64_t v50 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm"];
          uint64_t v51 = v49;
          double v33 = v48;
          [v59 handleFailureInFunction:v51 file:v50 lineNumber:269 description:@"could not properly position ruby text. fall back to centering over base text."];
        }
        else
        {
          PositionForLocalCharIndeCGFloat x = PositionForLocalCharIndex - *(double *)&cf;
          double v36 = v45 - v28;
        }
      }
      uint64_t v52 = [*(id *)v19 range];
      CFTypeRef cf = v27;
      double v66 = PositionForLocalCharIndex + v36 * 0.5;
      double v67 = -v35;
      uint64_t v68 = v52;
      uint64_t v69 = v53;
      int v70 = 0;
      CFRetain(v27);
      unint64_t v54 = *((void *)a2 + 29);
      if (v54 >= *((void *)a2 + 30))
      {
        uint64_t v55 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v60, (uint64_t)&cf);
        unint64_t v12 = v61;
      }
      else
      {
        std::vector<TSWPLineRef>::__construct_one_at_end[abi:nn180100]<TSWPLineRef const&>((uint64_t)v60, (uint64_t)&cf);
        unint64_t v12 = v61;
        uint64_t v55 = v54 + 48;
      }
      unint64_t v13 = v22;
      *((void *)a2 + 29) = v55;
      CFTypeRef v47 = cf;
      unint64_t v15 = v62;
      if (*(double *)&cf == 0.0) {
        goto LABEL_44;
      }
    }
    else
    {
      double v37 = v33;
      GlyphCFIndex Count = CTLineGetGlyphCount((CTLineRef)v27);
      double v39 = v36 / (double)GlyphCount * 0.5;
      if (GlyphCount < 2 || (Justifieddouble Line = CTLineCreateJustifiedLine((CTLineRef)v27, 1.0, v31 + v39 * -2.0)) == 0)
      {
        CFRetain(v27);
        Justifieddouble Line = (CTLineRef)v27;
      }
      uint64_t v41 = [*(id *)v19 range];
      CFTypeRef cf = JustifiedLine;
      double v66 = PositionForLocalCharIndex + v39;
      double v67 = -v35;
      uint64_t v68 = v41;
      uint64_t v69 = v42;
      int v70 = 0;
      CFRetain(JustifiedLine);
      CFRelease(JustifiedLine);
      unint64_t v12 = v61;
      unint64_t v43 = *((void *)a2 + 29);
      if (v43 >= *((void *)a2 + 30))
      {
        uint64_t v44 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v60, (uint64_t)&cf);
      }
      else
      {
        std::vector<TSWPLineRef>::__construct_one_at_end[abi:nn180100]<TSWPLineRef const&>((uint64_t)v60, (uint64_t)&cf);
        uint64_t v44 = v43 + 48;
      }
      unint64_t v13 = v22;
      *((void *)a2 + 29) = v44;
      CFTypeRef v47 = cf;
      unint64_t v15 = v62;
      double v33 = v37;
      if (*(double *)&cf == 0.0) {
        goto LABEL_44;
      }
    }
    CFRelease(v47);
LABEL_44:
    uint64_t v4 = (TSWPParagraphTypesetter *)v63;
    uint64_t v56 = v18 + 72 * v16;
    if (v7 < *(double *)(v56 + 40) + *v33) {
      double v7 = *(double *)(v56 + 40) + *v33;
    }
    goto LABEL_46;
  }
  return 0.0;
}

void sub_2234F9E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPParagraphTypesetter::lineNeedsRecutting(TSWPParagraphTypesetter *this, TSWPLineFragment *a2, double a3)
{
  uint64_t v3 = *((void *)this + 11) - *((void *)this + 10);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = v3 / 72;
  double v8 = (TSWPParagraphTypesetter *)objc_msgSend(*(id *)this, "charRangeMappedFromStorage:", *(void *)a2, *((void *)a2 + 1));
  double v29 = v8;
  unint64_t v10 = v9;
  uint64_t v11 = 0;
  char v12 = 0;
  if (v7 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v7;
  }
  do
  {
    uint64_t v14 = *((void *)this + 10);
    uint64_t v15 = v14 + v11;
    if (!*(unsigned char *)(v14 + v11 + 64))
    {
      unint64_t v17 = *(void *)(v15 + 8);
      uint64_t v16 = *(void *)(v15 + 16);
      PositionForLocalCharIndeCGFloat x = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v8, a2, v17);
      double v20 = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v19, a2, v16 + v17) - PositionForLocalCharIndex;
      if (v20 <= 0.0) {
        goto LABEL_19;
      }
      double v21 = *(double *)(v14 + v11 + 32);
      if (v20 >= v21) {
        double v21 = v20;
      }
      if (v21 <= a3)
      {
LABEL_19:
        if (!*(unsigned char *)(v15 + 64) && v17 >= (unint64_t)v29 && v17 - (unint64_t)v29 < v10)
        {
          double v23 = *(double *)(v14 + v11 + 32);
          double v24 = v23 + 1.0;
          if (v20 + 1.0 < v23 && v24 >= v20)
          {
            double v30 = 0.0;
            double v31 = 0.0;
            double v8 = (TSWPParagraphTypesetter *)TSWPParagraphTypesetter::pCalculateRubyOverlap((uint64_t)this, (unint64_t *)a2, v14 + v11, &v31, &v30);
            double v26 = v20 + v31 + v30;
            if (v24 >= v26 && v26 + 1.0 < v23)
            {
              *(double *)(v14 + v11 + 56) = v23 - v26;
              char v12 = 1;
            }
          }
        }
      }
      else
      {
        char v12 = 1;
        *(unsigned char *)(v15 + 64) = 1;
      }
    }
    v11 += 72;
    --v13;
  }
  while (v13);
  return v12 & 1;
}

void TSWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6)
{
  uint64_t v10 = *(void *)(a4 + 440);
  uint64_t v9 = *(void *)(a4 + 448);
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0x8F5C28F5C28F5C29 * ((v9 - v10) >> 3);
    unsigned int v13 = 1;
    while (*(_DWORD *)(v10 + 200 * v11) != 4)
    {
      uint64_t v11 = v13;
      BOOL v14 = v12 > v13++;
      if (!v14)
      {
        uint64_t v15 = 0;
        goto LABEL_10;
      }
    }
    uint64_t v15 = *(unsigned int *)(v10 + 200 * v11 + 4);
    if (v15 == 1)
    {
      if (*(void *)(a4 + 232) != *(void *)(a4 + 224))
      {
        TSWPCoreTextTypesetter::pFilterEmphasisMarksForRuby(a1, a2, (void *)a4);
        uint64_t v10 = *(void *)(a4 + 440);
        uint64_t v9 = *(void *)(a4 + 448);
        unint64_t v12 = 0x8F5C28F5C28F5C29 * ((v9 - v10) >> 3);
      }
      uint64_t v15 = 1;
    }
LABEL_10:
    *a5 = 0.0;
    *a6 = 0.0;
    if (v9 != v10)
    {
      uint64_t v16 = (double *)(v10 + 8);
      double v17 = 0.0;
      unsigned int v18 = 1;
      do
      {
        if (*((_DWORD *)v16 - 2) == 4 && v17 < *v16) {
          double v17 = *v16;
        }
        v16 += 25;
        BOOL v14 = v12 > v18++;
      }
      while (v14);
      if (v9 != v10)
      {
        uint64_t v19 = 0;
        unsigned int v20 = 1;
        uint64_t v52 = a5;
        do
        {
          if (*(_DWORD *)(v10 + 200 * v19) != 4) {
            goto LABEL_34;
          }
          uint64_t v21 = v10 + 200 * v19;
          double v23 = *(double *)(v21 + 176);
          uint64_t v22 = v21 + 176;
          double v24 = *(double *)(v22 + 8);
          *(double *)(v22 - 16_Block_object_dispose(&STACK[0x560], 8) = v17;
          if (v23 != 0.0 || v24 != 0.0) {
            goto LABEL_34;
          }
          if ((*(unsigned char *)(a4 + 25) & 0x20) != 0)
          {
            double v29 = *(double *)(a4 + 128);
            double v27 = (v29 + *(double *)(a4 + 136)) * 0.5;
            if (v15 != 2)
            {
              double v27 = -v27 - v17;
              double v35 = v29 + v27 - *(double *)(v10 + 200 * v19 + 152);
              goto LABEL_30;
            }
            double v30 = a6;
            uint64_t v31 = v15;
            uint64_t v32 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
            uint64_t v33 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(const TSWPLayoutState *, TSWPTypesetterParamBlock *, TSWPLineFragment *, CGFloat &, CGFloat &)");
            objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 4344, @"Vertical below is not currently supported.");
            uint64_t v15 = v31;
            a6 = v30;
            a5 = v52;
            uint64_t v10 = *(void *)(a4 + 440);
            uint64_t v9 = *(void *)(a4 + 448);
          }
          else
          {
            double v25 = *(double *)(v10 + 200 * v19 + 152);
            if (v15 != 2)
            {
              double v34 = *(double *)(a4 + 128);
              double v27 = 0.0 - v34 - v17;
              double v35 = v34 + v27 - v25;
LABEL_30:
              double v36 = -v35;
              if (*a5 >= v36) {
                double v36 = *a5;
              }
              *a5 = v36;
              goto LABEL_33;
            }
            double v26 = *(double *)(a4 + 136);
            double v27 = v25 + v17 + v26 + 0.0;
            double v28 = *(double *)(v10 + 200 * v19 + 160) + v27 - v26;
            if (*a6 >= v28) {
              double v28 = *a6;
            }
            *a6 = v28;
          }
LABEL_33:
          *(void *)uint64_t v22 = 0;
          *(double *)(v22 + _Block_object_dispose(&STACK[0x560], 8) = v27;
LABEL_34:
          uint64_t v19 = v20;
          BOOL v14 = 0x8F5C28F5C28F5C29 * ((v9 - v10) >> 3) > v20++;
        }
        while (v14);
      }
    }
  }
  uint64_t v37 = *(void *)(a4 + 272);
  if (*(void *)(a4 + 280) != v37)
  {
    uint64_t v38 = 0;
    unsigned int v39 = 1;
    do
    {
      int v40 = *(_DWORD *)(v37 + 80 * v38 + 44);
      if (v40)
      {
        double v41 = *(double *)(v37 + 80 * v38 + 32);
        if (v40 == 3)
        {
          if ((*(unsigned char *)(a4 + 25) & 0x20) == 0)
          {
            double WavyLineHalfAmplitude = GetWavyLineHalfAmplitude(v41);
            double v41 = WavyLineHalfAmplitude + WavyLineHalfAmplitude;
          }
        }
        else if (v40 == 2)
        {
          double v41 = v41 * 3.0;
        }
        uint64_t v43 = v37 + 80 * v38;
        double v44 = *(double *)(v43 + 8);
        int v45 = *(_DWORD *)(v43 + 48);
        if (v45 == 1)
        {
          double v49 = v44 + v41 * -0.5;
          double v50 = *(double *)(a4 + 128);
          if (v49 < v50)
          {
            double v51 = -(v49 + v50);
            if (*a5 >= v51) {
              double v51 = *a5;
            }
            *a5 = v51;
          }
        }
        else if (v45 == 2)
        {
          double v46 = v44 + v41 * 0.5;
          double v47 = *(double *)(a4 + 136);
          if (v46 > v47)
          {
            double v48 = v46 - v47;
            if (*a6 >= v48) {
              double v48 = *a6;
            }
            *a6 = v48;
          }
        }
      }
      uint64_t v38 = v39;
      uint64_t v37 = *(void *)(a4 + 272);
      BOOL v14 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a4 + 280) - v37) >> 4) > v39++;
    }
    while (v14);
  }
}

void TSWPCoreTextTypesetter::pAdjustErasableBounds(TSWPCoreTextTypesetter *this, const TSWPLayoutState *a2, TSWPLineFragment *a3)
{
  CGFloat x = *((double *)a3 + 10);
  CGFloat y = *((double *)a3 + 11);
  CGFloat width = *((double *)a3 + 12);
  CGFloat height = *((double *)a3 + 13);
  long long __p = 0;
  size_t v76 = 0;
  uint64_t v78 = 0;
  if (*((void *)a3 + 29) != *((void *)a3 + 28))
  {
    double v9 = TSWPCoreTextTypesetter::pMaxRubyHeightAboveLineFragment((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    uint64_t v10 = *((void *)a3 + 6);
    uint64_t v12 = *((void *)a3 + 8);
    double v11 = *((double *)a3 + 9);
    double v13 = v9 + v11;
    double v14 = *((double *)a3 + 7) + v11 - (v9 + v11);
    unint64_t v15 = 1;
    if ((unint64_t)(v78 >> 4) > 1) {
      unint64_t v15 = v78 >> 4;
    }
    unint64_t v16 = v15;
    if (v15) {
      double v17 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)&v78, v15);
    }
    else {
      double v17 = 0;
    }
    *(void *)double v17 = v10;
    v17[1] = v14;
    *((void *)v17 + 2) = v12;
    v17[3] = v13;
    long long __p = v17;
    uint64_t v78 = (uint64_t)&v17[4 * v16];
    size_t v76 = v17 + 4;
  }
  uint64_t v18 = *((void *)a3 + 6);
  double v19 = *((double *)a3 + 7);
  uint64_t v20 = *((void *)a3 + 8);
  double v21 = TSWPLayoutChore::calculateBaselineOffsetWithHeightInfo((double *)a3 + 14, (uint64_t)a2) + v19;
  if ((*((unsigned char *)a3 + 25) & 0x20) != 0)
  {
    double v22 = *(double *)&gSpellDotHeight;
    double v19 = floor(v21 - *((double *)a3 + 16)) + *(double *)&gSpellDotHeight * -0.5;
  }
  else
  {
    double v22 = floor(v21) + *(double *)&gSpellDotHeight + *(double *)&gSpellDotHeight * 0.5 - v19;
  }
  double v23 = v76;
  if ((unint64_t)v76 >= v78)
  {
    double v25 = __p;
    uint64_t v26 = ((char *)v76 - (char *)__p) >> 5;
    unint64_t v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 59) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v78 - (void)__p;
    if ((v78 - (uint64_t)__p) >> 4 > v27) {
      unint64_t v27 = v28 >> 4;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      double v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)&v78, v29);
      double v25 = __p;
      double v23 = v76;
    }
    else
    {
      double v30 = 0;
    }
    uint64_t v31 = (double *)&v30[32 * v26];
    *(void *)uint64_t v31 = v18;
    v31[1] = v19;
    uint64_t v32 = &v30[32 * v29];
    *((void *)v31 + 2) = v20;
    v31[3] = v22;
    unint64_t v24 = (unint64_t)(v31 + 4);
    if (v23 == v25)
    {
      double v34 = (char *)v31;
    }
    else
    {
      do
      {
        long long v33 = *((_OWORD *)v23 - 1);
        double v34 = (char *)(v31 - 4);
        *((_OWORD *)v31 - 2) = *((_OWORD *)v23 - 2);
        *((_OWORD *)v31 - 1) = v33;
        v23 -= 4;
        v31 -= 4;
      }
      while (v23 != v25);
    }
    long long __p = (double *)v34;
    uint64_t v78 = (uint64_t)v32;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *(void *)size_t v76 = v18;
    v76[1] = v19;
    unint64_t v24 = (unint64_t)(v76 + 4);
    *((void *)v76 + 2) = v20;
    v76[3] = v22;
  }
  double v35 = TSWPLayoutChore::calculateBaselineOffsetWithHeightInfo((double *)a3 + 14, (uint64_t)a2);
  double v36 = *((double *)a3 + 9);
  uint64_t v37 = *((void *)a3 + 55);
  uint64_t v38 = *((void *)a3 + 56) - v37;
  if (v38)
  {
    unint64_t v39 = 0x8F5C28F5C28F5C29 * (v38 >> 3);
    int v40 = (double *)(v37 + 184);
    double v41 = 0.0;
    unsigned int v42 = 1;
    double v43 = 0.0;
    double v44 = 0.0;
    do
    {
      int v45 = *((_DWORD *)v40 - 46);
      if (v45 == 6)
      {
        double v48 = *(double *)(*((void *)v40 - 13) + 24) * 0.5;
        if (v41 < *v40 - v35 + *(v40 - 3) + v48) {
          double v41 = *v40 - v35 + *(v40 - 3) + v48;
        }
      }
      else if (v45 == 4)
      {
        double v46 = *v40;
        if (*((_DWORD *)v40 - 45) == 1)
        {
          double v47 = -(v35 + v46 - *(v40 - 4));
          if (v44 < v47) {
            double v44 = v47;
          }
        }
        else
        {
          double v49 = v46 - v35 + *(v40 - 3);
          if (v43 < v49) {
            double v43 = v49;
          }
        }
      }
      v40 += 25;
    }
    while (v39 > v42++);
  }
  else
  {
    double v44 = 0.0;
    double v43 = 0.0;
    double v41 = 0.0;
  }
  uint64_t v51 = *((void *)a3 + 6);
  uint64_t v52 = *((void *)a3 + 8);
  double v53 = *((double *)a3 + 7) + v36 - (v36 + v44);
  if (v41 >= v43) {
    double v54 = v41;
  }
  else {
    double v54 = v43;
  }
  double v55 = v36 + v44 + v54;
  uint64_t v56 = (double *)v24;
  if (v24 >= v78)
  {
    double v58 = __p;
    uint64_t v59 = (uint64_t)(v24 - (void)__p) >> 5;
    unint64_t v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 59) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v61 = v78 - (void)__p;
    if ((v78 - (uint64_t)__p) >> 4 > v60) {
      unint64_t v60 = v61 >> 4;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v62 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v62 = v60;
    }
    if (v62)
    {
      uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)&v78, v62);
      double v58 = __p;
      uint64_t v56 = (double *)v24;
    }
    else
    {
      uint64_t v63 = 0;
    }
    double v64 = (double *)&v63[32 * v59];
    *(void *)double v64 = v51;
    v64[1] = v53;
    double v65 = &v63[32 * v62];
    *((void *)v64 + 2) = v52;
    v64[3] = v55;
    double v57 = (char *)(v64 + 4);
    if (v56 == v58)
    {
      double v67 = (char *)v64;
    }
    else
    {
      do
      {
        long long v66 = *((_OWORD *)v56 - 1);
        double v67 = (char *)(v64 - 4);
        *((_OWORD *)v64 - 2) = *((_OWORD *)v56 - 2);
        *((_OWORD *)v64 - 1) = v66;
        v56 -= 4;
        v64 -= 4;
      }
      while (v56 != v58);
    }
    long long __p = (double *)v67;
    uint64_t v78 = (uint64_t)v65;
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    *(void *)unint64_t v24 = v51;
    *(double *)(v24 + _Block_object_dispose(&STACK[0x560], 8) = v53;
    double v57 = (char *)(v24 + 32);
    *(void *)(v24 + 16) = v52;
    *(double *)(v24 + 24) = v55;
  }
  size_t v77 = v57;
  for (uint64_t i = __p; i != (double *)v57; i += 4)
  {
    double v69 = i[3];
    if (v69 != INFINITY)
    {
      double v70 = *i;
      uint64_t v71 = *((void *)i + 1);
      uint64_t v72 = *((void *)i + 2);
      v79.origin.CGFloat x = x;
      v79.origin.CGFloat y = y;
      v79.size.CGFloat width = width;
      v79.size.CGFloat height = height;
      CGRect v80 = CGRectUnion(v79, *(CGRect *)(&v69 - 3));
      CGFloat x = v80.origin.x;
      CGFloat y = v80.origin.y;
      CGFloat width = v80.size.width;
      CGFloat height = v80.size.height;
      double v57 = v77;
    }
  }
  double v73 = (*((double *)a3 + 16) + *((double *)a3 + 17)) * 0.25;
  if ((*((_DWORD *)a3 + 6) & 0x40000) != 0) {
    double v73 = v73 + 50.0;
  }
  CGFloat v74 = -v73;
  v81.origin.CGFloat x = x;
  v81.origin.CGFloat y = y;
  v81.size.CGFloat width = width;
  v81.size.CGFloat height = height;
  *(CGRect *)((char *)a3 + 80) = CGRectInset(v81, v74, v74);
  if (__p) {
    operator delete(__p);
  }
}

void sub_2234FA99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

double TSWPLayoutChore::calculateBaselineOffsetWithHeightInfo(double *a1, uint64_t a2)
{
  double v2 = *a1;
  if (*(_DWORD *)(a2 + 256) == 2) {
    return v2 + *(double *)(a2 + 296) * *(double *)(a2 + 264);
  }
  else {
    return v2 + a1[4] + fmax(a1[2], a1[1]);
  }
}

void TSWPCoreTextTypesetter::pCalcHeightInfo(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 + 200);
  uint64_t v11 = *(unsigned int *)(a1 + 108);
  if (v11 > 1)
  {
    uint64_t v12 = (unint64_t *)(*(void *)(a1 + 120) + 104);
    uint64_t v13 = 1;
    while (1)
    {
      unint64_t v14 = *v12;
      v12 += 13;
      if (v14 > a4) {
        break;
      }
      if (v11 == ++v13) {
        goto LABEL_7;
      }
    }
    LODWORD(v11) = v13;
  }
LABEL_7:
  unsigned int v15 = v11 - 1;
  double v16 = *(double *)(a2 + 520);
  double v17 = *(double *)(a2 + 528);
  double v18 = *(double *)(a2 + 544);
  if (*(double *)(a2 + 536) == 0.0) {
    double v19 = 1.0;
  }
  else {
    double v19 = *(double *)(a2 + 536);
  }
  double v20 = TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(a1, a2, a3, (int)v11 - 1, a4, a5, *(double *)(a2 + 520), *(double *)(a2 + 528), v19, *(double *)(a2 + 544));
  if ((*(unsigned char *)(v10 + 24) & 0x20) != 0) {
    double v20 = TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(a1, a2, a3, v15, a4, a5, v16, v17, v19, v18);
  }
  CGFloat v24 = v20;
  CGFloat v25 = v21;
  CGFloat v26 = v22;
  CGFloat v27 = v23;
  *(double *)(a1 + 184) = *(double *)(a3 + 192) - fmax(*(double *)(a1 + 168), *(double *)(a1 + 160));
  long long v28 = *(_OWORD *)(a1 + 152);
  long long v29 = *(_OWORD *)(a1 + 168);
  long long v30 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v10 + 144) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v10 + 160) = v30;
  *(_OWORD *)(v10 + 1++*((_WORD *)this + 12) = v28;
  *(_OWORD *)(v10 + 12_Block_object_dispose(&STACK[0x560], 8) = v29;
  v32.size.CGFloat height = TSWPLineFragment::heightForHeightInfo((double *)v10, *(_DWORD *)(a2 + 256), 0, *(double *)(a2 + 296));
  *(CGFloat *)(v10 + 72) = v32.size.height;
  v32.origin.CGFloat x = *(CGFloat *)(v10 + 48);
  v32.origin.CGFloat y = *(CGFloat *)(v10 + 56);
  v32.size.CGFloat width = *(CGFloat *)(v10 + 64);
  v31.origin.CGFloat x = v24;
  v31.origin.CGFloat y = v25;
  v31.size.CGFloat width = v26;
  v31.size.CGFloat height = v27;
  *(CGRect *)(v10 + 80) = CGRectUnion(v31, v32);
}

double TSWPLineFragment::heightForHeightInfo(double *a1, int a2, char a3, double a4)
{
  double v4 = a1[14];
  double v5 = a1[20];
  if (a2 == 2)
  {
    double v9 = v4 + a4 + v5;
  }
  else
  {
    double v7 = a1[17];
    double v6 = a1[18];
    double v8 = a1[16];
    double v9 = v5 + v4 + a1[19] + v7 + v6 + fmax(a1[15], v8);
    if (a2 == 1)
    {
      double v9 = fmax(v9, a4);
    }
    else if (!a2 && a4 > 1.0 && (a3 & 1) == 0)
    {
      double v9 = v9 + (a4 + -1.0) * (v6 + v8 + v7);
    }
  }
  if (v9 <= 0.0)
  {
    uint64_t v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat TSWPLineFragment::heightForHeightInfo(TSWPLineSpacingMode, CGFloat, BOOL) const");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3039, @"bad lineheight");
  }
  return v9;
}

void TSWPLineFragment::adjustBreakLine(TSWPLineFragment *this)
{
  uint64_t v2 = *((void *)this + 58);
  if (v2) {
    *(double *)(v2 + _Block_object_dispose(&STACK[0x560], 8) = (*((double *)this + 17) - *((double *)this + 16)) * 0.5;
  }
  uint64_t v3 = *((void *)this + 56) - *((void *)this + 55);
  if (v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0x8F5C28F5C28F5C29 * (v3 >> 3);
    do
    {
      uint64_t v7 = *((void *)this + 55);
      if (*(_DWORD *)(v7 + 200 * v4) == 2)
      {
        uint64_t v8 = v7 + 200 * v4;
        uint64_t v10 = *(void *)(v8 + 104);
        double v9 = (void *)(v8 + 104);
        uint64_t v11 = v9 + 1;
        if ((v9[1] - v10) >> 4 != (uint64_t)(*(v9 - 5) - *(v9 - 6)) >> 1)
        {
          uint64_t v12 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
          uint64_t v13 = [NSString stringWithUTF8String:"void TSWPLineFragment::adjustBreakLine()"];
          objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3191, @"invisibles count mismatch");
        }
        int v14 = *((_DWORD *)this + 6);
        if ((v14 & 0x800) != 0 && *v11 != *v9)
        {
          uint64_t v15 = 0;
          double v16 = *(double *)(*v11 - 16);
          double v17 = &word_26AB70428;
          while (1)
          {
            int v18 = (unsigned __int16)*v17;
            v17 += 20;
            if (v18 == *(unsigned __int16 *)(*(v9 - 5) - 2)) {
              break;
            }
            if (++v15 == 10)
            {
              double v19 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
              uint64_t v20 = [NSString stringWithUTF8String:"void TSWPLineFragment::adjustBreakLine()"];
              objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3207, @"Failed to find glyph index");
              int v14 = *((_DWORD *)this + 6);
              LODWORD(v15) = 10;
              break;
            }
          }
          double v21 = v16 + *(double *)(*((void *)this + 24) + 8);
          double v22 = *((double *)this + 6);
          double v24 = *((double *)this + 8);
          if ((v14 & 0x1000) != 0)
          {
            double v29 = fmin(v21, 0.0);
            double v28 = v24 - v29;
            double v22 = v22 + v29;
          }
          else
          {
            if (v15 <= 9) {
              unsigned int v26 = v15;
            }
            else {
              unsigned int v26 = 3;
            }
            double v27 = v21 + *((double *)&gInvisibles + 5 * v26 + 1);
            if (v24 >= v27) {
              double v28 = *((double *)this + 8);
            }
            else {
              double v28 = v27;
            }
          }
          uint64_t v23 = *((void *)this + 7);
          uint64_t v25 = *((void *)this + 9);
          *(CGRect *)((char *)this + 80) = CGRectUnion(*(CGRect *)((char *)this + 80), *(CGRect *)&v22);
        }
      }
      uint64_t v4 = ++v5;
    }
    while (v6 > v5);
  }
}

TSWPLineFragment *TSWPLineFragment::setTypesetterPos(TSWPLineFragment *this, double a2, double a3)
{
  *((double *)this + 50) = a2;
  *((double *)this + 51) = a3;
  return this;
}

TSWPLineFragment *TSWPLineFragment::saveLayoutState(TSWPLineFragment *this)
{
  int v1 = this;
  *((_DWORD *)this + 120) = *((_DWORD *)this + 6);
  if (*((void *)this + 24) != *((void *)this + 25))
  {
    uint64_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    this = (TSWPLineFragment *)objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3148, @"bad starting line fragment state: line vector");
  }
  if (*((void *)v1 + 55) != *((void *)v1 + 56))
  {
    uint64_t v4 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    this = (TSWPLineFragment *)objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3149, @"bad starting line fragment state: adornments");
  }
  if (*((void *)v1 + 34) != *((void *)v1 + 35))
  {
    unint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    this = (TSWPLineFragment *)objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3150, @"bad starting line fragment state: _underlines positions");
  }
  if (*((void *)v1 + 37) != *((void *)v1 + 38))
  {
    uint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v9 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    this = (TSWPLineFragment *)objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3151, @"bad starting line fragment state: _strikesthrough positions");
  }
  if (*((void *)v1 + 40) != *((void *)v1 + 41))
  {
    uint64_t v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    this = (TSWPLineFragment *)objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3152, @"bad starting line fragment state: _textBackgrounds positions");
  }
  if (*((void *)v1 + 43) != *((void *)v1 + 44))
  {
    uint64_t v12 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v13 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    this = (TSWPLineFragment *)objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3153, @"bad starting line fragment state: _textHighlights positions");
  }
  if (*((void *)v1 + 58))
  {
    int v14 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v15 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    this = (TSWPLineFragment *)objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3154, @"expected nil value for '%s'", "_breakLine");
  }
  if (*((void *)v1 + 64))
  {
    double v16 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v17 = [NSString stringWithUTF8String:"void TSWPLineFragment::saveLayoutState()"];
    return (TSWPLineFragment *)objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3155, @"expected nil value for '%s'", "_paragraphString");
  }
  return this;
}

BOOL TSWPLineFragment::shareLineRefs(TSWPLineFragment *this, const TSWPLineFragment *a2)
{
  if (!a2) {
    return 0;
  }
  if (*(void *)this != *(void *)a2
    || *((void *)this + 1) != *((void *)a2 + 1)
    || *((void *)a2 + 25) == *((void *)a2 + 24))
  {
    return 0;
  }
  BOOL result = 0;
  if ((*((_DWORD *)a2 + 6) & 4) == 0
    && ((*((_DWORD *)a2 + 6) & 0x2000) == 0) != (*((unsigned char *)this + 25) & 0x20) >> 5)
  {
    v5.origin.CGFloat x = *((CGFloat *)a2 + 6);
    v5.origin.CGFloat y = *((CGFloat *)a2 + 7);
    v5.size.CGFloat width = *((CGFloat *)a2 + 8);
    v5.size.CGFloat height = *((CGFloat *)a2 + 9);
    BOOL result = CGRectEqualToRect(v5, *(CGRect *)((char *)this + 48));
    if (result)
    {
      if (this != a2) {
        std::vector<TSWPLineRef>::__assign_with_size[abi:ne180100]<TSWPLineRef*,TSWPLineRef*>((uint64_t)this + 192, *((void *)a2 + 24), *((void *)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 4));
      }
      *((void *)this + 27) = *((void *)a2 + 27);
      return 1;
    }
  }
  return result;
}

uint64_t TSKMainThreadRunLoopHash()
{
  objc_opt_class();
  unsigned int v0 = (void *)TSUDynamicCast();

  return [v0 hash];
}

unint64_t TSWPParagraphAttributeArray::paragraphRangeForCharRange(TSWPParagraphAttributeArray *this, _NSRange a2)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  unint64_t v5 = TSWPAttributeArray::characterCount((TSWPAttributeArray *)this);
  unint64_t v6 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)this, location);
  if (length)
  {
    NSUInteger v7 = location + length;
    if (v7 != v5 || (IsParagraphBreakingCharacter([this->var5 characterAtIndex:v5 - 1]) & 1) == 0) {
      unint64_t v5 = v7 - 1;
    }
  }
  else
  {
    unint64_t v5 = location;
  }
  TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)this, v5);
  return v6;
}

uint64_t TSWPLineFragment::truncatedCharIndex(TSWPLineFragment *this)
{
  if ((*((unsigned char *)this + 26) & 0x80) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  CFArrayRef GlyphRuns = CTLineGetGlyphRuns(**((CTLineRef **)this + 24));
  if (!GlyphRuns) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  CFArrayRef v3 = GlyphRuns;
  CFIndex Count = CFArrayGetCount(GlyphRuns);
  if (Count < 1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    ValueAtIndeCGFloat x = (const __CTRun *)CFArrayGetValueAtIndex(v3, v6);
    CFDictionaryRef Attributes = CTRunGetAttributes(ValueAtIndex);
    if (CFDictionaryContainsKey(Attributes, @"__TSWPTruncationKey")) {
      break;
    }
    if (v5 == ++v6) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  CFIndex location = CTRunGetStringRange(ValueAtIndex).location;
  if (location == 0x7FFFFFFFFFFFFFFFLL) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  CFIndex v11 = location;
  uint64_t v12 = (void *)*((void *)this + 23);

  return [v12 charIndexMappedToStorage:v11];
}

void __TSWPParagraphBreakingCharacterSet_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x263F089C0]);
  objc_msgSend(v0, "addCharactersInRange:", 10, 1);
  objc_msgSend(v0, "addCharactersInRange:", 13, 1);
  objc_msgSend(v0, "addCharactersInRange:", 8233, 1);
  objc_msgSend(v0, "addCharactersInRange:", 11, 1);
  objc_msgSend(v0, "addCharactersInRange:", 5, 1);
  objc_msgSend(v0, "addCharactersInRange:", 12, 1);
  objc_msgSend(v0, "addCharactersInRange:", 6, 1);
  objc_msgSend(v0, "addCharactersInRange:", 15, 1);
  objc_msgSend(v0, "addCharactersInRange:", 4, 1);
  TSWPParagraphBreakingCharacterSet::sParagraphBreakingCharacterSet = [v0 copy];
}

void sub_2234FBCC8(_Unwind_Exception *exception_object)
{
  CFArrayRef v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(void *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSDCGContextHasBackgroundsSuppressed(uint64_t a1)
{
  uint64_t v4 = 0;
  CFIndex v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextHasBackgroundsSuppressed_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2234FBDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TSDAccessCGContextInfoDictionaryWithBlock(uint64_t result, int a2, uint64_t a3)
{
  if (a3)
  {
    int v5 = result;
    if (TSDAccessCGContextInfoDictionaryWithBlock_onceToken != -1) {
      dispatch_once(&TSDAccessCGContextInfoDictionaryWithBlock_onceToken, &__block_literal_global_25);
    }
    if (v5)
    {
      pthread_rwlock_wrlock(&TSDAccessCGContextInfoDictionaryWithBlock_rwlock);
      id v6 = (id)TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap;
      if (!TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap && a2)
      {
        id v6 = objc_alloc_init(MEMORY[0x263F7C8A8]);
        TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap = (uint64_t)v6;
      }
    }
    else
    {
      pthread_rwlock_rdlock(&TSDAccessCGContextInfoDictionaryWithBlock_rwlock);
      id v6 = (id)TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap;
    }
    if (v6) {
      (*(void (**)(uint64_t))(a3 + 16))(a3);
    }
    return pthread_rwlock_unlock(&TSDAccessCGContextInfoDictionaryWithBlock_rwlock);
  }
  return result;
}

void sub_2234FC404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_2234FCD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void **a38)
{
  a38 = (void **)&a22;
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:nn180100](&a38);
  _Unwind_Resume(a1);
}

void std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<TSWPAdornmentLine>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, *v2);
    CFArrayRef v3 = **a1;
    operator delete(v3);
  }
}

CFIndex TSWPLineFragment::glyphCount(TSWPLineFragment *this)
{
  uint64_t v1 = (CTLineRef *)*((void *)this + 24);
  if (*((CTLineRef **)this + 25) == v1) {
    return 0;
  }
  else {
    return CTLineGetGlyphCount(*v1);
  }
}

double TSWPLineFragment::textRect(TSWPLineFragment *this, char a2)
{
  unint64_t v4 = *((void *)this + 1) + *(void *)this + ((int)(*((_DWORD *)this + 6) << 20) >> 31);
  if (*(void *)this <= v4) {
    NSUInteger v5 = *((void *)this + 1) + *(void *)this + ((int)(*((_DWORD *)this + 6) << 20) >> 31);
  }
  else {
    NSUInteger v5 = *(void *)this;
  }
  if (*(void *)this >= v4) {
    v6.CFIndex location = *((void *)this + 1) + *(void *)this + ((int)(*((_DWORD *)this + 6) << 20) >> 31);
  }
  else {
    v6.CFIndex location = *(void *)this;
  }
  v6.NSUInteger length = v5 - v6.location;
  TSWPLineFragment::rectsForLineRange(this, v6, 0, a2, 1, 1, (double **)__p);
  TSWPUnionRects((CGRect **)__p);
  double x = v7;
  CGFloat y = v9;
  CGFloat width = v11;
  CGFloat height = v13;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v15 = *((_DWORD *)this + 6);
  if ((v15 & 2) == 0
    || (uint64_t v16 = *((void *)this + 24), v17 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 25) - v16) >> 4), v17 < 2))
  {
LABEL_14:
    if ((v15 & 0x800000) == 0) {
      return x;
    }
    goto LABEL_15;
  }
  uint64_t v18 = v16 + 48;
  unint64_t v19 = v17 - 1;
  while ((*(unsigned char *)(v18 + 40) & 2) == 0)
  {
    v18 += 48;
    if (!--v19) {
      goto LABEL_14;
    }
  }
  CGFloat v24 = *(double *)(v18 + 8);
  v31.size.CGFloat width = CTLineGetTypographicBounds(*(CTLineRef *)v18, 0, 0, 0);
  v28.origin.double x = x;
  v28.origin.CGFloat y = y;
  v28.size.CGFloat width = width;
  v28.size.CGFloat height = height;
  v31.origin.double x = v24;
  v31.origin.CGFloat y = y;
  v31.size.CGFloat height = height;
  CGRect v29 = CGRectUnion(v28, v31);
  double x = v29.origin.x;
  CGFloat y = v29.origin.y;
  CGFloat width = v29.size.width;
  CGFloat height = v29.size.height;
  if ((*((_DWORD *)this + 6) & 0x800000) != 0)
  {
LABEL_15:
    uint64_t v20 = *((void *)this + 24);
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 25) - v20) >> 4);
    if (v21 >= 2)
    {
      uint64_t v22 = v20 + 48;
      unint64_t v23 = v21 - 1;
      while ((*(unsigned char *)(v22 + 40) & 4) == 0)
      {
        v22 += 48;
        if (!--v23) {
          return x;
        }
      }
      CGFloat v25 = *(double *)(v22 + 8);
      v32.size.CGFloat width = CTLineGetTypographicBounds(*(CTLineRef *)v22, 0, 0, 0);
      v30.origin.double x = x;
      v30.origin.CGFloat y = y;
      v30.size.CGFloat width = width;
      v30.size.CGFloat height = height;
      v32.origin.double x = v25;
      v32.origin.CGFloat y = y;
      v32.size.CGFloat height = height;
      *(void *)&double x = (unint64_t)CGRectUnion(v30, v32);
    }
  }
  return x;
}

void sub_2234FD674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSUInteger TSWPLineFragment::rectsForLineRange@<X0>(TSWPLineFragment *this@<X0>, _NSRange a2@<0:X1, 8:X2>, NSArray **a3@<X6>, char a4@<W3>, char a5@<W4>, int a6@<W5>, double **a7@<X8>)
{
  if (a2.location < *(void *)this || a2.location + a2.length > *((void *)this + 1) + *(void *)this)
  {
    uint64_t v16 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRectVector TSWPLineFragment::rectsForLineRange(NSRange, BOOL, BOOL, BOOL, NSArray **) const");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 237, @"Bad range");
  }
  if (a3) {
    uint64_t v100 = (NSArray *)(id)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:1];
  }
  else {
    uint64_t v100 = 0;
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  if (a4) {
    double v18 = *((double *)this + 9);
  }
  else {
    double v18 = *((double *)this + 14) + *((double *)this + 18) + *((double *)this + 16) + *((double *)this + 17);
  }
  double v19 = *((double *)this + 7);
  if ((a5 & 1) == 0)
  {
    double v20 = *((double *)this + 14);
    double v19 = v19 + v20;
    double v18 = v18 - v20;
  }
  if (!a2.length)
  {
    double v21 = TSWPLineFragment::wpOffsetForCharIndex(this, a2.location, 0, 1, 0);
    double v22 = 0.0;
    goto LABEL_102;
  }
  double v21 = *((double *)this + 6);
  double v22 = *((double *)this + 8);
  uint64_t v101 = *((void *)this + 24);
  if (*((void *)this + 25) == v101) {
    goto LABEL_102;
  }
  CGFloat descent = 0.0;
  ascent[0] = 0.0;
  if (a6)
  {
    if (*((void *)this + 29) != *((void *)this + 28))
    {
      CTLineGetTypographicBounds(*(CTLineRef *)v101, ascent, &descent, 0);
      uint64_t v23 = *((void *)this + 28);
      if (v23 != *((void *)this + 29))
      {
        double v97 = *(double *)(v101 + 16) - ascent[0];
        do
        {
          double TypographicBounds = CTLineGetTypographicBounds(*(CTLineRef *)v23, ascent, &descent, 0);
          CGFloat x = *(double *)(v23 + 8);
          double height = ascent[0] + descent;
          if (v23 == *((void *)this + 28))
          {
            double y = *(double *)(v23 + 16) - ascent[0];
          }
          else
          {
            v109.origin.CGFloat x = v10;
            v109.origin.double y = y;
            v109.size.CGFloat width = v9;
            v109.size.double height = v8;
            double v26 = *(double *)(v23 + 16) - ascent[0];
            CGRect v110 = CGRectUnion(v109, *(CGRect *)&x);
            CGFloat x = v110.origin.x;
            double y = v110.origin.y;
            double TypographicBounds = v110.size.width;
            double height = v110.size.height;
          }
          v23 += 48;
          CGFloat v8 = height;
          CGFloat v9 = TypographicBounds;
          CGFloat v10 = x;
        }
        while (v23 != *((void *)this + 29));
        if (y < v97)
        {
          double v28 = v97 - y - *((double *)this + 18);
          double v19 = v19 - v28;
          double v18 = v18 + v28;
        }
      }
    }
  }
  long long __p = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  TSWPLineFragment::fillWritingDirectionRuns((uint64_t *)this, &__p);
  CGRect v29 = (char *)__p;
  if (__p != v104)
  {
    uint64_t v30 = 0;
    unsigned int v31 = 0;
    double v96 = a7;
    unint64_t v98 = a7 + 2;
    do
    {
      NSRange v32 = NSIntersectionRange(a2, *(NSRange *)&v29[40 * v30 + 16]);
      if (v32.length)
      {
        CharIndexData = (uint64_t *)TSWPLineFragment::getCharIndexData(this);
        uint64_t v34 = *CharIndexData;
        if (CharIndexData[1] == *CharIndexData)
        {
          double v39 = -INFINITY;
          double v40 = -INFINITY;
LABEL_40:
          double v41 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
          uint64_t v42 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRectVector TSWPLineFragment::rectsForLineRange(NSRange, BOOL, BOOL, BOOL, NSArray **) const");
          [v41 handleFailureInFunction:v42, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 364, @"Failed to set start and end locations for sub-range %@", NSStringFromRange(v32) file lineNumber description];
        }
        else
        {
          double v35 = a3;
          uint64_t v36 = 0;
          char v37 = 0;
          unint64_t v38 = 0;
          double v39 = -INFINITY;
          double v40 = -INFINITY;
          do
          {
            if (*(void *)(v34 + v36 + 56) == v30)
            {
              if (NSIntersectionRange(*(NSRange *)(v34 + v36), v32).length)
              {
                uint64_t v34 = *CharIndexData;
                if ((v37 & 1) == 0) {
                  double v39 = *(double *)(v34 + v36 + 32);
                }
                double v40 = *(double *)(v34 + v36 + 40);
                char v37 = 1;
              }
              else
              {
                if (v37)
                {
                  a3 = v35;
                  a7 = v96;
                  goto LABEL_41;
                }
                char v37 = 0;
                uint64_t v34 = *CharIndexData;
              }
            }
            ++v38;
            v36 += 64;
          }
          while (v38 < (CharIndexData[1] - v34) >> 6);
          a3 = v35;
          a7 = v96;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
        }
LABEL_41:
        int v43 = *((_DWORD *)this + 6);
        if ((v43 & 0x800) != 0)
        {
          unint64_t v44 = v32.location + v32.length;
          if (v32.location + v32.length == *((void *)this + 1) + *(void *)this)
          {
            if ((v43 & 0x1000) != 0) {
              double v39 = TSWPLineFragment::wpOffsetForCharIndex(this, v44, 0, 1, 0)
            }
                  - *(double *)(v101 + 8)
                  - *((double *)this + 6);
            else {
              double v40 = TSWPLineFragment::wpOffsetForCharIndex(this, v44, 0, 1, 0)
            }
                  - *(double *)(v101 + 8)
                  - *((double *)this + 6);
          }
        }
        int v45 = *((_DWORD *)this + 6);
        if ((v45 & 0x2000000) != 0)
        {
          double v46 = *((double *)this + 6);
          double v47 = *(double *)(v101 + 8) + v46;
          if (v32.location == *(void *)this)
          {
            uint64_t v48 = *((void *)this + 7);
            uint64_t v49 = *((void *)this + 8);
            uint64_t v50 = *((void *)this + 9);
            if ((v45 & 0x1000) != 0) {
              double v40 = CGRectGetMaxX(*(CGRect *)&v46) - v47;
            }
            else {
              double v39 = CGRectGetMinX(*(CGRect *)&v46) - v47;
            }
          }
          if (v32.location + v32.length == *((void *)this + 1) + *(void *)this)
          {
            uint64_t v51 = *((void *)this + 6);
            uint64_t v52 = *((void *)this + 7);
            uint64_t v53 = *((void *)this + 8);
            uint64_t v54 = *((void *)this + 9);
            if ((*((unsigned char *)this + 25) & 0x10) != 0) {
              double v39 = CGRectGetMinX(*(CGRect *)&v51) - v47;
            }
            else {
              double v40 = CGRectGetMaxX(*(CGRect *)&v51) - v47;
            }
          }
        }
        double v21 = v39 + *(double *)(v101 + 8) + *((double *)this + 6);
        double v22 = v40 - v39;
        if (a6)
        {
          uint64_t v55 = *((void *)this + 28);
          if (*((void *)this + 29) != v55)
          {
            uint64_t v56 = v55 + 8;
            do
            {
              uint64_t v57 = v56 - 8;
              double v58 = CTLineGetTypographicBounds(*(CTLineRef *)(v56 - 8), 0, 0, 0);
              if (NSIntersectionRange(v32, *(NSRange *)(v56 + 16)).length)
              {
                v111.origin.CGFloat x = v21;
                v111.origin.double y = v19;
                v111.size.CGFloat width = v22;
                v111.size.double height = v18;
                double v59 = *(double *)v56 + *((double *)this + 6);
                if (v59 < CGRectGetMinX(v111))
                {
                  v112.origin.CGFloat x = v21;
                  v112.origin.double y = v19;
                  v112.size.CGFloat width = v22;
                  v112.size.double height = v18;
                  double v22 = CGRectGetMaxX(v112) - v59;
                  double v21 = v59;
                }
                v113.origin.CGFloat x = v21;
                v113.origin.double y = v19;
                v113.size.CGFloat width = v22;
                v113.size.double height = v18;
                double v60 = v58 + v59;
                if (v60 > CGRectGetMaxX(v113))
                {
                  v114.origin.CGFloat x = v21;
                  v114.origin.double y = v19;
                  v114.size.CGFloat width = v22;
                  v114.size.double height = v18;
                  double v22 = v60 - CGRectGetMinX(v114);
                }
              }
              v56 += 48;
            }
            while (v57 + 48 != *((void *)this + 29));
          }
        }
        unint64_t v62 = *a7;
        uint64_t v61 = a7[1];
        if (*a7 == v61
          || (double MaxX = CGRectGetMaxX(*(CGRect *)(v61 - 4)),
              v115.origin.CGFloat x = v21,
              v115.origin.double y = v19,
              v115.size.CGFloat width = v22,
              v115.size.double height = v18,
              double MinX = CGRectGetMinX(v115),
              unint64_t v62 = a7[1],
              vabdd_f64(MaxX, MinX) >= 0.00999999978))
        {
          if ((unint64_t)v62 >= *v98)
          {
            double v67 = *a7;
            uint64_t v68 = ((char *)v62 - (char *)*a7) >> 5;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 59) {
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v70 = *v98 - (void)v67;
            if (v70 >> 4 > v69) {
              unint64_t v69 = v70 >> 4;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v71 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v69;
            }
            if (v71)
            {
              uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)v98, v71);
              double v67 = *a7;
              unint64_t v62 = a7[1];
            }
            else
            {
              uint64_t v72 = 0;
            }
            double v73 = (double *)&v72[32 * v68];
            *double v73 = v21;
            v73[1] = v19;
            v73[2] = v22;
            v73[3] = v18;
            if (v62 == v67)
            {
              size_t v76 = &v72[32 * v68];
            }
            else
            {
              CGFloat v74 = &v72[32 * v68];
              do
              {
                long long v75 = *((_OWORD *)v62 - 1);
                size_t v76 = v74 - 32;
                *((_OWORD *)v74 - 2) = *((_OWORD *)v62 - 2);
                *((_OWORD *)v74 - 1) = v75;
                v62 -= 4;
                v74 -= 32;
              }
              while (v62 != v67);
            }
            long long v66 = v73 + 4;
            *a7 = (double *)v76;
            a7[1] = v73 + 4;
            a7[2] = (double *)&v72[32 * v71];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *unint64_t v62 = v21;
            v62[1] = v19;
            long long v66 = v62 + 4;
            v62[2] = v22;
            v62[3] = v18;
          }
          a7[1] = v66;
          if (a3) {
            -[NSArray addObject:](v100, "addObject:", objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", v32.location, v32.length));
          }
        }
        else
        {
          v116.origin.CGFloat x = v21;
          v116.origin.double y = v19;
          v116.size.CGFloat width = v22;
          v116.size.double height = v18;
          *((CGRect *)v62 - 1) = CGRectUnion(*(CGRect *)(v62 - 4), v116);
          if (a3)
          {
            v108.CFIndex location = objc_msgSend(-[NSArray lastObject](v100, "lastObject"), "rangeValue");
            NSRange v65 = NSUnionRange(v108, v32);
            -[NSArray setObject:atIndexedSubscript:](v100, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", v65.location, v65.length), -[NSArray count](v100, "count") - 1);
          }
        }
      }
      CGRect v29 = (char *)__p;
      uint64_t v30 = ++v31;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v104 - (unsigned char *)__p) >> 3) > v31);
    goto LABEL_100;
  }
  NSRange v77 = NSIntersectionRange(a2, *(NSRange *)this);
  if (v77.length)
  {
    int v78 = *((_DWORD *)this + 6);
    double v79 = 0.0;
    if ((v78 & 0x800) != 0)
    {
      unint64_t v80 = v77.location + v77.length;
      if (v77.location + v77.length == *((void *)this + 1) + *(void *)this)
      {
        if ((v78 & 0x1000) == 0)
        {
          double v81 = TSWPLineFragment::wpOffsetForCharIndex(this, v80, 0, 1, 0)
              - *(double *)(v101 + 8)
              - *((double *)this + 6);
LABEL_99:
          double v21 = v79 + *(double *)(v101 + 8) + *((double *)this + 6);
          double v22 = v81 - v79;
          goto LABEL_100;
        }
        double v79 = TSWPLineFragment::wpOffsetForCharIndex(this, v80, 0, 1, 0)
            - *(double *)(v101 + 8)
            - *((double *)this + 6);
      }
    }
    double v81 = 0.0;
    goto LABEL_99;
  }
LABEL_100:
  if (__p)
  {
    uint64_t v104 = __p;
    operator delete(__p);
  }
LABEL_102:
  CFCharacterSetRef v82 = *a7;
  if (*a7 == a7[1])
  {
    unint64_t v83 = (unint64_t)a7[2];
    if ((unint64_t)v82 >= v83)
    {
      uint64_t v85 = v83 - (void)v82;
      uint64_t v86 = v85 >> 4;
      if ((unint64_t)(v85 >> 4) <= 1) {
        uint64_t v86 = 1;
      }
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v87 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v86;
      }
      size_t v88 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)(a7 + 2), v87);
      uint64_t v89 = *a7;
      double v90 = a7[1];
      uint64_t v92 = &v88[4 * v91];
      *size_t v88 = v21;
      v88[1] = v19;
      v88[2] = v22;
      v88[3] = v18;
      CGFloat v84 = v88 + 4;
      if (v90 != v89)
      {
        uint64_t v93 = v88;
        do
        {
          long long v94 = *((_OWORD *)v90 - 1);
          size_t v88 = v93 - 4;
          *((_OWORD *)v93 - 2) = *((_OWORD *)v90 - 2);
          *((_OWORD *)v93 - 1) = v94;
          v90 -= 4;
          v93 -= 4;
        }
        while (v90 != v89);
      }
      *a7 = v88;
      a7[1] = v84;
      a7[2] = v92;
      if (v89) {
        operator delete(v89);
      }
    }
    else
    {
      *CFCharacterSetRef v82 = v21;
      v82[1] = v19;
      CGFloat v84 = v82 + 4;
      v82[2] = v22;
      v82[3] = v18;
    }
    a7[1] = v84;
  }
  NSUInteger result = [(NSArray *)v100 count];
  if (!result) {
    NSUInteger result = -[NSArray addObject:](v100, "addObject:", objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", a2.location, a2.length));
  }
  if (a3) {
    *a3 = v100;
  }
  return result;
}

void sub_2234FDFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  double v20 = *(void **)v18;
  if (*(void *)v18)
  {
    *(void *)(v18 + _Block_object_dispose(&STACK[0x560], 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void TSWPUnionRects(CGRect **a1)
{
  uint64_t v1 = *MEMORY[0x263F001A0];
  uint64_t v2 = *(void *)(MEMORY[0x263F001A0] + 8);
  uint64_t v3 = *(void *)(MEMORY[0x263F001A0] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F001A0] + 24);
  NSUInteger v5 = *a1;
  _NSRange v6 = a1[1];
  while (v5 != v6)
    *(CGRect *)&uint64_t v1 = CGRectUnion(*(CGRect *)&v1, *v5++);
}

uint64_t **std::__tree<std::__value_type<unsigned long,TSWPFontHeightCacheEntry>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,TSWPFontHeightCacheEntry>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,TSWPFontHeightCacheEntry>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  double v7 = a1 + 1;
  _NSRange v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        CGFloat v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        _NSRange v6 = *v9;
        double v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      _NSRange v6 = v9[1];
      if (!v6)
      {
        double v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    CGFloat v9 = a1 + 1;
LABEL_10:
    double v11 = (char *)operator new(0x70uLL);
    *((void *)v11 + 4) = **a4;
    *((void *)v11 + 13) = 0;
    *(_OWORD *)(v11 + 8_Block_object_dispose(&STACK[0x560], 8) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  NSUInteger v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  NSUInteger result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), NSUInteger v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            CGFloat v9 = (uint64_t **)a2[2];
          }
          else
          {
            CGFloat v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *CGFloat v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), NSUInteger v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *NSUInteger v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t __TSWPBundle_block_invoke()
{
  uint64_t result = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  TSWPBundle::bundle = result;
  return result;
}

void sub_2234FED10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TSPObjectContext;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2234FEE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TSPDataManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2234FEFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;
      objc_destroyWeak(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;
      objc_destroyWeak(v2 + 5);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t TSWPForegroundInit()
{
  uint64_t result = [MEMORY[0x263F08B88] isMainThread];
  if ((result & 1) == 0)
  {
    uint64_t v1 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void TSWPForegroundInit()"];
    uint64_t v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"];
    return [v1 handleFailureInFunction:v2 file:v3 lineNumber:427 description:@"TSWPForegroundInit should be called on the main thread"];
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2234FF898(_Unwind_Exception *a1)
{
  int v6 = v5;

  _Unwind_Resume(a1);
}

void sub_2234FF9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2234FFA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2234FFB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::IdentifierMap(uint64_t this)
{
  *(_WORD *)this = 1;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = this + 16;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  return this;
}

{
  *(_WORD *)this = 1;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = this + 16;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  return this;
}

EQKit::Config::Operator::Dictionary::IdentifierMap *EQKit::Config::Operator::Dictionary::IdentifierMap::IdentifierMap(EQKit::Config::Operator::Dictionary::IdentifierMap *this, const EQKit::Config::Operator::Dictionary::IdentifierMap *a2)
{
  *(_WORD *)this = *(_WORD *)a2;
  std::map<std::string,unsigned short>::map[abi:nn180100]((uint64_t *)this + 1, (const void ***)a2 + 1);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  return this;
}

void sub_2234FFBE8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v2, *(char **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>((uint64_t **)(a1 + 8), *(void **)(a2 + 8), (void *)(a2 + 16));
    std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 32), *(std::string **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  }
  return a1;
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v3 + 56);
  }
}

uint64_t *EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 40) - v2) >> 3) >= a2) {
      return (uint64_t *)(v2 + 24 * a2 - 24);
    }
  }
  {
    EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmptdouble y = 0;
    *(void *)algn_267FB73B8 = 0;
    qword_267FB73C0 = 0;
  }
  return &EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty;
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::add(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 4);
  uint64_t v5 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>((uint64_t)(a1 + 4), (const void **)a2);
  if (a1 + 8 != (unsigned __int16 *)v5) {
    return *(unsigned __int16 *)(v5 + 56);
  }
  uint64_t v6 = *a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  __int16 v12 = v6;
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = (std::__split_buffer<std::string>::pointer *)(a1 + 16);
  int v8 = (std::string *)*((void *)a1 + 5);
  if ((unint64_t)v8 >= *((void *)a1 + 6))
  {
    std::__split_buffer<std::string>::pointer v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, (long long *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:nn180100]<std::string const&>((uint64_t)v7, (long long *)a2);
    std::__split_buffer<std::string>::pointer v9 = v8 + 1;
  }
  *((void *)a1 + 5) = v9;
  ++*a1;
  return v6;
}

void sub_2234FFE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

EQKit::Config::Operator::Dictionary::Entry *EQKit::Config::Operator::Dictionary::Entry::Entry(EQKit::Config::Operator::Dictionary::Entry *this)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((void *)this + 3) = 0;
  bzero((char *)this + 48, 1uLL);
  return this;
}

{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((void *)this + 3) = 0;
  bzero((char *)this + 48, 1uLL);
  return this;
}

double EQKit::Config::Operator::Dictionary::Entry::Entry(EQKit::Config::Operator::Dictionary::Entry *this, const EQKit::Config::Operator::Dictionary::Entry *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  double result = *((double *)a2 + 5);
  *((double *)this + 5) = result;
  *((unsigned char *)this + 4_Block_object_dispose(&STACK[0x560], 8) = *((unsigned char *)a2 + 48);
  return result;
}

{
  double result;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  double result = *((double *)a2 + 5);
  *((double *)this + 5) = result;
  *((unsigned char *)this + 4_Block_object_dispose(&STACK[0x560], 8) = *((unsigned char *)a2 + 48);
  return result;
}

double EQKit::Config::Operator::Dictionary::Entry::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    double result = *(double *)(a2 + 40);
    *(double *)(a1 + 40) = result;
    *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = *(unsigned char *)(a2 + 48);
  }
  return result;
}

uint64_t EQKit::Config::Operator::Dictionary::Dictionary(uint64_t this)
{
  *(_WORD *)this = 1;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = this + 16;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 56) = this + 64;
  *(void *)(this + 8_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(this + 72) = 0;
  *(void *)(this + 80) = this + 88;
  *(void *)(this + 120) = 0;
  *(void *)(this + 1++*((_WORD *)this + 12) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 104) = this + 112;
  return this;
}

{
  *(_WORD *)this = 1;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = this + 16;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 56) = this + 64;
  *(void *)(this + 8_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(this + 72) = 0;
  *(void *)(this + 80) = this + 88;
  *(void *)(this + 120) = 0;
  *(void *)(this + 1++*((_WORD *)this + 12) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 104) = this + 112;
  return this;
}

void EQKit::Config::Operator::Dictionary::~Dictionary(EQKit::Config::Operator::Dictionary *this)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

unsigned __int16 *EQKit::Config::Operator::Dictionary::dictionaryFromURL(EQKit::Config::Operator::Dictionary *this, NSURL *a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  obuint64_t j = (id)[objc_alloc(MEMORY[0x263EFF8C0]) initWithContentsOfURL:this];
  if (![obj count] || (uint64_t v2 = (char *)operator new(0x80uLL, MEMORY[0x263F8C180])) == 0)
  {
LABEL_82:
    uint64_t v48 = 0;
    goto LABEL_83;
  }
  *(_WORD *)uint64_t v2 = 1;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 1) = v2 + 16;
  *((void *)v2 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = v2 + 64;
  double v39 = (uint64_t **)(v2 + 56);
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 11) = 0;
  *((void *)v2 + 10) = v2 + 88;
  unint64_t v44 = (uint64_t **)(v2 + 80);
  *((void *)v2 + ++*((_WORD *)this + 12) = 0;
  *((void *)v2 + 14) = 0;
  double v47 = (uint64_t *)(v2 + 112);
  uint64_t v48 = (unsigned __int16 *)v2;
  *((void *)v2 + 13) = v2 + 112;
  double v41 = (uint64_t **)(v2 + 104);
  *((void *)v2 + 15) = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v43 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
  if (!v43)
  {
    char v29 = 0;
    goto LABEL_68;
  }
  uint64_t v40 = *(void *)v65;
  while (2)
  {
    uint64_t v3 = 0;
    do
    {
      if (*(void *)v65 != v40)
      {
        uint64_t v4 = v3;
        objc_enumerationMutation(obj);
        uint64_t v3 = v4;
      }
      uint64_t v46 = v3;
      uint64_t v5 = *(void **)(*((void *)&v64 + 1) + 8 * v3);
      LODWORD(v59) = 1;
      *((void *)&v59 + 1) = 0;
      LODWORD(v60) = 1;
      *((void *)&v60 + 1) = 0;
      bzero(v63, 1uLL);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog((NSString *)@"invalid item class: %@", v5);
LABEL_67:
        char v29 = 1;
        goto LABEL_68;
      }
      uint64_t v6 = (void *)[v5 objectForKey:@"char"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog((NSString *)@"missing/invalid '%@': %@", @"char", v5);
        goto LABEL_67;
      }
      unsigned __int16 v58 = 0;
      std::string::basic_string[abi:nn180100]<0>(__p, (char *)[v6 UTF8String]);
      unsigned __int16 v7 = EQKit::Config::Operator::Dictionary::IdentifierMap::add(v48, (uint64_t)__p);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
      unsigned __int16 v58 = v7;
      int v8 = (void *)[v5 objectForKey:@"form"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        std::string::basic_string[abi:nn180100]<0>(__p, (char *)[v8 UTF8String]);
        int v49 = EQKit::Config::Operator::formFromMathMLString((const void **)__p, 0);
        if (v57 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        int v49 = 0;
      }
      std::__split_buffer<std::string>::pointer v9 = (void *)[v5 objectForKey:@"lspace"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v10 = [v9 integerValue];
      }
      else {
        uint64_t v10 = 0;
      }
      LODWORD(v59) = 3;
      *((double *)&v59 + 1) = (double)v10 / 18.0;
      uint64_t v11 = (void *)[v5 objectForKey:@"rspace"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v12 = [v11 integerValue];
      }
      else {
        uint64_t v12 = 0;
      }
      LODWORD(v60) = 3;
      *((double *)&v60 + 1) = (double)v12 / 18.0;
      uint64_t v13 = (void *)[v5 objectForKey:@"prio"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        __int16 v14 = [v13 unsignedIntegerValue];
      }
      else {
        __int16 v14 = 0;
      }
      __int16 v45 = v14;
      __int16 v61 = v14;
      int v15 = (void *)[v5 objectForKey:@"flags"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if ([v15 length])
        {
          uint64_t v16 = objc_msgSend(v15, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "characterSetWithCharactersInString:", @","));
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          uint64_t v17 = [v16 countByEnumeratingWithState:&v52 objects:v68 count:16];
          if (v17)
          {
            uint64_t v18 = *(void *)v53;
            int v19 = v63[0];
            double v20 = v62;
            do
            {
              for (uint64_t i = 0; i != v17; ++i)
              {
                if (*(void *)v53 != v18) {
                  objc_enumerationMutation(v16);
                }
                double v22 = *(void **)(*((void *)&v52 + 1) + 8 * i);
                if ([v22 isEqualToString:@"stretchy"])
                {
                  v19 |= 1u;
                }
                else if ([v22 isEqualToString:@"symmetric"])
                {
                  v19 |= 2u;
                }
                else if ([v22 isEqualToString:@"largeop"])
                {
                  if ((v19 & 0x80u) != 0)
                  {
                    int v23 = 4;
                  }
                  else
                  {
                    double v20 = 1.0;
                    int v23 = -124;
                  }
                  v19 |= v23;
                }
                else if ([v22 isEqualToString:@"fence"])
                {
                  v19 |= 0x10u;
                }
                else if ([v22 isEqualToString:@"accent"])
                {
                  v19 |= 8u;
                }
                else if ([v22 isEqualToString:@"movablelimits"])
                {
                  v19 |= 0x20u;
                }
                else if ([v22 isEqualToString:@"relational"])
                {
                  v19 |= 0x40u;
                }
                else if ([v22 hasPrefix:@"cramped="])
                {
                  CGFloat v24 = (void *)[objc_alloc(MEMORY[0x263F08B08]) initWithString:v22];
                  LODWORD(__p[0]) = 0;
                  if ([v24 scanString:@"cramped=" intoString:0]
                    && [v24 scanFloat:__p])
                  {
                    int v25 = [v24 isAtEnd];
                    int v26 = *(float *)__p == 0.0 ? 0 : v25;
                    if (v26 == 1)
                    {
                      v19 |= 0xFFFFFF80;
                      double v20 = *(float *)__p;
                    }
                  }
                }
              }
              uint64_t v17 = [v16 countByEnumeratingWithState:&v52 objects:v68 count:16];
            }
            while (v17);
            v63[0] = v19;
            double v62 = v20;
          }
        }
      }
      v50[0] = v58;
      int v51 = v49;
      __p[0] = v50;
      double v27 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(v39, v50, (uint64_t)&std::piecewise_construct, (void **)__p);
      *(_OWORD *)(v27 + 5) = v59;
      *(_OWORD *)(v27 + 7) = v60;
      *((_WORD *)v27 + 36) = v45;
      *((double *)v27 + 10) = v62;
      *((unsigned char *)v27 + 8_Block_object_dispose(&STACK[0x560], 8) = v63[0];
      __p[0] = &v58;
      *((_DWORD *)std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v44, &v58, (uint64_t)&std::piecewise_construct, (_WORD **)__p)+ _Block_object_dispose(&STACK[0x560], 8) = v49;
      __p[0] = &v58;
      double v28 = std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v41, &v58, (uint64_t)&std::piecewise_construct, (_WORD **)__p);
      v28[5] = (uint64_t *)((unint64_t)v28[5] | (1 << v49));
      uint64_t v3 = v46 + 1;
    }
    while (v46 + 1 != v43);
    uint64_t v43 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
    char v29 = 0;
    if (v43) {
      continue;
    }
    break;
  }
LABEL_68:
  uint64_t v30 = *v41;
  unsigned int v31 = (EQKit::Config::Operator::Dictionary *)v48;
  if (*v41 != v47)
  {
    do
    {
      unint64_t v32 = v30[5];
      if (v32)
      {
        unint64_t v33 = 0;
        do
        {
          v33 += v32 & 1;
          BOOL v34 = v32 > 1;
          v32 >>= 1;
        }
        while (v34);
        if (v33 >= 2)
        {
          std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>((uint64_t)v44, (unsigned __int16 *)v30 + 16);
          unsigned int v31 = (EQKit::Config::Operator::Dictionary *)v48;
        }
      }
      double v35 = (uint64_t *)v30[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          double v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (uint64_t *)v30[2];
          BOOL v37 = *v36 == (void)v30;
          uint64_t v30 = v36;
        }
        while (!v37);
      }
      uint64_t v30 = v36;
    }
    while (v36 != v47);
  }
  if (v29)
  {
    EQKit::Config::Operator::Dictionary::~Dictionary(v31);
    MEMORY[0x223CB8F20]();
    goto LABEL_82;
  }
LABEL_83:

  return v48;
}

void sub_223500864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *EQKit::Config::Operator::Dictionary::lookup(uint64_t a1, unsigned __int16 a2, int a3)
{
  if (a3) {
    int v4 = a3;
  }
  else {
    int v4 = 2;
  }
  v7[0] = a2;
  int v8 = v4;
  uint64_t v5 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(a1 + 56, v7);
  if ((uint64_t *)(a1 + 64) == v5) {
    return 0;
  }
  else {
    return v5 + 5;
  }
}

uint64_t EQKit::Config::Operator::Dictionary::operatorId(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v3 + 56);
  }
}

uint64_t EQKit::Config::Operator::Dictionary::formForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  int v4 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 88;
  uint64_t v3 = (char **)v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *((unsigned __int16 *)v3 + 14);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = v3;
    }
    else {
      int v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = (char *)v3;
    }
    uint64_t v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 14) <= a2) {
    return *((unsigned int *)v5 + 8);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Config::Operator::Dictionary::formMaskForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  int v4 = (char *)*((void *)this + 14);
  uint64_t v2 = (char *)this + 112;
  uint64_t v3 = (char **)v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *((unsigned __int16 *)v3 + 16);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = v3;
    }
    else {
      int v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = (char *)v3;
    }
    uint64_t v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 16) <= a2) {
    return *((void *)v5 + 5);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Config::Operator::Dictionary::enumerateEntries(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 56);
  uint64_t v3 = (void *)(result + 64);
  if (v2 != (void *)(result + 64))
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *((unsigned int *)v2 + 9);
      BOOL v7 = EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](v5, *((unsigned __int16 *)v2 + 16));
      double result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void *))(a2 + 16))(a2, v7, v6, v2 + 5);
      int v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          std::__split_buffer<std::string>::pointer v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          std::__split_buffer<std::string>::pointer v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t *std::map<std::string,unsigned short>::map[abi:nn180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,unsigned short>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_223500C64(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned short>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    std::string::size_type v6 = result + 1;
    do
    {
      double result = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned short> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      std::string::size_type v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          std::string::size_type v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (const void **)v8;
        }
        while (!v9);
      }
      int v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned short> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  std::string::size_type v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      __int16 v14 = (const void **)a2[1];
      do
      {
        int v15 = v14;
        __int16 v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        int v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string::size_type v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::size_type v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_WORD *)v6 + 2_Block_object_dispose(&STACK[0x560], 8) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_223500FC4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    std::string::size_type v6 = a2;
  }
  else {
    std::string::size_type v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

std::string *std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    double result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2235011A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(int a1, long long *a2, long long *a3, std::string *this)
{
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        this->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
      }
      std::string::size_type v6 = (long long *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  size_t v5 = result;
  if (result[2])
  {
    std::string::size_type v6 = *result;
    long long v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    unsigned __int16 v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    BOOL v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        size_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_WORD *)v8 + 2_Block_object_dispose(&STACK[0x560], 8) = *((_WORD *)v9 + 28);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          BOOL v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              size_t v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          size_t v9 = a2;
        }
        while (!v12);
      }
    }
    double result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          __int16 v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          __int16 v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_223501430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        size_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        double result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    double result = v5 + 1;
  }
  else
  {
    double result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  double result = *(void **)(a1 + 16);
  if (result)
  {
    int v3 = (void *)*result;
    if (*result == a1)
    {
      *double result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          double result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; int v3 = (void *)result[1])
      {
        do
        {
          double result = v3;
          int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
    }
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_2235015C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  int v8 = this + 16;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:nn180100](this, v11);
    BOOL v12 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v8, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    BOOL v12 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v8, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  int v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_22350174C(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223501754(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:nn180100](v5, (const void **)(v3 + 32), a2);
    int v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      int v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:nn180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  double result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:nn180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v3 + 24;
}

void sub_223501960(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::__split_buffer<std::string>::pointer *a1, long long *a2)
{
  std::__split_buffer<std::string>::pointer v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  std::__split_buffer<std::string>::pointer v8 = a1[2];
  BOOL v7 = (std::allocator<std::string> *)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  v22.__end_cap_.__value_ = v7;
  if (v10) {
    unint64_t v11 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v10);
  }
  else {
    unint64_t v11 = 0;
  }
  std::__split_buffer<std::string>::pointer begin = v11 + v3;
  v22.__first_ = v11;
  v22.__begin_ = begin;
  v22.__end_ = begin;
  v22.__end_cap_.__value_ = &v11[v10];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(begin, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer begin = v22.__begin_;
    std::__split_buffer<std::string>::pointer end = v22.__end_;
  }
  else
  {
    long long v13 = *a2;
    begin->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v13;
    std::__split_buffer<std::string>::pointer end = v11 + v3;
  }
  std::__split_buffer<std::string>::pointer v16 = *a1;
  unint64_t v15 = (unint64_t)a1[1];
  if ((std::__split_buffer<std::string>::pointer)v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      long long v17 = *(_OWORD *)(v15 - 24);
      begin[-1].__r_.__value_.__r.__words[2] = *(void *)(v15 - 8);
      *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v17;
      --begin;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - _Block_object_dispose(&STACK[0x560], 8) = 0;
      *(void *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((std::__split_buffer<std::string>::pointer)v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
  }
  std::__split_buffer<std::string>::pointer v19 = end + 1;
  *a1 = begin;
  a1[1] = end + 1;
  *(int64x2_t *)&v22.__begin_ = v18;
  double v20 = a1[2];
  a1[2] = v22.__end_cap_.__value_;
  v22.__end_cap_.__value_ = v20;
  v22.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v22);
  return v19;
}

void sub_223501AC0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  std::__split_buffer<std::string>::pointer v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      std::__split_buffer<std::string>::pointer v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x60uLL);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = 1;
    v7[6] = 0;
    *((_DWORD *)v7 + 14) = 1;
    v7[8] = 0;
    bzero(v7 + 11, 1uLL);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  size_t v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  size_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    int v7 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unsigned int v9 = *((unsigned __int16 *)v4 + 16);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        size_t v4 = (uint64_t *)*v8;
        double result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        int v10 = *((_DWORD *)v8 + 9);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      double result = v8 + 1;
      size_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x28uLL);
    v11[14] = **a4;
    *((_DWORD *)v11 + _Block_object_dispose(&STACK[0x560], 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 28);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 28)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unsigned int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      int v7 = 0;
      double result = (uint64_t *)v2;
    }
    else
    {
      int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unsigned int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      long long v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + _Block_object_dispose(&STACK[0x560], 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *long long v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        double result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      std::__split_buffer<std::string>::pointer v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        unsigned __int16 v7[2] = (uint64_t)v15;
        std::__split_buffer<std::string>::pointer v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      CGFloat v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + _Block_object_dispose(&STACK[0x560], 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *CGFloat v24 = v23;
      goto LABEL_72;
    }
    std::__split_buffer<std::string>::pointer v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    unsigned __int16 v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      double result = v7;
    }
    int v7 = *(uint64_t **)v12;
  }
  std::__split_buffer<std::string>::pointer v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  double v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    double v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *double v20 = (uint64_t)v7;
    unsigned __int16 v7[2] = (uint64_t)v20;
    std::__split_buffer<std::string>::pointer v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  CGFloat v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  unsigned int v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  int v6 = *((_DWORD *)a2 + 1);
  int v7 = v2;
  do
  {
    unsigned int v8 = *((unsigned __int16 *)v3 + 16);
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((_DWORD *)v3 + 9) < v6) {
          ++v3;
        }
        else {
          int v7 = v3;
        }
      }
      else
      {
        int v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    unsigned int v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v9 = *((unsigned __int16 *)v7 + 16);
  if (v5 < v9 || v9 >= v5 && v6 < *((_DWORD *)v7 + 9)) {
    return v2;
  }
  return v7;
}

uint64_t NoExternalEntityLoader(const char *a1, const char *a2, _xmlParserCtxt *a3)
{
  return 0;
}

BOOL EQKitLength::isNamedspaceString(uint64_t a1, const void **a2)
{
  if (_map(void)::onceToken != -1) {
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  }
  uint64_t v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(_map(void)::map, a2);
  if (_map(void)::onceToken != -1) {
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  }
  return _map(void)::map + 8 != v3;
}

uint64_t EQKitLength::EQKitLengthFromMathMLString(uint64_t a1, const void **a2)
{
  if (_map(void)::onceToken != -1) {
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  }
  uint64_t v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(_map(void)::map, a2);
  if (_map(void)::onceToken != -1) {
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  }
  if (_map(void)::map + 8 == v3) {
    return 1;
  }
  else {
    return 3;
  }
}

uint64_t EQKitLength::EQKitLength(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  unsigned int v5 = (void *)[NSString stringWithUTF8String:v4];
  uint64_t v6 = objc_msgSend(v5, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet"));
  int v7 = (void *)[objc_alloc(MEMORY[0x263F08B08]) initWithString:v6];
  float v23 = 0.0;
  [v7 scanFloat:&v23];
  *(double *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v23;
  unsigned int v8 = objc_msgSend((id)objc_msgSend(v7, "string"), "substringFromIndex:", objc_msgSend(v7, "scanLocation"));
  std::string::basic_string[abi:nn180100]<0>(&__p, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet")), "UTF8String"));

  if ((v22 & 0x80000000) == 0)
  {
    if (v22 != 1)
    {
      if (v22 != 2)
      {
        if (v22 != 4) {
          goto LABEL_35;
        }
        if (__p != 1701606770) {
          goto LABEL_9;
        }
LABEL_50:
        int v11 = 5;
        goto LABEL_44;
      }
      if ((unsigned __int16)__p != 29808)
      {
        if ((unsigned __int16)__p != 30821) {
          goto LABEL_20;
        }
        goto LABEL_26;
      }
LABEL_43:
      int v11 = 1;
      goto LABEL_44;
    }
    if (__p != 37) {
      goto LABEL_35;
    }
LABEL_25:
    int v11 = 4;
LABEL_44:
    *(_DWORD *)a1 = v11;
    goto LABEL_45;
  }
  uint64_t v10 = v21;
  if (v21 == 1 && *(unsigned char *)__p == 37) {
    goto LABEL_25;
  }
  if (v21 != 2)
  {
LABEL_29:
    if (v10 == 4)
    {
      if (*(_DWORD *)__p == 1701606770) {
        goto LABEL_50;
      }
      uint64_t v10 = v21;
    }
    if (v10 != 2) {
      goto LABEL_35;
    }
    p_p = __p;
    goto LABEL_34;
  }
  if (*(_WORD *)__p == 29808) {
    goto LABEL_43;
  }
  if (*(_WORD *)__p == 30821)
  {
LABEL_26:
    int v11 = 2;
    goto LABEL_44;
  }
  if (v22 < 0)
  {
    if (*(_WORD *)__p == 28005) {
      goto LABEL_61;
    }
    uint64_t v10 = v21;
    goto LABEL_29;
  }
  if (v22 != 2) {
    goto LABEL_35;
  }
LABEL_20:
  if ((unsigned __int16)__p == 28005)
  {
LABEL_61:
    int v11 = 3;
    goto LABEL_44;
  }
LABEL_9:
  if (v22 != 2) {
    goto LABEL_35;
  }
  p_p = &__p;
LABEL_34:
  if (*p_p == 28003)
  {
    double v12 = *(double *)(a1 + 8);
    goto LABEL_37;
  }
LABEL_35:
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "mm"))
  {
    double v12 = *(double *)(a1 + 8) / 10.0;
LABEL_37:
    double v13 = 2.54;
LABEL_38:
    double v14 = v12 / v13;
LABEL_41:
    double v15 = 72.0;
LABEL_42:
    *(double *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v14 * v15;
    goto LABEL_43;
  }
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "in"))
  {
    double v14 = *(double *)(a1 + 8);
    goto LABEL_41;
  }
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "px"))
  {
    double v12 = *(double *)(a1 + 8);
    double v13 = 96.0;
    goto LABEL_38;
  }
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pc"))
  {
    double v14 = *(double *)(a1 + 8);
    double v15 = 12.0;
    goto LABEL_42;
  }
  if (!std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "ch")
    && !std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "rem")
    && !std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "vw")
    && !std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "vh"))
  {
    BOOL v17 = std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "vmin");
    if (!v17)
    {
      BOOL isNamedspaceString = EQKitLength::isNamedspaceString(v17, (const void **)&__p);
      if (isNamedspaceString)
      {
        *(void *)a1 = EQKitLength::EQKitLengthFromMathMLString(isNamedspaceString, (const void **)&__p);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v19;
      }
      else
      {
        if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, ""))
        {
          int v11 = 6;
          goto LABEL_44;
        }
        *(_DWORD *)a1 = 0;
      }
    }
  }
LABEL_45:
  if (v22 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_223502FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      abort();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

double EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(double *a1, uint64_t a2, double a3)
{
  double v3 = a1[1];
  uint64_t v4 = *(unsigned int *)a1;
  switch((int)v4)
  {
    case 2:
    case 3:
    case 5:
      a3 = (*(double (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
      goto LABEL_3;
    case 4:
      double v3 = v3 * a3 / 100.0;
      break;
    case 6:
LABEL_3:
      double v3 = v3 * a3;
      break;
    default:
      return v3;
  }
  return v3;
}

double EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(double *a1, uint64_t a2, uint64_t a3)
{
  double v3 = a1[1];
  uint64_t v4 = *(unsigned int *)a1;
  switch((int)v4)
  {
    case 2:
    case 3:
    case 5:
      double v5 = (*(double (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
      goto LABEL_3;
    case 4:
      if (a3) {
        double v3 = v3 * (*(double (**)(uint64_t))(a3 + 16))(a3) / 100.0;
      }
      break;
    case 6:
      if (a3)
      {
        (*(void (**)(uint64_t))(a3 + 16))(a3);
LABEL_3:
        double v3 = v3 * v5;
      }
      break;
    default:
      return v3;
  }
  return v3;
}

double EQKitLength::resolveToAbsoluteWithSize(EQKitLength *this, double a2)
{
  double result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      goto LABEL_5;
    case 4:
      double result = result * a2 / 100.0;
      break;
    case 5:
      a2 = 0.0;
LABEL_5:
      double result = result * a2;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double EQKitLength::resolveToAbsoluteWithSizeAndRule(EQKitLength *this, double a2, double a3)
{
  double result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      double result = result * a2;
      break;
    case 4:
      double result = result * a2 / 100.0;
      break;
    case 5:
      double result = result * a3;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

uint64_t EQKitLength::asString(EQKitLength *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  std::ostream::operator<<();
  int v2 = *(_DWORD *)this - 1;
  if (v2 < 5) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)off_2646AF508[v2], qword_223837A90[v2]);
  }
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223CB8ED0](&v8);
}

void sub_2235034B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x560], 8) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  double v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = v6;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x560], 8) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22350377C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x223CB8ED0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223CB8ED0](a1 + 128);
  return a1;
}

uint64_t EQKitLength::lengthVectorFromString(std::string *__str, uint64_t a2)
{
  std::string::size_type v3 = 0;
  std::string __p = 0;
  uint64_t v40 = 0;
  double v41 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  char v5 = 1;
  while (v3 < size)
  {
    int v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    BOOL v7 = v6 < 0;
    if (v6 >= 0) {
      uint64_t v8 = __str;
    }
    else {
      uint64_t v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v7) {
      std::string::size_type v9 = __str->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    if (v9 > v3)
    {
      uint64_t v10 = (unsigned __int8 *)v8 + v3;
      uint64_t v11 = (unsigned __int8 *)v8 + v9;
LABEL_14:
      uint64_t v12 = 0;
      while (*v10 != asc_223848D13[v12])
      {
        if (++v12 == 3)
        {
          if (++v10 != v11) {
            goto LABEL_14;
          }
          goto LABEL_21;
        }
      }
      if (v10 != v11)
      {
        std::string::size_type v13 = v10 - (unsigned __int8 *)v8;
        if (v10 - (unsigned __int8 *)v8 != -1) {
          goto LABEL_22;
        }
      }
    }
LABEL_21:
    std::string::size_type v13 = size;
LABEL_22:
    std::string::basic_string(&v38, __str, v3, v13 - v3, (std::allocator<char> *)&v37);
    EQKitLength::EQKitLength((uint64_t)&v37, (uint64_t *)&v38, 0);
    int v14 = v37;
    if (v37)
    {
      double v15 = v40;
      if (v40 >= v41)
      {
        uint64_t v17 = (v40 - (unsigned char *)__p) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          abort();
        }
        uint64_t v19 = v41 - (unsigned char *)__p;
        if ((v41 - (unsigned char *)__p) >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)&v41, v20);
        }
        else {
          uint64_t v21 = 0;
        }
        char v22 = &v21[16 * v17];
        *(_OWORD *)char v22 = v37;
        CGFloat v24 = (char *)__p;
        float v23 = v40;
        uint64_t v25 = v22;
        if (v40 != __p)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
            v25 -= 16;
            v23 -= 16;
          }
          while (v23 != v24);
          float v23 = (char *)__p;
        }
        std::__split_buffer<std::string>::pointer v16 = v22 + 16;
        std::string __p = v25;
        uint64_t v40 = v22 + 16;
        double v41 = &v21[16 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v40 = v37;
        std::__split_buffer<std::string>::pointer v16 = v15 + 16;
      }
      uint64_t v40 = v16;
      if (v13 >= size) {
        goto LABEL_52;
      }
      int v26 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      uint64_t v27 = v26 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
      std::string::size_type v28 = v26 >= 0 ? HIBYTE(__str->__r_.__value_.__r.__words[2]) : __str->__r_.__value_.__l.__size_;
      if (v28 <= v13) {
        goto LABEL_53;
      }
      while (memchr(" \t\n", v27->__r_.__value_.__s.__data_[v13], 3uLL))
      {
        if (v28 == ++v13) {
          goto LABEL_53;
        }
      }
      if (v13 == -1) {
LABEL_53:
      }
        std::string::size_type v3 = size;
      else {
LABEL_52:
      }
        std::string::size_type v3 = v13;
    }
    else
    {
      char v5 = 0;
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v38.__r_.__value_.__l.__data_);
      if (!v14) {
        break;
      }
    }
    else if (!v14)
    {
      break;
    }
  }
  char v29 = (char *)__p;
  if (v5)
  {
    uint64_t v30 = v40;
    if (__p != v40)
    {
      unsigned int v31 = *(void **)a2;
      *(void *)a2 = __p;
      *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v30;
      unint64_t v32 = v41;
      unint64_t v33 = *(char **)(a2 + 16);
      std::string __p = v31;
      double v41 = v33;
      *(void *)(a2 + 16) = v32;
      uint64_t v34 = 1;
      char v29 = (char *)v31;
      if (!v31) {
        return v34;
      }
      goto LABEL_63;
    }
  }
  uint64_t v34 = 0;
  if (__p)
  {
LABEL_63:
    uint64_t v40 = v29;
    operator delete(v29);
  }
  return v34;
}

void sub_223503BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL4_mapv_block_invoke()
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "veryverythinmathspace");
  int v1 = 1029934649;
  std::string::basic_string[abi:nn180100]<0>(v2, "verythinmathspace");
  int v3 = 1038323257;
  std::string::basic_string[abi:nn180100]<0>(v4, "thinmathspace");
  int v5 = 1042983595;
  std::string::basic_string[abi:nn180100]<0>(v6, "mediummathspace");
  int v7 = 1046711865;
  std::string::basic_string[abi:nn180100]<0>(v8, "thickmathspace");
  int v9 = 1049508068;
  std::string::basic_string[abi:nn180100]<0>(v10, "verythickmathspace");
  int v11 = 1051372203;
  std::string::basic_string[abi:nn180100]<0>(v12, "veryverythickmathspace");
  int v13 = 1053236338;
  std::string::basic_string[abi:nn180100]<0>(v14, "negativeveryverythinmathspace");
  int v15 = -1117548999;
  std::string::basic_string[abi:nn180100]<0>(v16, "negativeverythinmathspace");
  int v17 = -1109160391;
  std::string::basic_string[abi:nn180100]<0>(v18, "negativethinmathspace");
  int v19 = -1104500053;
  std::string::basic_string[abi:nn180100]<0>(v20, "negativemediummathspace");
  int v21 = -1100771783;
  std::string::basic_string[abi:nn180100]<0>(v22, "negativethickmathspace");
  int v23 = -1097975580;
  std::string::basic_string[abi:nn180100]<0>(v24, "negativeverythickmathspace");
  int v25 = -1096111445;
  std::string::basic_string[abi:nn180100]<0>(v26, "negativeveryverythickmathspace");
  int v27 = -1094247310;
  operator new();
}

void sub_223503E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 448;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0) {
      operator delete(*(void **)(&a10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_223503F18()
{
}

uint64_t std::map<std::string const,float>::map[abi:nn180100]<std::pair<std::string const,float> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223503F8C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

float std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__construct_node<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  float result = *(float *)(a2 + 24);
  *((float *)v6 + 14) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2235040B4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x223CB8E10](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x223CB8E20](v13);
  return a1;
}

void sub_22350420C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      int v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_2235043A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

double EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this)
{
  *(void *)this = 4;
  double result = 0.25;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = xmmword_223837AC0;
  *((void *)this + 3) = 0x3FD0000000000000;
  return result;
}

{
  double result;

  *(void *)this = 4;
  double result = 0.25;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = xmmword_223837AC0;
  *((void *)this + 3) = 0x3FD0000000000000;
  return result;
}

EQKitPath::QuantizationConfig *EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this, NSDictionary *a2)
{
  *(void *)this = 4;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = xmmword_223837AC0;
  *((void *)this + 3) = 0x3FD0000000000000;
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = (void *)EQKitUtilDynamicCast(v4, (uint64_t)[(NSDictionary *)a2 objectForKey:@"bucketsPerUnit"]);
  if (v5)
  {
    unint64_t v6 = [v5 unsignedIntegerValue];
    if (v6 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = v6;
    }
    *(void *)this = v7;
    *((double *)this + 1) = 1.0 / (double)v7;
  }
  uint64_t v8 = objc_opt_class();
  int v9 = (void *)EQKitUtilDynamicCast(v8, (uint64_t)[(NSDictionary *)a2 objectForKey:@"thresholdCurveBoundsMinMax"]);
  if (v9)
  {
    [v9 floatValue];
    *((double *)this + 2) = v10;
  }
  uint64_t v11 = objc_opt_class();
  int64_t v12 = (void *)EQKitUtilDynamicCast(v11, (uint64_t)[(NSDictionary *)a2 objectForKey:@"thresholdCurveControlPointDistance"]);
  if (v12)
  {
    [v12 floatValue];
    *((double *)this + 3) = v13;
  }
  return this;
}

double EQKitPath::QuantizationConfig::setBucketsPerUnit(EQKitPath::QuantizationConfig *this, unint64_t a2)
{
  if (a2 <= 1) {
    unint64_t v2 = 1;
  }
  else {
    unint64_t v2 = a2;
  }
  *(void *)this = v2;
  double result = 1.0 / (double)v2;
  *((double *)this + 1) = result;
  return result;
}

uint64_t EQKitPath::QuantizationConfig::setThresholdCurveBoundsMinMax(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

uint64_t EQKitPath::QuantizationConfig::setThresholdCurveControlPointDistance(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

double EQKitPath::Stem::Stem(EQKitPath::Stem *this)
{
  *(unsigned char *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(unsigned char *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t EQKitPath::Stem::Stem(uint64_t a1, int a2, uint64_t a3, _OWORD *a4)
{
  *(_DWORD *)(a1 + 56) = a2;
  unint64_t v6 = (_OWORD *)(a1 + 8);
  if (a4)
  {
    long long v7 = a4[1];
    *unint64_t v6 = *a4;
    v6[1] = v7;
  }
  else
  {
    bzero(v6, 0x20uLL);
    a2 = *(_DWORD *)(a1 + 56);
  }
  unint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a3 + 8);
  unint64_t v11 = (*(void *)(a3 + 16) - v10) >> 4;
  if (v11 <= v8) {
    int64_t v12 = (double *)MEMORY[0x263F00148];
  }
  else {
    int64_t v12 = (double *)(v10 + 16 * v8);
  }
  double v13 = *v12;
  double v14 = v12[1];
  uint64_t v15 = (double *)(v10 + 16 * v9);
  if (v11 <= v9) {
    uint64_t v15 = (double *)MEMORY[0x263F00148];
  }
  double v16 = *v15;
  double v17 = v15[1];
  double v18 = *v15 - v13;
  double v19 = v17 - v14;
  unint64_t v20 = *(void *)(a1 + 24);
  unint64_t v21 = *(void *)(a1 + 32);
  if (v11 <= v20) {
    char v22 = (double *)MEMORY[0x263F00148];
  }
  else {
    char v22 = (double *)(v10 + 16 * v20);
  }
  double v23 = *v22;
  double v24 = v22[1];
  int v25 = (double *)(v10 + 16 * v21);
  if (v11 <= v21) {
    int v25 = (double *)MEMORY[0x263F00148];
  }
  double v26 = v25[1];
  double v27 = *v25 - v23;
  double v28 = v26 - v24;
  if ((a2 | 2) == 3)
  {
    double v29 = fabs(v19);
    double v30 = fabs(v28);
    if (v29 >= v30) {
      double v29 = v30;
    }
    double v31 = vabdd_f64(*v25, v13);
    double v32 = vabdd_f64(v23, v16);
    if (v31 <= v32) {
      double v31 = v32;
    }
    *(double *)(a1 + 40) = v29;
    *(double *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = v31;
    if (v19 != 0.0 && v28 != 0.0)
    {
      double v33 = v18 / v19;
      double v34 = v27 / v28;
      goto LABEL_29;
    }
  }
  else
  {
    double v35 = fabs(v18);
    double v36 = fabs(v27);
    if (v35 >= v36) {
      double v35 = v36;
    }
    double v37 = vabdd_f64(v26, v14);
    double v38 = vabdd_f64(v24, v17);
    if (v37 <= v38) {
      double v37 = v38;
    }
    *(double *)(a1 + 40) = v35;
    *(double *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = v37;
    if (v18 != 0.0 && v27 != 0.0)
    {
      double v33 = v19 / v18;
      double v34 = v28 / v27;
LABEL_29:
      if (vabdd_f64(v33, v34) < 0.00100000005) {
        *(unsigned char *)a1 = 1;
      }
    }
  }
  return a1;
}

double EQKitPath::vector(EQKitPath *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = (*((void *)this + 2) - v3) >> 4;
  uint64_t v5 = (double *)(v3 + 16 * a2);
  if (v4 <= a2) {
    uint64_t v5 = (double *)MEMORY[0x263F00148];
  }
  unint64_t v6 = (double *)(v3 + 16 * a3);
  if (v4 <= a3) {
    long long v7 = (double *)MEMORY[0x263F00148];
  }
  else {
    long long v7 = v6;
  }
  return *v7 - *v5;
}

__n128 EQKitPath::Stem::Stem(EQKitPath::Stem *this, const EQKitPath::Stem *a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(__n128 *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = result;
  return result;
}

{
  __n128 result;

  *(unsigned char *)this = *(unsigned char *)a2;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(__n128 *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = result;
  return result;
}

__n128 EQKitPath::Stem::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    long long v2 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
    __n128 result = *(__n128 *)(a2 + 40);
    *(__n128 *)(a1 + 40) = result;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  }
  return result;
}

uint64_t EQKitPath::Stem::adjustStemPoints(uint64_t result, uint64_t a2, void *a3, double a4)
{
  unint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  unint64_t v6 = (double *)(*a3 + 16 * v5);
  double v8 = *v6;
  double v7 = v6[1];
  unint64_t v9 = (double *)(*a3 + 16 * *(void *)(result + 24));
  double v11 = *v9;
  double v10 = v9[1];
  uint64_t v12 = *(void *)(a2 + 8);
  unint64_t v13 = (*(void *)(a2 + 16) - v12) >> 4;
  if (v13 <= v4) {
    double v14 = (double *)MEMORY[0x263F00148];
  }
  else {
    double v14 = (double *)(v12 + 16 * v4);
  }
  uint64_t v15 = (double *)(v12 + 16 * v5);
  if (v13 <= v5) {
    double v16 = (double *)MEMORY[0x263F00148];
  }
  else {
    double v16 = v15;
  }
  double v17 = *v16 - *v14;
  double v18 = v16[1] - v14[1];
  switch(*(_DWORD *)(result + 56))
  {
    case 0:
      double v8 = v8 - a4;
      double v11 = v11 - a4;
      goto LABEL_11;
    case 1:
      double v7 = v7 - a4;
      double v10 = v10 - a4;
      goto LABEL_13;
    case 2:
      double v8 = v8 + a4;
      double v11 = v11 + a4;
LABEL_11:
      double v19 = v18 * a4 / v17;
      double v7 = v7 + v19;
      double v10 = v10 + v19;
      break;
    case 3:
      double v7 = v7 + a4;
      double v10 = v10 + a4;
LABEL_13:
      double v20 = v17 * a4 / v18;
      double v8 = v8 + v20;
      double v11 = v11 + v20;
      break;
    default:
      break;
  }
  *unint64_t v6 = v8;
  v6[1] = v7;
  *unint64_t v9 = v11;
  v9[1] = v10;
  return result;
}

uint64_t EQKitPath::Subpath::nextElementSkipClose(EQKitPath::Subpath *this, uint64_t a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *((void *)this + 1) + *(void *)this;
  if (a2 + 1 < v3) {
    uint64_t v4 = a2 + 1;
  }
  else {
    uint64_t v4 = *(void *)this;
  }
  if (v4 + 1 < v3) {
    uint64_t v2 = v4 + 1;
  }
  if (v4 != v3 - 1 || *((unsigned char *)this + 16) == 0) {
    return v4;
  }
  else {
    return v2;
  }
}

unint64_t EQKitPath::Subpath::prevElementSkipClose(EQKitPath::Subpath *this, unint64_t a2)
{
  unint64_t v3 = *(void *)this;
  if (*(void *)this >= a2) {
    a2 = *((void *)this + 1) + v3;
  }
  unint64_t result = a2 - 1;
  if (*((unsigned char *)this + 16))
  {
    unint64_t v5 = *((void *)this + 1) + v3;
    if (v3 >= result) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = a2 - 1;
    }
    unint64_t v7 = v6 - 1;
    if (a2 == v5) {
      return v7;
    }
  }
  return result;
}

void EQKitPath::extractorFunction(EQKitPath *this, void *a2, const CGPathElement *a3)
{
  if (this)
  {
    if (a2)
    {
      uint64_t v4 = (void *)*((void *)this + 1);
      if (v4)
      {
        unsigned int v5 = *(_DWORD *)a2;
        uint64_t v6 = 2;
        uint64_t v7 = 3;
        if (*(_DWORD *)a2 != 3) {
          uint64_t v7 = 0;
        }
        int v65 = *(_DWORD *)a2;
        BOOL v8 = v5 == 2 || *(_DWORD *)a2 == 3;
        if (v5 != 2) {
          uint64_t v6 = v7;
        }
        if (v5 < 2) {
          BOOL v8 = 1;
        }
        BOOL v70 = v8;
        if (v5 >= 2) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = 1;
        }
        double v10 = (char **)(v4 + 1);
        uint64_t v66 = v4[1];
        uint64_t v68 = v4[2];
        unint64_t v69 = v9;
        if (a2[1] && v70)
        {
          uint64_t v11 = 0;
          uint64_t v12 = v4 + 3;
          unint64_t v13 = (char *)v4[2];
          if (v9 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v9;
          }
          do
          {
            uint64_t v15 = (_OWORD *)(a2[1] + 16 * v11);
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v16 = (v13 - *v10) >> 4;
              if ((unint64_t)(v16 + 1) >> 60) {
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v17 = *v12 - (void)*v10;
              uint64_t v18 = v17 >> 3;
              if (v17 >> 3 <= (unint64_t)(v16 + 1)) {
                uint64_t v18 = v16 + 1;
              }
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v19 = v18;
              }
              if (v19) {
                double v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v4 + 3), v19);
              }
              else {
                double v20 = 0;
              }
              unint64_t v21 = &v20[16 * v16];
              *(_OWORD *)unint64_t v21 = *v15;
              double v23 = (char *)v4[1];
              char v22 = (char *)v4[2];
              double v24 = v21;
              if (v22 != v23)
              {
                do
                {
                  *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
                  v24 -= 16;
                  v22 -= 16;
                }
                while (v22 != v23);
                char v22 = *v10;
              }
              unint64_t v13 = v21 + 16;
              v4[1] = v24;
              void v4[2] = v21 + 16;
              void v4[3] = &v20[16 * v19];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *(_OWORD *)unint64_t v13 = *v15;
              v13 += 16;
            }
            void v4[2] = v13;
            ++v11;
          }
          while (v11 != v14);
        }
        int v25 = (char *)v4[4];
        double v26 = (char *)v4[5];
        unint64_t v27 = (v26 - v25) >> 4;
        if (*(_DWORD *)a2 != 4 || v26 == v25)
        {
          double v29 = this;
        }
        else
        {
          double v29 = this;
          if (v27 > *(void *)(v4[8] - 8) && *(_DWORD *)&v25[16 * v27 - 16] == 1)
          {
            double v30 = (double *)&(*v10)[16 * *(void *)&v25[16 * v27 - 8]];
            if (*((double *)this + 3) == *v30 && *((double *)this + 4) == v30[1])
            {
              v4[2] -= 16;
              v26 -= 16;
              v4[5] = v26;
              unint64_t v27 = (v26 - v25) >> 4;
            }
          }
        }
        uint64_t v32 = (v68 - v66) >> 4;
        unint64_t v33 = v4[6];
        if ((unint64_t)v26 >= v33)
        {
          uint64_t v36 = (v26 - v25) >> 4;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60) {
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v38 = v33 - (void)v25;
          if (v38 >> 3 > v37) {
            unint64_t v37 = v38 >> 3;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v4 + 6), v39);
            int v25 = (char *)v4[4];
            double v26 = (char *)v4[5];
          }
          else
          {
            uint64_t v40 = 0;
          }
          double v41 = &v40[16 * v36];
          uint64_t v42 = &v40[16 * v39];
          *(_DWORD *)double v41 = v65;
          *((void *)v41 + 1) = v32;
          double v34 = v41 + 16;
          if (v26 != v25)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
              v41 -= 16;
              v26 -= 16;
            }
            while (v26 != v25);
            int v25 = (char *)v4[4];
          }
          v4[4] = v41;
          v4[5] = v34;
          v4[6] = v42;
          unint64_t v35 = v69;
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_DWORD *)double v26 = v65;
          *((void *)v26 + 1) = v32;
          double v34 = v26 + 16;
          unint64_t v35 = v69;
        }
        v4[5] = v34;
        uint64_t v43 = a2[1];
        BOOL v44 = v43 != 0;
        __int16 v45 = (long long *)(v43 + 16 * v35 - 16);
        if (!v70 || !v44) {
          __int16 v45 = (long long *)MEMORY[0x263F00148];
        }
        long long v71 = *v45;
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 == 4)
          {
            *((unsigned char *)v29 + 16) = 0;
LABEL_104:
            *(void *)v29 += v35;
            return;
          }
          if (*((unsigned char *)v29 + 16)) {
            goto LABEL_104;
          }
          unint64_t v54 = v4[9];
          double v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v54) {
            goto LABEL_84;
          }
          uint64_t v48 = (unint64_t *)v4[7];
          uint64_t v56 = v47 - v48;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            unint64_t v57 = v54 - (void)v48;
            unint64_t v58 = (uint64_t)(v54 - (void)v48) >> 2;
            if (v58 <= v56 + 1) {
              unint64_t v58 = v56 + 1;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59)
            {
              long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v59);
              uint64_t v48 = (unint64_t *)v4[7];
              double v47 = (unint64_t *)v4[8];
            }
            else
            {
              long long v60 = 0;
            }
            __int16 v61 = (unint64_t *)&v60[8 * v56];
            double v62 = &v60[8 * v59];
            *__int16 v61 = v27;
            long long v55 = v61 + 1;
            while (v47 != v48)
            {
              unint64_t v64 = *--v47;
              *--__int16 v61 = v64;
            }
LABEL_101:
            v4[7] = v61;
            v4[8] = v55;
            v4[9] = v62;
            if (v48) {
              operator delete(v48);
            }
            goto LABEL_103;
          }
        }
        else
        {
          unint64_t v46 = v4[9];
          double v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v46)
          {
LABEL_84:
            *double v47 = v27;
            long long v55 = v47 + 1;
LABEL_103:
            v4[8] = v55;
            *((unsigned char *)v29 + 16) = 1;
            *(_OWORD *)((char *)v29 + 24) = v71;
            goto LABEL_104;
          }
          uint64_t v48 = (unint64_t *)v4[7];
          uint64_t v49 = v47 - v48;
          if (!((unint64_t)(v49 + 1) >> 61))
          {
            unint64_t v50 = v46 - (void)v48;
            unint64_t v51 = (uint64_t)(v46 - (void)v48) >> 2;
            if (v51 <= v49 + 1) {
              unint64_t v51 = v49 + 1;
            }
            if (v50 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v51;
            }
            if (v52)
            {
              long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v52);
              uint64_t v48 = (unint64_t *)v4[7];
              double v47 = (unint64_t *)v4[8];
            }
            else
            {
              long long v53 = 0;
            }
            __int16 v61 = (unint64_t *)&v53[8 * v49];
            double v62 = &v53[8 * v52];
            *__int16 v61 = v27;
            long long v55 = v61 + 1;
            while (v47 != v48)
            {
              unint64_t v63 = *--v47;
              *--__int16 v61 = v63;
            }
            goto LABEL_101;
          }
        }
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

void sub_223504E90(void *a1)
{
}

void sub_223504EA0(void *a1)
{
}

void EQKitPath::EQKitPath(EQKitPath *this, CGPathRef path)
{
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *((unsigned char *)this + 120) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 65) = 0u;
  if (path) {
    MutableCopdouble y = CGPathCreateMutableCopy(path);
  }
  else {
    MutableCopdouble y = 0;
  }
  *(void *)this = MutableCopy;
  int64x2_t v4 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + _Block_object_dispose(&STACK[0x560], 8) = v4;
  *((int64x2_t *)this + 9) = v4;
}

void sub_223504F20(_Unwind_Exception *a1)
{
  unsigned int v5 = *(void **)(v1 + 56);
  if (v5)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  EQKitPath::EQKitPath(v3, v2, v1);
  _Unwind_Resume(a1);
}

int64x2_t EQKitPath::resetCache(int64x2_t *this)
{
  int64x2_t result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  this[8] = result;
  this[9] = result;
  return result;
}

void EQKitPath::EQKitPath(EQKitPath *this, const __CTFont *a2, int a3)
{
  *((unsigned char *)this + 120) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((unsigned char *)this + 80) = 0;
  if (a2)
  {
    *(_DWORD *)CGGlyph glyphs = -1;
    memset(&v13, 0, sizeof(v13));
    CGAffineTransformMakeScale(&v13, 1.0, -1.0);
    if ((a3 - 0x10000) >> 20)
    {
      CFIndex v7 = 1;
      LOWORD(v6) = a3;
    }
    else
    {
      unsigned int v6 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      CFIndex v7 = 2;
    }
    characters[0] = v6;
    if (CTFontGetGlyphsForCharacters(a2, characters, glyphs, v7))
    {
      *(void *)this = CTFontCreatePathForGlyph(a2, glyphs[0], &v13);
    }
    else
    {
      CFStringRef v8 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], characters, v7);
      CFStringRef v9 = v8;
      if (v8)
      {
        v16.NSUInteger length = CFStringGetLength(v8);
        v16.CFIndex location = 0;
        double v10 = CTFontCreateForString(a2, v9, v16);
        uint64_t v11 = v10;
        if (v10)
        {
          CTFontGetGlyphsForCharacters(v10, characters, glyphs, v7);
          *(void *)this = CTFontCreatePathForGlyph(v11, glyphs[0], &v13);
          CFRelease(v11);
        }
        CFRelease(v9);
      }
    }
  }
  int64x2_t v12 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + _Block_object_dispose(&STACK[0x560], 8) = v12;
  *((int64x2_t *)this + 9) = v12;
}

void sub_2235050CC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  int64x2_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)v1[1];
  if (v5)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::EQKitPath(EQKitPath *this, const EQKitPath *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((void *)this + 1, *((const void **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 4);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<EQKitPath::PathElement>::__init_with_size[abi:ne180100]<EQKitPath::PathElement*,EQKitPath::PathElement*>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  *((void *)this + 7) = 0;
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  long long v4 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&STACK[0x560], 8) = v4;
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  long long v5 = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + _Block_object_dispose(&STACK[0x560], 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = v5;
  MutableCopdouble y = *(const CGPath **)a2;
  if (*(void *)a2) {
    MutableCopdouble y = CGPathCreateMutableCopy(MutableCopy);
  }
  *(void *)this = MutableCopy;
}

void sub_2235051E8(_Unwind_Exception *exception_object)
{
  unsigned int v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
  }
  CFIndex v7 = *v3;
  if (*v3)
  {
    v1[5] = v7;
    operator delete(v7);
  }
  CFStringRef v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::~EQKitPath(CGPathRef *this)
{
  CGPathRelease(*this);
  uint64_t v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = this[4];
  if (v3)
  {
    this[5] = v3;
    operator delete(v3);
  }
  long long v4 = this[1];
  if (v4)
  {
    this[2] = v4;
    operator delete(v4);
  }
}

void __clang_call_terminate(void *a1)
{
}

uint64_t EQKitPath::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    MutableCopdouble y = *(const CGPath **)a2;
    if (*(void *)a2) {
      MutableCopdouble y = CGPathCreateMutableCopy(MutableCopy);
    }
    *(void *)a1 = MutableCopy;
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a1 + 56), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    long long v6 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = v6;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x560], 8) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
  }
  return a1;
}

const __CTFont *EQKitPath::newPathFromCharacterWithFont(EQKitPath *this, CTFontRef font, const __CTFont *a3)
{
  unint64_t v3 = font;
  UniChar characters = (unsigned __int16)this;
  CGGlyph glyphs = -1;
  if (font)
  {
    if (CTFontGetGlyphsForCharacters(font, &characters, &glyphs, 1))
    {
      memset(&v5, 0, sizeof(v5));
      CGAffineTransformMakeScale(&v5, 1.0, -1.0);
      if (CTFontCreatePathForGlyph(v3, glyphs, &v5)) {
        operator new();
      }
    }
    return 0;
  }
  return v3;
}

void sub_22350541C(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitPath::newPathFromGlyphWithFont(EQKitPath *this, const __CTFont *a2, const __CTFont *a3)
{
  CGGlyph v4 = (unsigned __int16)this;
  memset(&v6, 0, sizeof(v6));
  CGAffineTransformMakeScale(&v6, 1.0, -1.0);
  if (CTFontCreatePathForGlyph(a2, v4, &v6)) {
    operator new();
  }
  return 0;
}

void sub_2235054D8(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

void EQKitPath::extractPath(EQKitPath *this)
{
  if (!*((unsigned char *)this + 80))
  {
    *((unsigned char *)this + 80) = 1;
    info[0] = 0;
    info[1] = this;
    char v2 = 0;
    CGPathApply(*(CGPathRef *)this, info, (CGPathApplierFunction)EQKitPath::extractorFunction);
  }
}

CGFloat *EQKitPath::computePathBounds(CGFloat *this)
{
  uint64_t v1 = this;
  *((unsigned char *)this + 120) = 1;
  PathBoundingBoCGFloat x = CGPathGetPathBoundingBox((CGPathRef)*(void *)this);
  v1[11] = PathBoundingBox.origin.x;
  v1[12] = PathBoundingBox.origin.y;
  v1 += 11;
  v1[2] = PathBoundingBox.size.width;
  v1[3] = PathBoundingBox.size.height;
  return v1;
}

BOOL EQKitPath::elementMinMax(EQKitPath *this, unint64_t a2, CGPoint *a3, CGPoint *a4)
{
  EQKitPath::extractPath(this);
  double v8 = *MEMORY[0x263F00148];
  double v9 = *(double *)(MEMORY[0x263F00148] + 8);
  uint64_t v10 = *((void *)this + 4);
  if (a2 >= (*((void *)this + 5) - v10) >> 4) {
    goto LABEL_35;
  }
  uint64_t v11 = *(int *)(v10 + 16 * a2);
  uint64_t v12 = v11 > 3 ? 0 : qword_223837B78[v11];
  EQKitPath::subpathContainingElement((unint64_t **)this, a2, (uint64_t)&v30);
  unint64_t v13 = v30 >= a2 ? v31 + v30 : a2;
  unint64_t v14 = v30 >= v13 - 1 ? v31 + v30 : v13 - 1;
  unint64_t v15 = v14 - 1;
  BOOL v16 = v13 != v31 + v30 || v32 == 0;
  unint64_t v17 = v16 ? v13 - 1 : v15;
  if (v17 == 0x7FFFFFFFFFFFFFFFLL || (uint64_t v18 = EQKitPath::endPointIndexForElement(this, v17), v18 == 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t v19 = 0;
  }
  else
  {
    double v20 = (double *)(*((void *)this + 1) + 16 * v18);
    double v8 = *v20;
    double v9 = v20[1];
    uint64_t v19 = 1;
  }
  unint64_t v21 = *(void *)(v10 + 16 * a2 + 8);
  if (v21 >= v21 + v12)
  {
LABEL_35:
    BOOL result = 0;
    double v25 = v8;
    double v24 = v9;
  }
  else
  {
    char v22 = (double *)(*((void *)this + 1) + 16 * v21 + 8);
    uint64_t v23 = v12;
    double v24 = v9;
    double v25 = v8;
    uint64_t v26 = v19;
    do
    {
      double v28 = *(v22 - 1);
      double v27 = *v22;
      if (v26)
      {
        if (v28 < v25) {
          double v25 = *(v22 - 1);
        }
        if (v27 < v24) {
          double v24 = *v22;
        }
        if (v28 > v8) {
          double v8 = *(v22 - 1);
        }
        if (v27 > v9) {
          double v9 = *v22;
        }
      }
      else
      {
        double v9 = *v22;
        double v8 = *(v22 - 1);
        double v25 = v8;
        double v24 = *v22;
      }
      ++v26;
      v22 += 2;
      --v23;
    }
    while (v23);
    BOOL result = (unint64_t)(v12 + v19) > 1;
  }
  a3->CGFloat x = v25;
  a3->double y = v24;
  a4->CGFloat x = v8;
  a4->double y = v9;
  return result;
}

void EQKitPath::subpathContainingElement(unint64_t **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  EQKitPath::extractPath((EQKitPath *)this);
  *(_OWORD *)a3 = xmmword_223837AD0;
  *(unsigned char *)(a3 + 16) = 0;
  CGAffineTransform v6 = this[4];
  unint64_t v7 = ((char *)this[5] - (char *)v6) >> 4;
  if (v7 > a2)
  {
    double v9 = this[7];
    double v8 = this[8];
    if (v8 != v9)
    {
      unint64_t v10 = v8 - v9;
      uint64_t v11 = this[7];
      do
      {
        unint64_t v12 = v10 >> 1;
        unint64_t v13 = &v11[v10 >> 1];
        unint64_t v15 = *v13;
        unint64_t v14 = v13 + 1;
        v10 += ~(v10 >> 1);
        if (v15 > a2) {
          unint64_t v10 = v12;
        }
        else {
          uint64_t v11 = v14;
        }
      }
      while (v10);
      if (v11 != v9)
      {
        uint64_t v16 = *(v11 - 1);
        if (v11 != v8) {
          unint64_t v7 = *v11;
        }
        int v17 = v6[2 * v7 - 2];
        *(void *)a3 = v16;
        *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v7 - v16;
        *(unsigned char *)(a3 + 16) = v17 == 4;
      }
    }
  }
}

uint64_t EQKitPath::endPointIndexForElement(EQKitPath *this, unint64_t a2)
{
  EQKitPath::extractPath(this);
  uint64_t v4 = *((void *)this + 4);
  if (a2 >= (*((void *)this + 5) - v4) >> 4) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v5 = *(int *)(v4 + 16 * a2);
  if (v5 > 3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return qword_223837B58[v5] + *(void *)(v4 + 16 * a2 + 8);
  }
}

void EQKitPath::quantizeElementEdge(EQKitPath *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  EQKitPath::extractPath(a1);
  uint64_t v10 = *((void *)a1 + 4);
  if (a2 < (*((void *)a1 + 5) - v10) >> 4)
  {
    uint64_t v11 = (int *)(v10 + 16 * a2);
    int v12 = *v11;
    if ((*v11 - 2) < 2)
    {
      EQKitPath::subpathContainingElement((unint64_t **)a1, a2, (uint64_t)&v23);
      if (v23 >= a2) {
        unint64_t v14 = v24 + v23;
      }
      else {
        unint64_t v14 = a2;
      }
      if (v23 >= v14 - 1) {
        unint64_t v15 = v24 + v23;
      }
      else {
        unint64_t v15 = v14 - 1;
      }
      unint64_t v16 = v15 - 1;
      if (v14 != v24 + v23 || v25 == 0) {
        unint64_t v18 = v14 - 1;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL
        || (uint64_t v19 = EQKitPath::endPointIndexForElement(a1, v18), v19 == 0x7FFFFFFFFFFFFFFFLL))
      {
        uint64_t v20 = 0;
      }
      else
      {
        *(_OWORD *)uint64_t v26 = *(_OWORD *)(*((void *)a1 + 1) + 16 * v19);
        uint64_t v20 = 1;
      }
      uint64_t v21 = *v11;
      if (v21 > 3)
      {
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v22 = qword_223837B78[v21];
        memcpy(&v26[2 * v20], (const void *)(*((void *)a1 + 1) + 16 * *(void *)(v10 + 16 * a2 + 8)), 16 * v22);
      }
      _quantizeCurve((uint64_t)v26, v22 + v20, a3, a4, a5);
    }
    else if (v12 == 4 || v12 == 1)
    {
      v26[0] = 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      if (EQKitPath::isLineTo((unint64_t **)a1, a2, v26, &v23, 0)) {
        _quantizeLine(a3, a4, a5, *(double *)(*((void *)a1 + 1) + 16 * v26[0]), *(double *)(*((void *)a1 + 1) + 16 * v26[0] + 8), *(double *)(*((void *)a1 + 1) + 16 * v23), *(double *)(*((void *)a1 + 1) + 16 * v23 + 8));
      }
    }
  }
}

BOOL EQKitPath::isLineTo(unint64_t **this, unint64_t a2, unint64_t *a3, unint64_t *a4, const EQKitPath::Subpath *a5)
{
  if (a5)
  {
    long long v22 = *(_OWORD *)a5;
    uint64_t v23 = *((void *)a5 + 2);
  }
  else
  {
    EQKitPath::subpathContainingElement(this, a2, (uint64_t)&v22);
  }
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  *a4 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v9 = v22;
  if (a2 < (unint64_t)v22 || a2 - (unint64_t)v22 >= *((void *)&v22 + 1)) {
    return 0;
  }
  if (a2 <= (unint64_t)v22) {
    unint64_t v12 = *((void *)&v22 + 1) + v22;
  }
  else {
    unint64_t v12 = a2;
  }
  unint64_t v13 = v12 - 1;
  unint64_t v14 = this[4];
  int v15 = v14[2 * a2];
  if (a2 == (void)v22 && ((int v16 = v14[2 * v13], !v15) ? (v17 = v16 == 4) : (v17 = 0), v17))
  {
    unint64_t v18 = *((void *)&v22 + 1) + a2;
    if (v13 > a2) {
      unint64_t v18 = v13;
    }
    unint64_t v13 = v18 - 1;
  }
  else
  {
    if (a2 + 1 == *((void *)&v22 + 1) + (void)v22 && v15 == 4)
    {
      uint64_t v19 = (EQKitPath *)this;
      goto LABEL_26;
    }
    if (v15 != 1)
    {
      unint64_t v20 = *a3;
      return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  uint64_t v19 = (EQKitPath *)this;
  unint64_t v9 = a2;
LABEL_26:
  *a4 = EQKitPath::endPointIndexForElement(v19, v9);
  unint64_t v20 = EQKitPath::endPointIndexForElement((EQKitPath *)this, v13);
  *a3 = v20;
  return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _quantizeLine(uint64_t result, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  if ((result & 0xFFFFFFFD) != 0) {
    return result;
  }
  int v7 = result & 0xFFFFFFFE;
  uint64_t v8 = *a3;
  unint64_t v9 = (a3[1] - *a3) >> 3;
  if (a5 == a7)
  {
    float v10 = a5 * (double)*(unint64_t *)(a2 + 8);
    uint64_t v11 = (uint64_t)(float)(floorf(v10) - (float)*(uint64_t *)a2);
    goto LABEL_5;
  }
  double v14 = (double)*(unint64_t *)(a2 + 8);
  float v15 = a5 * v14;
  float v16 = (float)*(uint64_t *)a2;
  uint64_t v11 = (uint64_t)(float)(floorf(v15) - v16);
  float v17 = a7 * v14;
  float v18 = floorf(v17);
  uint64_t v19 = (uint64_t)(float)(v18 - v16);
  if (a4 == a6)
  {
    if (v11 <= v19) {
      uint64_t v20 = (uint64_t)(float)(v18 - v16);
    }
    else {
      uint64_t v20 = v11;
    }
    if (v11 >= v19) {
      uint64_t v11 = (uint64_t)(float)(v18 - v16);
    }
    uint64_t v21 = v11 & ~(v11 >> 63);
    int64_t v22 = v9 - 1;
    if (v20 < v22) {
      int64_t v22 = v20;
    }
    if (v21 <= v22)
    {
      if (a6 >= a4) {
        double v23 = a4;
      }
      else {
        double v23 = a6;
      }
      if (a4 < a6) {
        a4 = a6;
      }
      do
      {
        double v24 = *(double *)(v8 + 8 * v21);
        if (v7 == 2)
        {
          if (v24 >= a4) {
            double v25 = *(double *)(v8 + 8 * v21);
          }
          else {
            double v25 = a4;
          }
        }
        else if (v23 >= v24)
        {
          double v25 = *(double *)(v8 + 8 * v21);
        }
        else
        {
          double v25 = v23;
        }
        *(double *)(v8 + 8 * v21) = v25;
      }
      while (v21++ < v22);
    }
  }
  else
  {
    if (v11 == v19)
    {
LABEL_5:
      if (v11 < 0 || v9 <= v11) {
        return result;
      }
      double v12 = *(double *)(v8 + 8 * v11);
      if (v7 == 2)
      {
        if (a4 < a6) {
          a4 = a6;
        }
        BOOL v13 = v12 < a4;
      }
      else
      {
        if (a6 < a4) {
          a4 = a6;
        }
        BOOL v13 = a4 < v12;
      }
      if (!v13) {
        a4 = *(double *)(v8 + 8 * v11);
      }
LABEL_39:
      *(double *)(v8 + 8 * v11) = a4;
      return result;
    }
    if (v11 > v19) {
      double v27 = a4;
    }
    else {
      double v27 = a6;
    }
    if (v11 > v19) {
      double v28 = a5;
    }
    else {
      double v28 = a7;
    }
    if (v11 > v19)
    {
      unint64_t v29 = v19;
    }
    else
    {
      a6 = a4;
      unint64_t v29 = v11;
    }
    if (v11 > v19)
    {
      double v30 = a7;
    }
    else
    {
      uint64_t v11 = v19;
      double v30 = a5;
    }
    double v31 = (v27 - a6) / (v28 - v30);
    unint64_t v32 = v29 + 1;
    a4 = a6 + ((double)(uint64_t)(v29 + 1 + *(void *)a2) / v14 - v30) * v31;
    if ((v29 & 0x8000000000000000) == 0 && v29 < v9)
    {
      double v33 = *(double *)(v8 + 8 * v29);
      if (a4 >= a6) {
        double v34 = a6;
      }
      else {
        double v34 = a4;
      }
      if (v34 >= v33) {
        double v34 = *(double *)(v8 + 8 * v29);
      }
      if (a6 < a4) {
        a6 = a4;
      }
      if (v33 >= a6) {
        a6 = *(double *)(v8 + 8 * v29);
      }
      if (v7 != 2) {
        a6 = v34;
      }
      *(double *)(v8 + 8 * v29) = a6;
    }
    if ((uint64_t)v32 < v11)
    {
      double v35 = *(double *)(a2 + 16);
      do
      {
        double v36 = a4;
        a4 = a4 + v31 * v35;
        if ((v32 & 0x8000000000000000) == 0 && v32 < v9)
        {
          double v37 = *(double *)(v8 + 8 * v32);
          if (a4 >= v36) {
            double v38 = v36;
          }
          else {
            double v38 = a4;
          }
          if (v38 >= v37) {
            double v38 = *(double *)(v8 + 8 * v32);
          }
          if (v36 < a4) {
            double v36 = a4;
          }
          if (v37 >= v36) {
            double v36 = *(double *)(v8 + 8 * v32);
          }
          if (v7 != 2) {
            double v36 = v38;
          }
          *(double *)(v8 + 8 * v32) = v36;
        }
        ++v32;
      }
      while (v11 != v32);
    }
    if ((v11 & 0x8000000000000000) == 0 && v11 < v9)
    {
      double v39 = *(double *)(v8 + 8 * v11);
      if (v27 >= a4) {
        double v40 = a4;
      }
      else {
        double v40 = v27;
      }
      if (v40 >= v39) {
        double v40 = *(double *)(v8 + 8 * v11);
      }
      if (a4 < v27) {
        a4 = v27;
      }
      if (v39 >= a4) {
        a4 = *(double *)(v8 + 8 * v11);
      }
      if (v7 != 2) {
        a4 = v40;
      }
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t _quantizeCurve(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  float64x2_t v8 = *(float64x2_t *)result;
  double v9 = *(double *)(result + 8);
  double v10 = v9;
  double v11 = *(double *)result;
  double v12 = *(double *)result;
  double v13 = v9;
  if (a2 >= 2)
  {
    unint64_t v14 = a2 - 1;
    float v15 = (double *)(result + 24);
    double v13 = *(double *)(result + 8);
    double v12 = *(double *)result;
    double v11 = *(double *)result;
    double v10 = v13;
    do
    {
      double v16 = *(v15 - 1);
      double v17 = *v15;
      if (v16 < v12) {
        double v12 = *(v15 - 1);
      }
      if (v17 < v13) {
        double v13 = *v15;
      }
      if (v11 < v16) {
        double v11 = *(v15 - 1);
      }
      if (v10 < v17) {
        double v10 = *v15;
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  if ((a3 & 0xFFFFFFFD) == 0)
  {
    double v18 = (double)*(unint64_t *)(a4 + 8);
    float v19 = v13 * v18;
    float v20 = (float)*(uint64_t *)a4;
    unint64_t v21 = (uint64_t)(float)(floorf(v19) - v20);
    float v22 = v10 * v18;
    if (v21 == (uint64_t)(float)(floorf(v22) - v20))
    {
      if ((v21 & 0x8000000000000000) == 0)
      {
        uint64_t v23 = *a5;
        if ((a5[1] - *a5) >> 3 > v21)
        {
          double v24 = *(double *)(v23 + 8 * v21);
          if ((a3 & 0xFFFFFFFE) == 2)
          {
            if (v12 >= v11) {
              double v25 = v12;
            }
            else {
              double v25 = v11;
            }
            _NF = v24 < v25;
          }
          else
          {
            if (v11 >= v12) {
              double v25 = v12;
            }
            else {
              double v25 = v11;
            }
            _NF = v25 < v24;
          }
          if (_NF) {
            double v24 = v25;
          }
          *(double *)(v23 + 8 * v21) = v24;
        }
      }
    }
    else if (v11 - v12 <= *(double *)(a4 + 24))
    {
      unint64_t v47 = result + 16 * a2;
      double v48 = *(double *)(v47 - 16);
      double v49 = *(double *)(v47 - 8);
LABEL_37:
      return _quantizeLine(a3, a4, a5, v8.f64[0], v9, v48, v49);
    }
    else
    {
      double v27 = (double *)(result + 16 * a2 - 16);
      uint64_t v28 = 2;
      if (a2 <= 2) {
        uint64_t v29 = 2;
      }
      else {
        uint64_t v29 = a2;
      }
      double v30 = (double *)(result + 24);
      do
      {
        if (v29 == v28) {
          goto LABEL_36;
        }
        double v31 = *v27 - v8.f64[0];
        double v32 = *(double *)(result + 16 * a2 - 8) - v9;
        double v33 = fabs(v31 * (v9 - *v30) - (v8.f64[0] - *(v30 - 1)) * v32);
        *(float *)&double v31 = v32 * v32 + v31 * v31;
        v30 += 2;
        ++v28;
      }
      while (v33 / sqrtf(*(float *)&v31) <= *(double *)(a4 + 32));
      if (v28 - 1 >= a2)
      {
LABEL_36:
        double v48 = *v27;
        double v49 = *(double *)(result + 16 * a2 - 8);
        goto LABEL_37;
      }
      if (a2 == 3)
      {
        unint64_t v50 = (const double *)(result + 16);
        float64x2x2_t v66 = vld2q_f64(v50);
        __asm { FMOV            V4.2D, #0.5 }
        int64x2_t v52 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0), (int8x16_t)v66.val[0], 8uLL), v66.val[0]), _Q4);
        int64x2_t v53 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v66.val[1], 8uLL), v66.val[1]), _Q4);
        v66.val[0] = (float64x2_t)vzip2q_s64(v52, v53);
        float64x2_t v60 = *(float64x2_t *)result;
        float64x2_t v61 = (float64x2_t)vzip1q_s64(v52, v53);
        float64x2_t v62 = vmulq_f64(vaddq_f64(v61, v66.val[0]), _Q4);
        float64x2_t v56 = v62;
        float64x2_t v57 = v66.val[0];
        float64x2_t v58 = *(float64x2_t *)(result + 32);
        _quantizeCurve(&v60, 3, a3, a4, a5);
        uint64_t v46 = 3;
      }
      else
      {
        if (a2 != 4) {
          return result;
        }
        uint64_t v34 = 0;
        __asm { FMOV            V1.2D, #0.5 }
        do
        {
          float64x2_t v39 = *(float64x2_t *)(result + v34 * 16 + 16);
          v54[v34++] = vmulq_f64(vaddq_f64(v8, v39), _Q1);
          float64x2_t v8 = v39;
        }
        while (v34 != 3);
        double v40 = v54;
        double v41 = (const double *)v55;
        int8x16_t v42 = (int8x16_t)vld1q_dup_f64(v40->f64);
        double v40 = (float64x2_t *)((char *)v40 + 8);
        float64x2x2_t v67 = vld2q_f64(v41);
        int8x16_t v43 = (int8x16_t)vld1q_dup_f64(v40->f64);
        int64x2_t v44 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v42, (int8x16_t)v67.val[0], 8uLL), v67.val[0]), _Q1);
        v67.val[0] = vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v43, (int8x16_t)v67.val[1], 8uLL), v67.val[1]), _Q1);
        v67.val[1] = (float64x2_t)vzip2q_s64(v44, (int64x2_t)v67.val[0]);
        float64x2_t v60 = *(float64x2_t *)result;
        float64x2_t v61 = v54[0];
        float64x2_t v62 = (float64x2_t)vzip1q_s64(v44, (int64x2_t)v67.val[0]);
        float64x2_t v63 = vmulq_f64(vaddq_f64(v62, v67.val[1]), _Q1);
        float64x2_t v56 = v63;
        float64x2_t v57 = v67.val[1];
        long long v45 = *(_OWORD *)(result + 48);
        float64x2_t v58 = v55[1];
        long long v59 = v45;
        _quantizeCurve(&v60, 4, a3, a4, a5);
        uint64_t v46 = 4;
      }
      return _quantizeCurve(&v56, v46, a3, a4, a5);
    }
  }
  return result;
}

void EQKitPath::describeElement(EQKitPath *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  EQKitPath::extractPath(this);
  if (a2 < (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 4)
  {
    EQKitPath::subpathContainingElement((unint64_t **)this, a2, (uint64_t)&v23);
    if (v23 >= a2) {
      unint64_t v6 = v24 + v23;
    }
    else {
      unint64_t v6 = a2;
    }
    if (v23 >= v6 - 1) {
      unint64_t v7 = v24 + v23;
    }
    else {
      unint64_t v7 = v6 - 1;
    }
    unint64_t v8 = v7 - 1;
    if (v6 != v24 + v23 || v25 == 0) {
      unint64_t v10 = v6 - 1;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v11 = v10 != 0x7FFFFFFFFFFFFFFFLL && EQKitPath::endPointForElement(this, v10, v26, 0);
    uint64_t v12 = *((void *)this + 4);
    uint64_t v13 = *(int *)(v12 + 16 * a2);
    if (v13 <= 3)
    {
      uint64_t v14 = qword_223837B78[v13];
      memcpy(&v26[v11], (const void *)(*((void *)this + 1) + 16 * *(void *)(v12 + 16 * a2 + 8)), 16 * v14);
      v11 += v14;
    }
    if (v13 > 4) {
      float v15 = "unknown";
    }
    else {
      float v15 = off_2646AF530[v13];
    }
    MEMORY[0x223CB8D60](a3, v15);
    std::string::append(a3, " ");
    if (v11)
    {
      float v22 = (char *)v26 + 8;
      do
      {
        _appendFormat(a3, "(%f, %f), ", v16, v17, v18, v19, v20, v21, *((void *)v22 - 1));
        v22 += 16;
        --v11;
      }
      while (v11);
    }
  }
}

void sub_2235063A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL EQKitPath::endPointForElement(EQKitPath *a1, unint64_t a2, _OWORD *a3, void *a4)
{
  EQKitPath::extractPath(a1);
  unint64_t v8 = EQKitPath::endPointIndexForElement(a1, a2);
  uint64_t v9 = *((void *)a1 + 1);
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v11 = (void *)((char *)a1 + 8);
  unint64_t v12 = (v10 - v9) >> 4;
  if (v8 < v12)
  {
    if (a4) {
      uint64_t v13 = a4;
    }
    else {
      uint64_t v13 = v11;
    }
    *a3 = *(_OWORD *)(*v13 + 16 * v8);
  }
  return v8 < v12;
}

void _appendFormat(std::string *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __s[0] = 0;
  __s[1] = &a9;
  vasprintf(__s, a2, &a9);
  std::string::append(a1, __s[0]);
  free(__s[0]);
}

void EQKitPath::describe(EQKitPath *this@<X0>, std::string *a2@<X8>)
{
  EQKitPath::extractPath(this);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((void *)this + 5) != *((void *)this + 4))
  {
    unint64_t v10 = 0;
    do
    {
      _appendFormat(a2, "[%2lu] ", v4, v5, v6, v7, v8, v9, v10);
      EQKitPath::describeElement(this, v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::append(a2, "\n");
      ++v10;
    }
    while (v10 < (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 4);
  }
}

void sub_223506570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t EQKitPath::findJoinForEdge(void *a1, int a2, _OWORD *a3, void *a4)
{
  EQKitPath::extractPath((EQKitPath *)a1);
  switch(a2)
  {
    case 0:
      uint64_t v8 = a1 + 16;
      goto LABEL_6;
    case 1:
      uint64_t v8 = a1 + 18;
      goto LABEL_6;
    case 2:
      uint64_t v8 = a1 + 17;
      goto LABEL_6;
    case 3:
      uint64_t v8 = a1 + 19;
LABEL_6:
      unint64_t v9 = *v8;
      if (*v8 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_7;
      }
      goto LABEL_48;
    default:
LABEL_7:
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v11 = a1[5] - a1[4];
      if (!v11) {
        return v10;
      }
      unint64_t v12 = 0;
      uint64_t v13 = (long long *)MEMORY[0x263F00148];
      unint64_t v14 = v11 >> 4;
      double v16 = *MEMORY[0x263F00148];
      double v15 = *(double *)(MEMORY[0x263F00148] + 8);
      if (v14 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v14;
      }
      unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
  do
  {
    long long v25 = *v13;
    if (!EQKitPath::endPointForElement((EQKitPath *)a1, v12, &v25, 0)) {
      goto LABEL_16;
    }
    if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
LABEL_15:
      unint64_t v9 = v12;
      double v15 = v19;
      double v16 = v18;
      goto LABEL_16;
    }
    if (a2 == 2)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*(double *)&v25 > v16) {
        goto LABEL_15;
      }
      if (*(double *)&v25 == v16 && *((double *)&v25 + 1) < v15) {
        goto LABEL_15;
      }
    }
    else if (a2 == 1)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) < v15) {
        goto LABEL_15;
      }
      if (*((double *)&v25 + 1) == v15 && *(double *)&v25 < v16) {
        goto LABEL_15;
      }
    }
    else if (a2)
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) > v15 || *((double *)&v25 + 1) == v15 && *(double *)&v25 < v16) {
        goto LABEL_15;
      }
    }
    else
    {
      double v19 = *((double *)&v25 + 1);
      double v18 = *(double *)&v25;
      if (*(double *)&v25 < v16 || *(double *)&v25 == v16 && *((double *)&v25 + 1) < v15) {
        goto LABEL_15;
      }
    }
LABEL_16:
    ++v12;
  }
  while (v17 != v12);
  uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9 != 0x7FFFFFFFFFFFFFFFLL)
  {
    switch(a2)
    {
      case 0:
        float v22 = a1 + 16;
        goto LABEL_47;
      case 1:
        float v22 = a1 + 18;
        goto LABEL_47;
      case 2:
        float v22 = a1 + 17;
        goto LABEL_47;
      case 3:
        float v22 = a1 + 19;
LABEL_47:
        *float v22 = v9;
        break;
      default:
        break;
    }
LABEL_48:
    if (a4) {
      unint64_t v23 = a4;
    }
    else {
      unint64_t v23 = a1 + 1;
    }
    EQKitPath::endPointForElement((EQKitPath *)a1, v9, a3, v23);
    return v9;
  }
  return v10;
}

void EQKitPath::appendToCGPath(uint64_t *a1, CGPath *a2, const CGAffineTransform *a3, uint64_t *a4)
{
  EQKitPath::extractPath((EQKitPath *)a1);
  if (!a4) {
    a4 = a1 + 1;
  }
  if (a4[1] - *a4 == a1[2] - a1[1])
  {
    for (uint64_t i = a1[4]; i != a1[5]; i += 16)
    {
      uint64_t v9 = *(void *)(i + 8);
      uint64_t v10 = *a4;
      uint64_t v11 = (CGFloat *)(*a4 + 16 * v9);
      switch(*(_DWORD *)i)
      {
        case 0:
          CGPathMoveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
          break;
        case 1:
          CGPathAddLineToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
          break;
        case 2:
          CGPathAddQuadCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3]);
          break;
        case 3:
          CGPathAddCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3], v11[4], v11[5]);
          break;
        case 4:
          CGPathCloseSubpath(a2);
          break;
        default:
          continue;
      }
    }
  }
}

uint64_t EQKitPath::oppositeEdge(EQKitPath *this, CGRectEdge a2)
{
  if (this > 2) {
    return 1;
  }
  else {
    return dword_223837B98[(int)this];
  }
}

uint64_t EQKitPath::findCurveMirrorParallelWithAxis(EQKitPath *a1, int a2, double *a3)
{
  *a3 = 0.0;
  EQKitPath::extractPath(a1);
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  if (v7 == v6) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x263F00148];
  while (1)
  {
    if (*(_DWORD *)(v6 + v8) != 3) {
      goto LABEL_36;
    }
    uint64_t v11 = v6 + v8;
    uint64_t v12 = *(void *)(v6 + v8 + 8);
    unint64_t v13 = v12 + 1;
    unint64_t v14 = v12 + 2;
    uint64_t v15 = *((void *)a1 + 1);
    unint64_t v16 = (*((void *)a1 + 2) - v15) >> 4;
    uint64_t v17 = (double *)(v16 <= v13 ? v10 : v15 + 16 * v13);
    double v18 = *v17;
    double v19 = v17[1];
    uint64_t v20 = (double *)(v16 <= v14 ? v10 : v15 + 16 * v14);
    double v21 = v20[1];
    double v22 = *v20 - v18;
    double v23 = v21 - v19;
    double v24 = a2 == 1 ? v21 - v19 : *v20 - v18;
    if (v24 != 0.0) {
      goto LABEL_36;
    }
    EQKitPath::subpathContainingElement((unint64_t **)a1, v9, (uint64_t)v39);
    unint64_t v25 = v39[0];
    if (v9 + 1 < v39[1] + v39[0]) {
      unint64_t v25 = v9 + 1;
    }
    uint64_t v6 = *((void *)a1 + 4);
    if (*(_DWORD *)(v6 + 16 * v25) == 3)
    {
      unint64_t v26 = *(void *)(v11 + 8) + 2;
      unint64_t v27 = *(void *)(v6 + 16 * v25 + 8);
      uint64_t v28 = *((void *)a1 + 1);
      unint64_t v29 = (*((void *)a1 + 2) - v28) >> 4;
      double v30 = (double *)(v29 <= v26 ? v10 : v28 + 16 * v26);
      double v31 = v30[1];
      double v32 = (double *)(v29 <= v27 ? v10 : v28 + 16 * v27);
      double v33 = v32[1];
      double v34 = *v32 - *v30;
      double v35 = v33 - v31;
      double v36 = a2 == 1 ? v33 - v31 : *v32 - *v30;
      if (v36 == 0.0)
      {
        if (v22 > 0.0 && v34 > 0.0) {
          goto LABEL_40;
        }
        if (v22 < 0.0 && v34 < 0.0)
        {
          double v38 = -1.0;
          if (v22 <= 0.0) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        if (v23 > 0.0 && v35 > 0.0) {
          goto LABEL_40;
        }
        if (v23 < 0.0 && v35 < 0.0) {
          break;
        }
      }
    }
    uint64_t v7 = *((void *)a1 + 5);
LABEL_36:
    ++v9;
    v8 += 16;
    if (v9 >= (v7 - v6) >> 4) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  double v38 = -1.0;
  if (v23 > 0.0) {
LABEL_40:
  }
    double v38 = 1.0;
LABEL_41:
  *a3 = v38;
  return v9;
}

uint64_t EQKitPath::addLineToAfterElement(EQKitPath *this, unint64_t a2)
{
  uint64_t v4 = EQKitPath::endPointIndexForElement(this, a2);
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = (char **)((char *)this + 8);
    uint64_t v6 = *((void *)this + 1);
    uint64_t v8 = *((void *)this + 4);
    long long v36 = *(_OWORD *)(v6 + 16 * v4);
    *((void *)&v35 + 1) = (*((void *)this + 2) - v6) >> 4;
    *(void *)&long long v35 = 1;
    unint64_t v9 = (_OWORD *)*((void *)this + 5);
    uint64_t v10 = (uint64_t)v9 - v8;
    if (a2 + 1 >= ((uint64_t)v9 - v8) >> 4)
    {
      unint64_t v11 = *((void *)this + 6);
      if ((unint64_t)v9 >= v11)
      {
        uint64_t v13 = v10 >> 4;
        unint64_t v14 = (v10 >> 4) + 1;
        if (v14 >> 60) {
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - v8;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        double v18 = &v17[16 * v13];
        double v19 = &v17[16 * v16];
        *(_OWORD *)double v18 = v35;
        uint64_t v12 = v18 + 16;
        double v21 = (char *)*((void *)this + 4);
        uint64_t v20 = (char *)*((void *)this + 5);
        if (v20 != v21)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
            v18 -= 16;
            v20 -= 16;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)*((void *)this + 4);
        }
        *((void *)this + 4) = v18;
        *((void *)this + 5) = v12;
        *((void *)this + 6) = v19;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v9 = v35;
        uint64_t v12 = v9 + 1;
      }
      *((void *)this + 5) = v12;
    }
    else
    {
      std::vector<EQKitPath::PathElement>::insert((uint64_t)this + 32, (char *)(v8 + 16 * (a2 + 1)), (char *)&v35);
    }
    unint64_t v22 = *((void *)this + 3);
    double v23 = (_OWORD *)*((void *)this + 2);
    if ((unint64_t)v23 >= v22)
    {
      uint64_t v25 = ((char *)v23 - *v7) >> 4;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 60) {
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v22 - (void)*v7;
      if (v27 >> 3 > v26) {
        unint64_t v26 = v27 >> 3;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28) {
        unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v28);
      }
      else {
        unint64_t v29 = 0;
      }
      double v30 = &v29[16 * v25];
      double v31 = &v29[16 * v28];
      *(_OWORD *)double v30 = v36;
      double v24 = v30 + 16;
      double v33 = (char *)*((void *)this + 1);
      double v32 = (char *)*((void *)this + 2);
      if (v32 != v33)
      {
        do
        {
          *((_OWORD *)v30 - 1) = *((_OWORD *)v32 - 1);
          v30 -= 16;
          v32 -= 16;
        }
        while (v32 != v33);
        double v32 = *v7;
      }
      *((void *)this + 1) = v30;
      *((void *)this + 2) = v24;
      *((void *)this + 3) = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *double v23 = v36;
      double v24 = v23 + 1;
    }
    *((void *)this + 2) = v24;
    return *((void *)&v35 + 1);
  }
  return v5;
}

char *std::vector<EQKitPath::PathElement>::insert(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v14 >> 60) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 4;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 3 > v14) {
      unint64_t v14 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    uint64_t v20 = &v19[16 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    unint64_t v28 = v20;
    unint64_t v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 3;
        }
        double v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v8, v22);
        uint64_t v20 = &v23[16 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        unint64_t v29 = &v23[16 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 16 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v3;
    unint64_t v28 = v20 + 16;
    uint64_t v4 = (char *)std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = __src + 16;
  }
  else
  {
    unint64_t v9 = __src + 16;
    uint64_t v10 = v6 - 16;
    unint64_t v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 16 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_223506F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::appendSubpathRect(EQKitPath *this, CGRect a2)
{
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  CGFloat MinX = CGRectGetMinX(a2);
  v113.origin.CGFloat x = x;
  v113.origin.CGFloat y = y;
  v113.size.CGFloat width = width;
  v113.size.CGFloat height = height;
  CGFloat MinY = CGRectGetMinY(v113);
  v114.origin.CGFloat x = x;
  v114.origin.CGFloat y = y;
  v114.size.CGFloat width = width;
  v114.size.CGFloat height = height;
  CGFloat MaxX = CGRectGetMaxX(v114);
  v115.origin.CGFloat x = x;
  v115.origin.CGFloat y = y;
  v115.size.CGFloat width = width;
  v115.size.CGFloat height = height;
  CGFloat v7 = CGRectGetMinY(v115);
  v116.origin.CGFloat x = x;
  v116.origin.CGFloat y = y;
  v116.size.CGFloat width = width;
  v116.size.CGFloat height = height;
  CGFloat v8 = CGRectGetMaxX(v116);
  v117.origin.CGFloat x = x;
  v117.origin.CGFloat y = y;
  v117.size.CGFloat width = width;
  v117.size.CGFloat height = height;
  CGFloat MaxY = CGRectGetMaxY(v117);
  v118.origin.CGFloat x = x;
  v118.origin.CGFloat y = y;
  v118.size.CGFloat width = width;
  v118.size.CGFloat height = height;
  CGFloat v10 = CGRectGetMinX(v118);
  v119.origin.CGFloat x = x;
  v119.origin.CGFloat y = y;
  v119.size.CGFloat width = width;
  v119.size.CGFloat height = height;
  double v11 = CGRectGetMaxY(v119);
  double v12 = v11;
  unint64_t v14 = (char **)((char *)this + 24);
  uint64_t v13 = (char *)*((void *)this + 3);
  uint64_t v16 = (void **)((char *)this + 8);
  uint64_t v15 = (CGFloat *)*((void *)this + 1);
  uint64_t v17 = (CGFloat *)*((void *)this + 2);
  uint64_t v18 = ((char *)v17 - (char *)v15) >> 4;
  unint64_t v19 = v18 + 1;
  if (v17 >= (CGFloat *)v13)
  {
    if (v19 >> 60) {
      goto LABEL_147;
    }
    uint64_t v21 = v13 - (char *)v15;
    uint64_t v22 = v21 >> 3;
    if (v21 >> 3 <= v19) {
      uint64_t v22 = v18 + 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v23);
      uint64_t v15 = (CGFloat *)*((void *)this + 1);
      uint64_t v17 = (CGFloat *)*((void *)this + 2);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[16 * v18];
    uint64_t v13 = &v24[16 * v23];
    *(CGFloat *)uint64_t v25 = v10;
    *((double *)v25 + 1) = v12;
    uint64_t v20 = v25 + 16;
    if (v17 != v15)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
        v25 -= 16;
        v17 -= 2;
      }
      while (v17 != v15);
      uint64_t v15 = (CGFloat *)*v16;
    }
    *((void *)this + 1) = v25;
    *((void *)this + 2) = v20;
    *((void *)this + 3) = v13;
    if (v15)
    {
      operator delete(v15);
      uint64_t v13 = *v14;
    }
  }
  else
  {
    CGFloat *v17 = v10;
    v17[1] = v11;
    uint64_t v20 = (char *)(v17 + 2);
  }
  *((void *)this + 2) = v20;
  if (v20 >= v13)
  {
    uint64_t v27 = (char *)*v16;
    uint64_t v28 = (v20 - (unsigned char *)*v16) >> 4;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60) {
      goto LABEL_147;
    }
    uint64_t v30 = v13 - v27;
    if (v30 >> 3 > v29) {
      unint64_t v29 = v30 >> 3;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      double v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v31);
      uint64_t v27 = (char *)*((void *)this + 1);
      uint64_t v20 = (char *)*((void *)this + 2);
    }
    else
    {
      double v32 = 0;
    }
    double v33 = &v32[16 * v28];
    uint64_t v13 = &v32[16 * v31];
    *(CGFloat *)double v33 = v8;
    *((CGFloat *)v33 + 1) = MaxY;
    unint64_t v26 = v33 + 16;
    if (v20 != v27)
    {
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v20 - 1);
        v33 -= 16;
        v20 -= 16;
      }
      while (v20 != v27);
      uint64_t v27 = (char *)*v16;
    }
    *((void *)this + 1) = v33;
    *((void *)this + 2) = v26;
    *((void *)this + 3) = v13;
    if (v27)
    {
      operator delete(v27);
      uint64_t v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)uint64_t v20 = v8;
    *((CGFloat *)v20 + 1) = MaxY;
    unint64_t v26 = v20 + 16;
  }
  *((void *)this + 2) = v26;
  if (v26 >= v13)
  {
    long long v35 = (char *)*v16;
    uint64_t v36 = (v26 - (unsigned char *)*v16) >> 4;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60) {
      goto LABEL_147;
    }
    uint64_t v38 = v13 - v35;
    if (v38 >> 3 > v37) {
      unint64_t v37 = v38 >> 3;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      double v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v39);
      long long v35 = (char *)*((void *)this + 1);
      unint64_t v26 = (char *)*((void *)this + 2);
    }
    else
    {
      double v40 = 0;
    }
    double v41 = (CGFloat *)&v40[16 * v36];
    uint64_t v13 = &v40[16 * v39];
    *double v41 = MaxX;
    v41[1] = v7;
    double v34 = v41 + 2;
    if (v26 != v35)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
        v41 -= 2;
        v26 -= 16;
      }
      while (v26 != v35);
      long long v35 = (char *)*v16;
    }
    *((void *)this + 1) = v41;
    *((void *)this + 2) = v34;
    *((void *)this + 3) = v13;
    if (v35)
    {
      operator delete(v35);
      uint64_t v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)unint64_t v26 = MaxX;
    *((CGFloat *)v26 + 1) = v7;
    double v34 = (CGFloat *)(v26 + 16);
  }
  *((void *)this + 2) = v34;
  if (v34 < (CGFloat *)v13)
  {
    *double v34 = MinX;
    v34[1] = MinY;
    int8x16_t v42 = v34 + 2;
    goto LABEL_65;
  }
  int8x16_t v43 = (char *)*v16;
  uint64_t v44 = ((char *)v34 - (unsigned char *)*v16) >> 4;
  unint64_t v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 60) {
LABEL_147:
  }
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  uint64_t v46 = v13 - v43;
  if (v46 >> 3 > v45) {
    unint64_t v45 = v46 >> 3;
  }
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v47 = v45;
  }
  if (v47)
  {
    double v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v47);
    int8x16_t v43 = (char *)*((void *)this + 1);
    double v34 = (CGFloat *)*((void *)this + 2);
  }
  else
  {
    double v48 = 0;
  }
  double v49 = (CGFloat *)&v48[16 * v44];
  unint64_t v50 = &v48[16 * v47];
  CGFloat *v49 = MinX;
  v49[1] = MinY;
  int8x16_t v42 = v49 + 2;
  if (v34 != (CGFloat *)v43)
  {
    do
    {
      *((_OWORD *)v49 - 1) = *((_OWORD *)v34 - 1);
      v49 -= 2;
      v34 -= 2;
    }
    while (v34 != (CGFloat *)v43);
    int8x16_t v43 = (char *)*v16;
  }
  *((void *)this + 1) = v49;
  *((void *)this + 2) = v42;
  *((void *)this + 3) = v50;
  if (v43) {
    operator delete(v43);
  }
LABEL_65:
  unint64_t v51 = *((void *)this + 6);
  *((void *)this + 2) = v42;
  int64x2_t v52 = (char **)((char *)this + 32);
  int64x2_t v53 = (void *)*((void *)this + 5);
  if ((unint64_t)v53 >= v51)
  {
    uint64_t v55 = ((char *)v53 - *v52) >> 4;
    unint64_t v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v57 = v51 - (void)*v52;
    if (v57 >> 3 > v56) {
      unint64_t v56 = v57 >> 3;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58) {
      long long v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v58);
    }
    else {
      long long v59 = 0;
    }
    float64x2_t v60 = &v59[16 * v55];
    float64x2_t v61 = &v59[16 * v58];
    *(void *)float64x2_t v60 = 0;
    *((void *)v60 + 1) = v18;
    unint64_t v54 = v60 + 16;
    float64x2_t v63 = (char *)*((void *)this + 4);
    float64x2_t v62 = (char *)*((void *)this + 5);
    if (v62 != v63)
    {
      do
      {
        *((_OWORD *)v60 - 1) = *((_OWORD *)v62 - 1);
        v60 -= 16;
        v62 -= 16;
      }
      while (v62 != v63);
      float64x2_t v62 = *v52;
    }
    *((void *)this + 4) = v60;
    *((void *)this + 5) = v54;
    *((void *)this + 6) = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *int64x2_t v53 = 0;
    v53[1] = v18;
    unint64_t v54 = v53 + 2;
  }
  *((void *)this + 5) = v54;
  unint64_t v64 = *((void *)this + 6);
  if ((unint64_t)v54 >= v64)
  {
    uint64_t v66 = ((char *)v54 - *v52) >> 4;
    if ((unint64_t)(v66 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v67 = v64 - (void)*v52;
    uint64_t v68 = v67 >> 3;
    if (v67 >> 3 <= (unint64_t)(v66 + 1)) {
      uint64_t v68 = v66 + 1;
    }
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v69 = v68;
    }
    if (v69) {
      BOOL v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v69);
    }
    else {
      BOOL v70 = 0;
    }
    long long v71 = &v70[16 * v66];
    uint64_t v72 = &v70[16 * v69];
    *(void *)long long v71 = 1;
    *((void *)v71 + 1) = v19;
    int v65 = v71 + 16;
    CGFloat v74 = (char *)*((void *)this + 4);
    double v73 = (char *)*((void *)this + 5);
    if (v73 != v74)
    {
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v73 - 1);
        v71 -= 16;
        v73 -= 16;
      }
      while (v73 != v74);
      double v73 = *v52;
    }
    *((void *)this + 4) = v71;
    *((void *)this + 5) = v65;
    *((void *)this + 6) = v72;
    if (v73) {
      operator delete(v73);
    }
  }
  else
  {
    *unint64_t v54 = 1;
    v54[1] = v19;
    int v65 = v54 + 2;
  }
  uint64_t v75 = v18 + 2;
  *((void *)this + 5) = v65;
  unint64_t v76 = *((void *)this + 6);
  if ((unint64_t)v65 >= v76)
  {
    uint64_t v78 = ((char *)v65 - *v52) >> 4;
    if ((unint64_t)(v78 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v79 = v76 - (void)*v52;
    uint64_t v80 = v79 >> 3;
    if (v79 >> 3 <= (unint64_t)(v78 + 1)) {
      uint64_t v80 = v78 + 1;
    }
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v81 = v80;
    }
    if (v81) {
      CFCharacterSetRef v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v81);
    }
    else {
      CFCharacterSetRef v82 = 0;
    }
    unint64_t v83 = &v82[16 * v78];
    CGFloat v84 = &v82[16 * v81];
    *(void *)unint64_t v83 = 1;
    *((void *)v83 + 1) = v75;
    NSRange v77 = v83 + 16;
    uint64_t v86 = (char *)*((void *)this + 4);
    uint64_t v85 = (char *)*((void *)this + 5);
    if (v85 != v86)
    {
      do
      {
        *((_OWORD *)v83 - 1) = *((_OWORD *)v85 - 1);
        v83 -= 16;
        v85 -= 16;
      }
      while (v85 != v86);
      uint64_t v85 = *v52;
    }
    *((void *)this + 4) = v83;
    *((void *)this + 5) = v77;
    *((void *)this + 6) = v84;
    if (v85) {
      operator delete(v85);
    }
  }
  else
  {
    *int v65 = 1;
    v65[1] = v75;
    NSRange v77 = v65 + 2;
  }
  uint64_t v87 = v18 + 3;
  *((void *)this + 5) = v77;
  unint64_t v88 = *((void *)this + 6);
  if ((unint64_t)v77 >= v88)
  {
    uint64_t v90 = ((char *)v77 - *v52) >> 4;
    if ((unint64_t)(v90 + 1) >> 60) {
      goto LABEL_146;
    }
    uint64_t v91 = v88 - (void)*v52;
    uint64_t v92 = v91 >> 3;
    if (v91 >> 3 <= (unint64_t)(v90 + 1)) {
      uint64_t v92 = v90 + 1;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v93 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v92;
    }
    if (v93) {
      long long v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v93);
    }
    else {
      long long v94 = 0;
    }
    CGFloat v95 = &v94[16 * v90];
    double v96 = &v94[16 * v93];
    *(void *)CGFloat v95 = 1;
    *((void *)v95 + 1) = v87;
    uint64_t v89 = v95 + 16;
    unint64_t v98 = (char *)*((void *)this + 4);
    double v97 = (char *)*((void *)this + 5);
    if (v97 != v98)
    {
      do
      {
        *((_OWORD *)v95 - 1) = *((_OWORD *)v97 - 1);
        v95 -= 16;
        v97 -= 16;
      }
      while (v97 != v98);
      double v97 = *v52;
    }
    *((void *)this + 4) = v95;
    *((void *)this + 5) = v89;
    *((void *)this + 6) = v96;
    if (v97) {
      operator delete(v97);
    }
  }
  else
  {
    *NSRange v77 = 1;
    v77[1] = v87;
    uint64_t v89 = v77 + 2;
  }
  *((void *)this + 5) = v89;
  unint64_t v99 = *((void *)this + 6);
  if ((unint64_t)v89 < v99)
  {
    _OWORD *v89 = xmmword_223837AE0;
    uint64_t v100 = v89 + 1;
    goto LABEL_145;
  }
  uint64_t v101 = ((char *)v89 - *v52) >> 4;
  if ((unint64_t)(v101 + 1) >> 60) {
LABEL_146:
  }
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  uint64_t v102 = v99 - (void)*v52;
  uint64_t v103 = v102 >> 3;
  if (v102 >> 3 <= (unint64_t)(v101 + 1)) {
    uint64_t v103 = v101 + 1;
  }
  if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v104 = v103;
  }
  if (v104) {
    uint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v104);
  }
  else {
    uint64_t v105 = 0;
  }
  uint64_t v106 = &v105[16 * v101];
  uint64_t v107 = &v105[16 * v104];
  *(_OWORD *)uint64_t v106 = xmmword_223837AE0;
  uint64_t v100 = v106 + 16;
  CGRect v109 = (char *)*((void *)this + 4);
  NSRange v108 = (char *)*((void *)this + 5);
  if (v108 != v109)
  {
    do
    {
      *((_OWORD *)v106 - 1) = *((_OWORD *)v108 - 1);
      v106 -= 16;
      v108 -= 16;
    }
    while (v108 != v109);
    NSRange v108 = *v52;
  }
  *((void *)this + 4) = v106;
  *((void *)this + 5) = v100;
  *((void *)this + 6) = v107;
  if (v108) {
    operator delete(v108);
  }
LABEL_145:
  *((void *)this + 5) = v100;
}

uint64_t EQKitPath::findStemForEdge@<X0>(unint64_t **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v53[1] = *MEMORY[0x263EF8340];
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_DWORD *)(a3 + 56) = 0;
  uint64_t result = EQKitPath::findJoinForEdge(this, a2, &v50, 0);
  if (result != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v7 = result;
    EQKitPath::subpathContainingElement(this, result, (uint64_t)&v47);
    unint64_t v45 = 0;
    unint64_t v46 = 0;
    unint64_t v44 = 0;
    uint64_t result = EQKitPath::isLineTo(this, v7, &v46, &v45, (const EQKitPath::Subpath *)&v47);
    if (result)
    {
      unint64_t v8 = v45;
      unint64_t v9 = v46;
      CGFloat v10 = this[1];
      double v11 = (double *)&v10[2 * v46];
      double v12 = (double *)&v10[2 * v45];
      unsigned __int32 v13 = a2 & 0xFFFFFFFD;
      if ((a2 & 0xFFFFFFFD) == 1) {
        ++v11;
      }
      if (v13 == 1) {
        ++v12;
      }
      if (vabdd_f64(*v11, *v12) >= 0.00100000005)
      {
        *(void *)&long long v51 = v46;
        *((void *)&v51 + 1) = v45;
        unint64_t v26 = v47;
        unint64_t v27 = v48 + v47;
        if (v7 + 1 < v48 + v47) {
          unint64_t v28 = v7 + 1;
        }
        else {
          unint64_t v28 = v47;
        }
        if (v28 + 1 < v27) {
          unint64_t v26 = v28 + 1;
        }
        if (v28 != v27 - 1 || v49 == 0) {
          unint64_t v30 = v28;
        }
        else {
          unint64_t v30 = v26;
        }
        uint64_t result = EQKitPath::isLineTo(this, v30, &v44, &v52, (const EQKitPath::Subpath *)&v47);
        if (result && v44 == *((void *)&v51 + 1))
        {
          unint64_t v31 = v47;
          unint64_t v32 = v48 + v47;
          if (v30 + 1 < v48 + v47) {
            unint64_t v33 = v30 + 1;
          }
          else {
            unint64_t v33 = v47;
          }
          if (v33 + 1 < v32) {
            unint64_t v31 = v33 + 1;
          }
          BOOL v34 = v33 != v32 - 1 || v49 == 0;
          unint64_t v35 = v34 ? v33 : v31;
          uint64_t result = EQKitPath::isLineTo(this, v35, &v44, v53, (const EQKitPath::Subpath *)&v47);
          if (result)
          {
            if (v44 == v52)
            {
              uint64_t v36 = this[1];
              unint64_t v37 = (double *)&v36[2 * *((void *)&v51 + 1)];
              uint64_t v38 = (double *)&v36[2 * v44];
              if (v13 == 1)
              {
                ++v37;
                ++v38;
              }
              if (vabdd_f64(*v37, *v38) < 0.00100000005) {
                goto LABEL_38;
              }
            }
          }
        }
      }
      else
      {
        *((void *)&v51 + 1) = v46;
        unint64_t v52 = v45;
        if (v47 >= v7) {
          unint64_t v14 = v48 + v47;
        }
        else {
          unint64_t v14 = v7;
        }
        if (v47 >= v14 - 1) {
          unint64_t v15 = v48 + v47;
        }
        else {
          unint64_t v15 = v14 - 1;
        }
        unint64_t v16 = v15 - 1;
        if (v14 != v48 + v47 || v49 == 0) {
          unint64_t v18 = v14 - 1;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t result = EQKitPath::isLineTo(this, v18, (unint64_t *)&v51, &v44, (const EQKitPath::Subpath *)&v47);
        if (result) {
          BOOL v19 = v44 == v9;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19)
        {
          unint64_t v20 = v47;
          unint64_t v21 = v48 + v47;
          if (v7 + 1 < v48 + v47) {
            unint64_t v22 = v7 + 1;
          }
          else {
            unint64_t v22 = v47;
          }
          if (v22 + 1 < v21) {
            unint64_t v20 = v22 + 1;
          }
          BOOL v23 = v22 != v21 - 1 || v49 == 0;
          unint64_t v24 = v23 ? v22 : v20;
          uint64_t result = EQKitPath::isLineTo(this, v24, &v44, v53, (const EQKitPath::Subpath *)&v47);
          if (result)
          {
            if (v44 == v8)
            {
LABEL_38:
              uint64_t result = EQKitPath::Stem::Stem((uint64_t)v39, a2, (uint64_t)this, &v51);
              if (v39 != (char *)a3)
              {
                *(unsigned char *)a3 = v39[0];
                long long v25 = v41;
                *(_OWORD *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v40;
                *(_OWORD *)(a3 + 24) = v25;
                *(_OWORD *)(a3 + 40) = v42;
                *(_DWORD *)(a3 + 56) = v43;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void EQKitPath::appendToCGPathWithModifiedStem(EQKitPath *this, CGPath *a2, float64x2_t *a3, unsigned int a4, const EQKitPath::Stem *a5, double a6)
{
  if (a2)
  {
    if (!a5 || a6 == 0.0)
    {
      *(_OWORD *)std::string __p = *MEMORY[0x263F00148];
      if (EQKitPath::findJoinForEdge(this, a4, __p, 0) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, a3->f64[0] - *(double *)__p, a3->f64[1] - *(double *)&__p[1]);
        EQKitPath::appendToCGPath((uint64_t *)this, a2, &v14, 0);
        int v13 = a4 > 2 ? 1 : dword_223837B98[a4];
        if (EQKitPath::findJoinForEdge(this, v13, __p, 0)) {
          *a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *(double *)&__p[1]), *(float64x2_t *)&v14.a, *(double *)__p));
        }
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v17 = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(__p, *((const void **)this + 1), *((void *)this + 2), (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4);
      EQKitPath::Stem::adjustStemPoints((uint64_t)a5, (uint64_t)this, __p, a6);
      long long v15 = *MEMORY[0x263F00148];
      if (EQKitPath::findJoinForEdge(this, a4, &v15, __p) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, a3->f64[0] - *(double *)&v15, a3->f64[1] - *((double *)&v15 + 1));
        EQKitPath::appendToCGPath((uint64_t *)this, a2, &v14, (uint64_t *)__p);
        if (a4 > 2) {
          int v12 = 1;
        }
        else {
          int v12 = dword_223837B98[a4];
        }
        if (EQKitPath::findJoinForEdge(this, v12, &v15, __p)) {
          *a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *((double *)&v15 + 1)), *(float64x2_t *)&v14.a, *(double *)&v15));
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_223507D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitPath::applyModifiedStemToPoints(uint64_t result, uint64_t a2, void *a3, double a4)
{
  if (a2)
  {
    if (a4 != 0.0) {
      return EQKitPath::Stem::adjustStemPoints(a2, result, a3, a4);
    }
  }
  return result;
}

void std::vector<CGPoint>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_223507DC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *std::vector<EQKitPath::PathElement>::__init_with_size[abi:ne180100]<EQKitPath::PathElement*,EQKitPath::PathElement*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_223507EA4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CGPoint>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  CGAffineTransform v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  CGAffineTransform v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

void *std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  int v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v13;
  CGAffineTransform v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void EQKitPath::EQKitPath(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    *(void *)(a3 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    *(void *)(a3 + 16) = v6;
    operator delete(v6);
  }
}

uint64_t EQKitCompositeGlyph::EQKitCompositeGlyph(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)a1 = &unk_26D685F10;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  bzero((void *)(a1 + 32), 0x50uLL);
  *(void *)(a1 + 20) = *(void *)(a4 + 8);
  if (*(void *)a4)
  {
    uint64_t v7 = CTFontDescriptorCreateWithNameAndSize(*(CFStringRef *)a4, *(CGFloat *)(a2 + 16));
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = CTFontCreateWithFontDescriptor(v7, *(CGFloat *)(a2 + 16), 0);
    CFRelease(v7);
  }
  else
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  return a1;
}

void EQKitCompositeGlyph::EQKitCompositeGlyph(EQKitCompositeGlyph *this, const EQKitCompositeGlyph *a2)
{
  *(void *)this = &unk_26D685F10;
  CFTypeRef v4 = (CFTypeRef)*((void *)a2 + 1);
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  *((void *)this + 1) = v4;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(void *)((char *)this + 20) = *(void *)((char *)a2 + 20);
  bzero((char *)this + 32, 0x50uLL);
  EQKitCompositeGlyph::copyCache(this, a2);
}

uint64_t EQKitCompositeGlyph::copyCache(EQKitCompositeGlyph *this, const EQKitCompositeGlyph *a2)
{
  uint64_t result = EQKitCompositeGlyph::clearCache(this);
  if (*((void *)a2 + 4)) {
    operator new();
  }
  *((void *)this + 4) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  *((void *)this + 5) = 0;
  if (*((void *)a2 + 6)) {
    operator new();
  }
  *((void *)this + 6) = 0;
  if (*((void *)a2 + 7)) {
    operator new();
  }
  *((void *)this + 7) = 0;
  if (*((void *)a2 + 8)) {
    operator new();
  }
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  if (*((void *)a2 + 9)) {
    operator new();
  }
  *((void *)this + 9) = 0;
  if (*((void *)a2 + 10)) {
    operator new();
  }
  *((void *)this + 10) = 0;
  if (*((void *)a2 + 11)) {
    operator new();
  }
  *((void *)this + 11) = 0;
  if (*((void *)a2 + 12)) {
    operator new();
  }
  *((void *)this + ++*((_WORD *)this + 12) = 0;
  return result;
}

void sub_223508550(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1000C401B087D88);
  _Unwind_Resume(a1);
}

EQKitCompositeGlyph *EQKitCompositeGlyph::operator=(EQKitCompositeGlyph *this, EQKitCompositeGlyph *a2)
{
  if (this != a2)
  {
    CFTypeRef v4 = (const void *)*((void *)this + 1);
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v5 = (CFTypeRef)*((void *)a2 + 1);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *((void *)this + 1) = v5;
    *(void *)((char *)this + 20) = *(void *)((char *)a2 + 20);
    EQKitCompositeGlyph::copyCache(this, a2);
  }
  return this;
}

void EQKitCompositeGlyph::~EQKitCompositeGlyph(EQKitCompositeGlyph *this)
{
  *(void *)this = &unk_26D685F10;
  EQKitCompositeGlyph::clearCache(this);
  char v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
}

{
  uint64_t vars8;

  EQKitCompositeGlyph::~EQKitCompositeGlyph(this);

  JUMPOUT(0x223CB8F20);
}

uint64_t EQKitCompositeGlyph::clearCache(EQKitCompositeGlyph *this)
{
  char v2 = (EQKitPath *)*((void *)this + 4);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x223CB8F20]();
    *((void *)this + 4) = 0;
  }
  unint64_t v3 = (EQKitPath *)*((void *)this + 5);
  if (v3)
  {
    EQKitPath::~EQKitPath(v3);
    MEMORY[0x223CB8F20]();
    *((void *)this + 5) = 0;
  }
  CFTypeRef v4 = (EQKitPath *)*((void *)this + 6);
  if (v4)
  {
    EQKitPath::~EQKitPath(v4);
    MEMORY[0x223CB8F20]();
    *((void *)this + 6) = 0;
  }
  CFTypeRef v5 = (EQKitPath *)*((void *)this + 7);
  if (v5)
  {
    EQKitPath::~EQKitPath(v5);
    MEMORY[0x223CB8F20]();
    *((void *)this + 7) = 0;
  }
  uint64_t v6 = *((void *)this + 8);
  if (v6)
  {
    MEMORY[0x223CB8F20](v6, 0x1000C401B087D88);
    *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  uint64_t v7 = *((void *)this + 9);
  if (v7)
  {
    MEMORY[0x223CB8F20](v7, 0x1000C401B087D88);
    *((void *)this + 9) = 0;
  }
  uint64_t v8 = *((void *)this + 10);
  if (v8)
  {
    MEMORY[0x223CB8F20](v8, 0x1000C401B087D88);
    *((void *)this + 10) = 0;
  }
  uint64_t v9 = *((void *)this + 11);
  if (v9)
  {
    MEMORY[0x223CB8F20](v9, 0x1000C401B087D88);
    *((void *)this + 11) = 0;
  }
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    uint64_t result = MEMORY[0x223CB8F20](result, 0x1000C401B087D88);
    *((void *)this + ++*((_WORD *)this + 12) = 0;
  }
  return result;
}

uint64_t EQKitCompositeGlyph::upperPath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 4);
  int v4 = *((unsigned __int16 *)this + 10);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_2235088A0(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::lowerPath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 5);
  int v4 = *((unsigned __int16 *)this + 11);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_223508978(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::middlePath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 6);
  int v4 = *((unsigned __int16 *)this + 12);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_223508A50(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::extenderPath(EQKitCompositeGlyph *this)
{
  char v2 = (const __CTFont *)*((void *)this + 1);
  uint64_t result = *((void *)this + 7);
  int v4 = *((unsigned __int16 *)this + 13);
  if (v2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v7, 0, sizeof(v7));
    CGAffineTransformMakeScale(&v7, 1.0, -1.0);
    CTFontCreatePathForGlyph(v2, v4, &v7);
    operator new();
  }
  return result;
}

void sub_223508B28(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::upperPathLowerStem(EQKitCompositeGlyph *this)
{
  if (*((unsigned char *)this + 104)) {
    return *((void *)this + 8);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::upperPath(this);
  if (*((_DWORD *)this + 4) == 2) {
    int v3 = 3;
  }
  else {
    int v3 = 2;
  }
  uint64_t result = _createStem(v2, v3);
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = result;
  *((unsigned char *)this + 104) |= 1u;
  return result;
}

uint64_t _createStem(unint64_t **a1, int a2)
{
  if (a1)
  {
    EQKitPath::findStemForEdge(a1, a2, (uint64_t)v3);
    if (v3[0]) {
      operator new();
    }
  }
  return 0;
}

void sub_223508C10(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1000C401B087D88);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::lowerPathUpperStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 2) != 0) {
    return *((void *)this + 9);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::lowerPath(this);
  uint64_t result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((void *)this + 9) = result;
  *((unsigned char *)this + 104) |= 2u;
  return result;
}

uint64_t EQKitCompositeGlyph::middlePathUpperStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 4) != 0) {
    return *((void *)this + 10);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  uint64_t result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((void *)this + 10) = result;
  *((unsigned char *)this + 104) |= 4u;
  return result;
}

uint64_t EQKitCompositeGlyph::middlePathLowerStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 8) != 0) {
    return *((void *)this + 11);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  if (*((_DWORD *)this + 4) == 2) {
    int v3 = 3;
  }
  else {
    int v3 = 2;
  }
  uint64_t result = _createStem(v2, v3);
  *((void *)this + 11) = result;
  *((unsigned char *)this + 104) |= 8u;
  return result;
}

uint64_t EQKitCompositeGlyph::extenderPathStem(EQKitCompositeGlyph *this)
{
  if ((*((unsigned char *)this + 104) & 0x10) != 0) {
    return *((void *)this + 12);
  }
  char v2 = (unint64_t **)EQKitCompositeGlyph::extenderPath(this);
  if (*((_DWORD *)this + 4) == 2) {
    int v3 = 3;
  }
  else {
    int v3 = 2;
  }
  uint64_t result = _createStem(v2, v3);
  *((void *)this + ++*((_WORD *)this + 12) = result;
  *((unsigned char *)this + 104) |= 0x10u;
  return result;
}

CGPath *EQKitCompositeGlyph::createPathWithLength(EQKitCompositeGlyph *this, double a2, CGSize *a3)
{
  Mutable = CGPathCreateMutable();
  EQKitCompositeGlyph::compose(this, a2, Mutable);
  EQKitPath::EQKitPath((EQKitPath *)v12, Mutable);
  if (v13[32]) {
    CGAffineTransform v7 = (CGSize *)v13;
  }
  else {
    CGAffineTransform v7 = (CGSize *)EQKitPath::computePathBounds(v12);
  }
  double width = v7->width;
  double height = v7->height;
  *a3 = v7[1];
  if (width != 0.0 || height != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v11, 0, sizeof(v11));
    CGAffineTransformMakeTranslation(&v11, -width, -height);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v12, Mutable, &v11, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v12);
  return Mutable;
}

void sub_223508E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

double EQKitCompositeGlyph::compose(EQKitCompositeGlyph *this, double a2, CGPath *a3)
{
  uint64_t v6 = EQKitCompositeGlyph::upperPath(this);
  uint64_t v7 = EQKitCompositeGlyph::lowerPath(this);
  uint64_t v8 = EQKitCompositeGlyph::middlePath(this);
  uint64_t v9 = EQKitCompositeGlyph::extenderPath(this);
  uint64_t v10 = (double *)EQKitCompositeGlyph::upperPathLowerStem(this);
  uint64_t v11 = EQKitCompositeGlyph::lowerPathUpperStem(this);
  uint64_t v12 = EQKitCompositeGlyph::middlePathUpperStem(this);
  uint64_t v81 = EQKitCompositeGlyph::middlePathLowerStem(this);
  uint64_t v13 = EQKitCompositeGlyph::extenderPathStem(this);
  double v14 = a2;
  if (!(v6 | v7)) {
    return a2 - v14;
  }
  unint64_t v15 = (double *)v13;
  double v16 = 0.0;
  double v17 = 0.0;
  if (v6)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v6 + 120)) {
        unint64_t v18 = (CGRect *)(v6 + 88);
      }
      else {
        unint64_t v18 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      }
      double Height = CGRectGetHeight(*v18);
    }
    else
    {
      if (*(unsigned char *)(v6 + 120)) {
        BOOL v19 = (CGRect *)(v6 + 88);
      }
      else {
        BOOL v19 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      }
      double Height = CGRectGetWidth(*v19);
    }
    double v17 = Height;
  }
  if (v7)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v7 + 120)) {
        unint64_t v21 = (CGRect *)(v7 + 88);
      }
      else {
        unint64_t v21 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      }
      double Width = CGRectGetHeight(*v21);
    }
    else
    {
      if (*(unsigned char *)(v7 + 120)) {
        unint64_t v22 = (CGRect *)(v7 + 88);
      }
      else {
        unint64_t v22 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      }
      double Width = CGRectGetWidth(*v22);
    }
    double v16 = Width;
  }
  double v14 = a2 - (v17 + v16);
  if (v8)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v8 + 120)) {
        unint64_t v24 = (CGRect *)(v8 + 88);
      }
      else {
        unint64_t v24 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      }
      double v26 = CGRectGetHeight(*v24);
    }
    else
    {
      if (*(unsigned char *)(v8 + 120)) {
        long long v25 = (CGRect *)(v8 + 88);
      }
      else {
        long long v25 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      }
      double v26 = CGRectGetWidth(*v25);
    }
    double v14 = v14 - v26;
  }
  uint64_t v27 = v81;
  double v28 = 0.0;
  double v29 = 0.0;
  double v30 = 0.0;
  double v31 = 0.0;
  if (v14 >= 0.0) {
    goto LABEL_80;
  }
  double v32 = 0.0;
  if (v10) {
    double v32 = v10[5];
  }
  if (v12) {
    double v31 = *(double *)(v12 + 40);
  }
  double v33 = 0.0;
  double v34 = 0.0;
  if (v11) {
    double v34 = *(double *)(v11 + 40);
  }
  double v35 = v32 + v31;
  if (v81) {
    double v33 = *(double *)(v81 + 40);
  }
  double v36 = v34 + v33;
  double v37 = fabs(v14);
  if (v37 >= v35) {
    double v38 = v35;
  }
  else {
    double v38 = v37;
  }
  double v39 = v37 - v38;
  if (v39 >= v36) {
    double v40 = v36;
  }
  else {
    double v40 = v39;
  }
  if (v35 >= v36) {
    double v35 = v36;
  }
  double v41 = fabs(v14 * 0.5);
  if (v41 < v35) {
    double v35 = v41;
  }
  if (v8) {
    double v42 = v35;
  }
  else {
    double v42 = v38;
  }
  if (v8) {
    double v43 = v35;
  }
  else {
    double v43 = v40;
  }
  if (v10)
  {
    double v31 = v42;
    if (v10[5] < v42) {
      double v31 = v10[5];
    }
    if (v11)
    {
LABEL_64:
      double v30 = v43;
      if (*(double *)(v11 + 40) < v43) {
        double v30 = *(double *)(v11 + 40);
      }
      goto LABEL_72;
    }
  }
  else
  {
    double v31 = 0.0;
    if (v42 <= 0.0) {
      double v31 = v42;
    }
    if (v11) {
      goto LABEL_64;
    }
  }
  if (v43 <= 0.0) {
    double v30 = v43;
  }
  else {
    double v30 = 0.0;
  }
LABEL_72:
  double v29 = v42 - v31;
  if (v12)
  {
    if (*(double *)(v12 + 40) < v29) {
      double v29 = *(double *)(v12 + 40);
    }
  }
  else if (v29 > 0.0)
  {
    double v29 = 0.0;
  }
  double v44 = v43 - v30;
  if (v81)
  {
    double v28 = *(double *)(v81 + 40);
    if (v28 < v44) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v44 <= 0.0) {
LABEL_79:
  }
    double v28 = v44;
LABEL_80:
  uint64_t v80 = (EQKitPath::Stem *)v11;
  if (v9)
  {
    if (v14 >= 0.0) {
      double v45 = v14;
    }
    else {
      double v45 = 0.0;
    }
  }
  else
  {
    double v45 = 0.0;
    if (v14 > 0.0)
    {
      if (v10 && v11)
      {
        double v31 = v31 - v14 * 0.5;
        double v30 = v30 - v14 * 0.5;
      }
      else
      {
        if (v11) {
          double v46 = v14;
        }
        else {
          double v46 = 0.0;
        }
        double v47 = v30 - v46;
        if (v10) {
          double v31 = v31 - v14;
        }
        else {
          double v30 = v47;
        }
      }
    }
  }
  uint64_t v48 = (_OWORD *)MEMORY[0x263F00148];
  CGPoint v85 = (CGPoint)*MEMORY[0x263F00148];
  if (v6)
  {
    double v14 = v14 + v31;
    if (a3)
    {
      EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v6, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, (const EQKitPath::Stem *)v10, -v31);
      uint64_t v27 = v81;
    }
  }
  BOOL v51 = v45 > 0.0 && v9 != 0 && v15 != 0;
  if (v8)
  {
    if (v51)
    {
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(unsigned char *)(v9 + 120)) {
          unint64_t v52 = (CGRect *)(v9 + 88);
        }
        else {
          unint64_t v52 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v58 = CGRectGetHeight(*v52);
      }
      else
      {
        if (*(unsigned char *)(v9 + 120)) {
          unint64_t v56 = (CGRect *)(v9 + 88);
        }
        else {
          unint64_t v56 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v58 = CGRectGetWidth(*v56);
      }
      double v59 = v15[5];
      if (v58 - v45 * 0.5 < v59)
      {
        if (*((_DWORD *)this + 4) == 2)
        {
          if (*(unsigned char *)(v9 + 120)) {
            float64x2_t v60 = (CGRect *)(v9 + 88);
          }
          else {
            float64x2_t v60 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
          }
          double v66 = CGRectGetHeight(*v60);
        }
        else
        {
          if (*(unsigned char *)(v9 + 120)) {
            float64x2_t v61 = (CGRect *)(v9 + 88);
          }
          else {
            float64x2_t v61 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
          }
          double v66 = CGRectGetWidth(*v61);
        }
        double v59 = v66 - v45 * 0.5;
      }
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(unsigned char *)(v9 + 120)) {
          uint64_t v67 = (CGRect *)(v9 + 88);
        }
        else {
          uint64_t v67 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v69 = CGRectGetHeight(*v67);
      }
      else
      {
        if (*(unsigned char *)(v9 + 120)) {
          uint64_t v68 = (CGRect *)(v9 + 88);
        }
        else {
          uint64_t v68 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v69 = CGRectGetWidth(*v68);
      }
      double v14 = v59 + v14 - v69;
      if (a3) {
        EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v9, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, (const EQKitPath::Stem *)v15, -v59);
      }
      uint64_t v27 = v81;
    }
    if ((v29 == 0.0 || !v12) && (v28 == 0.0 || !v27))
    {
      unint64_t v54 = v80;
      if (a3) {
        EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v8, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, 0, 0.0);
      }
    }
    else
    {
      if (a3)
      {
        EQKitPath::extractPath((EQKitPath *)v8);
        std::vector<CGPoint>::vector(__p, v8 + 8);
        EQKitPath::applyModifiedStemToPoints(v8, v12, __p, -v29);
        EQKitPath::applyModifiedStemToPoints(v8, v81, __p, -v28);
        *(_OWORD *)unint64_t v83 = *v48;
        EQKitPath::findJoinForEdge((void *)v8, *((_DWORD *)this + 4) == 2, v83, __p);
        memset(&v82, 0, sizeof(v82));
        CGAffineTransformMakeTranslation(&v82, v85.x - v83[0], v85.y - v83[1]);
        EQKitPath::appendToCGPath((uint64_t *)v8, a3, &v82, (uint64_t *)__p);
        int v70 = *((_DWORD *)this + 4) == 2 ? 3 : 2;
        EQKitPath::findJoinForEdge((void *)v8, v70, &v85, __p);
        CGPoint v85 = (CGPoint)vaddq_f64(*(float64x2_t *)&v82.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v82.c, v85.y), *(float64x2_t *)&v82.a, v85.x));
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      double v14 = v28 + v29 + v14;
      unint64_t v54 = v80;
    }
    if (!v51) {
      goto LABEL_201;
    }
    int64x2_t v53 = (_DWORD *)((char *)this + 16);
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v9 + 120)) {
        long long v71 = (CGRect *)(v9 + 88);
      }
      else {
        long long v71 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v73 = CGRectGetHeight(*v71);
    }
    else
    {
      if (*(unsigned char *)(v9 + 120)) {
        uint64_t v72 = (CGRect *)(v9 + 88);
      }
      else {
        uint64_t v72 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v73 = CGRectGetWidth(*v72);
    }
    double v45 = v45 * 0.5;
    double v63 = v15[5];
    if (v73 - v45 >= v63) {
      goto LABEL_190;
    }
    int v64 = *(unsigned __int8 *)(v9 + 120);
    if (*v53 == 2)
    {
      if (*(unsigned char *)(v9 + 120)) {
        goto LABEL_183;
      }
      goto LABEL_139;
    }
    goto LABEL_185;
  }
  if (v51)
  {
    int64x2_t v53 = (_DWORD *)((char *)this + 16);
    unint64_t v54 = v80;
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(unsigned char *)(v9 + 120)) {
        uint64_t v55 = (CGRect *)(v9 + 88);
      }
      else {
        uint64_t v55 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v62 = CGRectGetHeight(*v55);
    }
    else
    {
      if (*(unsigned char *)(v9 + 120)) {
        uint64_t v57 = (CGRect *)(v9 + 88);
      }
      else {
        uint64_t v57 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      }
      double v62 = CGRectGetWidth(*v57);
    }
    double v63 = v15[5];
    if (v62 - v45 >= v63) {
      goto LABEL_190;
    }
    int v64 = *(unsigned __int8 *)(v9 + 120);
    if (*v53 == 2)
    {
      if (*(unsigned char *)(v9 + 120))
      {
LABEL_183:
        int v65 = (CGRect *)(v9 + 88);
        goto LABEL_184;
      }
LABEL_139:
      int v65 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
LABEL_184:
      double v74 = CGRectGetHeight(*v65);
LABEL_189:
      double v63 = v74 - v45;
LABEL_190:
      if (*v53 == 2)
      {
        if (*(unsigned char *)(v9 + 120)) {
          unint64_t v76 = (CGRect *)(v9 + 88);
        }
        else {
          unint64_t v76 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v78 = CGRectGetHeight(*v76);
      }
      else
      {
        if (*(unsigned char *)(v9 + 120)) {
          NSRange v77 = (CGRect *)(v9 + 88);
        }
        else {
          NSRange v77 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        }
        double v78 = CGRectGetWidth(*v77);
      }
      double v14 = v63 + v14 - v78;
      if (a3) {
        EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v9, a3, (float64x2_t *)&v85, *v53 == 2, (const EQKitPath::Stem *)v15, -v63);
      }
      goto LABEL_201;
    }
LABEL_185:
    if (v64) {
      uint64_t v75 = (CGRect *)(v9 + 88);
    }
    else {
      uint64_t v75 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
    }
    double v74 = CGRectGetWidth(*v75);
    goto LABEL_189;
  }
  unint64_t v54 = v80;
LABEL_201:
  if (v7)
  {
    double v14 = v30 + v14;
    if (a3) {
      EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v7, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, v54, -v30);
    }
  }
  return a2 - v14;
}

void sub_223509724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double EQKitCompositeGlyph::estimatePathWithLength(EQKitCompositeGlyph *this, double a2)
{
  return EQKitCompositeGlyph::compose(this, a2, 0);
}

void *std::vector<CGPoint>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<CGPoint>::__vallocate[abi:nn180100](a1, v5 >> 4);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<CGPoint>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_22350E3DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t EQKitLayoutManager::EQKitLayoutManager(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *(void *)(a1 + 32) = [a3 kerningManager];
  *(void *)(a1 + 40) = [a3 layoutConfig];
  [a2 baseFontSize];
  double v9 = v8;
  uint64_t v10 = (const Collection *)EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[a3 fontManager]);
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)(a1 + 48), v9, v10, (const __CFString *)[a2 baseFontName], 1);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 56_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 48_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 3++*((_WORD *)this + 12) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 592) = a3;
  *(void *)(a1 + 600) = a4;
  if (!a2)
  {
    double v17 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKitLayoutManager::EQKitLayoutManager(id<EQKitLayoutContext>, EQKitEnvironmentInstance *, const EQKit::AttributeCollection &)"), @"EQKitLayoutManager.mm", 53, @"invalid layoutContext");
  }
  *(void *)a1 = a2;
  [a2 baseFontSize];
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v11;
  [a2 containerWidth];
  *(void *)(a1 + 16) = v12;
  uint64_t v13 = (const void *)[a2 baseFontName];
  *(void *)(a1 + 24) = v13;
  if (v13) {
    CFRetain(v13);
  }
  double v14 = *(double *)(a1 + 8);
  unint64_t v15 = (const Collection *)EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[a3 fontManager]);
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)v18, v14, v15, (const __CFString *)[a2 baseFontName], 1);
  std::deque<EQKitLayoutContext>::push_back((void *)(a1 + 232), (EQKitLayoutContext *)v18);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v18);
  return a1;
}

void sub_22350E8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)va);
  std::deque<EQKitLayoutTable>::~deque[abi:nn180100](v4 + 45);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](v4 + 39);
  std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](v4 + 33);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v4 + 27);
  uint64_t v7 = (void *)v2[47];
  if (v7)
  {
    v2[48] = v7;
    operator delete(v7);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:nn180100](v2 + 41);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v2 + 35);
  std::deque<EQKitLayoutContext>::~deque[abi:nn180100](v5);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v4);
  EQKitLayoutContext::~EQKitLayoutContext(v3);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::~EQKitLayoutManager(id *this)
{
  id v2 = this[3];
  if (v2) {
    CFRelease(v2);
  }
  std::deque<EQKitLayoutTable>::~deque[abi:nn180100](this + 68);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](this + 62);
  std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](this + 56);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 50);
  id v3 = this[47];
  if (v3)
  {
    this[48] = v3;
    operator delete(v3);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:nn180100](this + 41);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 35);
  std::deque<EQKitLayoutContext>::~deque[abi:nn180100](this + 29);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 23);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)(this + 6));
}

void sub_22350EA08(_Unwind_Exception *a1)
{
  std::deque<EQKitLayoutTable>::~deque[abi:nn180100](v1 + 68);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](v1 + 62);
  std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](v1 + 56);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v1 + 50);
  id v3 = (void *)v1[47];
  if (v3)
  {
    v1[48] = v3;
    operator delete(v3);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:nn180100](v1 + 41);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v1 + 35);
  std::deque<EQKitLayoutContext>::~deque[abi:nn180100](v1 + 29);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v1 + 23);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)(v1 + 6));
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::popContext(EQKitLayoutManager *this)
{
  if (*((void *)this + 34)
    || (id v3 = (void *)[MEMORY[0x263F08690] currentHandler],
        uint64_t result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::popContext()"), @"EQKitLayoutManager.mm", 77, @"contextStack needs to contain an element"), *((void *)this + 34)))
  {
    return std::deque<EQKitLayoutContext>::pop_back((void *)this + 29);
  }
  return result;
}

unint64_t EQKitLayoutManager::layoutContext(EQKitLayoutManager *this)
{
  uint64_t v2 = *((void *)this + 34);
  if (v2) {
    return *(void *)(*((void *)this + 30) + 8 * ((v2 + *((void *)this + 33) - 1) / 0x1EuLL))
  }
         + 136 * ((v2 + *((void *)this + 33) - 1) % 0x1EuLL);
  uint64_t v4 = (void *)[MEMORY[0x263F08690] currentHandler];
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "const EQKitLayoutContext &EQKitLayoutManager::layoutContext() const"), @"EQKitLayoutManager.mm", 86, @"contextStack needs to contain an element");
  uint64_t v2 = *((void *)this + 34);
  if (v2) {
    return *(void *)(*((void *)this + 30) + 8 * ((v2 + *((void *)this + 33) - 1) / 0x1EuLL))
  }
         + 136 * ((v2 + *((void *)this + 33) - 1) % 0x1EuLL);
  else {
    return (unint64_t)this + 48;
  }
}

double EQKitLayoutManager::leftSpaceForOperator(uint64_t a1, void *a2)
{
  unint64_t v4 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  uint64_t v5 = [*(id *)(a1 + 592) operatorDictionary];
  unsigned __int16 v6 = [a2 operatorId];
  int v7 = EQKitLayoutManager::operatorForm(a1, a2);
  double v8 = EQKit::Config::Operator::Dictionary::lookup(v5, v6, v7);
  if (v8)
  {
    double v9 = v8;
    double v10 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v8, *(double *)(v4 + 24));
    if (v10 != 0.0)
    {
      unint64_t v11 = *(void *)(a1 + 368) + *(void *)(a1 + 360) - 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 336) + 8 * (v11 / 0x19)) + 160 * (v11 % 0x19) + 152) == 2)
      {
        if ((char)v9[6] < 0)
        {
          double v13 = *((double *)v9 + 5);
        }
        else
        {
          uint64_t v12 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, 1);
        }
        double v10 = v10 * v13;
      }
    }
  }
  else
  {
    double v10 = 0.0;
  }

  return EQKitLayoutManager::lengthForAttribute((EQKitLayoutManager *)a1, 10, (uint64_t)a2, v10);
}

uint64_t EQKitLayoutManager::operatorForm(uint64_t a1, void *a2)
{
  unsigned int v14 = 0;
  uint64_t v4 = *(void *)(a1 + 600);
  unint64_t v15 = a2;
  int v16 = 15;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 344, (uint64_t)&v15, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    unsigned int v6 = [a2 operatorId];
    uint64_t result = EQKit::Config::Operator::Dictionary::formForOperatorId((EQKit::Config::Operator::Dictionary *)[*(id *)(a1 + 592) operatorDictionary], v6);
    unsigned int v14 = result;
    if (!result)
    {
      char v7 = EQKit::Config::Operator::Dictionary::formMaskForOperatorId((EQKit::Config::Operator::Dictionary *)[*(id *)(a1 + 592) operatorDictionary], v6);
      uint64_t v8 = *(void *)(a1 + 224);
      if (v8) {
        uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 192)
      }
                                   + (((unint64_t)(v8 + *(void *)(a1 + 216) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v8 + *(void *)(a1 + 216) - 1) & 0x1FF));
      char v9 = v8 & v7;
      if ((v7 & 8) != 0) {
        int v10 = 3;
      }
      else {
        int v10 = 2;
      }
      if ((v7 & 2) != 0) {
        int v11 = 1;
      }
      else {
        int v11 = v10;
      }
      if ((v9 & 4) != 0) {
        int v12 = 2;
      }
      else {
        int v12 = v11;
      }
      if ((v9 & 8) != 0) {
        unsigned int v13 = 3;
      }
      else {
        unsigned int v13 = v12;
      }
      if ((v9 & 2) != 0) {
        return 1;
      }
      else {
        return v13;
      }
    }
  }
  return result;
}

uint64_t EQKitLayoutManager::fontCollection(id *this)
{
  uint64_t v1 = (EQKit::Font::Manager *)[this[74] fontManager];

  return EQKit::Font::Manager::defaultCollection(v1);
}

double EQKitLayoutManager::lengthForAttribute(EQKitLayoutManager *a1, int a2, uint64_t a3, double a4)
{
  LODWORD(v9) = 1;
  *((void *)&v9 + 1) = 0;
  uint64_t v10 = a3;
  uint64_t v6 = *((void *)a1 + 75);
  int v11 = a2;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v6, v6 + 32, (uint64_t)&v10, &v9))
  {
    unint64_t v7 = EQKitLayoutManager::layoutContext(a1);
    return EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v9, v7, a4);
  }
  return a4;
}

double EQKitLayoutManager::rightSpaceForOperator(uint64_t a1, void *a2)
{
  unint64_t v4 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  uint64_t v5 = [*(id *)(a1 + 592) operatorDictionary];
  unsigned __int16 v6 = [a2 operatorId];
  int v7 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t v8 = EQKit::Config::Operator::Dictionary::lookup(v5, v6, v7);
  if (v8)
  {
    long long v9 = v8;
    double v10 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)(v8 + 2), *(double *)(v4 + 24));
    if (v10 != 0.0)
    {
      unint64_t v11 = *(void *)(a1 + 368) + *(void *)(a1 + 360) - 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 336) + 8 * (v11 / 0x19)) + 160 * (v11 % 0x19) + 152) == 2)
      {
        if ((char)v9[6] < 0)
        {
          double v13 = *((double *)v9 + 5);
        }
        else
        {
          uint64_t v12 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, 1);
        }
        double v10 = v10 * v13;
      }
    }
  }
  else
  {
    double v10 = 0.0;
  }

  return EQKitLayoutManager::lengthForAttribute((EQKitLayoutManager *)a1, 11, (uint64_t)a2, v10);
}

CGPath *EQKitLayoutManager::createPathForNotation(EQKitLayoutManager *a1, void *a2, int a3)
{
  Mutable = CGPathCreateMutable();
  [a2 width];
  double v8 = v7;
  [a2 vsize];
  double v10 = v9;
  unint64_t v11 = EQKitLayoutManager::layoutContext(a1);
  unint64_t v13 = v11;
  uint64_t v14 = *(void *)(v11 + 80);
  if (*(unsigned char *)(v11 + 104)) {
    v12.n128_u64[0] = *(void *)(v11 + 112);
  }
  else {
    v12.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  }
  double v15 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v14 + 40))(v14, 24, v13 + 8, v12);
  double v16 = v15;
  switch(a3)
  {
    case 1:
      double v17 = -v15;
      double v18 = v10 + v15;
      BOOL v19 = Mutable;
      double v20 = -v15;
      goto LABEL_10;
    case 2:
      CGPathMoveToPoint(Mutable, 0, -v15, -v15);
      double v21 = v8 + v16;
      goto LABEL_8;
    case 3:
      double v21 = v8 * 0.5;
      CGPathMoveToPoint(Mutable, 0, v21, -v15);
LABEL_8:
      double v17 = v10 + v16;
      goto LABEL_11;
    case 4:
      double v20 = -v15;
      double v17 = v10 * 0.5;
      BOOL v19 = Mutable;
      double v18 = v10 * 0.5;
LABEL_10:
      CGPathMoveToPoint(v19, 0, v20, v18);
      double v21 = v8 + v16;
LABEL_11:
      CGPathAddLineToPoint(Mutable, 0, v21, v17);
      break;
    default:
      return Mutable;
  }
  return Mutable;
}

EQKitBox *EQKitLayoutManager::layoutExpression(EQKitLayoutManager *a1, void *a2, void *a3, void *a4, void *a5, double *a6, BOOL *a7)
{
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  *a3 = 0;
  void v26[3] = a3;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  *a4 = 0;
  v25[3] = a4;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  *a5 = 0;
  void v24[3] = a5;
  *a6 = 1.79769313e308;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  v23[3] = 0;
  LODWORD(v18[0]) = 0;
  uint64_t v11 = *((void *)a1 + 75);
  id v19 = a2;
  int v20 = 7;
  unsigned int v12 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v11, v11 + 320, (uint64_t)&v19, v18) ^ 1;
  if (!LODWORD(v18[0])) {
    unsigned int v12 = 1;
  }
  if (LODWORD(v18[0]) == 2) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  EQKitLayoutManager::beginRow(a1, 1, 0);
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke;
  void v22[3] = &unk_2646AF560;
  v22[4] = a2;
  v22[5] = v23;
  v22[6] = v26;
  v22[7] = v25;
  v22[8] = v24;
  v22[9] = a1;
  EQKitLayoutManager::layout(a1, a2, 0, v13, 0, (uint64_t)v22);
  EQKitLayoutManager::endRow(a1, (EQKit::ILayout *)&v19);
  uint64_t v14 = (EQKitBox *)v19;
  if (*(unsigned char *)(*((void *)a1 + 5) + 5)) {
    char v15 = v13;
  }
  else {
    char v15 = 1;
  }
  BOOL v16 = (v15 & 1) == 0 && (v21 & 0x1C00u) > 0x800;
  *a7 = v16;
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v18, 0, 0.0);
  if (EQKit::ILayout::getOffsetOfKind((uint64_t)&v19, 1, v18)) {
    *a6 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v18, v14);
  }
  EQKit::ILayoutOffset::~ILayoutOffset(v18);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v19);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
  return v14;
}

void sub_22350F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 80), 8);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::beginRow(EQKitLayoutManager *this, char a2, BOOL a3)
{
  if ((a2 & 1) != 0 || (uint64_t v3 = *((void *)this + 46)) == 0)
  {
    uint64_t v5 = (void *)((char *)this + 328);
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v6, a3);
    std::deque<EQKitLayoutRow>::push_back(v5, (EQKitLayoutRow *)v6);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v6);
  }
  else
  {
    uint64_t v4 = *(void *)(*((void *)this + 42) + 8 * ((v3 + *((void *)this + 45) - 1) / 0x19uLL))
       + 160 * ((v3 + *((void *)this + 45) - 1) % 0x19uLL);
    EQKitLayoutRow::beginNestedRow(v4);
  }
}

void sub_22350F4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void EQKitLayoutManager::layout(EQKitLayoutManager *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke(void *a1, uint64_t a2)
{
  if (a1[4] == a2)
  {
    uint64_t v3 = (EQKitLayoutManager *)a1[9];
    int v4 = *(unsigned __int8 *)(*((void *)v3 + 5) + 4);
    unint64_t v5 = EQKitLayoutManager::layoutContext(v3);
    CTFontRef v6 = v4
       ? EQKitLayoutManager::newBaseFontWithScript(v3, (const Info *)(v5 + 8))
       : (CTFontRef)EQKitLayoutContext::newFont((EQKitLayoutContext *)v5);
    *(void *)(*(void *)(a1[5] + 8) + 24) = v6;
    double v7 = *(const __CTFont **)(*(void *)(a1[5] + 8) + 24);
    if (v7)
    {
      **(CGFloat **)(*(void *)(a1[6] + 8) + 24) = CTFontGetAscent(v7);
      **(CGFloat **)(*(void *)(a1[7] + 8) + 24) = CTFontGetDescent(*(CTFontRef *)(*(void *)(a1[5] + 8) + 24));
      **(CGFloat **)(*(void *)(a1[8] + 8) + 24) = CTFontGetLeading(*(CTFontRef *)(*(void *)(a1[5] + 8) + 24));
      double v8 = *(const void **)(*(void *)(a1[5] + 8) + 24);
      CFRelease(v8);
    }
  }
}

CTFontRef EQKitLayoutManager::newBaseFontWithScript(EQKitLayoutManager *this, const Info *a2)
{
  if (*((void *)this + 3)) {
    CFStringRef v3 = (const __CFString *)*((void *)this + 3);
  }
  else {
    CFStringRef v3 = @"Times New Roman";
  }
  int v4 = CTFontDescriptorCreateWithNameAndSize(v3, *((CGFloat *)a2 + 2));
  CTFontRef v5 = CTFontCreateWithFontDescriptor(v4, *((CGFloat *)a2 + 2), 0);
  CFRelease(v4);
  return v5;
}

void EQKitLayoutManager::endRow(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  EQKit::ILayout::ILayout(a2, 0);
  unint64_t v4 = *((void *)this + 46);
  if (v4
    || (double v10 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::endRow()"), @"EQKitLayoutManager.mm", 2890, @"invalid state"), (unint64_t v4 = *((void *)this + 46)) != 0))
  {
    unint64_t v5 = v4 + *((void *)this + 45) - 1;
    uint64_t v6 = *(void *)(*((void *)this + 42) + 8 * (v5 / 0x19));
    unint64_t v7 = v5 % 0x19;
    double v8 = (EQKitLayoutRow *)(v6 + 160 * v7);
    if (*((void *)v8 + 8))
    {
      EQKitLayoutRow::endNestedRow(v6 + 160 * v7);
    }
    else if (v4 >= 2 && *(unsigned char *)(v6 + 160 * v7 + 156))
    {
      EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v11, (const EQKitLayoutRow *)(v6 + 160 * v7));
      std::deque<EQKitLayoutRow>::pop_back((void *)this + 41);
      unint64_t v9 = *((void *)this + 46) + *((void *)this + 45) - 1;
      EQKitLayoutRow::addChild((EQKitLayoutRow *)(*(void *)(*((void *)this + 42) + 8 * (v9 / 0x19)) + 160 * (v9 % 0x19)), (const EQKitLayoutRow *)v11);
      EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v11);
    }
    else
    {
      EQKitLayoutRow::resolveKerning((EQKitLayoutRow *)(v6 + 160 * v7), *((const EQKit::Kerning::Manager **)this + 4));
      EQKitLayoutRow::overallLayout(v8, v11);
      EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v11);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
      std::deque<EQKitLayoutRow>::pop_back((void *)this + 41);
    }
  }
}

void sub_22350F7F4(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, EQKit::ILayout *a4@<X8>)
{
  uint64_t v8 = *(unsigned __int8 *)(EQKitLayoutManager::layoutContext(a1) + 16);

  EQKitLayoutManager::layoutBox(a1, a2, 0, v8, 0, 0, a3, a4);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, EQKit::ILayout *a8@<X8>)
{
  EQKitLayoutManager::beginRow(a1, 1, 0);
  unint64_t v16 = *((void *)a1 + 46) + *((void *)a1 + 45) - 1;
  *(_DWORD *)(*(void *)(*((void *)a1 + 42) + 8 * (v16 / 0x19)) + 160 * (v16 % 0x19) + 152) = a5;
  EQKitLayoutManager::layout(a1, a2, a3, a4, a6, a7);

  EQKitLayoutManager::endRow(a1, a8);
}

void EQKitLayoutManager::layout(EQKitLayoutManager *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a6;
  double v40 = a2;
  unint64_t v11 = *((void *)a1 + 34) + *((void *)a1 + 33) - 1;
  uint64_t v12 = *(void *)(*((void *)a1 + 30) + 8 * (v11 / 0x1E));
  if (a6) {
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back((void *)a1 + 35, &v39);
  }
  int v38 = 0;
  uint64_t v13 = *((void *)a1 + 75);
  *(void *)&v37[0] = a2;
  DWORD2(v37[0]) = 8;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v13, v13 + 8, (uint64_t)v37, &v38);
  if (v38 == 2)
  {
    a4 = 1;
  }
  else if (v38 == 1)
  {
    a4 = 0;
  }
  BOOL isOperatorPaddingRequired = EQKitLayoutManager::isOperatorPaddingRequired(a1);
  unint64_t v16 = (void *)*((void *)a1 + 48);
  unint64_t v15 = *((void *)a1 + 49);
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v18 = *((void *)a1 + 47);
    uint64_t v19 = ((uint64_t)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61) {
      abort();
    }
    uint64_t v20 = v15 - v18;
    uint64_t v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
      uint64_t v21 = v19 + 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      BOOL v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)a1 + 392, v22);
    }
    else {
      BOOL v23 = 0;
    }
    unint64_t v24 = &v23[8 * v19];
    long long v25 = &v23[8 * v22];
    *(void *)unint64_t v24 = a2;
    double v17 = v24 + 8;
    uint64_t v27 = (char *)*((void *)a1 + 47);
    double v26 = (char *)*((void *)a1 + 48);
    if (v26 != v27)
    {
      do
      {
        uint64_t v28 = *((void *)v26 - 1);
        v26 -= 8;
        *((void *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      double v26 = (char *)*((void *)a1 + 47);
    }
    *((void *)a1 + 47) = v24;
    *((void *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = v17;
    *((void *)a1 + 49) = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *unint64_t v16 = a2;
    double v17 = v16 + 1;
  }
  uint64_t v29 = v12 + 136 * (v11 % 0x1E);
  *((void *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = v17;
  double v30 = v40;
  EQKitLayoutContext::EQKitLayoutContext(v37, a1, v29, v40, a3, a4, a5);
  std::deque<EQKitLayoutContext>::push_back((void *)a1 + 29, (EQKitLayoutContext *)v37);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v37);
  int isEmbellishedOperatorRoot = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, v30);
  if (isEmbellishedOperatorRoot) {
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back((void *)a1 + 50, &v40);
  }
  uint64_t v32 = *((void *)a1 + 61);
  if (!v32)
  {
    double v34 = v40;
    if (v40) {
      goto LABEL_28;
    }
LABEL_30:
    memset(v37, 0, 32);
    goto LABEL_32;
  }
  double v33 = (const EQKitLayoutStretchedOperator *)(*(void *)(*((void *)a1 + 57)
                                                         + 8 * ((v32 + *((void *)a1 + 60) - 1) / 0x66uLL))
                                             + 40 * ((v32 + *((void *)a1 + 60) - 1) % 0x66uLL));
  double v34 = v40;
  if (*(void **)v33 != v40)
  {
    if (v40)
    {
LABEL_28:
      [v34 layoutSchemata];
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  EQKitLayoutManager::schemataForStretchedOperator((id *)a1, v33, (uint64_t)v37);
LABEL_32:
  if (isEmbellishedOperatorRoot) {
    double v35 = v40;
  }
  else {
    double v35 = 0;
  }
  EQKitLayoutManager::layoutSchemata((uint64_t)a1, (EQKit::Layout::Schemata *)v37, isOperatorPaddingRequired, v35);
  uint64_t v36 = *((void *)a1 + 40);
  if (v36) {
    (*(void (**)(void))(*(void *)(*(void *)(*((void *)a1 + 36)
  }
                                              + (((unint64_t)(v36 + *((void *)a1 + 39) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v36 + *((void *)a1 + 39) - 1) & 0x1FF))
                      + 16))();
  if (isEmbellishedOperatorRoot)
  {
    --*((void *)a1 + 55);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100]((void *)a1 + 50, 1);
  }
  std::deque<EQKitLayoutContext>::pop_back((void *)a1 + 29);
  *((void *)a1 + 48) -= 8;
  if (v39)
  {
    --*((void *)a1 + 40);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100]((void *)a1 + 35, 1);
  }
  EQKit::Layout::Schemata::~Schemata((id *)v37);
}

void sub_22350FCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

uint64_t EQKitLayoutManager::layout(EQKitLayoutManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 *)(EQKitLayoutManager::layoutContext(a1) + 16);

  return EQKitLayoutManager::layout(a1, a2, 0, v6, 0, a3);
}

void EQKitLayoutManager::layoutIntoRow(uint64_t a1, EQKitLayoutRow *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  EQKitLayoutManager::layout(a1, a3, a4, a5, 0, a6);
  uint64_t v12 = *(void *)(a1 + 368);
  if (v12
    || (uint64_t v13 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::layoutIntoRow(EQKitLayoutRow &, id<EQKitLayoutNode>, NSInteger, BOOL, LayoutCallback)"), @"EQKitLayoutManager.mm", 263, @"invalid state"), (uint64_t v12 = *(void *)(a1 + 368)) != 0))
  {
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v15, (const EQKitLayoutRow *)(*(void *)(*(void *)(a1 + 336) + 8 * ((v12 + *(void *)(a1 + 360) - 1) / 0x19uLL))+ 160 * ((v12 + *(void *)(a1 + 360) - 1) % 0x19uLL)));
    EQKitLayoutRow::operator=(a2, (EQKitLayoutRow *)v15);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v15);
    EQKitLayoutRow::resolveKerning(a2, *(const EQKit::Kerning::Manager **)(a1 + 32));
    EQKitLayoutRow::buildAlignmentGroups(a2);
  }
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)v14);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v14);
}

void sub_22350FE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addHSpace(EQKitLayoutManager *this, double a2)
{
  if (a2 != 0.0)
  {
    CFStringRef v3 = [[EQKitHSpace alloc] initWithWidth:a2];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v5, &v3->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v5, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v5, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v4, (const EQKit::ILayout *)v5);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v4, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v4);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v5);
  }
}

void sub_22350FF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void EQKitLayoutManager::addRowChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 368)
    || (unint64_t v15 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::addRowChild(EQKit::ILayout, id<EQKitLayoutNode>)"), @"EQKitLayoutManager.mm", 3132, @"invalid state"), *(void *)(a1 + 368)))
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 32);
    int v7 = (v6 >> 4) & 3;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    if (v7 != 3)
    {
      EQKitLayoutManager::lengthForMetric((id *)a1, (v7 + 30));
      uint64_t v9 = v10;
      LOWORD(v6) = *(_WORD *)(a2 + 32);
    }
    int v11 = v6 >> 6;
    if (v11 != 3)
    {
      EQKitLayoutManager::lengthForMetric((id *)a1, (v11 + 30));
      uint64_t v8 = v12;
    }
    *(void *)(a2 + 40) = v9;
    *(void *)(a2 + 4_Block_object_dispose(&STACK[0x560], 8) = v8;
    unint64_t v13 = *(void *)(a1 + 368) + *(void *)(a1 + 360) - 1;
    uint64_t v14 = *(void *)(*(void *)(a1 + 336) + 8 * (v13 / 0x19)) + 160 * (v13 % 0x19);
    EQKitLayoutRow::addChild(v14, a3, (const EQKit::ILayout *)a2);
  }
}

void EQKitLayoutManager::addOperatorLeftSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v4 = *((void *)this + 46);
  if (v4
    || (uint64_t v9 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::addOperatorLeftSpace(CGFloat)"), @"EQKitLayoutManager.mm", 289, @"invalid state"), (uint64_t v4 = *((void *)this + 46)) != 0))
  {
    unint64_t v5 = *(void *)(*((void *)this + 42) + 8 * ((v4 + *((void *)this + 45) - 1) / 0x19uLL))
       + 160 * ((v4 + *((void *)this + 45) - 1) % 0x19uLL);
    double v6 = *(double *)(v5 + 144);
    double v7 = fmax(a2 - v6, 0.0);
    if (v6 > 0.0) {
      a2 = v7;
    }
    *(void *)(v5 + 144) = 0;
  }
  if (a2 != 0.0)
  {
    uint64_t v8 = [[EQKitHSpace alloc] initWithWidth:a2];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v11, &v8->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v11, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v11, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v10, (const EQKit::ILayout *)v11);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v10, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_223510208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void EQKitLayoutManager::addOperatorRightSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v4 = *((void *)this + 46);
  if (v4
    || (double v6 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::addOperatorRightSpace(CGFloat)"), @"EQKitLayoutManager.mm", 318, @"invalid state"), (uint64_t v4 = *((void *)this + 46)) != 0))
  {
    *(double *)(*(void *)(*((void *)this + 42) + 8 * ((v4 + *((void *)this + 45) - 1) / 0x19uLL))
              + 160 * ((v4 + *((void *)this + 45) - 1) % 0x19uLL)
              + 144) = a2;
  }
  if (a2 != 0.0)
  {
    unint64_t v5 = [[EQKitHSpace alloc] initWithWidth:a2];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v8, &v5->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v8, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v8, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v7, (const EQKit::ILayout *)v8);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v7, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v7);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v8);
  }
}

void sub_223510374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void *EQKitLayoutManager::clearOperatorSpace(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[46];
  if (v2
    || (CFStringRef v3 = (void *)[MEMORY[0x263F08690] currentHandler],
        this = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::clearOperatorSpace()"), @"EQKitLayoutManager.mm", 337, @"invalid state"), (uint64_t v2 = v1[46]) != 0))
  {
    *(void *)(*(void *)(v1[42] + 8 * ((v2 + v1[45] - 1) / 0x19uLL)) + 160 * ((v2 + v1[45] - 1) % 0x19uLL) + 144) = 0;
  }
  return this;
}

void EQKitLayoutManager::alignBoxHorizontally(const EQKit::ILayout *a1@<X1>, int a2@<W2>, int a3@<W3>, EQKit::ILayout *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  EQKit::ILayout::ILayout(a4, a1);
  if (a2 == 2)
  {
    id v14 = *(id *)a1;
    if (a3)
    {
      [v14 erasableBounds];
      double v12 = 0.0 - CGRectGetMidX(v24) + a6;
    }
    else
    {
      [v14 width];
      double v12 = (a5 - v15) * 0.5;
    }
  }
  else
  {
    double v12 = 0.0;
    if (a2 == 3)
    {
      [*(id *)a1 width];
      double v12 = a5 - v13;
    }
  }
  [*(id *)a1 width];
  double v17 = a5 - (v12 + v16);
  if (v12 != 0.0 || v17 != 0.0)
  {
    if (*(void *)a1)
    {
      id v18 = objc_alloc_init(MEMORY[0x263EFF980]);
      if (v12 != 0.0)
      {
        uint64_t v19 = [[EQKitHSpace alloc] initWithWidth:v12];
        [v18 addObject:v19];
      }
      [v18 addObject:*(void *)a1];
      if (v17 != 0.0)
      {
        uint64_t v20 = [[EQKitHSpace alloc] initWithWidth:v17];
        [v18 addObject:v20];
      }
      uint64_t v21 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v18];
      EQKit::ILayout::setBox((EQKitBox *)a4, &v21->super.super);
    }
    else
    {
      unint64_t v22 = [[EQKitHSpace alloc] initWithWidth:v12 + v17];
      EQKit::ILayout::ILayout((EQKit::ILayout *)v23, &v22->super);
      EQKit::ILayout::operator=((uint64_t)a4, (uint64_t)v23);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v23);
    }
  }
}

void sub_223510614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

BOOL EQKitLayoutManager::isOperatorPaddingRequired(EQKitLayoutManager *this)
{
  unint64_t v1 = *((void *)this + 46) + *((void *)this + 45) - 1;
  if (*(_DWORD *)(*(void *)(*((void *)this + 42) + 8 * (v1 / 0x19)) + 160 * (v1 % 0x19) + 152) != 1)
  {
    for (uint64_t i = *((void *)this + 48); i != *((void *)this + 47); i -= 8)
    {
      unint64_t v5 = *(void **)(i - 8);
      int v6 = [v5 isOperatorPaddingRequired];
      if (v6) {
        return v6 == 2;
      }
    }
  }
  return 0;
}

uint64_t EQKitLayoutManager::isEmbellishedOperatorRoot(void *a1, void *a2)
{
  uint64_t result = [a2 isEmbellishedOperator];
  if (result)
  {
    uint64_t v5 = a1[55];
    if (v5)
    {
      uint64_t v6 = [*(id *)(*(void *)(a1[51] + (((unint64_t)(v5 + a1[54] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v5 + a1[54] - 1) & 0x1FF)) operatorCore];
      return v6 != [a2 operatorCore];
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void EQKitLayoutManager::schemataForStretchedOperator(id *this@<X0>, const EQKitLayoutStretchedOperator *a2@<X1>, uint64_t a3@<X8>)
{
  EQKit::Layout::Schemata::Schemata(a3);
  uint64_t v6 = *(void **)a2;
  int v7 = *((_DWORD *)a2 + 2);
  if (v7 == 1)
  {
    unsigned __int16 v8 = [*(id *)a2 operatorUnicharOrNul];
    uint64_t v9 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[this[74] fontManager]);
    unint64_t v10 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
    if ((*(unsigned int (**)(uint64_t, void, uint64_t, unint64_t))(*(void *)v9 + 104))(v9, v8, 1, v10 + 8))
    {
      EQKit::Layout::Schemata::operFontStretch((uint64_t)v11);
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
    }
    else
    {
      if (!v6) {
        return;
      }
      [v6 layoutSchemata];
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
    }
    goto LABEL_10;
  }
  if (v7 == 2)
  {
    EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(this, *(void **)a2, a3);
    return;
  }
  if (v6)
  {
    [*(id *)a2 layoutSchemata];
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
LABEL_10:
    EQKit::Layout::Schemata::~Schemata(v11);
  }
}

void sub_223510894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::Layout::Schemata::~Schemata(&a9);
  EQKit::Layout::Schemata::~Schemata(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSchemata(uint64_t a1, EQKit::Layout::Schemata *a2, int a3, void *a4)
{
  EQKit::ILayout::ILayout((EQKit::ILayout *)v69, 0);
  int v9 = *((_DWORD *)a2 + 2);
  if (a4) {
    int v10 = a3;
  }
  else {
    int v10 = 0;
  }
  if (((v9 - 5) & 0xFFFFFFFD) != 0) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  if (v11 == 1)
  {
    double v12 = EQKitLayoutManager::leftSpaceForOperator(a1, (void *)[a4 operatorCore]);
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a1, v12);
    int v9 = *((_DWORD *)a2 + 2);
  }
  switch(v9)
  {
    case 1:
      uint64_t v13 = EQKit::Layout::Schemata::nodeSchemata(a2);
      unint64_t v14 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      EQKitLayoutManager::layout(a1, v13, 0, *(unsigned __int8 *)(v14 + 16), 0, 0);
      goto LABEL_41;
    case 2:
      EQKitLayoutManager::layoutRow((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 3:
      uint64_t v15 = [(id)EQKit::Layout::Schemata::phantomSchemata(a2) schemataChild];
      unint64_t v16 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, v15, 0, *(unsigned __int8 *)(v16 + 16), 0, 0, 0, (EQKit::ILayout *)v68);
      double v17 = [EQKitHVSpace alloc];
      [v68[0] width];
      double v19 = v18;
      [v68[0] height];
      double v21 = v20;
      [v68[0] depth];
      BOOL v23 = [(EQKitHVSpace *)v17 initWithWidth:v19 height:v21 depth:v22];
      EQKit::ILayout::ILayout((EQKit::ILayout *)&v65, v23);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)&v65);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)&v65);

      goto LABEL_40;
    case 4:
      EQKitLayoutManager::layoutSubsuperscript((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 5:
      EQKitLayoutManager::layoutUnderover(a2, a1, a3, a4, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 6:
      EQKitLayoutManager::layoutRadical((id *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 7:
      EQKitLayoutManager::layoutFraction(a1, a2, a3, a4, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 8:
      EQKitLayoutManager::layoutIdentifier((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 9:
      EQKitLayoutManager::layoutNumber((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 10:
      EQKitLayoutManager::layoutOperator((id *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 11:
      uint64_t v24 = *(void *)(a1 + 488);
      if (!v24) {
        goto LABEL_41;
      }
      unint64_t v25 = v24 + *(void *)(a1 + 480) - 1;
      uint64_t v26 = *(void *)(*(void *)(a1 + 456) + 8 * (v25 / 0x66));
      unint64_t v27 = v25 % 0x66;
      unsigned int v64 = [*(id *)(v26 + 40 * (v25 % 0x66)) operatorUnicharOrNul];
      uint64_t v28 = v26 + 40 * v27;
      int v30 = *(_DWORD *)(v28 + 8);
      uint64_t v29 = (unsigned int *)(v28 + 8);
      unsigned int v61 = v64;
      double v31 = (double *)(v26 + 40 * v27);
      if (v30 == 2) {
        double v32 = v31[3] + v31[2];
      }
      else {
        double v32 = v31[4];
      }
      uint64_t v35 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
      uint64_t v36 = *v29;
      unint64_t v37 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      int v38 = (const void *)(*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unint64_t, double))(*(void *)v35 + 80))(v35, &v64, v36, v37 + 8, v32);
      if (!v38) {
        goto LABEL_65;
      }
      uint64_t v39 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
      double v40 = (void *)(*(uint64_t (**)(uint64_t, void, const void *))(*(void *)v39 + 152))(v39, v64, v38);
      if (!v40) {
        goto LABEL_64;
      }
      double v41 = [[EQKitStringBox alloc] initWithAttributedString:v40 cgColor:*(void *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96)];
      double v42 = v41;
      int v43 = *v29;
      if (v41) {
        BOOL v44 = v43 == 2;
      }
      else {
        BOOL v44 = 0;
      }
      if (v44)
      {
        [(EQKitStringBox *)v41 height];
        double v46 = v45;
        [(EQKitStringBox *)v42 depth];
        double v48 = (v32 - (v46 + v47)) * 0.5 + v47 - *(double *)(v26 + 40 * v27 + 24);
        if (v48 == 0.0) {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, (EQKitBox *)v42);
        }
        else {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, (EQKitBox *)[[EQKitVShift alloc] initWithBox:v42 offset:v48]);
        }
        EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      }
      else
      {
        if (v43 != 1) {
          goto LABEL_63;
        }
        EQKit::ILayout::ILayout((EQKit::ILayout *)v68, (EQKitBox *)v41);
        EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      }
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
LABEL_63:

LABEL_64:
      CFRelease(v38);
LABEL_65:
      if (!v69[0])
      {
        long long v65 = *MEMORY[0x263F001B0];
        double v66 = 0.0;
        double v67 = 0.0;
        uint64_t v49 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
        uint64_t v50 = *v29;
        BOOL v51 = (double *)(v26 + 40 * v27);
        double v52 = v50 == 2 ? v51[3] + v51[2] : v51[4];
        unint64_t v53 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
        unint64_t v54 = (const CGPath *)(*(uint64_t (**)(uint64_t, void, uint64_t, unint64_t, long long *, double))(*(void *)v49 + 88))(v49, v61, v50, v53 + 8, &v65, v52);
        if (v54)
        {
          if (*v29 == 2)
          {
            uint64_t v55 = v26 + 40 * v27;
            double v56 = *(double *)(v55 + 16);
            double v57 = *(double *)(v55 + 24);
            double v58 = *((double *)&v65 + 1);
            double v59 = [EQKitPathBox alloc];
            float64x2_t v60 = [(EQKitPathBox *)v59 initWithCGPath:v54 height:*(void *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96) paddingLeft:v56 + (v58 - (v56 + v57)) * 0.5 paddingRight:v66 cgColor:v67];
          }
          else
          {
            float64x2_t v60 = [[EQKitPathBox alloc] initWithCGPath:v54 height:*(void *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96) cgColor:*((double *)&v65 + 1)];
          }
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, &v60->super);
          EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
          CGPathRelease(v54);
        }
      }
      EQKit::ILayout::setVerticalContentClassification((uint64_t)v69, 5);
LABEL_41:
      if (v69[0])
      {
        EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 0, 1);
        EQKit::ILayout::ILayout((EQKit::ILayout *)v63, (const EQKit::ILayout *)v69);
        uint64_t v33 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
        EQKitLayoutManager::addRowChild(a1, (uint64_t)v63, v33);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v63);
        EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)v62);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v62);
      }
      if (v11)
      {
        double v34 = EQKitLayoutManager::rightSpaceForOperator(a1, (void *)[a4 operatorCore]);
        EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a1, v34);
      }
      else if (!a4 && a3)
      {
        EQKitLayoutManager::clearOperatorSpace((void *)a1);
      }
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v69);
      return;
    case 12:
      EQKitLayoutManager::layoutStack((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 13:
      EQKitLayoutManager::layoutStackGroup((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 14:
      EQKitLayoutManager::layoutStackRow((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 15:
      EQKitLayoutManager::layoutStackLine((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 16:
      EQKitLayoutManager::layoutStackCarries((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 17:
      EQKitLayoutManager::layoutStackCarry((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 18:
      EQKitLayoutManager::layoutLongDivision((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 19:
      EQKitLayoutManager::layoutTable((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 20:
      EQKitLayoutManager::layoutTableRow((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 21:
      EQKitLayoutManager::layoutNone((EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 22:
      EQKitLayoutManager::layoutText((id *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 23:
      EQKitLayoutManager::layoutPadded((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 24:
      EQKitLayoutManager::layoutSpace((EQKitLayoutManager *)a1, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 25:
      EQKitLayoutManager::layoutFenced((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 26:
      EQKitLayoutManager::layoutAlignGroup((EQKitLayoutManager *)a1, v8);
      goto LABEL_41;
    case 27:
      EQKitLayoutManager::layoutAlignMark((EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 28:
      EQKitLayoutManager::layoutEnclose((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
LABEL_40:
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
      goto LABEL_41;
    default:
      goto LABEL_41;
  }
}

void sub_223511204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a32);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v32 - 192));
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(id *a1, void *a2, uint64_t a3)
{
  unsigned __int16 v6 = [a2 operatorUnicharOrNul];
  uint64_t v7 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[a1[74] fontManager]);
  unint64_t v8 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t, unint64_t))(*(void *)v7 + 104))(v7, v6, 2, v8 + 8);
  if (v9)
  {
    EQKit::Layout::Schemata::operFontStretch((uint64_t)v11);
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
  }
  else
  {
    if (a2) {
      [a2 layoutSchemata];
    }
    else {
      memset(v11, 0, sizeof(v11));
    }
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
  }
  EQKit::Layout::Schemata::~Schemata((id *)v11);
  return v9;
}

void sub_2235114B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

EQKit::ILayout *EQKitLayoutManager::layoutText@<X0>(id *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = EQKit::Layout::Schemata::textSchemata(a2);
  if (!v4) {
    return EQKit::ILayout::ILayout(a3, 0);
  }
  uint64_t v5 = (void *)v4;
  unint64_t v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  CTFontRef cf = EQKitLayoutManager::newBaseFontWithScript((EQKitLayoutManager *)this, (const Info *)(v6 + 8));
  int v7 = [v5 schemataIsQuoted];
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)this, 0, 1);
  if (v7)
  {
    std::string::basic_string[abi:nn180100]<0>(__p, "\"");
    uint64_t v8 = (uint64_t)this[75];
    uint64_t v41 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
    int v42 = 12;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v8, v8 + 80, (uint64_t)&v41, __p);
    id v9 = objc_alloc(MEMORY[0x263F089D8]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = __p;
    }
    else {
      int v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    id v11 = (id)[v9 initWithUTF8String:v10];
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    id v11 = 0;
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  double v12 = (void *)[v5 schemataChildren];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v37 objects:v43 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v38 != v14) {
          objc_enumerationMutation(v12);
        }
        unint64_t v16 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (v11) {
            [v11 appendString:v16];
          }
          else {
            id v11 = (id)[v16 mutableCopy];
          }
        }
        else if ([v16 conformsToProtocol:&unk_26D73C378])
        {
          if (v11)
          {
            uint64_t v17 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[this[74] fontManager]);
            double v18 = (void *)(*(uint64_t (**)(uint64_t, id, CTFontRef))(*(void *)v17 + 144))(v17, v11, cf);
            double v19 = [[EQKitStringBox alloc] initWithAttributedString:v18 cgColor:*(void *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this) + 96)];
            EQKit::ILayout::ILayout((EQKit::ILayout *)__p, &v19->super);
            EQKit::ILayout::setVerticalContentClassification((uint64_t)__p, 5);
            EQKit::ILayout::ILayout((EQKit::ILayout *)v35, (const EQKit::ILayout *)__p);
            uint64_t v20 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
            EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v35, v20);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v35);

            EQKit::ILayout::~ILayout((EQKit::ILayout *)__p);
          }
          unint64_t v21 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
          EQKitLayoutManager::layout(this, v16, 0, *(unsigned __int8 *)(v21 + 16), 0, 0);
          id v11 = 0;
        }
      }
      uint64_t v13 = [v12 countByEnumeratingWithState:&v37 objects:v43 count:16];
    }
    while (v13);
  }
  if (!v7) {
    goto LABEL_31;
  }
  if (!v11) {
    id v11 = objc_alloc_init(MEMORY[0x263F089D8]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "\"");
  uint64_t v22 = (uint64_t)this[75];
  uint64_t v41 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
  int v42 = 13;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v22, v22 + 80, (uint64_t)&v41, __p);
  id v23 = objc_alloc(MEMORY[0x263F089D8]);
  uint64_t v24 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? __p
      : (std::string *)__p[0].__r_.__value_.__r.__words[0];
  unint64_t v25 = (void *)[v23 initWithUTF8String:v24];
  [v11 appendString:v25];

  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (!v11) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v11)
  {
LABEL_32:
    uint64_t v26 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[this[74] fontManager]);
    unint64_t v27 = (void *)(*(uint64_t (**)(uint64_t, id, CTFontRef))(*(void *)v26 + 144))(v26, v11, cf);
    uint64_t v28 = [[EQKitStringBox alloc] initWithAttributedString:v27 cgColor:*(void *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this) + 96)];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v34, &v28->super);
    uint64_t v29 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v34, v29);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v34);
  }
LABEL_33:
  EQKitLayoutManager::endRow((EQKitLayoutManager *)this, (EQKit::ILayout *)v33);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
  if (cf) {
    CFRelease(cf);
  }
  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_223511948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutManager::currentNode(EQKitLayoutManager *this)
{
  uint64_t v2 = *((void *)this + 47);
  uint64_t v1 = *((void *)this + 48);
  if (v2 == v1)
  {
    uint64_t v5 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "id<EQKitLayoutNode> EQKitLayoutManager::currentNode() const"), @"EQKitLayoutManager.mm", 3144, @"invalid state");
    uint64_t v2 = *((void *)this + 47);
    uint64_t v1 = *((void *)this + 48);
  }
  if (v2 == v1) {
    return 0;
  }
  else {
    return *(void *)(v1 - 8);
  }
}

BOOL EQKitLayoutManager::isSchemataResponsibleForOperatorPadding(EQKitLayoutManager *this, const Schemata *a2)
{
  return ((a2->var1 - 5) & 0xFFFFFFFD) == 0;
}

void EQKitLayoutManager::layoutRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  unint64_t v6 = (void *)EQKit::Layout::Schemata::children(a2);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v28;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v28 != v8) {
          objc_enumerationMutation(v6);
        }
        int v10 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        if ([v10 isEmbellishedOperator]
          && (EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)[v10 operatorCore]) & 1) != 0)
        {
          unint64_t v13 = *((void *)this + 46) + *((void *)this + 45) - 1;
          if (EQKitLayoutRow::isNewRowRequiredForStretching((EQKitLayoutRow *)(*(void *)(*((void *)this + 42)
                                                                                          + 8 * (v13 / 0x19))
                                                                              + 160 * (v13 % 0x19))))
          {
            EQKitLayoutManager::beginRow(this, 1, 1);
            int v11 = 1;
          }
          else
          {
            int v11 = 0;
          }
          int v12 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v27 objects:v32 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  int v11 = 0;
  int v12 = 0;
LABEL_15:
  uint64_t v14 = (NSArray *)EQKit::Layout::Schemata::children(a2);
  uint64_t v15 = EQKitLayoutFilterOutSpaceLike(v14);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v16 = [(NSArray *)v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v24;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v14);
        }
        double v19 = *(void **)(*((void *)&v23 + 1) + 8 * j);
        if (v12
          && [*(id *)(*((void *)&v23 + 1) + 8 * j) isEmbellishedOperator]
          && EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)[v19 operatorCore]))
        {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v22, 0);
          EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v22, (uint64_t)v19);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v22);
        }
        else
        {
          EQKitLayoutManager::pushImplicitFormIfRequired(this, v19, v15);
          unint64_t v20 = EQKitLayoutManager::layoutContext(this);
          EQKitLayoutManager::layout(this, v19, 0, *(unsigned __int8 *)(v20 + 16), 0, 0);
          EQKitLayoutManager::popImplicitFormIfRequired(this, v19);
        }
      }
      uint64_t v16 = [(NSArray *)v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v16);
  }
  EQKit::ILayout::ILayout(a3, 0);
  if (v12)
  {
    EQKitLayoutManager::resolveRow(this, v15);
    if (v11)
    {
      EQKitLayoutManager::endRow(this, (EQKit::ILayout *)v21);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v21);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v21);
    }
  }
}

void sub_223511D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v16);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFraction(uint64_t a1@<X0>, EQKit::Layout::Schemata *a2@<X1>, int a3@<W2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  unint64_t v10 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  int v11 = (void *)EQKit::Layout::Schemata::fractionSchemata(a2);
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, [v11 schemataNumerator], *(unsigned char *)(v10 + 16) == 0, 0, 0, 0, 0, (EQKit::ILayout *)v76);
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, [v11 schemataDenominator], *(unsigned char *)(v10 + 16) == 0, 0, 0, 1, 0, (EQKit::ILayout *)v74);
  if (*(unsigned char *)(v10 + 104)) {
    double v12 = *(double *)(v10 + 112);
  }
  else {
    double v12 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  }
  uint64_t v13 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  double v14 = EQKitLayoutManager::lengthForAttribute((EQKitLayoutManager *)a1, 36, v13, v12);
  double v15 = 0.0;
  if (v14 >= 0.0) {
    double v16 = v14;
  }
  else {
    double v16 = 0.0;
  }
  if (v16 > 0.0)
  {
    uint64_t v17 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
    unint64_t v18 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
    double v15 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v17 + 40))(v17, 25, v18 + 8, v12);
  }
  double v19 = (EQKitBox *)v76[0];
  unint64_t v20 = (EQKitBox *)v74[0];
  [v76[0] width];
  double v22 = v21;
  [(EQKitBox *)v20 width];
  double v24 = v23.n128_f64[0];
  if (v22 > v23.n128_f64[0]) {
    v23.n128_f64[0] = v22;
  }
  double v65 = v23.n128_f64[0];
  uint64_t v25 = *(void *)(v10 + 80);
  if (*(unsigned char *)(v10 + 104)) {
    v23.n128_u64[0] = *(void *)(v10 + 112);
  }
  else {
    v23.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  }
  double v27 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v25 + 40))(v25, 3, v10 + 8, v23);
  uint64_t v28 = *(void *)(v10 + 80);
  if (*(unsigned char *)(v10 + 104)) {
    v26.n128_u64[0] = *(void *)(v10 + 112);
  }
  else {
    v26.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  }
  double v30 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v28 + 40))(v28, 4, v10 + 8, v26);
  char v31 = *(unsigned char *)(v10 + 104);
  if ((v31 & 2) != 0)
  {
    double v66 = *(double *)(v10 + 120);
  }
  else
  {
    double v66 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v10);
    char v31 = *(unsigned char *)(v10 + 104);
  }
  uint64_t v32 = *(void *)(v10 + 80);
  if (v31) {
    v29.n128_u64[0] = *(void *)(v10 + 112);
  }
  else {
    v29.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  }
  double v33 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v32 + 40))(v32, 2, v10 + 8, v29);
  [(EQKitBox *)v19 depth];
  double v34 = v27 - v66;
  double v35 = v16 * 0.5;
  double v36 = v34 - v16 * 0.5;
  double v38 = v33;
  if (v33 <= v36 - v37)
  {
    [(EQKitBox *)v19 depth];
    double v38 = v36 - v39;
  }
  [(EQKitBox *)v20 height];
  double v40 = v30 + v66 - v35;
  if (v33 <= v40 - v41)
  {
    [(EQKitBox *)v20 height];
    double v33 = v40 - v42;
  }
  id v43 = objc_alloc_init(MEMORY[0x263EFF980]);
  int v73 = 2;
  uint64_t v44 = *(void *)(a1 + 600);
  uint64_t v69 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  int v70 = 24;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v44, v44 + 128, (uint64_t)&v69, &v73);
  int v72 = 2;
  uint64_t v45 = *(void *)(a1 + 600);
  uint64_t v69 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  int v70 = 25;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v45, v45 + 128, (uint64_t)&v69, &v72);
  double v46 = v65 + v15 * 2.0;
  if (v73 == 3)
  {
    double v47 = v46 - v22;
  }
  else
  {
    double v47 = 0.0;
    if (v73 == 2) {
      double v47 = (v46 - v22) * 0.5;
    }
  }
  if (v72 == 3)
  {
    double v48 = v46 - v24;
  }
  else
  {
    double v48 = 0.0;
    if (v72 == 2) {
      double v48 = (v46 - v24) * 0.5;
    }
  }
  if (v47 == 0.0)
  {
    [v43 addObject:v19];
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a1, v47);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v71, v19);
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v71, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v71);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)&v69);
    if (v69) {
      objc_msgSend(v43, "addObject:");
    }
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v69);
  }
  uint64_t v49 = [[EQKitVSpace alloc] initWithHeight:v38 depth:0.0];
  [v43 addObject:v49];

  uint64_t v50 = [[EQKitRule alloc] initWithHeight:*(void *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96) depth:v35 width:v35 cgColor:v46];
  [v43 addObject:v50];

  BOOL v51 = [[EQKitVSpace alloc] initWithHeight:v33 depth:0.0];
  [v43 addObject:v51];

  if (v48 == 0.0)
  {
    [v43 addObject:v20];
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a1, v48);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v68, v20);
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v68, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)&v69);
    if (v69) {
      objc_msgSend(v43, "addObject:");
    }
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v69);
  }
  double v52 = [[EQKitOffsetVBox alloc] initWithChildBoxes:v43 pivotIndex:2 offset:v66];
  EQKit::ILayout::ILayout(a5, &v52->super.super.super);

  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF0 | 0xA;
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v76);
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v74);
  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a5, 1);

  if (*(unsigned char *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 16)) {
    goto LABEL_46;
  }
  if ((v77 & 0x1C00u) <= 0x1000 || (v75 & 0x1C00u) <= 0x1000)
  {
    if ((v77 & 0x1000) == 0)
    {
LABEL_46:
      char v53 = 1;
      goto LABEL_47;
    }
    if ((v75 & 0x1000) != 0) {
      char v53 = 3;
    }
    else {
      char v53 = 1;
    }
  }
  else if (*(uint64_t *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 8) <= 0)
  {
    char v53 = 3;
  }
  else
  {
    char v53 = 4;
  }
LABEL_47:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v53);
  if (a3)
  {
    uint64_t v54 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
    unint64_t v55 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
    unint64_t v56 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
    if (*(unsigned char *)(v56 + 104)) {
      v57.n128_u64[0] = *(void *)(v56 + 112);
    }
    else {
      v57.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v56);
    }
    double v58 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v54 + 40))(v54, 26, v55 + 8, v57);
    double v59 = (void *)[a4 operatorCore];
    if (v59)
    {
      double v60 = EQKitLayoutManager::leftSpaceForOperator(a1, v59);
      double v61 = EQKitLayoutManager::rightSpaceForOperator(a1, v59);
      if (v58 <= v60) {
        double v62 = v60;
      }
      else {
        double v62 = v58;
      }
      if (v58 <= v61) {
        double v63 = v61;
      }
      else {
        double v63 = v58;
      }
      double v58 = v62;
    }
    else
    {
      double v63 = v58;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a1, v58);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v67, a5);
    uint64_t v64 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v67, v64);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v67);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a1, v63);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v69, 0);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v69);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v69);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v74);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v76);
}

void sub_22351251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  EQKit::ILayout::~ILayout(v41);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a41);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v42 - 200));
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSubsuperscript(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = (void *)EQKit::Layout::Schemata::subsuperscriptSchemata(a2);
  uint64_t v6 = [v5 schemataKernel];
  uint64_t v7 = [v5 schemataSubscript];
  uint64_t v8 = (void *)[v5 schemataSuperscript];

  EQKitLayoutManager::layoutSubsuperscript((uint64_t)this, v6, v7, v8, a3);
}

uint64_t EQKitLayoutManager::layoutOperator@<X0>(id *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  uint64_t v7 = (void *)EQKit::Layout::Schemata::tokenSchemata(a2);
  uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v6 + 80) + 72))(*(void *)(v6 + 80), [v7 schemataTokenString], v6 + 8);
  id v9 = [[EQKitStringBox alloc] initWithAttributedString:v8 cgColor:*(void *)(v6 + 96)];
  uint64_t v10 = [v7 schemataUnicharOrNul];
  double v11 = 0.0;
  if (v10)
  {
    double v12 = (void *)[(id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)this) operatorCore];
    if (EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, v12))
    {
      if (((*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v6 + 80) + 128))(*(void *)(v6 + 80), v10, v6 + 8) & 1) == 0)
      {
        [(EQKitStringBox *)v9 depth];
        double v14 = v13;
        [(EQKitStringBox *)v9 height];
        double v16 = v15;
        [(EQKitStringBox *)v9 depth];
        double v18 = v14 + (v16 + v17) * -0.5;
        if ((*(unsigned char *)(v6 + 104) & 2) != 0) {
          double v19 = *(double *)(v6 + 120);
        }
        else {
          double v19 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v6);
        }
        double v11 = v18 + v19;
      }
    }
  }
  double v20 = v11 + EQKitLayoutManager::lengthForCharacterProperty(this, 3, v10, 0.0);
  if (v20 == 0.0)
  {
    double v21 = v9;
  }
  else
  {
    double v21 = [[EQKitVShift alloc] initWithBox:v9 offset:v20];
  }
  EQKit::ILayout::ILayout(a3, &v21->super);
  double v22 = (void *)[(id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)this) operatorCore];
  uint64_t v23 = [this[74] operatorDictionary];
  unsigned __int16 v24 = [v22 operatorId];
  int v25 = EQKitLayoutManager::operatorForm((uint64_t)this, v22);
  __n128 v26 = EQKit::Config::Operator::Dictionary::lookup(v23, v24, v25);
  if (v26 && (v26[6] & 0x40) != 0)
  {
    [(EQKitVShift *)v21 width];
    EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v30, &v21->super, v27 * 0.5);
    EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 1, (uint64_t)v30);
    EQKit::ILayoutOffset::~ILayoutOffset(v30);
  }
  if ((*(unsigned int (**)(void, uint64_t, unint64_t))(**(void **)(v6 + 80) + 112))(*(void *)(v6 + 80), v10, v6 + 8))
  {
    char v28 = 5;
  }
  else
  {
    char v28 = 2;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v28);
}

void sub_223512924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutIdentifier(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v5 = EQKitLayoutManager::layoutContext(this);
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = [(id)EQKit::Layout::Schemata::tokenSchemata(a2) schemataTokenString];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v6 + 72))(v6, v7, v5 + 8);
  id v9 = [[EQKitStringBox alloc] initWithAttributedString:v8 cgColor:*(void *)(v5 + 96)];
  uint64_t v10 = EQKit::ILayout::ILayout(a3, &v9->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v10, 5);
  unsigned int v11 = *(_DWORD *)(v5 + 20);
  if (v11 <= 0xD && ((1 << v11) & 0x3018) != 0) {
    *((_WORD *)a3 + 16) = *((_WORD *)a3 + 16) & 0xFF3F | 0x80;
  }
}

void sub_223512A30(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutNumber(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v6 = EQKitLayoutManager::layoutContext(this);
  uint64_t v7 = *(void *)(v6 + 80);
  uint64_t v8 = [(id)EQKit::Layout::Schemata::tokenSchemata(a2) schemataTokenString];
  id v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v7 + 72))(v7, v8, v6 + 8);
  uint64_t v10 = [[EQKitStringBox alloc] initWithAttributedString:v9 cgColor:*(void *)(v6 + 96)];
  unsigned int v11 = EQKit::ILayout::ILayout(a3, &v10->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v11, 5);
  EQKitLayoutManager::decimalPointOffsetInStringBox(this, v10);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v13, &v10->super, v12);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 2, (uint64_t)v13);
  EQKit::ILayoutOffset::~ILayoutOffset(v13);
}

void sub_223512B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutUnderover(EQKit::Layout::Schemata *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v7 = (void *)EQKit::Layout::Schemata::underoverSchemata(this);
  uint64_t v8 = (void *)[v7 schemataBase];
  id v9 = (void *)[v7 schemataUnder];
  uint64_t v10 = (void *)[v7 schemataOver];
  unint64_t v11 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
  long long v120 = (EQKitBox *)a5;
  EQKit::ILayout::ILayout(a5, 0);
  if (!*(unsigned char *)(v11 + 16) && EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(a2, v8))
  {
    EQKitLayoutManager::layoutSubsuperscript(a2, (uint64_t)v8, (uint64_t)v9, v10, (EQKit::ILayout *)&v153);
    double v12 = a5;
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v153);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v153);
    double v13 = 0.0;
    goto LABEL_181;
  }
  LODWORD(v151[0]) = 0;
  LODWORD(v150[0]) = 0;
  if (v9)
  {
    uint64_t v14 = *(void *)(a2 + 600);
    uint64_t v153 = (uint64_t)v9;
    LODWORD(v154) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v14, v14 + 8, (uint64_t)&v153, v151) & 1) == 0)
    {
      uint64_t v15 = *(void *)(a2 + 600);
      uint64_t v153 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
      LODWORD(v154) = 6;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v15, v15 + 8, (uint64_t)&v153, v151);
    }
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(a2 + 600);
    uint64_t v153 = (uint64_t)v10;
    LODWORD(v154) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v16, v16 + 8, (uint64_t)&v153, v150) & 1) == 0)
    {
      uint64_t v17 = *(void *)(a2 + 600);
      uint64_t v153 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
      LODWORD(v154) = 5;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v17, v17 + 8, (uint64_t)&v153, v150);
    }
  }
  if (LODWORD(v151[0])) {
    unsigned int v121 = LODWORD(v151[0]) == 2;
  }
  else {
    unsigned int v121 = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v9);
  }
  if (LODWORD(v150[0])) {
    unsigned int v18 = LODWORD(v150[0]) == 2;
  }
  else {
    unsigned int v18 = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v10);
  }
  v174[0] = 2;
  uint64_t v19 = *(void *)(a2 + 600);
  uint64_t v153 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
  LODWORD(v154) = 1;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v19, v19 + 128, (uint64_t)&v153, v174);
  if ([v8 isEmbellishedOperator]) {
    unsigned int v20 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)[v8 operatorCore]);
  }
  else {
    unsigned int v20 = 0;
  }
  if ([v9 isEmbellishedOperator]) {
    unsigned int v21 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)[v9 operatorCore]);
  }
  else {
    unsigned int v21 = 0;
  }
  if ([v10 isEmbellishedOperator])
  {
    unsigned int v22 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)[v10 operatorCore]);
    if (!v20)
    {
LABEL_24:
      BOOL v23 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    unsigned int v22 = 0;
    if (!v20) {
      goto LABEL_24;
    }
  }
  uint64_t v24 = *(void *)(a2 + 488);
  BOOL v23 = !v24
     || (unint64_t v25 = v24 + *(void *)(a2 + 480) - 1,
         uint64_t v26 = *(void *)(*(void *)(a2 + 456) + 8 * (v25 / 0x66)),
         unint64_t v27 = v25 % 0x66,
         *(void **)(v26 + 40 * v27) != v8)
     || *(_DWORD *)(v26 + 40 * v27 + 8) != 2;
LABEL_30:
  uint64_t v170 = 0;
  uint64_t v171 = &v170;
  uint64_t v172 = 0x2020000000;
  int v173 = 0;
  uint64_t v166 = 0;
  uint64_t v167 = &v166;
  uint64_t v168 = 0x2020000000;
  char v169 = 0;
  uint64_t v153 = 0;
  double v154 = &v153;
  uint64_t v155 = 0x5812000000;
  double v156 = __Block_byref_object_copy_;
  double v157 = __Block_byref_object_dispose_;
  double v158 = &unk_22389B221;
  uint64_t v159 = 0;
  __int16 v160 = 1;
  char v161 = 0;
  int v162 = 1;
  uint64_t v163 = 0x4028000000000000;
  int v164 = 0;
  CFTypeRef cf = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v151, 0);
  if (v8) {
    char v28 = v23;
  }
  else {
    char v28 = 1;
  }
  double v29 = 0.0;
  if ((v28 & 1) == 0)
  {
    v149[0] = MEMORY[0x263EF8330];
    v149[1] = 3221225472;
    v149[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke;
    v149[3] = &unk_2646AF600;
    v149[8] = a2;
    v149[4] = v8;
    v149[5] = &v170;
    v149[6] = &v153;
    v149[7] = &v166;
    unint64_t v30 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v8, 0, *(unsigned __int8 *)(v30 + 16), 0, 0, (uint64_t)v149, (EQKit::ILayout *)v150);
    EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v150);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v150);
    [v151[0] width];
    if (v31 >= 0.0)
    {
      [v151[0] width];
      double v29 = v32;
    }
  }
  uint64_t v145 = 0;
  double v146 = &v145;
  uint64_t v147 = 0x2020000000;
  char v148 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v150, 0);
  if (v9) {
    char v33 = v21;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0)
  {
    v142[0] = MEMORY[0x263EF8330];
    v142[1] = 3221225472;
    v142[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2;
    v142[3] = &unk_2646AF628;
    char v143 = v121;
    v142[4] = v9;
    v142[5] = &v145;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v9, v121 ^ 1, 0, 2, 0, (uint64_t)v142, (EQKit::ILayout *)v144);
    EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v144);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v144);
    [v150[0] width];
    if (v29 <= v34)
    {
      [v150[0] width];
      double v29 = v35;
    }
  }
  uint64_t v138 = 0;
  unint64_t v139 = &v138;
  uint64_t v140 = 0x2020000000;
  char v141 = 0;
  uint64_t v134 = 0;
  CGFloat v135 = (double *)&v134;
  uint64_t v136 = 0x2020000000;
  uint64_t v137 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v144, 0);
  if (v10) {
    char v36 = v22;
  }
  else {
    char v36 = 1;
  }
  if ((v36 & 1) == 0)
  {
    v131[0] = MEMORY[0x263EF8330];
    v131[1] = 3221225472;
    v131[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_3;
    v131[3] = &unk_2646AF650;
    char v132 = v18;
    v131[4] = v10;
    v131[5] = &v138;
    v131[7] = a2;
    v131[6] = &v134;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v10, v18 ^ 1, 0, 2, 0, (uint64_t)v131, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v144, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    [v144[0] width];
    if (v29 <= v37)
    {
      [v144[0] width];
      double v29 = v38;
    }
  }
  if (v23)
  {
    uint64_t v39 = [v8 operatorCore];
    double v40 = EQKitLayoutManager::adjustStretchyWidth((EQKitLayoutManager *)a2, (void *)[v8 operatorCore], v29);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v133, v39, 1, 0.0, 0.0, v40);
    std::deque<EQKitLayoutStretchedOperator>::push_back((void *)(a2 + 448), (uint64_t)v133);
    v130[0] = MEMORY[0x263EF8330];
    v130[1] = 3221225472;
    v130[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_4;
    v130[3] = &unk_2646AF600;
    v130[4] = v8;
    v130[5] = &v170;
    v130[6] = &v153;
    v130[7] = &v166;
    v130[8] = a2;
    unint64_t v41 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v8, 0, *(unsigned __int8 *)(v41 + 16), 0, 0, (uint64_t)v130, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    --*(void *)(a2 + 488);
    std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((void *)(a2 + 448), 1);
  }
  if (v21)
  {
    uint64_t v42 = [v9 operatorCore];
    double v43 = EQKitLayoutManager::adjustStretchyWidth((EQKitLayoutManager *)a2, (void *)[v9 operatorCore], v29);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v133, v42, 1, 0.0, 0.0, v43);
    std::deque<EQKitLayoutStretchedOperator>::push_back((void *)(a2 + 448), (uint64_t)v133);
    v128[0] = MEMORY[0x263EF8330];
    v128[1] = 3221225472;
    v128[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_5;
    v128[3] = &unk_2646AF628;
    char v129 = v121;
    v128[4] = v9;
    v128[5] = &v145;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v9, v121 ^ 1, 0, 2, 0, (uint64_t)v128, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    --*(void *)(a2 + 488);
    std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((void *)(a2 + 448), 1);
  }
  if (v22)
  {
    uint64_t v44 = [v10 operatorCore];
    double v45 = EQKitLayoutManager::adjustStretchyWidth((EQKitLayoutManager *)a2, (void *)[v10 operatorCore], v29);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v133, v44, 1, 0.0, 0.0, v45);
    std::deque<EQKitLayoutStretchedOperator>::push_back((void *)(a2 + 448), (uint64_t)v133);
    v126[0] = MEMORY[0x263EF8330];
    v126[1] = 3221225472;
    v126[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_6;
    v126[3] = &unk_2646AF650;
    char v127 = v18;
    v126[4] = v10;
    v126[5] = &v138;
    v126[6] = &v134;
    v126[7] = a2;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v10, v18 ^ 1, 0, 2, 0, (uint64_t)v126, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v144, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    --*(void *)(a2 + 488);
    std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((void *)(a2 + 448), 1);
  }
  [v151[0] width];
  double v47 = v46;
  if (v144[0])
  {
    [v144[0] width];
    if (v48 <= v47) {
      double v49 = v47;
    }
    else {
      double v49 = v48;
    }
    if (v18) {
      double v50 = v47;
    }
    else {
      double v50 = v49;
    }
  }
  else
  {
    double v49 = v46;
    double v50 = v46;
  }
  if (v150[0])
  {
    [v150[0] width];
    if (v51 > v49) {
      double v49 = v51;
    }
    if (v51 <= v50) {
      double v51 = v50;
    }
    if (!v121) {
      double v50 = v51;
    }
  }
  double v13 = 0.0;
  if (v47 < v50)
  {
    uint64_t v52 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a2 + 592) fontManager]);
    unint64_t v53 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    unint64_t v54 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    if (*(unsigned char *)(v54 + 104)) {
      v55.n128_u64[0] = *(void *)(v54 + 112);
    }
    else {
      v55.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v54);
    }
    double v13 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v52 + 40))(v52, 27, v53 + 8, v55);
  }
  id v56 = v144[0];
  id v57 = v150[0];
  [v151[0] erasableBounds];
  double MidX = CGRectGetMidX(v175);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v125, (const EQKit::ILayout *)v151);
  EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v125, v174[0], 0, (EQKit::ILayout *)v133, v49, 0.0);
  EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v133);
  double v59 = (v49 - v47) * 0.5 + MidX;
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v125);
  double v61 = 0.0;
  double v62 = 0.0;
  if (v56)
  {
    if (v18)
    {
      if (*((unsigned char *)v139 + 24))
      {
        [v56 depth];
        if (v63.n128_f64[0] >= 0.0)
        {
          uint64_t v76 = *(void *)(v11 + 80);
          if (*(unsigned char *)(v11 + 104)) {
            v63.n128_u64[0] = *(void *)(v11 + 112);
          }
          else {
            v63.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
          }
          double v80 = -(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v76 + 40))(v76, 11, v11 + 8, v63);
        }
        else
        {
          double v64 = v135[3];
          [v56 depth];
          double v66 = v65.n128_f64[0];
          uint64_t v67 = *(void *)(v11 + 80);
          if (*(unsigned char *)(v11 + 104)) {
            v65.n128_u64[0] = *(void *)(v11 + 112);
          }
          else {
            v65.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
          }
          if (v64 >= -v66
                    - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v67 + 40))(v67, 11, v11 + 8, v65))
          {
            [v56 depth];
            double v82 = v81.n128_f64[0];
            uint64_t v83 = *(void *)(v11 + 80);
            if (*(unsigned char *)(v11 + 104)) {
              v81.n128_u64[0] = *(void *)(v11 + 112);
            }
            else {
              v81.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
            }
            double v80 = -v82
                - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v83 + 40))(v83, 11, v11 + 8, v81);
          }
          else
          {
            double v80 = v135[3];
          }
        }
        [v151[0] height];
        if (v80 >= v84)
        {
          [v151[0] height];
          double v80 = v85;
        }
        double v62 = -v80;
      }
      else
      {
        uint64_t v75 = *(void *)(v11 + 80);
        if (*(unsigned char *)(v11 + 104)) {
          v60.n128_u64[0] = *(void *)(v11 + 112);
        }
        else {
          v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v62 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v75 + 40))(v75, 11, v11 + 8, v60);
      }
      if (*((unsigned char *)v167 + 24))
      {
        uint64_t v86 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a2 + 592) fontManager]);
        double v87 = v59
            + (*(double (**)(uint64_t, void, uint64_t *))(*(void *)v86 + 176))(v86, *((unsigned int *)v171 + 6), v154 + 6);
        int v78 = 1;
LABEL_117:
        EQKit::ILayout::ILayout((EQKit::ILayout *)v124, (const EQKit::ILayout *)v144);
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v124, v174[0], v78, (EQKit::ILayout *)v133, v49, v87);
        EQKit::ILayout::operator=((uint64_t)v144, (uint64_t)v133);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v124);
        goto LABEL_118;
      }
    }
    else
    {
      uint64_t v68 = *(void *)(v11 + 80);
      if (*(unsigned char *)(v11 + 104)) {
        v60.n128_u64[0] = *(void *)(v11 + 112);
      }
      else {
        v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      }
      double v70 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v68 + 40))(v68, 11, v11 + 8, v60);
      uint64_t v71 = *(void *)(v11 + 80);
      if (*(unsigned char *)(v11 + 104)) {
        v69.n128_u64[0] = *(void *)(v11 + 112);
      }
      else {
        v69.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      }
      double v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v71 + 40))(v71, 12, v11 + 8, v69);
      [v56 layoutDepth];
      uint64_t v74 = *(void *)(v11 + 80);
      if (v70 <= v72 - v73.n128_f64[0])
      {
        if (*(unsigned char *)(v11 + 104)) {
          v73.n128_u64[0] = *(void *)(v11 + 112);
        }
        else {
          v73.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v77 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v74 + 40))(v74, 12, v11 + 8, v73);
        [v56 layoutDepth];
        int v78 = 0;
        double v62 = v77 - v79;
        goto LABEL_116;
      }
      if (*(unsigned char *)(v11 + 104)) {
        v73.n128_u64[0] = *(void *)(v11 + 112);
      }
      else {
        v73.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      }
      double v62 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v74 + 40))(v74, 11, v11 + 8, v73);
    }
    int v78 = 0;
LABEL_116:
    double v87 = v59;
    goto LABEL_117;
  }
LABEL_118:
  if (v57)
  {
    if (!v121)
    {
      uint64_t v89 = *(void *)(v11 + 80);
      if (*(unsigned char *)(v11 + 104)) {
        v60.n128_u64[0] = *(void *)(v11 + 112);
      }
      else {
        v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      }
      double v91 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v89 + 40))(v89, 13, v11 + 8, v60);
      uint64_t v92 = *(void *)(v11 + 80);
      if (*(unsigned char *)(v11 + 104)) {
        v90.n128_u64[0] = *(void *)(v11 + 112);
      }
      else {
        v90.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      }
      double v93 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v92 + 40))(v92, 14, v11 + 8, v90);
      [v57 layoutHeight];
      uint64_t v95 = *(void *)(v11 + 80);
      if (v91 <= v93 - v94.n128_f64[0])
      {
        if (*(unsigned char *)(v11 + 104)) {
          v94.n128_u64[0] = *(void *)(v11 + 112);
        }
        else {
          v94.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v99 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v95 + 40))(v95, 14, v11 + 8, v94);
        [v57 layoutHeight];
        int v100 = 0;
        double v61 = v99 - v101;
        goto LABEL_149;
      }
      if (*(unsigned char *)(v11 + 104)) {
        v94.n128_u64[0] = *(void *)(v11 + 112);
      }
      else {
        v94.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      }
      double v61 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v95 + 40))(v95, 13, v11 + 8, v94);
      goto LABEL_148;
    }
    if (*((unsigned char *)v146 + 24))
    {
      [v57 height];
      if (v60.n128_f64[0] <= 0.0)
      {
        [v57 height];
        double v97 = v96.n128_f64[0];
        uint64_t v98 = *(void *)(v11 + 80);
        if (*(unsigned char *)(v11 + 104)) {
          v96.n128_u64[0] = *(void *)(v11 + 112);
        }
        else {
          v96.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        }
        double v61 = v97
            + (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v98 + 40))(v98, 13, v11 + 8, v96);
LABEL_146:
        if (*((unsigned char *)v167 + 24))
        {
          uint64_t v102 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a2 + 592) fontManager]);
          double v59 = v59
              + (*(double (**)(uint64_t, void, uint64_t *))(*(void *)v102 + 184))(v102, *((unsigned int *)v171 + 6), v154 + 6);
          int v100 = 1;
LABEL_149:
          EQKit::ILayout::ILayout((EQKit::ILayout *)v123, (const EQKit::ILayout *)v150);
          EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v123, v174[0], v100, (EQKit::ILayout *)v133, v49, v59);
          EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v133);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v123);
          goto LABEL_150;
        }
LABEL_148:
        int v100 = 0;
        goto LABEL_149;
      }
      uint64_t v88 = *(void *)(v11 + 80);
      if ((*(unsigned char *)(v11 + 104) & 1) == 0) {
        goto LABEL_123;
      }
    }
    else
    {
      uint64_t v88 = *(void *)(v11 + 80);
      if ((*(unsigned char *)(v11 + 104) & 1) == 0)
      {
LABEL_123:
        v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
LABEL_137:
        double v61 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v88 + 40))(v88, 13, v11 + 8, v60);
        goto LABEL_146;
      }
    }
    v60.n128_u64[0] = *(void *)(v11 + 112);
    goto LABEL_137;
  }
LABEL_150:
  double v12 = (const EQKit::ILayout *)v120;
  id v103 = objc_alloc_init(MEMORY[0x263EFF980]);
  unint64_t v104 = v103;
  if (v144[0])
  {
    objc_msgSend(v103, "addObject:");
    if (v62 != 0.0)
    {
      uint64_t v105 = [[EQKitVSpace alloc] initWithHeight:v62 depth:0.0];
      [v104 addObject:v105];
    }
  }
  uint64_t v106 = [v104 count];
  if (v151[0]) {
    objc_msgSend(v104, "addObject:");
  }
  id v107 = v150[0];
  if (v150[0])
  {
    if (v61 != 0.0)
    {
      NSRange v108 = [[EQKitVSpace alloc] initWithHeight:v61 depth:0.0];
      [v104 addObject:v108];

      id v107 = v150[0];
    }
    [v104 addObject:v107];
  }
  CGRect v109 = [[EQKitVBox alloc] initWithChildBoxes:v104 pivotIndex:v106];
  EQKit::ILayout::operator=((uint64_t)v120, (uint64_t)v151);
  if (v8)
  {
    char v110 = v121;
    if (!v9) {
      char v110 = 1;
    }
    char v111 = 1;
    if ((v152 & 0x1C00u) <= 0x1000 || (v110 & 1) == 0) {
      goto LABEL_174;
    }
    goto LABEL_168;
  }
  if (!v9 || v121)
  {
LABEL_168:
    if (v10) {
      int v112 = v18;
    }
    else {
      int v112 = 1;
    }
    if (v112) {
      char v111 = 4;
    }
    else {
      char v111 = 1;
    }
    goto LABEL_174;
  }
  char v111 = 1;
LABEL_174:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v120, v111);
  EQKit::ILayout::setBox(v120, &v109->super.super);

  if (v10 && *((unsigned char *)v167 + 24) && v18) {
    EQKit::ILayout::setIsOverAccentTokenWithBaseToken((uint64_t)v120, 1);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v144);
  _Block_object_dispose(&v134, 8);
  _Block_object_dispose(&v138, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v150);
  _Block_object_dispose(&v145, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v151);
  _Block_object_dispose(&v153, 8);
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v166, 8);
  _Block_object_dispose(&v170, 8);
LABEL_181:
  if (a3)
  {
    CGRect v113 = (void *)[a4 operatorCore];
    if (v113)
    {
      double v114 = EQKitLayoutManager::leftSpaceForOperator(a2, v113);
      double v115 = EQKitLayoutManager::rightSpaceForOperator(a2, v113);
      if (v13 <= v114) {
        double v116 = v114;
      }
      else {
        double v116 = v13;
      }
      if (v13 <= v115) {
        double v13 = v115;
      }
    }
    else
    {
      double v116 = v13;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a2, v116);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v122, v12);
    uint64_t v117 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
    EQKitLayoutManager::addRowChild(a2, (uint64_t)v122, v117);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v122);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a2, v13);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v153, 0);
    EQKit::ILayout::operator=((uint64_t)v12, (uint64_t)&v153);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v153);
  }
}

void sub_223513F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, EQKit::ILayout *a12)
{
}

uint64_t EQKitLayoutManager::layoutTable@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  v11[0] = &unk_26D685F30;
  v11[1] = this;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  std::deque<EQKitLayoutTable>::push_back((void *)this + 68, (uint64_t)v11);
  EQKitLayoutTable::~EQKitLayoutTable((EQKitLayoutTable *)v11);
  unint64_t v6 = (void *)EQKit::Layout::Schemata::tableSchemata(a2);
  if (!v6)
  {
    id v9 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTable(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2600, @"can't layout a table without a table schemata");
  }
  if (!*((void *)this + 73))
  {
    uint64_t v10 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTable(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2601, @"can't layout a table without a table stack");
  }
  if (v6)
  {
    uint64_t v7 = *((void *)this + 73);
    if (v7)
    {
      EQKitLayoutTable::layoutTable(*(void *)(*((void *)this + 69) + 8 * ((v7 + *((void *)this + 72) - 1) / 0x2AuLL))+ 96 * ((v7 + *((void *)this + 72) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v11);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
    }
  }
  return std::deque<EQKitLayoutTable>::pop_back((void *)this + 68);
}

void sub_223514318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutTableRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  unint64_t v6 = (void *)EQKit::Layout::Schemata::tableRowSchemata(a2);
  if (!v6)
  {
    uint64_t v8 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTableRow(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2614, @"can't layout a table without a tr schemata");
  }
  if (!*((void *)this + 73))
  {
    id v9 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTableRow(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2615, @"can't layout a table without a table stack");
  }
  if (v6)
  {
    uint64_t v7 = *((void *)this + 73);
    if (v7)
    {
      EQKitLayoutTable::layoutTr(*(void *)(*((void *)this + 69) + 8 * ((v7 + *((void *)this + 72) - 1) / 0x2AuLL))+ 96 * ((v7 + *((void *)this + 72) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v10);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
    }
  }
}

void sub_2235144A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v5 = (void *)((char *)this + 496);
  uint64_t v6 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v9, (uint64_t)this, v6, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, 0.0);
  std::deque<EQKitLayoutElementaryStack>::push_back(v5, (const EQKitLayoutElementaryStack *)v9);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v9);
  unint64_t v7 = *((void *)this + 67) + *((void *)this + 66) - 1;
  EQKitLayoutElementaryStack::layout((id *)(*(void *)(*((void *)this + 63) + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18)), a3);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v5);
}

void sub_223514588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  EQKit::ILayout::~ILayout(v10);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackGroup(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 67);
  if (v6
    || (uint64_t v10 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackGroup(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2482, @"can't layout a stack group without an elementary stack"), (uint64_t v6 = *((void *)this + 67)) != 0))
  {
    unint64_t v7 = v6 + *((void *)this + 66) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 63) + 8 * (v7 / 0x18));
    id v9 = (void *)EQKit::Layout::Schemata::stackGroupSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackGroup((void *)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_2235146AC(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 67);
  if (v6
    || (uint64_t v10 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackRow(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2495, @"can't layout a stack row without an elementary stack"), (uint64_t v6 = *((void *)this + 67)) != 0))
  {
    unint64_t v7 = v6 + *((void *)this + 66) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 63) + 8 * (v7 / 0x18));
    id v9 = (void *)EQKit::Layout::Schemata::stackRowSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackRow((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_2235147D4(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackLine(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 67);
  if (v6
    || (id v9 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackLine(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2508, @"can't layout a stack group without an elementary stack"), (uint64_t v6 = *((void *)this + 67)) != 0))
  {
    unint64_t v7 = v6 + *((void *)this + 66) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 63) + 8 * (v7 / 0x18));
    EQKit::Layout::Schemata::stackLineSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackLine(v8 + 168 * (v7 % 0x18), (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_2235148FC(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarries(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 67);
  if (v6
    || (uint64_t v10 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackCarries(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2521, @"can't layout a stack group without an elementary stack"), (uint64_t v6 = *((void *)this + 67)) != 0))
  {
    unint64_t v7 = v6 + *((void *)this + 66) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 63) + 8 * (v7 / 0x18));
    id v9 = (void *)EQKit::Layout::Schemata::stackCarriesSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarries((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_223514A24(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarry(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  uint64_t v6 = *((void *)this + 67);
  if (v6
    || (uint64_t v10 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackCarry(const EQKit::Layout::Schemata &)"), @"EQKitLayoutManager.mm", 2534, @"can't layout a stack group without an elementary stack"), (uint64_t v6 = *((void *)this + 67)) != 0))
  {
    unint64_t v7 = v6 + *((void *)this + 66) - 1;
    uint64_t v8 = *(void *)(*((void *)this + 63) + 8 * (v7 / 0x18));
    id v9 = (void *)EQKit::Layout::Schemata::stackCarrySchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarry((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_223514B4C(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutManager::layoutLongDivision@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v5 = (void *)EQKit::Layout::Schemata::longDivisionSchemata(a2);
  unint64_t v6 = EQKitLayoutManager::layoutContext(this);
  unint64_t v7 = CTFontDescriptorCreateWithNameAndSize(@"STIXGeneral-Regular", *(CGFloat *)(v6 + 24));
  uint64_t v8 = CTFontCreateWithFontDescriptor(v7, *(CGFloat *)(v6 + 24), 0);
  CFRelease(v7);
  if (v8)
  {
    EQKitLayoutManager::layoutBox(this, [v5 schemataDivisor], 0, 0, 0, 0, 0, (EQKit::ILayout *)v38);
    EQKitPath::EQKitPath((EQKitPath *)&v35, v8, 0x27CCu);
    EQKitPath::findStemForEdge(&v35, 2, (uint64_t)v34);
    id v9 = v34[6];
    double v33 = 0.0;
    uint64_t v10 = (void *)[v5 schemataStack];
    if (v10) {
      [v10 layoutSchemata];
    }
    else {
      memset(v32, 0, sizeof(v32));
    }
    EQKitLayoutManager::layoutStack(this, (const EQKit::Layout::Schemata *)v32, *(double *)&v9, &v33, 2, 1, (EQKit::ILayout *)v34);
    EQKit::Layout::Schemata::~Schemata((id *)v32);
    *(void *)&v32[0] = 0;
    uint64_t v12 = *(void *)(EQKitLayoutManager::layoutContext(this) + 80);
    unint64_t v13 = EQKitLayoutManager::layoutContext(this);
    double v14 = v33;
    [v34[0] width];
    uint64_t v16 = (const CGPath *)(*(uint64_t (**)(uint64_t, unint64_t, _OWORD *, double, double))(*(void *)v12 + 168))(v12, v13 + 8, v32, v14, v15);
    if (v16)
    {
      uint64_t v17 = [[EQKitPathBox alloc] initWithCGPath:v16 height:*(void *)(EQKitLayoutManager::layoutContext(this) + 96) cgColor:*(double *)&v9];
      CGPathRelease(v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    [(EQKitPathBox *)v17 height];
    double v19 = v18;
    unsigned int v20 = [EQKitPaddedBox alloc];
    [(EQKitPathBox *)v17 height];
    double v22 = v21;
    if (v37[32]) {
      BOOL v23 = (CGRect *)v37;
    }
    else {
      BOOL v23 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)&v35);
    }
    double Width = CGRectGetWidth(*v23);
    [(EQKitPathBox *)v17 depth];
    uint64_t v26 = [(EQKitPaddedBox *)v20 initWithBox:v17 height:v22 width:Width depth:v25 lspace:0.0 voffset:v14 - v19];
    id v27 = objc_alloc(MEMORY[0x263EFF980]);
    char v28 = objc_msgSend(v27, "initWithObjects:", v38[0], v26, v34[0], 0);
    unint64_t v11 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v28];

    CFRelease(v8);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v34);
    EQKitPath::~EQKitPath((EQKitPath *)&v35);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v38);
  }
  else
  {
    unint64_t v11 = 0;
  }
  LODWORD(v34[0]) = 0;
  uint64_t v29 = *((void *)this + 75);
  double v35 = (unint64_t *)EQKitLayoutManager::currentNode(this);
  int v36 = 2;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v29, v29 + 152, (uint64_t)&v35, v34);
  unint64_t v30 = EQKitLayoutManager::baselineAlignBox(this, v11, (int)v34[0]);
  return EQKit::ILayout::ILayout(a3, &v30->super);
}

void sub_223514E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a18);
  EQKitPath::~EQKitPath((EQKitPath *)&a26);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v26 - 152));
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutRadical(id *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  unint64_t v7 = (void *)EQKit::Layout::Schemata::radicalSchemata(a2);
  if (*(unsigned char *)(v6 + 104)) {
    double v8 = *(double *)(v6 + 112);
  }
  else {
    double v8 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  }
  EQKit::ILayout::ILayout((EQKit::ILayout *)v102, 0);
  if ([v7 schemataIndex])
  {
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)this, [v7 schemataIndex], 2, 0, 0, 0, 0, (EQKit::ILayout *)v100);
    EQKit::ILayout::operator=((uint64_t)v102, (uint64_t)v100);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v100);
  }
  id v9 = (void *)v102[0];
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)this, [v7 schemataRadicand], 0, *(unsigned __int8 *)(v6 + 16), 0, 0, 0, (EQKit::ILayout *)v100);
  unint64_t v11 = (void *)v100[0];
  uint64_t v12 = *(void *)(v6 + 80);
  if (*(unsigned char *)(v6 + 104)) {
    v10.n128_u64[0] = *(void *)(v6 + 112);
  }
  else {
    v10.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  }
  double v14 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v12 + 40))(v12, 17, v6 + 8, v10);
  uint64_t v15 = *(void *)(v6 + 80);
  if (*(unsigned char *)(v6 + 104)) {
    v13.n128_u64[0] = *(void *)(v6 + 112);
  }
  else {
    v13.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  }
  double v16 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v15 + 40))(v15, 18, v6 + 8, v13);
  [v11 layoutVSize];
  double v18 = v17;
  [v11 width];
  double v20 = v19;
  uint64_t v21 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[this[74] fontManager]);
  unint64_t v22 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  double v23 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v21 + 40))(v21, 22, v22 + 8, v8);
  if (v20 < v23) {
    double v20 = v23;
  }
  double v99 = 0.0;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v94 = *MEMORY[0x263F001B0];
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v24 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[this[74] fontManager]);
  unint64_t v25 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  uint64_t v26 = (const void *)(*(uint64_t (**)(uint64_t, unint64_t, long long *, long long *, double, double, double))(*(void *)v24 + 160))(v24, v25 + 8, &v97, &v94, v16 + v8 + v18 + v8 * 2.0, v20, v8);
  if (v26)
  {
    char v28 = [EQKitPathBox alloc];
    uint64_t v29 = [(EQKitPathBox *)v28 initWithCGPath:v26 height:*(void *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this) + 96) cgColor:*((double *)&v94 + 1)];
    unint64_t v30 = [EQKitPaddedBox alloc];
    [(EQKitPathBox *)v29 height];
    double v32 = v31;
    [(EQKitPathBox *)v29 width];
    double v34 = v33;
    double v35 = v99;
    [(EQKitPathBox *)v29 depth];
    double v37 = [(EQKitPaddedBox *)v30 initWithBox:v29 height:v32 width:v34 - v20 - v35 depth:v36 lspace:0.0 voffset:0.0];

    CFRelease(v26);
  }
  else
  {
    double v37 = 0;
  }
  uint64_t v38 = *(void *)(v6 + 80);
  if (*(unsigned char *)(v6 + 104)) {
    v27.n128_u64[0] = *(void *)(v6 + 112);
  }
  else {
    v27.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  }
  double v39 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v38 + 40))(v38, 19, v6 + 8, v27);
  [(EQKitBox *)v37 layoutHeight];
  double v41 = v40;
  [v11 layoutVSize];
  double v43 = v41 - v8 - v16;
  if (v43 >= v39) {
    double v43 = v39;
  }
  if (v42 >= v43) {
    double v44 = v42;
  }
  else {
    double v44 = v43;
  }
  [(EQKitBox *)v37 layoutHeight];
  double v46 = v45;
  [v11 layoutVSize];
  double v48 = v47;
  double v49 = v46 - v8 - (v16 + v44);
  if (v49 > 0.0) {
    double v16 = v16 + v49 * 0.5;
  }
  id v50 = objc_alloc_init(MEMORY[0x263EFF980]);
  double v51 = [[EQKitVSpace alloc] initWithHeight:v8 depth:0.0];
  [v50 addObject:v51];

  uint64_t v52 = [[EQKitVSpace alloc] initWithHeight:v16 + v44 - v48 depth:0.0];
  [v50 addObject:v52];

  [v11 width];
  objc_msgSend(v50, "addObject:", objc_autorelease(-[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:", objc_autorelease(-[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v14 + (v20 - v53) * 0.5)), v11, objc_autorelease(-[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:",
              v14 + (v20 - v53) * 0.5)),
          0))));
  unint64_t v54 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v50, [v50 count] - 1);
  id v55 = objc_alloc_init(MEMORY[0x263EFF980]);
  [(EQKitPaddedBox *)v37 width];
  double v57 = v56;
  if (v9)
  {
    if (*(_DWORD *)this[5] == 3
      || (double v58 = *((double *)&v97 + 1),
          [v9 width],
          double v60 = v59,
          double v61 = *(double *)&v98,
          [v9 width],
          double v62 = v58 + v60 * -0.5,
          v62 >= v61 - v63))
    {
      double v64 = *(double *)&v98;
      [v9 width];
      double v62 = v64 - v65;
    }
    double v66 = *(double *)&v97;
    uint64_t v67 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[this[74] fontManager]);
    unint64_t v68 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
    double v69 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v67 + 40))(v67, 20, v68 + 8, v8);
    uint64_t v70 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[this[74] fontManager]);
    unint64_t v71 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
    double v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v70 + 40))(v70, 21, v71 + 8, v8);
    [v9 layoutDepth];
    if (v69 <= v72 + v73)
    {
      [v9 layoutDepth];
      double v69 = v72 + v74;
    }
    id v75 = objc_alloc_init(MEMORY[0x263EFF980]);
    [v9 width];
    if (v57 <= v62 + v76)
    {
      [v9 width];
      double v57 = v62 + v77;
    }
    if (v62 > 0.0) {
      objc_msgSend(v75, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v62));
    }
    [v75 addObject:v9];
    objc_msgSend(v55, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v75));
    int v78 = [EQKitVSpace alloc];
    [v9 layoutDepth];
    double v80 = v79;
    [(EQKitBox *)v37 layoutHeight];
    objc_msgSend(v55, "addObject:", -[EQKitVSpace initWithHeight:depth:](v78, "initWithHeight:depth:", v66 + v69 - v80 - v81, 0.0));
    double v57 = v57 - fmin(v62, 0.0);
  }
  [(EQKitPaddedBox *)v37 width];
  if (v82 >= v57)
  {
    if (v37) {
      [v55 addObject:v37];
    }
  }
  else
  {
    uint64_t v83 = (void *)MEMORY[0x263EFF8C0];
    double v84 = [EQKitHSpace alloc];
    [(EQKitPaddedBox *)v37 width];
    objc_msgSend(v55, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", objc_msgSend(v83, "arrayWithObjects:", -[EQKitHSpace initWithWidth:](v84, "initWithWidth:", v57 - v85), v37, 0)));
  }
  [(EQKitCompoundBox *)v54 height];
  double v87 = v86;
  [(EQKitPaddedBox *)v37 height];
  uint64_t v89 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v55, [v55 count] - 1, v87 - v8 - v88);
  id v90 = objc_alloc_init(MEMORY[0x263EFF980]);
  [v90 addObject:v89];
  objc_msgSend(v90, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", -v14));
  [v90 addObject:v54];
  if (v99 != 0.0)
  {
    double v91 = [EQKitHSpace alloc];
    objc_msgSend(v90, "addObject:", -[EQKitHSpace initWithWidth:](v91, "initWithWidth:", v99));
  }

  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v100);
  uint64_t v92 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v90];
  EQKit::ILayout::setBox((EQKitBox *)a3, &v92->super.super);

  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a3, 1);
  if (![v7 schemataIndex] || (v103 & 0x1000) != 0)
  {
    if ((v101 & 0x1C00u) <= 0x1000) {
      char v93 = 0;
    }
    else {
      char v93 = 3;
    }
  }
  else
  {
    char v93 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v93);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v100);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v102);
}

void sub_22351582C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

EQKit::ILayout *EQKitLayoutManager::layoutNone@<X0>(EQKit::ILayout *a1@<X8>)
{
  uint64_t v4 = [[EQKitHVSpace alloc] initWithWidth:0.0 height:0.0 depth:0.0];

  return EQKit::ILayout::ILayout(a1, &v4->super);
}

void EQKitLayoutManager::layoutPadded(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = [(id)EQKit::Layout::Schemata::paddedSchemata(a2) schemataNode];
  unint64_t v6 = EQKitLayoutManager::layoutContext(this);
  EQKitLayoutManager::layoutBox(this, v5, 0, *(unsigned __int8 *)(v6 + 16), 0, 0, 0, (EQKit::ILayout *)v44);
  [v44[0] layoutHeight];
  double v8 = v7;
  [v44[0] layoutDepth];
  double v10 = v9;
  [v44[0] width];
  double v12 = v11;
  unint64_t v13 = EQKitLayoutManager::layoutContext(this);
  int v41 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v14 = *((void *)this + 75);
  uint64_t v38 = EQKitLayoutManager::currentNode(this);
  LODWORD(v39) = 29;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v14, v14 + 464, (uint64_t)&v38, (uint64_t)&v41);
  double v15 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v41, v13, v8, v8, v10, v12);
  LODWORD(v3_Block_object_dispose(&STACK[0x560], 8) = 1;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v16 = *((void *)this + 75);
  uint64_t v35 = EQKitLayoutManager::currentNode(this);
  LODWORD(v36) = 30;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v16, v16 + 464, (uint64_t)&v35, (uint64_t)&v38);
  double v17 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v38, v13, v10, v8, v10, v12);
  LODWORD(v35) = 1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v18 = *((void *)this + 75);
  uint64_t v32 = EQKitLayoutManager::currentNode(this);
  LODWORD(v33) = 31;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v18, v18 + 464, (uint64_t)&v32, (uint64_t)&v35);
  double v19 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v35, v13, v12, v8, v10, v12);
  LODWORD(v32) = 1;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v20 = *((void *)this + 75);
  uint64_t v29 = EQKitLayoutManager::currentNode(this);
  LODWORD(v30) = 32;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v20, v20 + 464, (uint64_t)&v29, (uint64_t)&v32);
  double v21 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v32, v13, 0.0, v8, v10, v12);
  LODWORD(v29) = 1;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v22 = *((void *)this + 75);
  uint64_t v46 = EQKitLayoutManager::currentNode(this);
  int v47 = 33;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v22, v22 + 464, (uint64_t)&v46, (uint64_t)&v29);
  double v23 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v29, v13, 0.0, v8, v10, v12);
  uint64_t v24 = [EQKitPaddedBox alloc];
  double v25 = fmax(v15, 0.0);
  double v26 = fmax(v17, 0.0);
  __n128 v27 = [(EQKitPaddedBox *)v24 initWithBox:v44[0] height:v25 width:fmax(v19, 0.0) depth:v26 lspace:v21 voffset:v23];
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v44);
  EQKit::ILayout::setBox((EQKitBox *)a3, v27);
  if (v25 == v8 && v26 == v10 && v23 == 0.0) {
    int v28 = (v45 >> 10) & 7;
  }
  else {
    LOBYTE(v2_Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v28);

  EQKit::ILayout::~ILayout((EQKit::ILayout *)v44);
}

void sub_223515C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  EQKit::ILayout::~ILayout(v24);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a24);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSpace(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  uint64_t v5 = EQKitLayoutManager::currentNode(this);
  double v6 = EQKitLayoutManager::lengthForAttribute(this, 26, v5, 0.0);
  uint64_t v7 = EQKitLayoutManager::currentNode(this);
  double v8 = EQKitLayoutManager::lengthForAttribute(this, 27, v7, 0.0);
  uint64_t v9 = EQKitLayoutManager::currentNode(this);
  double v10 = [[EQKitHVSpace alloc] initWithWidth:EQKitLayoutManager::lengthForAttribute(this, 28, v9, 0.0) height:v6 depth:v8];
  double v11 = EQKit::ILayout::ILayout(a2, &v10->super);
  EQKit::ILayout::setIsUserSpace((uint64_t)v11, 1);
  if (v8 == 0.0 && v6 == 0.0) {
    char v13 = 6;
  }
  else {
    char v13 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v13);
}

void sub_223515D88(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFenced(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  obuint64_t j = (id)[(id)EQKit::Layout::Schemata::fencedSchemata(a2) schemataChildren];
  unint64_t v4 = [obj count];
  id v5 = objc_alloc_init(MEMORY[0x263EFF980]);
  std::string::basic_string[abi:nn180100]<0>(&v56, "(");
  std::string::basic_string[abi:nn180100]<0>(&v55, ")");
  memset(&v54, 0, sizeof(v54));
  std::string::basic_string[abi:nn180100]<0>(__p, ",");
  std::vector<std::string>::pointer end = v54.__end_;
  if (v54.__end_ >= v54.__end_cap_.__value_)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v9) {
      unint64_t v9 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    v57.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
    if (v10) {
      double v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v54.__end_cap_, v10);
    }
    else {
      double v11 = 0;
    }
    double v12 = (std::string *)&v11[24 * v8];
    long long v13 = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = v53;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    __p[1] = 0;
    std::string::size_type v53 = 0;
    __p[0] = 0;
    std::vector<std::string>::pointer v14 = v54.__end_;
    std::vector<std::string>::pointer begin = v54.__begin_;
    if (v54.__end_ == v54.__begin_)
    {
      int64x2_t v18 = vdupq_n_s64((unint64_t)v54.__end_);
      uint64_t v16 = (std::string *)&v11[24 * v8];
    }
    else
    {
      uint64_t v16 = (std::string *)&v11[24 * v8];
      do
      {
        long long v17 = *(_OWORD *)&v14[-1].__r_.__value_.__l.__data_;
        v16[-1].__r_.__value_.__r.__words[2] = v14[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v16[-1].__r_.__value_.__l.__data_ = v17;
        --v16;
        v14[-1].__r_.__value_.__l.__size_ = 0;
        v14[-1].__r_.__value_.__r.__words[2] = 0;
        v14[-1].__r_.__value_.__r.__words[0] = 0;
        --v14;
      }
      while (v14 != begin);
      int64x2_t v18 = *(int64x2_t *)&v54.__begin_;
    }
    double v19 = v12 + 1;
    v54.__begin_ = v16;
    v54.__end_ = v12 + 1;
    *(int64x2_t *)&v57.__begin_ = v18;
    value = v54.__end_cap_.__value_;
    v54.__end_cap_.__value_ = (std::string *)&v11[24 * v10];
    v57.__end_cap_.__value_ = value;
    v57.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v57);
    v54.__end_ = v19;
    if (SHIBYTE(v53) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    v54.__end_->__r_.__value_.__r.__words[2] = v53;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
    v54.__end_ = end + 1;
  }
  uint64_t v21 = *((void *)this + 75);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)EQKitLayoutManager::currentNode(this);
  LODWORD(v57.__begin_) = 18;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v21, v21 + 80, (uint64_t)&v57, &v56);
  uint64_t v22 = *((void *)this + 75);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)EQKitLayoutManager::currentNode(this);
  LODWORD(v57.__begin_) = 19;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v22, v22 + 80, (uint64_t)&v57, &v55);
  uint64_t v23 = *((void *)this + 75);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)EQKitLayoutManager::currentNode(this);
  LODWORD(v57.__begin_) = 20;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(v23, v23 + 104, (uint64_t)&v57, &v54);
  unsigned __int16 v45 = a3;
  long long v24 = *(_OWORD *)&v54.__begin_;
  std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v56.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    id v26 = [NSString alloc];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v27 = &v56;
    }
    else {
      __n128 v27 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    int v28 = (void *)[v26 initWithUTF8String:v27];
    uint64_t v29 = [[EQKitMathMLMOperator alloc] initWithString:v28 environment:*((void *)this + 74)];
    [(EQKitMathMLNode *)v29 setParent:EQKitLayoutManager::currentNode(this)];
    [v5 addObject:v29];
  }
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v30 = [obj countByEnumeratingWithState:&v48 objects:v58 count:16];
  if (v30)
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v24 + 1) - v24) >> 3);
    uint64_t v33 = *(void *)v49;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v49 != v33) {
          objc_enumerationMutation(obj);
        }
        [v5 addObject:*(void *)(*((void *)&v48 + 1) + 8 * i)];
        if (v31 + i + 1 < v4 && v54.__end_ != v54.__begin_)
        {
          unint64_t v35 = v31 + i;
          if (v31 + i >= v32) {
            unint64_t v35 = v32 - 1;
          }
          uint64_t v36 = &v54.__begin_[v35];
          if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v36->__r_.__value_.__l.__size_) {
              continue;
            }
          }
          else if (!*((unsigned char *)&v36->__r_.__value_.__s + 23))
          {
            continue;
          }
          id v37 = [NSString alloc];
          if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v36 = (std::string *)v36->__r_.__value_.__r.__words[0];
          }
          uint64_t v38 = (void *)[v37 initWithUTF8String:v36];
          uint64_t v39 = [[EQKitMathMLMOperator alloc] initWithString:v38 environment:*((void *)this + 74)];
          [(EQKitMathMLNode *)v39 setParent:EQKitLayoutManager::currentNode(this)];
          [v5 addObject:v39];
        }
      }
      uint64_t v30 = [obj countByEnumeratingWithState:&v48 objects:v58 count:16];
      v31 += i;
    }
    while (v30);
  }
  std::string::size_type v40 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v40 = v55.__r_.__value_.__l.__size_;
  }
  if (v40)
  {
    id v41 = [NSString alloc];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v42 = &v55;
    }
    else {
      uint64_t v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    uint64_t v43 = (void *)[v41 initWithUTF8String:v42];
    double v44 = [[EQKitMathMLMOperator alloc] initWithString:v43 environment:*((void *)this + 74)];
    [(EQKitMathMLNode *)v44 setParent:EQKitLayoutManager::currentNode(this)];
    [v5 addObject:v44];
  }
  EQKit::Layout::Schemata::row((EQKit::Layout::Schemata *)v5, (uint64_t)&v57);

  EQKitLayoutManager::layoutRow(this, (const EQKit::Layout::Schemata *)&v57, v45);
  EQKit::Layout::Schemata::~Schemata((id *)&v57.__first_);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v57);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
}

void sub_223516314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::string __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutEnclose(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5 = [(id)EQKit::Layout::Schemata::encloseSchemata(a2) schemataRow];
  unint64_t v6 = EQKitLayoutManager::layoutContext(this);
  EQKitLayoutManager::layoutBox(this, v5, 0, *(unsigned __int8 *)(v6 + 16), 0, 0, 0, (EQKit::ILayout *)v26);
  std::string __p = 0;
  long long v24 = 0;
  uint64_t v25 = 0;
  uint64_t v7 = *((void *)this + 75);
  uint64_t v27 = EQKitLayoutManager::currentNode(this);
  int v28 = 47;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v7, v7 + 224, (uint64_t)&v27, (char *)&__p);
  Mutable = CGPathCreateMutable();
  unint64_t v9 = (int *)__p;
  unint64_t v10 = v24;
  while (v9 != v10)
  {
    PathForNotation = EQKitLayoutManager::createPathForNotation(this, v26[0], *v9);
    CGPathAddPath(Mutable, 0, PathForNotation);
    CGPathRelease(PathForNotation);
    ++v9;
  }
  double v12 = [EQKitPathBox alloc];
  [v26[0] height];
  double v14 = v13;
  uint64_t v15 = *(void *)(EQKitLayoutManager::layoutContext(this) + 96);
  unint64_t v16 = EQKitLayoutManager::layoutContext(this);
  unint64_t v18 = v16;
  uint64_t v19 = *(void *)(v16 + 80);
  if (*(unsigned char *)(v16 + 104)) {
    v17.n128_u64[0] = *(void *)(v16 + 112);
  }
  else {
    v17.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v16);
  }
  uint64_t v20 = [(EQKitPathBox *)v12 initWithCGPath:Mutable height:v15 cgColor:2 drawingMode:v14 lineWidth:(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v19 + 40))(v19, 23, v18 + 8, v17)];
  uint64_t v21 = [EQKitOverlayBox alloc];
  uint64_t v22 = [(EQKitOverlayBox *)v21 initWithBox:v26[0] overlayBox:v20];
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v26);
  EQKit::ILayout::setBox((EQKitBox *)a3, v22);

  CGPathRelease(Mutable);
  if (__p)
  {
    long long v24 = (int *)__p;
    operator delete(__p);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
}

void sub_2235165AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutAlignGroup(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2)
{
  if (*((void *)this + 46))
  {
    int v5 = 0;
    uint64_t v3 = *((void *)this + 75);
    uint64_t v6 = EQKitLayoutManager::currentNode(this);
    int v7 = 37;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v3, v3 + 176, (uint64_t)&v6, &v5);
    unint64_t v4 = *((void *)this + 46) + *((void *)this + 45) - 1;
    EQKitLayoutRow::beginAlignmentGroup((void *)(*(void *)(*((void *)this + 42) + 8 * (v4 / 0x19)) + 160 * (v4 % 0x19)), v5);
  }
}

void EQKitLayoutManager::layoutAlignMark(EQKit::ILayout *a1@<X8>)
{
  unint64_t v4 = objc_alloc_init(EQKitHSpace);
  EQKit::ILayout::ILayout(a1, &v4->super);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v5, &v4->super, 0.0);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a1, 3, (uint64_t)v5);
  EQKit::ILayoutOffset::~ILayoutOffset(v5);
}

void sub_223516708(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

uint64_t *EQKitLayoutManager::isOperatorSymmetric(uint64_t a1, void *a2)
{
  int v9 = 0;
  uint64_t v4 = *(void *)(a1 + 600);
  unint64_t v10 = a2;
  int v11 = 14;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2) {
    return (uint64_t *)1;
  }
  uint64_t v6 = [*(id *)(a1 + 592) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result) {
    return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 1) & 1);
  }
  return result;
}

double EQKitLayoutManager::lengthForCharacterProperty(id *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[a1[74] fontManager]);
  unint64_t v9 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v8 + 64))(v8, a3, v9 + 8);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[a1[74] fontManager]);
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v13 = *(_OWORD *)v11;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
    }
    double v14 = (EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(void *)v12 + 24))(v12, a2, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v14)
    {
      unint64_t v15 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      return EQKitLength::resolveToAbsoluteWithSize(v14, *(double *)(v15 + 24));
    }
  }
  return a4;
}

void sub_223516928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutManager::decimalPointOffsetInStringBox(EQKitLayoutManager *this, EQKitStringBox *a2)
{
  __int16 v6 = EQKitLayoutManager::decimalPointCharacter(this);
  uint64_t v3 = (void *)[[NSString alloc] initWithCharacters:&v6 length:1];
  uint64_t v4 = [(NSString *)[(NSAttributedString *)[(EQKitStringBox *)a2 attributedString] string] rangeOfString:v3];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v4 = [(NSAttributedString *)[(EQKitStringBox *)a2 attributedString] length];
  }

  return [(EQKitStringBox *)a2 positionOfCharacterAtIndex:v4];
}

void *EQKitLayoutManager::layoutNumberDigits(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2, unint64_t *a3)
{
  __int16 v6 = (void *)[MEMORY[0x263EFF980] array];
  unint64_t v7 = EQKitLayoutManager::layoutContext(this);
  uint64_t v8 = *(void *)(v7 + 80);
  uint64_t v9 = [(id)EQKit::Layout::Schemata::tokenSchemata(a2) schemataTokenString];
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v8 + 72))(v8, v9, v7 + 8);
  __int16 v22 = EQKitLayoutManager::decimalPointCharacter(this);
  uint64_t v11 = (void *)[[NSString alloc] initWithCharacters:&v22 length:1];
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v12 = (void *)[v10 string];
  uint64_t v13 = [v10 length];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  void v17[2] = ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke;
  v17[3] = &unk_2646AF588;
  v17[4] = v10;
  v17[5] = v11;
  v17[6] = v6;
  _OWORD v17[7] = &v18;
  v17[8] = v7;
  objc_msgSend(v12, "enumerateSubstringsInRange:options:usingBlock:", 0, v13, 2, v17);

  unint64_t v14 = [v6 count];
  *a3 = v14;
  unint64_t v15 = v19[3];
  if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v15 = v14;
  }
  *a3 = v15;

  _Block_object_dispose(&v18, 8);
  return v6;
}

void sub_223516B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::decimalPointCharacter(EQKitLayoutManager *this)
{
  unsigned __int16 v3 = 46;
  uint64_t v1 = *((void *)this + 75);
  uint64_t v4 = EQKitLayoutManager::currentNode(this);
  int v5 = 35;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(v1, v1 + 488, (uint64_t)&v4, &v3);
  return v3;
}

void ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "attributedSubstringFromRange:");
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL
    && [a2 isEqualToString:*(void *)(a1 + 40)])
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 48) count];
  }
  int v5 = [[EQKitStringBox alloc] initWithAttributedString:v4 cgColor:*(void *)(*(void *)(a1 + 64) + 96)];
  [*(id *)(a1 + 48) addObject:v5];
}

uint64_t *EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(uint64_t a1, void *a2)
{
  uint64_t result = (uint64_t *)[a2 isEmbellishedOperator];
  if (result)
  {
    int v5 = (void *)[a2 operatorCore];
    int v10 = 0;
    uint64_t v6 = *(void *)(a1 + 600);
    uint64_t v11 = v5;
    int v12 = 45;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v6, v6 + 8, (uint64_t)&v11, &v10);
    if (v10)
    {
      return (uint64_t *)(v10 == 2);
    }
    else
    {
      uint64_t v7 = [*(id *)(a1 + 592) operatorDictionary];
      unsigned __int16 v8 = [v5 operatorId];
      int v9 = EQKitLayoutManager::operatorForm(a1, v5);
      uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v7, v8, v9);
      if (result) {
        return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 5) & 1);
      }
    }
  }
  return result;
}

uint64_t *EQKitLayoutManager::isEmbellishedOperatorWithAccent(uint64_t a1, void *a2)
{
  uint64_t result = (uint64_t *)[a2 isEmbellishedOperator];
  if (result)
  {
    int v5 = (void *)[a2 operatorCore];
    uint64_t v6 = [*(id *)(a1 + 592) operatorDictionary];
    unsigned __int16 v7 = [v5 operatorId];
    int v8 = EQKitLayoutManager::operatorForm(a1, v5);
    uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
    if (result) {
      return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 3) & 1);
    }
  }
  return result;
}

uint64_t *EQKitLayoutManager::isEmbellishedOperatorWithStretch(uint64_t a1, void *a2)
{
  uint64_t result = (uint64_t *)[a2 isEmbellishedOperator];
  if (result)
  {
    int v5 = (void *)[a2 operatorCore];
    return EQKitLayoutManager::isOperatorStretchy(a1, v5);
  }
  return result;
}

uint64_t *EQKitLayoutManager::isOperatorStretchy(uint64_t a1, void *a2)
{
  int v9 = 0;
  uint64_t v4 = *(void *)(a1 + 600);
  int v10 = a2;
  int v11 = 16;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2) {
    return (uint64_t *)1;
  }
  uint64_t v6 = [*(id *)(a1 + 592) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result) {
    return (uint64_t *)(result[6] & 1);
  }
  return result;
}

uint64_t EQKitLayoutManager::doesOperatorRequireVerticalStretch(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 488);
  if (v4
    && *(void **)(*(void *)(*(void *)(a1 + 456) + 8 * ((v4 + *(void *)(a1 + 480) - 1) / 0x66uLL))
                + 40 * ((v4 + *(void *)(a1 + 480) - 1) % 0x66uLL)) == a2
    || !EQKitLayoutManager::isOperatorStretchy(a1, a2))
  {
    return 0;
  }
  EQKit::Layout::Schemata::Schemata((uint64_t)v7);
  uint64_t v5 = EQKitLayoutManager::schemataForOperatorWhenStretchedVertically((id *)a1, a2, (uint64_t)v7);
  EQKit::Layout::Schemata::~Schemata(v7);
  return v5;
}

void sub_223516FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

uint64_t *EQKitLayoutManager::isOperatorLargeOp(uint64_t a1, void *a2)
{
  int v9 = 0;
  uint64_t v4 = *(void *)(a1 + 600);
  int v10 = a2;
  int v11 = 39;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2) {
    return (uint64_t *)1;
  }
  uint64_t v6 = [*(id *)(a1 + 592) operatorDictionary];
  unsigned __int16 v7 = [a2 operatorId];
  int v8 = EQKitLayoutManager::operatorForm(a1, a2);
  uint64_t result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result) {
    return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 2) & 1);
  }
  return result;
}

void EQKitLayoutManager::pushImplicitFormIfRequired(void *a1, void *a2, void *a3)
{
  if (EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2))
  {
    uint64_t v6 = [a3 count];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = [a3 objectAtIndex:0];
      uint64_t v6 = [a3 objectAtIndex:v7 - 1];
    }
    else
    {
      uint64_t v8 = 0;
    }
    if ((void *)v6 == a2) {
      uint64_t v9 = (2 * (v8 == (void)a2)) | 8;
    }
    else {
      uint64_t v9 = 2 * (v8 == (void)a2);
    }
    if (!v9) {
      uint64_t v9 = 4;
    }
    uint64_t v10 = v9;
    std::deque<unsigned long>::push_back(a1 + 23, &v10);
  }
}

uint64_t EQKitLayoutManager::popImplicitFormIfRequired(void *a1, void *a2)
{
  uint64_t result = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2);
  if (result)
  {
    uint64_t v4 = a1[28];
    if (v4)
    {
      a1[28] = v4 - 1;
      return std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](a1 + 23, 1);
    }
  }
  return result;
}

void EQKitLayoutManager::resolveRow(EQKitLayoutManager *this, NSArray *a2)
{
  uint64_t v3 = *((void *)this + 46);
  if (v3
    || (std::vector<std::string> v54 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v54, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::resolveRow(NSArray *)"), @"EQKitLayoutManager.mm", 2957, @"invalid state"), (uint64_t v3 = *((void *)this + 46)) != 0))
  {
    unint64_t v4 = v3 + *((void *)this + 45) - 1;
    uint64_t v5 = *(void *)(*((void *)this + 42) + 8 * (v4 / 0x19));
    unint64_t v6 = v4 % 0x19;
    uint64_t v7 = (EQKitLayoutRow *)(v5 + 160 * (v4 % 0x19));
    if (!*((void *)v7 + 8)
      || (std::string v55 = (void *)[MEMORY[0x263F08690] currentHandler],
          objc_msgSend(v55, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::resolveRow(NSArray *)"), @"EQKitLayoutManager.mm", 2961, @"invalid state"), !*((void *)v7 + 8)))
    {
      memset(v72, 0, 24);
      std::vector<EQKit::ILayout>::__init_with_size[abi:nn180100]<EQKit::ILayout*,EQKit::ILayout*>((EQKit::ILayout *)v72, *(void *)(v5 + 160 * v6 + 8), *(void *)(v5 + 160 * v6 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v5 + 160 * v6 + 16) - *(void *)(v5 + 160 * v6 + 8)) >> 3));
      double v70 = 0.0;
      double v71 = 0.0;
      EQKitLayoutRow::determineVSize(v7, &v71, &v70);
      unint64_t v8 = EQKitLayoutManager::layoutContext(this);
      if ((*(unsigned char *)(v8 + 104) & 2) != 0) {
        double v9 = *(double *)(v8 + 120);
      }
      else {
        double v9 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v8);
      }
      uint64_t v10 = *(void **)(v5 + 160 * v6 + 56);
      if (!v10)
      {
        std::string v56 = (void *)[MEMORY[0x263F08690] currentHandler];
        objc_msgSend(v56, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutManager::resolveRow(NSArray *)"), @"EQKitLayoutManager.mm", 2974, @"invalid state; there should be something to resolve");
      }
      unint64_t v11 = [v10 firstIndex];
      std::__split_buffer<std::string> v57 = v63;
      double v58 = v67;
      while (v11 != 0x7FFFFFFFFFFFFFFFLL)
      {
        int v12 = EQKitLayoutRow::childNodeAtIndex((id *)v7, v11);
        uint64_t v13 = v12;
        if (v12)
        {
          unint64_t v14 = objc_msgSend(v12, "operatorCore", v57, v58);
          unsigned int v15 = EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, v14);
          double v16 = v71;
          if (v15)
          {
            double v17 = v71 - v9;
            if (v71 - v9 <= v9 + v70) {
              double v17 = v9 + v70;
            }
            double v16 = v9 + v17;
            double v18 = v17 - v9;
          }
          else
          {
            double v18 = v70;
          }
          uint64_t v19 = [v14 operatorUnicharOrNul];
          LODWORD(v69) = 1;
          *((void *)&v69 + 1) = 0;
          uint64_t v20 = *((void *)this + 75);
          double v60 = (void **)v14;
          int v61 = 41;
          if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v20, v20 + 32, (uint64_t)&v60, &v69))
          {
            unint64_t v21 = EQKitLayoutManager::layoutContext(this);
            v66[0] = MEMORY[0x263EF8330];
            v66[1] = 3221225472;
            v67[0] = ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke;
            v67[1] = &__block_descriptor_44_e5_d8__0l;
            v67[2] = this;
            int v68 = v19;
            double v22 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v69, v21, (uint64_t)v66);
            double v23 = v16 + v18;
            if (v22 < v16 + v18)
            {
              if (v15)
              {
                double v16 = v9 + v22 * 0.5;
                double v18 = v22 * 0.5 - v9;
              }
              else if (v23 == 0.0)
              {
                if (v19)
                {
                  uint64_t v24 = *(void *)(EQKitLayoutManager::layoutContext(this) + 80);
                  unint64_t v25 = EQKitLayoutManager::layoutContext(this);
                  CGFloat v26 = (*(double (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 136))(v24, v19, v25 + 8);
                  CGFloat v28 = v27;
                  CGFloat v30 = v29;
                  CGFloat v32 = v31;
                }
                else
                {
                  CGFloat v30 = 1.0;
                  CGFloat v26 = 0.0;
                  CGFloat v28 = 0.0;
                  CGFloat v32 = 1.0;
                }
                v73.origin.CGFloat x = v26;
                v73.origin.CGFloat y = v28;
                v73.size.double width = v30;
                v73.size.double height = v32;
                double MinY = CGRectGetMinY(v73);
                v74.origin.CGFloat x = v26;
                v74.origin.CGFloat y = v28;
                v74.size.double width = v30;
                v74.size.double height = v32;
                double MaxY = CGRectGetMaxY(v74);
                double v35 = MaxY - MinY;
                if (MaxY - MinY == 0.0)
                {
                  double v18 = v22 * 0.5;
                  double v16 = v22 * 0.5;
                }
                else
                {
                  double v16 = v22 * -MinY / v35;
                  double v18 = v22 * MaxY / v35;
                }
              }
              else
              {
                double v16 = v16 * v22 / v23;
                double v18 = v18 * v22 / v23;
              }
            }
          }
          LODWORD(v65) = 1;
          *((void *)&v65 + 1) = 0;
          uint64_t v36 = *((void *)this + 75);
          double v60 = (void **)v14;
          int v61 = 40;
          if (!EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v36, v36 + 32, (uint64_t)&v60, &v65))goto LABEL_32; {
          unint64_t v37 = EQKitLayoutManager::layoutContext(this);
          }
          v62[0] = MEMORY[0x263EF8330];
          v62[1] = 3221225472;
          v63[0] = ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke_2;
          v63[1] = &__block_descriptor_44_e5_d8__0l;
          v63[2] = this;
          int v64 = v19;
          double v38 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v65, v37, (uint64_t)v62);
          double v39 = v18 + v16;
          if (v38 > v18 + v16)
          {
            if (v15)
            {
              double v16 = v9 + v38 * 0.5;
              double v18 = v38 * 0.5 - v9;
              int v40 = 1;
            }
            else if (v39 == 0.0)
            {
              if (v19)
              {
                uint64_t v42 = *(void *)(EQKitLayoutManager::layoutContext(this) + 80);
                unint64_t v43 = EQKitLayoutManager::layoutContext(this);
                CGFloat v44 = (*(double (**)(uint64_t, uint64_t, unint64_t))(*(void *)v42 + 136))(v42, v19, v43 + 8);
                CGFloat v46 = v45;
                CGFloat v48 = v47;
                CGFloat v50 = v49;
              }
              else
              {
                CGFloat v48 = 1.0;
                CGFloat v44 = 0.0;
                CGFloat v46 = 0.0;
                CGFloat v50 = 1.0;
              }
              v75.origin.CGFloat x = v44;
              v75.origin.CGFloat y = v46;
              v75.size.double width = v48;
              v75.size.double height = v50;
              double v51 = CGRectGetMinY(v75);
              v76.origin.CGFloat x = v44;
              v76.origin.CGFloat y = v46;
              v76.size.double width = v48;
              v76.size.double height = v50;
              double v52 = CGRectGetMaxY(v76);
              double v53 = v52 - v51;
              if (v52 - v51 == 0.0)
              {
                double v18 = v38 * 0.5;
                int v40 = 1;
                double v16 = v38 * 0.5;
              }
              else
              {
                double v16 = v38 * -v51 / v53;
                int v40 = 1;
                double v18 = v38 * v52 / v53;
              }
            }
            else
            {
              double v16 = v16 * v38 / v39;
              int v40 = 1;
              double v18 = v18 * v38 / v39;
            }
          }
          else
          {
LABEL_32:
            int v40 = 0;
          }
          EQKitLayoutManager::pushImplicitFormIfRequired(this, v13, a2);
          EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)&v60, (uint64_t)v14, 2, v16, v18, 0.0);
          std::deque<EQKitLayoutStretchedOperator>::push_back((void *)this + 56, (uint64_t)&v60);
          unint64_t v41 = EQKitLayoutManager::layoutContext(this);
          EQKitLayoutManager::layoutBox(this, (uint64_t)v13, 0, *(unsigned __int8 *)(v41 + 16), 0, 0, 0, (EQKit::ILayout *)&v60);
          if (v40) {
            EQKit::ILayout::setVerticalContentClassification((uint64_t)&v60, 0);
          }
          EQKit::ILayout::operator=(v72[0] + 56 * v11, (uint64_t)&v60);
          --*((void *)this + 61);
          std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((void *)this + 56, 1);
          EQKitLayoutManager::popImplicitFormIfRequired(this, v13);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v60);
        }
        unint64_t v11 = objc_msgSend(v10, "indexGreaterThanIndex:", v11, v57, v58);
      }
      EQKitLayoutRow::resolveLayouts(v7, v72);
      double v60 = (void **)v72;
      std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&v60);
    }
  }
}

void sub_22351789C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)(v33 - 176);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&a33);
  _Unwind_Resume(a1);
}

void sub_2235178F8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  JUMPOUT(0x2235178E0);
}

uint64_t EQKitLayoutManager::lengthForMetric(id *a1, uint64_t a2)
{
  uint64_t v4 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[a1[74] fontManager]);
  unint64_t v5 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  unint64_t v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  if (*(unsigned char *)(v6 + 104)) {
    v7.n128_u64[0] = *(void *)(v6 + 112);
  }
  else {
    v7.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  }
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v4 + 40);

  return v8(v4, a2, v5 + 8, v7);
}

void EQKitLayoutManager::layoutSubsuperscript(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  unint64_t v8 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  uint64_t v174 = 0;
  CGRect v175 = &v174;
  uint64_t v176 = 0x2020000000;
  uint64_t v177 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = &v170;
  uint64_t v172 = 0x2020000000;
  char v173 = 0;
  uint64_t v166 = 0;
  uint64_t v167 = (double *)&v166;
  uint64_t v168 = 0x2020000000;
  uint64_t v169 = 0;
  uint64_t v162 = 0;
  uint64_t v163 = (double *)&v162;
  uint64_t v164 = 0x2020000000;
  uint64_t v165 = 0;
  if (a2)
  {
    double v9 = (void *)a2;
    while (1)
    {
      uint64_t v10 = v9;
      [v9 layoutSchemata];
      if (v158 != 2) {
        break;
      }
      unint64_t v11 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v157);
      if ([v11 count] != 1) {
        break;
      }
      double v9 = (void *)[v11 objectAtIndex:0];
      EQKit::Layout::Schemata::~Schemata(&v157);
      if (!v9) {
        goto LABEL_9;
      }
    }
    EQKit::Layout::Schemata::~Schemata(&v157);
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_9:
  v156[0] = MEMORY[0x263EF8330];
  v156[1] = 3221225472;
  v156[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke;
  v156[3] = &unk_2646AF5B0;
  v156[10] = a1;
  v156[6] = &v174;
  v156[7] = &v170;
  v156[8] = &v166;
  v156[9] = &v162;
  v156[4] = v10;
  v156[5] = a2;
  unint64_t v12 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a2, 0, *(unsigned __int8 *)(v12 + 16), 0, 0, (uint64_t)v156, (EQKit::ILayout *)&v157);
  if ((v159 & 0x100) != 0) {
    *((unsigned char *)v171 + 24) = 1;
  }
  uint64_t v152 = 0;
  uint64_t v153 = (double *)&v152;
  uint64_t v154 = 0x2020000000;
  uint64_t v155 = 0;
  if (a3)
  {
    v147[0] = MEMORY[0x263EF8330];
    v147[1] = 3221225472;
    v147[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2;
    v147[3] = &unk_2646AF5D8;
    v147[4] = a3;
    v147[5] = &v170;
    v147[6] = &v152;
    v147[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a3, 1, 0, 2, 1, (uint64_t)v147, (EQKit::ILayout *)v148);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v148, 0);
  }
  uint64_t v143 = 0;
  double v144 = (double *)&v143;
  uint64_t v145 = 0x2020000000;
  uint64_t v146 = 0;
  if (*((double *)v175 + 3) != 0.0)
  {
    uint64_t v13 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)[*(id *)(a1 + 592) fontManager]);
    double v14 = (*(double (**)(uint64_t, void))(*(void *)v13 + 48))(v13, 0);
    *((double *)v175 + 3) = v14 * *((double *)v175 + 3);
  }
  if (a4)
  {
    [a4 layoutSchemata];
    BOOL v15 = (!*(unsigned char *)(*(void *)(a1 + 40) + 6) || *((unsigned char *)v171 + 24))
       && _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v139);
    EQKit::Layout::Schemata::~Schemata(v139);
    v138[0] = MEMORY[0x263EF8330];
    v138[1] = 3221225472;
    v138[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3;
    v138[3] = &unk_2646AF5D8;
    v138[4] = a4;
    v138[5] = &v170;
    v138[6] = &v143;
    v138[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, (uint64_t)a4, !v15, 0, 2, 0, (uint64_t)v138, (EQKit::ILayout *)v139);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v139, 0);
    BOOL v15 = 0;
  }
  double v17 = v148[0];
  id v18 = v139[0];
  if (*((unsigned char *)v171 + 24))
  {
    uint64_t v19 = *(void *)(v8 + 80);
    if (*(unsigned char *)(v8 + 104)) {
      v16.n128_u64[0] = *(void *)(v8 + 112);
    }
    else {
      v16.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
    }
    double v25 = (*(double (**)(uint64_t, void, unint64_t, __n128))(*(void *)v19 + 40))(v19, 0, v8 + 8, v16);
    uint64_t v28 = *(void *)(v8 + 80);
    if (*(unsigned char *)(v8 + 104)) {
      v27.n128_u64[0] = *(void *)(v8 + 112);
    }
    else {
      v27.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
    }
    double v26 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v28 + 40))(v28, 1, v8 + 8, v27);
  }
  else
  {
    id v20 = v157;
    [v157 depth];
    double v22 = v21;
    double v23 = v153[3];
    [v20 height];
    double v25 = v22 + v23;
    double v26 = v24.n128_f64[0] - v144[3];
  }
  uint64_t v29 = *(void *)(v8 + 80);
  if (*(unsigned char *)(v8 + 104)) {
    v24.n128_u64[0] = *(void *)(v8 + 112);
  }
  else {
    v24.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
  }
  double v31 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v29 + 40))(v29, 8, v8 + 8, v24);
  uint64_t v32 = *(void *)(v8 + 80);
  if (*(unsigned char *)(v8 + 104)) {
    v30.n128_u64[0] = *(void *)(v8 + 112);
  }
  else {
    v30.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
  }
  double v33 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v32 + 40))(v32, 7, v8 + 8, v30);
  [v17 height];
  if (v25 <= v34 - v31)
  {
    [v17 height];
    double v25 = v35 - v31;
  }
  [v18 depth];
  if (v26 <= v33 + v36.n128_f64[0])
  {
    [v18 depth];
    double v26 = v33 + v36.n128_f64[0];
  }
  if (v18) {
    BOOL v37 = v15;
  }
  else {
    BOOL v37 = 0;
  }
  if (v37)
  {
    double v26 = 0.0;
    if (!*(unsigned char *)(*(void *)(a1 + 32) + 16))
    {
      EQKitLayoutManager::lengthForMetric((id *)a1, 29);
      v163[3] = v36.n128_f64[0] + v163[3];
    }
  }
  if (v17) {
    BOOL v38 = v18 == 0;
  }
  else {
    BOOL v38 = 1;
  }
  int v39 = !v38;
  int v130 = v39;
  if (!v38)
  {
    uint64_t v40 = *(void *)(v8 + 80);
    if (*(unsigned char *)(v8 + 104)) {
      v36.n128_u64[0] = *(void *)(v8 + 112);
    }
    else {
      v36.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
    }
    double v41 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v40 + 40))(v40, 9, v8 + 8, v36);
    [v18 depth];
    double v43 = v42;
    [v17 height];
    double v45 = v26 - v43;
    double v46 = v45 - (v44.n128_f64[0] - v25);
    if (v46 < v41)
    {
      uint64_t v47 = *(void *)(v8 + 80);
      if (*(unsigned char *)(v8 + 104)) {
        v44.n128_u64[0] = *(void *)(v8 + 112);
      }
      else {
        v44.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
      }
      double v48 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v47 + 40))(v47, 10, v8 + 8, v44);
      double v49 = v41 - v46;
      if (v45 < v48)
      {
        double v50 = v48 - v45;
        double v51 = v49 - v50;
        BOOL v52 = v50 <= v49;
        double v49 = 0.0;
        if (v52) {
          double v49 = v51;
        }
        double v26 = v26 + v50;
      }
      double v25 = v25 + v49;
    }
  }
  unsigned int v53 = v159;
  unsigned __int8 v54 = v159 & 0x3F | 0x40;
  unsigned __int16 v159 = v159 & 0xFF3F | 0x40;
  unsigned __int16 v149 = v149 & 0xFFCF | 0x10;
  unsigned __int16 v140 = v140 & 0xFFCF | 0x10;
  int v55 = (v53 >> 4) & 3;
  double v56 = 0.0;
  uint64_t v57 = 0;
  if (v55 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v55 + 30));
    uint64_t v57 = v58;
    unsigned __int8 v54 = v159;
  }
  int v59 = v54 >> 6;
  if (v59 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v59 + 30));
    double v56 = v60;
  }
  uint64_t v160 = v57;
  double v161 = v56;
  unsigned __int8 v61 = v149;
  int v62 = (v149 >> 4) & 3;
  uint64_t v63 = 0;
  double v64 = 0.0;
  if (v62 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v62 + 30));
    double v64 = v65;
    unsigned __int8 v61 = v149;
  }
  int v66 = v61 >> 6;
  if (v66 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v66 + 30));
    uint64_t v63 = v67;
  }
  double v150 = v64;
  uint64_t v151 = v63;
  unsigned __int8 v68 = v140;
  int v69 = (v140 >> 4) & 3;
  uint64_t v70 = 0;
  double v71 = 0.0;
  if (v69 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v69 + 30));
    double v71 = v72;
    unsigned __int8 v68 = v140;
  }
  int v73 = v68 >> 6;
  if (v73 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v73 + 30));
    uint64_t v70 = v74;
  }
  double v141 = v71;
  uint64_t v142 = v70;
  double v75 = 0.0;
  double v76 = 0.0;
  double v77 = 0.0;
  int v78 = (double *)MEMORY[0x263F00148];
  if (v17)
  {
    if (*((double *)v175 + 3) != 0.0 && v25 != 0.0 || v167[3] != 0.0)
    {
      int v79 = _startsWithToken(a3, *(void *)(a1 + 40));
      double v80 = 0.0;
      if (v79) {
        double v80 = v25 * tan(*((long double *)v175 + 3));
      }
      double v77 = v80 - v167[3];
    }
    double v81 = v161;
    double v82 = v150;
    uint64_t v83 = *(void **)(a1 + 32);
    unsigned int v84 = v159;
    double v85 = *v78;
    double v86 = v78[1];
    id v87 = v157;
    char v88 = v149;
    [v157 opticalAlignWidth];
    if (v81 >= v82) {
      double v90 = v81;
    }
    else {
      double v90 = v82;
    }
    double v76 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v83, (v84 >> 2) & 3, v87, v88 & 3, v148[0], v85, v86, v77 + v89, v25, v90);
  }
  double v91 = 0.0;
  if (v18)
  {
    double v129 = v77;
    if ((*((double *)v175 + 3) == 0.0 || v26 == 0.0) && v163[3] == 0.0)
    {
      double v94 = v25;
    }
    else
    {
      int v92 = _startsWithToken((uint64_t)a4, *(void *)(a1 + 40));
      double v93 = 0.0;
      if (v92) {
        double v93 = v26 * tan(*((long double *)v175 + 3));
      }
      double v94 = v25;
      double v91 = v163[3] - v93;
    }
    double v95 = v161;
    double v96 = v141;
    long long v97 = *(void **)(a1 + 32);
    unsigned int v98 = v159;
    double v99 = *v78;
    double v100 = v78[1];
    id v101 = v157;
    char v102 = v140;
    [v157 opticalAlignWidth];
    if (v95 >= v96) {
      double v104 = v95;
    }
    else {
      double v104 = v96;
    }
    double v75 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v97, (v98 >> 2) & 3, v101, v102 & 3, v139[0], v99, v100, v91 + v103, -v26, v104);
    double v25 = v94;
    double v77 = v129;
  }
  uint64_t v105 = 0;
  if (v76 < v75) {
    double v76 = v75;
  }
  if (v17 && v77 + v76 != 0.0)
  {
    uint64_t v106 = [[EQKitHSpace alloc] initWithWidth:v77 + v76];
    uint64_t v105 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v106, v17, 0);
  }
  if (v18
    && v91 + v76 != 0.0
    && (id v107 = [[EQKitHSpace alloc] initWithWidth:v91 + v76],
        NSRange v108 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v107, v18, 0),
        v107,
        v108))
  {
    CGRect v109 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v108];
    if (!v105)
    {
LABEL_111:
      char v110 = v17;
      goto LABEL_114;
    }
  }
  else
  {
    CGRect v109 = (EQKitHBox *)v18;
    NSRange v108 = 0;
    if (!v105) {
      goto LABEL_111;
    }
  }
  char v110 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v105];
LABEL_114:
  char v111 = v110;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v136, 0);
  if (v130)
  {
    [v18 layoutDepth];
    double v113 = v112;
    [v17 layoutHeight];
    double v115 = [[EQKitVSpace alloc] initWithHeight:v26 - v113 depth:v25 - v114];
    double v116 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v109, v115, v111, 0);
    uint64_t v117 = [[EQKitVBox alloc] initWithChildBoxes:v116 pivotIndex:1];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v135, &v117->super.super);
    EQKit::ILayout::operator=((uint64_t)v136, (uint64_t)v135);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v135);
  }
  else if (v17)
  {
    CGRect v118 = [[EQKitVShift alloc] initWithBox:v111 offset:-v25];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v135, &v118->super);
    EQKit::ILayout::operator=((uint64_t)v136, (uint64_t)v135);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v135);
  }
  else if (v18)
  {
    CGRect v119 = [[EQKitVShift alloc] initWithBox:v109 offset:v26];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v135, &v119->super);
    EQKit::ILayout::operator=((uint64_t)v136, (uint64_t)v135);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v135);
  }
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  unsigned __int16 v159 = v159 & 0xFFF3 | 4;
  __int16 v137 = v137 & 0xFFFC | 1;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v134, (const EQKit::ILayout *)&v157);
  EQKitLayoutManager::addRowChild(a1, (uint64_t)v134, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v134);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v133, (const EQKit::ILayout *)v136);
  uint64_t v120 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  EQKitLayoutManager::addRowChild(a1, (uint64_t)v133, v120);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, a5);
  if (!*(unsigned char *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 16) && (v159 & 0x1000) != 0)
  {
    if (a4) {
      unint64_t v122 = ((unint64_t)v140 >> 12) & 1;
    }
    else {
      unint64_t v122 = 0;
    }
    int v123 = a3 != 0;
    if (a3) {
      uint64_t v124 = (a4 != 0) + 1;
    }
    else {
      uint64_t v124 = a4 != 0;
    }
    unint64_t v125 = ((unint64_t)v149 >> 12) & 1;
    if (!a3) {
      unint64_t v125 = 0;
    }
    if ((v149 & 0x1C00u) <= 0x1000) {
      int v123 = 0;
    }
    int v126 = (v140 & 0x1C00u) > 0x1000 && a4 != 0;
    unint64_t v127 = v122 + v125;
    if (v124 == 1 && v127 == 1
      || (v124 == 2 ? (int v128 = v126) : (int v128 = 0),
          (v128 & v123 & 1) != 0 || (char v121 = 0, v124 == 2) && v123 != v126 && v127 == 2))
    {
      char v121 = 3;
    }
  }
  else
  {
    char v121 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v121);
  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF3 | 8;
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v136);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v139);
  _Block_object_dispose(&v143, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v148);
  _Block_object_dispose(&v152, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v157);
  _Block_object_dispose(&v162, 8);
  _Block_object_dispose(&v166, 8);
  _Block_object_dispose(&v170, 8);
  _Block_object_dispose(&v174, 8);
}

void sub_2235186E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a30);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a37);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a52);
  _Block_object_dispose(&a59, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a71);
  _Block_object_dispose(&STACK[0x228], 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&STACK[0x2A0]);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Block_object_dispose((const void *)(v71 - 248), 8);
  _Block_object_dispose((const void *)(v71 - 216), 8);
  _Block_object_dispose((const void *)(v71 - 184), 8);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke(void *a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (a1[4] == a2 && (unint64_t v6 = (EQKitLayoutManager *)a1[10], EQKit::Layout::Schemata::isToken(this)))
  {
    unint64_t v7 = EQKitLayoutManager::layoutContext(v6);
    if ((*(unsigned char *)(v7 + 104) & 4) != 0) {
      double v8 = *(double *)(v7 + 128);
    }
    else {
      double v8 = EQKitLayoutContext::pComputeSlantAngle((EQKitLayoutContext *)v7);
    }
    *(double *)(*(void *)(a1[6] + 8) + 24) = v8;
    uint64_t v10 = (void *)EQKit::Layout::Schemata::tokenSchemata(this);
    if (v10)
    {
      unsigned __int16 v11 = [v10 schemataUnicharOrNul];
      uint64_t v12 = *(void *)(EQKitLayoutManager::layoutContext(v6) + 80);
      unint64_t v13 = EQKitLayoutManager::layoutContext(v6);
      if ((*(unsigned int (**)(uint64_t, void, unint64_t))(*(void *)v12 + 120))(v12, v11, v13 + 8))
      {
        *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
      }
      if (v11)
      {
        *(double *)(*(void *)(a1[8] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((id *)v6, 10, v11, 0.0);
        *(double *)(*(void *)(a1[9] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((id *)v6, 9, v11, 0.0);
      }
    }
  }
  else
  {
    BOOL v9 = a1[5] == a2 && *((_DWORD *)this + 2) == 2;
    if (v9 && ![(id)EQKit::Layout::Schemata::children(this) count]) {
      *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    }
  }
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == a2 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    unint64_t v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 56));
    unint64_t v5 = v3;
    uint64_t v6 = *(void *)(v3 + 80);
    if (*(unsigned char *)(v3 + 104)) {
      v4.n128_u64[0] = *(void *)(v3 + 112);
    }
    else {
      v4.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v3);
    }
    *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v6 + 40))(v6, 6, v5 + 8, v4);
  }
}

BOOL _isLayoutSchemataOnlyPseudoSuperscripts(const EQKit::Layout::Schemata *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!EQKit::Layout::Schemata::isToken(a1))
  {
    if (*((_DWORD *)a1 + 2) == 2)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      __n128 v4 = (void *)EQKit::Layout::Schemata::children(a1);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (!v5) {
        return 1;
      }
      uint64_t v6 = *(void *)v12;
LABEL_8:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v4);
        }
        double v8 = *(void **)(*((void *)&v11 + 1) + 8 * v7);
        if (v8) {
          [v8 layoutSchemata];
        }
        else {
          memset(v10, 0, sizeof(v10));
        }
        char isLayoutSchemataOnlyPseudoSuperscripts = _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v10);
        EQKit::Layout::Schemata::~Schemata((id *)v10);
        if ((isLayoutSchemataOnlyPseudoSuperscripts & 1) == 0) {
          break;
        }
        if (v5 == ++v7)
        {
          uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
          BOOL result = 1;
          if (v5) {
            goto LABEL_8;
          }
          return result;
        }
      }
    }
    return 0;
  }
  uint64_t v2 = (EQKit::Unicode *)[(id)EQKit::Layout::Schemata::tokenSchemata(a1) schemataUnicharOrNul];

  return EQKit::Unicode::isPseudoScript(v2);
}

void sub_223518BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == a2 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    unint64_t v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 56));
    unint64_t v5 = v3;
    uint64_t v6 = *(void *)(v3 + 80);
    if (*(unsigned char *)(v3 + 104)) {
      v4.n128_u64[0] = *(void *)(v3 + 112);
    }
    else {
      v4.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v3);
    }
    *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v6 + 40))(v6, 5, v5 + 8, v4);
  }
}

double EQKitLayoutManager::kerningDistance(id *a1, unsigned int a2)
{
  if (a2 > 2) {
    return 0.0;
  }
  EQKitLayoutManager::lengthForMetric(a1, a2 + 30);
  return result;
}

uint64_t _startsWithToken(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unint64_t v3 = (void *)result;
    while (1)
    {
      [v3 layoutSchemata];
      if (EQKit::Layout::Schemata::isToken((EQKit::Layout::Schemata *)&v6)) {
        break;
      }
      if (v7 == 4)
      {
        if (!*(unsigned char *)(a2 + 7)) {
          goto LABEL_12;
        }
        uint64_t v5 = [(id)EQKit::Layout::Schemata::subsuperscriptSchemata((EQKit::Layout::Schemata *)&v6) schemataKernel];
      }
      else
      {
        if (v7 != 2
          || (__n128 v4 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v6), ![v4 count]))
        {
LABEL_12:
          EQKit::Layout::Schemata::~Schemata(&v6);
          return 0;
        }
        uint64_t v5 = [v4 objectAtIndex:0];
      }
      unint64_t v3 = (void *)v5;
      EQKit::Layout::Schemata::~Schemata(&v6);
      if (!v3) {
        return 0;
      }
    }
    EQKit::Layout::Schemata::~Schemata(&v6);
    return 1;
  }
  return result;
}

void sub_223518D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

EQKit::Script::Info *__Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  return EQKit::Script::Info::Info((EQKit::Script::Info *)(a1 + 48), (const Info *)(a2 + 48));
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 80);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(void *)(result + 32) == a2)
  {
    __n128 v4 = (void *)result;
    uint64_t v5 = *(EQKitLayoutManager **)(result + 64);
    double result = EQKit::Layout::Schemata::isToken(this);
    if (result)
    {
      *(_DWORD *)(*(void *)(v4[5] + 8) + 24) = [(id)EQKit::Layout::Schemata::tokenSchemata(this) schemataUnicharOrNul];
      unint64_t v6 = EQKitLayoutManager::layoutContext(v5);
      double result = EQKit::Script::Info::operator=(*(void *)(v4[6] + 8) + 48, v6 + 8);
      *(unsigned char *)(*(void *)(v4[7] + 8) + 24) = 1;
    }
  }
  return result;
}

uint64_t EQKit::Script::Info::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(unsigned char *)(a2 + 8);
    *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
    *(_DWORD *)(a1 + ++*((_WORD *)this + 12) = *(_DWORD *)(a2 + 12);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    __n128 v4 = *(const void **)(a1 + 32);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)(a2 + 32);
    *(void *)(a1 + 32) = v5;
    if (v5) {
      CFRetain(v5);
    }
  }
  return a1;
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v3 = result;
    if (*(void *)(result + 32) == a2)
    {
      double result = EQKit::Layout::Schemata::isToken(this);
      if (result) {
        *(unsigned char *)(*(void *)(*(void *)(v3 + 40) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

void ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_3(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(unsigned char *)(a1 + 64) && *(void *)(a1 + 32) == a2)
  {
    __n128 v4 = *(EQKitLayoutManager **)(a1 + 56);
    if (EQKit::Layout::Schemata::isToken(this))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      uint64_t v5 = (EQKitLayoutContext *)EQKitLayoutManager::layoutContext(v4);
      unint64_t v6 = (const __CTFont *)EQKitLayoutContext::font(v5);
      *(CGFloat *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = CTFontGetXHeight(v6);
    }
  }
}

double EQKitLayoutManager::adjustStretchyWidth(EQKitLayoutManager *a1, void *a2, double a3)
{
  LODWORD(v1_Block_object_dispose(&STACK[0x560], 8) = 1;
  *((void *)&v18 + 1) = 0;
  unint64_t v6 = EQKitLayoutManager::layoutContext(a1);
  int v7 = [a2 operatorUnicharOrNul];
  uint64_t v8 = *((void *)a1 + 75);
  uint64_t v19 = a2;
  int v20 = 41;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v8, v8 + 32, (uint64_t)&v19, &v18))
  {
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    uint64_t v16[2] = ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke;
    void v16[3] = &__block_descriptor_44_e5_d8__0l;
    v16[4] = a1;
    int v17 = v7;
    double v9 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v18, v6, (uint64_t)v16);
    if (v9 < a3) {
      a3 = v9;
    }
  }
  LODWORD(v15) = 1;
  *((void *)&v15 + 1) = 0;
  uint64_t v10 = *((void *)a1 + 75);
  uint64_t v19 = a2;
  int v20 = 40;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v10, v10 + 32, (uint64_t)&v19, &v15))
  {
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    id v13[2] = ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke_2;
    v13[3] = &__block_descriptor_44_e5_d8__0l;
    v13[4] = a1;
    int v14 = v7;
    double v11 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v15, v6, (uint64_t)v13);
    if (v11 > a3) {
      return v11;
    }
  }
  return a3;
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_4(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(void *)(result + 32) == a2)
  {
    __n128 v4 = (void *)result;
    uint64_t v5 = *(EQKitLayoutManager **)(result + 64);
    double result = EQKit::Layout::Schemata::isToken(this);
    if (result)
    {
      *(_DWORD *)(*(void *)(v4[5] + 8) + 24) = [(id)EQKit::Layout::Schemata::tokenSchemata(this) schemataUnicharOrNul];
      unint64_t v6 = EQKitLayoutManager::layoutContext(v5);
      double result = EQKit::Script::Info::operator=(*(void *)(v4[6] + 8) + 48, v6 + 8);
      *(unsigned char *)(*(void *)(v4[7] + 8) + 24) = 1;
    }
  }
  return result;
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_5(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v3 = result;
    if (*(void *)(result + 32) == a2)
    {
      double result = EQKit::Layout::Schemata::isToken(this);
      if (result) {
        *(unsigned char *)(*(void *)(*(void *)(v3 + 40) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

void ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_6(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  if (*(unsigned char *)(a1 + 64) && *(void *)(a1 + 32) == a2)
  {
    __n128 v4 = *(EQKitLayoutManager **)(a1 + 56);
    if (EQKit::Layout::Schemata::isToken(this))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      uint64_t v5 = (EQKitLayoutContext *)EQKitLayoutManager::layoutContext(v4);
      unint64_t v6 = (const __CTFont *)EQKitLayoutContext::font(v5);
      *(CGFloat *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = CTFontGetXHeight(v6);
    }
  }
}

EQKitVShift *EQKitLayoutManager::baselineAlignBox(EQKitLayoutManager *a1, void *a2, int a3)
{
  switch(a3)
  {
    case 0:
    case 3:
    case 4:
      [a2 vsize];
      double v5 = v4 * 0.5;
      [a2 height];
      double v7 = v5 - v6;
      break;
    case 1:
      [a2 height];
      double v7 = -v8;
      break;
    case 2:
      [a2 vsize];
      double v12 = v11 * 0.5;
      [a2 height];
      double v14 = v12 - v13;
      unint64_t v15 = EQKitLayoutManager::layoutContext(a1);
      if ((*(unsigned char *)(v15 + 104) & 2) != 0) {
        double v16 = *(double *)(v15 + 120);
      }
      else {
        double v16 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v15);
      }
      double v7 = v14 + v16;
      break;
    case 5:
      [a2 depth];
      double v7 = v9;
      break;
    default:
      double v7 = 0.0;
      break;
  }
  int v17 = [[EQKitVShift alloc] initWithBox:a2 offset:v7];

  return v17;
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, double a3@<D0>, double *a4@<X4>, uint64_t a5@<X2>, uint64_t a6@<X3>, EQKit::ILayout *a7@<X8>)
{
  double v13 = (void *)((char *)this + 496);
  uint64_t v14 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v19, (uint64_t)this, v14, a5, a6, a3);
  std::deque<EQKitLayoutElementaryStack>::push_back(v13, (const EQKitLayoutElementaryStack *)v19);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v19);
  unint64_t v15 = *((void *)this + 67) + *((void *)this + 66) - 1;
  double v16 = (id *)(*(void *)(*((void *)this + 63) + 8 * (v15 / 0x18)) + 168 * (v15 % 0x18));
  EQKitLayoutElementaryStack::layout(v16, a7);
  double v17 = EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 2uLL);
  *a4 = v17 - EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 1uLL);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v13);
}

void sub_22351946C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)va);
  _Unwind_Resume(a1);
}

double ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(EQKitLayoutManager **)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  unint64_t v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3) {
    return *(double *)(v4 + 24);
  }
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  unint64_t v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

double ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(EQKitLayoutManager **)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  unint64_t v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3) {
    return *(double *)(v4 + 24);
  }
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  unint64_t v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

double ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(EQKitLayoutManager **)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  unint64_t v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3) {
    return *(double *)(v4 + 24);
  }
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  unint64_t v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

double ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(EQKitLayoutManager **)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  unint64_t v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3) {
    return *(double *)(v4 + 24);
  }
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  unint64_t v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

uint64_t std::deque<EQKitLayoutTable>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x2A];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if ((char *)*v6 + 96 * (v5 % 0x2A) != (void *)v7)
    {
      double v8 = (void (***)(void))((char *)*v6 + 96 * (v5 % 0x2A));
      do
      {
        double v9 = *v8;
        v8 += 12;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v10 = (void (***)(void))v6[1];
          ++v6;
          double v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<EQKitLayoutTable *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x18];
    unint64_t v7 = (EQKitLayoutElementaryStack *)((char *)*v6 + 168 * (v5 % 0x18));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x18] + 168 * ((a1[5] + v5) % 0x18);
    if (v7 != (EQKitLayoutElementaryStack *)v8)
    {
      do
      {
        EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(v7);
        unint64_t v7 = (EQKitLayoutElementaryStack *)(v9 + 168);
        if (v7 - (EQKitLayoutElementaryStack *)*v6 == 4032)
        {
          uint64_t v10 = (EQKitLayoutElementaryStack *)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutElementaryStack *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 12;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 24;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 102;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutRow>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x19];
    unint64_t v7 = (EQKitLayoutRow *)((char *)*v6 + 160 * (v5 % 0x19));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x19] + 160 * ((a1[5] + v5) % 0x19);
    if (v7 != (EQKitLayoutRow *)v8)
    {
      do
      {
        EQKitLayoutRow::~EQKitLayoutRow(v7);
        unint64_t v7 = (EQKitLayoutRow *)(v9 + 160);
        if (v7 - (EQKitLayoutRow *)*v6 == 4000)
        {
          uint64_t v10 = (EQKitLayoutRow *)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutRow *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 12;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 25;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutContext>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x1E];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x1E] + 136 * ((a1[5] + v5) % 0x1E);
    if ((char *)*v6 + 136 * (v5 % 0x1E) != (void *)v7)
    {
      unint64_t v8 = (void (***)(void))((char *)*v6 + 136 * (v5 % 0x1E));
      do
      {
        uint64_t v9 = *v8;
        v8 += 17;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v10 = (void (***)(void))v6[1];
          ++v6;
          unint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 15;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 30;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    int v9 = *((_DWORD *)v7 + 12);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      int v9 = *((_DWORD *)v13 + 12);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  unint64_t v7 = v2;
  do
  {
    unint64_t v8 = v3[4];
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((_DWORD *)v3 + 10) < v6) {
          ++v3;
        }
        else {
          unint64_t v7 = v3;
        }
      }
      else
      {
        unint64_t v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v9 = v7[4];
  if (v5 < v9 || v9 >= v5 && v6 < *((_DWORD *)v7 + 10)) {
    return v2;
  }
  return v7;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    unint64_t v9 = (const std::string *)(v7 + 6);
LABEL_3:
    std::string::operator=(a4, v9);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      unint64_t v9 = (const std::string *)(v13 + 6);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    __int16 v9 = *((_WORD *)v7 + 24);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      __int16 v9 = *((_WORD *)v13 + 24);
      goto LABEL_3;
    }
  }
  return result;
}

EQKit::Script::Info *EQKit::Script::Info::Info(EQKit::Script::Info *this, const Info *a2)
{
  *(void *)this = *(void *)a2;
  *((unsigned char *)this + _Block_object_dispose(&STACK[0x560], 8) = *((unsigned char *)a2 + 8);
  *(_WORD *)((char *)this + 9) = *(_WORD *)((char *)a2 + 9);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  uint64_t v3 = (const void *)*((void *)a2 + 4);
  *((void *)this + 4) = v3;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    long long v9 = *((_OWORD *)v7 + 3);
    uint64_t v10 = v7[8];
LABEL_3:
    *(void *)(a4 + 16) = v10;
    *(_OWORD *)a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      long long v9 = *((_OWORD *)v14 + 3);
      uint64_t v10 = v14[8];
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    if (v7 + 6 == (uint64_t *)a4) {
      return 1;
    }
    long long v9 = (char *)v7[6];
    uint64_t v10 = v7[7];
LABEL_4:
    std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(a4, v9, v10, (v10 - (uint64_t)v9) >> 2);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      if (v14 + 6 == (uint64_t *)a4) {
        return 1;
      }
      long long v9 = (char *)v14[6];
      uint64_t v10 = v14[7];
      goto LABEL_4;
    }
  }
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<std::string> *a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  uint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    if (v7 + 6 == (uint64_t *)a4) {
      return 1;
    }
    long long v9 = (std::string *)v7[6];
    uint64_t v10 = (long long *)v7[7];
LABEL_4:
    std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(a4, v9, v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      if (v14 + 6 == (uint64_t *)a4) {
        return 1;
      }
      long long v9 = (std::string *)v14[6];
      uint64_t v10 = (long long *)v14[7];
      goto LABEL_4;
    }
  }
  return result;
}

void EQKitLayoutTable::~EQKitLayoutTable(EQKitLayoutTable *this)
{
  EQKitLayoutTable::~EQKitLayoutTable(this);

  JUMPOUT(0x223CB8F20);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_26D685F30;
  uint64_t v4 = (void **)((char *)this + 64);
  std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:nn180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<EQKitLayoutTable::LayoutRow>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<EQKitLayoutTable::LayoutRow>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void **)(a2 + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v4;
    operator delete(v4);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(a2 + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(a2 + 64));
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v4;
    operator delete(v4);
  }
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  uint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    long long v9 = *((_OWORD *)v7 + 3);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        unint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      long long v9 = *((_OWORD *)v13 + 3);
      goto LABEL_3;
    }
  }
  return result;
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__init_with_size[abi:nn180100]<EQKit::ILayout*,EQKit::ILayout*>(EQKit::ILayout *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<EQKit::ILayout>::__vallocate[abi:nn180100](result, a4);
    return std::vector<EQKit::ILayout>::__construct_at_end<EQKit::ILayout*,EQKit::ILayout*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<EQKit::ILayout>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__construct_at_end<EQKit::ILayout*,EQKit::ILayout*>(EQKit::ILayout *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t result = EQKit::ILayout::ILayout((EQKit::ILayout *)(v4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((void *)v3 + 1) = v4;
  return result;
}

void sub_22351AA10(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(56 * a2);
}

EQKitLayoutContext *std::deque<EQKitLayoutContext>::push_back(void *a1, EQKitLayoutContext *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 30 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutContext>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (EQKitLayoutContext *)(*(void *)(v4 + 8 * (v7 / 0x1E)) + 136 * (v7 % 0x1E));
  }
  uint64_t result = EQKitLayoutContext::EQKitLayoutContext(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutContext>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1E;
  unint64_t v4 = v2 - 30;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0xFF0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351ADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<EQKitLayoutContext *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      __n128 v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<EQKitLayoutContext *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<EQKitLayoutContext>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  (**(void (***)(void))(*(void *)(a1[1] + 8 * (v2 / 0x1E)) + 136 * (v2 % 0x1E)))();
  --a1[5];

  return std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 30 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1E) {
    a2 = 1;
  }
  if (v5 < 0x3C) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351BABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 std::deque<EQKitLayoutStretchedOperator>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<EQKitLayoutStretchedOperator>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutStretchedOperator>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0xFF0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351BEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 102 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66) {
    a2 = 1;
  }
  if (v5 < 0xCC) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

EQKitLayoutElementaryStack *std::deque<EQKitLayoutElementaryStack>::push_back(void *a1, const EQKitLayoutElementaryStack *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 24 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = (EQKitLayoutElementaryStack *)(*(void *)(v4 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18));
  }
  __n128 result = EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x18;
  unint64_t v4 = v2 - 24;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351C33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)(*(void *)(a1[1] + 8 * (v2 / 0x18))
                                                                                       + 168 * (v2 % 0x18)));
  --a1[5];

  return std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 24 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x18) {
    a2 = 1;
  }
  if (v5 < 0x30) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

double std::deque<EQKitLayoutTable>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 42 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutTable>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)unint64_t v8 = &unk_26D685F30;
  *(void *)(v8 + _Block_object_dispose(&STACK[0x560], 8) = v9;
  *(void *)(v8 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v8 + 4_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(unsigned char *)(v8 + 8_Block_object_dispose(&STACK[0x560], 8) = *(unsigned char *)(a2 + 88);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutTable>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351C834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutTable>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  (**(void (***)(void))(*(void *)(a1[1] + 8 * (v2 / 0x2A)) + 96 * (v2 % 0x2A)))();
  --a1[5];

  return std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

EQKitLayoutRow *std::deque<EQKitLayoutRow>::push_back(void *a1, EQKitLayoutRow *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 25 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutRow>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = (EQKitLayoutRow *)(*(void *)(v4 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19));
  }
  double result = EQKitLayoutRow::EQKitLayoutRow(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutRow>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x19;
  unint64_t v4 = v2 - 25;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFA0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFA0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    __n128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0xFA0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_22351D0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutRow>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(*(void *)(a1[1] + 8 * (v2 / 0x19)) + 160 * (v2 % 0x19)));
  --a1[5];

  return std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 25 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x19) {
    a2 = 1;
  }
  if (v5 < 0x32) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 - 56));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, double a2, const Collection *a3, const __CFString *a4, char a5)
{
  *(void *)this = &unk_26D685F50;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a5;
  *(_WORD *)((char *)this + 17) = 0;
  *((_DWORD *)this + 5) = 1;
  *((double *)this + 3) = a2;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *((void *)this + 5) = a4;
  if (a4) {
    CFRetain(a4);
  }
  *((double *)this + 6) = a2;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = a3;
  *((void *)this + 11) = 0;
  *((void *)this + ++*((_WORD *)this + 12) = 0;
  *((void *)this + 7) = 0x3FE6B851EB851EB8;
  *((double *)this + _Block_object_dispose(&STACK[0x560], 8) = fmin(a2, 8.0);
  bzero((char *)this + 104, 1uLL);
  bzero((char *)this + 112, 0x18uLL);
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, const EQKitLayoutContext *a2)
{
  *(void *)this = &unk_26D685F50;
  EQKit::Script::Info::Info((EQKitLayoutContext *)((char *)this + 8), (const Info *)((char *)a2 + 8));
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = *((void *)a2 + 8);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  unint64_t v5 = (const void *)*((void *)a2 + 11);
  uint64_t v4 = (const void *)*((void *)a2 + 12);
  *((void *)this + 11) = v5;
  *((void *)this + ++*((_WORD *)this + 12) = v4;
  *((unsigned char *)this + 104) = *((unsigned char *)a2 + 104);
  long long v6 = *((_OWORD *)a2 + 7);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((_OWORD *)this + 7) = v6;
  if (v5)
  {
    CFRetain(v5);
    uint64_t v4 = (const void *)*((void *)this + 12);
  }
  if (v4) {
    CFRetain(v4);
  }
}

void sub_22351D414(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void EQKitLayoutContext::EQKitLayoutContext(uint64_t a1, EQKitLayoutContext *this, uint64_t a3, void *a4, uint64_t a5, char a6, int a7)
{
  *(void *)a1 = &unk_26D685F50;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v13 = a1 + 8;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 1_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_DWORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = 0x4028000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = *(void *)(a3 + 24);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 56);
  BOOL v14 = (uint64_t *)(a1 + 56);
  uint64_t v15 = EQKitLayoutManager::fontCollection((id *)this);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = a4;
  *(void *)(a1 + 80) = v15;
  uint64_t v44 = 0;
  char v45 = 1;
  uint64_t v16 = *((void *)this + 75);
  uint64_t v37 = (uint64_t)a4;
  int v38 = 9;
  int v17 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(v16, v16 + 296, (uint64_t)&v37, (uint64_t)&v44);
  uint64_t v18 = *(void *)(a3 + 8);
  if (v17)
  {
    uint64_t v19 = EQKit::ScriptLevel::resolveWithBase((EQKit::ScriptLevel *)&v44, *(void *)(a3 + 8));
    uint64_t v18 = *(void *)(a3 + 8);
  }
  else
  {
    uint64_t v19 = v18 + a5;
  }
  uint64_t v20 = *((void *)this + 75);
  uint64_t v37 = (uint64_t)a4;
  int v38 = 42;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(v20, v20 + 440, (uint64_t)&v37, v14);
  LODWORD(cf) = 1;
  *((void *)&cf + 1) = 0;
  uint64_t v21 = *((void *)this + 75);
  uint64_t v37 = (uint64_t)a4;
  int v38 = 43;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v21, v21 + 32, (uint64_t)&v37, &cf))*(double *)(a1 + 64) = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&cf, a3, fmin(*(double *)(a1 + 48), 8.0)); {
  *(void *)&long long cf = 0;
  }
  uint64_t v22 = *((void *)this + 75);
  uint64_t v37 = (uint64_t)a4;
  int v38 = 44;
  if (!EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(v22, v22 + 536, (uint64_t)&v37, (const void **)&cf))
  {
    uint64_t v23 = *(const void **)(a3 + 96);
    *(void *)(a1 + 96) = v23;
    if (!v23) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v23 = (const void *)cf;
  *(void *)(a1 + 96) = cf;
  if (v23
    || (uint64_t v24 = (void *)[MEMORY[0x263F08690] currentHandler],
        objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutManager &, const EQKitLayoutContext &, id<EQKitLayoutNode>, NSInteger, BOOL, EQKit::Script::Cramped::Style)"), @"EQKitLayoutContext.mm", 104, @"CGColor not retrieved by attribute collection."), (uint64_t v23 = *(const void **)(a1 + 96)) != 0))
  {
LABEL_11:
    CFRetain(v23);
  }
LABEL_12:
  if ((void)cf) {
    CFRelease((CFTypeRef)cf);
  }
  LODWORD(cf) = 0;
  if ([*(id *)(a1 + 72) conformsToProtocol:&unk_26D73C758]) {
    unint64_t v25 = *(void **)(a1 + 72);
  }
  else {
    unint64_t v25 = 0;
  }
  uint64_t v26 = *((void *)this + 75);
  uint64_t v37 = (uint64_t)a4;
  int v38 = 17;
  char v27 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v26, v26 + 368, (uint64_t)&v37, &cf);
  if (v25) {
    char v28 = v27;
  }
  else {
    char v28 = 1;
  }
  if ((v28 & 1) == 0)
  {
    LODWORD(cf) = [v25 scriptVariant];
    goto LABEL_24;
  }
  if (v25) {
LABEL_24:
  }
    LODWORD(v25) = [v25 scriptContext];
  double v29 = *(double *)(a1 + 48);
  double v30 = v29 * pow(*(long double *)(a1 + 56), (double)(v19 - v18));
  if (v30 <= *(double *)(a1 + 64)) {
    double v31 = *(double *)(a1 + 64);
  }
  else {
    double v31 = v30;
  }
  if ((void *)[a4 operatorCore] == a4) {
    unsigned __int8 v32 = EQKitLayoutManager::isOperatorLargeOp((uint64_t)this, a4);
  }
  else {
    unsigned __int8 v32 = 0;
  }
  BOOL v33 = *(unsigned char *)(a3 + 17) != 0;
  if (a7 == 2)
  {
    BOOL v33 = 0;
  }
  else if (a7 == 1)
  {
    BOOL v33 = 1;
  }
  double v34 = *(const void **)(a3 + 40);
  uint64_t v37 = v19;
  LOBYTE(v3_Block_object_dispose(&STACK[0x560], 8) = a6;
  BYTE1(v3_Block_object_dispose(&STACK[0x560], 8) = v33;
  BYTE2(v3_Block_object_dispose(&STACK[0x560], 8) = v32;
  int v39 = cf;
  double v40 = v31;
  int v41 = (int)v25;
  CFTypeRef v42 = v34;
  if (v34) {
    CFRetain(v34);
  }
  EQKit::Script::Info::operator=(v13, (uint64_t)&v37);
  if (v42) {
    CFRelease(v42);
  }
  if (*(double *)(a1 + 24) == *(double *)(a3 + 24) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a3 + 20))
  {
    double v35 = *(const void **)(a3 + 88);
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = v35;
    if (v35) {
      CFRetain(v35);
    }
  }
  bzero((void *)(a1 + 104), 1uLL);
}

void sub_22351D7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15)
{
  int v17 = *(const void **)(v15 + 40);
  if (v17) {
    CFRelease(v17);
  }
  _Unwind_Resume(exception_object);
}

void EQKitLayoutContext::~EQKitLayoutContext(EQKitLayoutContext *this)
{
  *(void *)this = &unk_26D685F50;
  uint64_t v2 = (const void *)*((void *)this + 11);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 11) = 0;
  }
  CGColorRelease(*((CGColorRef *)this + 12));
  uint64_t v3 = (const void *)*((void *)this + 5);
  if (v3) {
    CFRelease(v3);
  }
}

{
  uint64_t vars8;

  EQKitLayoutContext::~EQKitLayoutContext(this);

  JUMPOUT(0x223CB8F20);
}

void sub_22351D880(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void EQKitLayoutContext::pInvalidateFonts(EQKitLayoutContext *this)
{
  uint64_t v2 = (const void *)*((void *)this + 11);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 11) = 0;
  }
}

uint64_t EQKitLayoutContext::font(EQKitLayoutContext *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this + 10) + 56))(*((void *)this + 10), (char *)this + 8);
    *((void *)this + 11) = result;
  }
  return result;
}

uint64_t EQKitLayoutContext::newFont(EQKitLayoutContext *this)
{
  return (*(uint64_t (**)(void, char *))(**((void **)this + 10) + 56))(*((void *)this + 10), (char *)this + 8);
}

double EQKitLayoutContext::pComputeRuleThickness(EQKitLayoutContext *this)
{
  return *((double *)this + 14);
}

double EQKitLayoutContext::pComputeMathAxis(EQKitLayoutContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2
    || (uint64_t v2 = (void *)(*(uint64_t (**)(void, char *))(**((void **)this + 10) + 56))(*((void *)this + 10), (char *)this + 8), (*((void *)this + 11) = v2) != 0))
  {
    id v3 = objc_alloc(NSDictionary);
    uint64_t v2 = objc_msgSend(v3, "initWithObjectsAndKeys:", v2, *MEMORY[0x263F039A0], 0);
  }
  CFAttributedStringRef v4 = (const __CFAttributedString *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:@"−" attributes:v2];
  unint64_t v5 = CTLineCreateWithAttributedString(v4);
  FakeContext = (CGContext *)EQKitUtilGetFakeContext();
  CGRect ImageBounds = CTLineGetImageBounds(v5, FakeContext);
  CGFloat x = ImageBounds.origin.x;
  CGFloat y = ImageBounds.origin.y;
  CGFloat width = ImageBounds.size.width;
  CGFloat height = ImageBounds.size.height;
  CFRelease(v5);

  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  *((CGFloat *)this + 15) = CGRectGetMidY(v13);
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  *((CGFloat *)this + 14) = CGRectGetHeight(v14);
  *((unsigned char *)this + 104) |= 3u;
  return *((double *)this + 15);
}

CGFloat EQKitLayoutContext::pComputeSlantAngle(EQKitLayoutContext *this)
{
  *((unsigned char *)this + 104) |= 4u;
  uint64_t v2 = (const __CTFont *)*((void *)this + 11);
  if (!v2)
  {
    uint64_t v2 = (const __CTFont *)(*(uint64_t (**)(void, char *))(**((void **)this + 10) + 56))(*((void *)this + 10), (char *)this + 8);
    *((void *)this + 11) = v2;
  }
  CGFloat SlantAngle = CTFontGetSlantAngle(v2);
  CGFloat result = (SlantAngle + SlantAngle) * 3.14159265 / 360.0;
  *((CGFloat *)this + 16) = result;
  return result;
}

CGFloat EQKitLayoutContext::unitValue(EQKitLayoutContext *this, int a2)
{
  double v2 = 1.0;
  switch(a2)
  {
    case 0:
    case 4:
    case 6:
      CFAttributedStringRef v4 = (void *)[MEMORY[0x263F08690] currentHandler];
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "virtual CGFloat EQKitLayoutContext::unitValue(EQKitLength::Unit) const"), @"EQKitLayoutContext.mm", 283, @"invalid unit");
      goto LABEL_12;
    case 2:
      unint64_t v5 = (const __CTFont *)*((void *)this + 11);
      if (!v5)
      {
        unint64_t v5 = (const __CTFont *)(*(uint64_t (**)(void, char *))(**((void **)this + 10) + 56))(*((void *)this + 10), (char *)this + 8);
        *((void *)this + 11) = v5;
        if (!v5) {
          goto LABEL_12;
        }
      }
      CGFloat result = CTFontGetXHeight(v5);
      break;
    case 3:
      double v2 = *((double *)this + 3);
      goto LABEL_12;
    case 5:
      if ((*((unsigned char *)this + 104) & 1) == 0) {
        EQKitLayoutContext::pComputeMathAxis(this);
      }
      double v2 = *((double *)this + 14);
      goto LABEL_12;
    default:
LABEL_12:
      CGFloat result = v2;
      break;
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    uint64_t v9 = v7[6];
    char v10 = *((unsigned char *)v7 + 56);
LABEL_3:
    *(unsigned char *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = v10;
    *(void *)a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          CGRect v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        uint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = v14[6];
      char v10 = *((unsigned char *)v14 + 56);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    uint64_t v9 = v7[6];
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        uint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = v13[6];
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  unint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    uint64_t v9 = (CFTypeRef *)(v7 + 6);
LABEL_3:
    EQKitTypes::CFRetainRelease::operator=(a4, v9);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      uint64_t v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          uint64_t v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        uint64_t v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = (CFTypeRef *)(v13 + 6);
      goto LABEL_3;
    }
  }
  return result;
}

const void **EQKitTypes::CFRetainRelease::operator=(const void **a1, CFTypeRef *a2)
{
  CFAttributedStringRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFTypeRef v5 = CFRetain(v5);
  }
  *a1 = v5;
  return a1;
}

void EQKit::Layout::Schemata::~Schemata(id *this)
{
  *this = &unk_26D685F78;
}

{
  *this = &unk_26D685F78;
}

{
  uint64_t vars8;

  *this = &unk_26D685F78;

  JUMPOUT(0x223CB8F20);
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t this)
{
  *(void *)this = &unk_26D685F78;
  *(_DWORD *)(this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_26D685F78;
  *(_DWORD *)(this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

EQKit::Layout::Schemata *EQKit::Layout::Schemata::Schemata(EQKit::Layout::Schemata *this, const EQKit::Layout::Schemata *a2)
{
  *(void *)this = &unk_26D685F78;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((void *)this + 2) = *((id *)a2 + 2);
  *((void *)this + 3) = [*((id *)a2 + 3) copy];
  return this;
}

{
  *(void *)this = &unk_26D685F78;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((void *)this + 2) = *((id *)a2 + 2);
  *((void *)this + 3) = [*((id *)a2 + 3) copy];
  return this;
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t result, int a2)
{
  *(void *)uint64_t result = &unk_26D685F78;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

{
  *(void *)uint64_t result = &unk_26D685F78;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t a1, int a2, void *a3)
{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  return a1;
}

{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  return a1;
}

{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = [a3 copy];
  return a1;
}

{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = [a3 copy];
  return a1;
}

uint64_t EQKit::Layout::Schemata::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {

    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(id *)(a2 + 16);
    *(void *)(a1 + 24) = [*(id *)(a2 + 24) copy];
  }
  return a1;
}

id EQKit::Layout::Schemata::phantom@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 3;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::ident@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 8;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::oper@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 10;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

void EQKit::Layout::Schemata::operFontStretch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 11;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

id EQKit::Layout::Schemata::text@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 22;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::num@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 9;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fraction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 7;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::subsuperscript@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 4;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::underover@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 5;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::radical@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 6;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stack@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 12;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackGroup@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 13;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 14;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackLine@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 15;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarries@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 16;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarry@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 17;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::longDivision@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 18;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::table@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 19;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::tableRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 20;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::padded@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 23;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::space@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 24;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fenced@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 25;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::enclose@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 28;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

void EQKit::Layout::Schemata::alignGroup(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 26;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::alignMark(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 27;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::none(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_26D685F78;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 21;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

uint64_t EQKit::Layout::Schemata::subsuperscriptSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 4) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::underoverSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 5) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::tableSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 19) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::tableRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 20) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 12) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackGroupSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 13) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 14) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::radicalSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 6) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::textSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 22) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackLineSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 15) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackCarriesSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 16) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::stackCarrySchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 17) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::tokenSchemata(EQKit::Layout::Schemata *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

BOOL EQKit::Layout::Schemata::isToken(EQKit::Layout::Schemata *this)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8;
}

uint64_t EQKit::Layout::Schemata::phantomSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 3) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::operatorSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 10) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::fractionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 7) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::longDivisionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 18) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::rowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 2) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::paddedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 23) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::spaceSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 24) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::fencedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 25) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::encloseSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 28) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

id EQKit::Layout::Schemata::node@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 1;
  id result = a1;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = 0;
  return result;
}

uint64_t EQKit::Layout::Schemata::nodeSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 1) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Layout::Schemata::row@<X0>(EQKit::Layout::Schemata *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26D685F78;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = 2;
  *(void *)(a2 + 16) = 0;
  uint64_t result = [(EQKit::Layout::Schemata *)this copy];
  *(void *)(a2 + 24) = result;
  return result;
}

uint64_t EQKit::Layout::Schemata::children(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) != 2) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return [*((id *)this + 2) schemataChildren];
  }
  return v1;
}

id EQKit::Layout::Schemata::attributedStringWithFont(EQKit::Layout::Schemata *this, const __CTFont *a2)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8) {
    id v3 = (void *)*((void *)this + 2);
  }
  else {
    id v3 = 0;
  }
  uint64_t v4 = [v3 schemataTokenString];
  if (!a2) {
    return 0;
  }
  uint64_t v5 = v4;
  if (!v4) {
    return 0;
  }
  id v6 = objc_alloc(MEMORY[0x263F086A0]);
  int v7 = objc_msgSend(v6, "initWithString:attributes:", v5, objc_msgSend(NSDictionary, "dictionaryWithObjectsAndKeys:", a2, *MEMORY[0x263F039A0], *MEMORY[0x263EFFB40], *MEMORY[0x263F03C68], 0));

  return v7;
}

BOOL EQKit::Layout::Schemata::isUnstretchedToken(EQKit::Layout::Schemata *this)
{
  return (*((_DWORD *)this + 2) - 8) < 3;
}

double swap(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = v4;
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)a1 + 3);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)a1 + 4);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)a1 + 5);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)a1 + 6);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)a1 + 7);
  *((void *)a1 + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)a1 + 8);
  *((void *)a1 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)a2 + 8);
  *((void *)a2 + _Block_object_dispose(&STACK[0x560], 8) = v12;
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap((uint64_t *)a1 + 9, (uint64_t)a2 + 72);
  uint64_t v13 = *((void *)a1 + 12);
  *((void *)a1 + ++*((_WORD *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + ++*((_WORD *)this + 12) = v13;
  uint64_t v14 = *((void *)a1 + 13);
  *((void *)a1 + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v14;
  uint64_t v15 = *((void *)a1 + 14);
  *((void *)a1 + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v15;
  uint64_t v16 = *((void *)a1 + 15);
  *((void *)a1 + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v16;
  uint64_t v17 = *((void *)a1 + 16);
  *((void *)a1 + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v17;
  uint64_t v18 = *((void *)a1 + 17);
  *((void *)a1 + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v18;
  double result = *((double *)a1 + 18);
  *((void *)a1 + 1_Block_object_dispose(&STACK[0x560], 8) = *((void *)a2 + 18);
  *((double *)a2 + 1_Block_object_dispose(&STACK[0x560], 8) = result;
  LODWORD(v1_Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)a1 + 38);
  *((_DWORD *)a1 + 3_Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 3_Block_object_dispose(&STACK[0x560], 8) = v18;
  LOBYTE(v1_Block_object_dispose(&STACK[0x560], 8) = *((unsigned char *)a1 + 156);
  *((unsigned char *)a1 + 156) = *((unsigned char *)a2 + 156);
  *((unsigned char *)a2 + 156) = v18;
  return result;
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, char a2)
{
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(void *)this = objc_alloc_init(MEMORY[0x263EFF980]);
  *((void *)this + 1_Block_object_dispose(&STACK[0x560], 8) = 0;
  *((_DWORD *)this + 3_Block_object_dispose(&STACK[0x560], 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *((unsigned char *)this + 156) = a2;
}

void sub_22351F100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = *(void **)(v2 + 120);
  if (v6)
  {
    *(void *)(v2 + 12_Block_object_dispose(&STACK[0x560], 8) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v3, *(id **)(v2 + 80));
  uint64_t v8 = *(void **)(v2 + 32);
  if (v8)
  {
    *(void *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v4 = (char *)this + 8;
  *((void *)this + 3) = 0;
  std::vector<EQKit::ILayout>::__init_with_size[abi:nn180100]<EQKit::ILayout*,EQKit::ILayout*>((EQKitLayoutRow *)((char *)this + 8), *((void *)a2 + 1), *((void *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  std::vector<CGPoint>::vector((void *)v4 + 3, (uint64_t)a2 + 32);
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = *((void *)a2 + 8);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100]((uint64_t *)this + 9, (uint64_t)a2 + 72);
  *((void *)this + ++*((_WORD *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<EQKitAlignmentGroup>::__init_with_size[abi:nn180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((void *)this + 12, *((void *)a2 + 12), *((void *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  std::vector<unsigned long>::vector((void *)this + 15, (uint64_t)a2 + 120);
  *((void *)this + 1_Block_object_dispose(&STACK[0x560], 8) = *((void *)a2 + 18);
  *((_DWORD *)this + 3_Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)a2 + 38);
  *((unsigned char *)this + 156) = *((unsigned char *)a2 + 156);
  *(void *)this = [*(id *)a2 mutableCopy];
  *((void *)this + 7) = [*((id *)a2 + 7) mutableCopy];
}

void sub_22351F26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v4, *(id **)(v2 + 80));
  uint64_t v8 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::~EQKitLayoutRow(EQKitLayoutRow *this)
{
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 72, *((id **)this + 10));
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void **)((char *)this + 8);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&v5);
}

void sub_22351F36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(void **)(v10 + 120);
  if (v12)
  {
    *(void *)(v10 + 12_Block_object_dispose(&STACK[0x560], 8) = v12;
    operator delete(v12);
  }
  EQKitLayoutRow::~EQKitLayoutRow(v10);
  a10 = (void **)(v10 + 8);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

EQKitLayoutRow *EQKitLayoutRow::operator=(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  return a1;
}

void EQKitLayoutRow::addChild(uint64_t a1, uint64_t a2, const EQKit::ILayout *a3)
{
  uint64_t v6 = [*(id *)a1 count];
  uint64_t v7 = *(void *)a3;
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >= *(void *)(a1 + 24))
  {
    uint64_t v9 = std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>(a1 + 8, a3);
  }
  else
  {
    EQKit::ILayout::ILayout(*(EQKit::ILayout **)(a1 + 16), a3);
    uint64_t v9 = v8 + 56;
    *(void *)(a1 + 16) = v8 + 56;
  }
  *(void *)(a1 + 16) = v9;
  if (!(a2 | v7)) {
    goto LABEL_8;
  }
  id v10 = *(id *)a1;
  if (!a2) {
    a2 = [MEMORY[0x263EFF9D0] null];
  }
  [v10 addObject:a2];
  if (!v7)
  {
LABEL_8:
    id v11 = *(id *)(a1 + 56);
    if (!v11)
    {
      id v11 = objc_alloc_init(MEMORY[0x263F089C8]);
      *(void *)(a1 + 56) = v11;
    }
    [v11 addIndex:v6];
  }
  uint64_t v12 = (void *)*((void *)a3 + 1);
  if (v12 != (void *)((char *)a3 + 16))
  {
    uint64_t v13 = (uint64_t *)(a1 + 80);
    do
    {
      uint64_t v14 = *v13;
      int v15 = *((_DWORD *)v12 + 8);
      if (!*v13) {
        goto LABEL_23;
      }
      uint64_t v16 = a1 + 80;
      do
      {
        int v17 = *(_DWORD *)(v14 + 32);
        BOOL v18 = v17 < v15;
        if (v17 >= v15) {
          uint64_t v19 = (uint64_t *)v14;
        }
        else {
          uint64_t v19 = (uint64_t *)(v14 + 8);
        }
        if (!v18) {
          uint64_t v16 = v14;
        }
        uint64_t v14 = *v19;
      }
      while (*v19);
      if ((uint64_t *)v16 == v13 || v15 < *(_DWORD *)(v16 + 32))
      {
LABEL_23:
        int v23 = *((_DWORD *)v12 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v24, (id *)v12 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(a1 + 72, &v23, (uint64_t)&v23);
        EQKit::ILayoutOffset::~ILayoutOffset(v24);
      }
      uint64_t v20 = (void *)v12[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v12[2];
          BOOL v22 = *v21 == (void)v12;
          uint64_t v12 = v21;
        }
        while (!v22);
      }
      uint64_t v12 = v21;
    }
    while (v21 != (void *)((char *)a3 + 16));
  }
}

void sub_22351F560(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(exception_object);
}

double EQKitLayoutRow::addChild(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  if (*((void *)a2 + 7))
  {
    BOOL v33 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutRow::addChild(const EQKitLayoutRow &)"), @"EQKitLayoutRow.mm", 106, @"shouldn't add a row with unresolved children");
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    double v34 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutRow::addChild(const EQKitLayoutRow &)"), @"EQKitLayoutRow.mm", 107, @"shouldn't add a row that has performed kerning");
  }
  uint64_t v4 = (EQKit::ILayout *)*((void *)this + 2);
  uint64_t v5 = *((void *)this + 1);
  std::vector<EQKit::ILayout>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>((EQKitLayoutRow *)((char *)this + 8), v4, *((const EQKit::ILayout **)a2 + 1), *((void *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  [*(id *)this addObjectsFromArray:*(void *)a2];
  uint64_t v6 = (const EQKitLayoutRow *)*((void *)a2 + 9);
  if (v6 != (const EQKitLayoutRow *)((char *)a2 + 80))
  {
    uint64_t v7 = (char **)((char *)this + 80);
    do
    {
      unint64_t v8 = *v7;
      int v9 = *((_DWORD *)v6 + 8);
      if (!*v7) {
        goto LABEL_17;
      }
      id v10 = (char **)((char *)this + 80);
      do
      {
        int v11 = *((_DWORD *)v8 + 8);
        BOOL v12 = v11 < v9;
        if (v11 >= v9) {
          uint64_t v13 = (char **)v8;
        }
        else {
          uint64_t v13 = (char **)(v8 + 8);
        }
        if (!v12) {
          id v10 = (char **)v8;
        }
        unint64_t v8 = *v13;
      }
      while (*v13);
      if (v10 == v7 || v9 < *((_DWORD *)v10 + 8))
      {
LABEL_17:
        int v35 = *((_DWORD *)v6 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v36, (id *)v6 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)this + 72, &v35, (uint64_t)&v35);
        EQKit::ILayoutOffset::~ILayoutOffset(v36);
      }
      uint64_t v14 = (const EQKitLayoutRow *)*((void *)v6 + 1);
      if (v14)
      {
        do
        {
          int v15 = v14;
          uint64_t v14 = *(const EQKitLayoutRow **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (const EQKitLayoutRow *)*((void *)v6 + 2);
          BOOL v16 = *(void *)v15 == (void)v6;
          uint64_t v6 = v15;
        }
        while (!v16);
      }
      uint64_t v6 = v15;
    }
    while (v15 != (const EQKitLayoutRow *)((char *)a2 + 80));
  }
  std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>((uint64_t *)this + 12, *((void *)this + 13), *((void *)a2 + 12), *((void *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  int v17 = (void *)*((void *)a2 + 15);
  BOOL v18 = (void *)*((void *)a2 + 16);
  if (v17 != v18)
  {
    uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v4 - v5) >> 3);
    uint64_t v20 = (void *)((char *)this + 136);
    uint64_t v21 = (char *)*((void *)this + 16);
    do
    {
      uint64_t v22 = *v17 + v19;
      if ((unint64_t)v21 >= *v20)
      {
        uint64_t v24 = (char *)*((void *)this + 15);
        uint64_t v25 = (v21 - v24) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          abort();
        }
        uint64_t v27 = *v20 - (void)v24;
        if (v27 >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          double v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)this + 136, v28);
          uint64_t v24 = (char *)*((void *)this + 15);
          uint64_t v21 = (char *)*((void *)this + 16);
        }
        else
        {
          double v29 = 0;
        }
        double v30 = (uint64_t *)&v29[8 * v25];
        *double v30 = v22;
        int v23 = (char *)(v30 + 1);
        while (v21 != v24)
        {
          uint64_t v31 = *((void *)v21 - 1);
          v21 -= 8;
          *--double v30 = v31;
        }
        *((void *)this + 15) = v30;
        *((void *)this + 16) = v23;
        *((void *)this + 17) = &v29[8 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(void *)uint64_t v21 = v22;
        int v23 = v21 + 8;
      }
      *((void *)this + 16) = v23;
      ++v17;
      uint64_t v21 = v23;
    }
    while (v17 != v18);
  }
  double result = *((double *)a2 + 18);
  *((double *)this + 1_Block_object_dispose(&STACK[0x560], 8) = result;
  return result;
}

void sub_22351F87C(_Unwind_Exception *a1)
{
  EQKit::ILayoutOffset::~ILayoutOffset(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutRow::beginNestedRow(uint64_t this)
{
  return this;
}

uint64_t EQKitLayoutRow::endNestedRow(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 64);
  if (v2
    || (uint64_t v3 = (void *)[MEMORY[0x263F08690] currentHandler],
        this = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutRow::endNestedRow()"), @"EQKitLayoutRow.mm", 141, @"invalid state"), (uint64_t v2 = *(void *)(v1 + 64)) != 0))
  {
    *(void *)(v1 + ++*(void *)(this + 64) = v2 - 1;
  }
  return this;
}

void *EQKitLayoutRow::childNodeAtIndex(id *this, unint64_t a2)
{
  if ([*this count] <= a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (void *)[*this objectAtIndex:a2];
  }
  if ([v4 conformsToProtocol:&unk_26D73C378]) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t EQKitLayoutRow::overallLayout@<X0>(EQKitLayoutRow *this@<X0>, uint64_t **a2@<X8>)
{
  EQKit::ILayout::ILayout((EQKit::ILayout *)a2, 0);
  if (*((void *)this + 7))
  {
    id v10 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutRow::overallLayout() const"), @"EQKitLayoutRow.mm", 159, @"can't call overallLayout() with unresolved children");
  }
  uint64_t v4 = *((void *)this + 1);
  if (*((void *)this + 2) - v4 == 56) {
    return EQKit::ILayout::operator=((uint64_t)a2, v4);
  }
  uint64_t v6 = EQKitLayoutRow::newArrayOfChildBoxes(this);
  uint64_t v7 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v6];
  EQKit::ILayout::ILayout((EQKit::ILayout *)v11, &v7->super.super);
  EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v11);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  if (a2 + 1 != (uint64_t **)((char *)this + 72)) {
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(a2 + 1, *((void **)this + 9), (void *)this + 10);
  }

  uint64_t v8 = *((void *)this + 1);
  int v9 = 6;
  while (v8 != *((void *)this + 2))
  {
    if (v9 >= ((*(unsigned __int16 *)(v8 + 32) >> 10) & 7)) {
      int v9 = (*(unsigned __int16 *)(v8 + 32) >> 10) & 7;
    }
    v8 += 56;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v9);
}

void sub_22351FAC8(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void *EQKitLayoutRow::newArrayOfChildBoxes(EQKitLayoutRow *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  unint64_t v4 = (v2 - v3) / 56;
  uint64_t v6 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5);
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:v4];
  if (v2 != v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = (v5 - v6) >> 4;
    if (v4 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v4;
    }
    do
    {
      if (*(void *)(*((void *)this + 1) + v9)) {
        objc_msgSend(v7, "addObject:");
      }
      if (v10 < v11)
      {
        double v13 = *(double *)(*((void *)this + 4) + v8);
        if (v13 != 0.0)
        {
          uint64_t v14 = [[EQKitHSpace alloc] initWithWidth:v13];
          [v7 addObject:v14];
        }
      }
      ++v10;
      v9 += 56;
      v8 += 16;
    }
    while (v12 != v10);
  }
  return v7;
}

BOOL EQKitLayoutRow::isNewRowRequiredForStretching(EQKitLayoutRow *this)
{
  return *((void *)this + 1) != *((void *)this + 2) || *((void *)this + 12) != *((void *)this + 13);
}

void EQKitLayoutRow::determineVSize(EQKitLayoutRow *this, double *a2, double *a3)
{
  id v8 = EQKitLayoutRow::newArrayOfChildBoxes(this);
  uint64_t v5 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v8];
  [(EQKitCompoundBox *)v5 height];
  *(void *)a2 = v6;
  [(EQKitCompoundBox *)v5 depth];
  *(void *)a3 = v7;
}

void EQKitLayoutRow::resolveKerning(EQKitLayoutRow *this, const EQKit::Kerning::Manager *a2)
{
  uint64_t v21 = (void *)((char *)this + 32);
  if (*((void *)this + 4) == *((void *)this + 5))
  {
    unint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
    std::vector<EQKitLayoutRow::Kerning>::resize((uint64_t)v21, v3);
    if (v3 >= 2)
    {
      unint64_t v4 = 0;
      for (unint64_t i = 1; i < v3; ++i)
      {
        uint64_t v6 = *((void *)this + 1);
        uint64_t v7 = v6 + 56 * v4;
        __int16 v9 = *(_WORD *)(v7 + 32);
        id v8 = (unsigned __int16 *)(v7 + 32);
        if ((v9 & 0x200) == 0 && i < v3)
        {
          uint64_t v10 = v6 + 56 * i + 32;
          while ((*(_WORD *)v10 & 0x200) != 0)
          {
            ++i;
            v10 += 56;
            if (v3 == i)
            {
              unint64_t i = v3;
              goto LABEL_14;
            }
          }
          unint64_t v11 = *(void **)(v6 + 56 * v4);
          uint64_t v12 = *(void **)(v10 - 32);
          double v13 = *MEMORY[0x263F00148];
          double v14 = *(double *)(MEMORY[0x263F00148] + 8);
          [v11 opticalAlignWidth];
          uint64_t v16 = v6 + 56 * v4;
          if (*(double *)(v16 + 48) >= *(double *)(v10 + 8)) {
            double v17 = *(double *)(v16 + 48);
          }
          else {
            double v17 = *(double *)(v10 + 8);
          }
          double v18 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(a2, (*v8 >> 2) & 3, v11, *(_WORD *)v10 & 3, v12, v13, v14, v15, 0.0, v17);
          uint64_t v19 = *v21 + 16 * v4;
          *(double *)uint64_t v19 = v18;
          *(void *)(v19 + _Block_object_dispose(&STACK[0x560], 8) = i;
        }
LABEL_14:
        unint64_t v4 = i;
      }
    }
  }
}

void std::vector<EQKitLayoutRow::Kerning>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<EQKitLayoutRow::Kerning>::__append((void **)a1, a2 - v2);
  }
}

void EQKitLayoutRow::resolveLayouts(void *a1, void *a2)
{
  unint64_t v4 = (void *)a1[7];
  if (!v4)
  {
    id v8 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutRow::resolveLayouts(EQKit::ILayoutVector &)"), @"EQKitLayoutRow.mm", 275, @"invalid state");
    unint64_t v4 = (void *)a1[7];
  }

  a1[7] = 0;
  uint64_t v5 = a1[1];
  a1[1] = *a2;
  *a2 = v5;
  uint64_t v6 = a1[2];
  a1[2] = a2[1];
  a2[1] = v6;
  uint64_t v7 = a1[3];
  a1[3] = a2[2];
  a2[2] = v7;
}

void EQKitLayoutRow::beginAlignmentGroup(void *a1, int a2)
{
  if (a1[1] == a1[2] || a1[15] != a1[16])
  {
    EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v18, a2);
    unint64_t v3 = a1[13];
    if (v3 >= a1[14])
    {
      uint64_t v4 = std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(a1 + 12, (uint64_t)v18);
    }
    else
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(a1[13], (uint64_t)v18);
      uint64_t v4 = v3 + 24;
      a1[13] = v3 + 24;
    }
    a1[13] = v4;
    unint64_t v5 = a1[17];
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - a1[1]) >> 3);
    uint64_t v7 = (uint64_t *)a1[16];
    if ((unint64_t)v7 >= v5)
    {
      __int16 v9 = (uint64_t *)a1[15];
      uint64_t v10 = v7 - v9;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v12 = v5 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        double v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 17), v13);
        __int16 v9 = (uint64_t *)a1[15];
        uint64_t v7 = (uint64_t *)a1[16];
      }
      else
      {
        double v14 = 0;
      }
      double v15 = (uint64_t *)&v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *double v15 = v6;
      id v8 = v15 + 1;
      while (v7 != v9)
      {
        uint64_t v17 = *--v7;
        *--double v15 = v17;
      }
      a1[15] = v15;
      a1[16] = v8;
      a1[17] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      uint64_t *v7 = v6;
      id v8 = v7 + 1;
    }
    a1[16] = v8;
  }
}

void sub_223520064(_Unwind_Exception *a1)
{
  *(void *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::buildAlignmentGroups(EQKitLayoutRow *this)
{
  uint64_t v3 = *((void *)this + 12);
  uint64_t v2 = *((void *)this + 13);
  unint64_t v4 = (v2 - v3) / 24;
  if (v4 != (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 3)
  {
    uint64_t v20 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutRow::buildAlignmentGroups()"), @"EQKitLayoutRow.mm", 293, @"should have a start index for each alignment group");
    uint64_t v3 = *((void *)this + 12);
    uint64_t v2 = *((void *)this + 13);
    unint64_t v4 = (v2 - v3) / 24;
  }
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    if (v4 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v4;
    }
    uint64_t v22 = v6;
    do
    {
      uint64_t v7 = v5;
      uint64_t v8 = *((void *)this + 15);
      if (++v5 >= v4) {
        unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
      }
      else {
        unint64_t v9 = *(void *)(v8 + 8 * v5);
      }
      unint64_t v10 = *(void *)(v8 + 8 * v7);
      if (v10 < v9)
      {
        unint64_t v11 = (EQKitAlignmentGroup *)(*((void *)this + 12) + 24 * v7);
        uint64_t v12 = 56 * v10;
        uint64_t v13 = 16 * v10;
        do
        {
          double v14 = (EQKitBox **)(*((void *)this + 1) + v12);
          double v15 = *v14;
          if (!*v14)
          {
            uint64_t v21 = (void *)[MEMORY[0x263F08690] currentHandler];
            objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutRow::buildAlignmentGroups()"), @"EQKitLayoutRow.mm", 308, @"children should have been resolved by now");
          }
          EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v24, 0, 0.0);
          if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 3, v24))
          {
            double v16 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v24, v15);
            EQKitAlignmentGroup::saveAlignmentPoint(v11, v16);
          }
          if (EQKitAlignmentGroup::needsDecimalAlignmentPoint(v11))
          {
            EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v23, 0, 0.0);
            if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 2, v23))
            {
              double v17 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v23, v15);
              EQKitAlignmentGroup::saveAlignmentPoint(v11, v17);
            }
            EQKit::ILayoutOffset::~ILayoutOffset(v23);
          }
          [(EQKitBox *)v15 width];
          EQKitAlignmentGroup::increaseWidth(v11, v18);
          uint64_t v19 = *((void *)this + 4);
          if (*(void *)(v19 + v13 + 8) < v9) {
            EQKitAlignmentGroup::increaseWidth(v11, *(double *)(v19 + v13));
          }
          EQKit::ILayoutOffset::~ILayoutOffset(v24);
          ++v10;
          v12 += 56;
          v13 += 16;
        }
        while (v9 != v10);
      }
    }
    while (v5 != v22);
  }
}

void sub_2235202F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::addToAlignmentContext(EQKitLayoutRow *this, EQKitGroupAlignmentContext *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 96);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3) != (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 3)
  {
    unint64_t v4 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitLayoutRow::addToAlignmentContext(EQKitGroupAlignmentContext &) const"), @"EQKitLayoutRow.mm", 337, @"should have a start index for each alignment group");
  }

  EQKitGroupAlignmentContext::addRow((uint64_t *)a2, v3);
}

void EQKitLayoutRow::overallLayoutWithAlignmentContext(EQKitLayoutRow *this@<X0>, const EQKitGroupAlignmentContext *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3) != (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 3)
  {
    uint64_t v24 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutRow::overallLayoutWithAlignmentContext(const EQKitGroupAlignmentContext &) const"), @"EQKitLayoutRow.mm", 344, @"should have a start index for each alignment group");
  }
  EQKit::ILayout::ILayout(a3, 0);
  if (*((void *)this + 12) == *((void *)this + 13))
  {
    EQKitLayoutRow::overallLayout(this, v26);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v26);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
  }
  else
  {
    uint64_t v25 = (uint64_t)a3;
    id v6 = objc_alloc_init(MEMORY[0x263EFF980]);
    for (unint64_t i = 0; ; unint64_t i = v13)
    {
      uint64_t v8 = *((void *)this + 12);
      if (i >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 13) - v8) >> 3)) {
        break;
      }
      id v9 = objc_alloc_init(MEMORY[0x263EFF980]);
      unint64_t v10 = [EQKitHSpace alloc];
      unint64_t v11 = (const EQKitAlignmentGroup *)(v8 + 24 * i);
      EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(a2, v11, i);
      uint64_t v12 = -[EQKitHSpace initWithWidth:](v10, "initWithWidth:");
      [v9 addObject:v12];

      unint64_t v13 = i + 1;
      uint64_t v14 = *((void *)this + 15);
      if (i + 1 >= (*((void *)this + 16) - v14) >> 3) {
        unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
      }
      else {
        unint64_t v15 = *(void *)(v14 + 8 * v13);
      }
      unint64_t v16 = *(void *)(v14 + 8 * i);
      uint64_t v17 = v15 - v16;
      if (v15 > v16)
      {
        uint64_t v18 = 56 * v16;
        do
        {
          objc_msgSend(v9, "addObject:", *(void *)(*((void *)this + 1) + v18), v25);
          v18 += 56;
          --v17;
        }
        while (v17);
      }
      uint64_t v19 = [EQKitHSpace alloc];
      EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(a2, v11, i);
      uint64_t v20 = -[EQKitHSpace initWithWidth:](v19, "initWithWidth:");
      [v9 addObject:v20];

      uint64_t v21 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v9];
      [v6 addObject:v21];
    }
    uint64_t v22 = [[EQKitHSpace alloc] initWithWidth:EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3) - 1)];
    [v6 addObject:v22];

    int v23 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v6];
    EQKit::ILayout::ILayout((EQKit::ILayout *)v26, &v23->super.super);
    EQKit::ILayout::operator=(v25, (uint64_t)v26);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
    if ((EQKitLayoutRow *)(v25 + 8) != (EQKitLayoutRow *)((char *)this + 72)) {
      std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(v25 + 8), *((void **)this + 9), (void *)this + 10);
    }
  }
}

void sub_2235206D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    id v6 = *result;
    uint64_t v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    unsigned __int16 v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    unint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        id v9 = a2;
        do
        {
          *((_DWORD *)v8 + _Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)v9 + 8);
          EQKit::ILayoutOffset::operator=((uint64_t)(v8 + 5), (uint64_t)(v9 + 5));
          std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(v5, (uint64_t)v16);
          uint64_t v8 = v15;
          unint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              id v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          id v9 = a2;
        }
        while (a2 != a3);
      }
    }
    double result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_223520888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(void *)a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
    }
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(void *)a1, (id *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(uint64_t a1, id *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, a2[1]);
    EQKit::ILayoutOffset::~ILayoutOffset(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(a1, a2, (uint64_t)v8);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v8[0] + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  id v6 = v8[0];
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v6;
}

EQKit::ILayoutOffset *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  id v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  double result = EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)(v6 + 10), (id *)(a2 + 8));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223520AB4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      EQKit::ILayoutOffset::~ILayoutOffset(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  uint64_t v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    double result = (uint64_t *)(*v3 + 16);
  }
  *double result = (uint64_t)v3;
  id v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    id v6 = (void *)a2;
  }
  *id v6 = a2 + 8;
  return result;
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_223520BBC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v1, *(id **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    id v6 = result + 1;
    do
    {
      double result = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  id v6 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        unint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        unint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::vector<EQKitAlignmentGroup>::__init_with_size[abi:nn180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::string>::__vallocate[abi:nn180100](a1, a4);
    std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((uint64_t)a1, a2, a3);
  }
}

void std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v4 + v7, a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v4;
}

void sub_223520F70(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](a1, v5 >> 3);
    int v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<unsigned long>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>(uint64_t a1, const EQKit::ILayout *a2)
{
  uint64_t v2 = *(EQKit::ILayout **)a1;
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v10 = 0x492492492492492;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v14 = v11;
  int v15 = (EQKit::ILayout *)&v11[56 * v3];
  uint64_t v17 = &v11[56 * v10];
  EQKit::ILayout::ILayout(v15, a2);
  uint64_t v16 = (char *)v15 + 56;
  std::vector<EQKit::ILayout>::__swap_out_circular_buffer((EQKit::ILayout **)a1, &v14);
  uint64_t v12 = *(void *)(a1 + 8);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_223521124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__swap_out_circular_buffer(EQKit::ILayout **a1, void *a2)
{
  int64_t v5 = *a1;
  unint64_t v4 = a1[1];
  double result = (EQKit::ILayout *)a2[1];
  while (v4 != v5)
  {
    unint64_t v4 = (const EQKit::ILayout *)((char *)v4 - 56);
    double result = EQKit::ILayout::ILayout((EQKit::ILayout *)((char *)result - 56), v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (EQKit::ILayout *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (EQKit::ILayout *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<EQKit::ILayout>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    EQKit::ILayout::~ILayout((EQKit::ILayout *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(uint64_t a1, int *a2, uint64_t a3)
{
  int64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    int v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t *)v4;
        int v8 = *(_DWORD *)(v4 + 32);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        int64_t v5 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        int64_t v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(a1, a3, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>(EQKit::ILayout *a1, EQKit::ILayout *a2, const EQKit::ILayout *a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = *((void *)a1 + 2);
    uint64_t v9 = (uint64_t)a1 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (a5 <= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 3))
      {
        uint64_t v21 = (uint64_t)a3 + 56 * a5;
      }
      else
      {
        uint64_t v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        std::vector<EQKit::ILayout>::__construct_at_end<EQKit::ILayout*,EQKit::ILayout*>(a1, v21, a4);
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<EQKit::ILayout>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 56 * a5);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *(void *)a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(void *)a1) >> 3);
      if (v14 > 0x492492492492492) {
        abort();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x249249249249249) {
        unint64_t v18 = 0x492492492492492;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      int v22 = (EQKit::ILayout *)&v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      unint64_t v28 = &v19[56 * v18];
      uint64_t v23 = 56 * a5;
      uint64_t v24 = (EQKit::ILayout *)((char *)v22 + 56 * a5);
      do
      {
        EQKit::ILayout::ILayout(v22, v7);
        int v22 = (EQKit::ILayout *)((char *)v22 + 56);
        uint64_t v7 = (const EQKit::ILayout *)((char *)v7 + 56);
        v23 -= 56;
      }
      while (v23);
      uint64_t v27 = v24;
      int64_t v5 = std::vector<EQKit::ILayout>::__swap_out_circular_buffer((uint64_t)a1, v26, v5);
      std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_2235214C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  int v8 = (EQKit::ILayout *)v6;
  if (v7 < a3)
  {
    uint64_t v10 = (const EQKit::ILayout *)(a2 + v6 - a4);
    int v8 = *(EQKit::ILayout **)(a1 + 8);
    do
    {
      EQKit::ILayout::ILayout(v8, v10);
      uint64_t v10 = (const EQKit::ILayout *)((char *)v10 + 56);
      int v8 = (EQKit::ILayout *)((char *)v8 + 56);
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v8;

  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(a2, v7, v6);
}

void sub_22352157C(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__swap_out_circular_buffer(uint64_t a1, void *a2, EQKit::ILayout *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = (EQKit::ILayout *)a2[1];
  unint64_t v7 = *(EQKit::ILayout **)a1;
  int v8 = v6;
  if (v7 != a3)
  {
    uint64_t v9 = a3;
    int v8 = (EQKit::ILayout *)a2[1];
    do
    {
      uint64_t v9 = (const EQKit::ILayout *)((char *)v9 - 56);
      int v8 = EQKit::ILayout::ILayout((EQKit::ILayout *)((char *)v8 - 56), v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = *(const EQKit::ILayout **)(a1 + 8);
  uint64_t v11 = (EQKit::ILayout *)a2[2];
  if (v10 != v3)
  {
    do
    {
      EQKit::ILayout::ILayout(v11, v3);
      uint64_t v3 = (const EQKit::ILayout *)((char *)v3 + 56);
      uint64_t v11 = (EQKit::ILayout *)((char *)v11 + 56);
    }
    while (v3 != v10);
    int v8 = (EQKit::ILayout *)a2[1];
  }
  a2[2] = v11;
  unint64_t v12 = *(EQKit::ILayout **)a1;
  *(void *)a1 = v8;
  a2[1] = v12;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2[2];
  a2[2] = v13;
  uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 56;
      a3 -= 56;
      EQKit::ILayout::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      EQKit::ILayout::operator=(a3, v4);
      v4 += 56;
      a3 += 56;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (a5 <= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 3)))
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((uint64_t)a1, v21, a4);
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<EQKitAlignmentGroup>::__move_range((uint64_t)a1, v5, v12, v5 + 24 * a5);
      if (v21 != v7)
      {
        uint64_t v22 = v5;
        do
        {
          long long v23 = *(_OWORD *)v7;
          *(void *)(v22 + 16) = *(void *)(v7 + 16);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v7 += 24;
        }
        while (v7 != v21);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v33 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v24 = (uint64_t)&v19[24 * v15];
      std::string __p = v19;
      uint64_t v30 = v24;
      uint64_t v31 = v24;
      unsigned __int8 v32 = &v19[24 * v18];
      uint64_t v25 = 3 * a5;
      uint64_t v26 = v24 + 24 * a5;
      uint64_t v27 = 8 * v25;
      do
      {
        EQKitAlignmentGroup::EQKitAlignmentGroup(v24, v7);
        v24 += 24;
        v7 += 24;
        v27 -= 24;
      }
      while (v27);
      uint64_t v31 = v26;
      uint64_t v5 = std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p, v5);
      if (v31 != v30) {
        uint64_t v31 = (v31 - v30 - 24) % 0x18uLL + v30;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_223521934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<EQKitAlignmentGroup>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7 - a4;
  unint64_t v9 = a2 + v7 - a4;
  if (v9 >= a3)
  {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      result.n128_f64[0] = EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v9);
      v9 += 24;
      v11 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v11;
  if (v7 != a4)
  {
    uint64_t v13 = (__n128 *)(v7 - 24);
    uint64_t v14 = 8 * (v8 >> 3);
    uint64_t v15 = a2 - 24;
    do
    {
      __n128 result = *(__n128 *)(v15 + v14);
      v13[1].n128_u64[0] = *(void *)(v15 + v14 + 16);
      *uint64_t v13 = result;
      uint64_t v13 = (__n128 *)((char *)v13 - 24);
      v14 -= 24;
    }
    while (v14);
  }
  return result;
}

void sub_223521A58(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (v7 != a3)
  {
    uint64_t v9 = a3;
    uint64_t v8 = a2[1];
    do
    {
      v9 -= 24;
      EQKitAlignmentGroup::EQKitAlignmentGroup(v8 - 24, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = a1[1];
  uint64_t v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v3);
      v3 += 24;
      v11 += 24;
    }
    while (v3 != v10);
    uint64_t v8 = a2[1];
  }
  a2[2] = v11;
  uint64_t v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

void std::vector<EQKitLayoutRow::Kerning>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = &v7[2 * a2];
      do
      {
        void *v7 = 0;
        v7[1] = 0x7FFFFFFFFFFFFFFFLL;
        v7 += 2;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = &v13[16 * v10];
    unint64_t v16 = &v15[16 * a2];
    uint64_t v17 = v15;
    do
    {
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0x7FFFFFFFFFFFFFFFLL;
      v17 += 16;
    }
    while (v17 != v16);
    unint64_t v18 = &v13[16 * v12];
    uint64_t v20 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

uint64_t std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  std::string __p = v11;
  uint64_t v15 = &v11[24 * v3];
  uint64_t v17 = &v11[24 * v10];
  EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v15, a2);
  unint64_t v16 = v15 + 24;
  std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    unint64_t v16 = &v15[(v16 - v15 - 24) % 0x18uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_223521D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 24;
    EQKitAlignmentGroup::EQKitAlignmentGroup(v6 - 24, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void EQKitLayoutRow::~EQKitLayoutRow(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1 + 72, *(id **)(a1 + 80));
  unint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
}

void EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator(EQKitLayoutStretchedOperator *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

uint64_t EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6)
{
  *(void *)__n128 result = a2;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x560], 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a5;
  *(double *)(result + 32) = a6;
  return result;
}

{
  *(void *)__n128 result = a2;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x560], 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a5;
  *(double *)(result + 32) = a6;
  return result;
}

uint64_t EQKitXMLIsTextContentOnly(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1)
    {
      int v2 = 0;
      while (xmlNodeIsText((const xmlNode *)v1) || *(_DWORD *)(v1 + 8) == 8)
      {
        uint64_t v1 = *(void *)(v1 + 48);
        int v2 = 1;
        int v3 = 1;
        if (!v1) {
          return v3 & v2;
        }
      }
      int v3 = 0;
      return v3 & v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const char *EQKitXMLIsNamedElement(_xmlNode *a1, _xmlNs *a2, const char *__s2)
{
  __n128 result = 0;
  if (a1 && __s2)
  {
    if (a1->type == XML_ELEMENT_NODE && a1->ns == a2)
    {
      __n128 result = (const char *)a1->name;
      if (result) {
        return (const char *)(strcmp(result, __s2) == 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL EQKitXMLIsNsElement(BOOL result, _xmlNs *a2)
{
  if (result) {
    return *(_DWORD *)(result + 8) == 1 && *(void *)(result + 72) == (void)a2;
  }
  return result;
}

BOOL EQKitXMLIsElement(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 8) == 1;
  }
  return result;
}

void EQKitXMLTextContentAsString(_xmlNode *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  xmlBufferPtr v6 = xmlBufferCreate();
  xmlNodeBufGetContent(v6, a1);
  if (a2)
  {
    uint64_t v7 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:nn180100]<0>(&__str, v7);
    std::string::basic_string[abi:nn180100]<0>(__p, " \t\n");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if ((v20 & 0x80u) == 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      size_t v11 = v20;
    }
    else {
      size_t v11 = (size_t)__p[1];
    }
    if (!size) {
      goto LABEL_27;
    }
    uint64_t v12 = p_str;
    if (v11)
    {
      std::string::size_type v13 = size;
      uint64_t v12 = p_str;
      while (memchr(v10, v12->__r_.__value_.__s.__data_[0], v11))
      {
        uint64_t v12 = (std::string *)((char *)v12 + 1);
        if (!--v13) {
          goto LABEL_27;
        }
      }
    }
    std::string::size_type v15 = (char *)v12 - (char *)p_str;
    if (v15 == -1)
    {
LABEL_27:
      std::string::basic_string[abi:nn180100]<0>(a3, "");
    }
    else
    {
      std::string::size_type v16 = size - 1;
      do
      {
        std::string::size_type v17 = v16;
        if (v16 == -1) {
          break;
        }
        if (!v11) {
          break;
        }
        uint64_t v18 = memchr(v10, p_str->__r_.__value_.__s.__data_[v16], v11);
        std::string::size_type v16 = v17 - 1;
      }
      while (v18);
      std::string::basic_string(a3, &__str, v15, v17 - v15 + 1, (std::allocator<char> *)&v22);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v14 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:nn180100]<0>(a3, v14);
  }
  xmlBufferFree(v6);
}

void EQKitXMLAttributeValueAsString(_xmlNode *a1@<X0>, _xmlAttr *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1)
  {
    if (a2)
    {
      String = xmlNodeListGetString(a1->doc, a2->children, 1);
      if (String)
      {
        uint64_t v5 = String;
        MEMORY[0x223CB8D60](a3, String);
        free(v5);
      }
    }
  }
}

void EQKitXMLAttributeValueAsString(_xmlNode *a1@<X0>, _xmlNs *a2@<X1>, xmlChar *name@<X2>, BOOL *a4@<X3>, uint64_t a5@<X8>)
{
  xmlAttrPtr v10 = xmlHasProp(a1, name);
  size_t v11 = v10;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  if (a2 && !v10) {
    size_t v11 = xmlHasNsProp(a1, name, a2->href);
  }
  if (v11)
  {
    EQKitXMLAttributeValueAsString(a1, v11, &v25);
    *(std::string *)a5 = v25;
  }
  if (a4) {
    *a4 = v11 != 0;
  }
  uint64_t v12 = __p;
  std::string::basic_string[abi:nn180100]<0>(__p, " \t\n");
  int v13 = *(char *)(a5 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (char *)a5;
  }
  else {
    uint64_t v14 = *(char **)a5;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a5 + 8);
  }
  if ((v24 & 0x80u) == 0)
  {
    size_t v16 = v24;
  }
  else
  {
    uint64_t v12 = (void **)__p[0];
    size_t v16 = (size_t)__p[1];
  }
  if (!v15) {
    goto LABEL_33;
  }
  std::string::size_type v17 = v14;
  if (v16)
  {
    uint64_t v18 = v15;
    std::string::size_type v17 = v14;
    while (memchr(v12, *v17, v16))
    {
      ++v17;
      if (!--v18) {
        goto LABEL_33;
      }
    }
  }
  if (v17 - v14 == -1)
  {
LABEL_33:
    MEMORY[0x223CB8D60](a5, "");
  }
  else
  {
    uint64_t v19 = v15 - 1;
    uint64_t v20 = v19;
    do
    {
      uint64_t v21 = v20;
      if (v20 == -1) {
        break;
      }
      if (!v16) {
        break;
      }
      char v22 = memchr(v12, v14[v20], v16);
      uint64_t v20 = v21 - 1;
    }
    while (v22);
    if (v17 != v14 || v21 != v19)
    {
      std::string::basic_string(&v25, (const std::string *)a5, v17 - v14, v21 - (v17 - v14) + 1, (std::allocator<char> *)&v26);
      if (*(char *)(a5 + 23) < 0) {
        operator delete(*(void **)a5);
      }
      *(std::string *)a5 = v25;
    }
  }
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t EQKitXMLAttributeValueAsInt32(_xmlNode *a1, _xmlNs *a2, xmlChar *a3, BOOL *a4)
{
  unsigned int v11 = 0;
  EQKitXMLAttributeValueAsString(a1, a2, a3, a4, (uint64_t)&v10);
  std::istringstream::basic_istringstream[abi:nn180100](v7, &v10, 8);
  MEMORY[0x223CB8DE0](v7, &v11);
  if (a4) {
    *a4 = *(_DWORD *)((char *)&v7[4] + *(void *)(v7[0] - 24)) == 0;
  }
  uint64_t v5 = v11;
  v7[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v7 + *(void *)(v7[0] - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  unsigned __int16 v7[2] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223CB8ED0](&v9);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t *std::istringstream::basic_istringstream[abi:nn180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 24;
  uint64_t v7 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v10;
  *(uint64_t *)((char *)a1 + *(void *)(v10 - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = v9;
  a1[1] = 0;
  unsigned int v11 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:nn180100](v8, a2, a3 | 8);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:nn180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + ++*(void *)(this + 64) = 0u;
  *(_DWORD *)(a1 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:nn180100](a1);
  return a1;
}

void std::stringbuf::__init_buf_ptrs[abi:nn180100](uint64_t a1)
{
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = 0;
  int v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = v4;
      }
      if (v5) {
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = (char *)v4 + v5;
      }
    }
  }
}

void sub_223523BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v25 - 145) < 0) {
    operator delete(*(void **)(v24 + 24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223CB8ED0](a1 + 120);
  return a1;
}

std::string *EQKit::AttributeCollection::setValueForKey(uint64_t a1, const std::string *a2, int a3, unint64_t a4)
{
  unint64_t v7 = a4;
  int v8 = a3;
  uint64_t v9 = &v7;
  unint64_t v5 = (std::string *)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 80), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return std::string::operator=(v5 + 2, a2);
}

CGColorRef EQKitMathMLParserCreateCGColorFromString(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(_OWORD *)components = xmmword_223837BD8;
  long long v17 = unk_223837BE8;
  unsigned int v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80) != 0)
  {
    std::string::size_type v2 = *(void *)(a1 + 8);
    if (v2 <= 1) {
      return 0;
    }
    if (**(unsigned char **)a1 != 35)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, v2);
      goto LABEL_10;
    }
LABEL_7:
    if (EQKitMathMLParserConvertHexColorStringToRGBFloatValues((std::string *)a1, components, &components[1], (double *)&v17))goto LABEL_31; {
    return 0;
    }
  }
  if (v1 < 2) {
    return 0;
  }
  if (*(unsigned char *)a1 == 35) {
    goto LABEL_7;
  }
  std::string __p = *(std::string *)a1;
LABEL_10:
  std::string::size_type v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
  }
  if (!v6)
  {
LABEL_28:
    int v12 = EQKitMathMLParserConvertNamedColorStringToRGBFloatValues((const void **)&__p.__r_.__value_.__l.__data_, components, &components[1], (double *)&v17);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    int v9 = p_p->__r_.__value_.__s.__data_[0];
    if (p_p->__r_.__value_.__s.__data_[0] > 90) {
      break;
    }
    if ((char)v9 < 65) {
      goto LABEL_33;
    }
    p_p->__r_.__value_.__s.__data_[0] = v9 + 32;
    std::string::size_type v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
LABEL_21:
    p_p = (std::string *)((char *)p_p + 1);
    if ((v4 & 0x80u) == 0) {
      unint64_t v10 = &__p;
    }
    else {
      unint64_t v10 = (std::string *)v7;
    }
    if ((v4 & 0x80u) == 0) {
      std::string::size_type v11 = v4;
    }
    else {
      std::string::size_type v11 = size;
    }
    if (p_p == (std::string *)((char *)v10 + v11)) {
      goto LABEL_28;
    }
  }
  if ((v9 - 97) <= 0x19) {
    goto LABEL_21;
  }
LABEL_33:
  int v12 = 0;
  if ((v4 & 0x80) != 0) {
LABEL_29:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  if (v12)
  {
LABEL_31:
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    CGColorRef v3 = CGColorCreate(DeviceRGB, components);
    CGColorSpaceRelease(DeviceRGB);
    return v3;
  }
  return 0;
}

void sub_2235240C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **EQKit::AttributeCollection::setValueForKey(uint64_t a1, CFTypeRef *a2, int a3, unint64_t a4)
{
  unint64_t v7 = a4;
  int v8 = a3;
  int v9 = &v7;
  unint64_t v5 = (const void **)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 536), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return EQKitTypes::CFRetainRelease::operator=(v5 + 6, a2);
}

void sub_2235242EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _contentAppendStringIfNeeded(uint64_t result, std::string *a2, unsigned char *a3, unsigned char *a4, int a5)
{
  if (!*a3) {
    return result;
  }
  int v9 = (id *)result;
  if (*a4)
  {
    int v10 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v10 >= 0) {
      std::string::size_type v11 = a2;
    }
    else {
      std::string::size_type v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0) {
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_41;
    }
    std::string::size_type v13 = 0;
    while (memchr(" \t\n", v11->__r_.__value_.__s.__data_[v13], 3uLL))
    {
      if (size == ++v13) {
        goto LABEL_41;
      }
    }
    if (v13 == -1) {
      goto LABEL_41;
    }
  }
  else
  {
    std::string::size_type v13 = 0;
  }
  std::string::size_type v14 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (a5)
  {
    std::string::size_type v15 = a2->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0) {
      size_t v16 = a2;
    }
    else {
      size_t v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v17 = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v18 = (uint64_t)&v16[-1].__r_.__value_.__r.__words[2] + 7;
    while (v17)
    {
      if (!memchr(" \t\n", *(char *)(v18 + v17--), 3uLL)) {
        goto LABEL_31;
      }
    }
    uint64_t v17 = -1;
    if (v13) {
      goto LABEL_38;
    }
  }
  else
  {
    std::string::size_type v15 = a2->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v20 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v17 = v20 - 1;
LABEL_31:
    if (v13) {
      goto LABEL_38;
    }
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v21 = v14;
  }
  else {
    std::string::size_type v21 = v15;
  }
  if (v17 != v21 - 1)
  {
LABEL_38:
    std::string::basic_string(&v27, a2, v13, v17 - v13 + 1, (std::allocator<char> *)&v28);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a2->__r_.__value_.__l.__data_);
    }
    *a2 = v27;
  }
LABEL_41:
  id v22 = [NSString alloc];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v23 = (uint64_t *)a2;
  }
  else {
    long long v23 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v24 = [v22 initWithUTF8String:v23];
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    id v26 = *v9;
    if (!*v9)
    {
      id v26 = objc_alloc_init(MEMORY[0x263EFF980]);
      *int v9 = v26;
    }
    [v26 addObject:v25];
  }
  __n128 result = MEMORY[0x223CB8D60](a2, "");
  *a3 = 0;
  *a4 = 0;
  return result;
}

void sub_223524800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(const void **a1, double *a2, double *a3, double *a4)
{
  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken != -1) {
    dispatch_once(&EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken, &__block_literal_global_0);
  }
  if (!EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap) {
    return 1;
  }
  uint64_t v8 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap, a1);
  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap + 8 == v8) {
    return 0;
  }
  int v9 = (std::string *)(v8 + 56);

  return EQKitMathMLParserConvertHexColorStringToRGBFloatValues(v9, a2, a3, a4);
}

uint64_t **___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors))
  {
    std::string::basic_string[abi:nn180100]<0>(&_ZZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors, "aliceblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7408, "#f0f8ff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7420, "antiquewhite");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7438, "#faebd7");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7450, "aqua");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7468, "#00ffff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7480, "aquamarine");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7498, "#7fffd4");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB74B0, "azure");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB74C8, "#f0ffff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB74E0, "beige");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB74F8, "#f5f5dc");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7510, "bisque");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7528, "#ffe4c4");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7540, "black");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7558, "#000000");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7570, "blanchedalmond");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7588, "#ffebcd");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB75A0, "blue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB75B8, "#0000ff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB75D0, "blueviolet");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB75E8, "#8a2be2");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7600, "brown");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7618, "#a52a2a");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7630, "burlywood");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7648, "#deb887");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7660, "cadetblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7678, "#5f9ea0");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7690, "chartreuse");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB76A8, "#7fff00");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB76C0, "chocolate");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB76D8, "#d2691e");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB76F0, "coral");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7708, "#ff7f50");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7720, "cornflowerblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7738, "#6495ed");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7750, "cornsilk");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7768, "#fff8dc");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7780, "crimson");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7798, "#dc143c");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB77B0, "cyan");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB77C8, "#00ffff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB77E0, "darkblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB77F8, "#00008b");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7810, "darkcyan");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7828, "#008b8b");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7840, "darkgoldenrod");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7858, "#b8860b");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7870, "darkgray");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7888, "#a9a9a9");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB78A0, "darkgrey");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB78B8, "#a9a9a9");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB78D0, "darkgreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB78E8, "#006400");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7900, "darkkhaki");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7918, "#bdb76b");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7930, "darkmagenta");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7948, "#8b008b");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7960, "darkolivegreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7978, "#556b2f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7990, "darkorange");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB79A8, "#ff8c00");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB79C0, "darkorchid");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB79D8, "#9932cc");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB79F0, "darkred");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7A08, "#8b0000");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7A20, "darksalmon");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7A38, "#e9967a");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7A50, "darkseagreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7A68, "#8fbc8f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7A80, "darkslateblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7A98, "#483d8b");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7AB0, "darkslategray");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7AC8, "#2f4f4f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7AE0, "darkslategrey");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7AF8, "#2f4f4f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7B10, "darkturquoise");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7B28, "#00ced1");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7B40, "darkviolet");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7B58, "#9400d3");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7B70, "deeppink");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7B88, "#ff1493");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7BA0, "deepskyblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7BB8, "#00bfff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7BD0, "dimgray");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7BE8, "#696969");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7C00, "dimgrey");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7C18, "#696969");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7C30, "dodgerblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7C48, "#1e90ff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7C60, "firebrick");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7C78, "#b22222");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7C90, "floralwhite");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7CA8, "#fffaf0");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7CC0, "forestgreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7CD8, "#228b22");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7CF0, "fuchsia");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7D08, "#ff00ff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7D20, "gainsboro");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7D38, "#dcdcdc");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7D50, "ghostwhite");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7D68, "#f8f8ff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7D80, "gold");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7D98, "#ffd700");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7DB0, "goldenrod");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7DC8, "#daa520");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7DE0, "gray");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7DF8, "#808080");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7E10, "grey");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7E28, "#808080");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7E40, "green");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7E58, "#008000");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7E70, "greenyellow");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7E88, "#adff2f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7EA0, "honeydew");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7EB8, "#f0fff0");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7ED0, "hotpink");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7EE8, "#ff69b4");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7F00, "indianred ");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7F18, "#cd5c5c");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7F30, "indigo ");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7F48, "#4b0082");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7F60, "ivory");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7F78, "#fffff0");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7F90, "khaki");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7FA8, "#f0e68c");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7FC0, "lavender");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7FD8, "#e6e6fa");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB7FF0, "lavenderblush");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8008, "#fff0f5");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8020, "lawngreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8038, "#7cfc00");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8050, "lemonchiffon");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8068, "#fffacd");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8080, "lightblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8098, "#add8e6");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB80B0, "lightcoral");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB80C8, "#f08080");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB80E0, "lightcyan");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB80F8, "#e0ffff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8110, "lightgoldenrodyellow");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8128, "#fafad2");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8140, "lightgray");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8158, "#d3d3d3");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8170, "lightgrey");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8188, "#d3d3d3");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB81A0, "lightgreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB81B8, "#90ee90");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB81D0, "lightpink");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB81E8, "#ffb6c1");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8200, "lightsalmon");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8218, "#ffa07a");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8230, "lightseagreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8248, "#20b2aa");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8260, "lightskyblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8278, "#87cefa");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8290, "lightslategray");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB82A8, "#778899");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB82C0, "lightslategrey");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB82D8, "#778899");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB82F0, "lightsteelblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8308, "#b0c4de");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8320, "lightyellow");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8338, "#ffffe0");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8350, "lime");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8368, "#00ff00");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8380, "limegreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8398, "#32cd32");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB83B0, "linen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB83C8, "#faf0e6");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB83E0, "magenta");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB83F8, "#ff00ff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8410, "maroon");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8428, "#800000");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8440, "mediumaquamarine");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8458, "#66cdaa");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8470, "mediumblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8488, "#0000cd");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB84A0, "mediumorchid");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB84B8, "#ba55d3");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB84D0, "mediumpurple");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB84E8, "#9370d8");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8500, "mediumseagreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8518, "#3cb371");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8530, "mediumslateblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8548, "#7b68ee");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8560, "mediumspringgreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8578, "#00fa9a");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8590, "mediumturquoise");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB85A8, "#48d1cc");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB85C0, "mediumvioletred");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB85D8, "#c71585");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB85F0, "midnightblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8608, "#191970");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8620, "mintcream");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8638, "#f5fffa");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8650, "mistyrose");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8668, "#ffe4e1");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8680, "moccasin");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8698, "#ffe4b5");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB86B0, "navajowhite");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB86C8, "#ffdead");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB86E0, "navy");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB86F8, "#000080");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8710, "oldlace");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8728, "#fdf5e6");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8740, "olive");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8758, "#808000");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8770, "olivedrab");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8788, "#6b8e23");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB87A0, "orange");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB87B8, "#ffa500");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB87D0, "orangered");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB87E8, "#ff4500");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8800, "orchid");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8818, "#da70d6");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8830, "palegoldenrod");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8848, "#eee8aa");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8860, "palegreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8878, "#98fb98");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8890, "paleturquoise");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB88A8, "#afeeee");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB88C0, "palevioletred");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB88D8, "#d87093");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB88F0, "papayawhip");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8908, "#ffefd5");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8920, "peachpuff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8938, "#ffdab9");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8950, "peru");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8968, "#cd853f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8980, "pink");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8998, "#ffc0cb");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB89B0, "plum");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB89C8, "#dda0dd");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB89E0, "powderblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB89F8, "#b0e0e6");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8A10, "purple");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8A28, "#800080");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8A40, "red");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8A58, "#ff0000");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8A70, "rosybrown");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8A88, "#bc8f8f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8AA0, "royalblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8AB8, "#4169e1");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8AD0, "saddlebrown");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8AE8, "#8b4513");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8B00, "salmon");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8B18, "#fa8072");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8B30, "sandybrown");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8B48, "#f4a460");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8B60, "seagreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8B78, "#2e8b57");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8B90, "seashell");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8BA8, "#fff5ee");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8BC0, "sienna");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8BD8, "#a0522d");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8BF0, "silver");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8C08, "#c0c0c0");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8C20, "skyblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8C38, "#87ceeb");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8C50, "slateblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8C68, "#6a5acd");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8C80, "slategray");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8C98, "#708090");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8CB0, "slategrey");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8CC8, "#708090");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8CE0, "snow");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8CF8, "#fffafa");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8D10, "springgreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8D28, "#00ff7f");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8D40, "steelblue");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8D58, "#4682b4");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8D70, "tan");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8D88, "#d2b48c");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8DA0, "teal");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8DB8, "#008080");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8DD0, "thistle");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8DE8, "#d8bfd8");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8E00, "tomato");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8E18, "#ff6347");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8E30, "turquoise");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8E48, "#40e0d0");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8E60, "violet");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8E78, "#ee82ee");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8E90, "wheat");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8EA8, "#f5deb3");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8EC0, "white");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8ED8, "#ffffff");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8EF0, "whitesmoke");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8F08, "#f5f5f5");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8F20, "yellow");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8F38, "#ffff00");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8F50, "yellowgreen");
    std::string::basic_string[abi:nn180100]<0>(qword_267FB8F68, "#9acd32");
    __cxa_guard_release(&_ZGVZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors);
  }
  __n128 result = (uint64_t **)operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    unsigned int v1 = result;
    result[2] = 0;
    result[1] = 0;
    *__n128 result = (uint64_t *)(result + 1);
    std::string::size_type v2 = &_ZZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors;
    uint64_t v3 = 147;
    do
    {
      unint64_t v5 = (long long *)v2;
      std::string::size_type v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1, (const void **)v2, (uint64_t)&std::piecewise_construct, &v5);
      __n128 result = (uint64_t **)std::string::operator=((std::string *)(v4 + 7), (const std::string *)v2 + 1);
      v2 += 6;
      --v3;
    }
    while (v3);
    EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap = (uint64_t)v1;
  }
  return result;
}

void sub_2235264D4(_Unwind_Exception *a1)
{
  if (*((char *)v2 + 23) < 0)
  {
    ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_1();
    std::string::size_type v2 = qword_267FB8F50;
  }
  do
  {
    v2 -= 6;
    HTMLColor::~HTMLColor((void **)v2);
  }
  while (v2 != v1);
  __cxa_guard_abort(&_ZGVZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors);
  _Unwind_Resume(a1);
}

void HTMLColor::~HTMLColor(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t EQKitMathMLParserConvertHexColorStringToRGBFloatValues(std::string *__str, double *a2, double *a3, double *a4)
{
  {
    std::string::basic_string[abi:nn180100]<0>(&EQKitMathMLParserIsValidHexColorString(std::string const&)::allowedChars, "#0123456789abcdefABCDEF");
  }
  int v8 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v8 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (v8 >= 0) {
    int v10 = __str;
  }
  else {
    int v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v11 = v10->__r_.__value_.__s.__data_[0];
  std::string::size_type v12 = size - (v11 == 35);
  if (v12 != 3 && v12 != 6) {
    return 0;
  }
  uint64_t v24 = a3;
  std::string::size_type v14 = a4;
  std::string::size_type v15 = byte_267FB8F9F >= 0
      ? &EQKitMathMLParserIsValidHexColorString(std::string const&)::allowedChars
      : (uint64_t *)EQKitMathMLParserIsValidHexColorString(std::string const&)::allowedChars;
  size_t v16 = byte_267FB8F9F >= 0 ? byte_267FB8F9F : unk_267FB8F90;
  if (size)
  {
    if (v16)
    {
      std::string::size_type v17 = size;
      uint64_t v18 = v10;
      while (memchr(v15, v18->__r_.__value_.__s.__data_[0], v16))
      {
        uint64_t v18 = (std::string *)((char *)v18 + 1);
        if (!--v17) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v18 = v10;
    }
    if ((char *)v18 - (char *)v10 != -1) {
      return 0;
    }
  }
LABEL_28:
  unint64_t v20 = 3;
  if (v11 == 35) {
    unint64_t v20 = 4;
  }
  char v21 = size > v20;
  if (v21) {
    std::string::size_type v22 = 2;
  }
  else {
    std::string::size_type v22 = 1;
  }
  if (v21) {
    double v23 = 255.0;
  }
  else {
    double v23 = 15.0;
  }
  std::string::basic_string(&v27, __str, (-3 << v21) + size, v22, (std::allocator<char> *)&v26);
  std::string::basic_string(&v26, __str, size - 2 * v22, v22, (std::allocator<char> *)&v25);
  std::string::basic_string(&v25, __str, size - v22, v22, (std::allocator<char> *)&v28);
  *a2 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v27) / v23;
  *uint64_t v24 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v26) / v23;
  *std::string::size_type v14 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v25) / v23;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_223527794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t EQKitMathMLParserHexToDec(const std::string *a1)
{
  std::istringstream::basic_istringstream[abi:nn180100](v4, a1, 8);
  uint64_t v3 = 0;
  *(_DWORD *)((char *)&v4[1] + *(void *)(v4[0] - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(_DWORD *)((unsigned char *)&v4[1] + *(void *)(v4[0] - 24)) & 0xFFFFFFB5 | 8;
  MEMORY[0x223CB8E00](v4, &v3);
  uint64_t v1 = v3;
  v4[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  void v4[2] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223CB8ED0](&v6);
  return v1;
}

void sub_223527954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  unint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    unsigned __int16 v7[2] = **a4;
    *((_DWORD *)v7 + ++*((_WORD *)this + 12) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>(uint64_t a1, void *a2, unint64_t *a3)
{
  char v5 = *(uint64_t **)(a1 + 8);
  __n128 result = (uint64_t *)(a1 + 8);
  std::string::size_type v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    int v7 = *((_DWORD *)a3 + 2);
    while (1)
    {
      while (1)
      {
        int v8 = v4;
        unint64_t v9 = v4[4];
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        std::string::size_type v4 = (uint64_t *)*v8;
        __n128 result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        int v10 = *((_DWORD *)v8 + 10);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      __n128 result = v8 + 1;
      std::string::size_type v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  int v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKit::ScriptLevel,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKit::ScriptLevel>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    *((unsigned char *)v7 + 56) = 1;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    unsigned __int16 v7[2] = **a4;
    *((_DWORD *)v7 + ++*((_WORD *)this + 12) = 1;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitLength>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a4;
  __n128 result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (unint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3) {
    return std::vector<EQKitLength>::__assign_with_size[abi:nn180100]<EQKitLength*,EQKitLength*>(result, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = operator new(0x48uLL);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + _Block_object_dispose(&STACK[0x560], 8) = 0;
    *((void *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *std::vector<EQKitLength>::__assign_with_size[abi:nn180100]<EQKitLength*,EQKitLength*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned __int16 v7[2] = 0;
    }
    if (a4 >> 60) {
      abort();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<CGPoint>::__vallocate[abi:nn180100](v7, v11);
    std::string::size_type v13 = (char *)v7[1];
    std::string::size_type v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  std::string::size_type v12 = (void **)(result + 8);
  std::string::size_type v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *std::string::size_type v12 = &v9[v17];
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x38uLL);
    unsigned __int16 v7[2] = **a4;
    *((void *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitTypes::VAlign::Enum>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a4;
  __n128 result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (unint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3) {
    return std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(result, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  return result;
}

void EQKit::AttributeCollection::setValueForKey<std::vector<std::string>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a4;
  char v5 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (unint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (v5 != (std::vector<std::string> *)a3) {
    std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(v5, *(std::string **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitPseudoUnitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitPseudoUnitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x48uLL);
    unsigned __int16 v7[2] = **a4;
    *((_DWORD *)v7 + ++*((_WORD *)this + 12) = 1;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + _Block_object_dispose(&STACK[0x560], 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  int v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x38uLL);
    unsigned __int16 v7[2] = **a4;
    *((_WORD *)v7 + 24) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::deque<EQKitMathMLParserState>::~deque[abi:nn180100](void *a1)
{
  std::string::size_type v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      std::string::size_type v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

void std::deque<EQKitMathMLParserState>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<EQKitMathMLParserState>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<EQKitMathMLParserState>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  std::string v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223528408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitMathMLParserState>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 4);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2235285F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_1()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_2()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_3()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_4()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_5()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_6()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_7()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_8()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_9()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_10()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_11()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_12()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_13()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_14()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_15()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_16()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_17()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_18()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_19()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_20()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_21()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_22()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_23()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_24()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_25()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_26()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_27()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_28()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_29()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_30()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_31()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_32()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_33()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_34()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_35()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_36()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_37()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_38()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_39()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_40()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_41()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_42()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_43()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_44()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_45()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_46()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_47()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_48()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_49()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_50()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_51()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_52()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_53()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_54()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_55()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_56()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_57()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_58()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_59()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_60()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_61()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_62()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_63()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_64()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_65()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_66()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_67()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_68()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_69()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_70()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_71()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_72()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_73()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_74()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_75()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_76()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_77()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_78()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_79()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_80()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_81()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_82()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_83()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_84()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_85()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_86()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_87()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_88()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_89()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_90()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_91()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_92()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_93()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_94()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_95()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_96()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_97()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_98()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_99()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_100()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_101()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_102()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_103()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_104()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_105()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_106()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_107()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_108()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_109()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_110()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_111()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_112()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_113()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_114()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_115()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_116()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_117()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_118()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_119()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_120()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_121()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_122()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_123()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_124()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_125()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_126()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_127()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_128()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_129()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_130()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_131()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_132()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_133()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_134()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_135()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_136()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_137()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_138()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_139()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_140()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_141()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_142()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_143()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_144()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_145()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_146()
{
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_147()
{
}

void sub_2235291C0(_Unwind_Exception *a1)
{
}

void *EQKit::AttributeCollection::AttributeCollection(void *this)
{
  this[2] = 0;
  *this = &unk_26D685FB8;
  this[1] = this + 2;
  this[5] = 0;
  this[3] = 0;
  this[4] = this + 5;
  this[8] = 0;
  this[6] = 0;
  this[7] = this + 8;
  this[11] = 0;
  this[9] = 0;
  this[10] = this + 11;
  this[14] = 0;
  this[12] = 0;
  this[13] = this + 14;
  this[17] = 0;
  this[20] = 0;
  this[15] = 0;
  this[16] = this + 17;
  this[18] = 0;
  this[19] = this + 20;
  this[23] = 0;
  this[21] = 0;
  this[22] = this + 23;
  this[26] = 0;
  this[24] = 0;
  this[25] = this + 26;
  this[29] = 0;
  this[27] = 0;
  this[28] = this + 29;
  this[32] = 0;
  this[33] = 0;
  this[30] = 0;
  this[31] = this + 32;
  this[34] = this + 35;
  this[35] = 0;
  this[38] = 0;
  this[39] = 0;
  this[36] = 0;
  this[37] = this + 38;
  this[40] = this + 41;
  this[41] = 0;
  this[44] = 0;
  this[45] = 0;
  this[42] = 0;
  this[43] = this + 44;
  this[46] = this + 47;
  this[47] = 0;
  this[50] = 0;
  this[51] = 0;
  this[48] = 0;
  this[49] = this + 50;
  this[52] = this + 53;
  this[53] = 0;
  this[56] = 0;
  this[57] = 0;
  this[54] = 0;
  this[55] = this + 56;
  this[58] = this + 59;
  this[59] = 0;
  this[62] = 0;
  this[63] = 0;
  this[60] = 0;
  this[61] = this + 62;
  this[66] = 0;
  this[65] = 0;
  this[64] = this + 65;
  this[69] = 0;
  this[68] = 0;
  this[67] = this + 68;
  return this;
}

void EQKit::AttributeCollection::~AttributeCollection(EQKit::AttributeCollection *this)
{
  EQKit::AttributeCollection::~AttributeCollection(this);

  JUMPOUT(0x223CB8F20);
}

{
  *(void *)this = &unk_26D685FB8;
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy((uint64_t)this + 536, *((void **)this + 68));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 512, *((void **)this + 65));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 488, *((void **)this + 62));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 464, *((void **)this + 59));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 440, *((void **)this + 56));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 416, *((void **)this + 53));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 392, *((void **)this + 50));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 344, *((void **)this + 44));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 248, *((void **)this + 32));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 224, *((void **)this + 29));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 176, *((void **)this + 23));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 128, *((void **)this + 17));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy((uint64_t)this + 104, *((char **)this + 14));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, a2[1]);
    uint64_t v4 = (const void *)a2[6];
    if (v4) {
      CFRelease(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *((void *)a2 + 1));
    if (a2[71] < 0) {
      operator delete(*((void **)a2 + 6));
    }
    operator delete(a2);
  }
}

uint64_t std::set<EQKitTypes::Attributes::Enum>::set[abi:nn180100]<EQKitTypes::Attributes::Enum const*>(uint64_t a1, int *a2, int *a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223529840(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_223529CB4(_Unwind_Exception *a1)
{
}

void sub_223529EE4(_Unwind_Exception *a1)
{
}

void sub_22352A024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_22352A0F0(_Unwind_Exception *a1)
{
}

void sub_22352A948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_22352A9DC(_Unwind_Exception *a1)
{
}

uint64_t EQKitMathMLElement::fromString(const void **a1)
{
  if (EQKitMathMLElement::map(void)::onceToken != -1) {
    dispatch_once(&EQKitMathMLElement::map(void)::onceToken, &__block_literal_global_1);
  }
  uint64_t v2 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitMathMLElement::map(void)::map, a1);
  if (EQKitMathMLElement::map(void)::onceToken != -1) {
    dispatch_once(&EQKitMathMLElement::map(void)::onceToken, &__block_literal_global_1);
  }
  if (EQKitMathMLElement::map(void)::map + 8 == v2) {
    return 0;
  }
  else {
    return *(unsigned int *)(v2 + 56);
  }
}

uint64_t EQKitTypes::Display::displayFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::Display::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Display::map(void)::onceToken, &__block_literal_global_186);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Display::map(void)::map, a1);
  if (EQKitTypes::Display::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Display::map(void)::onceToken, &__block_literal_global_186);
  }
  if (EQKitTypes::Display::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

uint64_t EQKit::Script::variantFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKit::Script::map(void)::onceToken != -1) {
    dispatch_once(&EQKit::Script::map(void)::onceToken, &__block_literal_global_190);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKit::Script::map(void)::map, a1);
  if (EQKit::Script::map(void)::onceToken != -1) {
    dispatch_once(&EQKit::Script::map(void)::onceToken, &__block_literal_global_190);
  }
  if (EQKit::Script::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

uint64_t EQKit::Config::Operator::formFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKit::Config::Operator::map(void)::onceToken != -1) {
    dispatch_once(&EQKit::Config::Operator::map(void)::onceToken, &__block_literal_global_210);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKit::Config::Operator::map(void)::map, a1);
  if (EQKit::Config::Operator::map(void)::onceToken != -1) {
    dispatch_once(&EQKit::Config::Operator::map(void)::onceToken, &__block_literal_global_210);
  }
  if (EQKit::Config::Operator::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

uint64_t EQKitTypes::Align::alignFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::Align::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Align::map(void)::onceToken, &__block_literal_global_215);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Align::map(void)::map, a1);
  if (EQKitTypes::Align::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Align::map(void)::onceToken, &__block_literal_global_215);
  }
  if (EQKitTypes::Align::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

uint64_t EQKitTypes::VAlign::vAlignFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::VAlign::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::VAlign::map(void)::onceToken, &__block_literal_global_220);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::VAlign::map(void)::map, a1);
  if (EQKitTypes::VAlign::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::VAlign::map(void)::onceToken, &__block_literal_global_220);
  }
  if (EQKitTypes::VAlign::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

uint64_t EQKitTypes::Boolean::BOOLeanFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::Boolean::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Boolean::map(void)::onceToken, &__block_literal_global_226);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Boolean::map(void)::map, a1);
  if (EQKitTypes::Boolean::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Boolean::map(void)::onceToken, &__block_literal_global_226);
  }
  if (EQKitTypes::Boolean::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

uint64_t EQKitTypes::Attributes::attributeFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::Attributes::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Attributes::map(void)::onceToken, &__block_literal_global_228);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Attributes::map(void)::map, a1);
  if (EQKitTypes::Attributes::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Attributes::map(void)::onceToken, &__block_literal_global_228);
  }
  if (EQKitTypes::Attributes::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

void EQKitTypes::Align::alignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      int v7 = __str;
    }
    else {
      int v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      unint64_t v8 = (unsigned __int8 *)v7 + v4;
      long long v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_223848D13[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::Align::alignFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    int v13 = v12;
    if (v12)
    {
      int v15 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = *a2;
        uint64_t v18 = (v15 - *a2) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          abort();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
          uint64_t v17 = *a2;
          int v15 = a2[1];
        }
        else
        {
          int v22 = 0;
        }
        uint64_t v23 = &v22[4 * v18];
        *(_DWORD *)uint64_t v23 = v13;
        uint64_t v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)int v15 = v12;
        uint64_t v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      uint64_t v26 = __str;
    }
    else {
      uint64_t v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_44:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_44;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_22352B6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + _Block_object_dispose(&STACK[0x560], 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::VAlign::vAlignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      int v7 = __str;
    }
    else {
      int v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      unint64_t v8 = (unsigned __int8 *)v7 + v4;
      long long v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_223848D13[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::VAlign::vAlignFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    int v13 = v12;
    if (v12)
    {
      int v15 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = *a2;
        uint64_t v18 = (v15 - *a2) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          abort();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
          uint64_t v17 = *a2;
          int v15 = a2[1];
        }
        else
        {
          int v22 = 0;
        }
        uint64_t v23 = &v22[4 * v18];
        *(_DWORD *)uint64_t v23 = v13;
        uint64_t v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)int v15 = v12;
        uint64_t v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      uint64_t v26 = __str;
    }
    else {
      uint64_t v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_44:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_44;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_22352B938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + _Block_object_dispose(&STACK[0x560], 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::Strings::separatorsFromString(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  id v4 = [NSString alloc];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  int v6 = (void *)[v4 initWithUTF8String:v5];
  if (v6)
  {
    objc_msgSend(v6, "rangeOfCharacterFromSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceAndNewlineCharacterSet"));
    int v38 = v6;
    if (v7)
    {
      id v8 = (id)objc_msgSend(v6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceAndNewlineCharacterSet", v6));
    }
    else
    {
      unint64_t v31 = [v6 length];
      if (v31)
      {
        unint64_t v32 = 0;
        id v8 = 0;
        do
        {
          uint64_t v33 = objc_msgSend(v6, "rangeOfComposedCharacterSequenceAtIndex:", v32, v38);
          uint64_t v35 = v34;
          if (v34)
          {
            uint64_t v36 = objc_msgSend(v6, "substringWithRange:", v33, v34);
            if (!v8) {
              id v8 = objc_alloc_init(MEMORY[0x263EFF980]);
            }
            [v8 addObject:v36];
          }
          else
          {
            uint64_t v37 = (void *)[MEMORY[0x263F08690] currentHandler];
            objc_msgSend(v37, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "StringVector EQKitTypes::Strings::separatorsFromString(const std::string &)"), @"EQKitMathMLUtil.mm", 656, @"Bad length in separatorArrayFromString");
            uint64_t v35 = 1;
          }
          v32 += v35;
          int v6 = v38;
        }
        while (v32 < v31);
      }
      else
      {
        id v8 = 0;
      }
    }
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v47, 16, v38);
    if (v9)
    {
      uint64_t v10 = *(void *)v43;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v43 != v10) {
            objc_enumerationMutation(v8);
          }
          int v12 = (char *)[*(id *)(*((void *)&v42 + 1) + 8 * i) UTF8String];
          if (v12)
          {
            std::string::basic_string[abi:nn180100]<0>(__p, v12);
            unint64_t v14 = (unint64_t)a2[1];
            unint64_t v13 = (unint64_t)a2[2];
            if (v14 >= v13)
            {
              unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a2) >> 3);
              unint64_t v17 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)*a2) >> 3);
              if (2 * v18 > v17) {
                unint64_t v17 = 2 * v18;
              }
              if (v18 >= 0x555555555555555) {
                unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v19 = v17;
              }
              v46.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 2);
              if (v19) {
                uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a2 + 2), v19);
              }
              else {
                uint64_t v20 = 0;
              }
              unint64_t v21 = &v20[24 * v16];
              long long v22 = *(_OWORD *)__p;
              *((void *)v21 + 2) = v41;
              *(_OWORD *)unint64_t v21 = v22;
              __p[1] = 0;
              uint64_t v41 = 0;
              __p[0] = 0;
              int v24 = *a2;
              unint64_t v23 = (unint64_t)a2[1];
              if ((char *)v23 == *a2)
              {
                int64x2_t v27 = vdupq_n_s64(v23);
                int v25 = &v20[24 * v16];
              }
              else
              {
                int v25 = &v20[24 * v16];
                do
                {
                  long long v26 = *(_OWORD *)(v23 - 24);
                  *((void *)v25 - 1) = *(void *)(v23 - 8);
                  *(_OWORD *)(v25 - 24) = v26;
                  v25 -= 24;
                  *(void *)(v23 - 16) = 0;
                  *(void *)(v23 - _Block_object_dispose(&STACK[0x560], 8) = 0;
                  *(void *)(v23 - 24) = 0;
                  v23 -= 24;
                }
                while ((char *)v23 != v24);
                int64x2_t v27 = *(int64x2_t *)a2;
              }
              uint64_t v28 = v21 + 24;
              *a2 = v25;
              a2[1] = v21 + 24;
              *(int64x2_t *)&v46.__begin_ = v27;
              char v29 = (std::string *)a2[2];
              a2[2] = &v20[24 * v19];
              v46.__end_cap_.__value_ = v29;
              v46.__first_ = (std::__split_buffer<std::string>::pointer)v27.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v46);
              int v30 = SHIBYTE(v41);
              a2[1] = v28;
              if (v30 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v15 = *(_OWORD *)__p;
              *(void *)(v14 + 16) = v41;
              *(_OWORD *)unint64_t v14 = v15;
              a2[1] = (char *)(v14 + 24);
            }
          }
        }
        uint64_t v9 = [v8 countByEnumeratingWithState:&v42 objects:v47 count:16];
      }
      while (v9);
    }
  }
}

void sub_22352BD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t EQKitTypes::Integer::integerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v8 = 0;
  std::istringstream::basic_istringstream[abi:nn180100](v5, a1, 8);
  MEMORY[0x223CB8DF0](v5, &v8);
  *a2 = (*(_DWORD *)((unsigned char *)&v5[4] + *(void *)(v5[0] - 24)) & 7) == 2;
  uint64_t v3 = v8;
  v5[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  id v5[2] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223CB8ED0](&v7);
  return v3;
}

void sub_22352BEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::UInteger::uIntegerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v8 = 0;
  std::istringstream::basic_istringstream[abi:nn180100](v5, a1, 8);
  MEMORY[0x223CB8E00](v5, &v8);
  *a2 = (*(_DWORD *)((unsigned char *)&v5[4] + *(void *)(v5[0] - 24)) & 7) == 2;
  uint64_t v3 = v8;
  v5[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  id v5[2] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223CB8ED0](&v7);
  return v3;
}

void sub_22352C03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Crossout::crossoutFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::Crossout::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Crossout::map(void)::onceToken, &__block_literal_global_272);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Crossout::map(void)::map, a1);
  if (EQKitTypes::Crossout::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Crossout::map(void)::onceToken, &__block_literal_global_272);
  }
  if (EQKitTypes::Crossout::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

void EQKitTypes::Crossout::crossoutVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v7 = __str;
    }
    else {
      uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      uint64_t v8 = (unsigned __int8 *)v7 + v4;
      uint64_t v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_223848D13[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::Crossout::crossoutFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    int v13 = v12;
    long long v15 = a2[1];
    unint64_t v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v17 = *a2;
      uint64_t v18 = (v15 - *a2) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        abort();
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        long long v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
        unint64_t v17 = *a2;
        long long v15 = a2[1];
      }
      else
      {
        long long v22 = 0;
      }
      unint64_t v23 = &v22[4 * v18];
      *(_DWORD *)unint64_t v23 = v13;
      unint64_t v16 = v23 + 4;
      while (v15 != v17)
      {
        int v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)long long v15 = v12;
      unint64_t v16 = v15 + 4;
    }
    a2[1] = v16;
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      long long v26 = __str;
    }
    else {
      long long v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_42:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_42;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_22352C2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + _Block_object_dispose(&STACK[0x560], 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::Notation::notationFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::Notation::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Notation::map(void)::onceToken, &__block_literal_global_278);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Notation::map(void)::map, a1);
  if (EQKitTypes::Notation::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Notation::map(void)::onceToken, &__block_literal_global_278);
  }
  if (EQKitTypes::Notation::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

void EQKitTypes::Notation::notationVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v7 = __str;
    }
    else {
      uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size > v4)
    {
      uint64_t v8 = (unsigned __int8 *)v7 + v4;
      uint64_t v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      uint64_t v10 = 0;
      while (*v8 != asc_223848D13[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        std::string::size_type v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1) {
          goto LABEL_17;
        }
      }
    }
LABEL_16:
    std::string::size_type v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    int v12 = EQKitTypes::Notation::notationFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    int v13 = v12;
    long long v15 = a2[1];
    unint64_t v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v17 = *a2;
      uint64_t v18 = (v15 - *a2) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        abort();
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        long long v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
        unint64_t v17 = *a2;
        long long v15 = a2[1];
      }
      else
      {
        long long v22 = 0;
      }
      unint64_t v23 = &v22[4 * v18];
      *(_DWORD *)unint64_t v23 = v13;
      unint64_t v16 = v23 + 4;
      while (v15 != v17)
      {
        int v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)long long v15 = v12;
      unint64_t v16 = v15 + 4;
    }
    a2[1] = v16;
    std::string::size_type v4 = v11 + 1;
    int v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0) {
      long long v26 = __str;
    }
    else {
      long long v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v25 >= 0) {
      std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
    }
    if (v27 <= v4)
    {
LABEL_42:
      std::string::size_type v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4) {
          goto LABEL_42;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v4 != -1);
}

void sub_22352C5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + _Block_object_dispose(&STACK[0x560], 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::GroupAlign::groupAlignFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::GroupAlign::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::GroupAlign::map(void)::onceToken, &__block_literal_global_281);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::GroupAlign::map(void)::map, a1);
  if (EQKitTypes::GroupAlign::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::GroupAlign::map(void)::onceToken, &__block_literal_global_281);
  }
  if (EQKitTypes::GroupAlign::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

uint64_t EQKitTypes::Edge::edgeFromMathMLString(const void **a1, uint64_t a2)
{
  if (EQKitTypes::Edge::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Edge::map(void)::onceToken, &__block_literal_global_283);
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Edge::map(void)::map, a1);
  if (EQKitTypes::Edge::map(void)::onceToken != -1) {
    dispatch_once(&EQKitTypes::Edge::map(void)::onceToken, &__block_literal_global_283);
  }
  if (EQKitTypes::Edge::map(void)::map + 8 != v4) {
    return *(unsigned int *)(v4 + 56);
  }
  return a2;
}

void ___ZN18EQKitMathMLElementL3mapEv_block_invoke()
{
  MEMORY[0x270FA5388]();
  uint64_t v350 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "mi");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "mn");
  int v3 = 2;
  std::string::basic_string[abi:nn180100]<0>(v4, "mo");
  int v5 = 3;
  std::string::basic_string[abi:nn180100]<0>(v6, "mrow");
  int v7 = 4;
  std::string::basic_string[abi:nn180100]<0>(v8, "semantics");
  int v9 = 5;
  std::string::basic_string[abi:nn180100]<0>(v10, "annotation");
  int v11 = 6;
  std::string::basic_string[abi:nn180100]<0>(v12, "mfrac");
  int v13 = 7;
  std::string::basic_string[abi:nn180100]<0>(v14, "mphantom");
  int v15 = 8;
  std::string::basic_string[abi:nn180100]<0>(v16, "msub");
  int v17 = 9;
  std::string::basic_string[abi:nn180100]<0>(v18, "msup");
  int v19 = 10;
  std::string::basic_string[abi:nn180100]<0>(v20, "msubsup");
  int v21 = 11;
  std::string::basic_string[abi:nn180100]<0>(v22, "mfenced");
  int v23 = 12;
  std::string::basic_string[abi:nn180100]<0>(v24, "mstyle");
  int v25 = 13;
  std::string::basic_string[abi:nn180100]<0>(v26, "munder");
  int v27 = 14;
  std::string::basic_string[abi:nn180100]<0>(v28, "mover");
  int v29 = 15;
  std::string::basic_string[abi:nn180100]<0>(v30, "munderover");
  int v31 = 16;
  std::string::basic_string[abi:nn180100]<0>(v32, "mstack");
  int v33 = 17;
  std::string::basic_string[abi:nn180100]<0>(v34, "msgroup");
  int v35 = 18;
  std::string::basic_string[abi:nn180100]<0>(v36, "msrow");
  int v37 = 19;
  std::string::basic_string[abi:nn180100]<0>(v38, "msline");
  int v39 = 20;
  std::string::basic_string[abi:nn180100]<0>(v40, "mscarries");
  int v41 = 21;
  std::string::basic_string[abi:nn180100]<0>(v42, "mscarry");
  int v43 = 22;
  std::string::basic_string[abi:nn180100]<0>(v44, "mlongdiv");
  int v45 = 23;
  std::string::basic_string[abi:nn180100]<0>(v46, "mtable");
  int v47 = 24;
  std::string::basic_string[abi:nn180100]<0>(v48, "mtr");
  int v49 = 25;
  std::string::basic_string[abi:nn180100]<0>(v50, "mlabeledtr");
  int v51 = 26;
  std::string::basic_string[abi:nn180100]<0>(v52, "mtd");
  int v53 = 27;
  std::string::basic_string[abi:nn180100]<0>(v54, "none");
  int v55 = 30;
  std::string::basic_string[abi:nn180100]<0>(v56, "mroot");
  int v57 = 28;
  std::string::basic_string[abi:nn180100]<0>(v58, "msqrt");
  int v59 = 29;
  std::string::basic_string[abi:nn180100]<0>(v60, "mglyph");
  int v61 = 31;
  std::string::basic_string[abi:nn180100]<0>(v62, "ms");
  int v63 = 32;
  std::string::basic_string[abi:nn180100]<0>(v64, "mtext");
  int v65 = 33;
  std::string::basic_string[abi:nn180100]<0>(v66, "maction");
  int v67 = 34;
  std::string::basic_string[abi:nn180100]<0>(v68, "mspace");
  int v69 = 35;
  std::string::basic_string[abi:nn180100]<0>(v70, "menclose");
  int v71 = 36;
  std::string::basic_string[abi:nn180100]<0>(v72, "mpadded");
  int v73 = 37;
  std::string::basic_string[abi:nn180100]<0>(v74, "maligngroup");
  int v75 = 38;
  std::string::basic_string[abi:nn180100]<0>(v76, "malignmark");
  int v77 = 39;
  std::string::basic_string[abi:nn180100]<0>(v78, "cn");
  int v79 = 40;
  std::string::basic_string[abi:nn180100]<0>(v80, "ci");
  int v81 = 41;
  std::string::basic_string[abi:nn180100]<0>(v82, "csymbol");
  int v83 = 42;
  std::string::basic_string[abi:nn180100]<0>(v84, "apply");
  int v85 = 43;
  std::string::basic_string[abi:nn180100]<0>(v86, "bind");
  int v87 = 44;
  std::string::basic_string[abi:nn180100]<0>(v88, "share");
  int v89 = 45;
  std::string::basic_string[abi:nn180100]<0>(v90, "cerror");
  int v91 = 46;
  std::string::basic_string[abi:nn180100]<0>(v92, "cbytes");
  int v93 = 47;
  std::string::basic_string[abi:nn180100]<0>(v94, "cs");
  int v95 = 48;
  std::string::basic_string[abi:nn180100]<0>(v96, "vector");
  int v97 = 49;
  std::string::basic_string[abi:nn180100]<0>(v98, "matrix");
  int v99 = 50;
  std::string::basic_string[abi:nn180100]<0>(v100, "matrixrow");
  int v101 = 51;
  std::string::basic_string[abi:nn180100]<0>(v102, "reln");
  int v103 = 52;
  std::string::basic_string[abi:nn180100]<0>(v104, "fn");
  int v105 = 53;
  std::string::basic_string[abi:nn180100]<0>(v106, "declare");
  int v107 = 54;
  std::string::basic_string[abi:nn180100]<0>(v108, "interval");
  int v109 = 55;
  std::string::basic_string[abi:nn180100]<0>(v110, "inverse");
  int v111 = 56;
  std::string::basic_string[abi:nn180100]<0>(v112, "ident");
  int v113 = 57;
  std::string::basic_string[abi:nn180100]<0>(v114, "domain");
  int v115 = 58;
  std::string::basic_string[abi:nn180100]<0>(v116, "codomain");
  int v117 = 59;
  std::string::basic_string[abi:nn180100]<0>(v118, "image");
  int v119 = 60;
  std::string::basic_string[abi:nn180100]<0>(v120, "ln");
  int v121 = 61;
  std::string::basic_string[abi:nn180100]<0>(v122, "log");
  int v123 = 62;
  std::string::basic_string[abi:nn180100]<0>(v124, "moment");
  int v125 = 63;
  std::string::basic_string[abi:nn180100]<0>(v126, "lambda");
  int v127 = 64;
  std::string::basic_string[abi:nn180100]<0>(v128, "compose");
  int v129 = 65;
  std::string::basic_string[abi:nn180100]<0>(v130, "quotient");
  int v131 = 66;
  std::string::basic_string[abi:nn180100]<0>(v132, "divide");
  int v133 = 67;
  std::string::basic_string[abi:nn180100]<0>(v134, "minus");
  int v135 = 68;
  std::string::basic_string[abi:nn180100]<0>(v136, "power");
  int v137 = 69;
  std::string::basic_string[abi:nn180100]<0>(v138, "rem");
  int v139 = 70;
  std::string::basic_string[abi:nn180100]<0>(v140, "root");
  int v141 = 71;
  std::string::basic_string[abi:nn180100]<0>(v142, "factorial");
  int v143 = 72;
  std::string::basic_string[abi:nn180100]<0>(v144, "abs");
  int v145 = 73;
  std::string::basic_string[abi:nn180100]<0>(v146, "conjugate");
  int v147 = 74;
  std::string::basic_string[abi:nn180100]<0>(v148, "arg");
  int v149 = 75;
  std::string::basic_string[abi:nn180100]<0>(v150, "real");
  int v151 = 76;
  std::string::basic_string[abi:nn180100]<0>(v152, "imaginary");
  int v153 = 77;
  std::string::basic_string[abi:nn180100]<0>(v154, "floor");
  int v155 = 78;
  std::string::basic_string[abi:nn180100]<0>(v156, "ceiling");
  int v157 = 79;
  std::string::basic_string[abi:nn180100]<0>(v158, "exp");
  int v159 = 80;
  std::string::basic_string[abi:nn180100]<0>(v160, "max");
  int v161 = 81;
  std::string::basic_string[abi:nn180100]<0>(v162, "min");
  int v163 = 82;
  std::string::basic_string[abi:nn180100]<0>(v164, "plus");
  int v165 = 83;
  std::string::basic_string[abi:nn180100]<0>(v166, "times");
  int v167 = 84;
  std::string::basic_string[abi:nn180100]<0>(v168, "gcd");
  int v169 = 85;
  std::string::basic_string[abi:nn180100]<0>(v170, "lcm");
  int v171 = 86;
  std::string::basic_string[abi:nn180100]<0>(v172, "and");
  int v173 = 87;
  std::string::basic_string[abi:nn180100]<0>(v174, "or");
  int v175 = 88;
  std::string::basic_string[abi:nn180100]<0>(v176, "xor");
  int v177 = 89;
  std::string::basic_string[abi:nn180100]<0>(v178, "not");
  int v179 = 90;
  std::string::basic_string[abi:nn180100]<0>(v180, "implies");
  int v181 = 91;
  std::string::basic_string[abi:nn180100]<0>(v182, "equivalent");
  int v183 = 92;
  std::string::basic_string[abi:nn180100]<0>(v184, "forall");
  int v185 = 93;
  std::string::basic_string[abi:nn180100]<0>(v186, "exists");
  int v187 = 94;
  std::string::basic_string[abi:nn180100]<0>(v188, "eq");
  int v189 = 95;
  std::string::basic_string[abi:nn180100]<0>(v190, "gt");
  int v191 = 96;
  std::string::basic_string[abi:nn180100]<0>(v192, "lt");
  int v193 = 97;
  std::string::basic_string[abi:nn180100]<0>(v194, "geq");
  int v195 = 98;
  std::string::basic_string[abi:nn180100]<0>(v196, "leq");
  int v197 = 99;
  std::string::basic_string[abi:nn180100]<0>(v198, "neq");
  int v199 = 100;
  std::string::basic_string[abi:nn180100]<0>(v200, "approx");
  int v201 = 101;
  std::string::basic_string[abi:nn180100]<0>(v202, "factorof");
  int v203 = 102;
  std::string::basic_string[abi:nn180100]<0>(v204, "tendsto");
  int v205 = 103;
  std::string::basic_string[abi:nn180100]<0>(v206, "int");
  int v207 = 104;
  std::string::basic_string[abi:nn180100]<0>(v208, "partialdiff");
  int v209 = 105;
  std::string::basic_string[abi:nn180100]<0>(v210, "divergence");
  int v211 = 106;
  std::string::basic_string[abi:nn180100]<0>(v212, "grad");
  int v213 = 107;
  std::string::basic_string[abi:nn180100]<0>(v214, "curl");
  int v215 = 108;
  std::string::basic_string[abi:nn180100]<0>(v216, "laplacian");
  int v217 = 109;
  std::string::basic_string[abi:nn180100]<0>(v218, "set");
  int v219 = 110;
  std::string::basic_string[abi:nn180100]<0>(v220, "list");
  int v221 = 111;
  std::string::basic_string[abi:nn180100]<0>(v222, "union");
  int v223 = 112;
  std::string::basic_string[abi:nn180100]<0>(v224, "intersect");
  int v225 = 113;
  std::string::basic_string[abi:nn180100]<0>(v226, "cartesianproduct");
  int v227 = 114;
  std::string::basic_string[abi:nn180100]<0>(v228, "in");
  int v229 = 115;
  std::string::basic_string[abi:nn180100]<0>(v230, "notin");
  int v231 = 116;
  std::string::basic_string[abi:nn180100]<0>(v232, "notsubset");
  int v233 = 117;
  std::string::basic_string[abi:nn180100]<0>(v234, "notprsubset");
  int v235 = 118;
  std::string::basic_string[abi:nn180100]<0>(v236, "setdiff");
  int v237 = 119;
  std::string::basic_string[abi:nn180100]<0>(v238, "subset");
  int v239 = 120;
  std::string::basic_string[abi:nn180100]<0>(v240, "prsubset");
  int v241 = 121;
  std::string::basic_string[abi:nn180100]<0>(v242, "card");
  int v243 = 122;
  std::string::basic_string[abi:nn180100]<0>(v244, "sum");
  int v245 = 123;
  std::string::basic_string[abi:nn180100]<0>(v246, "product");
  int v247 = 124;
  std::string::basic_string[abi:nn180100]<0>(v248, "limit");
  int v249 = 125;
  std::string::basic_string[abi:nn180100]<0>(v250, "sin");
  int v251 = 126;
  std::string::basic_string[abi:nn180100]<0>(v252, "cos");
  int v253 = 127;
  std::string::basic_string[abi:nn180100]<0>(v254, "tan");
  int v255 = 128;
  std::string::basic_string[abi:nn180100]<0>(v256, "sec");
  int v257 = 129;
  std::string::basic_string[abi:nn180100]<0>(v258, "csc");
  int v259 = 130;
  std::string::basic_string[abi:nn180100]<0>(v260, "cot");
  int v261 = 131;
  std::string::basic_string[abi:nn180100]<0>(v262, "sinh");
  int v263 = 132;
  std::string::basic_string[abi:nn180100]<0>(v264, "cosh");
  int v265 = 133;
  std::string::basic_string[abi:nn180100]<0>(v266, "tanh");
  int v267 = 134;
  std::string::basic_string[abi:nn180100]<0>(v268, "sech");
  int v269 = 135;
  std::string::basic_string[abi:nn180100]<0>(v270, "csch");
  int v271 = 136;
  std::string::basic_string[abi:nn180100]<0>(v272, "coth");
  int v273 = 137;
  std::string::basic_string[abi:nn180100]<0>(v274, "arcsin");
  int v275 = 138;
  std::string::basic_string[abi:nn180100]<0>(v276, "arccos");
  int v277 = 139;
  std::string::basic_string[abi:nn180100]<0>(v278, "arctan");
  int v279 = 140;
  std::string::basic_string[abi:nn180100]<0>(v280, "arccosh");
  int v281 = 141;
  std::string::basic_string[abi:nn180100]<0>(v282, "arccot");
  int v283 = 142;
  std::string::basic_string[abi:nn180100]<0>(v284, "arccoth");
  int v285 = 143;
  std::string::basic_string[abi:nn180100]<0>(v286, "arccsc");
  int v287 = 144;
  std::string::basic_string[abi:nn180100]<0>(v288, "arccsch");
  int v289 = 145;
  std::string::basic_string[abi:nn180100]<0>(v290, "arcsec");
  int v291 = 146;
  std::string::basic_string[abi:nn180100]<0>(v292, "arcsech");
  int v293 = 147;
  std::string::basic_string[abi:nn180100]<0>(v294, "arcsinh");
  int v295 = 148;
  std::string::basic_string[abi:nn180100]<0>(v296, "arctanh");
  int v297 = 149;
  std::string::basic_string[abi:nn180100]<0>(v298, "mean");
  int v299 = 150;
  std::string::basic_string[abi:nn180100]<0>(v300, "sdev");
  int v301 = 151;
  std::string::basic_string[abi:nn180100]<0>(v302, "variance");
  int v303 = 152;
  std::string::basic_string[abi:nn180100]<0>(v304, "median");
  int v305 = 153;
  std::string::basic_string[abi:nn180100]<0>(v306, "mode");
  int v307 = 154;
  std::string::basic_string[abi:nn180100]<0>(v308, "determinant");
  int v309 = 155;
  std::string::basic_string[abi:nn180100]<0>(v310, "transpose");
  int v311 = 156;
  std::string::basic_string[abi:nn180100]<0>(v312, "selector");
  int v313 = 157;
  std::string::basic_string[abi:nn180100]<0>(v314, "vectorproduct");
  int v315 = 158;
  std::string::basic_string[abi:nn180100]<0>(v316, "scalarproduct");
  int v317 = 159;
  std::string::basic_string[abi:nn180100]<0>(v318, "outerproduct");
  int v319 = 160;
  std::string::basic_string[abi:nn180100]<0>(v320, "integers");
  int v321 = 161;
  std::string::basic_string[abi:nn180100]<0>(v322, "reals");
  int v323 = 162;
  std::string::basic_string[abi:nn180100]<0>(v324, "rationals");
  int v325 = 163;
  std::string::basic_string[abi:nn180100]<0>(v326, "naturalnumbers");
  int v327 = 164;
  std::string::basic_string[abi:nn180100]<0>(v328, "complexes");
  int v329 = 165;
  std::string::basic_string[abi:nn180100]<0>(v330, "primes");
  int v331 = 166;
  std::string::basic_string[abi:nn180100]<0>(v332, "emptyset");
  int v333 = 167;
  std::string::basic_string[abi:nn180100]<0>(v334, "exponentiale");
  int v335 = 168;
  std::string::basic_string[abi:nn180100]<0>(v336, "imaginaryi");
  int v337 = 169;
  std::string::basic_string[abi:nn180100]<0>(v338, "notanumber");
  int v339 = 170;
  std::string::basic_string[abi:nn180100]<0>(v340, "true");
  int v341 = 171;
  std::string::basic_string[abi:nn180100]<0>(v342, "false");
  int v343 = 172;
  std::string::basic_string[abi:nn180100]<0>(v344, "pi");
  int v345 = 173;
  std::string::basic_string[abi:nn180100]<0>(v346, "eulergamma");
  int v347 = 174;
  std::string::basic_string[abi:nn180100]<0>(v348, "infinity");
  int v349 = 175;
  operator new();
}

void sub_22352DD88(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1020C4062D53EE8);
  int v3 = &STACK[0x15DF];
  uint64_t v4 = -5600;
  int v5 = &STACK[0x15DF];
  while (1)
  {
    int v6 = *(char *)v5;
    v5 -= 4;
    if (v6 < 0) {
      operator delete(*(void **)((char *)v3 - 23));
    }
    int v3 = v5;
    v4 += 32;
    if (!v4) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_22352E0C0()
{
}

uint64_t std::map<std::string const,EQKitMathMLElement::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitMathMLElement::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352E134(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__construct_node<std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__construct_node<std::pair<std::string const,EQKitMathMLElement::Enum> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_22352E25C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes7DisplayL3mapEv_block_invoke()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "inline");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "block");
  int v3 = 2;
  operator new();
}

void sub_22352E360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = v22;
  MEMORY[0x223CB8F20](v23, 0x1020C4062D53EE8);
  uint64_t v25 = 0;
  while (1)
  {
    if (*(&a22 + v25) < 0) {
      operator delete(*(void **)((char *)&a17 + v25));
    }
    v25 -= 32;
    if (v25 == -64) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::Display::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Display::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352E444(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN5EQKit6ScriptL3mapEv_block_invoke()
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "normal");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "bold");
  int v3 = 2;
  std::string::basic_string[abi:nn180100]<0>(v4, "italic");
  int v5 = 3;
  std::string::basic_string[abi:nn180100]<0>(v6, "bold-italic");
  int v7 = 4;
  std::string::basic_string[abi:nn180100]<0>(v8, "double-struck");
  int v9 = 5;
  std::string::basic_string[abi:nn180100]<0>(v10, "bold-fraktur");
  int v11 = 6;
  std::string::basic_string[abi:nn180100]<0>(v12, "script");
  int v13 = 7;
  std::string::basic_string[abi:nn180100]<0>(v14, "bold-script");
  int v15 = 8;
  std::string::basic_string[abi:nn180100]<0>(v16, "fraktur");
  int v17 = 9;
  std::string::basic_string[abi:nn180100]<0>(v18, "sans-serif");
  int v19 = 10;
  std::string::basic_string[abi:nn180100]<0>(v20, "bold-sans-serif");
  int v21 = 11;
  std::string::basic_string[abi:nn180100]<0>(v22, "italic-sans-serif");
  int v23 = 12;
  std::string::basic_string[abi:nn180100]<0>(v24, "sans-serif-bold-italic");
  int v25 = 13;
  std::string::basic_string[abi:nn180100]<0>(v26, "monospace");
  int v27 = 14;
  std::string::basic_string[abi:nn180100]<0>(v28, "initial");
  int v29 = 15;
  std::string::basic_string[abi:nn180100]<0>(v30, "tailed");
  int v31 = 16;
  std::string::basic_string[abi:nn180100]<0>(v32, "looped");
  int v33 = 17;
  std::string::basic_string[abi:nn180100]<0>(v34, "stretched");
  int v35 = 18;
  operator new();
}

void sub_22352E728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 576;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0) {
      operator delete(*(void **)(&a10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_22352E7E0()
{
}

uint64_t std::map<std::string const,EQKit::Script::Variant>::map[abi:nn180100]<std::pair<std::string const,EQKit::Script::Variant> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352E854(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN5EQKit6Config8OperatorL3mapEv_block_invoke()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "infix");
  int v1 = 2;
  std::string::basic_string[abi:nn180100]<0>(v2, "prefix");
  int v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "postfix");
  int v5 = 3;
  operator new();
}

void sub_22352E978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 87) < 0) {
      operator delete(*(void **)(&a10 + v12 + 64));
    }
    v12 -= 32;
    if (v12 == -96) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKit::Config::Operator::Form>::map[abi:nn180100]<std::pair<std::string const,EQKit::Config::Operator::Form> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352EA6C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes5AlignL3mapEv_block_invoke()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "left");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "center");
  int v3 = 2;
  std::string::basic_string[abi:nn180100]<0>(v4, "right");
  int v5 = 3;
  operator new();
}

void sub_22352EB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 87) < 0) {
      operator delete(*(void **)(&a10 + v12 + 64));
    }
    v12 -= 32;
    if (v12 == -96) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::Align::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Align::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352EC84(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes6VAlignL3mapEv_block_invoke()
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "top");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "bottom");
  int v3 = 5;
  std::string::basic_string[abi:nn180100]<0>(v4, "center");
  int v5 = 3;
  std::string::basic_string[abi:nn180100]<0>(v6, "baseline");
  int v7 = 4;
  std::string::basic_string[abi:nn180100]<0>(v8, "axis");
  int v9 = 2;
  operator new();
}

void sub_22352EDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 151) < 0) {
      operator delete(*(void **)(&a10 + v12 + 128));
    }
    v12 -= 32;
    if (v12 == -160) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::VAlign::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::VAlign::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352EEE4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes7BooleanL3mapEv_block_invoke()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "true");
  int v1 = 2;
  std::string::basic_string[abi:nn180100]<0>(v2, "false");
  int v3 = 1;
  operator new();
}

void sub_22352EFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = v22;
  MEMORY[0x223CB8F20](v23, 0x1020C4062D53EE8);
  uint64_t v25 = 0;
  while (1)
  {
    if (*(&a22 + v25) < 0) {
      operator delete(*(void **)((char *)&a17 + v25));
    }
    v25 -= 32;
    if (v25 == -64) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::Boolean::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Boolean::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352F0C8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes10AttributesL3mapEv_block_invoke()
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "align");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "rowalign");
  int v3 = 3;
  std::string::basic_string[abi:nn180100]<0>(v4, "columnalign");
  int v5 = 4;
  std::string::basic_string[abi:nn180100]<0>(v6, "accent");
  int v7 = 5;
  std::string::basic_string[abi:nn180100]<0>(v8, "underaccent");
  int v9 = 6;
  std::string::basic_string[abi:nn180100]<0>(v10, "display");
  int v11 = 7;
  std::string::basic_string[abi:nn180100]<0>(v12, "displaystyle");
  int v13 = 8;
  std::string::basic_string[abi:nn180100]<0>(v14, "scriptlevel");
  int v15 = 9;
  std::string::basic_string[abi:nn180100]<0>(v16, "lspace");
  int v17 = 10;
  std::string::basic_string[abi:nn180100]<0>(v18, "rspace");
  int v19 = 11;
  std::string::basic_string[abi:nn180100]<0>(v20, "lquote");
  int v21 = 12;
  std::string::basic_string[abi:nn180100]<0>(v22, "rquote");
  int v23 = 13;
  std::string::basic_string[abi:nn180100]<0>(v24, "symmetric");
  int v25 = 14;
  std::string::basic_string[abi:nn180100]<0>(v26, "form");
  int v27 = 15;
  std::string::basic_string[abi:nn180100]<0>(v28, "stretchy");
  int v29 = 16;
  std::string::basic_string[abi:nn180100]<0>(v30, "mathvariant");
  int v31 = 17;
  std::string::basic_string[abi:nn180100]<0>(v32, "open");
  int v33 = 18;
  std::string::basic_string[abi:nn180100]<0>(v34, "close");
  int v35 = 19;
  std::string::basic_string[abi:nn180100]<0>(v36, "separators");
  int v37 = 20;
  std::string::basic_string[abi:nn180100]<0>(v38, "position");
  int v39 = 21;
  std::string::basic_string[abi:nn180100]<0>(v40, "crossout");
  int v41 = 34;
  std::string::basic_string[abi:nn180100]<0>(v42, "shift");
  int v43 = 22;
  std::string::basic_string[abi:nn180100]<0>(v44, "length");
  int v45 = 23;
  std::string::basic_string[abi:nn180100]<0>(v46, "numalign");
  int v47 = 24;
  std::string::basic_string[abi:nn180100]<0>(v48, "denomalign");
  int v49 = 25;
  std::string::basic_string[abi:nn180100]<0>(v50, "height");
  int v51 = 26;
  std::string::basic_string[abi:nn180100]<0>(v52, "depth");
  int v53 = 27;
  std::string::basic_string[abi:nn180100]<0>(v54, "width");
  int v55 = 28;
  std::string::basic_string[abi:nn180100]<0>(v56, "voffset");
  int v57 = 33;
  std::string::basic_string[abi:nn180100]<0>(v58, "decimalpoint");
  int v59 = 35;
  std::string::basic_string[abi:nn180100]<0>(v60, "linethickness");
  int v61 = 36;
  std::string::basic_string[abi:nn180100]<0>(v62, "groupalign");
  int v63 = 37;
  std::string::basic_string[abi:nn180100]<0>(v64, "edge");
  int v65 = 38;
  std::string::basic_string[abi:nn180100]<0>(v66, "largeop");
  int v67 = 39;
  std::string::basic_string[abi:nn180100]<0>(v68, "minsize");
  int v69 = 40;
  std::string::basic_string[abi:nn180100]<0>(v70, "maxsize");
  int v71 = 41;
  std::string::basic_string[abi:nn180100]<0>(v72, "scriptsizemultiplier");
  int v73 = 42;
  std::string::basic_string[abi:nn180100]<0>(v74, "scriptminsize");
  int v75 = 43;
  std::string::basic_string[abi:nn180100]<0>(v76, "movablelimits");
  int v77 = 45;
  std::string::basic_string[abi:nn180100]<0>(v78, "mathcolor");
  int v79 = 44;
  std::string::basic_string[abi:nn180100]<0>(v80, "columnspacing");
  int v81 = 46;
  std::string::basic_string[abi:nn180100]<0>(v82, "notation");
  int v83 = 47;
  operator new();
}

void sub_22352F67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 1344;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0) {
      operator delete(*(void **)(&a10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_22352F794()
{
}

uint64_t std::map<std::string const,EQKitTypes::Attributes::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Attributes::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352F808(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes8CrossoutL3mapEv_block_invoke()
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "none");
  int v1 = 0;
  std::string::basic_string[abi:nn180100]<0>(v2, "updiagonalstrike");
  int v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "downdiagonalstrike");
  int v5 = 2;
  std::string::basic_string[abi:nn180100]<0>(v6, "verticalstrike");
  int v7 = 3;
  std::string::basic_string[abi:nn180100]<0>(v8, "horizontalstrike");
  int v9 = 4;
  operator new();
}

void sub_22352F968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 151) < 0) {
      operator delete(*(void **)(&a10 + v12 + 128));
    }
    v12 -= 32;
    if (v12 == -160) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::Crossout::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Crossout::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352FA64(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes8NotationL3mapEv_block_invoke()
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "longdiv");
  int v1 = 0;
  std::string::basic_string[abi:nn180100]<0>(v2, "updiagonalstrike");
  int v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "downdiagonalstrike");
  int v5 = 2;
  std::string::basic_string[abi:nn180100]<0>(v6, "verticalstrike");
  int v7 = 3;
  std::string::basic_string[abi:nn180100]<0>(v8, "horizontalstrike");
  int v9 = 4;
  operator new();
}

void sub_22352FBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 151) < 0) {
      operator delete(*(void **)(&a10 + v12 + 128));
    }
    v12 -= 32;
    if (v12 == -160) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::Notation::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Notation::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352FCC0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes10GroupAlignL3mapEv_block_invoke()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "left");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "center");
  int v3 = 2;
  std::string::basic_string[abi:nn180100]<0>(v4, "right");
  int v5 = 3;
  std::string::basic_string[abi:nn180100]<0>(v6, "decimalpoint");
  int v7 = 4;
  operator new();
}

void sub_22352FE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 119) < 0) {
      operator delete(*(void **)(&a10 + v12 + 96));
    }
    v12 -= 32;
    if (v12 == -128) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::GroupAlign::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::GroupAlign::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22352FEF8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes4EdgeL3mapEv_block_invoke()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "left");
  int v1 = 1;
  std::string::basic_string[abi:nn180100]<0>(v2, "right");
  int v3 = 2;
  operator new();
}

void sub_22352FFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = v22;
  MEMORY[0x223CB8F20](v23, 0x1020C4062D53EE8);
  uint64_t v25 = 0;
  while (1)
  {
    if (*(&a22 + v25) < 0) {
      operator delete(*(void **)((char *)&a17 + v25));
    }
    v25 -= 32;
    if (v25 == -64) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string const,EQKitTypes::Edge::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Edge::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2235300DC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

NSArray *EQKitLayoutFilterOutSpaceLike(NSArray *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v2 = [(NSArray *)a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (!v2) {
    return a1;
  }
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = *(void *)v12;
  int v7 = a1;
  do
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)v12 != v6) {
        objc_enumerationMutation(a1);
      }
      int v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
      if ([v9 isSpaceLike])
      {
        if (!v5)
        {
          int v5 = (NSArray *)objc_msgSend(MEMORY[0x263EFF980], "arrayWithArray:", -[NSArray subarrayWithRange:](a1, "subarrayWithRange:", 0, v4 + i));
          int v7 = v5;
        }
      }
      else if (v5)
      {
        [(NSArray *)v5 addObject:v9];
      }
    }
    uint64_t v3 = [(NSArray *)a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
    v4 += i;
  }
  while (v3);
  return v7;
}

void sub_2235302FC(_Unwind_Exception *a1)
{
}

void sub_223530420(_Unwind_Exception *a1)
{
}

void sub_223530544(_Unwind_Exception *a1)
{
}

void EQKitStretchedGlyph::EQKitStretchedGlyph(EQKitStretchedGlyph *this, CTFontRef font, UniChar a3)
{
  UniChar characters = a3;
  *(void *)this = &unk_26D686158;
  *((void *)this + 1) = 0;
  *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = -1;
  *((void *)this + 3) = 0;
  if (font)
  {
    CGGlyph glyphs = 0;
    if (CTFontGetGlyphsForCharacters(font, &characters, &glyphs, 1))
    {
      CFTypeRef v5 = CFRetain(font);
      *((void *)this + 1) = v5;
      if (!v5) {
        return;
      }
LABEL_12:
      *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = glyphs;
      return;
    }
    CFStringRef v6 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], &characters, 1);
    if (v6)
    {
      CFStringRef v7 = v6;
      v12.NSUInteger length = CFStringGetLength(v6);
      v12.CFIndex location = 0;
      uint64_t v8 = CTFontCreateForString(font, v7, v12);
      if (v8)
      {
        int v9 = v8;
        if (CTFontGetGlyphsForCharacters(v8, &characters, &glyphs, 1)) {
          *((void *)this + 1) = v9;
        }
        else {
          CFRelease(v9);
        }
      }
      CFRelease(v7);
    }
    if (*((void *)this + 1)) {
      goto LABEL_12;
    }
  }
}

void EQKitStretchedGlyph::~EQKitStretchedGlyph(EQKitStretchedGlyph *this)
{
  *(void *)this = &unk_26D686158;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (EQKitPath *)*((void *)this + 3);
  if (v3)
  {
    EQKitPath::~EQKitPath(v3);
    MEMORY[0x223CB8F20]();
  }
}

{
  uint64_t vars8;

  EQKitStretchedGlyph::~EQKitStretchedGlyph(this);

  JUMPOUT(0x223CB8F20);
}

uint64_t EQKitStretchedGlyph::path(EQKitStretchedGlyph *this)
{
  uint64_t result = *((void *)this + 3);
  int v3 = *((unsigned __int16 *)this + 8);
  if (result) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0xFFFF;
  }
  if (!v4)
  {
    CFTypeRef v5 = (const __CTFont *)*((void *)this + 1);
    memset(&v6, 0, sizeof(v6));
    CGAffineTransformMakeScale(&v6, 1.0, -1.0);
    CTFontCreatePathForGlyph(v5, v3, &v6);
    operator new();
  }
  return result;
}

void sub_223530834(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

CGPath *EQKitStretchedGlyph::createScaledPathWithWidth(EQKitStretchedGlyph *this, double a2, double *a3)
{
  uint64_t v5 = EQKitStretchedGlyph::path(this);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  CFStringRef v7 = *(unsigned char *)(v5 + 120) ? (CGRect *)(v5 + 88) : (CGRect *)EQKitPath::computePathBounds((CGFloat *)v5);
  if (CGRectGetWidth(*v7) == 0.0) {
    return 0;
  }
  if (*(unsigned char *)(v6 + 120)) {
    uint64_t v8 = (CGRect *)(v6 + 88);
  }
  else {
    uint64_t v8 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
  }
  CGFloat v10 = a2 / CGRectGetWidth(*v8);
  Mutable = CGPathCreateMutable();
  memset(&v19, 0, sizeof(v19));
  CGAffineTransformMakeScale(&v19, v10, 1.0);
  EQKitPath::appendToCGPath((uint64_t *)v6, Mutable, &v19, 0);
  if (*(unsigned char *)(v6 + 120)) {
    long long v11 = (CGRect *)(v6 + 88);
  }
  else {
    long long v11 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
  }
  *a3 = CGRectGetMaxY(*v11);
  EQKitPath::EQKitPath((EQKitPath *)v17, Mutable);
  if (v18[32]) {
    CFRange v12 = (CGFloat *)v18;
  }
  else {
    CFRange v12 = EQKitPath::computePathBounds(v17);
  }
  double v13 = *v12;
  double v14 = v12[1];
  v20.size.CGFloat width = v12[2];
  v20.size.CGFloat height = v12[3];
  v20.origin.CGFloat x = *v12;
  v20.origin.CGFloat y = v14;
  *a3 = -CGRectGetMinY(v20);
  if (v13 != 0.0 || v14 != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v16, 0, sizeof(v16));
    CGAffineTransformMakeTranslation(&v16, -v13, -v14);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v17, Mutable, &v16, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v17);
  return Mutable;
}

void sub_2235309FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

CGPath *EQKitStretchedGlyph::createScaledPathWithHeight(EQKitStretchedGlyph *this, double *a2, double a3)
{
  uint64_t v5 = EQKitStretchedGlyph::path(this);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  CFStringRef v7 = *(unsigned char *)(v5 + 120) ? (CGRect *)(v5 + 88) : (CGRect *)EQKitPath::computePathBounds((CGFloat *)v5);
  if (CGRectGetHeight(*v7) == 0.0) {
    return 0;
  }
  if (*(unsigned char *)(v6 + 120)) {
    uint64_t v8 = (CGRect *)(v6 + 88);
  }
  else {
    uint64_t v8 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
  }
  CGFloat v10 = a3 / CGRectGetHeight(*v8);
  Mutable = CGPathCreateMutable();
  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeScale(&v18, 1.0, v10);
  EQKitPath::appendToCGPath((uint64_t *)v6, Mutable, &v18, 0);
  EQKitPath::EQKitPath((EQKitPath *)v16, Mutable);
  if (v17[32]) {
    long long v11 = (CGFloat *)v17;
  }
  else {
    long long v11 = EQKitPath::computePathBounds(v16);
  }
  double v12 = *v11;
  double v13 = v11[1];
  v19.size.CGFloat width = v11[2];
  v19.size.CGFloat height = v11[3];
  v19.origin.CGFloat x = *v11;
  v19.origin.CGFloat y = v13;
  *a2 = -CGRectGetMinX(v19);
  if (v12 != 0.0 || v13 != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v15, 0, sizeof(v15));
    CGAffineTransformMakeTranslation(&v15, -v12, -v13);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v16, Mutable, &v15, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v16);
  return Mutable;
}

void sub_223530B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

void sub_223530D80(_Unwind_Exception *a1)
{
}

void sub_223530ED8(_Unwind_Exception *a1)
{
}

void sub_22353130C(_Unwind_Exception *a1)
{
}

void sub_223531744(_Unwind_Exception *a1)
{
}

void sub_223531820(_Unwind_Exception *a1)
{
}

void sub_223531C8C(_Unwind_Exception *a1)
{
}

void sub_2235320B8(_Unwind_Exception *a1)
{
}

void sub_2235325A8(_Unwind_Exception *a1)
{
}

double EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = [*(id *)(a2 + 40) mutableCopy];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = [*(id *)(a2 + 48) mutableCopy];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(id *this)
{
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 15);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 9);
}

void sub_223532B14(_Unwind_Exception *a1)
{
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100]((void *)(v1 + 120));
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100]((void *)(v1 + 72));
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layout@<X0>(id *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  EQKitLayoutElementaryStack::collectRows(this);
  if ([this[5] count])
  {
    if (!this[6]) {
      this[6] = objc_alloc_init(MEMORY[0x263EFF980]);
    }
    BOOL v4 = (char *)this[7];
    id v5 = this[8];
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    std::string __p = 0;
    uint64_t v6 = &v4[(void)v5];
    if (&v4[(void)v5])
    {
      std::vector<unsigned long>::__vallocate[abi:nn180100](&__p, (unint64_t)&v4[(void)v5]);
      CFStringRef v7 = v52;
      bzero(v52, 8 * (void)v6);
      uint64_t v52 = &v7[(void)v6];
    }
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v8 = this[5];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v47 objects:v55 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v48;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v48 != v10) {
            objc_enumerationMutation(v8);
          }
          double v12 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          objc_msgSend(v12, "setFirstColumnIndex:", (char *)this[7] + objc_msgSend(v12, "alignmentShift"));
          objc_msgSend(v12, "populateMaxColumnWidths:", (char *)__p + 8 * objc_msgSend(v12, "firstColumnIndex"));
        }
        uint64_t v9 = [v8 countByEnumeratingWithState:&v47 objects:v55 count:16];
      }
      while (v9);
    }
    double v13 = (double *)__p;
    float v14 = 0.0;
    while (v13 != v52)
    {
      double v15 = *v13++;
      float v14 = v15 + v14;
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v16 = this[5];
    uint64_t v17 = [v16 countByEnumeratingWithState:&v43 objects:v54 count:16];
    int v38 = a2;
    uint64_t v18 = 0;
    if (v17)
    {
      uint64_t v19 = 0;
      CGRect v20 = 0;
      double v21 = v14;
      uint64_t v22 = *(void *)v44;
      do
      {
        uint64_t v23 = 0;
        uint64_t v39 = v19 + v17;
        uint64_t v24 = (uint64_t)v20;
        do
        {
          if (*(void *)v44 != v22) {
            objc_enumerationMutation(v16);
          }
          CGRect v20 = *(void **)(*((void *)&v43 + 1) + 8 * v23);
          if ((id)(v19 + v23) == this[2]) {
            uint64_t v18 = [this[6] count];
          }
          EQKitLayoutElementaryStack::layoutForRow(this, v20, v24, (uint64_t)&__p, (EQKit::ILayout *)&v41, v21);
          if ((id)(v19 + v23) == this[3])
          {
            uint64_t v25 = [EQKitHVSpace alloc];
            [v41 width];
            double v27 = v26;
            [v41 height];
            double v29 = v28;
            [v41 depth];
            int v31 = [(EQKitHVSpace *)v25 initWithWidth:v27 height:v29 depth:v30];
            EQKit::ILayout::ILayout((EQKit::ILayout *)v40, v31);
            EQKit::ILayout::operator=((uint64_t)&v41, (uint64_t)v40);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v40);
          }
          objc_msgSend(this[6], "addObject:", v41, v38);
          if (v19 + v23 + 1 < (unint64_t)[this[5] count])
          {
            unint64_t v32 = [EQKitVSpace alloc];
            [v20 followingSpace];
            int v33 = -[EQKitVSpace initWithHeight:depth:](v32, "initWithHeight:depth:");
            [this[6] addObject:v33];
          }
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v41);
          ++v23;
          uint64_t v24 = (uint64_t)v20;
        }
        while (v17 != v23);
        uint64_t v17 = [v16 countByEnumeratingWithState:&v43 objects:v54 count:16];
        uint64_t v19 = v39;
      }
      while (v17);
    }
    a2 = v38;
    if (this[2] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v34 = [[EQKitVBox alloc] initWithChildBoxes:this[6]];
      v40[0] = 0;
      uint64_t v35 = *((void *)*this + 75);
      id v41 = (id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)*this);
      int v42 = 2;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v35, v35 + 152, (uint64_t)&v41, v40);
      uint64_t v36 = (EQKitVBox *)EQKitLayoutManager::baselineAlignBox((EQKitLayoutManager *)*this, v34, v40[0]);
    }
    else
    {
      uint64_t v36 = [[EQKitVBox alloc] initWithChildBoxes:this[6] pivotIndex:v18];
    }
    if (__p)
    {
      uint64_t v52 = (double *)__p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v36 = 0;
  }
  return EQKit::ILayout::ILayout(a2, &v36->super.super);
}

void sub_223532F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutElementaryStack::collectRows(id *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = (void *)[this[1] schemataChildren];
  uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*this, *(void *)(*((void *)&v8 + 1) + 8 * v6), 0, (EQKit::ILayout *)v7);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v7);
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

void EQKitLayoutElementaryStack::layoutForRow(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, EQKit::ILayout *a5@<X8>, double a6@<D0>)
{
  id v12 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (([a2 spansStack] & 1) == 0)
  {
    uint64_t v13 = *(double **)a4;
    uint64_t v14 = [a2 firstColumnIndex];
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      float v16 = 0.0;
      do
      {
        double v17 = *v13++;
        float v16 = v17 + v16;
        v15 -= 8;
      }
      while (v15);
      double v18 = v16;
    }
    else
    {
      double v18 = 0.0;
    }
    uint64_t v19 = [[EQKitHSpace alloc] initWithWidth:v18];
    [v12 addObject:v19];
  }
  CGRect v20 = objc_msgSend(a2, "newBoxWithStackWidth:columnWidthIter:iterMax:previousRow:layoutManager:", *(void *)a4 + 8 * objc_msgSend(a2, "firstColumnIndex"), *(void *)(a4 + 8), a3, *a1, a6);
  [v12 addObject:v20];

  double v21 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v12];
  EQKit::ILayout::ILayout(a5, &v21->super.super);
}

void sub_22353321C(_Unwind_Exception *a1)
{
  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackGroup@<X0>(void *a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  CFStringRef v7 = a1 + 9;
  uint64_t v6 = (EQKitLayoutManager *)*a1;
  uint64_t v8 = *((void *)v6 + 75);
  uint64_t v24 = EQKitLayoutManager::currentNode(v6);
  int v25 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v8, v8 + 392, (uint64_t)&v24, &v23);
  uint64_t v9 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  uint64_t v24 = v23 + v9;
  std::deque<long>::push_back(v7, &v24);
  uint64_t v22 = 0;
  uint64_t v10 = *(void *)(*a1 + 600);
  uint64_t v24 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)*a1);
  int v25 = 22;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v10, v10 + 392, (uint64_t)&v24, &v22);
  std::deque<long>::push_back(a1 + 15, &v22);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v11 = (void *)[a2 schemataChildren];
  uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v19;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v19 != v14) {
          objc_enumerationMutation(v11);
        }
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*a1, *(void *)(*((void *)&v18 + 1) + 8 * v15), 0, (EQKit::ILayout *)v17);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v17);
        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = [v11 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v13);
  }
  --a1[14];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](v7, 1);
  --a1[20];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](a1 + 15, 1);
  return EQKit::ILayout::ILayout(a3, 0);
}

uint64_t EQKitLayoutElementaryStack::shiftPosition(EQKitLayoutElementaryStack *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 20);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1 - 1;
  uint64_t v4 = (void *)((char *)this + 72);
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 10)
                             + (((unint64_t)(*((void *)this + 13) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*((void *)this + 13) + v3) & 0x1FF));
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 16)
                             + (((unint64_t)(v2 + *((void *)this + 19) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v2 + *((void *)this + 19) - 1) & 0x1FF))
     + v5;
  *((void *)this + 14) = v3;
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100]((void *)this + 9, 1);
  std::deque<long>::push_back(v4, &v7);
  return v5;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackRow@<X0>(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v5 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v6 = (void *)[a2 schemataChildren];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)v29;
  uint64_t v9 = 0x7FFFFFFFLL;
  do
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v29 != v8) {
        objc_enumerationMutation(v6);
      }
      long long v11 = *(void **)(*((void *)&v28 + 1) + 8 * i);
      if ([v11 isNumber])
      {
        unint64_t v27 = 0;
        uint64_t v12 = *a1;
        if (v11) {
          [v11 layoutSchemata];
        }
        else {
          memset(v26, 0, 32);
        }
        uint64_t v13 = EQKitLayoutManager::layoutNumberDigits(v12, (const EQKit::Layout::Schemata *)v26, &v27);
        EQKit::Layout::Schemata::~Schemata((id *)v26);
        if (v9 == 0x7FFFFFFF)
        {
          uint64_t v14 = [v5 count];
          uint64_t v9 = v27 + v14;
        }
        [v5 addObjectsFromArray:v13];
      }
      else
      {
        EQKitLayoutManager::layoutBox(*a1, (uint64_t)v11, 0, (EQKit::ILayout *)v26);
        [v5 addObject:*(void *)&v26[0]];
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
      }
    }
    uint64_t v7 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
  }
  while (v7);
  if (v9 == 0x7FFFFFFF) {
LABEL_17:
  }
    uint64_t v9 = [v5 count];
  unint64_t v27 = 0;
  uint64_t v15 = *((void *)*a1 + 75);
  *(void *)&v26[0] = EQKitLayoutManager::currentNode(*a1);
  DWORD2(v26[0]) = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v15, v15 + 392, (uint64_t)v26, (uint64_t *)&v27);
  float v16 = [EQKitLayoutElementaryStackDigitRow alloc];
  uint64_t v17 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  unint64_t v18 = v27;
  unint64_t v19 = EQKitLayoutManager::layoutContext(*a1);
  unint64_t v21 = v19;
  uint64_t v22 = *(void *)(v19 + 80);
  if (*(unsigned char *)(v19 + 104)) {
    v20.n128_u64[0] = *(void *)(v19 + 112);
  }
  else {
    v20.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v19);
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v22 + 40))(v22, 16, v21 + 8, v20);
  uint64_t v23 = -[EQKitLayoutElementaryStackDigitRow initWithChildren:decimalPoint:position:followingSpace:](v16, "initWithChildren:decimalPoint:position:followingSpace:", v5, v9, v18 + v17);
  EQKitLayoutElementaryStack::addRow(a1, v23);

  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_223533774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  EQKit::Layout::Schemata::~Schemata((id *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutElementaryStack::addRow(void *a1, void *a2)
{
  id v4 = (id)a1[5];
  if (!v4)
  {
    id v4 = objc_alloc_init(MEMORY[0x263EFF980]);
    a1[5] = v4;
  }
  [v4 addObject:a2];
  uint64_t v5 = [a2 alignmentShift];
  if (a1[7] <= -v5) {
    uint64_t v6 = -v5;
  }
  else {
    uint64_t v6 = a1[7];
  }
  a1[7] = v6;
  uint64_t v7 = [a2 alignmentShift];
  uint64_t result = [a2 columnCount];
  uint64_t v9 = result + v7;
  if (a1[8] > result + v7) {
    uint64_t v9 = a1[8];
  }
  a1[8] = v9;
  return result;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackLine@<X0>(uint64_t a1@<X0>, EQKit::ILayout *a2@<X8>)
{
  double v4 = *(double *)(a1 + 32);
  if (v4 <= 0.0)
  {
    unint64_t v5 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
    if (*(unsigned char *)(v5 + 104)) {
      double v4 = *(double *)(v5 + 112);
    }
    else {
      double v4 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v5);
    }
  }
  uint64_t v19 = 0;
  uint64_t v6 = *(void *)(*(void *)a1 + 600);
  uint64_t v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  int v21 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v6, v6 + 392, (uint64_t)&v20, &v19);
  uint64_t v18 = 0;
  uint64_t v7 = *(void *)(*(void *)a1 + 600);
  uint64_t v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  int v21 = 23;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v7, v7 + 416, (uint64_t)&v20, &v18);
  uint64_t v8 = [EQKitLayoutElementaryStackLineRow alloc];
  uint64_t v9 = v18;
  uint64_t v10 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  uint64_t v11 = v19;
  unint64_t v12 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
  unint64_t v14 = v12;
  uint64_t v15 = *(void *)(v12 + 80);
  if (*(unsigned char *)(v12 + 104)) {
    v13.n128_u64[0] = *(void *)(v12 + 112);
  }
  else {
    v13.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v12);
  }
  float v16 = [(EQKitLayoutElementaryStackLineRow *)v8 initWithLength:v9 thickness:v11 + v10 position:v4 followingSpace:(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v15 + 40))(v15, 16, v14 + 8, v13)];
  EQKitLayoutElementaryStack::addRow((void *)a1, v16);

  return EQKit::ILayout::ILayout(a2, 0);
}

void EQKitLayoutElementaryStack::layoutStackCarries(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v21 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v41 = 0;
  int v42 = &v41;
  uint64_t v43 = 0x4812000000;
  long long v44 = __Block_byref_object_copy__0;
  long long v45 = __Block_byref_object_dispose__0;
  long long v46 = &unk_22389B221;
  long long v48 = 0;
  uint64_t v49 = 0;
  long long v47 = 0;
  uint64_t v37 = 0;
  int v38 = (double *)&v37;
  uint64_t v39 = 0x2020000000;
  uint64_t v40 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v22 = a1;
  uint64_t v5 = *((void *)*a1 + 75);
  uint64_t v28 = EQKitLayoutManager::currentNode(*a1);
  int v29 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v5, v5 + 200, (uint64_t)&v28, (char *)&v34);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v6 = (void *)[a2 schemataChildren];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v30 objects:v50 count:16];
  if (v7)
  {
    uint64_t v20 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v31 != v20) {
          objc_enumerationMutation(v6);
        }
        uint64_t v9 = *(void *)(*((void *)&v30 + 1) + 8 * i);
        uint64_t v10 = *v22;
        v24[0] = MEMORY[0x263EF8330];
        v24[1] = 3321888768;
        id v24[2] = ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke;
        void v24[3] = &unk_26D686170;
        v24[7] = v22;
        void v24[4] = v9;
        v24[5] = &v41;
        __dst = 0;
        uint64_t v27 = 0;
        std::string __p = 0;
        uint64_t v11 = v34;
        int64_t v12 = v35 - (unsigned char *)v34;
        if (v35 != v34)
        {
          std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](&__p, v12 >> 2);
          __n128 v13 = (char *)__dst;
          memmove(__dst, v11, v12);
          __dst = &v13[4 * (v12 >> 2)];
        }
        v24[6] = &v37;
        EQKitLayoutManager::layoutBox(v10, v9, 1, 0, 0, 0, (uint64_t)v24, (EQKit::ILayout *)&v28);
        objc_msgSend(v21, "addObject:", v28, v19);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v28);
        if (__p)
        {
          __dst = __p;
          operator delete(__p);
        }
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v30 objects:v50 count:16];
    }
    while (v7);
  }
  uint64_t v23 = 0;
  uint64_t v14 = *((void *)*v22 + 75);
  uint64_t v28 = EQKitLayoutManager::currentNode(*v22);
  int v29 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v14, v14 + 392, (uint64_t)&v28, &v23);
  uint64_t v15 = [EQKitLayoutElementaryStackCarryRow alloc];
  uint64_t v16 = [v21 count];
  uint64_t v17 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)v22);
  uint64_t v18 = [(EQKitLayoutElementaryStackCarryRow *)v15 initWithChildren:v21 decimalPoint:v16 position:v23 + v17 followingSpace:v42 + 6 crossouts:v38[3]];
  EQKitLayoutElementaryStack::addRow(v22, v18);

  EQKit::ILayout::ILayout(v19, 0);
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);
  if (v47)
  {
    long long v48 = v47;
    operator delete(v47);
  }
}

void sub_223533D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke(void *a1, uint64_t a2)
{
  if (a1[4] != a2) {
    return;
  }
  uint64_t v3 = (EQKitLayoutManager **)a1[7];
  std::string __p = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v4 = *((void *)*v3 + 75);
  uint64_t v43 = a2;
  int v44 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v4, v4 + 200, (uint64_t)&v43, (char *)&__p);
  uint64_t v5 = __p;
  if (__p != v41)
  {
    uint64_t v6 = *(void **)(a1[5] + 8);
    uint64_t v7 = (char *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v9 = (char *)v6[6];
      uint64_t v10 = (v7 - v9) >> 2;
      unint64_t v11 = v10 + 1;
      if (!((unint64_t)(v10 + 1) >> 62))
      {
        uint64_t v12 = v8 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>((uint64_t)(v6 + 8), v13);
          uint64_t v9 = (char *)v6[6];
          uint64_t v7 = (char *)v6[7];
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v24 = &v14[4 * v10];
        int v25 = &v14[4 * v13];
        *(_DWORD *)uint64_t v24 = *v5;
        uint64_t v18 = v24 + 4;
        while (v7 != v9)
        {
          int v26 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
LABEL_46:
        v6[6] = v24;
        v6[7] = v18;
        v6[8] = v25;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_48;
      }
      goto LABEL_56;
    }
LABEL_14:
    *(_DWORD *)uint64_t v7 = *v5;
    uint64_t v17 = v7 + 4;
    goto LABEL_15;
  }
  uint64_t v5 = (_DWORD *)a1[8];
  uint64_t v6 = *(void **)(a1[5] + 8);
  uint64_t v7 = (char *)v6[7];
  uint64_t v15 = (uint64_t)(v6 + 8);
  unint64_t v16 = v6[8];
  if (v5 != (_DWORD *)a1[9])
  {
    if ((unint64_t)v7 >= v16)
    {
      uint64_t v9 = (char *)v6[6];
      uint64_t v19 = (v7 - v9) >> 2;
      unint64_t v20 = v19 + 1;
      if (!((unint64_t)(v19 + 1) >> 62))
      {
        uint64_t v21 = v16 - (void)v9;
        if (v21 >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v15, v22);
          uint64_t v9 = (char *)v6[6];
          uint64_t v7 = (char *)v6[7];
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[4 * v19];
        int v25 = &v23[4 * v22];
        *(_DWORD *)uint64_t v24 = *v5;
        uint64_t v18 = v24 + 4;
        while (v7 != v9)
        {
          int v32 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v32;
          v24 -= 4;
        }
        goto LABEL_46;
      }
LABEL_56:
      abort();
    }
    goto LABEL_14;
  }
  if ((unint64_t)v7 >= v16)
  {
    uint64_t v9 = (char *)v6[6];
    uint64_t v27 = (v7 - v9) >> 2;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62) {
      abort();
    }
    uint64_t v29 = v16 - (void)v9;
    if (v29 >> 1 > v28) {
      unint64_t v28 = v29 >> 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      long long v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v15, v30);
      uint64_t v9 = (char *)v6[6];
      uint64_t v7 = (char *)v6[7];
    }
    else
    {
      long long v31 = 0;
    }
    uint64_t v24 = &v31[4 * v27];
    int v25 = &v31[4 * v30];
    *(_DWORD *)uint64_t v24 = 0;
    uint64_t v18 = v24 + 4;
    while (v7 != v9)
    {
      int v33 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v24 - 1) = v33;
      v24 -= 4;
    }
    goto LABEL_46;
  }
  *(_DWORD *)uint64_t v7 = 0;
  uint64_t v17 = v7 + 4;
LABEL_15:
  uint64_t v18 = v17;
LABEL_48:
  v6[7] = v18;
  uint64_t v34 = *(void *)(a1[6] + 8);
  unint64_t v35 = EQKitLayoutManager::layoutContext(*v3);
  unint64_t v37 = v35;
  uint64_t v38 = *(void *)(v35 + 80);
  if (*(unsigned char *)(v35 + 104)) {
    v36.n128_u64[0] = *(void *)(v35 + 112);
  }
  else {
    v36.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v35);
  }
  double v39 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v38 + 40))(v38, 16, v37 + 8, v36);
  if (*(double *)(v34 + 24) >= v39) {
    double v39 = *(double *)(v34 + 24);
  }
  *(double *)(*(void *)(a1[6] + 8) + 24) = v39;
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
}

void sub_223534114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  return std::vector<EQKitTypes::Crossout::Enum>::vector((void *)(a1 + 64), a2 + 64);
}

void __destroy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void EQKitLayoutElementaryStack::layoutStackCarry(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  EQKitLayoutManager::beginRow(*a1, 0, 1);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v6 = objc_msgSend(a2, "schemataChildren", 0);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        EQKitLayoutManager::layout(*a1, *(void *)(*((void *)&v11 + 1) + 8 * v10++), 0);
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
  EQKitLayoutManager::endRow(*a1, a3);
}

double EQKitLayoutElementaryStack::baselineForRowAtIndex(id *this, unint64_t a2)
{
  if (![this[6] count]) {
    return 0.0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  double v6 = 0.0;
  do
  {
    uint64_t v7 = (void *)[this[6] objectAtIndex:v4];
    if (v5 >= a2) {
      [v7 height];
    }
    else {
      [v7 vsize];
    }
    double v6 = v6 + v8;
    if ((v4 & 1) == 0 && v5 == a2) {
      break;
    }
    if ((v4 & 1) == 0 && v5 != a2) {
      ++v5;
    }
    ++v4;
  }
  while (v4 < [this[6] count]);
  return v6;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  double v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    uint64_t v9 = v7[6];
LABEL_3:
    *a4 = v9;
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      long long v11 = (void *)result;
      while (1)
      {
        uint64_t v12 = [v11 layoutStyleNode];
        if (v12)
        {
          uint64_t v14 = v12;
          int v15 = *(_DWORD *)(a3 + 8);
          long long v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13) {
            break;
          }
        }
        uint64_t result = [v11 parent];
        long long v11 = (void *)result;
        if (!result) {
          return result;
        }
      }
      uint64_t v9 = v13[6];
      goto LABEL_3;
    }
  }
  return result;
}

void std::deque<long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223534F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<EQKitTypes::Crossout::Enum>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](a1, v5 >> 2);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t EQKitLayoutTable::resolveColumnAlignment(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4, unint64_t a5)
{
  if (a4[1] - *a4 != 4 || (uint64_t result = *(unsigned int *)*a4, !result))
  {
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
    if (*a3 == v7) {
      goto LABEL_8;
    }
    unint64_t v8 = ((v7 - v6) >> 2) - 1;
    if (v8 >= a5) {
      unint64_t v8 = a5;
    }
    uint64_t result = *(unsigned int *)(v6 + 4 * v8);
    if (!result)
    {
LABEL_8:
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if (*a2 == v10) {
        return 2;
      }
      unint64_t v11 = ((v10 - v9) >> 2) - 1;
      if (v11 >= a5) {
        unint64_t v11 = a5;
      }
      uint64_t result = *(unsigned int *)(v9 + 4 * v11);
      if (!result) {
        return 2;
      }
    }
  }
  return result;
}

uint64_t EQKitLayoutTable::resolveRowAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5 = *(unsigned int **)(a4 + 24);
  if (*(void *)(a4 + 32) - (void)v5 != 4 || (uint64_t result = *v5, !result))
  {
    uint64_t v7 = *(unsigned int **)(a3 + 24);
    if (*(void *)(a3 + 32) - (void)v7 != 4 || (uint64_t result = *v7, !result))
    {
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = *(void *)(a2 + 32);
      if (v8 == v9) {
        return 4;
      }
      unint64_t v10 = ((v9 - v8) >> 2) - 1;
      if (v10 >= a5) {
        unint64_t v10 = a5;
      }
      uint64_t result = *(unsigned int *)(v8 + 4 * v10);
      if (!result) {
        return 4;
      }
    }
  }
  return result;
}

void EQKitLayoutTable::resolveAlignmentGroups(EQKitLayoutTable *this, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    for (unint64_t i = 0; i != a3; ++i)
    {
      memset(v15, 0, sizeof(v15));
      if (a2)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a2;
        do
        {
          uint64_t v9 = *(void *)(*((void *)this + 8) + v7 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(void *)(*((void *)this + 8) + v7 + 64) - v9) >> 3)) {
            EQKitLayoutRow::addToAlignmentContext((EQKitLayoutRow *)(v9 + 280 * i + 64), (EQKitGroupAlignmentContext *)v15);
          }
          v7 += 80;
          --v8;
        }
        while (v8);
        uint64_t v10 = 0;
        uint64_t v11 = a2;
        do
        {
          uint64_t v12 = *((void *)this + 8) + v10;
          uint64_t v13 = *(void *)(v12 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(void *)(v12 + 64) - v13) >> 3))
          {
            EQKitLayoutRow::overallLayoutWithAlignmentContext((EQKitLayoutRow *)(v13 + 280 * i + 64), (const EQKitGroupAlignmentContext *)v15, (EQKit::ILayout *)v14);
            EQKit::ILayout::operator=(v13 + 280 * i + 224, (uint64_t)v14);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v14);
          }
          v10 += 80;
          --v11;
        }
        while (v11);
      }
      EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)v15);
    }
  }
}

void sub_2235351C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::relationalOperatorOffset(EQKitLayoutTable *this@<X0>, EQKitBox **a2@<X1>, EQKit::ILayoutOffset *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 8);
  uint64_t v5 = *((void *)this + 9);
  if (v5 == v6)
  {
    EQKit::ILayoutOffset::ILayoutOffset(a3, 0, 0.0);
  }
  else
  {
    uint64_t v16 = a3;
    unint64_t v8 = 0;
    double v9 = 1.79769313e308;
    do
    {
      int v10 = 0;
      unint64_t v11 = 0;
      for (uint64_t i = 224; ; i += 280)
      {
        unint64_t v13 = v5 == v6 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v6 + 64) - *(void *)(v6 + 56)) >> 3);
        if (((v11 < v13) & (v10 ^ 1)) == 0) {
          break;
        }
        uint64_t v14 = *(void *)(v6 + 80 * v8 + 56) + i;
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, 0, 0.0);
        if (EQKit::ILayout::getOffsetOfKind(v14, 1, v17))
        {
          double v15 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v17, *a2);
          if (v9 == 1.79769313e308 || vabdd_f64(v15, v9) < 0.00100000005)
          {
            int v10 = 0;
            double v9 = v15;
          }
          else
          {
            int v10 = 1;
            double v9 = 1.79769313e308;
          }
        }
        else
        {
          int v10 = 0;
        }
        EQKit::ILayoutOffset::~ILayoutOffset(v17);
        ++v11;
        uint64_t v6 = *((void *)this + 8);
        uint64_t v5 = *((void *)this + 9);
      }
      ++v8;
    }
    while (!((v8 >= 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4)) | v10 & 1));
    EQKit::ILayoutOffset::ILayoutOffset(v16, 0, 0.0);
    if (v9 != 1.79769313e308)
    {
      EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, *a2, v9);
      EQKit::ILayoutOffset::operator=((uint64_t)v16, (uint64_t)v17);
      EQKit::ILayoutOffset::~ILayoutOffset(v17);
    }
  }
}

void sub_2235353F4(_Unwind_Exception *a1, uint64_t a2, id *a3, ...)
{
  va_start(va, a3);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  EQKit::ILayoutOffset::~ILayoutOffset(a3);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutTable::layoutTr@<X0>(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t result = EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    uint64_t v6 = (void *)[a2 schemataChildren];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t result = (EQKit::ILayout *)[v6 countByEnumeratingWithState:&v30 objects:v36 count:16];
    uint64_t v7 = result;
    if (result)
    {
      uint64_t v19 = *(void *)v31;
      obuint64_t j = v6;
      do
      {
        unint64_t v8 = 0;
        do
        {
          if (*(void *)v31 != v19) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v8);
          uint64_t v10 = *(void *)(a1 + 72);
          EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)v25);
          unint64_t v11 = *(void *)(v10 - 16);
          if (v11 >= *(void *)(v10 - 8))
          {
            uint64_t v12 = std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>(v10 - 24, (const EQKitLayoutTable::LayoutCell *)v25);
          }
          else
          {
            EQKitLayoutTable::LayoutCell::LayoutCell(*(EQKitLayoutTable::LayoutCell **)(v10 - 16), (const EQKitLayoutTable::LayoutCell *)v25);
            uint64_t v12 = v11 + 280;
            *(void *)(v10 - 16) = v11 + 280;
          }
          *(void *)(v10 - 16) = v12;
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v29);
          EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)&v28);
          if (*((void *)&v26 + 1))
          {
            *(void *)&long long v27 = *((void *)&v26 + 1);
            operator delete(*((void **)&v26 + 1));
          }
          if (v25[0])
          {
            v25[1] = v25[0];
            operator delete(v25[0]);
          }
          uint64_t v13 = *(void *)(*(void *)(a1 + 72) - 16);
          uint64_t v21 = 0;
          unint64_t v22 = &v21;
          uint64_t v23 = 0x2020000000;
          uint64_t v24 = 0;
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = *(unsigned __int8 *)(a1 + 88);
          v20[0] = MEMORY[0x263EF8330];
          v20[1] = 3221225472;
          v20[2] = ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke;
          void v20[3] = &unk_2646AF6D0;
          v20[5] = &v21;
          v20[6] = a1;
          v20[4] = v9;
          EQKitLayoutManager::layoutIntoRow(v14, (EQKitLayoutRow *)(v13 - 216), v9, 0, v15, (uint64_t)v20);
          long long v26 = 0u;
          long long v27 = 0u;
          *(_OWORD *)unint64_t v25 = 0u;
          uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 600);
          uint64_t v34 = v9;
          int v35 = 3;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v16, v16 + 248, (uint64_t)&v34, (char *)&v26 + 8);
          uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 600);
          uint64_t v34 = v9;
          int v35 = 4;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v17, v17 + 272, (uint64_t)&v34, (char *)v25);
          if ((void **)(v13 - 280) != v25)
          {
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 280), (char *)v25[0], (uint64_t)v25[1], ((char *)v25[1] - (char *)v25[0]) >> 2);
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 256), *((char **)&v26 + 1), v27, (uint64_t)(v27 - *((void *)&v26 + 1)) >> 2);
          }
          *(void *)(v13 - 224) = v22[3];
          if (*((void *)&v26 + 1))
          {
            *(void *)&long long v27 = *((void *)&v26 + 1);
            operator delete(*((void **)&v26 + 1));
          }
          if (v25[0])
          {
            v25[1] = v25[0];
            operator delete(v25[0]);
          }
          _Block_object_dispose(&v21, 8);
          unint64_t v8 = (EQKit::ILayout *)((char *)v8 + 1);
        }
        while (v7 != v8);
        uint64_t result = (EQKit::ILayout *)[obj countByEnumeratingWithState:&v30 objects:v36 count:16];
        uint64_t v7 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_22353571C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, EQKit::ILayout *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void EQKitLayoutTable::LayoutCell::~LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  EQKit::ILayout::~ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64));
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke(void *a1, uint64_t a2)
{
  if (a1[4] == a2)
  {
    unint64_t v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1[6] + 8));
    if ((*(unsigned char *)(v3 + 104) & 2) != 0) {
      double v4 = *(double *)(v3 + 120);
    }
    else {
      double v4 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v3);
    }
    *(double *)(*(void *)(a1[5] + 8) + 24) = v4;
  }
}

void EQKitLayoutTable::Properties::~Properties(EQKitLayoutTable::Properties *this)
{
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void EQKitLayoutTable::generateTableLayout(EQKitLayoutTable *this, NSArray *a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v3 = [(NSArray *)a2 countByEnumeratingWithState:&v53 objects:v59 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v54;
    uint64_t v43 = (char *)this + 80;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v54 != v4) {
          objc_enumerationMutation(a2);
        }
        uint64_t v6 = *(void *)(*((void *)&v53 + 1) + 8 * i);
        memset(v52, 0, sizeof(v52));
        *(_OWORD *)uint64_t v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)uint64_t v49 = 0u;
        unint64_t v7 = *((void *)this + 9);
        if (v7 >= *((void *)this + 10))
        {
          uint64_t v8 = std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>((uint64_t *)this + 8, v49);
        }
        else
        {
          std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow const&>((uint64_t)v43, *((void **)this + 9), v49);
          uint64_t v8 = v7 + 80;
          *((void *)this + 9) = v7 + 80;
        }
        *((void *)this + 9) = v8;
        EQKitLayoutManager::layoutBox(*((EQKitLayoutManager **)this + 1), v6, 0, (EQKit::ILayout *)v48);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v48);
        *(_OWORD *)std::string __p = 0u;
        long long v47 = 0u;
        *(_OWORD *)uint64_t v45 = 0u;
        uint64_t v9 = *(void *)(*((void *)this + 1) + 600);
        uint64_t v57 = v6;
        int v58 = 3;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v9, v9 + 248, (uint64_t)&v57, (char *)&__p[1]);
        uint64_t v10 = *(void *)(*((void *)this + 1) + 600);
        uint64_t v57 = v6;
        int v58 = 4;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 272, (uint64_t)&v57, (char *)v45);
        if ((void **)((char *)this + 16) != v45)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 16, (char *)v45[0], (uint64_t)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 40, (char *)__p[1], v47, (uint64_t)(v47 - (unint64_t)__p[1]) >> 2);
        }
        unint64_t v11 = (char *)(*((void *)this + 9) - 80);
        if (v11 != (char *)v45)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v11, (char *)v45[0], (uint64_t)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v11 + 24, (char *)__p[1], v47, (uint64_t)(v47 - (unint64_t)__p[1]) >> 2);
        }
        if (__p[1])
        {
          *(void **)&long long v47 = __p[1];
          operator delete(__p[1]);
        }
        if (v45[0])
        {
          v45[1] = v45[0];
          operator delete(v45[0]);
        }
        v45[0] = (char *)v52 + 8;
        std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100]((void ***)v45);
        if (v50[1])
        {
          *(void **)&long long v51 = v50[1];
          operator delete(v50[1]);
        }
        if (v49[0])
        {
          v49[1] = v49[0];
          operator delete(v49[0]);
        }
      }
      uint64_t v3 = [(NSArray *)a2 countByEnumeratingWithState:&v53 objects:v59 count:16];
    }
    while (v3);
  }
  uint64_t v13 = *((void *)this + 8);
  uint64_t v12 = *((void *)this + 9);
  unint64_t v14 = (v12 - v13) / 80;
  unint64_t v15 = 0;
  if (v12 != v13)
  {
    if (v14 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = (v12 - v13) / 80;
    }
    uint64_t v17 = (void *)(v13 + 64);
    do
    {
      if (v15 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v17 - *(v17 - 1)) >> 3)) {
        unint64_t v15 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v17 - *(v17 - 1)) >> 3);
      }
      v17 += 10;
      --v16;
    }
    while (v16);
  }
  EQKitLayoutTable::resolveAlignmentGroups(this, (v12 - v13) / 80, v15);
  v49[0] = 0;
  v49[1] = 0;
  v50[0] = 0;
  v45[0] = 0;
  std::vector<double>::resize((uint64_t)v49, v15, v45);
  if (v12 != v13)
  {
    uint64_t v18 = 0;
    if (v14 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v14;
    }
    uint64_t v20 = *((void *)this + 8);
    do
    {
      uint64_t v21 = v20 + 80 * v18;
      uint64_t v22 = *(void *)(v21 + 56);
      uint64_t v23 = *(void *)(v21 + 64);
      std::vector<EQKitLayoutTable::LayoutCell>::resize((void *)(v21 + 56), v15);
      uint64_t v20 = *((void *)this + 8);
      uint64_t v24 = v20 + 80 * v18;
      *(void *)(v24 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
      if (v15)
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        unint64_t v27 = 0xAF8AF8AF8AF8AF8BLL * ((v23 - v22) >> 3);
        do
        {
          if (v26 >= v27)
          {
            uint64_t v28 = *(void *)(v20 + 80 * v18 + 56);
            if (v28 + v25 != v24)
            {
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v28 + v25), *(char **)v24, *(void *)(v24 + 8), (uint64_t)(*(void *)(v24 + 8) - *(void *)v24) >> 2);
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v28 + v25 + 24), *(char **)(v24 + 24), *(void *)(v24 + 32), (uint64_t)(*(void *)(v24 + 32) - *(void *)(v24 + 24)) >> 2);
              uint64_t v20 = *((void *)this + 8);
            }
          }
          uint64_t v29 = *(void **)(*(void *)(v20 + 80 * v18 + 56) + v25 + 224);
          objc_msgSend(v29, "width", v43);
          double v31 = v30;
          long long v32 = (double *)v49[0];
          double v33 = *((double *)v49[0] + v26);
          if (v31 > v33)
          {
            [v29 width];
            long long v32 = (double *)v49[0];
          }
          v32[v26] = v33;
          [v29 layoutVSize];
          double v35 = v34;
          uint64_t v20 = *((void *)this + 8);
          double v36 = *(double *)(v20 + 80 * v18 + 48);
          if (v35 > v36)
          {
            [v29 layoutVSize];
            uint64_t v20 = *((void *)this + 8);
          }
          *(double *)(v20 + 80 * v18 + 4_Block_object_dispose(&STACK[0x560], 8) = v36;
          ++v26;
          v25 += 280;
        }
        while (v15 != v26);
      }
      ++v18;
    }
    while (v18 != v19);
    uint64_t v37 = 0;
    uint64_t v38 = (uint64_t *)v49[0];
    do
    {
      if (v15)
      {
        uint64_t v39 = (void *)(*(void *)(*((void *)this + 8) + 80 * v37 + 56) + 48);
        uint64_t v40 = v38;
        unint64_t v41 = v15;
        do
        {
          uint64_t v42 = *v40++;
          *uint64_t v39 = v42;
          v39 += 35;
          --v41;
        }
        while (v41);
      }
      ++v37;
    }
    while (v37 != v19);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_223535D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::LayoutRow::~LayoutRow(EQKitLayoutTable::LayoutRow *this)
{
  uint64_t v4 = (void **)((char *)this + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAF8AF8AF8AF8AF8BLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<EQKitLayoutTable::LayoutCell>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 280 * a2;
    while (v3 != v7)
    {
      v3 -= 280;
      std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void EQKitLayoutTable::generateRowBox(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v65 = (uint64_t)a5;
  EQKit::ILayout::ILayout(a5, 0);
  if (![a2 count])
  {
    int v63 = objc_msgSend(MEMORY[0x263F08690], "currentHandler", v65);
    objc_msgSend(v63, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutTable::generateRowBox(NSArray *, NSUInteger, const EQKitLength::Vector &)"), @"EQKitLayoutTable.mm", 236, @"No cell boxes.");
  }
  char v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = a1 + 16;
  double v11 = 0.0;
  uint64_t v12 = 56;
  double v13 = 0.0;
  double v14 = 0.0;
  double v15 = 0.0;
  double v16 = 0.0;
  while (1)
  {
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = *(void *)(a1 + 72) == v17
        ? 0
        : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v17 + 64) - *(void *)(v17 + 56)) >> 3);
    if (v9 >= v18) {
      break;
    }
    uint64_t v19 = (void *)[a2 objectAtIndex:v9];
    unsigned int v20 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v19, a1 + 16, *(void *)(a1 + 64) + 80 * a3, *(void *)(*(void *)(a1 + 64) + 80 * a3 + 56) + v12 - 56, a3);
    if (v20 <= 5)
    {
      if (((1 << v20) & 0x2A) != 0)
      {
        [v19 layoutVSize];
        if (v11 <= v21)
        {
          [v19 layoutVSize];
          double v11 = v22;
        }
      }
      else if (((1 << v20) & 0x14) != 0)
      {
        [v19 layoutHeight];
        if (v13 <= v23)
        {
          [v19 layoutHeight];
          double v13 = v24;
        }
        objc_msgSend(v19, "layoutDepth", v65);
        if (v14 <= v25)
        {
          [v19 layoutDepth];
          double v14 = v26;
        }
        uint64_t v27 = *(void *)(*(void *)(a1 + 64) + 80 * a3 + 56);
        double v28 = *(double *)(v27 + v12);
        double v29 = v28;
        if (v8)
        {
          double v29 = v16;
          if (v16 >= v28) {
            double v29 = *(double *)(v27 + v12);
          }
        }
        char v8 = 1;
        if (v15 <= v28) {
          double v15 = *(double *)(v27 + v12);
        }
        double v16 = v29;
      }
    }
    ++v9;
    v12 += 280;
  }
  if (v11 > 0.0 || v13 > 0.0 || v14 > 0.0)
  {
    if (v11 == 0.0)
    {
      double v11 = v13 + v14;
    }
    else if (v13 == 0.0 && v14 == 0.0)
    {
      double v13 = v11 * 0.5;
      double v14 = v11 * 0.5;
    }
    else if (v13 + v14 <= v11)
    {
      if (v13 + v14 < v11)
      {
        double v30 = (v11 - (v13 + v14)) * 0.5;
        double v13 = v13 + v30;
        double v14 = v14 + v30;
      }
    }
    else
    {
      double v11 = v13 + v14;
    }
    double v31 = v13 + v14;
    if (v11 != v31)
    {
      double v64 = (void *)[MEMORY[0x263F08690] currentHandler];
      objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutTable::generateRowBox(NSArray *, NSUInteger, const EQKitLength::Vector &)"), @"EQKitLayoutTable.mm", 299, @"vSize should be sum of vHeight and vDepth.");
      double v11 = v31;
    }
    id v32 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    double v35 = v16 + (v15 - v16) * 0.5;
    for (uint64_t i = 56; ; i += 280)
    {
      uint64_t v37 = *(void *)(a1 + 64);
      if (*(void *)(a1 + 72) == v37) {
        unint64_t v38 = 0;
      }
      else {
        unint64_t v38 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v37 + 64) - *(void *)(v37 + 56)) >> 3);
      }
      if (v34 >= v38)
      {
        if ([v32 count])
        {
          int v62 = [(EQKitCompoundBox *)[EQKitHBox alloc] initWithChildBoxes:v32];
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, &v62->super.super);
          EQKit::ILayout::operator=(v65, (uint64_t)v68);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
        }
        return;
      }
      uint64_t v39 = (void *)[a2 objectAtIndex:v34];
      int v40 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v39, v10, *(void *)(a1 + 64) + 80 * a3, *(void *)(*(void *)(a1 + 64) + 80 * a3 + 56) + i - 56, a3);
      [v39 layoutDepth];
      double v42 = v41;
      [v39 layoutVSize];
      double v44 = v13 + v42 + 0.0;
      switch(v40)
      {
        case 1:
          double v44 = v44 - v43;
          break;
        case 2:
          double v46 = *(double *)(*(void *)(*(void *)(a1 + 64) + 80 * a3 + 56) + i);
          double v45 = v35 + v44 - v13 - v42;
          goto LABEL_49;
        case 3:
          double v45 = v44 - v11 * 0.5;
          double v46 = v43 * -0.5;
LABEL_49:
          double v44 = v45 + v46;
          break;
        case 4:
          double v44 = v44 - v13 - v42;
          break;
        case 5:
          double v44 = v44 - v11;
          break;
        default:
          break;
      }
      id v47 = v44 == 0.0
          ? v39
          : [[EQKitVShift alloc] initWithBox:v39 offset:v44];
      long long v48 = v47;
      objc_msgSend(v32, "addObject:", v47, v65);

      unint64_t v49 = v34 + 1;
      uint64_t v50 = *(void *)(a1 + 64);
      if (*(void *)(a1 + 72) != v50
        && v49 < 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v50 + 64) - *(void *)(v50 + 56)) >> 3))
      {
        break;
      }
LABEL_61:
      v33 += 16;
      unint64_t v34 = v49;
    }
    uint64_t v67 = i;
    unint64_t v51 = a3;
    uint64_t v52 = v10;
    long long v53 = a2;
    id v54 = v32;
    EQKitLayoutManager::lengthForMetric(*(id **)(a1 + 8), 15);
    double v56 = v55;
    uint64_t v57 = *a4;
    uint64_t v58 = a4[1];
    if (v34 >= (v58 - *a4) >> 4)
    {
      if (v58 == v57)
      {
LABEL_60:
        id v32 = v54;
        a2 = v53;
        uint64_t v10 = v52;
        a3 = v51;
        uint64_t i = v67;
        int v61 = [[EQKitHSpace alloc] initWithWidth:v56];
        [v32 addObject:v61];

        goto LABEL_61;
      }
      unint64_t v59 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 8));
      uint64_t v60 = (double *)(v58 - 16);
    }
    else
    {
      unint64_t v59 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 8));
      uint64_t v60 = (double *)(v57 + v33);
    }
    double v56 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v60, v59, v56);
    goto LABEL_60;
  }
}

void sub_22353646C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::ILayout *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void EQKitLayoutTable::generateTableBox(EQKitLayoutTable *this@<X0>, uint64_t a2@<X8>)
{
  id v40 = objc_alloc_init(MEMORY[0x263EFF980]);
  id v39 = objc_alloc_init(MEMORY[0x263EFF980]);
  unint64_t v4 = EQKitLayoutManager::layoutContext(*((EQKitLayoutManager **)this + 1));
  if ((*(unsigned char *)(v4 + 104) & 2) != 0) {
    double v5 = *(double *)(v4 + 120);
  }
  else {
    double v5 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v4);
  }
  unint64_t v6 = EQKitLayoutManager::layoutContext(*((EQKitLayoutManager **)this + 1));
  unint64_t v8 = v6;
  uint64_t v9 = *(void *)(v6 + 80);
  if (*(unsigned char *)(v6 + 104)) {
    v7.n128_u64[0] = *(void *)(v6 + 112);
  }
  else {
    v7.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  }
  double v10 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(void *)v9 + 40))(v9, 15, v8 + 8, v7);
  id v47 = 0;
  double v11 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)&v47, 1uLL);
  *(_DWORD *)double v11 = 3;
  v11[1] = 0x3FE999999999999ALL;
  std::string __p = v11;
  id v47 = (char *)&v11[2 * v12];
  uint64_t v37 = a2;
  double v46 = v11 + 2;
  double v13 = (EQKitLayoutManager *)*((void *)this + 1);
  uint64_t v14 = *((void *)v13 + 75);
  id v43 = (id)EQKitLayoutManager::currentNode(v13);
  int v44 = 46;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(v14, v14 + 56, (uint64_t)&v43, (char *)&__p);
  if (*((void *)this + 9) != *((void *)this + 8))
  {
    unint64_t v15 = 0;
    do
    {
      double v16 = (EQKitHSpace *)objc_alloc_init(MEMORY[0x263EFF980]);
      uint64_t v17 = v16;
      uint64_t v18 = 0;
      for (unint64_t i = 0; ; ++i)
      {
        uint64_t v20 = *((void *)this + 8);
        unint64_t v21 = *((void *)this + 9) == v20
            ? 0
            : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v20 + 64) - *(void *)(v20 + 56)) >> 3);
        if (i >= v21) {
          break;
        }
        uint64_t v22 = *(void *)(v20 + 80 * v15 + 56);
        p_super = *(EQKitBox **)(v22 + v18 + 224);
        if (!p_super)
        {
          double v16 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", 0.0, v37);
          p_super = &v16->super;
          uint64_t v20 = *((void *)this + 8);
          uint64_t v22 = *(void *)(v20 + 80 * v15 + 56);
        }
        uint64_t v24 = v22 + v18;
        int v25 = EQKitLayoutTable::resolveColumnAlignment((uint64_t)v16, (uint64_t *)this + 2, (uint64_t *)(v20 + 80 * v15), (char **)(v22 + v18), i);
        double v26 = *(double *)(v24 + 48);
        EQKit::ILayout::ILayout((EQKit::ILayout *)v42, p_super);
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v42, v25, 0, (EQKit::ILayout *)&v43, v26, 0.0);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v42);
        [(EQKitHSpace *)v17 addObject:v43];
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v43);
        v18 += 280;
      }
      if ([(EQKitHSpace *)v17 count])
      {
        EQKitLayoutTable::generateRowBox((uint64_t)this, v17, v15, (uint64_t *)&__p, (EQKit::ILayout *)&v43);
        if (v43)
        {
          objc_msgSend(v40, "addObject:");
          [v39 addObject:v43];
          if (v15 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4))
          {
            uint64_t v27 = [[EQKitVSpace alloc] initWithHeight:v10 depth:0.0];
            [v40 addObject:v27];
          }
        }
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v43);
      }

      ++v15;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4));
  }
  double v28 = (EQKitOffsetVBox *)objc_msgSend(v40, "count", v37);
  double v29 = (EQKitLayoutManager *)*((void *)this + 1);
  uint64_t v30 = *((void *)v29 + 75);
  int v41 = 0;
  id v43 = (id)EQKitLayoutManager::currentNode(v29);
  int v44 = 2;
  if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v30, v30 + 152, (uint64_t)&v43, &v41) & 1) == 0)int v41 = 2; {
  if (v28)
  }
  {
    double v31 = [[EQKitVBox alloc] initWithChildBoxes:v40];
    [(EQKitBox *)v31 layoutVSize];
    double v33 = v32;
    [(EQKitBox *)v31 layoutDepth];
    double v35 = v34;

    if (v41 == 2)
    {
      double v36 = v5 + v35 + v33 * -0.5;
    }
    else if (v41 == 1)
    {
      double v36 = v35 - v33;
    }
    else if ((v41 - 3) > 1)
    {
      if (v41 == 5) {
        double v36 = v35;
      }
      else {
        double v36 = 0.0;
      }
    }
    else
    {
      double v36 = v35 + v33 * -0.5;
    }
    double v28 = [[EQKitOffsetVBox alloc] initWithChildBoxes:v40 pivotIndex:0 offset:v36];
  }
  EQKit::ILayout::ILayout(v38, &v28->super.super.super);
  EQKitLayoutTable::relationalOperatorOffset(this, (EQKitBox **)v38, (EQKit::ILayoutOffset *)&v43);
  if (v43) {
    EQKit::ILayout::setOffsetOfKind((uint64_t)v38, 1, (uint64_t)&v43);
  }

  EQKit::ILayoutOffset::~ILayoutOffset(&v43);
  if (__p)
  {
    double v46 = __p;
    operator delete(__p);
  }
}

void sub_2235369B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::layoutTable(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    unint64_t v6 = (NSArray *)[a2 schemataChildren];
    *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = 0;
    LODWORD(v15[0]) = 0;
    __n128 v7 = *(EQKitLayoutManager **)(a1 + 8);
    uint64_t v8 = *((void *)v7 + 75);
    uint64_t v13 = EQKitLayoutManager::currentNode(v7);
    int v14 = 8;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v8, v8 + 8, (uint64_t)&v13, v15))*(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x560], 8) = LODWORD(v15[0]) == 2; {
    EQKitLayoutTable::generateTableLayout((EQKitLayoutTable *)a1, v6);
    }
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    *(_OWORD *)unint64_t v15 = 0u;
    uint64_t v9 = *(EQKitLayoutManager **)(a1 + 8);
    uint64_t v10 = *((void *)v9 + 75);
    uint64_t v13 = EQKitLayoutManager::currentNode(v9);
    int v14 = 3;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 248, (uint64_t)&v13, (char *)&__p[1]);
    double v11 = *(EQKitLayoutManager **)(a1 + 8);
    uint64_t v12 = *((void *)v11 + 75);
    uint64_t v13 = EQKitLayoutManager::currentNode(v11);
    int v14 = 4;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v12, v12 + 272, (uint64_t)&v13, (char *)v15);
    if ((void **)(a1 + 16) != v15)
    {
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 16), (char *)v15[0], (uint64_t)v15[1], ((char *)v15[1] - (char *)v15[0]) >> 2);
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 40), (char *)__p[1], v17, (uint64_t)(v17 - (unint64_t)__p[1]) >> 2);
    }
    EQKitLayoutTable::generateTableBox((EQKitLayoutTable *)a1, (uint64_t)&v13);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)&v13);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v13);
    if (__p[1])
    {
      *(void **)&long long v17 = __p[1];
      operator delete(__p[1]);
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
}

void sub_223536BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void *EQKitLayoutTable::layoutPropertiesDescription(EQKitLayoutTable *this, unsigned int **a2)
{
  uint64_t v3 = (void *)[MEMORY[0x263F089D8] stringWithFormat:@"Properties col align"];
  for (unint64_t i = *a2; i != a2[1]; ++i)
  {
    unsigned int v5 = *i;
    objc_msgSend(v3, "appendFormat:", @" %d", v5);
  }
  [v3 appendString:@", row align"];
  for (uint64_t j = a2[3]; j != a2[4]; ++j)
  {
    unsigned int v7 = *j;
    objc_msgSend(v3, "appendFormat:", @" %d", v7);
  }
  return v3;
}

EQKitLayoutTable *EQKitLayoutTable::description(EQKitLayoutTable *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9) - v2;
  if (v3) {
    unint64_t v4 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 3);
  }
  else {
    unint64_t v4 = 0;
  }
  unsigned int v5 = (EQKitLayoutTable *)[MEMORY[0x263F089D8] stringWithFormat:@"Table rows %lu, columns %lu %@\n", 0xCCCCCCCCCCCCCCCDLL * (v3 >> 4), v4, EQKitLayoutTable::layoutPropertiesDescription(this, (unsigned int **)this + 2)];
  uint64_t v19 = v5;
  uint64_t v6 = *((void *)this + 8);
  if (*((void *)this + 9) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + 80 * v7;
      float v9 = *(double *)(v8 + 48);
      uint64_t v10 = (EQKitLayoutTable *)[MEMORY[0x263F089D8] stringWithFormat:@"  Row %lu height %f %@\n", v7, v9, EQKitLayoutTable::layoutPropertiesDescription(v5, (unsigned int **)v8)];
      uint64_t v11 = v10;
      unint64_t v12 = 0;
      for (uint64_t i = 48; ; i += 280)
      {
        uint64_t v14 = *((void *)this + 8);
        unint64_t v15 = *((void *)this + 9) == v14
            ? 0
            : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v14 + 64) - *(void *)(v14 + 56)) >> 3);
        if (v12 >= v15) {
          break;
        }
        uint64_t v16 = *(void *)(v14 + 80 * v7 + 56);
        float v17 = *(double *)(v16 + i);
        uint64_t v10 = (EQKitLayoutTable *)-[EQKitLayoutTable appendString:](v11, "appendString:", [MEMORY[0x263F089D8] stringWithFormat:@"    Cell %lu width %f %@\n", v12++, v17, EQKitLayoutTable::layoutPropertiesDescription(v10, (unsigned int **)(v16 + i - 48))]);
      }
      unsigned int v5 = (EQKitLayoutTable *)[(EQKitLayoutTable *)v19 appendString:v11];
      ++v7;
      uint64_t v6 = *((void *)this + 8);
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 9) - v6) >> 4));
  }
  return v19;
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), 0);
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), 0);
  return this;
}

void sub_223536EEC(_Unwind_Exception *a1)
{
  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  uint64_t v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    if (v7 + 6 == (uint64_t *)a4) {
      return 1;
    }
    float v9 = (char *)v7[6];
    uint64_t v10 = v7[7];
LABEL_4:
    std::vector<EQKitLength>::__assign_with_size[abi:nn180100]<EQKitLength*,EQKitLength*>(a4, v9, v10, (v10 - (uint64_t)v9) >> 4);
    return 1;
  }
  uint64_t result = [*(id *)a3 isAttributeDefaultInheritableFromStyle:*(unsigned int *)(a3 + 8)];
  if (result)
  {
    uint64_t result = [*(id *)a3 parent];
    if (result)
    {
      unint64_t v12 = (void *)result;
      while (1)
      {
        uint64_t v13 = [v12 layoutStyleNode];
        if (v13)
        {
          uint64_t v15 = v13;
          int v16 = *(_DWORD *)(a3 + 8);
          uint64_t v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14) {
            break;
          }
        }
        uint64_t result = [v12 parent];
        unint64_t v12 = (void *)result;
        if (!result) {
          return result;
        }
      }
      if (v14 + 6 == (uint64_t *)a4) {
        return 1;
      }
      float v9 = (char *)v14[6];
      uint64_t v10 = v14[7];
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>(uint64_t a1, const EQKitLayoutTable::LayoutCell *a2)
{
  uint64_t v2 = *(EQKitLayoutTable::LayoutCell **)a1;
  unint64_t v3 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xEA0EA0EA0EA0EALL) {
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v9 = 0xAF8AF8AF8AF8AF8BLL * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x75075075075075) {
    unint64_t v10 = 0xEA0EA0EA0EA0EALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  uint64_t v15 = (EQKitLayoutTable::LayoutCell *)&v11[280 * v3];
  float v17 = &v11[280 * v10];
  EQKitLayoutTable::LayoutCell::LayoutCell(v15, a2);
  int v16 = (char *)v15 + 280;
  std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer((EQKitLayoutTable::LayoutCell **)a1, &v14);
  uint64_t v12 = *(void *)(a1 + 8);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(&v14);
  return v12;
}

void sub_223537108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this, const EQKitLayoutTable::LayoutCell *a2)
{
  unint64_t v4 = std::vector<EQKitTypes::Crossout::Enum>::vector(this, (uint64_t)a2);
  std::vector<EQKitTypes::Crossout::Enum>::vector(v4 + 3, (uint64_t)a2 + 24);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 64));
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 224));
  return this;
}

void sub_223537180(_Unwind_Exception *a1)
{
  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(EQKitLayoutTable::LayoutCell **a1, void *a2)
{
  unsigned int v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t result = (EQKitLayoutTable::LayoutCell *)a2[1];
  while (v4 != v5)
  {
    unint64_t v4 = (const EQKitLayoutTable::LayoutCell *)((char *)v4 - 280);
    uint64_t result = EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)((char *)result - 280), v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (EQKitLayoutTable::LayoutCell *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (EQKitLayoutTable::LayoutCell *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(280 * a2);
}

void **std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<EQKitLayoutTable::LayoutCell>::clear[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 280;
    std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100](v4, i - 280);
  }
}

uint64_t std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>(uint64_t *a1, void *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v7 = 0x333333333333333;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutRow>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = &v8[80 * v2];
  uint64_t v14 = &v8[80 * v7];
  std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow const&>(v6, v12, a2);
  uint64_t v13 = v12 + 80;
  std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer(&v11);
  return v9;
}

void sub_223537404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow const&>(uint64_t a1, void *a2, void *a3)
{
  std::vector<EQKitTypes::Crossout::Enum>::vector(a2, (uint64_t)a3);
  std::vector<EQKitTypes::Crossout::Enum>::vector(a2 + 3, (uint64_t)(a3 + 3));
  uint64_t v5 = a3[6];
  a2[7] = 0;
  a2[6] = v5;
  a2[8] = 0;
  a2[9] = 0;
  return std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:nn180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>((EQKitLayoutTable::LayoutCell *)(a2 + 7), a3[7], a3[8], 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(a3[8] - a3[7]) >> 3));
}

void sub_223537498(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:nn180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(EQKitLayoutTable::LayoutCell *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:nn180100](result, a4);
    return std::vector<EQKitLayoutTable::LayoutCell>::__construct_at_end<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__construct_at_end<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(EQKitLayoutTable::LayoutCell *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t result = EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)(v4 + v7), (const EQKitLayoutTable::LayoutCell *)(a2 + v7));
      v7 += 280;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((void *)v3 + 1) = v4;
  return result;
}

void sub_2235375F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 10;
      v4 -= 80;
      std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutRow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(80 * a2);
}

__n128 std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 24) = 0;
  a2[6] = *(void *)(a3 + 48);
  a2[8] = 0;
  a2[9] = 0;
  a2[7] = 0;
  __n128 result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 7) = result;
  a2[9] = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + ++*(void *)(this + 64) = 0;
  *(void *)(a3 + 72) = 0;
  return result;
}

void **std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<EQKitLayoutTable::LayoutRow>::clear[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<EQKitLayoutTable::LayoutRow>::destroy[abi:nn180100](v4, i - 80);
  }
}

void std::vector<double>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      float v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    unint64_t v21 = v18;
    do
    {
      *(void *)unint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    double v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void **std::vector<EQKitLayoutTable::LayoutCell>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  __n128 result = (void **)(a1 + 16);
  uint64_t v5 = v6;
  uint64_t v7 = (EQKitLayoutTable::LayoutCell *)*(result - 1);
  if (0xAF8AF8AF8AF8AF8BLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280 * a2);
      uint64_t v14 = 280 * a2;
      do
      {
        __n128 result = (void **)EQKitLayoutTable::LayoutCell::LayoutCell(v7);
        uint64_t v7 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280);
        v14 -= 280;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v7;
  }
  else
  {
    unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v7 - *(void *)a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xEA0EA0EA0EA0EALL) {
      abort();
    }
    unint64_t v10 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *(void *)a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x75075075075075) {
      unint64_t v11 = 0xEA0EA0EA0EA0EALL;
    }
    else {
      unint64_t v11 = v9;
    }
    unint64_t v21 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = &v12[280 * v8];
    v18[0] = v12;
    v18[1] = v15;
    uint64_t v19 = v15;
    uint64_t v20 = &v12[280 * v11];
    uint64_t v16 = 280 * a2;
    float v17 = &v15[280 * a2];
    do
    {
      EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)v15);
      v15 += 280;
      v16 -= 280;
    }
    while (v16);
    uint64_t v19 = v17;
    std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer((EQKitLayoutTable::LayoutCell **)a1, v18);
    return std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(v18);
  }
  return result;
}

void sub_223537A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_223537CE4(_Unwind_Exception *a1)
{
}

void sub_223537F14(_Unwind_Exception *a1)
{
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, NSString *a2, const __CTFont *a3)
{
  if (!a2 || !a3) {
    return 0;
  }
  id v5 = objc_alloc(NSDictionary);
  uint64_t v6 = objc_msgSend(v5, "initWithObjectsAndKeys:", a3, *MEMORY[0x263F039A0], *MEMORY[0x263EFFB40], *MEMORY[0x263F03C68], 0);
  uint64_t v7 = [objc_alloc(MEMORY[0x263F086A0]) initWithString:a2 attributes:v6];

  return v7;
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, int a2, const __CTFont *a3)
{
  if ((a2 - 0x10000) >> 20)
  {
    uint64_t v6 = 1;
    LOWORD(v5) = a2;
  }
  else
  {
    unsigned int v5 = ((a2 + 67043328) >> 10) - 10240;
    v10[1] = a2 & 0x3FF | 0xDC00;
    uint64_t v6 = 2;
  }
  v10[0] = v5;
  uint64_t v7 = (void *)[[NSString alloc] initWithCharacters:v10 length:v6];
  uint64_t v8 = (*(uint64_t (**)(EQKit::Font::Collection *, void *, const __CTFont *))(*(void *)this + 144))(this, v7, a3);

  return v8;
}

EQKit::Font::CompositeStretch *EQKit::Font::CompositeStretch::CompositeStretch(EQKit::Font::CompositeStretch *this, CFTypeRef cf, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  *((_WORD *)this + 4) = a3;
  *((_WORD *)this + 5) = a4;
  *((_WORD *)this + 6) = a5;
  *((_WORD *)this + 7) = a6;
  *(void *)this = cf;
  if (cf) {
    CFRetain(cf);
  }
  return this;
}

{
  *((_WORD *)this + 4) = a3;
  *((_WORD *)this + 5) = a4;
  *((_WORD *)this + 6) = a5;
  *((_WORD *)this + 7) = a6;
  *(void *)this = cf;
  if (cf) {
    CFRetain(cf);
  }
  return this;
}

void *EQKit::Font::CompositeStretch::CompositeStretch(void *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

{
  *this = 0;
  this[1] = -1;
  return this;
}

EQKit::Font::CompositeStretch *EQKit::Font::CompositeStretch::CompositeStretch(EQKit::Font::CompositeStretch *this, const EQKit::Font::CompositeStretch *a2)
{
  uint64_t v4 = *(const void **)a2;
  *(void *)this = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *((void *)this + 1) = *((void *)a2 + 1);
  return this;
}

uint64_t EQKit::Font::CompositeStretch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    unsigned int v5 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v5) {
      CFRetain(v5);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a2 + 8);
  }
  return a1;
}

void EQKit::Font::CompositeStretch::~CompositeStretch(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v1;

  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void EQKit::Font::CompositeStretch::defineCompositeStretch(const __CFString *this@<X0>, const __CFString *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  int v9 = (int)a2;
  v62[1] = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = -1;
  uint64_t v60 = 0;
  int v61 = 0;
  v62[0] = 0;
  if (a2)
  {
    uint64_t v12 = (UniChar *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, 1);
    *uint64_t v12 = v9;
    uint64_t v14 = v12 + 1;
    uint64_t v60 = v12;
    v62[0] = &v12[v13];
    int v61 = v12 + 1;
    if (!a3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (!a3)
    {
LABEL_3:
      if (!a4) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  if ((unint64_t)v14 >= v62[0])
  {
    uint64_t v16 = v60;
    uint64_t v17 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3) {
      abort();
    }
    uint64_t v18 = v17 >> 1;
    if (v62[0] - (void)v60 <= (unint64_t)((v17 >> 1) + 1)) {
      uint64_t v19 = v18 + 1;
    }
    else {
      uint64_t v19 = v62[0] - (void)v60;
    }
    if (v62[0] - (void)v60 >= 0x7FFFFFFFFFFFFFFEuLL) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    if (v20)
    {
      unint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, v20);
      uint64_t v16 = v60;
      uint64_t v14 = v61;
    }
    else
    {
      unint64_t v21 = 0;
    }
    uint64_t v22 = (UniChar *)&v21[2 * v18];
    double v23 = &v21[2 * v20];
    *uint64_t v22 = a3;
    uint64_t v15 = v22 + 1;
    while (v14 != v16)
    {
      UniChar v24 = *--v14;
      *--uint64_t v22 = v24;
    }
    uint64_t v60 = v22;
    int v61 = v15;
    v62[0] = v23;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v14 = a3;
    uint64_t v15 = v14 + 1;
  }
  int v61 = v15;
  uint64_t v14 = v15;
  if (!a4)
  {
LABEL_4:
    if (!a5) {
      goto LABEL_61;
    }
    goto LABEL_43;
  }
LABEL_25:
  if ((unint64_t)v14 >= v62[0])
  {
    double v26 = v60;
    uint64_t v27 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3) {
      abort();
    }
    uint64_t v28 = v27 >> 1;
    if (v62[0] - (void)v60 <= (unint64_t)((v27 >> 1) + 1)) {
      uint64_t v29 = v28 + 1;
    }
    else {
      uint64_t v29 = v62[0] - (void)v60;
    }
    if (v62[0] - (void)v60 >= 0x7FFFFFFFFFFFFFFEuLL) {
      uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v30 = v29;
    }
    if (v30)
    {
      double v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, v30);
      double v26 = v60;
      uint64_t v14 = v61;
    }
    else
    {
      double v31 = 0;
    }
    double v32 = (UniChar *)&v31[2 * v28];
    double v33 = &v31[2 * v30];
    *double v32 = a4;
    uint64_t v25 = v32 + 1;
    while (v14 != v26)
    {
      UniChar v34 = *--v14;
      *--double v32 = v34;
    }
    uint64_t v60 = v32;
    int v61 = v25;
    v62[0] = v33;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *uint64_t v14 = a4;
    uint64_t v25 = v14 + 1;
  }
  int v61 = v25;
  uint64_t v14 = v25;
  if (a5)
  {
LABEL_43:
    if ((unint64_t)v14 >= v62[0])
    {
      double v36 = v60;
      uint64_t v37 = (char *)v14 - (char *)v60;
      if ((char *)v14 - (char *)v60 <= -3) {
        abort();
      }
      uint64_t v38 = v37 >> 1;
      if (v62[0] - (void)v60 <= (unint64_t)((v37 >> 1) + 1)) {
        uint64_t v39 = v38 + 1;
      }
      else {
        uint64_t v39 = v62[0] - (void)v60;
      }
      if (v62[0] - (void)v60 >= 0x7FFFFFFFFFFFFFFEuLL) {
        uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v40 = v39;
      }
      if (v40)
      {
        int v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, v40);
        double v36 = v60;
        uint64_t v14 = v61;
      }
      else
      {
        int v41 = 0;
      }
      double v42 = (UniChar *)&v41[2 * v38];
      id v43 = &v41[2 * v40];
      *double v42 = a5;
      double v35 = v42 + 1;
      while (v14 != v36)
      {
        UniChar v44 = *--v14;
        *--double v42 = v44;
      }
      uint64_t v60 = v42;
      int v61 = v35;
      v62[0] = v43;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      *uint64_t v14 = a5;
      double v35 = v14 + 1;
    }
    int v61 = v35;
    uint64_t v14 = v35;
  }
LABEL_61:
  if (!this) {
    goto LABEL_77;
  }
  if (v14 == v60) {
    goto LABEL_77;
  }
  double v45 = CTFontDescriptorCreateWithNameAndSize(this, 12.0);
  double v46 = CTFontCreateWithFontDescriptor(v45, 12.0, 0);
  CFRelease(v45);
  if (!v46) {
    goto LABEL_77;
  }
  MEMORY[0x270FA5388]();
  long long v48 = (CGGlyph *)((char *)&v55 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (CTFontGetGlyphsForCharacters(v46, v60, v48, v49))
  {
    if (v9)
    {
      CGGlyph v50 = *v48;
      uint64_t v51 = 1;
      if (a3) {
        goto LABEL_67;
      }
    }
    else
    {
      uint64_t v51 = 0;
      CGGlyph v50 = -1;
      if (a3)
      {
LABEL_67:
        __int16 v52 = v48[v51++];
        if (a4) {
          goto LABEL_68;
        }
        goto LABEL_72;
      }
    }
    __int16 v52 = -1;
    if (a4)
    {
LABEL_68:
      __int16 v53 = v48[v51++];
      if (a5)
      {
LABEL_69:
        __int16 v54 = v48[v51];
        goto LABEL_74;
      }
LABEL_73:
      __int16 v54 = -1;
LABEL_74:
      CGGlyph v56 = v50;
      __int16 v57 = v52;
      __int16 v58 = v53;
      __int16 v59 = v54;
      CFStringRef v55 = this;
      CFRetain(this);
      EQKit::Font::CompositeStretch::operator=((uint64_t)a6, (uint64_t)&v55);
      if (v55) {
        CFRelease(v55);
      }
      goto LABEL_76;
    }
LABEL_72:
    __int16 v53 = -1;
    if (a5) {
      goto LABEL_69;
    }
    goto LABEL_73;
  }
LABEL_76:
  CFRelease(v46);
LABEL_77:
  if (v60)
  {
    int v61 = v60;
    operator delete(v60);
  }
}

void sub_223538854(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(const void **)(v2 - 128);
  if (v4) {
    CFRelease(v4);
  }
  unsigned int v5 = *(void **)(v2 - 112);
  if (v5)
  {
    *(void *)(v2 - 104) = v5;
    operator delete(v5);
  }
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::Manager::Manager(EQKit::Font::Manager *this, NSDictionary *a2, const EQKit::Environment::Version *a3)
{
  *(void *)this = &unk_26D686288;
  *((void *)this + 2) = 0;
  uint64_t v4 = objc_opt_class();
  EQKitUtilDynamicCast(v4, (uint64_t)[(NSDictionary *)a2 objectForKey:@"STIX"]);
  operator new();
}

void sub_223538980(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x10A1C40A7C5945DLL);
  _Unwind_Resume(a1);
}

void EQKit::Font::Manager::~Manager(EQKit::Font::Manager *this)
{
  *(void *)this = &unk_26D686288;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_26D686288;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26D686288;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x223CB8F20);
}

uint64_t EQKit::Font::Manager::defaultCollection(EQKit::Font::Manager *this)
{
  return *((void *)this + 1);
}

uint64_t EQKit::Font::Manager::beginLayout(uint64_t this)
{
  return this;
}

uint64_t EQKit::Font::Manager::endLayout(EQKit::Font::Manager *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

void EQKit::Font::STIXCollection::STIXCollection(NSDictionary *this, NSDictionary *a2, const EQKit::Environment::Version *a3, const EQKitCacheLRUCounter *a4, const EQKitCacheLRUCounter *a5)
{
  Class isa = a2->super.isa;
  this->super.Class isa = a2->super.isa;
  *(NSDictionary *)((char *)this + *((void *)isa - 27)) = a2[1];
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant((EQKit::Font::STIXCollection::SizeVariant *)&this[21], a5);
}

void sub_2235391D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::Font::STIXCollection::SizeVariant *a9, uint64_t a10, char a11)
{
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v11 + 304, *v15);
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v13, *v14);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(v12);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(a9);
  _Unwind_Resume(a1);
}

void *EQKit::Font::STIXCollection::setupRequiredFontInfos(EQKit::Font::STIXCollection *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v1 = dispatch_group_create();
  uint64_t v2 = objc_opt_new();
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v25 = &unk_26D739318;
    _os_log_impl(&dword_2234CA000, &_os_log_internal, OS_LOG_TYPE_INFO, "#STIX downloading fonts: %{public}@", buf, 0xCu);
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v3 = [&unk_26D739318 countByEnumeratingWithState:&v17 objects:buf count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v18;
    uint64_t v5 = *MEMORY[0x263F03AE8];
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(&unk_26D739318);
        }
        uint64_t v7 = *(void *)(*((void *)&v17 + 1) + 8 * v6);
        uint64_t v22 = v5;
        uint64_t v23 = v7;
        CTFontDescriptorRef v21 = CTFontDescriptorCreateWithAttributes((CFDictionaryRef)[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1]);
        CFArrayRef v8 = (const __CFArray *)[MEMORY[0x263EFF8C0] arrayWithObjects:&v21 count:1];
        dispatch_group_enter(v1);
        *(void *)uint64_t v13 = 0;
        uint64_t v14 = v13;
        uint64_t v15 = 0x2020000000;
        char v16 = 0;
        progressBlock[0] = MEMORY[0x263EF8330];
        progressBlock[1] = 3221225472;
        progressBlock[2] = ___ZL22_ensureFontsDownloadedP7NSArrayIP8NSStringE_block_invoke;
        progressBlock[3] = &unk_2646AF778;
        progressBlock[4] = v7;
        progressBlock[5] = v2;
        progressBlock[6] = v1;
        progressBlock[7] = v13;
        CTFontDescriptorMatchFontDescriptorsWithProgressHandler(v8, 0, progressBlock);
        _Block_object_dispose(v13, 8);
        ++v6;
      }
      while (v3 != v6);
      uint64_t v3 = [&unk_26D739318 countByEnumeratingWithState:&v17 objects:buf count:16];
    }
    while (v3);
  }
  dispatch_time_t v9 = dispatch_time(0, 60000000000);
  if (dispatch_group_wait(v1, v9))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      EQKit::Font::STIXCollection::setupRequiredFontInfos();
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_2234CA000, &_os_log_internal, OS_LOG_TYPE_INFO, "#STIX font Download completed.", v13, 2u);
    }
    if ([v2 count] && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      EQKit::Font::STIXCollection::setupRequiredFontInfos((uint64_t)v2);
    }
  }
  *((unsigned char *)this + 376) = 1;
  _fontInfoWithName((void *)this + 2, @"STIXGeneral-Italic");
  _fontInfoWithName((void *)this + 3, @"STIXGeneral-Bold");
  _fontInfoWithName((void *)this + 4, @"STIXGeneral-BoldItalic");
  _fontInfoWithName((void *)this + 1, @"STIXGeneral-Regular");
  _fontInfoWithName((void *)this + 6, @"STIXVariants-Bold");
  _fontInfoWithName((void *)this + 5, @"STIXVariants-Regular");
  _fontInfoWithName((void *)this + 17, @"STIXIntegralsUp-Regular");
  _fontInfoWithName((void *)this + 18, @"STIXIntegralsUp-Bold");
  _fontInfoWithName((void *)this + 15, @"STIXIntegralsUpD-Regular");
  _fontInfoWithName((void *)this + 16, @"STIXIntegralsUpD-Bold");
  _fontInfoWithName((void *)this + 19, @"STIXIntegralsUpSm-Regular");
  _fontInfoWithName((void *)this + 20, @"STIXIntegralsUpSm-Bold");
  _fontInfoWithName((void *)this + 11, @"STIXIntegralsD-Regular");
  _fontInfoWithName((void *)this + 12, @"STIXIntegralsD-Bold");
  _fontInfoWithName((void *)this + 13, @"STIXIntegralsSm-Regular");
  _fontInfoWithName((void *)this + 14, @"STIXIntegralsSm-Bold");
  _fontInfoWithName((void *)this + 8, @"STIXNonUnicode-Italic");
  _fontInfoWithName((void *)this + 9, @"STIXNonUnicode-Bold");
  _fontInfoWithName((void *)this + 10, @"STIXNonUnicode-BoldItalic");
  _fontInfoWithName((void *)this + 7, @"STIXNonUnicode-Regular");
  _fontInfoWithName((void *)this + 21, @"STIXGeneral-Regular");
  _fontInfoWithName((void *)this + 22, @"STIXSizeOneSym-Regular");
  _fontInfoWithName((void *)this + 23, @"STIXSizeTwoSym-Regular");
  _fontInfoWithName((void *)this + 24, @"STIXSizeThreeSym-Regular");
  _fontInfoWithName((void *)this + 25, @"STIXSizeFourSym-Regular");
  _fontInfoWithName((void *)this + 26, @"STIXSizeFiveSym-Regular");
  _fontInfoWithName((void *)this + 28, @"STIXGeneral-Bold");
  _fontInfoWithName((void *)this + 29, @"STIXSizeOneSym-Bold");
  _fontInfoWithName((void *)this + 30, @"STIXSizeTwoSym-Bold");
  _fontInfoWithName((void *)this + 31, @"STIXSizeThreeSym-Bold");
  return _fontInfoWithName((void *)this + 32, @"STIXSizeFourSym-Bold");
}

void sub_2235397F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 328);
  if (v2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    if (*(void *)a2) {
      uint64_t v4 = (char *)[*(id *)a2 UTF8String];
    }
    else {
      uint64_t v4 = "";
    }
    std::string::basic_string[abi:nn180100]<0>(&v5, v4);
    v6[0] = v3;
    v6[1] = 13;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v5;
    }
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v2 + 48, (uint64_t)v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
  operator new();
}

void sub_223539964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2(uint64_t a1, const EQKit::StemStretch::Key *a2, _DWORD *a3)
{
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(*(uint64_t ***)(*(void *)(a1 + 32) + 392), a2, &v6);
  int v4 = (int)v6;
  if (v6) {
    int v4 = *v6;
  }
  *a3 = v4;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
  return 1;
}

void EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(uint64_t **a1@<X0>, const EQKit::StemStretch::Key *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  CFArrayRef v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    uint64_t v9 = v7[6];
    unint64_t v10 = (std::__shared_weak_count *)v7[7];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = v9;
    a3[1] = v10;
  }
  else
  {
    unint64_t v10 = 0;
  }
  pthread_rwlock_unlock(v6);
  if (!v8 && ((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v6);
    uint64_t v11 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
    if (v11)
    {
      v11[8] = **a1;
      uint64_t v12 = v11[6];
      uint64_t v13 = v11[7];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v16 = **a1;
      long long v17 = a2;
      uint64_t v14 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v17);
      uint64_t v15 = (std::__shared_weak_count *)v14[7];
      v14[6] = 0;
      v14[7] = 0;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v15);
      }
      v14[8] = v16;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 1;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *a3 = v12;
    a3[1] = v13;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v10);
    }
    pthread_rwlock_unlock(v6);
  }
}

void sub_223539BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a11);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3(int a1, EQKit::Font::SlantKey *this, double *a3)
{
  std::string v5 = (__CTFont *)EQKit::Font::SlantKey::newFont((CGFloat *)this);
  uint64_t v14 = v5;
  if (v5)
  {
    uint64_t v6 = v5;
    double v12 = 0.0;
    double v13 = 0.0;
    unsigned __int16 v11 = *((_WORD *)this + 8);
    BOOL v7 = EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(v5, &v11, &v14, &v13, &v12);
    double v9 = v12;
    double v8 = v13;
    if (!v7)
    {
      double v9 = 0.0;
      double v8 = 0.0;
    }
    *a3 = v8;
    a3[1] = v9;
    CFRelease(v6);
  }
  return 1;
}

const __CFString *EQKit::Font::SlantKey::newFont(CGFloat *this)
{
  CFStringRef result = *(const __CFString **)this;
  if (result)
  {
    int v3 = CTFontDescriptorCreateWithNameAndSize(result, this[1]);
    CTFontRef v4 = CTFontCreateWithFontDescriptor(v3, this[1], 0);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

BOOL EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(EQKit::Font::STIXCollection *this, const unsigned __int16 *a2, const __CTFont **a3, double *a4, double *a5)
{
  if (!*a3) {
    return 0;
  }
  double v8 = (EQKitPath *)EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*a2, *a3, (const __CTFont *)a3);
  if (!*a3)
  {
    double v10 = 0.0;
    if (v8) {
      goto LABEL_4;
    }
    return 0;
  }
  CGFloat SlantAngle = CTFontGetSlantAngle(*a3);
  double v10 = fabs(tan(SlantAngle * 3.14159265 / 180.0));
  if (!v8) {
    return 0;
  }
LABEL_4:
  BOOL v11 = *(void *)v8 != 0;
  if (*(void *)v8)
  {
    if (v10 == 0.0)
    {
      *a4 = 0.0;
      *a5 = 0.0;
    }
    else
    {
      EQKitPath::extractPath(v8);
      double v12 = (double *)*((void *)v8 + 1);
      double v13 = (double *)*((void *)v8 + 2);
      double v14 = 0.0;
      if (v12 == v13)
      {
        double v15 = 2.22507386e-308;
        double v16 = 1.79769313e308;
        double v17 = 1.79769313e308;
        double v19 = 2.22507386e-308;
        double v25 = 1.79769313e308;
      }
      else
      {
        double v15 = 2.22507386e-308;
        double v16 = 1.79769313e308;
        double v17 = 1.79769313e308;
        double v18 = 0.0;
        double v19 = 2.22507386e-308;
        long long v20 = (double *)*((void *)v8 + 1);
        do
        {
          double v22 = *v20;
          double v21 = v20[1];
          if (v21 > v19) {
            double v19 = v20[1];
          }
          if (v21 < v16) {
            double v16 = v20[1];
          }
          if (v22 < v17 || (v22 == v17 ? (BOOL v23 = v21 < v18) : (BOOL v23 = 0), v23))
          {
            double v18 = v20[1];
            double v17 = *v20;
          }
          if (v22 > v15 || (v22 == v15 ? (BOOL v24 = v21 < v14) : (BOOL v24 = 0), v24))
          {
            double v14 = v20[1];
            double v15 = *v20;
          }
          v20 += 2;
        }
        while (v20 != v13);
        if (v12 == v13)
        {
          double v25 = 1.79769313e308;
        }
        else
        {
          double v25 = 1.79769313e308;
          do
          {
            double v26 = v12[1];
            if (v26 <= v18)
            {
              double v27 = *v12 + (v26 - v16) * v10;
              if (v27 < v25) {
                double v25 = v27;
              }
            }
            v12 += 2;
          }
          while (v12 != v13);
        }
      }
      double v28 = v15 + (v14 - v16) * v10;
      double v29 = (v17 + v15) * 0.5;
      *a5 = (v28 + v25) * 0.5 - v29;
      *a4 = (v28 - (v19 - v16) * v10 + v25 - (v19 - v16) * v10) * 0.5 - v29;
    }
  }
  EQKitPath::~EQKitPath(v8);
  MEMORY[0x223CB8F20]();
  return v11;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = a2;
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + ++*(void *)(this + 64) = v7;
  if (*(void *)(a1 + 32) > a2) {
    *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 1;
  }
  pthread_rwlock_unlock(v6);

  return EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune((uint64_t **)a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = a2;
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + ++*(void *)(this + 64) = v7;
  if (*(void *)(a1 + 32) > a2) {
    *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 1;
  }
  pthread_rwlock_unlock(v6);

  return EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune((uint64_t **)a1);
}

void EQKit::Font::STIXCollection::STIXCollection(EQKit::Font::STIXCollection *this, NSDictionary *a2, const EQKit::Environment::Version *a3, const EQKitCacheLRUCounter *a4)
{
  *(void *)this = &unk_26D686370;
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168), a4);
}

void sub_22353A5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::Font::STIXCollection::SizeVariant *a9, uint64_t a10, char a11)
{
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v12 + 304, *v15);
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v13, *v14);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(v11);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(a9);
  _Unwind_Resume(a1);
}

void ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 328);
  if (v2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    if (*(void *)a2) {
      CTFontRef v4 = (char *)[*(id *)a2 UTF8String];
    }
    else {
      CTFontRef v4 = "";
    }
    std::string::basic_string[abi:nn180100]<0>(&v5, v4);
    v6[0] = v3;
    v6[1] = 13;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v5;
    }
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v2 + 48, (uint64_t)v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
  operator new();
}

void sub_22353A7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2(uint64_t a1, const EQKit::StemStretch::Key *a2, _DWORD *a3)
{
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(*(uint64_t ***)(*(void *)(a1 + 32) + 392), a2, &v6);
  int v4 = (int)v6;
  if (v6) {
    int v4 = *v6;
  }
  *a3 = v4;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
  return 1;
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3(int a1, EQKit::Font::SlantKey *this, double *a3)
{
  std::string v5 = (__CTFont *)EQKit::Font::SlantKey::newFont((CGFloat *)this);
  double v14 = v5;
  if (v5)
  {
    uint64_t v6 = v5;
    double v12 = 0.0;
    double v13 = 0.0;
    unsigned __int16 v11 = *((_WORD *)this + 8);
    BOOL v7 = EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(v5, &v11, &v14, &v13, &v12);
    double v9 = v12;
    double v8 = v13;
    if (!v7)
    {
      double v9 = 0.0;
      double v8 = 0.0;
    }
    *a3 = v8;
    a3[1] = v9;
    CFRelease(v6);
  }
  return 1;
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 216)) = a2[1];
  int v4 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 1);
  if (v4)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v4);
    MEMORY[0x223CB8F20]();
    *((void *)this + 1) = 0;
  }
  std::string v5 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 3);
  if (v5)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v5);
    MEMORY[0x223CB8F20]();
    *((void *)this + 3) = 0;
  }
  uint64_t v6 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 2);
  if (v6)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v6);
    MEMORY[0x223CB8F20]();
    *((void *)this + 2) = 0;
  }
  BOOL v7 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 4);
  if (v7)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v7);
    MEMORY[0x223CB8F20]();
    *((void *)this + 4) = 0;
  }
  double v8 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 7);
  if (v8)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v8);
    MEMORY[0x223CB8F20]();
    *((void *)this + 7) = 0;
  }
  double v9 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 9);
  if (v9)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v9);
    MEMORY[0x223CB8F20]();
    *((void *)this + 9) = 0;
  }
  double v10 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 8);
  if (v10)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v10);
    MEMORY[0x223CB8F20]();
    *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  unsigned __int16 v11 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 10);
  if (v11)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v11);
    MEMORY[0x223CB8F20]();
    *((void *)this + 10) = 0;
  }
  double v12 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 11);
  if (v12)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v12);
    MEMORY[0x223CB8F20]();
    *((void *)this + 11) = 0;
  }
  double v13 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 12);
  if (v13)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v13);
    MEMORY[0x223CB8F20]();
    *((void *)this + ++*((_WORD *)this + 12) = 0;
  }
  double v14 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 13);
  if (v14)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v14);
    MEMORY[0x223CB8F20]();
    *((void *)this + 13) = 0;
  }
  double v15 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 14);
  if (v15)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v15);
    MEMORY[0x223CB8F20]();
    *((void *)this + 14) = 0;
  }
  double v16 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 15);
  if (v16)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v16);
    MEMORY[0x223CB8F20]();
    *((void *)this + 15) = 0;
  }
  double v17 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 16);
  if (v17)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v17);
    MEMORY[0x223CB8F20]();
    *((void *)this + ++*(void *)(this + 16) = 0;
  }
  double v18 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 17);
  if (v18)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v18);
    MEMORY[0x223CB8F20]();
    *((void *)this + 17) = 0;
  }
  double v19 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 18);
  if (v19)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v19);
    MEMORY[0x223CB8F20]();
    *((void *)this + 1_Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  long long v20 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 19);
  if (v20)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v20);
    MEMORY[0x223CB8F20]();
    *((void *)this + 19) = 0;
  }
  double v21 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 20);
  if (v21)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v21);
    MEMORY[0x223CB8F20]();
    *((void *)this + 20) = 0;
  }
  double v22 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 5);
  if (v22)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v22);
    MEMORY[0x223CB8F20]();
    *((void *)this + 5) = 0;
  }
  BOOL v23 = (EQKit::Font::STIXCollection::FontInfo *)*((void *)this + 6);
  if (v23)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v23);
    MEMORY[0x223CB8F20]();
    *((void *)this + 6) = 0;
  }
  BOOL v24 = (char **)*((void *)this + 41);
  if (v24)
  {
    EQKit::Font::CharacterProperty::Map::~Map(v24);
    MEMORY[0x223CB8F20]();
  }
  uint64_t v25 = *((void *)this + 42);
  if (v25) {
    MEMORY[0x223CB8F20](v25, 0x1000C404B66DB26);
  }
  uint64_t v26 = *((void *)this + 43);
  if (v26)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((void *)this + 43), *(void **)(v26 + 8));
    MEMORY[0x223CB8F20](v26, 0x1020C4062D53EE8);
  }
  uint64_t v27 = *((void *)this + 44);
  if (v27)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((void *)this + 44), *(void **)(v27 + 8));
    MEMORY[0x223CB8F20](v27, 0x1020C4062D53EE8);
  }
  uint64_t v28 = *((void *)this + 45);
  if (v28)
  {
    double v29 = *(void **)v28;
    if (*(void *)v28)
    {
      *(void *)(v28 + _Block_object_dispose(&STACK[0x560], 8) = v29;
      operator delete(v29);
    }
    MEMORY[0x223CB8F20](v28, 0x10C402FEFCB83);
  }
  uint64_t v30 = *((void *)this + 46);
  if (v30)
  {
    double v31 = *(void **)v30;
    if (*(void *)v30)
    {
      *(void *)(v30 + _Block_object_dispose(&STACK[0x560], 8) = v31;
      operator delete(v31);
    }
    MEMORY[0x223CB8F20](v30, 0x10C402FEFCB83);
  }
  uint64_t v32 = *((void *)this + 49);
  if (v32)
  {
    uint64_t v33 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(v32);
    MEMORY[0x223CB8F20](v33, 0x10E0C40B27302BALL);
  }
  uint64_t v34 = *((void *)this + 48);
  if (v34)
  {
    uint64_t v35 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(v34);
    MEMORY[0x223CB8F20](v35, 0x10E0C40B27302BALL);
  }
  uint64_t v36 = *((void *)this + 50);
  if (v36)
  {
    uint64_t v37 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(v36);
    MEMORY[0x223CB8F20](v37, 0x10E0C40B27302BALL);
  }
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 304, *((const void ***)this + 39));
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 280, *((const void ***)this + 36));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 224));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168));
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x223CB8F20);
}

void virtual thunk to'EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x223CB8F20);
}

uint64_t EQKit::Font::STIXCollection::pruneCaches(uint64_t ***this)
{
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(this[49]);
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(this[48]);
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[27]);
  uint64_t v2 = this[34];

  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(v2);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(uint64_t **a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      long long v20 = 0;
      double v21 = 0;
      unint64_t v22 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6[8];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          uint64_t v19 = v5 - v7;
          double v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            double v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((void *)v8 + 4) = v19;
            double v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          double v21 = v9;
          EQKit::StemStretch::Key::~Key((const void **)v18);
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        double v10 = v20;
        unsigned __int16 v11 = v21;
      }
      else
      {
        unsigned __int16 v11 = 0;
        double v10 = 0;
      }
      unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      BOOL v23 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      double v15 = a1[8];
      unint64_t v16 = v14 - (void)v15;
      if (v14 > (unint64_t)v15)
      {
        uint64_t v17 = 40 * (void)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_22353B0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(uint64_t **a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      long long v20 = 0;
      double v21 = 0;
      unint64_t v22 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6[7];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          uint64_t v19 = v5 - v7;
          double v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            double v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((void *)v8 + 4) = v19;
            double v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          double v21 = v9;
          EQKit::StemStretch::Key::~Key((const void **)v18);
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        double v10 = v20;
        unsigned __int16 v11 = v21;
      }
      else
      {
        unsigned __int16 v11 = 0;
        double v10 = 0;
      }
      unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      BOOL v23 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      double v15 = a1[8];
      unint64_t v16 = v14 - (void)v15;
      if (v14 > (unint64_t)v15)
      {
        uint64_t v17 = 40 * (void)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_22353B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::pruneCache(uint64_t ***this)
{
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[6]);
}

uint64_t virtual thunk to'EQKit::Font::STIXCollection::pruneCaches(EQKit::Font::STIXCollection *this)
{
  return EQKit::Font::STIXCollection::pruneCaches((uint64_t ***)((char *)this + *(void *)(*(void *)this - 32)));
}

void *_fontInfoWithName(void *result, const __CFString *a2)
{
  if (!*result) {
    operator new();
  }
  return result;
}

void sub_22353B378(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1072C402C72566ELL);
  _Unwind_Resume(a1);
}

void *EQKit::Font::STIXCollection::characterPropertyLengthForFont(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4 = *(void **)(a1 + 328);
  if (v4)
  {
    v7[0] = a4;
    v7[1] = a2;
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    uint64_t v5 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)(v4 + 3), (uint64_t)v7);
    if (v4 + 4 == v5) {
      int v4 = 0;
    }
    else {
      int v4 = v5 + 8;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v4;
}

void sub_22353B428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'EQKit::Font::STIXCollection::characterPropertyLengthForFont(void *a1, int a2, uint64_t a3, int a4)
{
  return EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)a1 + *(void *)(*a1 - 40), a2, a3, a4);
}

BOOL EQKit::Font::STIXCollection::characterPropertyBoolForFont(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 328);
  if (v6)
  {
    v10[0] = a4;
    v10[1] = a2;
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    uint64_t v7 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v6, (uint64_t)v10);
    double v8 = (void *)(v6 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8 != v7) {
      return *((unsigned char *)v7 + 64) != 0;
    }
  }
  return a5;
}

void sub_22353B504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL virtual thunk to'EQKit::Font::STIXCollection::characterPropertyBoolForFont(void *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return EQKit::Font::STIXCollection::characterPropertyBoolForFont((uint64_t)a1 + *(void *)(*a1 - 48), a2, a3, a4, a5);
}

double EQKit::Font::STIXCollection::lengthMetricWithScriptAndRule(uint64_t a1, unsigned int a2, EQKit::Script::Info *a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 336);
  if (v4) {
    return EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v4 + 384 * a2), a3, a4);
  }
  else {
    return 0.0;
  }
}

double virtual thunk to'EQKit::Font::STIXCollection::lengthMetricWithScriptAndRule(void *a1, unsigned int a2, EQKit::Script::Info *a3, double a4)
{
  uint64_t v4 = *(void *)((char *)a1 + *(void *)(*a1 - 56) + 336);
  if (v4) {
    return EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v4 + 384 * a2), a3, a4);
  }
  else {
    return 0.0;
  }
}

double EQKit::Font::STIXCollection::floatMetric(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 336);
  if (v2) {
    return *(double *)(v2 + 8 * a2 + 12672);
  }
  else {
    return 0.0;
  }
}

double virtual thunk to'EQKit::Font::STIXCollection::floatMetric(void *a1, unsigned int a2)
{
  uint64_t v2 = *(void *)((char *)a1 + *(void *)(*a1 - 64) + 336);
  if (v2) {
    return *(double *)(v2 + 8 * a2 + 12672);
  }
  else {
    return 0.0;
  }
}

CTFontRef EQKit::Font::STIXCollection::newFontWithScript(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2)
{
  int v2 = *((_DWORD *)a2 + 3);
  int v3 = (CTFontRef **)((char *)this + 32);
  uint64_t v4 = (CTFontRef **)((char *)this + 8);
  if (v2 == 3) {
    uint64_t v4 = (CTFontRef **)((char *)this + 16);
  }
  if (v2 != 4) {
    int v3 = v4;
  }
  if (v2 == 2) {
    uint64_t v5 = (CTFontRef **)((char *)this + 24);
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = *v5;
  if (v6 && *v6) {
    return CTFontCreateCopyWithAttributes(*v6, *((CGFloat *)a2 + 2), 0, 0);
  }
  else {
    return 0;
  }
}

uint64_t EQKit::Font::STIXCollection::fontInfoGenericWithScript(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2)
{
  int v2 = *((_DWORD *)a2 + 3);
  int v3 = (char *)this + 32;
  uint64_t v4 = (char *)this + 8;
  if (v2 == 3) {
    uint64_t v4 = (char *)this + 16;
  }
  if (v2 != 4) {
    int v3 = v4;
  }
  if (v2 == 2) {
    uint64_t v5 = (char *)this + 24;
  }
  else {
    uint64_t v5 = v3;
  }
  return *(void *)v5;
}

CTFontRef virtual thunk to'EQKit::Font::STIXCollection::newFontWithScript(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2)
{
  return EQKit::Font::STIXCollection::newFontWithScript((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 72)), a2);
}

uint64_t EQKit::Font::STIXCollection::fontInfoGenericWithTrait(EQKit::Font::STIXCollection *this, char a2)
{
  int v2 = a2 & 3;
  int v3 = (char *)this + 24;
  uint64_t v4 = (char *)this + 8;
  if (v2 == 1) {
    uint64_t v4 = (char *)this + 16;
  }
  if (v2 != 2) {
    int v3 = v4;
  }
  if (v2 == 3) {
    uint64_t v5 = (char *)this + 32;
  }
  else {
    uint64_t v5 = v3;
  }
  return *(void *)v5;
}

uint64_t EQKit::Font::STIXCollection::fontInfoNonUnicodeWithTrait(EQKit::Font::STIXCollection *this, char a2)
{
  int v2 = a2 & 3;
  int v3 = (char *)this + 72;
  uint64_t v4 = (char *)this + 56;
  if (v2 == 1) {
    uint64_t v4 = (char *)this + 64;
  }
  if (v2 != 2) {
    int v3 = v4;
  }
  if (v2 == 3) {
    uint64_t v5 = (char *)this + 80;
  }
  else {
    uint64_t v5 = v3;
  }
  return *(void *)v5;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, const EQKit::Script::Info *a3)
{
  int v5 = *((_DWORD *)a3 + 3);
  uint64_t v6 = (const __CFCharacterSet **)((char *)this + 32);
  uint64_t v7 = 2;
  double v8 = (const __CFCharacterSet **)((char *)this + 8);
  uint64_t v9 = -1;
  if (v5 == 3)
  {
    uint64_t v9 = 0;
    double v8 = (const __CFCharacterSet **)((char *)this + 16);
  }
  BOOL v10 = v5 == 4 || v5 == 3;
  if (v5 != 4)
  {
    uint64_t v7 = v9;
    uint64_t v6 = v8;
  }
  int v11 = v5 == 2 || v10;
  if (v5 == 2) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v7;
  }
  if (v5 == 2) {
    uint64_t v13 = (const __CFCharacterSet **)((char *)this + 24);
  }
  else {
    uint64_t v13 = v6;
  }
  CFCharacterSetRef v14 = *v13;
  if (!*v13 || (CFCharacterSetRef v15 = (const __CFCharacterSet *)*((void *)v14 + 1)) == 0)
  {
    if (!v11) {
      return 0;
    }
LABEL_26:
    uint64_t v18 = 0;
    unint64_t v19 = qword_223837D38[v12];
    uint64_t v20 = (uint64_t)*(&off_2646AF798 + v12);
    double v21 = (const __CFCharacterSet **)((char *)this + 32);
    unint64_t v22 = (const __CFCharacterSet **)((char *)this + 8);
    BOOL v23 = (const __CFCharacterSet **)((char *)this + 24);
    BOOL v24 = (const __CFCharacterSet **)((char *)this + 16);
    while (1)
    {
      int v25 = *(_DWORD *)(v20 + 4 * v18) & 3;
      uint64_t v26 = v24;
      if (v25 != 1)
      {
        uint64_t v26 = v21;
        if (v25 != 3)
        {
          if (v25 == 2) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v22;
          }
        }
      }
      CFCharacterSetRef v27 = *v26;
      if (*v26)
      {
        CFCharacterSetRef result = (const __CFCharacterSet *)*((void *)v27 + 1);
        if (result)
        {
          if (CFCharacterSetIsLongCharacterMember(result, theChar)) {
            CFCharacterSetRef result = v27;
          }
          else {
            CFCharacterSetRef result = 0;
          }
        }
        if (result) {
          return result;
        }
      }
      else
      {
        CFCharacterSetRef result = 0;
      }
      if (++v18 >= v19) {
        return result;
      }
    }
  }
  int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v15, theChar);
  if (IsLongCharacterMember) {
    CFCharacterSetRef result = v14;
  }
  else {
    CFCharacterSetRef result = 0;
  }
  if (!IsLongCharacterMember && ((v11 ^ 1) & 1) == 0) {
    goto LABEL_26;
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, const EQKit::Script::Info *a3)
{
  int v5 = *((_DWORD *)a3 + 3);
  uint64_t v6 = (const __CFCharacterSet **)((char *)this + 80);
  uint64_t v7 = 2;
  double v8 = (const __CFCharacterSet **)((char *)this + 56);
  uint64_t v9 = -1;
  if (v5 == 3)
  {
    uint64_t v9 = 0;
    double v8 = (const __CFCharacterSet **)((char *)this + 64);
  }
  BOOL v10 = v5 == 4 || v5 == 3;
  if (v5 != 4)
  {
    uint64_t v7 = v9;
    uint64_t v6 = v8;
  }
  int v11 = v5 == 2 || v10;
  if (v5 == 2) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v7;
  }
  if (v5 == 2) {
    uint64_t v13 = (const __CFCharacterSet **)((char *)this + 72);
  }
  else {
    uint64_t v13 = v6;
  }
  CFCharacterSetRef v14 = *v13;
  if (!*v13 || (CFCharacterSetRef v15 = (const __CFCharacterSet *)*((void *)v14 + 1)) == 0)
  {
    if (!v11) {
      return 0;
    }
LABEL_26:
    uint64_t v18 = 0;
    unint64_t v19 = qword_223837D38[v12];
    uint64_t v20 = (uint64_t)*(&off_2646AF798 + v12);
    double v21 = (const __CFCharacterSet **)((char *)this + 80);
    unint64_t v22 = (const __CFCharacterSet **)((char *)this + 56);
    BOOL v23 = (const __CFCharacterSet **)((char *)this + 72);
    BOOL v24 = (const __CFCharacterSet **)((char *)this + 64);
    while (1)
    {
      int v25 = *(_DWORD *)(v20 + 4 * v18) & 3;
      uint64_t v26 = v24;
      if (v25 != 1)
      {
        uint64_t v26 = v21;
        if (v25 != 3)
        {
          if (v25 == 2) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v22;
          }
        }
      }
      CFCharacterSetRef v27 = *v26;
      if (*v26)
      {
        CFCharacterSetRef result = (const __CFCharacterSet *)*((void *)v27 + 1);
        if (result)
        {
          if (CFCharacterSetIsLongCharacterMember(result, theChar)) {
            CFCharacterSetRef result = v27;
          }
          else {
            CFCharacterSetRef result = 0;
          }
        }
        if (result) {
          return result;
        }
      }
      else
      {
        CFCharacterSetRef result = 0;
      }
      if (++v18 >= v19) {
        return result;
      }
    }
  }
  int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v15, theChar);
  if (IsLongCharacterMember) {
    CFCharacterSetRef result = v14;
  }
  else {
    CFCharacterSetRef result = 0;
  }
  if (!IsLongCharacterMember && ((v11 ^ 1) & 1) == 0) {
    goto LABEL_26;
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  uint64_t v4 = (char *)this + 136;
  uint64_t v3 = *((void *)this + 17);
  if (!v3) {
    return 0;
  }
  CFCharacterSetRef result = *(const __CFCharacterSet **)(v3 + 8);
  if (!result) {
    return result;
  }
  if (!CFCharacterSetIsLongCharacterMember(result, a2)) {
    return 0;
  }
  unsigned int v9 = *((_DWORD *)a3 + 3);
  BOOL v10 = v9 > 4;
  unsigned int v11 = 7u >> v9;
  unsigned int v12 = v10 | (0xBu >> v9);
  char v13 = v10 | v11;
  if (!*(void *)a3)
  {
    if (*((unsigned char *)a3 + 8) && *((unsigned char *)a3 + 10))
    {
      if (v13)
      {
        unint64_t v16 = (char *)this + 120;
        uint64_t v17 = (char *)this + 128;
      }
      else
      {
        unint64_t v16 = v4 - 48;
        uint64_t v17 = (char *)this + 96;
      }
    }
    else
    {
      if (v13)
      {
        if (v12) {
          CFCharacterSetRef v15 = v4;
        }
        else {
          CFCharacterSetRef v15 = (char *)this + 144;
        }
        goto LABEL_24;
      }
      unint64_t v16 = (char *)this + 8;
      uint64_t v17 = (char *)this + 24;
    }
    if (v12) {
      CFCharacterSetRef v15 = v16;
    }
    else {
      CFCharacterSetRef v15 = v17;
    }
    goto LABEL_24;
  }
  CFCharacterSetRef v14 = (char *)this + 152;
  if (v12)
  {
    CFCharacterSetRef v15 = (char *)this + 104;
  }
  else
  {
    CFCharacterSetRef v14 = (char *)this + 160;
    CFCharacterSetRef v15 = (char *)this + 112;
  }
  if (v13) {
    CFCharacterSetRef v15 = v14;
  }
LABEL_24:
  uint64_t v18 = *(void *)v15;
  if (!*(void *)v15) {
    return 0;
  }
  CFCharacterSetRef result = *(const __CFCharacterSet **)(v18 + 8);
  if (result)
  {
    if (CFCharacterSetIsLongCharacterMember(result, a2)) {
      return (const __CFCharacterSet *)v18;
    }
    else {
      return 0;
    }
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, uint64_t a3, const EQKit::Script::Info *a4)
{
  if (a3 == 1) {
    goto LABEL_29;
  }
  if (!*((_DWORD *)a4 + 6))
  {
    uint64_t v15 = *((void *)this + 45);
    if (v15)
    {
      unint64_t v16 = *(_DWORD **)v15;
      uint64_t v17 = *(_DWORD **)(v15 + 8);
      if (v17 != v16)
      {
        unint64_t v18 = v17 - v16;
        do
        {
          unint64_t v19 = v18 >> 1;
          uint64_t v20 = &v16[v18 >> 1];
          UTF32Char v22 = *v20;
          double v21 = v20 + 1;
          v18 += ~(v18 >> 1);
          if (v22 < theChar) {
            unint64_t v16 = v21;
          }
          else {
            unint64_t v18 = v19;
          }
        }
        while (v18);
      }
      if (v16 != v17 && *v16 == theChar)
      {
LABEL_29:
        int v6 = *((_DWORD *)a4 + 3);
        if (v6 == 4 || v6 == 2)
        {
          unsigned int v9 = (char *)this + 48;
          uint64_t v8 = *((void *)this + 6);
          if (v8)
          {
            CFCharacterSetRef v10 = *(const __CFCharacterSet **)(v8 + 8);
            if (v10)
            {
              if (CFCharacterSetIsLongCharacterMember(v10, theChar)) {
                return *(const __CFCharacterSet **)v9;
              }
            }
          }
        }
        uint64_t v13 = *((void *)this + 5);
        unsigned int v12 = (char *)this + 40;
        uint64_t v11 = v13;
        if (v13)
        {
          CFCharacterSetRef result = *(const __CFCharacterSet **)(v11 + 8);
          if (!result) {
            return result;
          }
          unsigned int v9 = v12;
          if (CFCharacterSetIsLongCharacterMember(result, theChar)) {
            return *(const __CFCharacterSet **)v9;
          }
        }
      }
    }
  }
  return 0;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, const EQKit::Script::Info *a3)
{
  if (*((unsigned char *)a3 + 10)) {
    BOOL v3 = *((unsigned char *)a3 + 8) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  unsigned int v5 = (*((_DWORD *)a3 + 3) - 2) & 0xFFFFFFFD;
  int v6 = (char *)this + 224;
  if (v5)
  {
    int v6 = (char *)this + 168;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (char *)this + 168;
  }
  CFCharacterSetRef v8 = (const __CFCharacterSet *)*((void *)v6 + 1);
  if (!v8 || (CFCharacterSetRef v9 = (const __CFCharacterSet *)*((void *)v8 + 1)) == 0)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_19;
  }
  int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v9, theChar);
  if (IsLongCharacterMember) {
    CFCharacterSetRef result = v8;
  }
  else {
    CFCharacterSetRef result = 0;
  }
  if (v5) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = IsLongCharacterMember == 0;
  }
  if (v12)
  {
LABEL_19:
    uint64_t v13 = *((void *)v7 + 1);
    if (v13)
    {
      CFCharacterSetRef result = *(const __CFCharacterSet **)(v13 + 8);
      if (result)
      {
        if (CFCharacterSetIsLongCharacterMember(result, theChar)) {
          return (const __CFCharacterSet *)v13;
        }
        else {
          return 0;
        }
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::setupSizeVariantForScript(uint64_t result, void *a2, void *a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a4 + 12) - 2;
  BOOL v5 = (v4 & 0xFFFFFFFD) == 0;
  if ((v4 & 0xFFFFFFFD) != 0) {
    uint64_t v6 = result + 168;
  }
  else {
    uint64_t v6 = result + 224;
  }
  *a2 = v6;
  if (v5) {
    uint64_t v7 = result + 168;
  }
  else {
    uint64_t v7 = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t EQKit::Font::STIXCollection::fixOutOfSequenceUnicodeChar(EQKit::Font::STIXCollection *this, uint64_t a2)
{
  if ((int)a2 > 120075)
  {
    if ((int)a2 <= 120121)
    {
      switch(a2)
      {
        case 0x1D50C:
          return 8465;
        case 0x1D515:
          return 8476;
        case 0x1D51D:
          return 8488;
        default:
          return a2;
      }
    }
    else
    {
      switch((int)a2)
      {
        case 120127:
          return 8461;
        case 120128:
        case 120129:
        case 120130:
        case 120131:
        case 120132:
        case 120134:
          return a2;
        case 120133:
          return 8469;
        case 120135:
          return 8473;
        case 120136:
          return 8474;
        case 120137:
          return 8477;
        default:
          if (a2 == 120122)
          {
            uint64_t result = 8450;
          }
          else
          {
            if (a2 != 120145) {
              return a2;
            }
            uint64_t result = 8484;
          }
          break;
      }
    }
  }
  else
  {
    uint64_t result = 8492;
    switch((int)a2)
    {
      case 119965:
        return result;
      case 119966:
      case 119967:
      case 119970:
      case 119973:
      case 119974:
      case 119977:
      case 119978:
      case 119979:
      case 119980:
        return a2;
      case 119968:
        return 8496;
      case 119969:
        return 8497;
      case 119971:
        return 8459;
      case 119972:
        return 8464;
      case 119975:
        return 8466;
      case 119976:
        return 8499;
      case 119981:
        return 8475;
      default:
        if (a2 == 120070)
        {
          uint64_t result = 8493;
        }
        else
        {
          if (a2 != 120075) {
            return a2;
          }
          uint64_t result = 8460;
        }
        break;
    }
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::lookupChar(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3, int a4)
{
  if (a2 == 39)
  {
    if (!*((_DWORD *)a3 + 6)) {
      return 8242;
    }
  }
  else if (a2 == 45)
  {
    if (*((_DWORD *)a3 + 6) == 1) {
      return 8208;
    }
    else {
      return 8722;
    }
  }
  if ((a2 - 65) >= 0x1A && (a2 - 97) > 0x19)
  {
    if ((a2 - 48) <= 9)
    {
      int v5 = *((_DWORD *)a3 + 3) - 5;
      if (v5 <= 9)
      {
        uint64_t v4 = a2;
        if ((0x3E1u >> v5)) {
          return (dword_223837D50[v5] + a2 - 48);
        }
        return v4;
      }
      return a2;
    }
    uint64_t v8 = *((void *)this + 43);
    if (v8)
    {
      uint64_t v11 = *(void *)(v8 + 8);
      uint64_t v9 = v8 + 8;
      uint64_t v10 = v11;
      uint64_t v4 = a2;
      if (v11)
      {
        uint64_t v12 = v9;
        do
        {
          unsigned int v13 = *(_DWORD *)(v10 + 28);
          BOOL v14 = v13 >= a2;
          if (v13 >= a2) {
            uint64_t v15 = (uint64_t *)v10;
          }
          else {
            uint64_t v15 = (uint64_t *)(v10 + 8);
          }
          if (v14) {
            uint64_t v12 = v10;
          }
          uint64_t v10 = *v15;
        }
        while (*v15);
        uint64_t v4 = a2;
        if (v12 != v9)
        {
          uint64_t v4 = a2;
          if (*(_DWORD *)(v12 + 28) <= a2) {
            uint64_t v4 = *(unsigned int *)(v12 + 32);
          }
        }
      }
    }
    else
    {
      uint64_t v4 = a2;
      if (!*((void *)this + 44)) {
        return a2;
      }
    }
    if (!a4) {
      return v4;
    }
    uint64_t v16 = *((void *)this + 44);
    if (!v16 || v4 != a2) {
      return v4;
    }
    uint64_t v19 = *(void *)(v16 + 8);
    uint64_t v18 = v16 + 8;
    uint64_t v17 = v19;
    if (v19)
    {
      uint64_t v20 = v18;
      do
      {
        unsigned int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 >= a2;
        if (v21 >= a2) {
          BOOL v23 = (uint64_t *)v17;
        }
        else {
          BOOL v23 = (uint64_t *)(v17 + 8);
        }
        if (v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 != v18)
      {
        uint64_t v4 = a2;
        if (*(_DWORD *)(v20 + 28) <= a2) {
          return *(unsigned int *)(v20 + 32);
        }
        return v4;
      }
    }
    return a2;
  }
  switch(*((_DWORD *)a3 + 3))
  {
    case 5:
      int v6 = 120120;
      int v7 = 120146;
      break;
    case 6:
      int v6 = 120172;
      int v7 = 120198;
      break;
    case 7:
      int v6 = 119964;
      int v7 = 119990;
      break;
    case 8:
      int v6 = 120016;
      int v7 = 120042;
      break;
    case 9:
      int v6 = 120068;
      int v7 = 120094;
      break;
    case 0xA:
      int v7 = 120250;
      int v6 = 120224;
      break;
    case 0xB:
      int v7 = 120250;
      int v6 = 120276;
      break;
    case 0xC:
      int v6 = 120328;
      int v7 = 120354;
      break;
    case 0xD:
      int v6 = 120380;
      int v7 = 120406;
      break;
    case 0xE:
      int v6 = 120432;
      int v7 = 120458;
      break;
    default:
      return a2;
  }
  if ((a2 - 65) >= 0x1A)
  {
    int v25 = -97;
  }
  else
  {
    int v7 = v6;
    int v25 = -65;
  }
  return EQKit::Font::STIXCollection::fixOutOfSequenceUnicodeChar(this, (v25 + a2 + v7));
}

const __CFCharacterSet *EQKit::Font::STIXCollection::lookupFontForCh(const __CFCharacterSet **this, UTF32Char a2, const EQKit::Script::Info *a3, FontInfo *a4)
{
  return EQKit::Font::STIXCollection::lookupFontForCh(this, a2, 0, a3, a4);
}

const __CFCharacterSet *EQKit::Font::STIXCollection::lookupFontForCh(const __CFCharacterSet **this, UTF32Char a2, uint64_t a3, const EQKit::Script::Info *a4, const FontInfo *a5)
{
  CFCharacterSetRef result = EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result) {
    return result;
  }
  CFCharacterSetRef result = EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result) {
    return result;
  }
  CFCharacterSetRef result = EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript((EQKit::Font::STIXCollection *)this, a2, a3, a4);
  if (!a5 || result)
  {
    if (result) {
      return result;
    }
  }
  else
  {
    CFCharacterSetRef v11 = (const __CFCharacterSet *)a5[1];
    if (v11)
    {
      int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v11, a2);
      CFCharacterSetRef result = (const __CFCharacterSet *)a5;
      if (IsLongCharacterMember) {
        return result;
      }
    }
  }
  CFCharacterSetRef result = EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result) {
    return result;
  }
  CFCharacterSetRef v13 = this[22];
  if (!v13) {
    goto LABEL_15;
  }
  CFCharacterSetRef result = (const __CFCharacterSet *)*((void *)v13 + 1);
  if (result)
  {
    if (CFCharacterSetIsLongCharacterMember(result, a2))
    {
      CFCharacterSetRef result = this[22];
      goto LABEL_16;
    }
LABEL_15:
    CFCharacterSetRef result = 0;
  }
LABEL_16:
  if ((a2 - 57344) >> 11 <= 2 && !result)
  {
    return EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontNameForCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  UTF32Char v4 = a2;
  UTF32Char v6 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  CFCharacterSetRef result = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v6, 0, a3, 0);
  if (result) {
    return (const __CFCharacterSet *)((char *)result + 16);
  }
  if (v6 == v4) {
    return 0;
  }
  CFCharacterSetRef result = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v4, 0, a3, 0);
  if (result) {
    return (const __CFCharacterSet *)((char *)result + 16);
  }
  return result;
}

const __CFCharacterSet *virtual thunk to'EQKit::Font::STIXCollection::fontNameForCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::fontNameForCharacterWithScript((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 80)), a2, a3);
}

BOOL EQKit::Font::STIXCollection::characterNeedsSpecialSpacing(EQKit::Font::STIXCollection *this, int a2, const EQKit::Script::Info *a3, const FontInfo *a4, double *a5, double *a6)
{
  if (a2 == 8242)
  {
    *a5 = *((double *)a3 + 2) * 0.0;
    *a6 = *((double *)a3 + 2) * -0.111111111;
  }
  return a2 == 8242;
}

uint64_t EQKit::Font::STIXCollection::newAttributedStringWithScript(EQKit::Font::STIXCollection *this, NSString *a2, const EQKit::Script::Info *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  NSUInteger v4 = [(NSString *)a2 length];
  NSUInteger v5 = v4;
  uint64_t v6 = 4 * v4;
  if (v4 >= 0x40)
  {
    int v7 = (unsigned int *)malloc_type_malloc(4 * v4, 0x100004052888210uLL);
    if (!v7) {
      return 0;
    }
  }
  else
  {
    int v7 = (unsigned int *)v41;
  }
  unint64_t v40 = 0;
  if (-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, v6, &v40, 2617245952, 0, 0, v5, 0))
  {
    unint64_t v8 = v40 >> 2;
    uint64_t v39 = 0;
    int v9 = *((_DWORD *)a3 + 3);
    uint64_t v10 = (FontInfo **)((char *)this + 32);
    CFCharacterSetRef v11 = (FontInfo **)((char *)this + 8);
    if (v9 == 3) {
      CFCharacterSetRef v11 = (FontInfo **)((char *)this + 16);
    }
    if (v9 != 4) {
      uint64_t v10 = v11;
    }
    if (v9 == 2) {
      uint64_t v12 = (FontInfo **)((char *)this + 24);
    }
    else {
      uint64_t v12 = v10;
    }
    unint64_t v33 = v40;
    if (v40 < 4)
    {
      CFCharacterSetRef v13 = 0;
      char v35 = 0;
      NSUInteger v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
      if (v14 || v33 < 4 || !v13 || (v35 & 1) != 0)
      {
        uint64_t v18 = 0;
        if (v14 == 0x7FFFFFFFFFFFFFFFLL || v8 <= v14 || !v13) {
          goto LABEL_86;
        }
        v47.CFIndex location = v14;
        v47.NSUInteger length = v8 - v14;
        _updateAttributedString((id *)&v39, v7, v47, v13, *((CGFloat *)a3 + 2));
      }
      else if (*v13)
      {
        CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(*v13, *((CGFloat *)a3 + 2), 0, 0);
        if (CopyWithAttributes)
        {
          id v16 = objc_alloc(NSDictionary);
          uint64_t v17 = objc_msgSend(v16, "initWithObjectsAndKeys:", CopyWithAttributes, *MEMORY[0x263F039A0], *MEMORY[0x263EFFB40], *MEMORY[0x263F03C68], 0);
          uint64_t v18 = [objc_alloc(MEMORY[0x263F086A0]) initWithString:a2 attributes:v17];
          CFRelease(CopyWithAttributes);

          goto LABEL_86;
        }
      }
      uint64_t v18 = 0;
LABEL_86:
      double v31 = v39;
      if (!v18 && v39) {
        uint64_t v18 = [(NSMutableAttributedString *)v39 copy];
      }

      goto LABEL_90;
    }
    char v35 = 0;
    uint64_t v19 = 0;
    NSUInteger v20 = 0;
    uint64_t v37 = *v12;
    NSUInteger v21 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v36 = v40 >> 2;
    while (1)
    {
      uint64_t v22 = v7[v20];
      NSUInteger v23 = v20 + 1;
      uint64_t v24 = v20 + 1 >= v8 ? 0 : EQKit::Unicode::variationSelector((EQKit::Unicode *)v7[v23]);
      UTF32Char v25 = EQKit::Font::STIXCollection::lookupChar(this, v22, a3, 0);
      CFCharacterSetRef v26 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v25, v24, a3, v37);
      CFCharacterSetRef v13 = (CTFontRef *)v26;
      if (!v26 || v22 == v25)
      {
        if (!v26)
        {
          CFCharacterSetRef v13 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v22, 0, a3, v37);
          if (!v13)
          {
            double v28 = 1.0;
            switch((int)v22)
            {
              case 8192:
              case 8194:
                goto LABEL_72;
              case 8193:
              case 8195:
              case 8199:
              case 8200:
                goto LABEL_67;
              case 8196:
                double v28 = 0.333333343;
                goto LABEL_72;
              case 8197:
                double v28 = 0.25;
                goto LABEL_72;
              case 8198:
              case 8201:
                double v28 = 0.166666657;
                goto LABEL_72;
              case 8202:
                double v28 = 0.0833333284;
                goto LABEL_72;
              default:
                if (v22 == 8287)
                {
                  double v28 = 0.222222224;
LABEL_72:
                  if (!v39) {
                    uint64_t v39 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x263F089B8]);
                  }
                  +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v28 * *((double *)a3 + 2));
                  if (!v20) {
                    goto LABEL_78;
                  }
                }
                else
                {
LABEL_67:
                  if (*((void *)a3 + 4)) {
                    operator new();
                  }
                  if (!v20) {
                    goto LABEL_78;
                  }
                }
                if (v21 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  CFCharacterSetRef v13 = 0;
                  NSUInteger v30 = v20 - v21;
                  goto LABEL_51;
                }
LABEL_78:
                CFCharacterSetRef v13 = 0;
                if (!v24) {
                  NSUInteger v23 = v20;
                }
                break;
            }
            goto LABEL_60;
          }
        }
      }
      else
      {
        v7[v20] = v25;
        char v35 = 1;
      }
      if (v25 == 8242) {
        break;
      }
      if (v21 == 0x7FFFFFFFFFFFFFFFLL)
      {
        NSUInteger v14 = v20;
        if (!v24) {
          goto LABEL_62;
        }
      }
      else
      {
        if (v19 != v13)
        {
          NSUInteger v30 = v20 - v21;
          NSUInteger v14 = v20;
          goto LABEL_54;
        }
        NSUInteger v14 = v21;
        CFCharacterSetRef v13 = v19;
        if (!v24) {
          goto LABEL_62;
        }
      }
LABEL_58:
      if (v14 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v46.NSUInteger length = v23 - v14;
        v46.CFIndex location = v14;
        _updateAttributedString((id *)&v39, v7, v46, v13, *((CGFloat *)a3 + 2));
        CFCharacterSetRef v13 = 0;
      }
LABEL_60:
      NSUInteger v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_63:
      NSUInteger v20 = v23 + 1;
      NSUInteger v21 = v14;
      uint64_t v19 = v13;
      unint64_t v8 = v36;
      if (v23 + 1 >= v36) {
        goto LABEL_14;
      }
    }
    double v29 = *((double *)a3 + 2);
    if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v19 = 0;
    }
    else
    {
      NSUInteger v30 = v20 - v21;
      if (!v19) {
        goto LABEL_44;
      }
      v43.CFIndex location = v21;
      v43.NSUInteger length = v20 - v21;
      _updateAttributedString((id *)&v39, v7, v43, v19, *((CGFloat *)a3 + 2));
    }
    NSUInteger v30 = 0;
    NSUInteger v21 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_44:
    if (!v39) {
      uint64_t v39 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x263F089B8]);
    }
    if (v29 * 0.0 != 0.0) {
      +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v29 * 0.0);
    }
    v44.CFIndex location = v20;
    v44.NSUInteger length = 1;
    _updateAttributedString((id *)&v39, v7, v44, v13, *((CGFloat *)a3 + 2));
    if (v29 * -0.111111111 != 0.0) {
      +[EQKitAdjustableSpace appendSpaceToAttributedString:v39 ascent:0.0 descent:0.0 width:v29 * -0.111111111];
    }
    CFCharacterSetRef v13 = 0;
LABEL_51:
    NSUInteger v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_54:
    if (v21 != 0x7FFFFFFFFFFFFFFFLL && v19)
    {
      v45.CFIndex location = v21;
      v45.NSUInteger length = v30;
      _updateAttributedString((id *)&v39, v7, v45, v19, *((CGFloat *)a3 + 2));
    }
    if (!v24)
    {
LABEL_62:
      NSUInteger v23 = v20;
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  uint64_t v18 = 0;
LABEL_90:
  if (v7 != (unsigned int *)v41) {
    free(v7);
  }
  return v18;
}

void sub_22353C988(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1072C402C72566ELL);
  _Unwind_Resume(a1);
}

void _updateAttributedString(id *a1, const unsigned int *a2, _NSRange a3, CTFontRef *a4, CGFloat a5)
{
  if (a3.length)
  {
    NSUInteger length = a3.length;
    NSUInteger location = a3.location;
    if (!*a1) {
      *a1 = objc_alloc_init(MEMORY[0x263F089B8]);
    }
    if (*a4)
    {
      CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(*a4, a5, 0, 0);
      if (CopyWithAttributes)
      {
        CTFontRef v12 = CopyWithAttributes;
        CFCharacterSetRef v13 = (void *)[[NSString alloc] initWithBytes:&a2[location] length:4 * length encoding:2617245952];
        id v14 = objc_alloc(NSDictionary);
        uint64_t v15 = objc_msgSend(v14, "initWithObjectsAndKeys:", v12, *MEMORY[0x263F039A0], *MEMORY[0x263EFFB40], *MEMORY[0x263F03C68], 0);
        id v16 = (void *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:v13 attributes:v15];
        [*a1 appendAttributedString:v16];

        CFRelease(v12);
      }
    }
  }
}

uint64_t virtual thunk to'EQKit::Font::STIXCollection::newAttributedStringWithScript(EQKit::Font::STIXCollection *this, NSString *a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::newAttributedStringWithScript((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 88)), a2, a3);
}

CTFontRef EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript(EQKit::Font::STIXCollection *a1, unsigned int *a2, int a3, EQKit::Script::Info *a4, double a5)
{
  unsigned int v10 = (*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD;
  if (v10) {
    uint64_t v11 = (uint64_t)a1 + 168;
  }
  else {
    uint64_t v11 = (uint64_t)a1 + 224;
  }
  if (((*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD) != 0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (uint64_t)a1 + 168;
  }
  CFCharacterSetRef v13 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar(a1, *a2, a4, 1);
  unsigned int v14 = v13;
  *a2 = v13;
  if (a3 == 1)
  {
    uint64_t v21 = *((void *)a1 + 39);
    if (!v21)
    {
LABEL_30:
      UTF32Char v25 = (uint64_t **)*((void *)a1 + 48);
      EQKit::Font::STIXCollection::stemStretchKey((const __CFCharacterSet **)a1, v13, (uint64_t)a4, a3, (uint64_t)v28);
      BOOL v26 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v25, (const EQKit::StemStretch::Key *)v28) != a3;
      EQKit::StemStretch::Key::~Key(v28);
      unsigned int v14 = *a2;
      goto LABEL_31;
    }
    id v16 = (void *)((char *)a1 + 312);
    uint64_t v17 = (void *)((char *)a1 + 312);
    do
    {
      unsigned int v22 = *(_DWORD *)(v21 + 32);
      BOOL v23 = v22 >= v13;
      if (v22 >= v13) {
        uint64_t v24 = (uint64_t *)v21;
      }
      else {
        uint64_t v24 = (uint64_t *)(v21 + 8);
      }
      if (v23) {
        uint64_t v17 = (void *)v21;
      }
      uint64_t v21 = *v24;
    }
    while (*v24);
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_30;
    }
    uint64_t v15 = *((void *)a1 + 36);
    if (!v15) {
      goto LABEL_30;
    }
    id v16 = (void *)((char *)a1 + 288);
    uint64_t v17 = (void *)((char *)a1 + 288);
    do
    {
      unsigned int v18 = *(_DWORD *)(v15 + 32);
      BOOL v19 = v18 >= v13;
      if (v18 >= v13) {
        NSUInteger v20 = (uint64_t *)v15;
      }
      else {
        NSUInteger v20 = (uint64_t *)(v15 + 8);
      }
      if (v19) {
        uint64_t v17 = (void *)v15;
      }
      uint64_t v15 = *v20;
    }
    while (*v20);
  }
  if (v17 == v16 || v13 < *((_DWORD *)v17 + 8)) {
    goto LABEL_30;
  }
  BOOL v26 = 0;
LABEL_31:
  CTFontRef result = EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v11, v14, a3, (uint64_t)a4, v26, a5);
  if (!result && !v10) {
    return EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v12, *a2, a3, (uint64_t)a4, v26, a5);
  }
  return result;
}

void sub_22353CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(uint64_t **a1, const EQKit::StemStretch::Key *a2)
{
  NSUInteger v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  NSUInteger v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5) {
    goto LABEL_2;
  }
  pthread_rwlock_unlock(v4);
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = 0;
  if (!((unsigned int (*)(void))a1[34][2])()) {
    return v6;
  }
  pthread_rwlock_wrlock(v4);
  NSUInteger v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5)
  {
LABEL_2:
    v5[7] = **a1;
    uint64_t v6 = *((unsigned int *)v5 + 12);
  }
  else
  {
    uint64_t v10 = **a1;
    uint64_t v11 = a2;
    unint64_t v8 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v11);
    uint64_t v6 = v9;
    *((_DWORD *)v8 + ++*((_WORD *)this + 12) = v9;
    v8[7] = v10;
    if (a1[4] > a1[7]) {
      *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 1;
    }
  }
  pthread_rwlock_unlock(v4);
  return v6;
}

void EQKit::Font::STIXCollection::stemStretchKey(const __CFCharacterSet **a1@<X0>, const __CTFont *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (uint64_t)(a1 + 21);
  unsigned int v11 = (*(_DWORD *)(a3 + 12) - 2) & 0xFFFFFFFD;
  if (v11) {
    uint64_t v12 = (uint64_t)(a1 + 21);
  }
  else {
    uint64_t v12 = (uint64_t)(a1 + 28);
  }
  CFCharacterSetRef v13 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v12, a2, a4, a3, 1, 1.79769313e308);
  if (v13) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v11 == 0;
  }
  if (v14) {
    CFCharacterSetRef v13 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v10, a2, a4, a3, 1, 1.79769313e308);
  }
  if (v13)
  {
    EQKit::StemStretch::Key::Key(a5);
  }
  else
  {
    CFCharacterSetRef v13 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh(a1, (UTF32Char)a2, 0, (const EQKit::Script::Info *)a3, 0);
    EQKit::StemStretch::Key::Key(a5);
    if (!v13) {
      return;
    }
  }
  if (*v13)
  {
    CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(*v13, *(CGFloat *)(a3 + 16), 0, 0);
    if (CopyWithAttributes)
    {
      double v16 = EQKit::Font::STIXCollection::ruleThicknessWithScript(a1, (CGFloat *)a3);
      EQKit::StemStretch::Key::keyForFontAndCharacter(CopyWithAttributes, a2, v16, (uint64_t)v17);
      EQKit::StemStretch::Key::operator=(a5, (uint64_t)v17);
      EQKit::StemStretch::Key::~Key(v17);
      CFRelease(CopyWithAttributes);
    }
  }
}

void sub_22353CF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  EQKit::StemStretch::Key::~Key(&a9);
  EQKit::StemStretch::Key::~Key(v9);
  _Unwind_Resume(a1);
}

CTFontRef EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  int v7 = (const __CTFont **)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(a1, a2, a3, a4, a5, a6);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = *v7;
  if (!v8) {
    return 0;
  }
  CGFloat v9 = *(double *)(a4 + 16);

  return CTFontCreateCopyWithAttributes(v8, v9, 0, 0);
}

CTFontRef virtual thunk to'EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript(void *a1, unsigned int *a2, int a3, EQKit::Script::Info *a4, double a5)
{
  return EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript((EQKit::Font::STIXCollection *)((char *)a1 + *(void *)(*a1 - 96)), a2, a3, a4, a5);
}

uint64_t EQKit::Font::STIXCollection::compositeStretchForCharacter(uint64_t a1, unsigned int a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v9 = *(void *)(a1 + 312);
    if (!v9) {
      return 0;
    }
    uint64_t v4 = a1 + 312;
    uint64_t v5 = a1 + 312;
    do
    {
      unsigned int v10 = *(_DWORD *)(v9 + 32);
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        uint64_t v12 = (uint64_t *)v9;
      }
      else {
        uint64_t v12 = (uint64_t *)(v9 + 8);
      }
      if (v11) {
        uint64_t v5 = v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
  }
  else
  {
    if (a3 != 2) {
      return 0;
    }
    uint64_t v3 = *(void *)(a1 + 288);
    if (!v3) {
      return 0;
    }
    uint64_t v4 = a1 + 288;
    uint64_t v5 = a1 + 288;
    do
    {
      unsigned int v6 = *(_DWORD *)(v3 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = (uint64_t *)v3;
      }
      else {
        unint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  if (v5 == v4) {
    return 0;
  }
  unsigned int v13 = *(_DWORD *)(v5 + 32);
  uint64_t v14 = v5 + 40;
  if (v13 <= a2) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t virtual thunk to'EQKit::Font::STIXCollection::compositeStretchForCharacter(void *a1, unsigned int a2, int a3)
{
  return EQKit::Font::STIXCollection::compositeStretchForCharacter((uint64_t)a1 + *(void *)(*a1 - 112), a2, a3);
}

double EQKit::Font::STIXCollection::accentUnderHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  double v6 = 0.0;
  int v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  double result = v6;
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::accentHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3, double *a4, double *a5)
{
  __int16 v10 = *((_WORD *)a3 + 4);
  char v11 = *((unsigned char *)a3 + 10);
  int v12 = *((_DWORD *)a3 + 3);
  int v13 = *((_DWORD *)a3 + 6);
  uint64_t v14 = (const void *)*((void *)a3 + 4);
  uint64_t v36 = *(void *)a3;
  __int16 v37 = v10;
  char v38 = v11;
  int v39 = v12;
  uint64_t v40 = 0x4028000000000000;
  int v41 = v13;
  uint64_t v42 = v14;
  if (v14) {
    CFRetain(v14);
  }
  CFCharacterSetRef v15 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, (const EQKit::Script::Info *)&v36, 0);
  if (!v15
    || (double v16 = *(const __CTFont **)v15) == 0
    || (CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(v16, 12.0, 0, 0)) == 0)
  {
    uint64_t v22 = 0;
    if (!v14) {
      return v22;
    }
LABEL_9:
    CFRelease(v14);
    return v22;
  }
  EQKit::Font::SlantKey::SlantKey((EQKit::Font::SlantKey *)cf, CopyWithAttributes, a2);
  double v18 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(*((uint64_t ***)this + 50), (uint64_t)cf);
  double v20 = v19;
  if (cf[0]) {
    uint64_t v21 = (char *)[(id)cf[0] UTF8String];
  }
  else {
    uint64_t v21 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v21);
  uint64_t v24 = (*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, void **, uint64_t))(*(void *)this + 24))(this, 2, __p, a2);
  UTF32Char v25 = (EQKitLength *)v24;
  if (v34 < 0)
  {
    operator delete(__p[0]);
    if (!v25) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v24)
  {
LABEL_16:
    double Size = CTFontGetSize(CopyWithAttributes);
    double v18 = EQKitLength::resolveToAbsoluteWithSize(v25, Size);
  }
LABEL_17:
  *a4 = v18;
  *a4 = v18 * (*((double *)a3 + 2) / 12.0);
  if (cf[0]) {
    CFCharacterSetRef v27 = (char *)[(id)cf[0] UTF8String];
  }
  else {
    CFCharacterSetRef v27 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(v31, v27);
  uint64_t v28 = (*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, void **, uint64_t))(*(void *)this + 24))(this, 1, v31, a2);
  double v29 = (EQKitLength *)v28;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    if (!v29) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v28)
  {
LABEL_24:
    double v30 = CTFontGetSize(CopyWithAttributes);
    double v20 = EQKitLength::resolveToAbsoluteWithSize(v29, v30);
  }
LABEL_25:
  *a5 = v20;
  *a5 = v20 * (*((double *)a3 + 2) / 12.0);
  CFRelease(CopyWithAttributes);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  uint64_t v22 = 1;
  if (v14) {
    goto LABEL_9;
  }
  return v22;
}

void sub_22353D350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,CFTypeRef cf)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

double virtual thunk to'EQKit::Font::STIXCollection::accentUnderHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  int v3 = (EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 200));
  double v7 = 0.0;
  int v4 = EQKit::Font::STIXCollection::accentHAdjustment(v3, a2, a3, &v7, &v6);
  double result = v7;
  if (!v4) {
    return 0.0;
  }
  return result;
}

double EQKit::Font::STIXCollection::accentOverHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  double v5 = 0.0;
  int v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  double result = v5;
  if (!v3) {
    return 0.0;
  }
  return result;
}

double virtual thunk to'EQKit::Font::STIXCollection::accentOverHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  int v3 = (EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 192));
  double v6 = 0.0;
  int v4 = EQKit::Font::STIXCollection::accentHAdjustment(v3, a2, a3, &v7, &v6);
  double result = v6;
  if (!v4) {
    return 0.0;
  }
  return result;
}

double EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(uint64_t **a1, uint64_t a2)
{
  int v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  double v5 = (double *)std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
  if (v5)
  {
    *((void *)v5 + 7) = **a1;
    double v6 = v5[5];
LABEL_10:
    pthread_rwlock_unlock(v4);
    return v6;
  }
  pthread_rwlock_unlock(v4);
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  double v6 = 0.0;
  if (((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v4);
    double v7 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
    if (v7)
    {
      unint64_t v8 = (double *)(v7 + 5);
      v7[7] = **a1;
    }
    else
    {
      uint64_t v12 = **a1;
      uint64_t v13 = a2;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v13);
      *(_OWORD *)(v9 + 5) = v11;
      v9[7] = v12;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 1;
      }
      unint64_t v8 = (double *)&v11;
    }
    double v6 = *v8;
    goto LABEL_10;
  }
  return v6;
}

double _resolveLength(const EQKitLength *a1, CTFontRef font, double a3)
{
  if (!a1 || !font) {
    return 0.0;
  }
  double Size = CTFontGetSize(font);

  return EQKitLength::resolveToAbsoluteWithSize(a1, Size);
}

void EQKit::Font::SlantKey::~SlantKey(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v1;

  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t EQKit::Font::STIXCollection::isCharacterStretchableInAxis(uint64_t ***this, uint64_t a2, int a3, uint64_t *a4)
{
  __int16 v7 = *((_WORD *)a4 + 4);
  char v8 = *((unsigned char *)a4 + 10);
  int v9 = *((_DWORD *)a4 + 3);
  int v10 = *((_DWORD *)a4 + 6);
  long long v11 = (const void *)a4[4];
  uint64_t v33 = *a4;
  __int16 v34 = v7;
  char v35 = v8;
  int v36 = v9;
  uint64_t v37 = 0x4028000000000000;
  int v38 = v10;
  int v39 = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v12 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar((EQKit::Font::STIXCollection *)this, a2, (const EQKit::Script::Info *)&v33, 1);
  unsigned int v13 = v12;
  if (a3 == 1)
  {
    double v20 = this[39];
    if (v20)
    {
      CFCharacterSetRef v15 = (uint64_t **)(this + 39);
      double v16 = (uint64_t **)(this + 39);
      do
      {
        unsigned int v21 = *((_DWORD *)v20 + 8);
        BOOL v22 = v21 >= v12;
        if (v21 >= v12) {
          BOOL v23 = (uint64_t ***)v20;
        }
        else {
          BOOL v23 = (uint64_t ***)(v20 + 1);
        }
        if (v22) {
          double v16 = v20;
        }
        double v20 = *v23;
      }
      while (*v23);
LABEL_24:
      if (v16 != v15 && v12 >= *((_DWORD *)v16 + 8)) {
        goto LABEL_27;
      }
    }
  }
  else if (a3 == 2)
  {
    uint64_t v14 = this[36];
    if (v14)
    {
      CFCharacterSetRef v15 = (uint64_t **)(this + 36);
      double v16 = (uint64_t **)(this + 36);
      do
      {
        unsigned int v17 = *((_DWORD *)v14 + 8);
        BOOL v18 = v17 >= v12;
        if (v17 >= v12) {
          double v19 = (uint64_t ***)v14;
        }
        else {
          double v19 = (uint64_t ***)(v14 + 1);
        }
        if (v18) {
          double v16 = v14;
        }
        uint64_t v14 = *v19;
      }
      while (*v19);
      goto LABEL_24;
    }
  }
  uint64_t v24 = this[48];
  EQKit::Font::STIXCollection::stemStretchKey((const __CFCharacterSet **)this, v12, (uint64_t)&v33, a3, (uint64_t)v30);
  LODWORD(v24) = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v24, (const EQKit::StemStretch::Key *)v30);
  EQKit::StemStretch::Key::~Key(v30);
  if (v24 != a3)
  {
    v28[0] = v13;
    EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(this[27], v28, (uint64_t)v30);
    if (v32 - 1 > 0xFD)
    {
      unsigned int v40 = v13;
      EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(this[34], &v40, (uint64_t)v28);
      BOOL v27 = v29 - 1 < 0xFE && v28[12] == a3;
    }
    else
    {
      BOOL v27 = v31 == a3;
    }
    uint64_t v25 = v27;
    if (v11) {
      goto LABEL_28;
    }
    return v25;
  }
LABEL_27:
  uint64_t v25 = 1;
  if (v11) {
LABEL_28:
  }
    CFRelease(v11);
  return v25;
}

void sub_22353D830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (v16) {
    CFRelease(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::stretchInfoForCharacter@<X0>(uint64_t ***this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = a2;
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(this[6], &v4, a3);
}

uint64_t virtual thunk to'EQKit::Font::STIXCollection::isCharacterStretchableInAxis(void *a1, uint64_t a2, int a3, uint64_t *a4)
{
  return EQKit::Font::STIXCollection::isCharacterStretchableInAxis((uint64_t ***)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

BOOL EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  double v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, a2, a3);
  UTF32Char v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == a2) {
      CFCharacterSetRef v8 = 0;
    }
    else {
      CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, a3, 0);
    }
  }
  if (v8 == *((const __CFCharacterSet **)this + 14)
    || v8 == *((const __CFCharacterSet **)this + 13)
    || v8 == *((const __CFCharacterSet **)this + 18)
    || v8 == *((const __CFCharacterSet **)this + 17)
    || v8 == *((const __CFCharacterSet **)this + 20)
    || v8 == *((const __CFCharacterSet **)this + 19))
  {
    double v6 = (const FontInfo *)v8;
  }
  return v6 == (const FontInfo *)v8;
}

BOOL virtual thunk to'EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 128)), a2, a3);
}

BOOL EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  double v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, a2, a3);
  UTF32Char v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == a2) {
      CFCharacterSetRef v8 = 0;
    }
    else {
      CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, a3, 0);
    }
  }
  if (v6 != (const FontInfo *)v8) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 46);
  if (!v10) {
    return 1;
  }
  long long v11 = *(_DWORD **)v10;
  uint64_t v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    unint64_t v13 = v12 - v11;
    do
    {
      unint64_t v14 = v13 >> 1;
      CFCharacterSetRef v15 = &v11[v13 >> 1];
      unsigned int v17 = *v15;
      double v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2) {
        long long v11 = v16;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  return v11 == v12 || *v11 != a2;
}

BOOL virtual thunk to'EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 136)), a2, a3);
}

BOOL EQKit::Font::STIXCollection::isCharacterSymmetricWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  double v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, a2, a3);
  UTF32Char v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == a2) {
      CFCharacterSetRef v8 = 0;
    }
    else {
      CFCharacterSetRef v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, a3, 0);
    }
  }
  if (v6 != (const FontInfo *)v8) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 46);
  if (!v10) {
    return 1;
  }
  long long v11 = *(_DWORD **)v10;
  uint64_t v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    unint64_t v13 = v12 - v11;
    do
    {
      unint64_t v14 = v13 >> 1;
      CFCharacterSetRef v15 = &v11[v13 >> 1];
      unsigned int v17 = *v15;
      double v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2) {
        long long v11 = v16;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  return v11 == v12 || *v11 != a2;
}

BOOL virtual thunk to'EQKit::Font::STIXCollection::isCharacterSymmetricWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::isCharacterSymmetricWithScript((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 144)), a2, a3);
}

CGFloat EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, CGFloat *a3)
{
  int v4 = a2;
  UTF32Char v6 = EQKit::Font::STIXCollection::lookupChar(this, a2, (const EQKit::Script::Info *)a3, 0);
  CFCharacterSetRef v7 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v6, 0, (const EQKit::Script::Info *)a3, 0);
  CGSize v8 = *(CGSize *)(MEMORY[0x263F001A8] + 16);
  boundingRects.origin = (CGPoint)*MEMORY[0x263F001A8];
  boundingRects.std::string::size_type size = v8;
  if (v7)
  {
    int v9 = *(const __CTFont **)v7;
    if (v9)
    {
      CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(v9, a3[2], 0, 0);
      CGGlyph v17 = -1;
      if (CopyWithAttributes)
      {
        long long v11 = CopyWithAttributes;
        if ((v4 - 0x10000) >> 20)
        {
          CFIndex v13 = 1;
          LOWORD(v++*((_WORD *)this + 12) = v4;
        }
        else
        {
          unsigned int v12 = ((v4 + 67043328) >> 10) - 10240;
          characters[1] = v4 & 0x3FF | 0xDC00;
          CFIndex v13 = 2;
        }
        characters[0] = v12;
        if (CTFontGetGlyphsForCharacters(CopyWithAttributes, characters, glyphs, v13))
        {
          CGGlyph v17 = glyphs[0];
          if (glyphs[0] != 0xFFFF)
          {
            CTFontGetBoundingRectsForGlyphs(v11, kCTFontOrientationHorizontal, &v17, &boundingRects, 1);
            boundingRects.origin.CGFloat y = -CGRectGetMaxY(boundingRects);
          }
        }
        CFRelease(v11);
      }
    }
  }
  return boundingRects.origin.x;
}

CGFloat virtual thunk to'EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, CGFloat *a3)
{
  return EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 152)), a2, a3);
}

double EQKit::Font::STIXCollection::ruleThicknessWithScript(const __CFCharacterSet **this, CGFloat *a2)
{
  CFCharacterSetRef v3 = EQKit::Font::STIXCollection::lookupFontForCh(this, 0x2212u, 0, (const EQKit::Script::Info *)a2, 0);
  double v4 = 0.0;
  if (v3)
  {
    double v5 = *(const __CTFont **)v3;
    if (v5)
    {
      CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(v5, a2[2], 0, 0);
      if (CopyWithAttributes)
      {
        CGSize v8 = CopyWithAttributes;
        int v9 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)0x2212, CopyWithAttributes, v7);
        if (v9)
        {
          uint64_t v10 = v9;
          if (*((unsigned char *)v9 + 120)) {
            long long v11 = (CGFloat *)((char *)v9 + 88);
          }
          else {
            long long v11 = EQKitPath::computePathBounds((CGFloat *)v9);
          }
          double v4 = v11[3];
          EQKitPath::~EQKitPath(v10);
          MEMORY[0x223CB8F20]();
        }
        CFRelease(v8);
      }
    }
  }
  return v4;
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  unsigned int v16 = a2;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 48), &v16, (uint64_t)v15);
  if (v15[12] != a3) {
    return 0;
  }
  double v11 = *(double *)(a4 + 16);
  if (v11 == 0.0) {
    return 0;
  }
  unint64_t v12 = EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength((EQKit::Font::STIXCollection::StretchInfo *)v15, a6 * 12.0 / v11, 0.0, a5);
  if (v12 > 5) {
    return 0;
  }
  CFIndex v13 = *(void **)(a1 + 8 * v12);
  if (!v13) {
    return 0;
  }
  if (*v13) {
    return *(void *)(a1 + 8 * v12);
  }
  return 0;
}

void *EQKit::Font::STIXCollection::lookupStemStretchConfig(EQKit::Font::STIXCollection *this, int a2, CTFontRef font)
{
  CFCharacterSetRef v3 = 0;
  if (font && *((void *)this + 41))
  {
    UTF32Char v6 = (__CFString *)CTFontCopyPostScriptName(font);
    if (v6)
    {
      CFCharacterSetRef v7 = v6;
      std::string::basic_string[abi:nn180100]<0>(&v13, (char *)[(__CFString *)v6 UTF8String]);
      uint64_t v8 = *((void *)this + 41);
      v11[0] = a2;
      v11[1] = 13;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v13;
      }
      int v9 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v8 + 48, (uint64_t)v11);
      if ((void *)(v8 + 56) == v9) {
        CFCharacterSetRef v3 = 0;
      }
      else {
        CFCharacterSetRef v3 = v9 + 8;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      CFRelease(v7);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_22353DFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, uint64_t a3, EQKit::Script::Info *a4, CGSize *a5, double a6)
{
  unsigned int v12 = (*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD;
  if (v12) {
    std::string v13 = (char *)this + 168;
  }
  else {
    std::string v13 = (char *)this + 224;
  }
  if (((*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD) != 0) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = (char *)this + 168;
  }
  CGSize v35 = (CGSize)*MEMORY[0x263F001B0];
  if (a3 == 2)
  {
    uint64_t v15 = *((void *)this + 42);
    if (v15) {
      double v16 = EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v15 + 10752), a4, 0.0);
    }
    else {
      double v16 = 0.0;
    }
    a6 = v16 + a6;
  }
  uint64_t v17 = EQKit::Font::STIXCollection::lookupChar(this, a2, a4, 1);
  uint64_t v18 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript((uint64_t)v13, v17, a3, (uint64_t)a4, 1, a6);
  if (v18) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v12 == 0;
  }
  if (v19) {
    uint64_t v18 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript((uint64_t)v14, v17, a3, (uint64_t)a4, 1, a6);
  }
  if (!v18) {
    uint64_t v18 = (uint64_t)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v17, 0, a4, 0);
  }
  double v20 = (CGPath *)(*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, uint64_t))(*(void *)this + 96))(this, v17, a3);
  CGGlyph width_low = -1;
  double v21 = 0.0;
  if (!v18) {
    goto LABEL_25;
  }
  if (!*(void *)v18)
  {
    LODWORD(v1_Block_object_dispose(&STACK[0x560], 8) = 0;
LABEL_25:
    BOOL v23 = 0;
    goto LABEL_39;
  }
  CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(*(CTFontRef *)v18, *((CGFloat *)a4 + 2), 0, 0);
  BOOL v23 = CopyWithAttributes;
  if ((v17 - 1114112) >= 0xFFF00000)
  {
    unsigned int v24 = ((v17 + 67043328) >> 10) - 10240;
    WORD1(characters[0].origin.x) = v17 & 0x3FF | 0xDC00;
  }
  else
  {
    LOWORD(v24) = v17;
  }
  LOWORD(characters[0].origin.x) = v24;
  if (!CopyWithAttributes)
  {
    LODWORD(v1_Block_object_dispose(&STACK[0x560], 8) = 0;
LABEL_39:
    double v26 = 0.0;
    double MinX = 0.0;
    if (!v20) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if ((v17 - 1114112) < 0xFFF00000) {
    CFIndex v25 = 1;
  }
  else {
    CFIndex v25 = 2;
  }
  if (!CTFontGetGlyphsForCharacters(CopyWithAttributes, (const UniChar *)characters, (CGGlyph *)&glyphs, v25)
    || (CGGlyph width_low = LOWORD(glyphs.width), LOWORD(glyphs.width) == 0xFFFF))
  {
    LODWORD(v1_Block_object_dispose(&STACK[0x560], 8) = 1;
    goto LABEL_39;
  }
  CTFontGetBoundingRectsForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, characters, 1);
  CTFontGetAdvancesForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, &glyphs, 1);
  double v26 = 0.0;
  double MinX = 0.0;
  if (a3 == 2)
  {
    double MinX = CGRectGetMinX(characters[0]);
    double width = glyphs.width;
    double v26 = width - CGRectGetWidth(characters[0]) - MinX;
    double v21 = -CGRectGetMinY(characters[0]);
  }
  LODWORD(v1_Block_object_dispose(&STACK[0x560], 8) = 1;
  if (v20)
  {
LABEL_40:
    EQKitCompositeGlyph::EQKitCompositeGlyph(characters, a4, a3, v20);
    double v20 = EQKitCompositeGlyph::createPathWithLength((EQKitCompositeGlyph *)characters, a6, &v35);
    EQKitCompositeGlyph::~EQKitCompositeGlyph((EQKitCompositeGlyph *)characters);
  }
LABEL_41:
  char v29 = v18 ^ 1;
  if (v20) {
    char v29 = 1;
  }
  if ((v29 & 1) == 0)
  {
    double v30 = (uint64_t **)*((void *)this + 49);
    EQKit::Font::STIXCollection::stemStretchKey((const __CFCharacterSet **)this, (const __CTFont *)v17, (uint64_t)a4, a3, (uint64_t)characters);
    EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(v30, (const EQKit::StemStretch::Key *)characters, &glyphs);
    EQKit::StemStretch::Key::~Key((const void **)characters);
    if (*(void *)&glyphs.width && **(_DWORD **)&glyphs.width == a3) {
      double v20 = EQKit::StemStretch::Glyph::newPathWithLength(*(EQKit::StemStretch::Glyph **)&glyphs.width, a6, &v35);
    }
    else {
      double v20 = 0;
    }
    if (*(void *)&glyphs.height) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&glyphs.height);
    }
  }
  if (v20)
  {
    *a5 = v35;
    a5[1].double width = MinX;
    a5[1].CGFloat height = v26;
    a5[2].double width = v21;
  }
  if (v18) {
    CFRelease(v23);
  }
  return v20;
}

void sub_22353E374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a25);
  }
  _Unwind_Resume(exception_object);
}

CGPath *virtual thunk to'EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript(void *a1, uint64_t a2, uint64_t a3, EQKit::Script::Info *a4, CGSize *a5, double a6)
{
  return EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript((EQKit::Font::STIXCollection *)((char *)a1 + *(void *)(*a1 - 104)), a2, a3, a4, a5, a6);
}

void EQKit::Font::STIXCollection::SizeVariant::SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this, const EQKitCacheLRUCounter *a2)
{
}

void sub_22353E490(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5EQKit4Font14STIXCollection11SizeVariantC2ERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, UTF32Char *a2, uint64_t a3)
{
  return 1;
}

double EQKit::Font::STIXCollection::StretchInfo::setupForCharacterWithVariant(uint64_t a1, UTF32Char theChar, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = 0;
  unint64_t v8 = 0;
  v36[11] = *MEMORY[0x263EF8340];
  int v9 = &v35;
  uint64_t v10 = (double *)MEMORY[0x263F001B0];
  do
  {
    long long v11 = *(_OWORD *)v10;
    *(_OWORD *)int v9 = *(_OWORD *)v10;
    unsigned int v12 = *(CTFontRef **)(a3 + 8 * v6);
    if (v12)
    {
      CFCharacterSetRef v13 = v12[1];
      if (v13)
      {
        if (CFCharacterSetIsLongCharacterMember(v13, theChar))
        {
          if (*v12)
          {
            uint64_t v15 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)(unsigned __int16)theChar, *v12, v14);
            if (v15)
            {
              double v16 = v15;
              if (*((unsigned char *)v15 + 120)) {
                uint64_t v17 = (CGFloat *)((char *)v15 + 88);
              }
              else {
                uint64_t v17 = EQKitPath::computePathBounds((CGFloat *)v15);
              }
              *(_OWORD *)int v9 = *((_OWORD *)v17 + 1);
              v7 |= 1 << v6;
              ++v8;
              EQKitPath::~EQKitPath(v16);
              MEMORY[0x223CB8F20](v18, 0x1070C40036CD406, v19, v20);
            }
          }
        }
      }
    }
    ++v6;
    v9 += 16;
  }
  while (v6 != 6);
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  if (v8 > 1)
  {
    uint64_t v21 = 0;
    double v22 = *v10;
    double v23 = v10[1];
    unsigned int v24 = (double *)v36;
    char v25 = 1;
    double v26 = *v10;
    double v27 = v23;
    do
    {
      if ((v7 >> v21))
      {
        double v22 = *(v24 - 1);
        double v23 = *v24;
        if (v25)
        {
          double v27 = *v24;
          double v26 = *(v24 - 1);
        }
        char v25 = 0;
      }
      ++v21;
      v24 += 2;
    }
    while (v21 != 6);
    *(double *)&long long v11 = v22 - v26;
    double v28 = v23 - v27;
    if (*(double *)&v11 <= 0.0 || v28 <= 0.0)
    {
      if (*(double *)&v11 <= 0.0 && v28 > 0.0) {
        int v30 = 2;
      }
      else {
        int v30 = *(double *)&v11 > 0.0;
      }
      BOOL v29 = *(double *)&v11 > 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0);
      if (*(double *)&v11 <= 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0)) {
        return *(double *)&v11;
      }
    }
    else
    {
      BOOL v29 = *(double *)&v11 > v28;
      if (*(double *)&v11 > v28) {
        int v30 = 1;
      }
      else {
        int v30 = 2;
      }
    }
    uint64_t v31 = 0;
    *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = v30;
    *(unsigned char *)(a1 + 52) = v7;
    unsigned __int8 v32 = &v35;
    do
    {
      uint64_t v33 = v32 + 8;
      if (v29) {
        uint64_t v33 = v32;
      }
      *(void *)&long long v11 = *(void *)v33;
      *(void *)(a1 + v31) = *(void *)v33;
      v31 += 8;
      v32 += 16;
    }
    while (v31 != 48);
  }
  return *(double *)&v11;
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = a2;
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + ++*(void *)(this + 64) = v7;
  if (*(void *)(a1 + 32) > a2) {
    *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 1;
  }
  pthread_rwlock_unlock(v6);

  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune((uint64_t **)a1);
}

void EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this)
{
  for (uint64_t i = 0; i != 48; i += 8)
  {
    CFCharacterSetRef v3 = *(EQKit::Font::STIXCollection::FontInfo **)((char *)this + i);
    if (v3)
    {
      EQKit::Font::STIXCollection::FontInfo::~FontInfo(v3);
      MEMORY[0x223CB8F20]();
      *(void *)((char *)this + i) = 0;
    }
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(uint64_t **a1)
{
  int v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      std::string __p = 0;
      double v27 = 0;
      double v28 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v8 = v5 - v6[10];
          int v9 = *((_DWORD *)v6 + 4);
          if (v7 >= v28)
          {
            uint64_t v10 = __p;
            uint64_t v11 = (v7 - __p) >> 4;
            unint64_t v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 60) {
              abort();
            }
            uint64_t v13 = v28 - __p;
            if ((v28 - __p) >> 3 > v12) {
              unint64_t v12 = v13 >> 3;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)&v28, v14);
              uint64_t v10 = __p;
              unint64_t v7 = v27;
            }
            else
            {
              uint64_t v15 = 0;
            }
            double v16 = &v15[16 * v11];
            *(_DWORD *)double v16 = v9;
            *((void *)v16 + 1) = v8;
            uint64_t v17 = v16;
            if (v7 != v10)
            {
              do
              {
                *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
                v17 -= 16;
                v7 -= 16;
              }
              while (v7 != v10);
              uint64_t v10 = __p;
            }
            unint64_t v7 = v16 + 16;
            std::string __p = v17;
            double v28 = &v15[16 * v14];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v7 = v9;
            *((void *)v7 + 1) = v8;
            v7 += 16;
          }
          double v27 = v7;
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        uint64_t v18 = (uint64_t)__p;
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v18 = 0;
      }
      unint64_t v19 = 126 - 2 * __clz((uint64_t)&v7[-v18] >> 4);
      BOOL v29 = EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU;
      if (v7 == (char *)v18) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v19;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v18, (int *)v7, (uint64_t (**)(int *, int *))&v29, v20, 1);
      uint64_t v21 = __p;
      unint64_t v22 = (v27 - __p) >> 4;
      double v23 = a1[8];
      unint64_t v24 = v22 - (void)v23;
      if (v22 > (unint64_t)v23)
      {
        uint64_t v25 = 16 * (void)v23;
        do
        {
          if (std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]))
          {
            std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]);
          }
          v25 += 16;
          --v24;
        }
        while (v24);
        uint64_t v21 = __p;
      }
      *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
      if (v21) {
        operator delete(v21);
      }
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_22353EA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength(EQKit::Font::STIXCollection::StretchInfo *this, double a2, double a3, int a4)
{
  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  while (((*((unsigned __int8 *)this + 52) >> v4) & 1) == 0)
  {
    uint64_t v9 = v7;
    double v8 = v5;
LABEL_10:
    ++v4;
    double v5 = v8;
    uint64_t v7 = v9;
    if (v4 == 6) {
      goto LABEL_11;
    }
  }
  double v8 = *((double *)this + v4);
  if (v8 + a3 <= a2)
  {
    uint64_t v9 = v7;
    double v8 = v5;
    goto LABEL_8;
  }
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v9 = v4;
LABEL_8:
    uint64_t v6 = v4;
    goto LABEL_10;
  }
  uint64_t v9 = v4;
  uint64_t v6 = v4;
  if (vabdd_f64(v5, a2) >= vabdd_f64(v8, a2)) {
    goto LABEL_10;
  }
  uint64_t v9 = v7;
  uint64_t v6 = v4;
LABEL_11:
  if (a4) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v9 == 0x7FFFFFFFFFFFFFFFLL) {
    return v10;
  }
  else {
    return v9;
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup@<X0>(uint64_t **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(unsigned char *)(a3 + 52) = -1;
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
  if (!v7)
  {
    pthread_rwlock_unlock(v6);
    int v20 = 0;
    char v21 = -1;
    uint64_t v22 = 0;
    uint64_t result = ((uint64_t (*)(void))a1[34][2])();
    if (!result) {
      return result;
    }
    pthread_rwlock_wrlock(v6);
    uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
    if (v11)
    {
      unint64_t v12 = (long long *)(v11 + 3);
      v11[10] = **a1;
      if (v11 + 3 == (uint64_t *)a3) {
        return pthread_rwlock_unlock(v6);
      }
      *(_DWORD *)(a3 + 4_Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)v11 + 18);
      uint64_t v13 = (char *)v11 + 76;
    }
    else
    {
      uint64_t v22 = **a1;
      double v23 = a2;
      unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v23);
      if (v14 + 3 != (void *)v19)
      {
        *((_DWORD *)v14 + 1_Block_object_dispose(&STACK[0x560], 8) = v20;
        *((unsigned char *)v14 + 76) = v21;
        long long v16 = v19[1];
        long long v15 = v19[2];
        *(_OWORD *)(v14 + 3) = v19[0];
        *(_OWORD *)(v14 + 5) = v16;
        *(_OWORD *)(v14 + 7) = v15;
      }
      v14[10] = v22;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 1;
      }
      if (v19 == (_OWORD *)a3) {
        return pthread_rwlock_unlock(v6);
      }
      uint64_t v13 = &v21;
      *(_DWORD *)(a3 + 4_Block_object_dispose(&STACK[0x560], 8) = v20;
      unint64_t v12 = v19;
    }
    *(unsigned char *)(a3 + 52) = *v13;
    long long v17 = *v12;
    long long v18 = v12[2];
    *(_OWORD *)(a3 + ++*(void *)(this + 16) = v12[1];
    *(_OWORD *)(a3 + 32) = v18;
    *(_OWORD *)a3 = v17;
    return pthread_rwlock_unlock(v6);
  }
  v7[10] = **a1;
  if (v7 + 3 != (uint64_t *)a3)
  {
    *(_DWORD *)(a3 + 4_Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)v7 + 18);
    *(unsigned char *)(a3 + 52) = *((unsigned char *)v7 + 76);
    long long v8 = *(_OWORD *)(v7 + 3);
    long long v9 = *(_OWORD *)(v7 + 7);
    *(_OWORD *)(a3 + ++*(void *)(this + 16) = *(_OWORD *)(v7 + 5);
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)a3 = v8;
  }

  return pthread_rwlock_unlock(v6);
}

uint64_t EQKit::Font::STIXCollection::StretchInfo::StretchInfo(uint64_t this)
{
  *(_DWORD *)(this + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(unsigned char *)(this + 52) = -1;
  return this;
}

{
  *(_DWORD *)(this + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(unsigned char *)(this + 52) = -1;
  return this;
}

__n128 EQKit::Font::STIXCollection::StretchInfo::StretchInfo(EQKit::Font::STIXCollection::StretchInfo *this, const EQKit::Font::STIXCollection::StretchInfo *a2)
{
  *((_DWORD *)this + ++*((_WORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  __n128 result = *(__n128 *)a2;
  long long v3 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v3;
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;
  long long v3;

  *((_DWORD *)this + ++*((_WORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  __n128 result = *(__n128 *)a2;
  long long v3 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v3;
  *(__n128 *)this = result;
  return result;
}

__n128 EQKit::Font::STIXCollection::StretchInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = *(_DWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
    __n128 result = *(__n128 *)a2;
    long long v3 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + ++*(void *)(this + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v3;
    *(__n128 *)a1 = result;
  }
  return result;
}

CGPath *EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  unsigned int v62 = 8730;
  EQKitPath::EQKitPath((EQKitPath *)&v58, 0);
  memset(&__p, 0, sizeof(__p));
  unint64_t v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, double))(*(void *)a1 + 80))(a1, &v62, 2, a2, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14, v62);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    if (v58)
    {
      long long v15 = (__CFString *)CTFontCopyPostScriptName(v14);
      MEMORY[0x223CB8D60](&__p, [(__CFString *)v15 UTF8String]);
      CFRelease(v15);
      long long v16 = v61 ? (CGFloat *)v60 : EQKitPath::computePathBounds((CGFloat *)&v58);
      v63.origin.CGFloat x = *v16;
      v63.origin.CGFloat y = v16[1];
      CGFloat v17 = v16[2];
      CGFloat v18 = v16[3];
      v63.size.double width = v17;
      v63.size.CGFloat height = v18;
      CGFloat MaxY = CGRectGetMaxY(v63);
      *(CGFloat *)a4 = v17;
      *(CGFloat *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = v18;
      *(void *)(a4 + ++*(void *)(this + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(CGFloat *)(a4 + 32) = MaxY;
      if (v58) {
        goto LABEL_12;
      }
    }
    CFRelease(v14);
  }
  else if (v58)
  {
    unint64_t v14 = 0;
    goto LABEL_12;
  }
  unint64_t v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 88))(a1, v62, 2, a2, a4, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    CFRelease(v14);
    MEMORY[0x223CB8D60](&__p, "STIXSizeOneSym-Regular");
    unsigned int v62 = 9143;
    int v20 = CTFontDescriptorCreateWithNameAndSize(@"STIXSizeOneSym-Regular", *(CGFloat *)(a2 + 16));
    unint64_t v14 = CTFontCreateWithFontDescriptor(v20, *(CGFloat *)(a2 + 16), 0);
    CFRelease(v20);
  }
LABEL_12:
  if (v61) {
    char v21 = (CGFloat *)v60;
  }
  else {
    char v21 = EQKitPath::computePathBounds((CGFloat *)&v58);
  }
  double v22 = *v21;
  double v23 = v21[1];
  CGFloat v24 = v21[2];
  CGFloat v25 = v21[3];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = __p;
  }
  double v26 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, void))(*(void *)a1 + 24))(a1, 4, &v53, v62);
  *a3 = _resolveLength(v26, v14, v27);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = __p;
  }
  double v28 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, void))(*(void *)a1 + 24))(a1, 5, &v52, v62);
  a3[1] = _resolveLength(v28, v14, v29);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v51, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v51 = __p;
  }
  int v30 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, void))(*(void *)a1 + 24))(a1, 6, &v51, v62);
  a3[2] = _resolveLength(v30, v14, v31);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = __p;
  }
  unsigned __int8 v32 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, void))(*(void *)a1 + 24))(a1, 7, &v50, v62);
  a3[3] = _resolveLength(v32, v14, v33);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = __p;
  }
  __int16 v34 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, void))(*(void *)a1 + 24))(a1, 8, &v49, v62);
  a3[4] = _resolveLength(v34, v14, v35);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  *a3 = *(double *)(a4 + 32) + *a3;
  v64.origin.CGFloat x = v22;
  v64.origin.CGFloat y = v23;
  v64.size.double width = v24;
  v64.size.CGFloat height = v25;
  a3[1] = a3[1] - CGRectGetMinX(v64);
  v65.origin.CGFloat x = v22;
  v65.origin.CGFloat y = v23;
  v65.size.double width = v24;
  v65.size.CGFloat height = v25;
  a3[2] = a3[2] - CGRectGetMinX(v65);
  if (v14) {
    CFRelease(v14);
  }
  double v36 = a3[3];
  double v37 = a3[4];
  EQKitPath::findStemForEdge(&v58, 1, (uint64_t)v54);
  if (v54[0])
  {
    EQKitPath::extractPath((EQKitPath *)&v58);
    uint64_t v38 = v59 + 16 * v55;
    double v40 = *(double *)v38;
    uint64_t v39 = *(void *)(v38 + 8);
    EQKitPath::extractPath((EQKitPath *)&v58);
    double v41 = *(double *)(v59 + 16 * v56);
    if (v40 >= v41) {
      double v42 = *(double *)(v59 + 16 * v56);
    }
    else {
      double v42 = v40;
    }
    if (v40 > v41) {
      double v41 = v40;
    }
    double v43 = v36 + v37 + a6 + v41 - v42;
    uint64_t v44 = v39;
    double v45 = a7;
    EQKitPath::appendSubpathRect((EQKitPath *)&v58, *(CGRect *)&v42);
  }
  Mutable = CGPathCreateMutable();
  memset(&v48, 0, sizeof(v48));
  CGAffineTransformMakeTranslation(&v48, -v22, -v23);
  EQKitPath::appendToCGPath((uint64_t *)&v58, Mutable, &v48, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  EQKitPath::~EQKitPath((EQKitPath *)&v58);
  return Mutable;
}

void sub_22353F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  EQKitPath::~EQKitPath((EQKitPath *)&a61);
  _Unwind_Resume(a1);
}

CGPath *virtual thunk to'EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar(void *a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  return EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar((uint64_t)a1 + *(void *)(*a1 - 176), a2, a3, a4, a5, a6, a7);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2, double a3, double a4, double *a5)
{
  v19.origin.CGFloat x = (*(double (**)(EQKit::Font::STIXCollection *, uint64_t, const EQKit::Script::Info *))(*(void *)this + 136))(this, 10188, a2);
  CGFloat MaxY = CGRectGetMaxY(v19);
  long long v16 = *MEMORY[0x263F001B0];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v10 = (const CGPath *)(*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, uint64_t, const EQKit::Script::Info *, long long *, double))(*(void *)this + 88))(this, 10188, 2, a2, &v16, a3 - MaxY);
  EQKitPath::EQKitPath((EQKitPath *)v15, v10);
  CGPathRelease(v10);
  EQKitPath::findStemForEdge(v15, 2, (uint64_t)v14);
  if (v14[0])
  {
    Mutable = CGPathCreateMutable();
    float64x2_t v13 = *(float64x2_t *)MEMORY[0x263F00148];
    EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v15, Mutable, &v13, 0, (const EQKitPath::Stem *)v14, a4);
  }
  else
  {
    Mutable = 0;
  }
  EQKitPath::~EQKitPath((EQKitPath *)v15);
  return Mutable;
}

void sub_22353F580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

CGPath *virtual thunk to'EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2, double a3, double a4, double *a5)
{
  return EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar((EQKit::Font::STIXCollection *)((char *)this + *(void *)(*(void *)this - 184)), a2, a3, a4, a5);
}

uint64_t EQKit::Font::STIXCollection::fontsLoaded(EQKit::Font::STIXCollection *this)
{
  return *((unsigned __int8 *)this + 376);
}

uint64_t virtual thunk to'EQKit::Font::STIXCollection::fontsLoaded(EQKit::Font::STIXCollection *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 208) + 376);
}

EQKit::Font::SlantKey *EQKit::Font::SlantKey::SlantKey(EQKit::Font::SlantKey *this, CTFontRef font, int a3)
{
  *((void *)this + 1) = 0;
  *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = -1;
  *((_DWORD *)this + 5) = a3;
  if (font)
  {
    if ((a3 - 0x10000) >> 20)
    {
      CFIndex v6 = 1;
      LOWORD(v5) = a3;
    }
    else
    {
      unsigned int v5 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      CFIndex v6 = 2;
    }
    characters[0] = v5;
    if (CTFontGetGlyphsForCharacters(font, characters, glyphs, v6)) {
      *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = glyphs[0];
    }
    *(void *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

EQKit::Font::SlantKey *EQKit::Font::SlantKey::SlantKey(EQKit::Font::SlantKey *this, const EQKit::Font::SlantKey *a2)
{
  long long v3 = *(const void **)a2;
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

{
  const void *v3;

  long long v3 = *(const void **)a2;
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t EQKit::Font::SlantKey::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    unsigned int v5 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v5) {
      CFRetain(v5);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a2 + 8);
    *(_WORD *)(a1 + ++*(void *)(this + 16) = *(_WORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  }
  return a1;
}

BOOL EQKit::Font::SlantKey::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  CFStringRef v2 = *(const __CFString **)a1;
  CFStringRef v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3) {
    return 1;
  }
  BOOL result = 0;
  if (v2 && v3) {
    return CFEqual(v2, v3);
  }
  return result;
}

BOOL EQKit::Font::SlantKey::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  unsigned int v3 = *(unsigned __int16 *)(a2 + 16);
  if (v2 < v3) {
    return 1;
  }
  if (v2 != v3) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  unsigned int v5 = *(_DWORD *)(a2 + 20);
  if (v4 < v5) {
    return 1;
  }
  if (v4 != v5) {
    return 0;
  }
  double v7 = *(double *)(a1 + 8);
  double v8 = *(double *)(a2 + 8);
  if (v7 < v8) {
    return 1;
  }
  if (v7 != v8) {
    return 0;
  }
  CFStringRef v9 = *(const __CFString **)a1;
  CFStringRef v10 = *(const __CFString **)a2;
  if (v9 && v10) {
    return CFStringCompare(v9, v10, 0) == kCFCompareLessThan;
  }
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  return !v11;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (void *)(a1 + 8);
  unsigned int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unsigned int v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = EQKit::Font::CharacterProperty::Map::Key::operator<((uint64_t)(v3 + 4), a2);
    double v7 = v3 + 1;
    if (!v6)
    {
      double v7 = v3;
      unsigned int v5 = v3;
    }
    unsigned int v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || EQKit::Font::CharacterProperty::Map::Key::operator<(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

BOOL EQKit::Font::CharacterProperty::Map::Key::operator<(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4) {
    return 1;
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v5 = a2 + 8;
  uint64_t v6 = v7;
  int v8 = *(char *)(v5 + 23);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v9 = a1 + 8;
  uint64_t v10 = v11;
  int v12 = *(char *)(v9 + 23);
  if (v12 >= 0) {
    size_t v13 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v13 = *(void *)(v9 + 8);
  }
  if (v12 < 0) {
    uint64_t v9 = v10;
  }
  if (v8 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    size_t v14 = *(void *)(v5 + 8);
  }
  if (v8 < 0) {
    uint64_t v5 = v6;
  }
  if (v14 >= v13) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v14;
  }
  int v16 = memcmp((const void *)v9, (const void *)v5, v15);
  if (v16) {
    return v16 < 0;
  }
  else {
    return v13 < v14;
  }
}

void EQKit::Font::CharacterProperty::Map::~Map(char **this)
{
}

void std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

uint64_t ___ZL22_ensureFontsDownloadedP7NSArrayIP8NSStringE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v7 = 138543618;
    uint64_t v8 = v4;
    __int16 v9 = 2114;
    uint64_t v10 = [NSNumber numberWithUnsignedInt:a2];
    _os_log_impl(&dword_2234CA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "#STIX fontFamily: %{public}@ fontUpdate: %{public}@", (uint8_t *)&v7, 0x16u);
  }
  if ((a2 - 6) >= 2 && a2 != 1)
  {
    if (a2 != 8) {
      return 1;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&_downloadFailuresLock);
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
    os_unfair_lock_unlock((os_unfair_lock_t)&_downloadFailuresLock);
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  if (!*(unsigned char *)(v5 + 24))
  {
    *(unsigned char *)(v5 + 24) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
  return 0;
}

EQKit::Font::STIXCollection::FontInfo *EQKit::Font::STIXCollection::FontInfo::FontInfo(EQKit::Font::STIXCollection::FontInfo *this, CFStringRef name)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  int v3 = (CFCharacterSetRef *)((char *)this + 8);
  uint64_t v4 = (char *)this + 16;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v5 = CTFontDescriptorCreateWithNameAndSize(name, 12.0);
  *(void *)this = CTFontCreateWithFontDescriptor(v5, 12.0, 0);
  CFRelease(v5);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)this;
    int v10 = 138412290;
    uint64_t v11 = v6;
    _os_log_impl(&dword_2234CA000, &_os_log_internal, OS_LOG_TYPE_INFO, "#STIX Created font: %@", (uint8_t *)&v10, 0xCu);
  }
  if (*(void *)this)
  {
    int v7 = (__CFString *)CTFontCopyPostScriptName(*(CTFontRef *)this);
    uint64_t v8 = v7;
    if (v7)
    {
      MEMORY[0x223CB8D60](v4, [(__CFString *)v7 UTF8String]);
      CFRelease(v8);
    }
    *int v3 = CTFontCopyCharacterSet(*(CTFontRef *)this);
  }
  return this;
}

void sub_22353FD14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::FontInfo::~FontInfo(EQKit::Font::STIXCollection::FontInfo *this)
{
  unsigned int v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(void *)this = 0;
  }
  int v3 = (const void *)*((void *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 1) = 0;
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void sub_22353FD88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(uint64_t a1, const void **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, a2[1]);
    EQKit::Font::CompositeStretch::~CompositeStretch(a2 + 5);
    operator delete(a2);
  }
}

void std::shared_ptr<EQKit::StemStretch::Glyph>::shared_ptr[abi:nn180100]<EQKit::StemStretch::Glyph,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22353FE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:nn180100]((EQKit::StemStretch::Glyph **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CB8F20);
}

EQKit::StemStretch::Glyph *std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::__on_zero_shared(uint64_t a1)
{
  BOOL result = *(EQKit::StemStretch::Glyph **)(a1 + 24);
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x223CB8F20);
  }
  return result;
}

EQKit::StemStretch::Glyph *std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:nn180100](EQKit::StemStretch::Glyph **a1, EQKit::StemStretch::Glyph *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x223CB8F20);
  }
  return result;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_223837D10;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_22353FFD8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unsigned int v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<EQKit::StemStretch::Key const,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,0>((EQKit::StemStretch::Key *)(v2 + 2));
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<EQKit::StemStretch::Key const,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,0>(EQKit::StemStretch::Key *this)
{
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  EQKit::StemStretch::Key::~Key((const void **)this);
}

void *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(void *a1, uint64_t a2)
{
  CFHashCode v4 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v4 = CFHash((CFTypeRef)v4);
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(void *)&v5) {
      CFHashCode v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = (*(void *)&v5 - 1) & v6;
  }
  int v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::StemStretch::Key::operator==((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
  unint64_t v10 = v8 ^ v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      CFHashCode v4 = v8 ^ v9;
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
    size_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          size_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
      else {
        CFHashCode v4 = v10;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
  }
  double v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *double v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(this + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  size_t v15 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:nn180100](v26, 0);
  return v15;
}

void sub_223540428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = v7;
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  v8[6] = 0;
  v8[7] = 0;
  v8[8] = 0;
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 1;
  return result;
}

void sub_2235404AC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(&STACK[0x560], 8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v++*((_WORD *)this + 12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v++*((_WORD *)this + 12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<EQKit::StemStretch::Key const,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,0>((EQKit::StemStretch::Key *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_223837D10;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2235407DC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (const void **)*v2;
      EQKit::StemStretch::Key::~Key(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_223837D10;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2235408E4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      int8x8_t v4 = (const void *)v2[2];
      if (v4) {
        CFRelease(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t *)v5;
        unsigned int v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    unint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:nn180100]((uint64_t)v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + ++*(void *)(this + 16) = 0;
  v6[8] = **a2;
  uint64_t result = EQKit::Font::CompositeStretch::CompositeStretch((void *)v6 + 5);
  *(unsigned char *)(a3 + ++*(void *)(this + 16) = 1;
  return result;
}

void sub_223540AA4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      EQKit::Font::CompositeStretch::~CompositeStretch(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(uint64_t a1)
{
  return a1;
}

void sub_223540B50(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(uint64_t a1)
{
  return a1;
}

void sub_223540BA0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(uint64_t a1)
{
  return a1;
}

void sub_223540BF0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>(uint64_t *a1, const EQKit::StemStretch::Key *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    unint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(v7, v10);
  }
  else {
    unint64_t v11 = 0;
  }
  size_t v14 = v11;
  size_t v15 = (EQKit::StemStretch::Key *)&v11[40 * v3];
  unint64_t v16 = v15;
  float v17 = &v11[40 * v10];
  EQKit::StemStretch::Key::Key(v15, a2);
  *((void *)v15 + 4) = *((void *)a2 + 4);
  unint64_t v16 = (EQKit::StemStretch::Key *)((char *)v16 + 40);
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_223540D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t result = a2[1];
  }
  else
  {
    do
    {
      uint64_t result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v6 - 40), (const EQKit::StemStretch::Key *)(v5 - 40));
      *(void *)(v6 - _Block_object_dispose(&STACK[0x560], 8) = *(void *)(v5 - 8);
      v5 -= 40;
      uint64_t v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  uint64_t v8 = *a1;
  *a1 = result;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + ++*(void *)(this + 16) = i - 40;
    EQKit::StemStretch::Key::~Key((const void **)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    char v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (const EQKit::StemStretch::Key *)a1;
      do
      {
        uint64_t v9 = v5;
        if ((*a3)((const void **)v5, (uint64_t)v8))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v13, v9);
          uint64_t v14 = *((void *)v8 + 9);
          uint64_t v10 = v7;
          while (1)
          {
            EQKit::StemStretch::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(void *)(a1 + v10 + 72) = *(void *)(a1 + v10 + 32);
            if (!v10) {
              break;
            }
            char v11 = (*a3)(v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          EQKit::StemStretch::Key::operator=(v12, (uint64_t)v13);
          *(void *)(v12 + 32) = v14;
          EQKit::StemStretch::Key::~Key(v13);
        }
        char v5 = (const EQKit::StemStretch::Key *)((char *)v9 + 40);
        v7 += 40;
        uint64_t v8 = v9;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v9 + 40) != a2);
    }
  }
}

void sub_223541384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    uint64_t v4 = a1;
    char v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if ((*a3)((const void **)v5, v4))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v8, v7);
          uint64_t v9 = *(void *)(v4 + 72);
          do
          {
            EQKit::StemStretch::Key::operator=(v4 + 40, v4);
            *(void *)(v4 + 72) = *(void *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)(v8, v4) & 1) != 0);
          EQKit::StemStretch::Key::operator=(v4 + 40, (uint64_t)v8);
          *(void *)(v4 + 72) = v9;
          EQKit::StemStretch::Key::~Key(v8);
        }
        char v5 = (const EQKit::StemStretch::Key *)((char *)v7 + 40);
        uint64_t v4 = (uint64_t)v7;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v7 + 40) != a2);
    }
  }
}

void sub_22354146C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, uint64_t a3, uint64_t (**a4)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)((EQKit::StemStretch::Key *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a2, a3);
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v10 = a1;
    uint64_t v11 = (uint64_t)a2;
    goto LABEL_9;
  }
  if (!result)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
    if (!(*a4)((EQKit::StemStretch::Key *)a3, a2)) {
      return 1;
    }
    uint64_t v10 = a2;
    uint64_t v11 = a3;
LABEL_9:
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, a3);
  return 1;
}

EQKit::StemStretch::Key *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(const void **, EQKit::StemStretch::Key *))
{
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
  uint64_t v11 = *((void *)a1 + 4);
  if ((*a3)(v10, (EQKit::StemStretch::Key *)(a2 - 40)))
  {
    char v6 = a1;
    do
      char v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (EQKit::StemStretch::Key *)((char *)a1 + 40);
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = (*a3)(v10, v7);
      uint64_t v7 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v6, a2);
    do
      char v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  if ((EQKit::StemStretch::Key *)((char *)v6 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v6 - 40);
    *((void *)a1 + 4) = *((void *)v6 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v6 - 40, (uint64_t)v10);
  *((void *)v6 - 1) = v11;
  EQKit::StemStretch::Key::~Key(v10);
  return v6;
}

void sub_2235416B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(char *, const void **))
{
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, a1);
  uint64_t v6 = 0;
  uint64_t v13 = *((void *)a1 + 4);
  do
  {
    char v7 = (*a3)((char *)a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  int v8 = (char *)a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if ((unint64_t)v8 >= a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)((char *)a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)((char *)a2, v12));
  }
  uint64_t v9 = (EQKit::StemStretch::Key *)((char *)a1 + v6);
  if ((unint64_t)v8 < a2)
  {
    unint64_t v10 = a2;
    do
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v9, v10);
      do
        uint64_t v9 = (EQKit::StemStretch::Key *)((char *)v9 + 40);
      while (((*a3)((char *)v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)((char *)v10, v12));
    }
    while ((unint64_t)v9 < v10);
  }
  if ((EQKit::StemStretch::Key *)((char *)v9 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v9 - 40);
    *((void *)a1 + 4) = *((void *)v9 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v9 - 40, (uint64_t)v12);
  *((void *)v9 - 1) = v13;
  EQKit::StemStretch::Key::~Key(v12);
  return (uint64_t)v9 - 40;
}

void sub_223541840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  BOOL v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((EQKit::StemStretch::Key *)((char *)a2 - 40), (EQKit::StemStretch::Key *)a1)) {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100]((EQKit::StemStretch::Key *)a1, (uint64_t)a2 - 40);
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (uint64_t)a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (uint64_t)a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (EQKit::StemStretch::Key *)(a1 + 120), (uint64_t)a2 - 40, a3);
      return v6;
    default:
      char v7 = (EQKit::StemStretch::Key *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), a1 + 80, a3);
      int v8 = (EQKit::StemStretch::Key *)(a1 + 120);
      if ((EQKit::StemStretch::Key *)(a1 + 120) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    char v7 = v8;
    v9 += 40;
    int v8 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
    if (v8 == a2) {
      return 1;
    }
  }
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v8);
  uint64_t v16 = *((void *)v8 + 4);
  uint64_t v11 = v9;
  while (1)
  {
    EQKit::StemStretch::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(void *)(a1 + v11 + 152) = *(void *)(a1 + v11 + 112);
    if (v11 == -80) {
      break;
    }
    char v12 = (*a3)((EQKit::StemStretch::Key *)v15, (EQKit::StemStretch::Key *)(a1 + v11 + 40));
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  uint64_t v13 = a1;
LABEL_12:
  EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
  *(void *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::StemStretch::Key::~Key(v15);
    goto LABEL_14;
  }
  BOOL v6 = (EQKit::StemStretch::Key *)((char *)v8 + 40) == a2;
  EQKit::StemStretch::Key::~Key(v15);
  return v6;
}

void sub_223541A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](EQKit::StemStretch::Key *a1, uint64_t a2)
{
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v5, a1);
  EQKit::StemStretch::Key::operator=((uint64_t)a1, a2);
  EQKit::StemStretch::Key::operator=(a2, (uint64_t)v5);
  EQKit::StemStretch::Key::~Key(v5);
  uint64_t v4 = *((void *)a1 + 4);
  *((void *)a1 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
}

void sub_223541B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t a4, uint64_t (**a5)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((EQKit::StemStretch::Key *)a4, a3))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
      {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, EQKit::StemStretch::Key *a4, uint64_t a5, uint64_t (**a6)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((EQKit::StemStretch::Key *)a5, a4))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
        {
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
        }
      }
    }
  }
}

EQKit::StemStretch::Key *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = (EQKit::StemStretch::Key *)((char *)a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, v12);
        char v12 = (const EQKit::StemStretch::Key *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((EQKit::StemStretch::Key *)v6 != a3)
    {
      uint64_t v14 = (EQKit::StemStretch::Key *)v6;
      do
      {
        if ((*a4)((uint64_t)v14, (uint64_t)a1))
        {
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v14, (uint64_t)a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, a1);
        }
        uint64_t v14 = (EQKit::StemStretch::Key *)((char *)v14 + 40);
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 41)
    {
      unint64_t v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return (EQKit::StemStretch::Key *)v13;
  }
  return a3;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, const EQKit::StemStretch::Key *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v11 = a1 + 40 * v10;
      int64_t v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        int64_t v10 = v12;
      }
      if (((*a2)(v11, (uint64_t)v5) & 1) == 0)
      {
        EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v5);
        uint64_t v16 = *((void *)v5 + 4);
        do
        {
          uint64_t v13 = v11;
          EQKit::StemStretch::Key::operator=((uint64_t)v5, v11);
          *((void *)v5 + 4) = *(void *)(v11 + 32);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          uint64_t v11 = a1 + 40 * v14;
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            int64_t v10 = v14;
          }
          char v5 = (const EQKit::StemStretch::Key *)v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
        *(void *)(v13 + 32) = v16;
        EQKit::StemStretch::Key::~Key(v15);
      }
    }
  }
}

void sub_223541F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
    uint64_t v11 = *((void *)a1 + 4);
    uint64_t v8 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::StemStretch::Key::operator=(v8, (uint64_t)v10);
      *(void *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::StemStretch::Key::operator=(v8, a2 - 40);
      *(void *)(v9 + 32) = *(void *)(a2 - 8);
      EQKit::StemStretch::Key::operator=(a2 - 40, (uint64_t)v10);
      *(void *)(a2 - _Block_object_dispose(&STACK[0x560], 8) = v11;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v9 + 40, (uint64_t (**)(uint64_t, const void **))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - (uint64_t)a1) >> 3));
    }
    EQKit::StemStretch::Key::~Key(v10);
  }
}

void sub_223542094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      uint64_t v10 = v11;
    }
    EQKit::StemStretch::Key::operator=(a1, v9);
    *(void *)(a1 + 32) = *(void *)(v9 + 32);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, const void **), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = a1 + 40 * (v4 >> 1);
    uint64_t v10 = (const EQKit::StemStretch::Key *)(a2 - 40);
    if ((*a3)(v9, (const void **)(a2 - 40)))
    {
      EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, v10);
      uint64_t v13 = *(void *)(a2 - 8);
      do
      {
        uint64_t v11 = v9;
        EQKit::StemStretch::Key::operator=((uint64_t)v10, v9);
        *((void *)v10 + 4) = *(void *)(v9 + 32);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = a1 + 40 * v8;
        uint64_t v10 = (const EQKit::StemStretch::Key *)v11;
      }
      while (((*a3)(v9, v12) & 1) != 0);
      EQKit::StemStretch::Key::operator=(v11, (uint64_t)v12);
      *(void *)(v11 + 32) = v13;
      EQKit::StemStretch::Key::~Key(v12);
    }
  }
}

void sub_223542258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>>::reset[abi:nn180100](v4, 0);
    return 1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = result + 2;
  *(unsigned char *)(a3 + ++*(void *)(this + 16) = 1;
  return result;
}

void std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    unint64_t v4 = (const void **)v1[1];
    uint8x8_t v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::StemStretch::Key::~Key(v4 - 5);
      while (v4 != v2);
      uint8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      EQKit::StemStretch::Key::~Key(v2 + 2);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
  unint64_t v10 = v8 ^ v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      CFHashCode v4 = v8 ^ v9;
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
      else {
        CFHashCode v4 = v10;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *char v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(this + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v15 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v26, 0);
  return v15;
}

void sub_2235427AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = v7;
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  *((_DWORD *)v8 + ++*((_WORD *)this + 12) = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 1;
  return result;
}

void sub_223542830(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(void *a1, uint64_t a2)
{
  CFHashCode v4 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v4 = CFHash((CFTypeRef)v4);
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(void *)&v5) {
      CFHashCode v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = (*(void *)&v5 - 1) & v6;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::Font::SlantKey::operator==((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
  unint64_t v10 = v8 ^ v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      CFHashCode v4 = v8 ^ v9;
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::Font::SlantKey::operator==((uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
      else {
        CFHashCode v4 = v10;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *v26 = *v23;
    *char v23 = v26;
  }
  else
  {
    void *v26 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(this + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      unint64_t v24 = *(void *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  unint64_t v15 = v26;
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_223542BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>::operator()[abi:nn180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x40uLL);
  *(void *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:nn180100]<EQKit::Font::SlantKey const&>((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 1;
  return result;
}

void sub_223542C44(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:nn180100]<EQKit::Font::SlantKey const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + ++*(void *)(this + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (v3) {
    CFRetain(v3);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>::operator()[abi:nn180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (const void *)__p[2];
    if (v3) {
      CFRelease(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_223837D10;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_223542D84(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  CFHashCode v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

BOOL EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(a2 - 4, (int *)v11);
          if (result)
          {
            int v23 = *(_DWORD *)v11;
            *(_DWORD *)uint64_t v11 = *(a2 - 4);
            *(a2 - 4) = v23;
            uint64_t v24 = *(void *)(v11 + 8);
            *(void *)(v11 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v24;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v11, (int *)(v11 + 16), a2 - 4, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 4), a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, v11 + 16, v11 + 32, v11 + 48, (uint64_t)(a2 - 4), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        return std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(v11, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v11, (int *)(v11 + 16 * (v15 >> 1)), a2 - 4, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v11 + 16), (int *)(v17 - 16), a2 - 8, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v11 + 32), (int *)(v11 + 16 + 16 * v16), a2 - 12, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v17 - 16), (int *)v17, (int *)(v11 + 16 + 16 * v16), a3);
      int v18 = *(_DWORD *)v11;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v17;
      *(_DWORD *)unint64_t v17 = v18;
      uint64_t v19 = *(void *)(v11 + 8);
      *(void *)(v11 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(v17 + 8);
      *(void *)(v17 + _Block_object_dispose(&STACK[0x560], 8) = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v11 + 16 * (v15 >> 1)), (int *)v11, a2 - 4, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)((int *)(v11 - 16), (int *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v11, (unint64_t)a2, (uint64_t (**)(long long *, int *))a3);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v20 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v11, (unint64_t)a2, (uint64_t (**)(int *, long long *))a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, v20, a3);
    uint64_t v11 = (uint64_t)(v20 + 4);
    uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((uint64_t)(v20 + 4), a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v10, v20, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v20 + 4);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
}

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v16 = v3;
    uint64_t v17 = v4;
    uint64_t v6 = result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (_OWORD *)result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v15 = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_DWORD *)(v13 + ++*(void *)(this + 16) = *(_DWORD *)(v6 + v12);
            *(void *)(v13 + 24) = *(void *)(v6 + v12 + 8);
            if (!v12) {
              break;
            }
            v12 -= 16;
            uint64_t result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(_DWORD *)uint64_t v14 = v15;
          *(void *)(v14 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)&v15 + 1);
        }
        uint64_t v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    uint64_t v6 = (_OWORD *)result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = result - 16;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *v6;
          uint64_t v11 = v9;
          do
          {
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 16);
            *(void *)(v11 + 40) = *(void *)(v11 + 24);
            uint64_t result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_DWORD *)(v11 + 32) = v12;
          *(void *)(v11 + 40) = *((void *)&v12 + 1);
        }
        uint64_t v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(int *a1, int *a2, int *a3, uint64_t (**a4)(int *, int *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    int v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      uint64_t v11 = (uint64_t *)(a3 + 2);
      uint64_t result = 1;
      long long v12 = (uint64_t *)(a1 + 2);
LABEL_9:
      long long v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    uint64_t v17 = *((void *)a1 + 1);
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v17;
    if ((*a4)(a3, a2))
    {
      int v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v11 = (uint64_t *)(a3 + 2);
      uint64_t result = 2;
      long long v12 = (uint64_t *)(a2 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    long long v15 = (uint64_t *)(a2 + 2);
    uint64_t v14 = *((void *)a2 + 1);
    *((void *)a2 + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v14;
    if ((*a4)(a2, a1))
    {
      int v16 = *a1;
      *a1 = *a2;
      long long v12 = (uint64_t *)(a1 + 2);
      *a2 = v16;
      uint64_t result = 2;
LABEL_10:
      uint64_t v19 = *v12;
      *long long v12 = *v15;
      *long long v15 = v19;
      return result;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(long long *, int *))
{
  unint64_t v4 = a2;
  long long v12 = *(_OWORD *)a1;
  if ((*a3)(&v12, (int *)(a2 - 16)))
  {
    uint64_t v6 = a1;
    do
      v6 += 4;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 4;
    do
    {
      uint64_t v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v12, v7);
      uint64_t v7 = v6 + 4;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    int v9 = *v6;
    *uint64_t v6 = *(_DWORD *)v4;
    *(_DWORD *)unint64_t v4 = v9;
    uint64_t v10 = *((void *)v6 + 1);
    *((void *)v6 + 1) = *(void *)(v4 + 8);
    *(void *)(v4 + _Block_object_dispose(&STACK[0x560], 8) = v10;
    do
      v6 += 4;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  if (v6 - 4 != a1)
  {
    *a1 = *(v6 - 4);
    *((void *)a1 + 1) = *((void *)v6 - 1);
  }
  *(v6 - 4) = v12;
  *((void *)v6 - 1) = *((void *)&v12 + 1);
  return v6;
}

int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(int *, long long *))
{
  uint64_t v6 = 0;
  long long v13 = *(_OWORD *)a1;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  unint64_t v7 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 16;
    }
    while (((*a3)((int *)a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*a3)((int *)a2, &v13));
  }
  int v8 = (long long *)&a1[v6];
  if (v7 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      int v10 = *(_DWORD *)v8;
      *(_DWORD *)int v8 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = v10;
      uint64_t v11 = *((void *)v8 + 1);
      *((void *)v8 + 1) = *(void *)(v9 + 8);
      *(void *)(v9 + _Block_object_dispose(&STACK[0x560], 8) = v11;
      do
        ++v8;
      while (((*a3)((int *)v8, &v13) & 1) != 0);
      do
        v9 -= 16;
      while (!(*a3)((int *)v9, &v13));
    }
    while ((unint64_t)v8 < v9);
  }
  uint64_t result = (int *)(v8 - 1);
  if (v8 - 1 != (long long *)a1)
  {
    *a1 = *((_DWORD *)v8 - 4);
    *((void *)a1 + 1) = *((void *)v8 - 1);
  }
  *((_DWORD *)v8 - 4) = v13;
  *((void *)v8 - 1) = *((void *)&v13 + 1);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, int *a2, uint64_t (**a3)(int *, int *))
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 4, (int *)a1))
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), a2 - 4, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 4), a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 4), a3);
      return 1;
    default:
      int v10 = (int *)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a3);
      uint64_t v11 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_DWORD *)(v15 + 4_Block_object_dispose(&STACK[0x560], 8) = *(_DWORD *)(a1 + v14 + 32);
        *(void *)(v15 + 56) = *(void *)(a1 + v14 + 40);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (((*a3)((int *)&v17, (int *)(v15 + 16)) & 1) == 0)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v16 = v17;
      *(void *)(v16 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)&v17 + 1);
      if (++v13 == 8) {
        return v11 + 4 == a2;
      }
    }
    int v10 = v11;
    v12 += 16;
    v11 += 4;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(int *, int *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)a2, (int *)a3, a5);
  uint64_t result = (*a5)((int *)a4, (int *)a3);
  if (result)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a4 + 8);
    *(void *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = v12;
    uint64_t result = (*a5)((int *)a3, (int *)a2);
    if (result)
    {
      int v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a3 + 8);
      *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v14;
      uint64_t result = (*a5)((int *)a2, (int *)a1);
      if (result)
      {
        int v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a2 + 8);
        *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(int *, int *))
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((int *)a5, (int *)a4);
  if (result)
  {
    int v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    uint64_t v14 = *(void *)(a4 + 8);
    *(void *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a5 + 8);
    *(void *)(a5 + _Block_object_dispose(&STACK[0x560], 8) = v14;
    uint64_t result = (*a6)((int *)a4, (int *)a3);
    if (result)
    {
      int v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      uint64_t v16 = *(void *)(a3 + 8);
      *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a4 + 8);
      *(void *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = v16;
      uint64_t result = (*a6)((int *)a3, (int *)a2);
      if (result)
      {
        int v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        uint64_t v18 = *(void *)(a2 + 8);
        *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a3 + 8);
        *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v18;
        uint64_t result = (*a6)((int *)a2, (int *)a1);
        if (result)
        {
          int v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          uint64_t v20 = *(void *)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a2 + 8);
          *(void *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          int v15 = *(_DWORD *)v14;
          *(_DWORD *)uint64_t v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          uint64_t v16 = *(void *)(v14 + 8);
          *(void *)(v14 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v16;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, (long long *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v17 = (unint64_t)v8 >> 4;
      uint64_t v18 = a2 - 16;
      do
      {
        int v19 = *(_DWORD *)a1;
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v21 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)uint64_t v21 = v19;
          *(void *)(v21 + _Block_object_dispose(&STACK[0x560], 8) = v20;
        }
        else
        {
          *(_DWORD *)uint64_t v21 = *(_DWORD *)v18;
          *(void *)(v21 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(v18 + 8);
          *(_DWORD *)uint64_t v18 = v19;
          *(void *)(v18 + _Block_object_dispose(&STACK[0x560], 8) = v20;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, v21 + 16, (uint64_t (**)(uint64_t, uint64_t))a4, (v21 + 16 - a1) >> 4);
        }
        v18 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    unint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 3;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = result + 16 * (v12 + 1);
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        uint64_t v13 = v15;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        long long v19 = *v7;
        do
        {
          uint64_t v16 = v14;
          *(_DWORD *)unint64_t v7 = *(_DWORD *)v14;
          *((void *)v7 + 1) = *(void *)(v14 + 8);
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = v8 + 16 * v17;
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, &v19);
          unint64_t v7 = (long long *)v16;
          uint64_t v13 = v17;
        }
        while (!result);
        *(_DWORD *)uint64_t v16 = v19;
        *(void *)(v16 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)&v19 + 1);
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      v9 += 16;
      uint64_t v10 = v11;
    }
    *(_DWORD *)a1 = *(_DWORD *)v9;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(v9 + 8);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = result + 16 * (v6 >> 1);
    uint64_t v11 = (long long *)(a2 - 16);
    uint64_t result = (*a3)(v10, a2 - 16);
    if (result)
    {
      long long v13 = *v11;
      do
      {
        uint64_t v12 = v10;
        *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
        *((void *)v11 + 1) = *(void *)(v10 + 8);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = v8 + 16 * v9;
        uint64_t result = (*a3)(v10, (uint64_t)&v13);
        uint64_t v11 = (long long *)v12;
      }
      while ((result & 1) != 0);
      *(_DWORD *)uint64_t v12 = v13;
      *(void *)(v12 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)&v13 + 1);
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x58uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 1_Block_object_dispose(&STACK[0x560], 8) = 0;
  *((unsigned char *)v11 + 76) = -1;
  v11[10] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(void *)(this + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2235442E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EQKit::Font::STIXCollection::setupRequiredFontInfos(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  int v1 = 138543362;
  uint64_t v2 = a1;
  _os_log_error_impl(&dword_2234CA000, &_os_log_internal, OS_LOG_TYPE_ERROR, "#STIX failed to download fonts: %{public}@", (uint8_t *)&v1, 0xCu);
}

void EQKit::Font::STIXCollection::setupRequiredFontInfos()
{
  *(_WORD *)id v0 = 0;
  _os_log_error_impl(&dword_2234CA000, &_os_log_internal, OS_LOG_TYPE_ERROR, "#STIX failed to download fonts -- timeout", v0, 2u);
}

void sub_2235445AC(_Unwind_Exception *a1)
{
}

void sub_223544838(_Unwind_Exception *a1)
{
}

void sub_223544940(_Unwind_Exception *a1)
{
}

BOOL EQKit::Unicode::isPseudoScript(EQKit::Unicode *this)
{
  unsigned int v1 = this;
  if (EQKit::Unicode::pseudoScriptSet(void)::onceToken != -1) {
    dispatch_once(&EQKit::Unicode::pseudoScriptSet(void)::onceToken, &__block_literal_global_2);
  }
  uint64_t v2 = *(void *)(EQKit::Unicode::pseudoScriptSet(void)::set + 8);
  if (!v2) {
    goto LABEL_14;
  }
  uint64_t v3 = EQKit::Unicode::pseudoScriptSet(void)::set + 8;
  do
  {
    unsigned int v4 = *(_DWORD *)(v2 + 28);
    BOOL v5 = v4 >= v1;
    if (v4 >= v1) {
      unint64_t v6 = (uint64_t *)v2;
    }
    else {
      unint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == EQKit::Unicode::pseudoScriptSet(void)::set + 8 || *(_DWORD *)(v3 + 28) > v1) {
LABEL_14:
  }
    uint64_t v3 = EQKit::Unicode::pseudoScriptSet(void)::set + 8;
  return v3 != EQKit::Unicode::pseudoScriptSet(void)::set + 8;
}

uint64_t EQKit::Unicode::variationSelector(EQKit::Unicode *this)
{
  if ((this - 917760) >= 0xF0) {
    unsigned int v1 = 0;
  }
  else {
    unsigned int v1 = this - 917743;
  }
  if (this >> 4 == 4064) {
    return (this - 65023);
  }
  else {
    return v1;
  }
}

void ___ZN5EQKit7UnicodeL15pseudoScriptSetEv_block_invoke()
{
}

void sub_223544A88(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t std::set<unsigned int>::set[abi:nn180100]<unsigned int const*>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  unsigned int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + ++*(void *)(this + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223544B18(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  unint64_t v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint8x8_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint8x8_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      float v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        float v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          BOOL v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        BOOL v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t EQKitPseudoUnitLength::EQKitPseudoUnitLength(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  unsigned int v4 = (void *)[NSString stringWithUTF8String:v3];
  uint64_t v5 = objc_msgSend(v4, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet"));
  unsigned int v6 = (void *)[objc_alloc(MEMORY[0x263F08B08]) initWithString:v5];
  if ([v6 scanString:@"+" intoString:0])
  {
    int v7 = 2;
  }
  else if ([v6 scanString:@"-" intoString:0])
  {
    int v7 = 3;
  }
  else
  {
    if ([v6 isAtEnd])
    {
      *(_DWORD *)(a1 + ++*(void *)(this + 16) = 0;
      goto LABEL_12;
    }
    int v7 = 1;
  }
  *(_DWORD *)(a1 + ++*(void *)(this + 16) = v7;
LABEL_12:
  unint64_t v8 = objc_msgSend((id)objc_msgSend(v6, "string"), "substringFromIndex:", objc_msgSend(v6, "scanLocation"));
  std::string::basic_string[abi:nn180100]<0>(&v42, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet")), "UTF8String"));

  std::string::basic_string[abi:nn180100]<0>(v40, "height");
  std::string::basic_string[abi:nn180100]<0>(v38, "depth");
  std::string::basic_string[abi:nn180100]<0>(__p, "width");
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint8x8_t v9 = &v42;
  }
  else {
    uint8x8_t v9 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v10 = v40;
  }
  else {
    uint64_t v10 = (void **)v40[0];
  }
  if ((v41 & 0x80u) == 0) {
    int64_t v11 = v41;
  }
  else {
    int64_t v11 = (int64_t)v40[1];
  }
  if (!v11)
  {
    std::string::size_type v16 = 0;
LABEL_44:
    int v17 = 1;
    goto LABEL_61;
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v42.__r_.__value_.__l.__size_;
  }
  float v13 = (char *)v9 + size;
  if (size >= v11)
  {
    int v18 = *(char *)v10;
    int64_t v19 = size;
    uint64_t v20 = v9;
    do
    {
      int64_t v21 = v19 - v11;
      if (v21 == -1) {
        break;
      }
      unsigned int v22 = (char *)memchr(v20, v18, v21 + 1);
      if (!v22) {
        break;
      }
      int v23 = v22;
      if (!memcmp(v22, v10, v11))
      {
        if (v23 != v13)
        {
          std::string::size_type v16 = v23 - (char *)v9;
          if (v23 - (char *)v9 != -1) {
            goto LABEL_44;
          }
        }
        break;
      }
      uint64_t v20 = (std::string *)(v23 + 1);
      int64_t v19 = v13 - (v23 + 1);
    }
    while (v19 >= v11);
  }
  if ((v39 & 0x80u) == 0) {
    BOOL v14 = v38;
  }
  else {
    BOOL v14 = (void **)v38[0];
  }
  if ((v39 & 0x80u) == 0) {
    int64_t v11 = v39;
  }
  else {
    int64_t v11 = (int64_t)v38[1];
  }
  if (!v11)
  {
    std::string::size_type v16 = 0;
LABEL_52:
    int v17 = 2;
    goto LABEL_61;
  }
  if (size >= v11)
  {
    int v24 = *(char *)v14;
    int64_t v25 = size;
    double v26 = v9;
    do
    {
      int64_t v27 = v25 - v11;
      if (v27 == -1) {
        break;
      }
      double v28 = (char *)memchr(v26, v24, v27 + 1);
      if (!v28) {
        break;
      }
      double v29 = v28;
      if (!memcmp(v28, v14, v11))
      {
        if (v29 != v13)
        {
          std::string::size_type v16 = v29 - (char *)v9;
          if (v29 - (char *)v9 != -1) {
            goto LABEL_52;
          }
        }
        break;
      }
      double v26 = (std::string *)(v29 + 1);
      int64_t v25 = v13 - (v29 + 1);
    }
    while (v25 >= v11);
  }
  if ((v37 & 0x80u) == 0) {
    unsigned int v15 = __p;
  }
  else {
    unsigned int v15 = (void **)__p[0];
  }
  if ((v37 & 0x80u) == 0) {
    int64_t v11 = v37;
  }
  else {
    int64_t v11 = (int64_t)__p[1];
  }
  if (!v11)
  {
    std::string::size_type v16 = 0;
LABEL_60:
    int v17 = 3;
LABEL_61:
    *(_DWORD *)(a1 + 20) = v17;
    std::string::erase(&v42, v16, v11);
    goto LABEL_62;
  }
  if (size >= v11)
  {
    int v31 = *(char *)v15;
    unsigned __int8 v32 = v9;
    do
    {
      if (size - v11 == -1) {
        break;
      }
      double v33 = (char *)memchr(v32, v31, size - v11 + 1);
      if (!v33) {
        break;
      }
      __int16 v34 = v33;
      if (!memcmp(v33, v15, v11))
      {
        if (v34 != v13)
        {
          std::string::size_type v16 = v34 - (char *)v9;
          if (v34 - (char *)v9 != -1) {
            goto LABEL_60;
          }
        }
        break;
      }
      unsigned __int8 v32 = (std::string *)(v34 + 1);
      int64_t size = v13 - (v34 + 1);
    }
    while (size >= v11);
  }
  *(_DWORD *)(a1 + 20) = 0;
LABEL_62:
  EQKitLength::EQKitLength(&v35, &v42, 1);
  *(_OWORD *)a1 = v35;
  if (*(_DWORD *)(a1 + 20) && (*(_DWORD *)a1 | 2) != 6)
  {
    *(_DWORD *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  if ((char)v37 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v39 < 0) {
    operator delete(v38[0]);
  }
  if ((char)v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_223545154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

double EQKitPseudoUnitLength::adjustedLength(EQKitPseudoUnitLength *this, double a2, double a3)
{
  int v3 = *((_DWORD *)this + 4);
  if (v3 != 1)
  {
    if (v3 == 3)
    {
      return a2 - a3;
    }
    else if (v3 == 2)
    {
      return a2 + a3;
    }
    else
    {
      return a2;
    }
  }
  return a3;
}

double EQKitPseudoUnitLength::calculatePseudoAdjustment(EQKitPseudoUnitLength *this, double a2)
{
  double result = *((double *)this + 1) * a2;
  if (*(_DWORD *)this == 4) {
    return result / 100.0;
  }
  return result;
}

double EQKitPseudoUnitLength::adjustedPseudoLength(EQKitPseudoUnitLength *this, double a2, double a3, double a4, double a5)
{
  int v5 = *((_DWORD *)this + 5);
  switch(v5)
  {
    case 3:
      double v6 = *((double *)this + 1) * a5;
      break;
    case 2:
      double v6 = *((double *)this + 1) * a4;
      break;
    case 1:
      double v6 = *((double *)this + 1) * a3;
      break;
    default:
      return a2;
  }
  if (*(_DWORD *)this == 4) {
    double v6 = v6 / 100.0;
  }
  int v7 = *((_DWORD *)this + 4);
  if (v7 != 1)
  {
    if (v7 == 3) {
      return a2 - v6;
    }
    if (v7 == 2) {
      return v6 + a2;
    }
    return a2;
  }
  return v6;
}

double EQKitPseudoUnitLength::resolveToAbsoluteLength(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v9 = a3;
  double v11 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)a1, a2, a3);
  if (*(_DWORD *)(a1 + 20))
  {
    return EQKitPseudoUnitLength::adjustedPseudoLength((EQKitPseudoUnitLength *)a1, v9, a4, a5, a6);
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 16);
    switch(v13)
    {
      case 1:
        return v11;
      case 3:
        return v9 - v11;
      case 2:
        return v11 + v9;
    }
    return v9;
  }
}

void sub_2235457B8(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1020C408D4A57B4);
  _Unwind_Resume(a1);
}

void sub_223545B54(_Unwind_Exception *a1)
{
}

BOOL EQKit::ScriptLevel::fromString(const std::string *a1, uint64_t a2)
{
  std::istringstream::basic_istringstream[abi:nn180100](v9, a1, 8);
  unsigned int v3 = std::istream::peek() << 24;
  BOOL v5 = v3 == 721420288 || v3 == 754974720;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  MEMORY[0x223CB8DF0](v9, &v8);
  int v6 = *(_DWORD *)((unsigned char *)&v9[4] + *(void *)(v9[0] - 24)) & 7;
  if (v6 == 2)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  }
  v9[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v9 + *(void *)(v9[0] - TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  void v9[2] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223CB8ED0](&v11);
  return v6 == 2;
}

void sub_223545D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::ScriptLevel::resolveWithBase(EQKit::ScriptLevel *this, uint64_t a2)
{
  if (*((unsigned char *)this + 8)) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 + *(void *)this;
}

void EQKitGroupAlignmentContext::EQKitGroupAlignmentContext(EQKitGroupAlignmentContext *this, const EQKitGroupAlignmentContext *a2)
{
  unsigned int v3 = std::vector<unsigned long>::vector(this, (uint64_t)a2);
  std::vector<unsigned long>::vector(v3 + 3, (uint64_t)a2 + 24);
}

void sub_223545DB8(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void EQKitGroupAlignmentContext::addRow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1] - *a1;
  uint64_t v5 = (uint64_t)(a1 + 3);
  if (v4 != a1[4] - a1[3])
  {
    std::string::size_type v16 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void EQKitGroupAlignmentContext::addRow(const std::vector<EQKitAlignmentGroup> &)"), @"EQKitGroupAlignmentContext.mm", 21, @"should have the same number of left widths as right widths");
    uint64_t v4 = a1[1] - *a1;
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
  if (v8 > v4 >> 3)
  {
    uint64_t v17 = 0;
    std::vector<double>::resize((uint64_t)a1, v8, &v17);
    uint64_t v17 = 0;
    std::vector<double>::resize(v5, v8, &v17);
  }
  if (v6 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v11 = (EQKitAlignmentGroup *)(*a2 + v9);
      uint64_t v12 = *a1;
      double v13 = EQKitAlignmentGroup::leftWidth(v11);
      if (*(double *)(v12 + 8 * v10) >= v13) {
        double v13 = *(double *)(v12 + 8 * v10);
      }
      *(double *)(*a1 + 8 * v10) = v13;
      uint64_t v14 = a1[3];
      double v15 = EQKitAlignmentGroup::rightWidth(v11);
      if (*(double *)(v14 + 8 * v10) >= v15) {
        double v15 = *(double *)(v14 + 8 * v10);
      }
      *(double *)(a1[3] + 8 * v10++) = v15;
      v9 += 24;
    }
    while (v8 != v10);
  }
}

void EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  unint64_t v5 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3;
  if (v5 <= a3)
  {
    uint64_t v7 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(const EQKitAlignmentGroup &, NSUInteger) const"), @"EQKitGroupAlignmentContext.mm", 42, @"invalid group index");
    unint64_t v5 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3;
  }
  if (v5 > a3) {
    EQKitAlignmentGroup::leftWidth(a2);
  }
}

void EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  unint64_t v5 = (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3;
  if (v5 <= a3)
  {
    uint64_t v7 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(const EQKitAlignmentGroup &, NSUInteger) const"), @"EQKitGroupAlignmentContext.mm", 48, @"invalid group index");
    unint64_t v5 = (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3;
  }
  if (v5 > a3) {
    EQKitAlignmentGroup::rightWidth(a2);
  }
}

double EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(EQKitGroupAlignmentContext *this, uint64_t a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = (double *)*((void *)this + 1);
  uint64_t v6 = (uint64_t)v4 - *(void *)this;
  if (v6 != *((void *)this + 4) - *((void *)this + 3))
  {
    uint64_t v17 = (void *)[MEMORY[0x263F08690] currentHandler];
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(NSUInteger) const"), @"EQKitGroupAlignmentContext.mm", 54, @"should have the same number of left widths as right widths");
    uint64_t v5 = *(void *)this;
    uint64_t v4 = (double *)*((void *)this + 1);
    uint64_t v6 = (uint64_t)v4 - *(void *)this;
  }
  uint64_t v7 = a2 + 1;
  double result = 0.0;
  if (a2 + 1 < (unint64_t)(v6 >> 3))
  {
    uint64_t v9 = (double *)(v5 + 8 * v7);
    double v10 = 0.0;
    if (v9 != v4)
    {
      float v11 = 0.0;
      do
      {
        double v12 = *v9++;
        float v11 = v12 + v11;
      }
      while (v9 != v4);
      double v10 = v11 + 0.0;
    }
    double v13 = (double *)*((void *)this + 4);
    uint64_t v14 = (double *)(*((void *)this + 3) + 8 * v7);
    if (v14 != v13)
    {
      float v15 = 0.0;
      do
      {
        double v16 = *v14++;
        float v15 = v16 + v15;
      }
      while (v14 != v13);
      double result = v15;
    }
    return v10 + result;
  }
  return result;
}

uint64_t EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t result, int a2)
{
  *(void *)double result = 0;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(result + ++*(void *)(this + 16) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

{
  *(void *)double result = 0;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x560], 8) = a2;
  *(void *)(result + ++*(void *)(this + 16) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

double EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(_DWORD *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + ++*(void *)(this + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(_DWORD *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + ++*(void *)(this + 16) = result;
  return result;
}

double EQKitAlignmentGroup::increaseWidth(EQKitAlignmentGroup *this, double a2)
{
  double result = *(double *)this + a2;
  *(double *)this = result;
  return result;
}

BOOL EQKitAlignmentGroup::needsDecimalAlignmentPoint(EQKitAlignmentGroup *this)
{
  return *((_DWORD *)this + 2) == 4 && *((double *)this + 2) == 1.79769313e308;
}

double EQKitAlignmentGroup::saveAlignmentPoint(EQKitAlignmentGroup *this, double a2)
{
  double result = *(double *)this + a2;
  *((double *)this + 2) = result;
  return result;
}

double EQKitAlignmentGroup::leftWidth(EQKitAlignmentGroup *this)
{
  double result = *((double *)this + 2);
  if (result == 1.79769313e308)
  {
    int v2 = *((_DWORD *)this + 2);
    if ((v2 - 3) >= 2)
    {
      double result = 0.0;
      if (v2 == 2) {
        return *(double *)this * 0.5;
      }
    }
    else
    {
      return *(double *)this;
    }
  }
  return result;
}

double EQKitAlignmentGroup::rightWidth(EQKitAlignmentGroup *this)
{
  double v1 = *(double *)this;
  double v2 = *((double *)this + 2);
  if (v2 == 1.79769313e308)
  {
    int v3 = *((_DWORD *)this + 2);
    double v2 = *(double *)this;
    if ((v3 - 3) >= 2)
    {
      double v2 = 0.0;
      if (v3 == 2) {
        double v2 = v1 * 0.5;
      }
    }
  }
  return v1 - v2;
}

void sub_2235463B8(_Unwind_Exception *a1)
{
}

void sub_223546484(_Unwind_Exception *a1)
{
}

uint64_t EQKitUtilGetDeviceColorSpace()
{
  if (EQKitUtilGetDeviceColorSpace::onceToken != -1) {
    dispatch_once(&EQKitUtilGetDeviceColorSpace::onceToken, &__block_literal_global_3);
  }
  return EQKitUtilGetDeviceColorSpace::sDeviceColor;
}

CGColorSpaceRef __EQKitUtilGetDeviceColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
  EQKitUtilGetDeviceColorSpace::sDeviceColor = (uint64_t)result;
  return result;
}

uint64_t EQKitUtilGetFakeContext()
{
  if (EQKitUtilGetFakeContext::onceToken != -1) {
    dispatch_once(&EQKitUtilGetFakeContext::onceToken, &__block_literal_global_2);
  }
  return EQKitUtilGetFakeContext::sFakeContext;
}

CGContextRef __EQKitUtilGetFakeContext_block_invoke()
{
  if (EQKitUtilGetDeviceColorSpace::onceToken != -1) {
    dispatch_once(&EQKitUtilGetDeviceColorSpace::onceToken, &__block_literal_global_3);
  }
  CGContextRef result = CGBitmapContextCreate(0, 1uLL, 1uLL, 8uLL, 4uLL, (CGColorSpaceRef)EQKitUtilGetDeviceColorSpace::sDeviceColor, 5u);
  EQKitUtilGetFakeContext::sFakeContext = (uint64_t)result;
  return result;
}

uint64_t EQKitUtilDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (objc_opt_isKindOfClass()) {
    return a2;
  }
  return 0;
}

void *EQKitUtilProtocolCast(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if ([a2 conformsToProtocol:a1]) {
    return a2;
  }
  return 0;
}

CFTypeRef EQKitUtilCFTypeCast(uint64_t a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  if (CFGetTypeID(cf) == a1) {
    return cf;
  }
  return 0;
}

uint64_t EQKitUtilUTF32CharFromString(void *a1)
{
  uint64_t v2 = [a1 length];
  if ((unint64_t)(v2 - 1) > 1) {
    return 0;
  }
  uint64_t v3 = v2;
  objc_msgSend(a1, "getCharacters:range:", &v5, 0, v2);
  uint64_t result = v5;
  if (v3 == 1) {
    return result;
  }
  if ((v5 & 0xFC00) != 0xD800) {
    return 0;
  }
  if ((v6 & 0xFC00) == 0xDC00) {
    return v6 + (v5 << 10) - 56613888;
  }
  return 0;
}

uint64_t EQKitUtilNewStringFromUTF32Char(int a1)
{
  if ((a1 - 0x10000) >> 20)
  {
    uint64_t v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    unsigned int v1 = ((a1 + 67043328) >> 10) - 10240;
    v4[1] = a1 & 0x3FF | 0xDC00;
    uint64_t v2 = 2;
  }
  v4[0] = v1;
  return [[NSString alloc] initWithCharacters:v4 length:v2];
}

void EQKit::Font::CharacterProperty::Map::newMapFromDictionary(EQKit::Font::CharacterProperty::Map *this, NSDictionary *a2, const EQKit::Environment::Version *a3)
{
}

void sub_223546E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZL3mapv_block_invoke()
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(v0, "baselineAdjust");
  int v1 = 3;
  std::string::basic_string[abi:nn180100]<0>(v2, "radicalBaselineOffset");
  int v3 = 4;
  std::string::basic_string[abi:nn180100]<0>(v4, "radicalCenterXOffset");
  int v5 = 5;
  std::string::basic_string[abi:nn180100]<0>(v6, "radicalMaxXOffset");
  int v7 = 6;
  std::string::basic_string[abi:nn180100]<0>(v8, "radicalAdditionalLeftPadding");
  int v9 = 7;
  std::string::basic_string[abi:nn180100]<0>(v10, "radicalAdditionalRightPadding");
  int v11 = 8;
  std::string::basic_string[abi:nn180100]<0>(v12, "scriptSuperHAdjust");
  int v13 = 9;
  std::string::basic_string[abi:nn180100]<0>(v14, "scriptSubHAdjust");
  int v15 = 10;
  std::string::basic_string[abi:nn180100]<0>(v16, "scriptOverHAdjust");
  int v17 = 11;
  std::string::basic_string[abi:nn180100]<0>(v18, "scriptUnderHAdjust");
  int v19 = 12;
  std::string::basic_string[abi:nn180100]<0>(v20, "stemStretch");
  int v21 = 13;
  std::string::basic_string[abi:nn180100]<0>(v22, "accentOverHAdjust");
  int v23 = 1;
  std::string::basic_string[abi:nn180100]<0>(v24, "accentUnderHAdjust");
  int v25 = 2;
  operator new();
}

void sub_22354711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  MEMORY[0x223CB8F20](v10, 0x1020C4062D53EE8);
  uint64_t v12 = 416;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0) {
      operator delete(*(void **)(&a10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_2235471C0()
{
}

uint64_t std::map<std::string const,EQKit::Font::CharacterProperty::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKit::Font::CharacterProperty::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + ++*(void *)(this + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unsigned __int16 v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223547234(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int16 v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!EQKit::Font::CharacterProperty::Map::Key::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!EQKit::Font::CharacterProperty::Map::Key::operator<(v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned __int16 v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + ++*(void *)(this + 16) = 0;
  uint64_t result = EQKit::Font::CharacterProperty::Map::Key::Key(v6 + 4, *a2);
  *((_DWORD *)v6 + ++*(void *)(this + 16) = 1;
  v6[9] = 0;
  *(unsigned char *)(a3 + ++*(void *)(this + 16) = 1;
  return result;
}

void sub_2235473E8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

void *EQKit::Font::CharacterProperty::Map::Key::Key(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:nn180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int16 v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned __int16 v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v5;
  *(unsigned char *)(a3 + ++*(void *)(this + 16) = 0;
  uint64_t result = std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:nn180100]<EQKit::Font::CharacterProperty::Map::Key const&>(v6 + 4, *a2);
  *(unsigned char *)(a3 + ++*(void *)(this + 16) = 1;
  return result;
}

void sub_2235475BC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:nn180100]<EQKit::Font::CharacterProperty::Map::Key const&>(void *a1, uint64_t a2)
{
  uint64_t v3 = EQKit::Font::CharacterProperty::Map::Key::Key(a1, a2);
  EQKit::StemStretch::Config::Entry::Entry((uint64_t)(v3 + 4));
  return a1;
}

void sub_223547608(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::StemStretch::Config::Entry::Entry(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(unsigned char *)(this + ++*(void *)(this + 16) = *(unsigned char *)(this + 16) & 0xF0 | 1;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(unsigned char *)(this + ++*(void *)(this + 16) = *(unsigned char *)(this + 16) & 0xF0 | 1;
  return this;
}

uint64_t EQKit::StemStretch::Config::Entry::fromDictionary(EQKit::StemStretch::Config::Entry *this, NSDictionary *a2, EQKit::StemStretch::Config::Entry *a3)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  long long __p = 0uLL;
  uint64_t v23 = 0;
  uint64_t v5 = _stringForKey(this, @"analyzeMethod", (uint64_t)&__p);
  if (v5)
  {
    if (SHIBYTE(v23) < 0)
    {
      if (*((void *)&__p + 1) != 11
        || (*(void *)__p == 0x7543726F7272694DLL ? (BOOL v7 = *(void *)(__p + 3) == 0x6576727543726F72) : (BOOL v7 = 0), !v7))
      {
        if (*((void *)&__p + 1) != 13) {
          goto LABEL_25;
        }
        p_p = (long long *)__p;
        goto LABEL_15;
      }
    }
    else
    {
      if (HIBYTE(v23) != 11)
      {
        if (HIBYTE(v23) != 13) {
          goto LABEL_25;
        }
        p_p = &__p;
LABEL_15:
        uint64_t v8 = *(void *)p_p;
        uint64_t v9 = *(void *)((char *)p_p + 5);
        if (v8 == 0x6C656C6C61726150 && v9 == 0x736D6574536C656CLL)
        {
          char v11 = (uint64_t)a2[2].super.isa & 0xFC | 1;
LABEL_26:
          LOBYTE(a2[2].super.isa) = v11;
          goto LABEL_27;
        }
LABEL_25:
        char v11 = (uint64_t)a2[2].super.isa & 0xFC;
        goto LABEL_26;
      }
      if ((void)__p != 0x7543726F7272694DLL || *(void *)((char *)&__p + 3) != 0x6576727543726F72) {
        goto LABEL_25;
      }
    }
    char v11 = (uint64_t)a2[2].super.isa & 0xFC | 2;
    goto LABEL_26;
  }
LABEL_27:
  if (_stringForKey(this, @"minStemLength", (uint64_t)&__p))
  {
    EQKitLength::EQKitLength(&v21, &__p, 0);
    *(_OWORD *)&a2->super.Class isa = v21;
    uint64_t v5 = 1;
  }
  int v13 = _stringForKey(this, @"axis", (uint64_t)&__p);
  char v14 = HIBYTE(v23);
  if (v13)
  {
    if (v23 < 0)
    {
      uint64_t v16 = *((void *)&__p + 1);
      if (*((void *)&__p + 1) == 8)
      {
        if (*(void *)__p == 0x6C61636974726576)
        {
LABEL_52:
          char v19 = (uint64_t)a2[2].super.isa & 0xF3 | 8;
          goto LABEL_60;
        }
        uint64_t v16 = *((void *)&__p + 1);
      }
      else if (*((void *)&__p + 1) == 10 && *(void *)__p == 0x746E6F7A69726F68 && *(_WORD *)(__p + 8) == 27745)
      {
LABEL_55:
        char v19 = (uint64_t)a2[2].super.isa & 0xF3 | 4;
        goto LABEL_60;
      }
      if (v16 != 4)
      {
        uint64_t v5 = 1;
LABEL_63:
        operator delete((void *)__p);
        return v5;
      }
      int v18 = (long long *)__p;
    }
    else
    {
      if (HIBYTE(v23) != 4)
      {
        if (HIBYTE(v23) != 8)
        {
          if (HIBYTE(v23) != 10) {
            return 1;
          }
          if ((void)__p != 0x746E6F7A69726F68 || WORD4(__p) != 27745) {
            return 1;
          }
          goto LABEL_55;
        }
        if ((void)__p != 0x6C61636974726576) {
          return 1;
        }
        goto LABEL_52;
      }
      int v18 = &__p;
    }
    if (*(_DWORD *)v18 != 1701736302)
    {
LABEL_61:
      uint64_t v5 = 1;
      goto LABEL_62;
    }
    char v19 = LOBYTE(a2[2].super.isa) | 0xC;
LABEL_60:
    LOBYTE(a2[2].super.isa) = v19;
    goto LABEL_61;
  }
LABEL_62:
  if (v14 < 0) {
    goto LABEL_63;
  }
  return v5;
}

void sub_223547980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _stringForKey(void *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = (void *)[a1 objectForKey:a2];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    std::string::basic_string[abi:nn180100]<0>(&v7, (char *)[v4 UTF8String]);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + ++*(void *)(this + 16) = v8;
  }
  else
  {
    MEMORY[0x223CB8D60](a3, "");
  }
  return isKindOfClass & 1;
}

uint64_t EQKit::StemStretch::Key::Key(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_WORD *)(this + ++*(void *)(this + 16) = -1;
  *(_DWORD *)(this + 20) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_WORD *)(this + ++*(void *)(this + 16) = -1;
  *(_DWORD *)(this + 20) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, CTFontRef font, __int16 a3, int a4, double a5)
{
  *((void *)this + 1) = 0;
  *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = a3;
  *((_DWORD *)this + 5) = a4;
  *((double *)this + 3) = a5;
  if (font)
  {
    *(void *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, const EQKit::StemStretch::Key *a2)
{
  uint64_t v3 = *(const void **)a2;
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_WORD *)this + _Block_object_dispose(&STACK[0x560], 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((void *)this + 3) = *((void *)a2 + 3);
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t EQKit::StemStretch::Key::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v5) {
      CFRetain(v5);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a2 + 8);
    *(_WORD *)(a1 + ++*(void *)(this + 16) = *(_WORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  return a1;
}

void EQKit::StemStretch::Key::~Key(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v1;

  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

BOOL EQKit::StemStretch::Key::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  CFStringRef v2 = *(const __CFString **)a1;
  CFStringRef v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3) {
    return 1;
  }
  BOOL result = 0;
  if (v2 && v3) {
    return CFEqual(v2, v3);
  }
  return result;
}

BOOL EQKit::StemStretch::Key::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  unsigned int v3 = *(unsigned __int16 *)(a2 + 16);
  if (v2 < v3) {
    return 1;
  }
  if (v2 != v3) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  unsigned int v6 = *(_DWORD *)(a2 + 20);
  if (v5 < v6) {
    return 1;
  }
  if (v5 != v6) {
    return 0;
  }
  double v7 = *(double *)(a1 + 24);
  double v8 = *(double *)(a2 + 24);
  if (v7 < v8) {
    return 1;
  }
  if (v7 != v8) {
    return 0;
  }
  double v9 = *(double *)(a1 + 8);
  double v10 = *(double *)(a2 + 8);
  if (v9 < v10) {
    return 1;
  }
  if (v9 != v10) {
    return 0;
  }
  CFStringRef v11 = *(const __CFString **)a1;
  CFStringRef v12 = *(const __CFString **)a2;
  if (v11 && v12) {
    return CFStringCompare(v11, v12, 0) == kCFCompareLessThan;
  }
  if (v11) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v12 == 0;
  }
  return !v13;
}

const __CFString *EQKit::StemStretch::Key::newFont(CGFloat *this)
{
  CFStringRef result = *(const __CFString **)this;
  if (result)
  {
    unsigned int v3 = CTFontDescriptorCreateWithNameAndSize(result, this[1]);
    CTFontRef v4 = CTFontCreateWithFontDescriptor(v3, this[1], 0);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::keyForFontAndCharacter@<X0>(EQKit::StemStretch::Key *this@<X0>, const __CTFont *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  UniChar characters = (unsigned __int16)a2;
  CGGlyph glyphs = -1;
  if (this)
  {
    int v6 = (int)a2;
    double v7 = this;
    this = (EQKit::StemStretch::Key *)CTFontGetGlyphsForCharacters(this, &characters, &glyphs, 1);
    if (this) {
      return EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)a4, v7, glyphs, v6, a3);
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *(_WORD *)(a4 + ++*(void *)(this + 16) = -1;
  *(_DWORD *)(a4 + 20) = 0;
  *(void *)(a4 + 24) = 0;
  return this;
}

EQKit::StemStretch::Glyph *EQKit::StemStretch::Glyph::Glyph(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Key *a2, const EQKit::StemStretch::Config::Entry *a3)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = *((void *)a2 + 3);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  CFStringRef v6 = EQKit::StemStretch::Key::newFont((CGFloat *)a2);
  *((void *)this + 1) = EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*((unsigned __int16 *)a2 + 8), (const __CTFont *)v6, v7);
  if (!a3) {
    goto LABEL_6;
  }
  if (*(_DWORD *)a3)
  {
    double Size = CTFontGetSize((CTFontRef)v6);
    *((double *)this + 2) = EQKitLength::resolveToAbsoluteWithSizeAndRule(a3, Size, *((double *)a2 + 3));
  }
  int v9 = *((unsigned char *)a3 + 16) & 3;
  if (v9 == 2)
  {
    BOOL v10 = EQKit::StemStretch::Glyph::analyzeMirrorCurve(this, a3);
LABEL_8:
    if (v10) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v9 == 1)
  {
LABEL_6:
    BOOL v10 = EQKit::StemStretch::Glyph::analyzeParallelStems(this, a3);
    goto LABEL_8;
  }
LABEL_9:
  *(_DWORD *)this = 0;
  CFStringRef v11 = (EQKitPath *)*((void *)this + 1);
  if (v11)
  {
    EQKitPath::~EQKitPath(v11);
    MEMORY[0x223CB8F20]();
  }
  *((void *)this + 1) = 0;
LABEL_12:
  if (v6) {
    CFRelease(v6);
  }
  return this;
}

void sub_223547F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CTFontRef v4 = *(void **)(v2 + 48);
  if (v4)
  {
    *(void *)(v2 + 56) = v4;
    operator delete(v4);
  }
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeParallelStems(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3) {
    return 0;
  }
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)v41, v3, 1);
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)&v34, *((void *)this + 1), 2);
  unsigned int v5 = &v47;
  if (a2 && (char v6 = *((unsigned char *)a2 + 16), (v6 & 8) != 0))
  {
    BOOL v7 = 0;
  }
  else
  {
    BOOL v7 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)v41, *((double *)this + 2));
    if (!a2) {
      goto LABEL_9;
    }
    char v6 = *((unsigned char *)a2 + 16);
  }
  if ((((v6 & 4) != 0) | 2) != 2)
  {
    if (!v7) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
LABEL_9:
  BOOL v9 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)&v34, *((double *)this + 2));
  if (v7 && v9)
  {
    uint64_t v11 = *((void *)&v45 + 1);
    BOOL v10 = v46;
    double v12 = 0.0;
    double v13 = 0.0;
    if (*((double **)&v45 + 1) != v46)
    {
      char v14 = (double *)*((void *)&v45 + 1);
      do
      {
        double v15 = *v14++;
        double v13 = v13 + v15;
      }
      while (v14 != v46);
    }
    int v17 = __p[1];
    uint64_t v16 = v39;
    if (__p[1] != v39)
    {
      double v12 = 0.0;
      int v18 = (double *)__p[1];
      do
      {
        double v19 = *v18++;
        double v12 = v12 + v19;
      }
      while (v18 != v39);
    }
    if (v13 < v12)
    {
      if (v35)
      {
        *(_DWORD *)this = v35;
        uint64_t v20 = &v35;
        long long v21 = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)((char *)this + 24) = v37;
        long long v22 = *(_OWORD *)((char *)this + 40);
        *((void **)this + 5) = __p[0];
        *((void *)this + 6) = v17;
        long long v37 = v21;
        *(_OWORD *)long long __p = v22;
        uint64_t v23 = (double *)*((void *)this + 7);
        *((void *)this + 7) = v16;
LABEL_23:
        unsigned int v5 = &v40;
        unsigned __int8 v39 = v23;
LABEL_30:
        uint64_t v31 = *((void *)this + 8);
        *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = *v5;
        *unsigned int v5 = v31;
        *uint64_t v20 = 0;
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (!v42) {
      goto LABEL_31;
    }
    *(_DWORD *)this = v42;
    uint64_t v20 = &v42;
    long long v29 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    long long v44 = v29;
    long long v30 = *(_OWORD *)((char *)this + 40);
    *((void *)this + 5) = v45;
    *((void *)this + 6) = v11;
    long long v45 = v30;
    double v28 = (double *)*((void *)this + 7);
LABEL_29:
    *((void *)this + 7) = v10;
    _NSRange v46 = v28;
    goto LABEL_30;
  }
  if (v7)
  {
LABEL_25:
    if (!v42) {
      goto LABEL_31;
    }
    *(_DWORD *)this = v42;
    uint64_t v20 = &v42;
    long long v26 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    long long v44 = v26;
    long long v27 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = v45;
    long long v45 = v27;
    double v28 = (double *)*((void *)this + 7);
    BOOL v10 = v46;
    goto LABEL_29;
  }
  if (v9 && v35)
  {
    *(_DWORD *)this = v35;
    uint64_t v20 = &v35;
    long long v24 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v37;
    long long v25 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)__p;
    long long v37 = v24;
    *(_OWORD *)long long __p = v25;
    uint64_t v23 = (double *)*((void *)this + 7);
    *((void *)this + 7) = v39;
    goto LABEL_23;
  }
LABEL_31:
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3);
  BOOL v8 = v32 >= 2 && v32 - 1 == (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3;
  if (__p[1])
  {
    unsigned __int8 v39 = (double *)__p[1];
    operator delete(__p[1]);
  }
  CGAffineTransform v48 = (void **)&v37;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v48);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v36);
  if (*((void *)&v45 + 1))
  {
    _NSRange v46 = (double *)*((void *)&v45 + 1);
    operator delete(*((void **)&v45 + 1));
  }
  __int16 v34 = (void **)&v44;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v34);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v43);
  return v8;
}

void sub_22354823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  EQKit::StemStretch::FeatureRange::~FeatureRange((EQKit::StemStretch::FeatureRange *)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeMirrorCurve(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  if (a2) {
    unsigned int v3 = (*((unsigned __int8 *)a2 + 16) >> 2) & 3;
  }
  else {
    unsigned int v3 = 0;
  }
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  unsigned int v5 = (EQKitPath *)*((void *)this + 1);
  if (!v5) {
    return 0;
  }
  double v46 = 0.0;
  unint64_t CurveMirrorParallelWithAxis = EQKitPath::findCurveMirrorParallelWithAxis(v5, v4, &v46);
  BOOL v7 = CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL;
  if (CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v8 = CurveMirrorParallelWithAxis;
    uint64_t v9 = EQKitPath::endPointIndexForElement(*((EQKitPath **)this + 1), CurveMirrorParallelWithAxis);
    uint64_t v10 = EQKitPath::addLineToAfterElement(*((EQKitPath **)this + 1), v8);
    uint64_t v11 = (EQKitPath *)*((void *)this + 1);
    EQKitPath::extractPath(v11);
    double v12 = (double *)(*((void *)v11 + 1) + 16 * v9);
    double v13 = *v12;
    double v14 = v12[1];
    long long v44 = 0;
    uint64_t v45 = 0;
    double v43 = &v44;
    unint64_t v15 = *((void *)this + 4);
    if (v15 >= *((void *)this + 5))
    {
      uint64_t v16 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t)this + 24, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:nn180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      uint64_t v16 = v15 + 24;
      *((void *)this + 4) = v15 + 24;
    }
    *((void *)this + 4) = v16;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    long long v44 = 0;
    uint64_t v45 = 0;
    double v43 = &v44;
    unint64_t v17 = *((void *)this + 4);
    if (v17 >= *((void *)this + 5))
    {
      uint64_t v18 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t)this + 24, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:nn180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      uint64_t v18 = v17 + 24;
      *((void *)this + 4) = v17 + 24;
    }
    *((void *)this + 4) = v18;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    unint64_t v19 = *((void *)this + 8);
    uint64_t v20 = (uint64_t **)*((void *)this + 3);
    uint64_t v21 = *((void *)this + 4);
    long long v22 = (char *)*((void *)this + 7);
    if ((unint64_t)v22 >= v19)
    {
      long long v24 = (char *)*((void *)this + 6);
      uint64_t v25 = (v22 - v24) >> 3;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61) {
        abort();
      }
      uint64_t v27 = v19 - (void)v24;
      if (v27 >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      unint64_t v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v26;
      if (v28)
      {
        long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)this + 64, v28);
        long long v24 = (char *)*((void *)this + 6);
        long long v22 = (char *)*((void *)this + 7);
      }
      else
      {
        long long v29 = 0;
      }
      long long v30 = &v29[8 * v25];
      uint64_t v31 = &v29[8 * v28];
      *(void *)long long v30 = 0;
      uint64_t v23 = v30 + 8;
      while (v22 != v24)
      {
        uint64_t v32 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v30 - 1) = v32;
        v30 -= 8;
      }
      *((void *)this + 6) = v30;
      *((void *)this + 7) = v23;
      *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = v31;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(void *)long long v22 = 0;
      uint64_t v23 = v22 + 8;
    }
    *((void *)this + 7) = v23;
    double v33 = (EQKitPath *)*((void *)this + 1);
    EQKitPath::extractPath(v33);
    *(_DWORD *)this = v4;
    uint64_t v34 = *((void *)v33 + 2) - *((void *)v33 + 1);
    if (v34)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      long long v37 = (uint64_t **)(v21 - 24);
      unint64_t v38 = v34 >> 4;
      if (v38 <= 1) {
        uint64_t v39 = 1;
      }
      else {
        uint64_t v39 = v38;
      }
      do
      {
        if (v9 == v36)
        {
          if (v46 <= 0.0)
          {
            double v43 = (void **)v9;
            goto LABEL_50;
          }
          double v43 = (void **)v9;
        }
        else if (v10 == v36)
        {
          if (v46 > 0.0)
          {
            double v43 = (void **)v10;
LABEL_50:
            unsigned __int8 v41 = v37;
            goto LABEL_51;
          }
          double v43 = (void **)v10;
        }
        else
        {
          uint64_t v40 = *((void *)v33 + 1);
          if (v3 > 1)
          {
            if (*(double *)(v40 + v35 + 8) > v14)
            {
LABEL_49:
              double v43 = (void **)v36;
              goto LABEL_50;
            }
          }
          else if (*(double *)(v40 + v35) > v13)
          {
            goto LABEL_49;
          }
          double v43 = (void **)v36;
        }
        unsigned __int8 v41 = v20;
LABEL_51:
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v41, (unint64_t *)&v43, (uint64_t *)&v43);
        ++v36;
        v35 += 16;
      }
      while (v39 != v36);
    }
  }
  return v7;
}

void sub_223548574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

EQKit::StemStretch::Glyph *EQKit::StemStretch::Glyph::Glyph(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Glyph *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<EQKit::StemStretch::FeatureCluster>::__init_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>((uint64_t *)this + 3, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = 0;
  std::vector<EQKit::StemStretch::Stem>::__init_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>((char *)this + 48, *((uint64_t **)a2 + 6), *((uint64_t **)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

void sub_223548670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223CB8F20](v4, 0x1070C40036CD406);
  char v6 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 56) = v6;
    operator delete(v6);
  }
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKit::StemStretch::Glyph::~Glyph(EQKit::StemStretch::Glyph *this)
{
  uint64_t v2 = (EQKitPath *)*((void *)this + 1);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x223CB8F20]();
  }
  unsigned int v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 24);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v4);
}

uint64_t EQKit::StemStretch::Glyph::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v4 = *(EQKitPath **)(a1 + 8);
    if (v4)
    {
      EQKitPath::~EQKitPath(v4);
      MEMORY[0x223CB8F20]();
    }
    if (*(void *)(a2 + 8)) {
      operator new();
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = 0;
    std::vector<EQKit::StemStretch::FeatureCluster>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(a1 + 24, *(void *)(a2 + 24), *(uint64_t ***)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    std::vector<EQKit::StemStretch::Stem>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  }
  return a1;
}

void sub_223548800(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::FeatureRange::analyze(EQKit::StemStretch::FeatureRange *this, double a2)
{
  unint64_t v4 = 0;
  v112[12] = *MEMORY[0x263EF8340];
  int v5 = *((_DWORD *)this + 2);
  long long __p = 0;
  int v107 = 0;
  unint64_t v108 = 0;
  char v6 = (void *)((char *)this + 16);
  BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
  int v96 = v5;
  while (1)
  {
    uint64_t v8 = *(void *)this;
    EQKitPath::extractPath(*(EQKitPath **)this);
    if (v4 >= (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 4) {
      break;
    }
    CGPoint v104 = *v7;
    CGPoint v105 = v104;
    if (!EQKitPath::elementMinMax(*(EQKitPath **)this, v4, &v105, &v104)) {
      goto LABEL_76;
    }
    p_CGFloat y = (CGPoint *)&v105.y;
    if (v5 == 1) {
      p_CGFloat y = &v105;
    }
    double x = p_y->x;
    uint64_t v11 = (CGPoint *)&v104.y;
    if (v5 == 1) {
      uint64_t v11 = &v104;
    }
    double v12 = v11->x;
    unint64_t v101 = 0;
    unint64_t v102 = 0;
    if (EQKitPath::isLineTo(*(unint64_t ***)this, v4, &v102, &v101, 0))
    {
      double v13 = EQKitPath::vector(*(EQKitPath **)this, v102, v101);
      if (v5 == 1) {
        double v13 = v14;
      }
      BOOL v15 = v13 == 0.0;
    }
    else
    {
      BOOL v15 = 0;
    }
    uint64_t v16 = *((void *)this + 3);
    LOBYTE(v97) = 0;
    uint64_t v17 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(v16, (uint64_t)v6, &x);
    uint64_t v18 = v17;
    if (x >= v12 || v6 == (void *)v17)
    {
      char v21 = x != v12 || v6 == (void *)v17 || v15;
      if ((v21 & 1) == 0)
      {
        uint64_t v22 = 0;
        double v97 = x;
        double v98 = v12;
        int v99 = 1;
        long long v100 = 0uLL;
        do
        {
          uint64_t v23 = (char *)&v109 + v22;
          *(_OWORD *)uint64_t v23 = xmmword_223837EB0;
          *((_DWORD *)v23 + 4) = 0;
          *((void *)v23 + 3) = 0;
          *((void *)v23 + 4) = 0;
          v22 += 40;
        }
        while (v22 != 120);
        long long v24 = (long long *)(v17 + 16);
        uint64_t v25 = EQKit::StemStretch::FeatureRange::Span::split(v17 + 16, (uint64_t)&v97, (uint64_t)&v109);
        if (v25)
        {
          uint64_t v26 = v25 - 1;
          if (v25 == 1)
          {
            if (v24 != &v109)
            {
              *(_OWORD *)(v18 + ++*(void *)(this + 16) = v109;
              *(_DWORD *)(v18 + 32) = v110;
              *(void *)(v18 + 40) = v111;
              uint64_t v27 = v112;
              unint64_t v28 = (void *)v18;
              goto LABEL_71;
            }
            unint64_t v28 = (void *)v18;
          }
          else
          {
            uint64_t v47 = &v109;
            uint64_t v48 = v25 - 1;
            unint64_t v28 = (void *)v18;
            do
            {
              std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, (uint64_t *)v18, (uint64_t)v47);
              if (v28 == (void *)v18) {
                unint64_t v28 = v49;
              }
              uint64_t v47 = (long long *)((char *)v47 + 40);
              --v48;
            }
            while (v48);
            std::string v50 = (long long *)((char *)&v109 + 40 * v26);
            if (v24 == v50)
            {
              BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
            }
            else
            {
              *(_OWORD *)(v18 + ++*(void *)(this + 16) = *v50;
              std::string v51 = (char *)&v109 + 40 * v26;
              *(_DWORD *)(v18 + 32) = *((_DWORD *)v51 + 4);
              *(void *)(v18 + 40) = *((void *)v51 + 3);
              uint64_t v27 = v51 + 32;
              BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
LABEL_71:
              *(void *)(v18 + 4_Block_object_dispose(&STACK[0x560], 8) = *v27;
            }
          }
          EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, v28, (void *)v18);
        }
        int v5 = v96;
      }
    }
    else
    {
      if (x < *(double *)(v17 + 16) && *((void *)this + 3) != v17) {
        uint64_t v18 = *(void *)v17;
      }
      if (v15) {
        int v29 = 2;
      }
      else {
        int v29 = 1;
      }
      double v97 = x;
      double v98 = v12;
      int v99 = v29;
      long long v100 = 0uLL;
      if (v15)
      {
        long long v30 = (CGPoint *)&v105.y;
        if (v5 != 1) {
          long long v30 = &v105;
        }
        CGFloat v31 = v30->x;
        *(CGFloat *)&long long v100 = v30->x;
        uint64_t v32 = v107;
        if ((unint64_t)v107 >= v108)
        {
          double v33 = (long long *)std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>((uint64_t *)&__p, (uint64_t)&v97);
        }
        else
        {
          *(double *)int v107 = x;
          *((double *)v32 + 1) = v12;
          *((_DWORD *)v32 + 4) = 2;
          *((CGFloat *)v32 + 3) = v31;
          double v33 = (long long *)(v32 + 40);
          *((void *)v32 + 4) = 0;
        }
        int v107 = (char *)v33;
      }
      if ((void *)v18 != v6)
      {
        char v34 = 0;
        uint64_t v35 = (void *)v18;
        while (1)
        {
          uint64_t v36 = (long long *)(v35 + 2);
          if (*((double *)v35 + 2) >= v12)
          {
LABEL_62:
            int v5 = v96;
            if (v34) {
              EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (void *)v18, v35);
            }
            goto LABEL_64;
          }
          for (uint64_t i = 0; i != 120; i += 40)
          {
            unint64_t v38 = (char *)&v109 + i;
            *(_OWORD *)unint64_t v38 = xmmword_223837EB0;
            *((_DWORD *)v38 + 4) = 0;
            *((void *)v38 + 3) = 0;
            *((void *)v38 + 4) = 0;
          }
          uint64_t v39 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)(v35 + 2), (uint64_t)&v97, (uint64_t)&v109);
          uint64_t v40 = v39;
          if (v39) {
            break;
          }
LABEL_60:
          uint64_t v35 = (void *)v35[1];
          if (v35 == v6)
          {
            uint64_t v35 = v6;
            goto LABEL_62;
          }
        }
        uint64_t v41 = v39 - 1;
        if (v39 == 1)
        {
          if (v36 != &v109)
          {
            *((_OWORD *)v35 + 1) = v109;
            *((_DWORD *)v35 + _Block_object_dispose(&STACK[0x560], 8) = v110;
            v35[5] = v111;
            int v42 = v112;
            goto LABEL_58;
          }
        }
        else
        {
          for (uint64_t j = &v109; --v40; uint64_t j = v44)
          {
            long long v44 = (long long *)((char *)j + 40);
            std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, v35, (uint64_t)j);
          }
          uint64_t v45 = (long long *)((char *)&v109 + 40 * v41);
          if (v36 != v45)
          {
            *((_OWORD *)v35 + 1) = *v45;
            double v46 = (char *)&v109 + 40 * v41;
            *((_DWORD *)v35 + _Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)v46 + 4);
            v35[5] = *((void *)v46 + 3);
            int v42 = v46 + 32;
LABEL_58:
            v35[6] = *v42;
          }
        }
        char v34 = 1;
        goto LABEL_60;
      }
LABEL_64:
      BOOL v7 = (CGPoint *)MEMORY[0x263F00148];
    }
LABEL_76:
    ++v4;
  }
  unint64_t v52 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v107 - (unsigned char *)__p) >> 3));
  *(void *)&long long v109 = EQKit::StemStretch::FeatureRange::Span::compareOrthogonal;
  if (v107 == __p) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = v52;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>((uint64_t)__p, (long long *)v107, (uint64_t (**)(long long *, long long *))&v109, v53, 1, v9);
  EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (uint64_t *)&__p);
  uint64_t v54 = *((void *)this + 3);
  if ((void *)v54 == v6) {
    goto LABEL_125;
  }
  char v55 = 0;
  do
  {
    if (*(_DWORD *)(v54 + 32) != 2) {
      goto LABEL_119;
    }
    __int16 v57 = (double *)__p;
    uint64_t v56 = v107;
    if (__p == v107) {
      goto LABEL_118;
    }
    __int16 v58 = 0;
    char v59 = 0;
    uint64_t v60 = 0;
    double v61 = 0.0;
    double v62 = 0.0;
    double v63 = 0.0;
    CGRect v64 = (double *)__p;
    do
    {
      double v65 = *v64;
      if (*(double *)(v54 + 24) > *v64)
      {
        double v66 = v64[1];
        if (*(double *)(v54 + 16) < v66)
        {
          if (v58)
          {
            double v67 = vabdd_f64(v64[3], v58[3]);
            if (v61 <= v67) {
              double v61 = v67;
            }
            char v59 = 1;
            __int16 v58 = 0;
            if (!v60) {
              goto LABEL_97;
            }
          }
          else
          {
            __int16 v58 = v64;
            if (!v60)
            {
LABEL_97:
              ++v60;
              double v63 = v65;
              double v62 = v66;
              goto LABEL_98;
            }
          }
          if (v63 > v65) {
            double v65 = v63;
          }
          if (v62 < v66) {
            double v66 = v62;
          }
          goto LABEL_97;
        }
      }
LABEL_98:
      v64 += 5;
    }
    while (v64 != (double *)v107);
    if (!v60) {
      goto LABEL_118;
    }
    double v97 = v63;
    double v98 = v62;
    int v99 = 0;
    long long v100 = 0uLL;
    do
    {
      if (*(double *)(v54 + 24) <= *v57 || *(double *)(v54 + 16) >= v57[1])
      {
        for (uint64_t k = 0; k != 120; k += 40)
        {
          int v69 = (char *)&v109 + k;
          *(_OWORD *)int v69 = xmmword_223837EB0;
          *((_DWORD *)v69 + 4) = 0;
          *((void *)v69 + 3) = 0;
          *((void *)v69 + 4) = 0;
        }
        uint64_t v70 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)&v97, (uint64_t)v57, (uint64_t)&v109);
        if (v70)
        {
          int v71 = (double *)&v109;
          while (1)
          {
            if (*(double *)(v54 + 24) > *v71)
            {
              double v72 = v71[1];
              if (*(double *)(v54 + 16) < v72) {
                break;
              }
            }
            v71 += 5;
            if (!--v70) {
              goto LABEL_113;
            }
          }
          if (v71 != &v97)
          {
            double v97 = *v71;
            double v98 = v72;
            int v99 = *((_DWORD *)v71 + 4);
            long long v100 = *(_OWORD *)(v71 + 3);
          }
        }
LABEL_113:
        uint64_t v56 = v107;
      }
      v57 += 5;
    }
    while (v57 != (double *)v56);
    if (v98 < v97) {
      goto LABEL_118;
    }
    double v73 = vabdd_f64(v98, v97);
    if (((v73 >= a2) & v59) != 1)
    {
      if (v73 >= a2) {
        goto LABEL_122;
      }
LABEL_118:
      char v55 = 1;
      *(_DWORD *)(v54 + 32) = 1;
      goto LABEL_119;
    }
    if (v61 / (v98 - v97) >= 2.0) {
      goto LABEL_118;
    }
LABEL_122:
    *(double *)(v54 + 4_Block_object_dispose(&STACK[0x560], 8) = v73;
LABEL_119:
    uint64_t v54 = *(void *)(v54 + 8);
  }
  while ((void *)v54 != v6);
  if (v55) {
    EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, *((void **)this + 3), v6);
  }
LABEL_125:
  uint64_t v74 = *((void *)this + 4);
  if (v74)
  {
    int v75 = (_DWORD *)*((void *)this + 3);
    if (v75[8] {
      || (uint64_t v76 = *(void *)v75,
    }
          *(void *)(v76 + _Block_object_dispose(&STACK[0x560], 8) = *((void *)v75 + 1),
          **((void **)v75 + 1) = v76,
          *((void *)this + 4) = v74 - 1,
          operator delete(v75),
          (uint64_t v74 = *((void *)this + 4)) != 0))
    {
      int v77 = (uint64_t *)*v6;
      if (*(_DWORD *)(*v6 + 32) {
        || (uint64_t v78 = *v77,
      }
            *(void *)(v78 + _Block_object_dispose(&STACK[0x560], 8) = v77[1],
            *(void *)v77[1] = v78,
            *((void *)this + 4) = v74 - 1,
            operator delete(v77),
            (uint64_t v74 = *((void *)this + 4)) != 0))
      {
        uint64_t v79 = *((void *)this + 3);
        if (*(_DWORD *)(v79 + 32) != 2) {
          goto LABEL_151;
        }
        uint64_t v80 = *(void *)(v79 + 16);
        int v81 = operator new(0x38uLL);
        v81[2] = v80;
        v81[3] = v80;
        *((_DWORD *)v81 + _Block_object_dispose(&STACK[0x560], 8) = 1;
        v81[5] = 0;
        v81[6] = 0;
        *int v81 = v6;
        v81[1] = v79;
        *(void *)uint64_t v79 = v81;
        BOOL v82 = __CFADD__(v74++, 1);
        *((void *)this + 3) = v81;
        *((void *)this + 4) = v74;
        if (!v82)
        {
LABEL_151:
          int v83 = (void *)*v6;
          if (*(_DWORD *)(*v6 + 32) == 2)
          {
            uint64_t v84 = v83[3];
            int v85 = operator new(0x38uLL);
            v85[2] = v84;
            v85[3] = v84;
            *((_DWORD *)v85 + _Block_object_dispose(&STACK[0x560], 8) = 1;
            v85[5] = 0;
            v85[6] = 0;
            void *v85 = v83;
            v85[1] = v6;
            v83[1] = v85;
            *((void *)this + 2) = v85;
            *((void *)this + 4) = v74 + 1;
          }
        }
      }
    }
  }
  for (uint64_t m = *((void *)this + 3); (void *)m != v6; uint64_t m = *(void *)(m + 8))
  {
    int v87 = *(_DWORD *)(m + 32);
    if (v87 == 1)
    {
      EQKit::StemStretch::FeatureRange::addFeatureCluster(this, *(double *)(m + 16), *(double *)(m + 24));
    }
    else if (v87 == 2)
    {
      EQKit::StemStretch::FeatureRange::addStem(this, *(double *)(m + 16), *(double *)(m + 24), *(double *)(m + 48));
    }
  }
  uint64_t v89 = *((void *)this + 5);
  uint64_t v88 = *((void *)this + 6);
  int v92 = (char *)this + 64;
  uint64_t v90 = *((void *)this + 8);
  uint64_t v91 = *((void *)v92 + 1);
  if (__p)
  {
    int v107 = (char *)__p;
    operator delete(__p);
  }
  unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v89) >> 3);
  return v93 > 1 && v93 == ((v91 - v90) >> 3) + 1;
}

void sub_22354907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::StemStretch::FeatureRange::~FeatureRange(EQKit::StemStretch::FeatureRange *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void **)((char *)this + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v3);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear((void *)this + 2);
}

void *EQKit::StemStretch::FeatureCluster::FeatureCluster(void *this)
{
  this[2] = 0;
  this[1] = 0;
  *this = this + 1;
  return this;
}

{
  this[2] = 0;
  this[1] = 0;
  *this = this + 1;
  return this;
}

void EQKit::StemStretch::FeatureCluster::~FeatureCluster(EQKit::StemStretch::FeatureCluster *this)
{
}

{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this, *((void **)this + 1));
}

double *EQKit::StemStretch::Stem::Stem(double *this, double a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t *EQKit::StemStretch::FeatureCluster::addPoint(uint64_t **this, uint64_t a2)
{
  uint64_t v3 = a2;
  return std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(this, (unint64_t *)&v3, &v3);
}

CGPath *EQKit::StemStretch::Glyph::newPathWithLength(EQKit::StemStretch::Glyph *this, double a2, CGSize *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return 0;
  }
  float64x2_t v7 = *(float64x2_t *)MEMORY[0x263F00148];
  if (*(unsigned char *)(v4 + 120))
  {
    uint64_t v8 = (CGFloat *)(v4 + 88);
  }
  else
  {
    float64x2_t v46 = *(float64x2_t *)MEMORY[0x263F00148];
    uint64_t v8 = EQKitPath::computePathBounds((CGFloat *)v4);
    float64x2_t v7 = v46;
  }
  double v10 = v8[2];
  double v11 = v8[3];
  int v12 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1) {
    double v13 = v8[2];
  }
  else {
    double v13 = v8[3];
  }
  double v14 = a2 - v13;
  if (a2 - v13 <= 0.0)
  {
    uint64_t v19 = *((void *)this + 1);
    if (*(unsigned char *)(v19 + 120)) {
      uint64_t v20 = (CGSize *)(v19 + 88);
    }
    else {
      uint64_t v20 = (CGSize *)EQKitPath::computePathBounds((CGFloat *)v19);
    }
    double width = v20->width;
    double height = v20->height;
    *a3 = v20[1];
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -width, -height);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, 0);
  }
  else
  {
    double v15 = *v8;
    double v16 = v8[1];
    uint64_t v18 = *((void *)this + 6);
    uint64_t v17 = *((void *)this + 7);
    a3->double width = v10;
    a3->double height = v11;
    float64x2_t v47 = v7;
    if (v12 == 1) {
      a3->double width = v10 + v14;
    }
    else {
      a3->double height = v14 + v11;
    }
    char v21 = (EQKitPath *)*((void *)this + 1);
    EQKitPath::extractPath(v21);
    std::vector<CGPoint>::vector(__p, (uint64_t)v21 + 8);
    uint64_t v22 = *((void *)this + 3);
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v22) >> 3);
    BOOL v24 = v23 >= 2;
    unint64_t v25 = v23 - 2;
    float64x2_t v26 = v47;
    if (v24)
    {
      uint64_t v27 = 0;
      unint64_t v28 = (float64x2_t *)__p[0];
      uint64_t v29 = ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3) + 1;
      int32x2_t v30 = vdup_n_s32(v12 == 1);
      v31.i64[0] = v30.u32[0];
      v31.i64[1] = v30.u32[1];
      int8x16_t v32 = (int8x16_t)vdupq_lane_s64(0x8000000000000000, 0);
      v33.i64[1] = v32.i64[1];
      *(double *)v33.i64 = v14 / (double)(unint64_t)((v17 - v18) >> 3);
      v32.i64[1] = v33.i64[0];
      float64x2_t v34 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v31, 0x3FuLL)), v33, v32);
      uint64_t v35 = 1;
      do
      {
        if (v35 == v29) {
          break;
        }
        float64x2_t v26 = vaddq_f64(v26, v34);
        uint64_t v36 = (void *)(v22 + 24 * v35);
        uint64_t v39 = (void *)*v36;
        long long v37 = v36 + 1;
        unint64_t v38 = v39;
        if (v39 != v37)
        {
          do
          {
            v28[v38[4]] = vaddq_f64(v26, v28[v38[4]]);
            uint64_t v40 = (void *)v38[1];
            if (v40)
            {
              do
              {
                uint64_t v41 = v40;
                uint64_t v40 = (void *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                uint64_t v41 = (void *)v38[2];
                BOOL v42 = *v41 == (void)v38;
                unint64_t v38 = v41;
              }
              while (!v42);
            }
            unint64_t v38 = v41;
          }
          while (v41 != v37);
        }
        ++v35;
        BOOL v42 = v27++ == v25;
      }
      while (!v42);
    }
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -v15, -v16);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, (uint64_t *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return Mutable;
}

void sub_223549440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **EQKit::StemStretch::FeatureCluster::operator=(uint64_t **a1, uint64_t **a2)
{
  if (a1 != a2) {
    std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *a2, a2 + 1);
  }
  return a1;
}

BOOL EQKit::StemStretch::FeatureCluster::containsPoint(EQKit::StemStretch::FeatureCluster *this, unint64_t a2)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  int v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      int v5 = (char *)v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((void *)v5 + 4) > a2) {
LABEL_12:
  }
    int v5 = v2;
  return v5 != v2;
}

double EQKit::StemStretch::Stem::Stem(EQKit::StemStretch::Stem *this, const EQKit::StemStretch::Stem *a2)
{
  double result = *(double *)a2;
  *(void *)this = *(void *)a2;
  return result;
}

{
  double result;

  double result = *(double *)a2;
  *(void *)this = *(void *)a2;
  return result;
}

double EQKit::StemStretch::Stem::operator=(double *a1, double *a2)
{
  if (a1 != a2)
  {
    double result = *a2;
    *a1 = *a2;
  }
  return result;
}

uint64_t EQKit::StemStretch::FeatureRange::FeatureRange(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = a3;
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + ++*(void *)(this + 16) = a1 + 16;
  *(void *)(a1 + 24) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x560], 8) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(this + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  int v5 = operator new(0x38uLL);
  v5[1] = xmmword_223837EB0;
  *((_DWORD *)v5 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *(void *)int v5 = v4;
  *((void *)v5 + 1) = v4;
  *(void *)(a1 + ++*(void *)(this + 16) = v5;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = 1;
  return a1;
}

void sub_2235495E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&a10);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v11);
  _Unwind_Resume(a1);
}

void *std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + _Block_object_dispose(&STACK[0x560], 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t EQKit::StemStretch::FeatureRange::Span::split(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(double *)a2;
  double v3 = *(double *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 16);
  BOOL v6 = v3 - *(double *)a2 == 0.0 && v5 == 1;
  if (!v6 && (v3 <= *(double *)a1 || v4 >= *(double *)(a1 + 8))) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 1 || v7 == v5) {
    return 0;
  }
  double v11 = *(double *)a1;
  if (*(double *)a1 == v4)
  {
    double v12 = *(double *)(a1 + 8);
    if (v12 == v3)
    {
      if (v5 == 1)
      {
        if (a3 != a1)
        {
          *(double *)a3 = v11;
          *(double *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v12;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
        }
        uint64_t v9 = 1;
        *(_DWORD *)(a3 + ++*(void *)(this + 16) = 1;
        return v9;
      }
      if (!v7)
      {
        if (a3 != a2)
        {
          *(double *)a3 = v4;
          *(double *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v3;
          *(_DWORD *)(a3 + ++*(void *)(this + 16) = v5;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
        }
        return 1;
      }
      return 0;
    }
  }
  if (v11 >= v4)
  {
    uint64_t v13 = 0;
  }
  else
  {
    *(double *)a3 = v11;
    *(double *)(a3 + _Block_object_dispose(&STACK[0x560], 8) = v4;
    *(_DWORD *)(a3 + ++*(void *)(this + 16) = v7;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    double v11 = *(double *)a1;
    double v4 = *(double *)a2;
    double v3 = *(double *)(a2 + 8);
    uint64_t v13 = 1;
    int v5 = *(_DWORD *)(a2 + 16);
  }
  if (v11 > v4) {
    double v4 = v11;
  }
  if (v3 >= *(double *)(a1 + 8)) {
    double v3 = *(double *)(a1 + 8);
  }
  uint64_t v14 = a3 + 40 * v13;
  *(double *)uint64_t v14 = v4;
  *(double *)(v14 + _Block_object_dispose(&STACK[0x560], 8) = v3;
  *(_DWORD *)(v14 + ++*(void *)(this + 16) = v5;
  uint64_t v9 = v13 + 1;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0;
  double v15 = *(double *)(a2 + 8);
  double v16 = *(double *)(a1 + 8);
  if (v15 < v16)
  {
    int v17 = *(_DWORD *)(a1 + 16);
    uint64_t v18 = a3 + 40 * v9;
    *(double *)uint64_t v18 = v15;
    *(double *)(v18 + _Block_object_dispose(&STACK[0x560], 8) = v16;
    *(_DWORD *)(v18 + ++*(void *)(this + 16) = v17;
    uint64_t v9 = v13 | 2;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
  }
  return v9;
}

__n128 std::list<EQKit::StemStretch::FeatureRange::Span>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6 = (char *)operator new(0x38uLL);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v6 + _Block_object_dispose(&STACK[0x560], 8) = *(_DWORD *)(a3 + 16);
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 40) = result;
  uint64_t v8 = *a2;
  *(void *)(v8 + _Block_object_dispose(&STACK[0x560], 8) = v6;
  *(void *)BOOL v6 = v8;
  *a2 = (uint64_t)v6;
  *((void *)v6 + 1) = a2;
  ++*(void *)(a1 + 16);
  return result;
}

void EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, void *__p, void *a3)
{
  double v3 = a3;
  double v4 = __p;
  BOOL v6 = (void *)(a1 + 16);
  if (*(void **)(a1 + 24) != __p) {
    double v4 = (void *)*__p;
  }
  if (v6 != a3) {
    double v3 = (void *)a3[1];
  }
  while (v4 != v3)
  {
    int v7 = v4;
    double v4 = (void *)v4[1];
    if (v4 != v6 && v7[8] == *((_DWORD *)v4 + 8))
    {
      _WORD v4[2] = *((void *)v7 + 2);
      uint64_t v8 = *(void *)v7;
      *(void *)(v8 + _Block_object_dispose(&STACK[0x560], 8) = v4;
      **((void **)v7 + 1) = v8;
      --*(void *)(a1 + 32);
      operator delete(v7);
    }
  }
}

BOOL EQKit::StemStretch::FeatureRange::Span::compareOrthogonal(double *a1, double *a2)
{
  double v2 = a1[3];
  double v3 = a2[3];
  if (v2 < v3) {
    return 1;
  }
  if (v2 == v3) {
    return *a1 < *a2;
  }
  return 0;
}

uint64_t EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  while (v4 != v3 && v4 + 40 != v3)
  {
    if (*(double *)(v4 + 8) == *(double *)(v4 + 40)
      && *(double *)(v4 + 24) == *(double *)(v4 + 64)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v4 + 56))
    {
      *(void *)(v4 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(v4 + 48);
      uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(v4 + 80, v3, v4 + 40);
      a2[1] = v3;
    }
    else
    {
      v4 += 40;
    }
  }
  return result;
}

void EQKit::StemStretch::FeatureRange::addFeatureCluster(EQKit::StemStretch::FeatureRange *this, double a2, double a3)
{
  int v6 = *((_DWORD *)this + 2);
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v18 = v19;
  unint64_t v7 = *((void *)this + 6);
  if (v7 >= *((void *)this + 7))
  {
    uint64_t v8 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t)this + 40, (uint64_t)&v18);
  }
  else
  {
    std::set<unsigned long>::set[abi:nn180100](*((uint64_t **)this + 6), (uint64_t)&v18);
    uint64_t v8 = v7 + 24;
    *((void *)this + 6) = v7 + 24;
  }
  *((void *)this + 6) = v8;
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v18, v19[0]);
  uint64_t v9 = *((void *)this + 6);
  uint64_t v10 = *(EQKitPath **)this;
  EQKitPath::extractPath(v10);
  uint64_t v12 = *((void *)v10 + 1);
  uint64_t v11 = *((void *)v10 + 2);
  if (v11 != v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    double v15 = (uint64_t **)(v9 - 24);
    do
    {
      double v16 = (double *)(v12 + v13);
      if (v6 != 1) {
        double v16 = (double *)(v12 + v13 + 8);
      }
      if (*v16 >= a2 && *v16 <= a3)
      {
        uint64_t v18 = (void **)v14;
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v15, (unint64_t *)&v18, (uint64_t *)&v18);
        uint64_t v12 = *((void *)v10 + 1);
        uint64_t v11 = *((void *)v10 + 2);
      }
      ++v14;
      v13 += 16;
    }
    while (v14 < (v11 - v12) >> 4);
  }
}

void sub_223549A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void EQKit::StemStretch::FeatureRange::addStem(EQKit::StemStretch::FeatureRange *this, double a2, double a3, double a4)
{
  int v6 = (char *)this + 80;
  unint64_t v7 = *((void *)this + 10);
  uint64_t v8 = (double *)*((void *)this + 9);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (double *)*((void *)this + 8);
    uint64_t v11 = v8 - v10;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      double v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)v6, v14);
      uint64_t v10 = (double *)*((void *)this + 8);
      uint64_t v8 = (double *)*((void *)this + 9);
    }
    else
    {
      double v15 = 0;
    }
    double v16 = (double *)&v15[8 * v11];
    int v17 = &v15[8 * v14];
    *double v16 = a4;
    uint64_t v9 = v16 + 1;
    while (v8 != v10)
    {
      uint64_t v18 = *((void *)v8-- - 1);
      *((void *)v16-- - 1) = v18;
    }
    *((void *)this + _Block_object_dispose(&STACK[0x560], 8) = v16;
    *((void *)this + 9) = v9;
    *((void *)this + 10) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    double *v8 = a4;
    uint64_t v9 = v8 + 1;
  }
  *((void *)this + 9) = v9;
}

uint64_t std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(uint64_t result, uint64_t a2, double *a3)
{
  if (result != a2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result;
    do
    {
      ++v3;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a2);
    do
    {
      unint64_t v5 = v3 >> 1;
      uint64_t v6 = result;
      if (v3 != 1)
      {
        unint64_t v7 = v5 + 1;
        uint64_t v6 = result;
        do
        {
          uint64_t v6 = *(void *)(v6 + 8);
          --v7;
        }
        while (v7 > 1);
      }
      if (*(double *)(v6 + 24) < *a3)
      {
        uint64_t result = *(void *)(v6 + 8);
        unint64_t v5 = v3 + ~v5;
      }
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v20 = v7;
  uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(v7, v10);
  unint64_t v12 = &v11[40 * v3];
  long long __p = v11;
  int v17 = v12;
  uint64_t v19 = &v11[40 * v13];
  *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v18 = v12 + 40;
  std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v14 = a1[1];
  if (v18 != v17) {
    uint64_t v18 = &v17[(v18 - v17 - 40) % 0x28uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_223549D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 40);
    v2 -= 40;
    *(_OWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_DWORD *)(v4 + ++*(void *)(this + 16) = *(_DWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(uint64_t result, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = (long long *)result;
  unint64_t v28 = a2;
  uint64_t v29 = (long long *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v13 = (char *)v10 - (char *)v11;
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v10 - (char *)v11) >> 3);
    if (!(!v7 & v6))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float64x2_t v26 = *a3;
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = ((uint64_t (*)(void))v26)();
          if (result) {
            uint64_t result = (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v29, &v28);
          }
          break;
        case 3uLL:
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40), (long long *)((char *)v10 - 40), a3);
          break;
        case 4uLL:
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40), v11 + 5, (long long *)((char *)v10 - 40), a3);
          break;
        case 5uLL:
          unint64_t v28 = (long long *)((char *)v10 - 40);
          uint64_t result = (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40), v11 + 5, (long long *)((char *)v11 + 120), (long long *)((char *)v10 - 40), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 959)
    {
      if (a5) {
        return std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v11, v10, (uint64_t (**)(_OWORD *, void))a3);
      }
      else {
        return std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v11, v10, (uint64_t (**)(_OWORD *, void))a3);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v15 = v14 >> 1;
    double v16 = (long long *)((char *)v10 - 40);
    if ((unint64_t)v13 >= 0x1401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v11, (long long *)((char *)v11 + 40 * (v14 >> 1)), v16, a3);
      int v17 = v28;
      uint64_t v18 = 5 * v15;
      uint64_t v19 = 40 * v15;
      uint64_t v20 = 40 * v15 - 40;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v29 + 40), (long long *)((char *)v29 + v20), v28 - 5, a3);
      v19 += 40;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v29 + 5, (long long *)((char *)v29 + v19), (long long *)((char *)v17 - 120), a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v29 + v20), (long long *)((char *)v29 + 8 * v18), (long long *)((char *)v29 + v19), a3);
      uint64_t v27 = (long long *)((char *)v29 + 8 * v18);
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v29, &v27);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v11 + 40 * (v14 >> 1)), v11, v16, a3);
      if (a5)
      {
LABEL_13:
        unint64_t v10 = v28;
        goto LABEL_14;
      }
    }
    char v21 = ((uint64_t (*)(char *))*a3)((char *)v29 - 40);
    unint64_t v10 = v28;
    if ((v21 & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v29, v28, a3);
      uint64_t v11 = (long long *)result;
LABEL_22:
      a5 = 0;
      uint64_t v29 = v11;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    a6.n128_f64[0] = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v29, v10, (uint64_t (**)(void))a3);
    unint64_t v23 = v22;
    if ((v24 & 1) == 0) {
      goto LABEL_21;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v29, v22, a3);
    uint64_t v11 = (long long *)((char *)v23 + 40);
    uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((long long *)((char *)v23 + 40), v10, a3);
    if (result)
    {
      if (v25) {
        return result;
      }
      unint64_t v28 = v23;
      uint64_t v11 = v29;
      unint64_t v10 = v23;
    }
    else
    {
      if (!v25)
      {
LABEL_21:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(v29, v23, a3, -i, a5 & 1, a6);
        uint64_t v11 = (long long *)((char *)v23 + 40);
        goto LABEL_22;
      }
      uint64_t v29 = (long long *)((char *)v23 + 40);
    }
  }
  if (v11 != v10) {
    return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(v11, v10, v10, (unsigned int (**)(int64_t, uint64_t))a3, a6);
  }
  return result;
}

long long **std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(long long **result, long long **a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  long long v4 = **result;
  int v5 = *((_DWORD *)*result + 4);
  long long v6 = *(long long *)((char *)*result + 24);
  if (*result != *a2)
  {
    long long *v2 = *v3;
    *((_DWORD *)v2 + 4) = *((_DWORD *)v3 + 4);
    *(long long *)((char *)v2 + 24) = *(long long *)((char *)v3 + 24);
  }
  *uint64_t v3 = v4;
  *((_DWORD *)v3 + 4) = v5;
  *(long long *)((char *)v3 + 24) = v6;
  return result;
}

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    uint64_t v6 = result;
    char v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      uint64_t v9 = 0;
      unint64_t v10 = (_OWORD *)result;
      do
      {
        uint64_t v11 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v15 = *v11;
          int v16 = *((_DWORD *)v10 + 14);
          long long v17 = v10[4];
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_OWORD *)(v13 + 40) = *(_OWORD *)(v6 + v12);
            *(_DWORD *)(v13 + 56) = *(_DWORD *)(v6 + v12 + 16);
            *(_OWORD *)(v13 + ++*(void *)(this + 64) = *(_OWORD *)(v6 + v12 + 24);
            if (!v12) {
              break;
            }
            v12 -= 40;
            uint64_t result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          if ((long long *)v14 != &v15)
          {
            *(_OWORD *)uint64_t v14 = v15;
            *(_DWORD *)(v14 + ++*(void *)(this + 16) = v16;
            *(_OWORD *)(v14 + 24) = v17;
          }
        }
        char v7 = (_OWORD *)((char *)v11 + 40);
        v9 += 40;
        unint64_t v10 = v11;
      }
      while ((_OWORD *)((char *)v11 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    uint64_t v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      uint64_t v9 = result - 40;
      do
      {
        unint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v6);
        if (result)
        {
          long long v12 = *v10;
          int v13 = *((_DWORD *)v6 + 14);
          long long v14 = v6[4];
          uint64_t v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 80) = *(_OWORD *)(v11 + 40);
            *(_DWORD *)(v11 + 96) = *(_DWORD *)(v11 + 56);
            *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 + 64);
            uint64_t result = (*a3)(&v12, v11);
            v11 -= 40;
          }
          while ((result & 1) != 0);
          if ((long long *)(v11 + 80) != &v12)
          {
            *(_OWORD *)(v11 + 80) = v12;
            *(_DWORD *)(v11 + 96) = v13;
            *(_OWORD *)(v11 + 104) = v14;
          }
        }
        char v7 = (_OWORD *)((char *)v10 + 40);
        v9 += 40;
        uint64_t v6 = v10;
      }
      while ((_OWORD *)((char *)v10 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  long long v12 = a2;
  int v13 = a1;
  uint64_t v11 = a3;
  char v7 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    if (!(*a4)(v12, v13)) {
      return 1;
    }
    uint64_t v9 = &v13;
    unint64_t v10 = &v12;
    goto LABEL_9;
  }
  if (!result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
    if (!(*a4)(v11, v12)) {
      return 1;
    }
    uint64_t v9 = &v12;
    unint64_t v10 = &v11;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(v9, v10);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v11);
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  int v13 = a2;
  long long v10 = *(_OWORD *)a1;
  int v11 = *(_DWORD *)(a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 24);
  if ((*a3)(&v10, (long long *)((char *)a2 - 40)))
  {
    int v5 = (long long *)a1;
    do
    {
      int v5 = (long long *)((char *)v5 + 40);
      long long v14 = v5;
    }
    while (((*a3)(&v10, v5) & 1) == 0);
  }
  else
  {
    uint64_t v6 = (long long *)(a1 + 40);
    do
    {
      int v5 = v6;
      long long v14 = v6;
      if (v6 >= v13) {
        break;
      }
      int v7 = (*a3)(&v10, v6);
      uint64_t v6 = (long long *)((char *)v5 + 40);
    }
    while (!v7);
  }
  uint64_t v8 = v13;
  if (v5 < v13)
  {
    do
    {
      uint64_t v8 = (long long *)((char *)v8 - 40);
      int v13 = v8;
    }
    while (((*a3)(&v10, v8) & 1) != 0);
    int v5 = v14;
  }
  if (v5 < v8)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
      do
        long long v14 = (long long *)((char *)v14 + 40);
      while (!((unsigned int (*)(long long *))*a3)(&v10));
      do
        int v13 = (long long *)((char *)v13 - 40);
      while ((((uint64_t (*)(long long *))*a3)(&v10) & 1) != 0);
      int v5 = v14;
    }
    while (v14 < v13);
  }
  if ((long long *)((char *)v5 - 40) != (long long *)a1)
  {
    *(_OWORD *)a1 = *(long long *)((char *)v5 - 40);
    *(_DWORD *)(a1 + ++*(void *)(this + 16) = *((_DWORD *)v5 - 6);
    *(_OWORD *)(a1 + 24) = *(v5 - 1);
  }
  if ((long long *)((char *)v5 - 40) != &v10)
  {
    *(long long *)((char *)v5 - 40) = v10;
    *((_DWORD *)v5 - 6) = v11;
    *(v5 - 1) = v12;
  }
  return v5;
}

double std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, long long *a2, uint64_t (**a3)(void))
{
  uint64_t v5 = 0;
  long long v17 = a2;
  long long v14 = *(_OWORD *)a1;
  int v15 = *(_DWORD *)(a1 + 16);
  long long v16 = *(_OWORD *)(a1 + 24);
  do
  {
    v5 += 40;
    uint64_t v18 = (long long *)(v5 + a1);
  }
  while (((*a3)() & 1) != 0);
  int v7 = v17;
  if (v5 == 40)
  {
    long long v10 = (long long *)(a1 + 40);
    do
    {
      if (v10 >= v7) {
        break;
      }
      int v11 = *a3;
      int v7 = (long long *)((char *)v7 - 40);
      long long v17 = v7;
    }
    while ((((uint64_t (*)(long long *, long long *))v11)(v7, &v14) & 1) == 0);
  }
  else
  {
    uint64_t v8 = (long long *)((char *)v17 - 40);
    do
    {
      long long v17 = v8;
      int v9 = ((uint64_t (*)(long long *, long long *))*a3)(v8, &v14);
      uint64_t v8 = (long long *)((char *)v8 - 40);
    }
    while (!v9);
    long long v10 = v18;
  }
  long long v12 = v10;
  if (v10 < v17)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v18, &v17);
      do
        uint64_t v18 = (long long *)((char *)v18 + 40);
      while (((*a3)() & 1) != 0);
      do
        long long v17 = (long long *)((char *)v17 - 40);
      while (!(*a3)());
      long long v12 = v18;
    }
    while (v18 < v17);
  }
  if ((long long *)((char *)v12 - 40) != (long long *)a1)
  {
    *(_OWORD *)a1 = *(long long *)((char *)v12 - 40);
    *(_DWORD *)(a1 + ++*(void *)(this + 16) = *((_DWORD *)v12 - 6);
    long long v6 = *(v12 - 1);
    *(_OWORD *)(a1 + 24) = v6;
  }
  if ((long long *)((char *)v12 - 40) != &v14)
  {
    *(long long *)((char *)v12 - 40) = v14;
    *((_DWORD *)v12 - 6) = v15;
    *(void *)&long long v6 = v16;
    *(v12 - 1) = v16;
  }
  return *(double *)&v6;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  long long v16 = a2;
  long long v17 = a1;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *a3;
      long long v16 = (long long *)((char *)a2 - 40);
      if (((unsigned int (*)(void))v8)()) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), (long long *)((char *)a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), a1 + 5, (long long *)((char *)a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), a1 + 5, (long long *)((char *)a1 + 120), (long long *)((char *)a2 - 40), a3);
      return 1;
    default:
      int v9 = a1 + 5;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (long long *)((char *)a1 + 40), a1 + 5, a3);
      long long v10 = (long long *)((char *)a1 + 120);
      if (v10 == a2) {
        return 1;
      }
      int v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      long long v13 = *v10;
      int v14 = *((_DWORD *)v10 + 4);
      long long v15 = *(long long *)((char *)v10 + 24);
      do
      {
        long long v12 = v9;
        *(long long *)((char *)v9 + 40) = *v9;
        *((_DWORD *)v9 + 14) = *((_DWORD *)v9 + 4);
        v9[4] = *(long long *)((char *)v9 + 24);
        if (v9 == v17) {
          break;
        }
        int v9 = (long long *)((char *)v9 - 40);
      }
      while (((*a3)(&v13, (long long *)((char *)v12 - 40)) & 1) != 0);
      if (v12 != &v13)
      {
        *long long v12 = v13;
        *((_DWORD *)v12 + 4) = v14;
        *(long long *)((char *)v12 + 24) = v15;
      }
      if (++v11 == 8) {
        break;
      }
    }
    int v9 = v10;
    long long v10 = (long long *)((char *)v10 + 40);
    if (v10 == v16) {
      return 1;
    }
  }
  return (long long *)((char *)v10 + 40) == v16;
}

long long **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  long long v13 = a2;
  int v14 = a1;
  int v11 = a4;
  long long v12 = a3;
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a5);
  BOOL result = (long long **)(*a5)(a4, a3);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    BOOL result = (long long **)(*a5)(v12, a2);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
      BOOL result = (long long **)(*a5)(v13, a1);
      if (result) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
      }
    }
  }
  return result;
}

long long **std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  long long v16 = a2;
  long long v17 = a1;
  int v14 = a4;
  long long v15 = a3;
  long long v13 = a5;
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a4, a6);
  BOOL result = (long long **)(*a6)(a5, a4);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
    BOOL result = (long long **)(*a6)(v14, a3);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v15, &v14);
      BOOL result = (long long **)(*a6)(v15, a2);
      if (result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v16, &v15);
        BOOL result = (long long **)(*a6)(v16, a1);
        if (result) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(long long *a1, long long *a2, long long *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  float64x2_t v26 = a1;
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 40;
    if ((char *)a2 - (char *)a1 >= 41)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = (long long *)((char *)a1 + 40 * v11);
      do
      {
        a5.n128_f64[0] = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v10, v13);
        long long v13 = (long long *)((char *)v13 - 40);
        --v12;
      }
      while (v12);
    }
    BOOL v25 = a2;
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      int v14 = a2;
      do
      {
        if (((unsigned int (*)(long long *, long long *, __n128))*a4)(v14, v26, a5))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v25, &v26);
          a5.n128_f64[0] = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v26, a4, v10, v26);
        }
        int v14 = (long long *)((char *)v25 + 40);
        BOOL v25 = v14;
      }
      while (v14 != a3);
      uint64_t v8 = v26;
      uint64_t v9 = (char *)a2 - (char *)v26;
    }
    if (v9 >= 41)
    {
      int64_t v15 = v9 / 0x28uLL;
      long long v16 = (char *)a2 - 40;
      do
      {
        uint64_t v18 = *(void *)v8;
        uint64_t v17 = *((void *)v8 + 1);
        int v19 = *((_DWORD *)v8 + 4);
        uint64_t v21 = *((void *)v8 + 3);
        uint64_t v20 = *((void *)v8 + 4);
        uint64_t v22 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v15);
        if (v16 == (char *)v22)
        {
          *(void *)uint64_t v22 = v18;
          *(void *)(v22 + _Block_object_dispose(&STACK[0x560], 8) = v17;
          *(_DWORD *)(v22 + ++*(void *)(this + 16) = v19;
          *(void *)(v22 + 24) = v21;
          *(void *)(v22 + 32) = v20;
        }
        else
        {
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v16;
          *(_DWORD *)(v22 + ++*(void *)(this + 16) = *((_DWORD *)v16 + 4);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v16 + 24);
          *(void *)long long v16 = v18;
          *((void *)v16 + 1) = v17;
          *((_DWORD *)v16 + 4) = v19;
          *((void *)v16 + 3) = v21;
          *((void *)v16 + 4) = v20;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, v22 + 40, (uint64_t (**)(uint64_t, long long *))a4, 0xCCCCCCCCCCCCCCCDLL * ((v22 + 40 - (uint64_t)v8) >> 3));
        }
        v16 -= 40;
      }
      while (v15-- > 2);
      return v25;
    }
  }
  return a3;
}

double std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    int v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      int64_t v13 = a1 + 40 * v12;
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, v13 + 40))
      {
        v13 += 40;
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(int64_t, long long *))*a2)(v13, v7) & 1) == 0)
      {
        long long v20 = *v7;
        int v21 = *((_DWORD *)v7 + 4);
        long long v15 = *(long long *)((char *)v7 + 24);
        long long v22 = v15;
        do
        {
          long long v16 = (long long *)v13;
          if (v7 != (long long *)v13)
          {
            long long *v7 = *(_OWORD *)v13;
            *((_DWORD *)v7 + 4) = *(_DWORD *)(v13 + 16);
            long long v15 = *(_OWORD *)(v13 + 24);
            *(long long *)((char *)v7 + 24) = v15;
          }
          if (v9 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          int64_t v13 = a1 + 40 * v17;
          uint64_t v18 = 2 * v12 + 2;
          if (v18 < a3 && (*a2)(a1 + 40 * v17, v13 + 40))
          {
            v13 += 40;
            uint64_t v17 = v18;
          }
          int v7 = v16;
          int64_t v12 = v17;
        }
        while (!(*a2)(v13, (uint64_t)&v20));
        if (v16 != &v20)
        {
          *long long v16 = v20;
          *((_DWORD *)v16 + 4) = v21;
          *(void *)&long long v15 = v22;
          *(long long *)((char *)v16 + 24) = v22;
        }
      }
    }
  }
  return *(double *)&v15;
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 40))
    {
      v9 += 40;
      uint64_t v6 = v11;
    }
    if (a1 != v9)
    {
      *(_OWORD *)a1 = *(_OWORD *)v9;
      *(_DWORD *)(a1 + ++*(void *)(this + 16) = *(_DWORD *)(v9 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v9 + 24);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v19 = v4;
    uint64_t v20 = v5;
    unint64_t v10 = v6 >> 1;
    uint64_t v11 = a1 + 40 * (v6 >> 1);
    uint64_t v12 = a2 - 40;
    if ((*a3)(v11, (long long *)(a2 - 40)))
    {
      long long v16 = *(_OWORD *)(a2 - 40);
      int v17 = *(_DWORD *)(a2 - 24);
      long long v13 = *(_OWORD *)(a2 - 16);
      long long v18 = v13;
      do
      {
        uint64_t v14 = v11;
        if (v12 != v11)
        {
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
          *(_DWORD *)(v12 + ++*(void *)(this + 16) = *(_DWORD *)(v11 + 16);
          long long v13 = *(_OWORD *)(v11 + 24);
          *(_OWORD *)(v12 + 24) = v13;
        }
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        uint64_t v11 = a1 + 40 * v10;
        uint64_t v12 = v14;
      }
      while (((*a3)(v11, &v16) & 1) != 0);
      if ((long long *)v14 != &v16)
      {
        *(_OWORD *)uint64_t v14 = v16;
        *(_DWORD *)(v14 + ++*(void *)(this + 16) = v17;
        *(void *)&long long v13 = v18;
        *(_OWORD *)(v14 + 24) = v18;
      }
    }
  }
  return *(double *)&v13;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    do
    {
      if (result != a3)
      {
        *(_OWORD *)a3 = *(_OWORD *)result;
        *(_DWORD *)(a3 + ++*(void *)(this + 16) = *(_DWORD *)(result + 16);
        *(_OWORD *)(a3 + 24) = *(_OWORD *)(result + 24);
      }
      result += 40;
      a3 += 40;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 24;
        std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  long long v15 = (uint64_t *)&v11[24 * v3];
  int v17 = &v11[24 * v10];
  std::set<unsigned long>::set[abi:nn180100](v15, a2);
  long long v16 = v15 + 3;
  std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer((uint64_t **)a1, &v14);
  uint64_t v12 = *(void *)(a1 + 8);
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(&v14);
  return v12;
}

void sub_22354B1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer(uint64_t **a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (uint64_t)a1[1];
  BOOL result = (uint64_t *)a2[1];
  while ((uint64_t *)v4 != v5)
  {
    v4 -= 24;
    BOOL result = std::set<unsigned long>::set[abi:nn180100](result - 3, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void **std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<EQKit::StemStretch::FeatureCluster>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + ++*(void *)(this + 16) = i - 24;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(i - 24, *(void **)(i - 16));
  }
}

uint64_t *std::vector<EQKit::StemStretch::FeatureCluster>::__init_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    return std::vector<EQKit::StemStretch::FeatureCluster>::__construct_at_end<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(v6, a2, a3);
  }
  return result;
}

uint64_t *std::vector<EQKit::StemStretch::FeatureCluster>::__construct_at_end<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      BOOL result = std::set<unsigned long>::set[abi:nn180100]((uint64_t *)(v4 + v7), a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_22354B3A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<EQKit::StemStretch::Stem>::__init_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = std::vector<unsigned long>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<EQKit::StemStretch::FeatureCluster>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::string>::__vallocate[abi:nn180100]((void *)a1, v10);
    uint64_t v11 = (uint64_t *)a1;
    uint64_t v12 = a2;
    uint64_t v13 = (uint64_t)a3;
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) < a4)
  {
    uint64_t v14 = (uint64_t **)(a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,0>(a2, v14, v8);
    uint64_t v11 = (uint64_t *)a1;
    uint64_t v12 = (uint64_t)v14;
    uint64_t v13 = (uint64_t)a3;
LABEL_11:
    std::vector<EQKit::StemStretch::FeatureCluster>::__construct_at_end<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(v11, v12, v13);
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,0>(a2, a3, v8);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17 != v15)
  {
    do
    {
      uint64_t v18 = v17 - 24;
      std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v17 - 24, *(void **)(v17 - 16));
      uint64_t v17 = v18;
    }
    while (v18 != v16);
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v16;
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)(v3 - 24), *((void **)v3 - 2));
        unint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    unint64_t v6 = (void *)(a1 + 8);
    do
    {
      if (v4 != a3) {
        std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a3, *v4, v6);
      }
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

char *std::vector<EQKit::StemStretch::Stem>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>(void *a1, char *a2, char *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  BOOL result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      BOOL v25 = result;
      if (a2 != a3)
      {
        float64x2_t v26 = result;
        do
        {
          if (v6 != v26) {
            *(void *)float64x2_t v26 = *(void *)v6;
          }
          v6 += 8;
          v26 += 8;
          v25 += 8;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v25 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[8 * v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          if (v6 != result) {
            *(void *)BOOL result = *(void *)v6;
          }
          v6 += 8;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      long long v22 = v12;
      if (v20 != a3)
      {
        uint64_t v23 = v12;
        do
        {
          uint64_t v24 = *(void *)v20;
          v20 += 8;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 += 8;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v22 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<unsigned long>::__vallocate[abi:nn180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

uint64_t *std::set<unsigned long>::set[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_22354B814(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      BOOL result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    id v7[4] = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<unsigned long>::__find_equal<unsigned long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    unint64_t v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    BOOL v14 = result;
    unint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<unsigned long>::__node_insert_multi(v5, v8);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          BOOL v9 = a2;
        }
        while (a2 != a3);
      }
    }
    BOOL result = (uint64_t **)std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(v5, a2 + 4);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_22354BC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = v2;
    }
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  unint64_t v5 = *a2;
  v4[4] = *a2;
  unint64_t v6 = a1 + 1;
  unint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (uint64_t **)v7;
        if (v5 >= v7[4]) {
          break;
        }
        unint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t EQKit::Font::Metric::LengthEntry::LengthEntry(uint64_t this)
{
  for (uint64_t i = 0; i != 128; i += 16)
  {
    uint64_t v2 = this + i;
    *(_DWORD *)uint64_t v2 = 1;
    *(void *)(v2 + _Block_object_dispose(&STACK[0x560], 8) = 0;
  }
  uint64_t v3 = 128;
  do
  {
    uint64_t v4 = this + v3;
    *(_DWORD *)uint64_t v4 = 1;
    *(void *)(v4 + _Block_object_dispose(&STACK[0x560], 8) = 0;
    v3 += 16;
  }
  while (v4 + 16 != this + 256);
  uint64_t v5 = 256;
  do
  {
    uint64_t v6 = this + v5;
    *(_DWORD *)uint64_t v6 = 1;
    *(void *)(v6 + _Block_object_dispose(&STACK[0x560], 8) = 0;
    v5 += 16;
  }
  while (v6 + 16 != this + 384);
  for (uint64_t j = 0; j != 128; j += 16)
  {
    uint64_t v8 = this + j;
    *(_DWORD *)uint64_t v8 = 0;
    *(void *)(v8 + _Block_object_dispose(&STACK[0x560], 8) = 0;
    *(_DWORD *)(v8 + 12_Block_object_dispose(&STACK[0x560], 8) = 0;
    *(void *)(v8 + 136) = 0;
    *(_DWORD *)(v8 + 256) = 0;
    *(void *)(v8 + 2++*(void *)(this + 64) = 0;
  }
  return this;
}

__n128 EQKit::Font::Metric::LengthEntry::LengthEntry(EQKit::Font::Metric::LengthEntry *this, const EQKit::Font::Metric::LengthEntry *a2)
{
  for (uint64_t i = 0; i != 128; i += 16)
  {
    uint64_t v3 = (char *)this + i;
    *(_DWORD *)uint64_t v3 = 1;
    *((void *)v3 + 1) = 0;
  }
  uint64_t v4 = 128;
  do
  {
    uint64_t v5 = (char *)this + v4;
    *(_DWORD *)uint64_t v5 = 1;
    *((void *)v5 + 1) = 0;
    v4 += 16;
  }
  while (v5 + 16 != (char *)this + 256);
  uint64_t v6 = 256;
  do
  {
    unint64_t v7 = (char *)this + v6;
    *(_DWORD *)unint64_t v7 = 1;
    *((void *)v7 + 1) = 0;
    v6 += 16;
  }
  while (v7 + 16 != (char *)this + 384);
  for (uint64_t j = 128; j != 256; j += 16)
  {
    unint64_t v9 = (char *)this + j;
    *((_OWORD *)v9 - _Block_object_dispose(&STACK[0x560], 8) = *(_OWORD *)((char *)a2 + j - 128);
    *(_OWORD *)unint64_t v9 = *(_OWORD *)((char *)a2 + j);
    __n128 result = *(__n128 *)((char *)a2 + j + 128);
    *((__n128 *)v9 + _Block_object_dispose(&STACK[0x560], 8) = result;
  }
  return result;
}

__n128 EQKit::Font::Metric::LengthEntry::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = a2 + 128;
    do
    {
      uint64_t v4 = a1 + 128 + v2;
      *(_OWORD *)(v4 - 12_Block_object_dispose(&STACK[0x560], 8) = *(_OWORD *)(a2 + v2);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)(v3 + v2);
      __n128 result = *(__n128 *)(v3 + v2 + 128);
      *(__n128 *)(v4 + 12_Block_object_dispose(&STACK[0x560], 8) = result;
      v2 += 16;
    }
    while (v2 != 128);
  }
  return result;
}

double EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule(EQKit::Font::Metric::LengthEntry *this, const EQKit::Script::Info *a2, double a3)
{
  uint64_t v6 = *(void *)a2;
  if (*(uint64_t *)a2 <= 2)
  {
    if (v6)
    {
      if (v6 >= 1) {
        ++v6;
      }
    }
    else
    {
      uint64_t v6 = *((unsigned char *)a2 + 8) == 0;
    }
  }
  else
  {
    uint64_t v6 = 3;
  }
  uint64_t v7 = *((unsigned __int8 *)a2 + 9) | (2 * (v6 & ~(v6 >> 63)));
  uint64_t v8 = (_DWORD *)((char *)this + 16 * v7);
  if ((*v8 & 0xFFFFFFFD) != 0) {
    double v9 = EQKitLength::resolveToAbsoluteWithSizeAndRule((EQKit::Font::Metric::LengthEntry *)((char *)this + 16 * v7), *((double *)a2 + 2), a3);
  }
  else {
    double v9 = 0.0;
  }
  int v11 = v8[32];
  uint64_t v10 = (EQKitLength *)(v8 + 32);
  if ((v11 & 0xFFFFFFFD) != 0)
  {
    double v12 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v10, *((double *)a2 + 2), a3);
    if (v9 < v12) {
      double v9 = v12;
    }
  }
  if ((*((_DWORD *)this + 4 * v7 + 64) & 0xFFFFFFFD) != 0)
  {
    double v13 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v10, *((double *)a2 + 2), a3);
    if (v9 > v13) {
      return v13;
    }
  }
  return v9;
}

uint64_t EQKit::Font::Metric::LengthEntry::fromString(const std::string *a1, long long *a2)
{
  EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)&v71);
  int v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v4 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return 0;
  }
  std::string::size_type v7 = 0;
  while (memchr(" \t\n", v5->__r_.__value_.__s.__data_[v7], 3uLL))
  {
    if (size == ++v7) {
      return 0;
    }
  }
  if (v7 == -1) {
    return 0;
  }
  unint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    int v9 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    BOOL v10 = v9 < 0;
    if (v9 >= 0) {
      std::string::size_type v11 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v11 = a1->__r_.__value_.__r.__words[0];
    }
    if (v10) {
      std::string::size_type v12 = a1->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    if (v12 <= v7)
    {
LABEL_31:
      unint64_t v16 = -1;
    }
    else
    {
      double v13 = (unsigned __int8 *)(v11 + v7);
      BOOL v14 = (unsigned __int8 *)(v11 + v12);
LABEL_22:
      uint64_t v15 = 0;
      while (*v13 != asc_223848D13[v15])
      {
        if (++v15 == 3)
        {
          if (++v13 != v14) {
            goto LABEL_22;
          }
          goto LABEL_31;
        }
      }
      if (v13 == v14) {
        goto LABEL_31;
      }
      unint64_t v16 = (unint64_t)&v13[-v11];
      uint64_t v17 = &v13[-v11 - v7];
      if (v16 != -1) {
        std::string::size_type v12 = (std::string::size_type)v17;
      }
    }
    std::string::basic_string(&__str, a1, v7, v12, (std::allocator<char> *)&v69);
    int v18 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v18 >= 0) {
      unint64_t v19 = a1;
    }
    else {
      unint64_t v19 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    }
    if (v18 >= 0) {
      unint64_t v20 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      unint64_t v20 = a1->__r_.__value_.__l.__size_;
    }
    if (v20 <= v16)
    {
LABEL_41:
      std::string::size_type v7 = -1;
    }
    else
    {
      while (memchr(" \t\n", v19->__r_.__value_.__s.__data_[v16], 3uLL))
      {
        if (v20 == ++v16) {
          goto LABEL_41;
        }
      }
      std::string::size_type v7 = v16;
    }
    std::string::size_type v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v21 = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (!v21) {
      goto LABEL_54;
    }
    uint64_t v23 = 0;
    while (p_str->__r_.__value_.__s.__data_[v23] != 61)
    {
      if (v21 == ++v23) {
        goto LABEL_54;
      }
    }
    if (v21 == v23)
    {
LABEL_54:
      BOOL v24 = 0;
      int v25 = 0;
      int v26 = 0;
      uint64_t v27 = 0;
      uint64_t v23 = -1;
      goto LABEL_55;
    }
    if (v23)
    {
      if (v23 == -1)
      {
        BOOL v24 = 0;
        int v25 = 0;
        int v26 = 0;
        uint64_t v27 = 0;
        goto LABEL_55;
      }
      BOOL v24 = p_str->__r_.__value_.__s.__data_[v23 - 1] == 39;
    }
    else
    {
      BOOL v24 = 0;
    }
    std::string::basic_string(&v69, &__str, 0, v23 - v24, (std::allocator<char> *)&v68);
    if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 1)
      {
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) == 3) {
          goto LABEL_96;
        }
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 4) {
          goto LABEL_154;
        }
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 1852403012) {
          goto LABEL_120;
        }
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 2019650884) {
          goto LABEL_139;
        }
LABEL_140:
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 1852403028)
        {
LABEL_141:
          int v25 = 0;
          int v26 = 1;
LABEL_144:
          uint64_t v27 = 2;
          goto LABEL_166;
        }
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 2019650900)
        {
LABEL_143:
          int v26 = 0;
          int v25 = 1;
          goto LABEL_144;
        }
        goto LABEL_163;
      }
      int v39 = v69.__r_.__value_.__s.__data_[0];
      if (v69.__r_.__value_.__s.__data_[0] == 68) {
        goto LABEL_135;
      }
      if (v69.__r_.__value_.__s.__data_[0] == 84)
      {
LABEL_134:
        int v26 = 0;
        int v25 = 0;
        int v40 = 1;
        uint64_t v27 = 2;
        goto LABEL_167;
      }
LABEL_146:
      if (v39 == 83)
      {
LABEL_147:
        int v26 = 0;
        int v25 = 0;
        int v40 = 1;
        uint64_t v27 = 4;
        goto LABEL_167;
      }
      goto LABEL_154;
    }
    std::string::size_type v34 = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_ == 1 && *v69.__r_.__value_.__l.__data_ == 68)
    {
LABEL_135:
      uint64_t v27 = 0;
      int v26 = 0;
      int v25 = 0;
      goto LABEL_166;
    }
    if (v69.__r_.__value_.__l.__size_ == 4)
    {
      if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 1852403012) {
        goto LABEL_120;
      }
      std::string::size_type v34 = v69.__r_.__value_.__l.__size_;
      if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 2019650884)
      {
LABEL_139:
        uint64_t v27 = 0;
        int v26 = 0;
        int v25 = 1;
        goto LABEL_166;
      }
      if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) == 1) {
          goto LABEL_118;
        }
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 4)
        {
          if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 3) {
            goto LABEL_154;
          }
LABEL_96:
          if (LOWORD(v69.__r_.__value_.__l.__data_) == 26989 && v69.__r_.__value_.__s.__data_[2] == 110) {
            goto LABEL_120;
          }
          if (LOWORD(v69.__r_.__value_.__l.__data_) == 24941 && v69.__r_.__value_.__s.__data_[2] == 120) {
            goto LABEL_139;
          }
          goto LABEL_154;
        }
        goto LABEL_140;
      }
    }
    if (v34 != 3) {
      goto LABEL_121;
    }
    if (*(_WORD *)v69.__r_.__value_.__l.__data_ == 26989 && *(unsigned char *)(v69.__r_.__value_.__r.__words[0] + 2) == 110)
    {
LABEL_120:
      uint64_t v27 = 0;
      int v25 = 0;
      int v26 = 1;
LABEL_166:
      int v40 = 1;
      goto LABEL_167;
    }
    std::string::size_type v34 = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_ == 3)
    {
      if (*(_WORD *)v69.__r_.__value_.__l.__data_ == 24941 && *(unsigned char *)(v69.__r_.__value_.__r.__words[0] + 2) == 120) {
        goto LABEL_139;
      }
      if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 1) {
          goto LABEL_154;
        }
LABEL_118:
        int v39 = v69.__r_.__value_.__s.__data_[0];
        if (v69.__r_.__value_.__s.__data_[0] == 84) {
          goto LABEL_134;
        }
        goto LABEL_146;
      }
    }
LABEL_121:
    if (v34 == 1)
    {
      if (*v69.__r_.__value_.__l.__data_ == 84) {
        goto LABEL_134;
      }
      std::string::size_type v34 = v69.__r_.__value_.__l.__size_;
    }
    if (v34 != 4) {
      goto LABEL_136;
    }
    if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 1852403028) {
      goto LABEL_141;
    }
    std::string::size_type v34 = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_136;
    }
    if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 2019650900) {
      goto LABEL_143;
    }
    if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) != 0)
    {
LABEL_136:
      if (v34 == 1)
      {
        if (*v69.__r_.__value_.__l.__data_ == 83) {
          goto LABEL_147;
        }
        std::string::size_type v34 = v69.__r_.__value_.__l.__size_;
      }
      if (v34 != 4) {
        goto LABEL_154;
      }
      if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 1852403027) {
        goto LABEL_164;
      }
      if (v69.__r_.__value_.__l.__size_ != 4) {
        goto LABEL_154;
      }
      uint64_t v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
      goto LABEL_153;
    }
    if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_154;
      }
      int v39 = v69.__r_.__value_.__s.__data_[0];
      goto LABEL_146;
    }
LABEL_163:
    if (LODWORD(v69.__r_.__value_.__l.__data_) == 1852403027)
    {
LABEL_164:
      int v25 = 0;
      int v26 = 1;
      goto LABEL_165;
    }
    uint64_t v41 = &v69;
LABEL_153:
    if (LODWORD(v41->__r_.__value_.__l.__data_) == 2019650899)
    {
      int v26 = 0;
      int v25 = 1;
LABEL_165:
      uint64_t v27 = 4;
      goto LABEL_166;
    }
LABEL_154:
    if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v69, "SS"))
    {
      int v26 = 0;
      int v25 = 0;
      int v40 = 1;
      uint64_t v27 = 6;
      goto LABEL_167;
    }
    if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v69, "SSmin"))
    {
      int v25 = 0;
      int v26 = 1;
      uint64_t v27 = 6;
      goto LABEL_166;
    }
    BOOL v42 = std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v69, "SSmax");
    int v25 = v42;
    int v26 = 0;
    if (v42) {
      uint64_t v27 = 6;
    }
    else {
      uint64_t v27 = 0;
    }
    int v40 = v42;
LABEL_167:
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v69.__r_.__value_.__l.__data_);
      if (!v40)
      {
LABEL_171:
        int v32 = 0;
        goto LABEL_71;
      }
    }
    else if (!v40)
    {
      goto LABEL_171;
    }
LABEL_55:
    std::string::basic_string(&v69, &__str, v23 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v68);
    EQKitLength::EQKitLength(&v68, &v69, 1);
    if ((v68 & 0xFFFFFFFD) != 0)
    {
      unint64_t v28 = v27 + v24;
      if (v26)
      {
        uint64_t v29 = &v74[v28];
      }
      else
      {
        if (v28 < v8 || v8 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v31 = v27 + v24;
        }
        else {
          uint64_t v31 = v8;
        }
        uint64_t v29 = &v71 + v28;
        if (v25) {
          v29 += 16;
        }
        else {
          unint64_t v8 = v31;
        }
      }
      *uint64_t v29 = v68;
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    int v32 = 1;
LABEL_71:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v7 == -1) {
      char v33 = 0;
    }
    else {
      char v33 = v32;
    }
  }
  while ((v33 & 1) != 0);
  if (v8) {
    int v43 = 0;
  }
  else {
    int v43 = v32;
  }
  if (v43 != 1) {
    return 0;
  }
  if (!v72) {
    long long v72 = v71;
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  float64x2_t v46 = v73;
  uint64_t v47 = 1;
  do
  {
    uint64_t v48 = v47;
    if (!*(_DWORD *)v46)
    {
      *float64x2_t v46 = *(&v71 + 2 * v45);
      uint64_t v48 = v45;
    }
    uint64_t v49 = v47;
    if (!*((_DWORD *)v46 + 4))
    {
      if (v47 == v48) {
        std::string v50 = v46;
      }
      else {
        std::string v50 = &v71 + 2 * v44 + 1;
      }
      if (v47 == v48) {
        uint64_t v49 = v47;
      }
      else {
        uint64_t v49 = v44;
      }
      v46[1] = *v50;
    }
    ++v47;
    v46 += 2;
    uint64_t v44 = v49;
    uint64_t v45 = v48;
  }
  while (v47 != 4);
  if (&v71 != a2)
  {
    long long v51 = v73[3];
    a2[4] = v73[2];
    a2[5] = v51;
    long long v52 = v73[5];
    a2[6] = v73[4];
    a2[7] = v52;
    long long v53 = v72;
    *a2 = v71;
    a2[1] = v53;
    long long v54 = v73[1];
    a2[2] = v73[0];
    a2[3] = v54;
    long long v55 = v74[0];
    long long v56 = v74[1];
    long long v57 = v74[3];
    a2[10] = v74[2];
    a2[11] = v57;
    a2[8] = v55;
    a2[9] = v56;
    long long v58 = v74[4];
    long long v59 = v74[5];
    long long v60 = v74[7];
    a2[14] = v74[6];
    a2[15] = v60;
    a2[12] = v58;
    a2[13] = v59;
    long long v61 = v74[8];
    long long v62 = v74[9];
    long long v63 = v74[11];
    a2[18] = v74[10];
    a2[19] = v63;
    a2[16] = v61;
    a2[17] = v62;
    long long v64 = v74[12];
    long long v65 = v74[13];
    long long v66 = v74[15];
    a2[22] = v74[14];
    a2[23] = v66;
    a2[20] = v64;
    a2[21] = v65;
  }
  return 1;
}

void sub_22354C98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

EQKit::Font::Metric::Map *EQKit::Font::Metric::Map::Map(EQKit::Font::Metric::Map *this)
{
  uint64_t v1 = this;
  uint64_t v2 = 33;
  do
  {
    this = (EQKit::Font::Metric::Map *)(EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)this) + 384);
    --v2;
  }
  while (v2);
  return v1;
}

{
  EQKit::Font::Metric::Map *v1;
  uint64_t v2;

  uint64_t v1 = this;
  uint64_t v2 = 33;
  do
  {
    this = (EQKit::Font::Metric::Map *)(EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)this) + 384);
    --v2;
  }
  while (v2);
  return v1;
}

__CFString *EQKit::Font::Metric::Map::defaultForLengthMetric(int a1)
{
  if ((a1 - 11) > 0x15) {
    return 0;
  }
  else {
    return off_2646AF8F0[a1 - 11];
  }
}

__CFString *EQKit::Font::Metric::Map::defaultForFloatMetric(int a1)
{
  uint64_t v1 = @"0";
  if (a1 != 1) {
    uint64_t v1 = 0;
  }
  if (a1) {
    return v1;
  }
  else {
    return @"0.5";
  }
}

void EQKit::Font::Metric::Map::newMapFromDictionary(EQKit::Font::Metric::Map *this, NSDictionary *a2)
{
}

void sub_22354CDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 89) < 0) {
    operator delete(*(void **)(v21 - 112));
  }
  _Unwind_Resume(exception_object);
}

void EQKit::Font::CharacterMapping::newMapFromDictionary(EQKit::Font::CharacterMapping *this, NSDictionary *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  std::string::size_type v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        std::string::size_type v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        std::string::size_type v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    std::string::size_type v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 2_Block_object_dispose(&STACK[0x560], 8) = **a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_22354D318(_Unwind_Exception *a1)
{
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, EQKitBox *a2, double a3)
{
  *(void *)this = a2;
  *((double *)this + 1) = a3;
  return this;
}

{
  *(void *)this = a2;
  *((double *)this + 1) = a3;
  return this;
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, id *a2)
{
  *(void *)this = *a2;
  *((void *)this + 1) = a2[1];
  return this;
}

{
  *(void *)this = *a2;
  *((void *)this + 1) = a2[1];
  return this;
}

void EQKit::ILayoutOffset::~ILayoutOffset(id *this)
{
}

{
}

uint64_t EQKit::ILayoutOffset::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(void *)a1 = *(id *)a2;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x560], 8) = *(void *)(a2 + 8);
  }
  return a1;
}

double EQKit::ILayoutOffset::offsetInBox(EQKit::ILayoutOffset *this, EQKitBox *a2)
{
  if (!*(void *)this) {
    return 1.79769313e308;
  }
  if (a2)
  {
    -[EQKitBox transformFromDescendant:](a2, "transformFromDescendant:");
    double v3 = 0.0 * 0.0;
  }
  else
  {
    double v3 = 0.0;
  }
  return v3 + 0.0 * *((double *)this + 1) + 0.0;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, EQKitBox *a2)
{
  double v3 = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = v3;
  *((void *)this + 1) = (char *)this + 16;
  bzero((char *)this + 32, 4uLL);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  return this;
}

{
  EQKitBox *v3;

  double v3 = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = v3;
  *((void *)this + 1) = (char *)this + 16;
  bzero((char *)this + 32, 4uLL);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  return this;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  *(void *)this = *(id *)a2;
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  return this;
}

{
  *(void *)this = *(id *)a2;
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x560], 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  return this;
}

void EQKit::ILayout::~ILayout(EQKit::ILayout *this)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 8, *((id **)this + 2));
}

void sub_22354D6CC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v1 + 8, *(id **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t EQKit::ILayout::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(void *)a1 = *(id *)a2;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(a1 + 8), *(void **)(a2 + 8), (void *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

EQKitBox *EQKit::ILayout::setBox(EQKitBox *this, EQKitBox *a2)
{
  if ((EQKitBox *)this->super.isa != a2)
  {
    double v3 = this;

    this = a2;
    v3->super.Class isa = (Class)this;
  }
  return this;
}

uint64_t EQKit::ILayout::setIsOverAccentTokenWithBaseToken(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFEFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setIsUserSpace(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = 512;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFDFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setVerticalContentClassification(uint64_t result, char a2)
{
  *(_WORD *)(result + 32) = *(_WORD *)(result + 32) & 0xE3FF | ((a2 & 7) << 10);
  return result;
}

BOOL EQKit::ILayout::getOffsetOfKind(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v3 = a1 + 16;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      unsigned int v10 = (uint64_t *)v4;
    }
    else {
      unsigned int v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3 || *(_DWORD *)(v7 + 32) > a2) {
    return 0;
  }
  EQKit::ILayoutOffset::operator=((uint64_t)a3, v7 + 40);
  return *a3 != 0;
}

void EQKit::ILayout::setOffsetOfKind(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  int v5 = a2;
  id v6 = *(id *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(v4, &v5, (uint64_t)&v5);
}

void sub_22354D8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t *EQKit::ILayout::removeOffsetOfKind(uint64_t *result, int a2)
{
  __int16 v2 = result + 2;
  uint64_t v3 = result[2];
  if (v3)
  {
    ++result;
    uint64_t v4 = (uint64_t)v2;
    do
    {
      int v5 = *(_DWORD *)(v3 + 32);
      BOOL v6 = v5 < a2;
      if (v5 >= a2) {
        uint64_t v7 = (uint64_t *)v3;
      }
      else {
        uint64_t v7 = (uint64_t *)(v3 + 8);
      }
      if (!v6) {
        uint64_t v4 = v3;
      }
      uint64_t v3 = *v7;
    }
    while (*v7);
    if ((uint64_t *)v4 != v2 && *(_DWORD *)(v4 + 32) <= a2) {
      return std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase((uint64_t **)result, v4);
    }
  }
  return result;
}

void EQKit::ILayout::takeMissingOffsetsFromLayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  __int16 v2 = (char *)*((void *)a2 + 1);
  uint64_t v3 = (char *)a2 + 16;
  if (v2 != (char *)a2 + 16)
  {
    uint64_t v4 = (char *)this + 8;
    int v5 = (void *)((char *)this + 16);
    do
    {
      uint64_t v6 = *v5;
      int v7 = *((_DWORD *)v2 + 8);
      if (!*v5) {
        goto LABEL_13;
      }
      int v8 = v5;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < v7;
        if (v9 >= v7) {
          std::string::size_type v11 = (uint64_t *)v6;
        }
        else {
          std::string::size_type v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          int v8 = (void *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 8))
      {
LABEL_13:
        int v15 = *((_DWORD *)v2 + 8);
        id v16 = *((id *)v2 + 5);
        uint64_t v17 = *((void *)v2 + 6);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)v4, &v15, (uint64_t)&v15);
      }
      std::string::size_type v12 = (char *)*((void *)v2 + 1);
      if (v12)
      {
        do
        {
          double v13 = v12;
          std::string::size_type v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          double v13 = (char *)*((void *)v2 + 2);
          BOOL v14 = *(void *)v13 == (void)v2;
          __int16 v2 = v13;
        }
        while (!v14);
      }
      __int16 v2 = v13;
    }
    while (v13 != v3);
  }
}

void sub_22354DA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

EQKit::Environment::Version *EQKit::Environment::Version::Version(EQKit::Environment::Version *this, NSNumber *a2)
{
  if (a2) {
    NSUInteger v3 = [(NSNumber *)a2 unsignedIntegerValue];
  }
  else {
    NSUInteger v3 = 0;
  }
  *(void *)this = v3;
  return this;
}

{
  NSUInteger v3;

  if (a2) {
    NSUInteger v3 = [(NSNumber *)a2 unsignedIntegerValue];
  }
  else {
    NSUInteger v3 = 0;
  }
  *(void *)this = v3;
  return this;
}

uint64_t EQKit::Environment::Version::versionNumber(EQKit::Environment::Version *this)
{
  return [NSNumber numberWithUnsignedInteger:*(void *)this];
}

void EQKit::Font::CharacterArray::newArrayFromArray(EQKit::Font::CharacterArray *this, NSArray *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

void EQKit::Kerning::Manager::~Manager(EQKit::Kerning::Manager *this)
{
  uint64_t v1 = *(void *)this;
  if (v1)
  {
    uint64_t v2 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(v1);
    MEMORY[0x223CB8F20](v2, 0x10E0C40B27302BALL);
  }
}

void EQKit::Kerning::Manager::Manager(EQKit::Kerning::Manager *this, const EQKit::Environment::Version *a2, NSDictionary *a3)
{
  *((void *)this + 1) = 0;
  *((unsigned char *)this + ++*(void *)(this + 16) = *(void *)a2 > 1uLL;
  uint64_t v4 = (EQKit::Kerning::Manager *)((char *)this + 24);
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = (NSDictionary *)EQKitUtilDynamicCast(v5, (uint64_t)[(NSDictionary *)a3 objectForKey:@"quantization"]);
  EQKitPath::QuantizationConfig::QuantizationConfig(v4, v6);
  operator new();
}

void sub_22354DED8(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

void ___ZN5EQKit7Kerning7ManagerC2ERKNS_11Environment7VersionEP12NSDictionary_block_invoke()
{
}

void sub_22354DF94(_Unwind_Exception *a1)
{
  MEMORY[0x223CB8F20](v1, 0x1080C4076FF3075);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Kerning::Manager::beginLayout(uint64_t this)
{
  return this;
}

uint64_t EQKit::Kerning::Manager::endLayout(uint64_t ***this)
{
  return EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(*this);
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(uint64_t **a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v3 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v5 = **a1;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      uint64_t v6 = a1[3];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6[8];
          EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v18, (const EQKit::OpticalKern::Glyph::Key *)(v6 + 2));
          uint64_t v19 = v5 - v7;
          int v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            int v9 = (EQKit::OpticalKern::Glyph::Key *)std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>((uint64_t)&v20, (const EQKit::OpticalKern::Glyph::Key *)v18);
          }
          else
          {
            EQKit::OpticalKern::Glyph::Key::Key(v21, (const EQKit::OpticalKern::Glyph::Key *)v18);
            *((void *)v8 + 4) = v19;
            int v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)v8 + 40);
          }
          uint64_t v21 = v9;
          EQKit::OpticalKern::Glyph::Key::~Key((const void **)v18);
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
        BOOL v10 = v20;
        std::string::size_type v11 = v21;
      }
      else
      {
        std::string::size_type v11 = 0;
        BOOL v10 = 0;
      }
      unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      uint64_t v23 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))&v23, v13, 1);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      int v15 = a1[8];
      unint64_t v16 = v14 - (void)v15;
      if (v14 > (unint64_t)v15)
      {
        uint64_t v17 = 40 * (void)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((unsigned char *)a1 + 4++*(void *)(this + 8) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_22354E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

double EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(void *a1, int a2, void *a3, int a4, void *a5, double a6, double a7, double a8, double a9, double a10)
{
  double v58 = 0.0;
  double v10 = 0.0;
  if (*((unsigned char *)a1 + 16))
  {
    [a3 erasableBounds];
    CGFloat v20 = v19;
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    [a5 erasableBounds];
    CGFloat y = v61.origin.y;
    CGFloat x = v61.origin.x;
    CGFloat height = v61.size.height;
    CGFloat width = v61.size.width;
    CGFloat MinX = CGRectGetMinX(v61);
    double v28 = a8;
    double v29 = a10;
    double v42 = v28;
    double v30 = v28 + MinX;
    v62.origin.CGFloat x = v20;
    v62.origin.CGFloat y = v22;
    v62.size.CGFloat width = v24;
    v62.size.CGFloat height = v26;
    if (v30 - (a6 + CGRectGetMaxX(v62)) < v29)
    {
      double v31 = v29;
      memset(v56, 0, sizeof(v56));
      int v57 = 2;
      memset(v54, 0, sizeof(v54));
      int v55 = 0;
      if (a2 == 2)
      {
        v63.origin.CGFloat x = v20;
        v63.origin.CGFloat y = v22;
        v63.size.CGFloat width = v24;
        v63.size.CGFloat height = v26;
        double MaxX = CGRectGetMaxX(v63);
        double v33 = a9;
        v64.origin.CGFloat x = v20;
        v64.origin.CGFloat y = v22;
        v64.size.CGFloat width = v24;
        v64.size.CGFloat height = v26;
        double MinY = CGRectGetMinY(v64);
        v65.origin.CGFloat x = v20;
        v65.origin.CGFloat y = v22;
        v65.size.CGFloat width = v24;
        v65.size.CGFloat height = v26;
        double v35 = CGRectGetHeight(v65);
        v59.CGFloat y = a7 + MinY;
        v59.CGFloat x = a6 + MaxX;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v56, v59, v35);
        int v32 = 1;
      }
      else
      {
        int v32 = 0;
        double v33 = a9;
        if (!a2) {
          int v32 = objc_msgSend(a3, "appendOpticalAlignToSpec:offset:", v56, a6, a7);
        }
      }
      if (a4 == 2)
      {
        v66.origin.CGFloat y = y;
        v66.origin.CGFloat x = x;
        v66.size.CGFloat height = height;
        v66.size.CGFloat width = width;
        double v37 = CGRectGetMinX(v66);
        v67.origin.CGFloat y = y;
        v67.origin.CGFloat x = x;
        v67.size.CGFloat height = height;
        v67.size.CGFloat width = width;
        double v38 = CGRectGetMinY(v67);
        v68.origin.CGFloat y = y;
        v68.origin.CGFloat x = x;
        v68.size.CGFloat height = height;
        v68.size.CGFloat width = width;
        double v39 = CGRectGetHeight(v68);
        v60.CGFloat y = v33 + v38;
        v60.CGFloat x = v42 + v37;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v54, v60, v39);
        int v36 = 1;
      }
      else
      {
        if (a4)
        {
LABEL_13:
          long long v52 = v54;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100]((void ***)&v52);
          v54[0] = (void **)v56;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100](v54);
          return v58;
        }
        int v36 = objc_msgSend(a5, "appendOpticalAlignToSpec:offset:", v54, v42, v33);
      }
      if ((v32 & v36) == 1)
      {
        EQKit::OpticalKern::Edge::Composite::Composite(&v52, v56, a1 + 3, *a1);
        EQKit::OpticalKern::Edge::Composite::Composite(&v50, v54, a1 + 3, *a1);
        v49[0] = *MEMORY[0x263F00148];
        v49[1] = v49[0];
        EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold((int *)&v52, (uint64_t)&v50, &v58, (double *)v49, 0, v31);
        *(void *)&v49[0] = &v51;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100]((void ***)v49);
        std::string v50 = (void **)&v53;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&v50);
      }
      goto LABEL_13;
    }
  }
  return v10;
}

void sub_22354E484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,void ***a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  a17 = (void **)(v30 + 8);
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&a17);
  a22 = (void **)&a27;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&a22);
  a26 = &a30;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100]((void ***)&a26);
  a30 = (void **)(v31 - 168);
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100](&a30);
  _Unwind_Resume(a1);
}

void std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(v4 - 72));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(uint64_t a1)
{
  return a1;
}

void sub_22354E5A8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>((EQKit::OpticalKern::Glyph::Key *)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>(EQKit::OpticalKern::Glyph::Key *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  EQKit::OpticalKern::Glyph::Key::~Key((const void **)this);
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::Path,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22354E6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CB8F20);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
}

void std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 32);
    if (v2)
    {
      *(void *)(a2 + 40) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x223CB8F20);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + ++*(void *)(this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 4++*(void *)(this + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_223837D10;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(void *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_22354E824(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2)
{
  uint64_t v2 = *(EQKit::OpticalKern::Glyph::Key **)a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    std::string::size_type v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(v7, v10);
  }
  else {
    std::string::size_type v11 = 0;
  }
  unint64_t v14 = v11;
  int v15 = (EQKit::OpticalKern::Glyph::Key *)&v11[40 * v3];
  unint64_t v16 = v15;
  uint64_t v17 = &v11[40 * v10];
  EQKit::OpticalKern::Glyph::Key::Key(v15, a2);
  *((void *)v15 + 4) = *((void *)a2 + 4);
  unint64_t v16 = (EQKit::OpticalKern::Glyph::Key *)((char *)v16 + 40);
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer((EQKit::OpticalKern::Glyph::Key **)a1, &v14);
  uint64_t v12 = *(void *)(a1 + 8);
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_22354E948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Glyph::Key *std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer(EQKit::OpticalKern::Glyph::Key **a1, void *a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (EQKit::OpticalKern::Glyph::Key *)a2[1];
  if (v5 == *a1)
  {
    uint64_t result = (EQKit::OpticalKern::Glyph::Key *)a2[1];
  }
  else
  {
    do
    {
      uint64_t result = EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)((char *)v6 - 40), (EQKit::OpticalKern::Glyph::Key *)((char *)v5 - 40));
      *((void *)v6 - 1) = *((void *)v5 - 1);
      uint64_t v5 = (EQKit::OpticalKern::Glyph::Key *)((char *)v5 - 40);
      uint64_t v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  uint64_t v8 = *a1;
  *a1 = result;
  a2[1] = v8;
  unint64_t v9 = a1[1];
  a1[1] = (EQKit::OpticalKern::Glyph::Key *)a2[2];
  a2[2] = v9;
  unint64_t v10 = a1[2];
  a1[2] = (EQKit::OpticalKern::Glyph::Key *)a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + ++*(void *)(this + 16) = i - 40;
    EQKit::OpticalKern::Glyph::Key::~Key((const void **)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  if ((const EQKit::OpticalKern::Glyph::Key *)a1 != a2)
  {
    char v5 = (const EQKit::OpticalKern::Glyph::Key *)(a1 + 40);
    if ((const EQKit::OpticalKern::Glyph::Key *)(a1 + 40) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (const EQKit::OpticalKern::Glyph::Key *)a1;
      do
      {
        unint64_t v9 = v5;
        if ((*a3)((const void **)v5, (uint64_t)v8))
        {
          EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v13, v9);
          uint64_t v14 = *((void *)v8 + 9);
          uint64_t v10 = v7;
          while (1)
          {
            EQKit::OpticalKern::Glyph::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(void *)(a1 + v10 + 72) = *(void *)(a1 + v10 + 32);
            if (!v10) {
              break;
            }
            char v11 = (*a3)(v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          EQKit::OpticalKern::Glyph::Key::operator=(v12, (uint64_t)v13);
          *(void *)(v12 + 32) = v14;
          EQKit::OpticalKern::Glyph::Key::~Key(v13);
        }
        char v5 = (const EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40);
        v7 += 40;
        uint64_t v8 = v9;
      }
      while ((const EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40) != a2);
    }
  }
}

void sub_22354EF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  if ((const EQKit::OpticalKern::Glyph::Key *)a1 != a2)
  {
    uint64_t v4 = a1;
    char v5 = (const EQKit::OpticalKern::Glyph::Key *)(a1 + 40);
    if ((const EQKit::OpticalKern::Glyph::Key *)(a1 + 40) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if ((*a3)((const void **)v5, v4))
        {
          EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v8, v7);
          uint64_t v9 = *(void *)(v4 + 72);
          do
          {
            EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, v4);
            *(void *)(v4 + 72) = *(void *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)(v8, v4) & 1) != 0);
          EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, (uint64_t)v8);
          *(void *)(v4 + 72) = v9;
          EQKit::OpticalKern::Glyph::Key::~Key(v8);
        }
        char v5 = (const EQKit::OpticalKern::Glyph::Key *)((char *)v7 + 40);
        uint64_t v4 = (uint64_t)v7;
      }
      while ((const EQKit::OpticalKern::Glyph::Key *)((char *)v7 + 40) != a2);
    }
  }
}

void sub_22354F058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, uint64_t a3, uint64_t (**a4)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)((EQKit::OpticalKern::Glyph::Key *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a2, a3);
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v10 = a1;
    uint64_t v11 = (uint64_t)a2;
    goto LABEL_9;
  }
  if (!result)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
    if (!(*a4)((EQKit::OpticalKern::Glyph::Key *)a3, a2)) {
      return 1;
    }
    uint64_t v10 = a2;
    uint64_t v11 = a3;
LABEL_9:
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, a3);
  return 1;
}

EQKit::OpticalKern::Glyph::Key *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(EQKit::OpticalKern::Glyph::Key *a1, unint64_t a2, uint64_t (**a3)(const void **, EQKit::OpticalKern::Glyph::Key *))
{
  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v10, a1);
  uint64_t v11 = *((void *)a1 + 4);
  if ((*a3)(v10, (EQKit::OpticalKern::Glyph::Key *)(a2 - 40)))
  {
    char v6 = a1;
    do
      char v6 = (EQKit::OpticalKern::Glyph::Key *)((char *)v6 + 40);
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (EQKit::OpticalKern::Glyph::Key *)((char *)a1 + 40);
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = (*a3)(v10, v7);
      uint64_t v7 = (EQKit::OpticalKern::Glyph::Key *)((char *)v6 + 40);
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::OpticalKern::Glyph::Key *)a2) & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v6, a2);
    do
      char v6 = (EQKit::OpticalKern::Glyph::Key *)((char *)v6 + 40);
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::OpticalKern::Glyph::Key *)a2) & 1) != 0);
  }
  if ((EQKit::OpticalKern::Glyph::Key *)((char *)v6 - 40) != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)a1, (uint64_t)v6 - 40);
    *((void *)a1 + 4) = *((void *)v6 - 1);
  }
  EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v6 - 40, (uint64_t)v10);
  *((void *)v6 - 1) = v11;
  EQKit::OpticalKern::Glyph::Key::~Key(v10);
  return v6;
}

void sub_22354F2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(EQKit::OpticalKern::Glyph::Key *a1, unint64_t a2, uint64_t (**a3)(char *, const void **))
{
  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v12, a1);
  uint64_t v6 = 0;
  uint64_t v13 = *((void *)a1 + 4);
  do
  {
    char v7 = (*a3)((char *)a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  int v8 = (char *)a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if ((unint64_t)v8 >= a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)((char *)a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)((char *)a2, v12));
  }
  uint64_t v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)a1 + v6);
  if ((unint64_t)v8 < a2)
  {
    unint64_t v10 = a2;
    do
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v9, v10);
      do
        uint64_t v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40);
      while (((*a3)((char *)v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)((char *)v10, v12));
    }
    while ((unint64_t)v9 < v10);
  }
  if ((EQKit::OpticalKern::Glyph::Key *)((char *)v9 - 40) != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)a1, (uint64_t)v9 - 40);
    *((void *)a1 + 4) = *((void *)v9 - 1);
  }
  EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v9 - 40, (uint64_t)v12);
  *((void *)v9 - 1) = v13;
  EQKit::OpticalKern::Glyph::Key::~Key(v12);
  return (uint64_t)v9 - 40;
}

void sub_22354F42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  BOOL v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((EQKit::OpticalKern::Glyph::Key *)((char *)a2 - 40), (EQKit::OpticalKern::Glyph::Key *)a1))std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100]((EQKit::OpticalKern::Glyph::Key *)a1, (uint64_t)a2 - 40); {
      return v6;
      }
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), (uint64_t)a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), (EQKit::OpticalKern::Glyph::Key *)(a1 + 80), (uint64_t)a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), (EQKit::OpticalKern::Glyph::Key *)(a1 + 80), (EQKit::OpticalKern::Glyph::Key *)(a1 + 120), (uint64_t)a2 - 40, a3);
      return v6;
    default:
      char v7 = (EQKit::OpticalKern::Glyph::Key *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), a1 + 80, a3);
      int v8 = (EQKit::OpticalKern::Glyph::Key *)(a1 + 120);
      if ((EQKit::OpticalKern::Glyph::Key *)(a1 + 120) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    char v7 = v8;
    v9 += 40;
    int v8 = (EQKit::OpticalKern::Glyph::Key *)((char *)v8 + 40);
    if (v8 == a2) {
      return 1;
    }
  }
  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v15, v8);
  uint64_t v16 = *((void *)v8 + 4);
  uint64_t v11 = v9;
  while (1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(void *)(a1 + v11 + 152) = *(void *)(a1 + v11 + 112);
    if (v11 == -80) {
      break;
    }
    char v12 = (*a3)((EQKit::OpticalKern::Glyph::Key *)v15, (EQKit::OpticalKern::Glyph::Key *)(a1 + v11 + 40));
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  uint64_t v13 = a1;
LABEL_12:
  EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
  *(void *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::OpticalKern::Glyph::Key::~Key(v15);
    goto LABEL_14;
  }
  BOOL v6 = (EQKit::OpticalKern::Glyph::Key *)((char *)v8 + 40) == a2;
  EQKit::OpticalKern::Glyph::Key::~Key(v15);
  return v6;
}

void sub_22354F660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](EQKit::OpticalKern::Glyph::Key *a1, uint64_t a2)
{
  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v5, a1);
  EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)a1, a2);
  EQKit::OpticalKern::Glyph::Key::operator=(a2, (uint64_t)v5);
  EQKit::OpticalKern::Glyph::Key::~Key(v5);
  uint64_t v4 = *((void *)a1 + 4);
  *((void *)a1 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
}

void sub_22354F6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, EQKit::OpticalKern::Glyph::Key *a3, uint64_t a4, uint64_t (**a5)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((EQKit::OpticalKern::Glyph::Key *)a4, a3))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
      {
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, EQKit::OpticalKern::Glyph::Key *a3, EQKit::OpticalKern::Glyph::Key *a4, uint64_t a5, uint64_t (**a6)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((EQKit::OpticalKern::Glyph::Key *)a5, a4))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
        {
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
        }
      }
    }
  }
}

EQKit::OpticalKern::Glyph::Key *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, EQKit::OpticalKern::Glyph::Key *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = (EQKit::OpticalKern::Glyph::Key *)((char *)a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, a4, v9, v12);
        char v12 = (const EQKit::OpticalKern::Glyph::Key *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((EQKit::OpticalKern::Glyph::Key *)v6 != a3)
    {
      uint64_t v14 = (EQKit::OpticalKern::Glyph::Key *)v6;
      do
      {
        if ((*a4)((uint64_t)v14, (uint64_t)a1))
        {
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v14, (uint64_t)a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, a4, v9, a1);
        }
        uint64_t v14 = (EQKit::OpticalKern::Glyph::Key *)((char *)v14 + 40);
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 41)
    {
      unint64_t v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return (EQKit::OpticalKern::Glyph::Key *)v13;
  }
  return a3;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, const EQKit::OpticalKern::Glyph::Key *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v11 = a1 + 40 * v10;
      int64_t v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        int64_t v10 = v12;
      }
      if (((*a2)(v11, (uint64_t)v5) & 1) == 0)
      {
        EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v15, v5);
        uint64_t v16 = *((void *)v5 + 4);
        do
        {
          uint64_t v13 = v11;
          EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v5, v11);
          *((void *)v5 + 4) = *(void *)(v11 + 32);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          uint64_t v11 = a1 + 40 * v14;
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            int64_t v10 = v14;
          }
          char v5 = (const EQKit::OpticalKern::Glyph::Key *)v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
        *(void *)(v13 + 32) = v16;
        EQKit::OpticalKern::Glyph::Key::~Key(v15);
      }
    }
  }
}

void sub_22354FB7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v10, a1);
    uint64_t v11 = *((void *)a1 + 4);
    uint64_t v8 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, (uint64_t)v10);
      *(void *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, a2 - 40);
      *(void *)(v9 + 32) = *(void *)(a2 - 8);
      EQKit::OpticalKern::Glyph::Key::operator=(a2 - 40, (uint64_t)v10);
      *(void *)(a2 - ++*(void *)(this + 8) = v11;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, v9 + 40, (uint64_t (**)(uint64_t, const void **))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - (uint64_t)a1) >> 3));
    }
    EQKit::OpticalKern::Glyph::Key::~Key(v10);
  }
}

void sub_22354FC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      uint64_t v10 = v11;
    }
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v9);
    *(void *)(a1 + 32) = *(void *)(v9 + 32);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, const void **), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = a1 + 40 * (v4 >> 1);
    uint64_t v10 = (const EQKit::OpticalKern::Glyph::Key *)(a2 - 40);
    if ((*a3)(v9, (const void **)(a2 - 40)))
    {
      EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v12, v10);
      uint64_t v13 = *(void *)(a2 - 8);
      do
      {
        uint64_t v11 = v9;
        EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v10, v9);
        *((void *)v10 + 4) = *(void *)(v9 + 32);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = a1 + 40 * v8;
        uint64_t v10 = (const EQKit::OpticalKern::Glyph::Key *)v11;
      }
      while (((*a3)(v9, v12) & 1) != 0);
      EQKit::OpticalKern::Glyph::Key::operator=(v11, (uint64_t)v12);
      *(void *)(v11 + 32) = v13;
      EQKit::OpticalKern::Glyph::Key::~Key(v12);
    }
  }
}

void sub_22354FE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(void *a1, uint64_t a2)
{
  CFHashCode v4 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v4 = CFHash((CFTypeRef)v4);
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
    if (v6 >= *(void *)&v5) {
      CFHashCode v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = v6 & (*(void *)&v5 - 1);
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100](v4, 0);
    return 1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>((EQKit::OpticalKern::Glyph::Key *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
}

void std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    CFHashCode v4 = (const void **)v1[1];
    int8x8_t v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Glyph::Key::~Key(v4 - 5);
      while (v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

EQKit::OpticalKern::Glyph::Key *EQKit::OpticalKern::Glyph::Key::Key(EQKit::OpticalKern::Glyph::Key *this, CTFontRef font, __int16 a3, double a4, CGRectEdge a5)
{
  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (font) {
    CFStringRef v6 = CTFontCopyPostScriptName(font);
  }
  else {
    CFStringRef v6 = 0;
  }
  *(void *)this = v6;
  return this;
}

{
  CFStringRef v6;

  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (font) {
    CFStringRef v6 = CTFontCopyPostScriptName(font);
  }
  else {
    CFStringRef v6 = 0;
  }
  *(void *)this = v6;
  return this;
}

EQKit::OpticalKern::Glyph::Key *EQKit::OpticalKern::Glyph::Key::Key(EQKit::OpticalKern::Glyph::Key *this, CFTypeRef cf, __int16 a3, double a4, CGRectEdge a5)
{
  *(void *)this = cf;
  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (cf) {
    CFRetain(cf);
  }
  return this;
}

{
  *(void *)this = cf;
  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (cf) {
    CFRetain(cf);
  }
  return this;
}

EQKit::OpticalKern::Glyph::Key *EQKit::OpticalKern::Glyph::Key::Key(EQKit::OpticalKern::Glyph::Key *this, const EQKit::OpticalKern::Glyph::Key *a2)
{
  CFHashCode v4 = *(const void **)a2;
  *(void *)this = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return this;
}

{
  const void *v4;

  CFHashCode v4 = *(const void **)a2;
  *(void *)this = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return this;
}

void EQKit::OpticalKern::Glyph::Key::~Key(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v1;

  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t EQKit::OpticalKern::Glyph::Key::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CFHashCode v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
    int8x8_t v5 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v5) {
      CFRetain(v5);
    }
    *(_WORD *)(a1 + ++*(void *)(this + 8) = *(_WORD *)(a2 + 8);
    *(void *)(a1 + ++*(void *)(this + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  }
  return a1;
}

BOOL EQKit::OpticalKern::Glyph::Key::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
  {
    return 0;
  }
  CFStringRef v2 = *(const __CFString **)a1;
  CFStringRef v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3) {
    return 1;
  }
  BOOL result = 0;
  if (v2)
  {
    if (v3) {
      return CFEqual(v2, v3);
    }
  }
  return result;
}

EQKit::OpticalKern::Edge::Path *EQKit::OpticalKern::Edge::Path::Path(EQKit::OpticalKern::Edge::Path *this, const EQKit::OpticalKern::Glyph::Key *a2, const EQKitPath::QuantizationConfig *a3, const Config *a4)
{
  *(_DWORD *)this = *((_DWORD *)a2 + 6);
  *((void *)this + 1) = 4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  uint8x8_t v7 = CTFontDescriptorCreateWithNameAndSize(*(CFStringRef *)a2, *((CGFloat *)a2 + 2));
  unint64_t v8 = CTFontCreateWithFontDescriptor(v7, *((CGFloat *)a2 + 2), 0);
  CFRelease(v7);
  memset(&matrix, 0, sizeof(matrix));
  CGAffineTransformMakeScale(&matrix, 1.0, -1.0);
  if (v8) {
    CFHashCode v9 = CTFontCreatePathForGlyph(v8, *((_WORD *)a2 + 4), &matrix);
  }
  else {
    CFHashCode v9 = 0;
  }
  v11[0] = 0;
  v11[1] = 0;
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)this, v9, (long long *)a3, v11);
  CGPathRelease(v9);
  if (v8) {
    CFRelease(v8);
  }
  return this;
}

void sub_223550484(_Unwind_Exception *exception_object)
{
  CFHashCode v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::OpticalKern::Edge::Path::analyze(unsigned int *a1, const CGPath *a2, long long *a3, unint64_t ***a4)
{
  *((void *)a1 + 2) = 0;
  int8x8_t v5 = (uint64_t *)(a1 + 4);
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 7) = 0x7FF8000000000000;
  if (a2)
  {
    int v8 = *a1;
    EQKitPath::EQKitPath((EQKitPath *)v40, a2);
    if (v43[32]) {
      CFHashCode v9 = (CGFloat *)v43;
    }
    else {
      CFHashCode v9 = EQKitPath::computePathBounds(v40);
    }
    CGFloat v11 = *v9;
    CGFloat v10 = v9[1];
    CGFloat v13 = v9[2];
    CGFloat v12 = v9[3];
    uint64_t v14 = *(void *)v9;
    CGFloat v15 = v10;
    CGFloat v16 = v13;
    CGFloat v17 = v12;
    if ((v8 | 2) == 2)
    {
      float v18 = CGRectGetMinY(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((void *)a1 + 2) = vcvtms_s32_f32(v18);
      v44.origin.CGFloat x = v11;
      v44.origin.CGFloat y = v10;
      v44.size.CGFloat width = v13;
      v44.size.CGFloat height = v12;
      float v19 = CGRectGetMaxY(v44) * (double)*((unint64_t *)a1 + 1);
      float v20 = ceilf(v19);
    }
    else
    {
      float v21 = CGRectGetMinX(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((void *)a1 + 2) = vcvtms_s32_f32(v21);
      v45.origin.CGFloat x = v11;
      v45.origin.CGFloat y = v10;
      v45.size.CGFloat width = v13;
      v45.size.CGFloat height = v12;
      float v22 = CGRectGetMaxX(v45) * (double)*((unint64_t *)a1 + 1);
      float v20 = floorf(v22);
    }
    *((void *)a1 + 3) = (uint64_t)v20;
    unint64_t v23 = (uint64_t)v20 - *((void *)a1 + 2) + 1;
    uint64_t v37 = 0x7FF8000000000000;
    std::vector<double>::resize((uint64_t)(a1 + 8), v23, &v37);
    uint64_t v37 = *v5;
    long long v24 = a3[1];
    long long v38 = *a3;
    long long v39 = v24;
    double v25 = *a4;
    if (*a4)
    {
      for (uint64_t i = *v25; i != v25[1]; ++i)
      {
        EQKitPath::quantizeElementEdge((EQKitPath *)v40, *i, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        double v25 = *a4;
      }
    }
    else
    {
      EQKitPath::extractPath((EQKitPath *)v40);
      if (v42 != v41)
      {
        unint64_t v27 = 0;
        if ((unint64_t)((v42 - v41) >> 4) <= 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = (v42 - v41) >> 4;
        }
        do
          EQKitPath::quantizeElementEdge((EQKitPath *)v40, v27++, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        while (v28 != v27);
      }
    }
    double v29 = (double *)*((void *)a1 + 4);
    uint64_t v30 = *((void *)a1 + 5) - (void)v29;
    if (v30)
    {
      unint64_t v31 = v30 >> 3;
      unsigned int v32 = *a1 & 0xFFFFFFFE;
      if (v31 <= 1) {
        unint64_t v31 = 1;
      }
      char v33 = 1;
      do
      {
        double v34 = *v29;
        if ((v33 & 1) == 0)
        {
          double v35 = *((double *)a1 + 7);
          BOOL v36 = v34 < v35;
          if (v32 == 2) {
            BOOL v36 = v35 < v34;
          }
          if (!v36) {
            double v34 = *((double *)a1 + 7);
          }
        }
        char v33 = 0;
        *((double *)a1 + 7) = v34;
        ++v29;
        --v31;
      }
      while (v31);
    }
    EQKitPath::~EQKitPath((EQKitPath *)v40);
  }
  else
  {
    v40[0] = NAN;
    std::vector<double>::resize((uint64_t)(a1 + 8), 1uLL, v40);
  }
}

void sub_223550750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::OpticalKern::Edge::Path::Path(uint64_t a1, int a2, const CGPath *a3, long long *a4, uint64_t a5)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + ++*(void *)(this + 8) = 4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4++*(void *)(this + 8) = 0;
  uint64_t v6 = *(void *)(a5 + 8);
  v8[0] = *(unint64_t ***)a5;
  v8[1] = (unint64_t **)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)a1, a3, a4, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v6);
  }
  return a1;
}

void sub_223550800(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  int8x8_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::OpticalKern::Edge::Segment::Segment(uint64_t this, CGRectEdge a2, CGPoint a3)
{
  *(void *)this = &unk_26D686570;
  *(_DWORD *)(this + ++*(void *)(this + 8) = a2;
  *(CGPoint *)(this + ++*(void *)(this + 16) = a3;
  if ((a2 & 0xFFFFFFFD) != 0) {
    double y = a3.y;
  }
  else {
    double y = a3.x;
  }
  if ((a2 & 0xFFFFFFFD) == 0) {
    a3.CGFloat x = a3.y;
  }
  *(CGFloat *)(this + 32) = a3.x;
  *(double *)(this + 40) = y;
  return this;
}

unint64_t EQKit::OpticalKern::Edge::Segment::closestBucketIndex(EQKit::OpticalKern::Edge::Segment *this, double a2)
{
  double v3 = a2 - (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 24))(this);
  float v4 = v3 / (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 56))(this);
  unint64_t v5 = vcvtms_s32_f32(v4);
  if ((v5 & 0x8000000000000000) != 0) {
    return 0;
  }
  if ((*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 48))(this) <= v5) {
    return (*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(void *)this + 48))(this) - 1;
  }
  return v5;
}

uint64_t EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(_DWORD *a1, _DWORD *a2, double *a3, _OWORD *a4, void **a5, double a6)
{
  char v6 = 0;
  if ((a1[2] & 0xFFFFFFFE) == 2 && a6 >= 0.0 && (a2[2] & 0xFFFFFFFE) != 2)
  {
    double v14 = (*(double (**)(_DWORD *))(*(void *)a2 + 40))(a2);
    if (v14 - (*(double (**)(_DWORD *))(*(void *)a1 + 40))(a1) >= a6
      || (double v15 = (*(double (**)(_DWORD *))(*(void *)a1 + 32))(a1) + a6,
          v15 <= (*(double (**)(_DWORD *))(*(void *)a2 + 24))(a2))
      || (double v16 = (*(double (**)(_DWORD *))(*(void *)a2 + 32))(a2) + a6,
          v16 <= (*(double (**)(_DWORD *))(*(void *)a1 + 24))(a1)))
    {
      char v6 = 0;
    }
    else
    {
      int v17 = a1[2];
      uint64_t v18 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48))(a1);
      uint64_t v19 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 48))(a2);
      unint64_t v20 = v19;
      unint64_t v109 = v18;
      if (!v18 || !v19)
      {
        long long v100 = (void *)[MEMORY[0x263F08690] currentHandler];
        objc_msgSend(v100, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _compareSegments(const Edge::Segment &, const Edge::Segment &, CGFloat, CGFloat &, Edge::CGPointVector &, Edge::CGPointVectors *)"), @"EQKitOpticalKern.mm", 315, @"both segments needs at least one bucket");
      }
      unint64_t v21 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 88))(a1, 0);
      unint64_t v22 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 88))(a2, 0);
      char v6 = 0;
      if (v21 < v109)
      {
        unint64_t v23 = v22;
        if (v22 < v20)
        {
          unint64_t v24 = v21;
          unint64_t v102 = a4;
          int v103 = a3;
          unsigned int v25 = v17 & 0xFFFFFFFD;
          double v26 = a6 * a6;
          unint64_t v27 = v24;
          *(void *)&long long v126 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v24);
          *((void *)&v126 + 1) = v28;
          double v127 = v29;
          char v105 = 0;
          *(void *)&long long v124 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v23);
          *((void *)&v124 + 1) = v30;
          double v125 = v31;
          uint64_t v101 = (uint64_t)(a5 + 2);
          double v32 = 1.79769313e308;
          unint64_t v33 = v27;
          unint64_t v34 = v23;
          unsigned int v108 = v17 & 0xFFFFFFFD;
          unint64_t v106 = v20;
          unint64_t v35 = v23;
          CGPoint v104 = a5;
          do
          {
            long long v122 = *MEMORY[0x263F00148];
            long long v123 = v122;
            double v36 = _determineBucketDistance((double *)&v126, (double *)&v124, v25 == 0, (double *)&v122);
            if (v36 < v26)
            {
              if (v36 < v32)
              {
                long long v37 = v123;
                _OWORD *v102 = v122;
                v102[1] = v37;
                double v32 = v36;
              }
              if (a5)
              {
                long long v38 = a5[1];
                unint64_t v39 = (unint64_t)a5[2];
                if ((unint64_t)v38 >= v39)
                {
                  uint64_t v42 = ((char *)v38 - (unsigned char *)*a5) >> 5;
                  unint64_t v43 = v42 + 1;
                  if ((unint64_t)(v42 + 1) >> 59) {
                    abort();
                  }
                  uint64_t v44 = v39 - (void)*a5;
                  if (v44 >> 4 > v43) {
                    unint64_t v43 = v44 >> 4;
                  }
                  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v45 = v43;
                  }
                  if (v45) {
                    float64x2_t v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v101, v45);
                  }
                  else {
                    float64x2_t v46 = 0;
                  }
                  uint64_t v47 = &v46[32 * v42];
                  long long v48 = v123;
                  *(_OWORD *)uint64_t v47 = v122;
                  *((_OWORD *)v47 + 1) = v48;
                  std::string v50 = (char *)*a5;
                  uint64_t v49 = (char *)a5[1];
                  uint64_t v51 = v47;
                  if (v49 != *a5)
                  {
                    do
                    {
                      long long v52 = *((_OWORD *)v49 - 1);
                      *((_OWORD *)v51 - 2) = *((_OWORD *)v49 - 2);
                      *((_OWORD *)v51 - 1) = v52;
                      v51 -= 32;
                      v49 -= 32;
                    }
                    while (v49 != v50);
                    uint64_t v49 = (char *)*a5;
                  }
                  uint64_t v41 = v47 + 32;
                  *a5 = v51;
                  a5[1] = v47 + 32;
                  a5[2] = &v46[32 * v45];
                  if (v49) {
                    operator delete(v49);
                  }
                }
                else
                {
                  long long v40 = v123;
                  *long long v38 = v122;
                  v38[1] = v40;
                  uint64_t v41 = v38 + 2;
                }
                a5[1] = v41;
                unsigned int v25 = v108;
              }
              if (*(double *)&v124 < *(double *)&v126)
              {
                double v53 = v125;
                double v54 = *((double *)&v126 + 1);
                BOOL v55 = v127 > *((double *)&v124 + 1) && v125 > *((double *)&v126 + 1);
                if (!v55)
                {
                  if (v127 >= *((double *)&v124 + 1))
                  {
                    if (v25)
                    {
                      double v56 = v125;
                      double v53 = *(double *)&v124;
                      double v57 = *((double *)&v126 + 1);
                      double v54 = *(double *)&v126;
                    }
                    else
                    {
                      double v56 = *(double *)&v124;
                      double v57 = *(double *)&v126;
                    }
                  }
                  else
                  {
                    if (v25) {
                      double v56 = *((double *)&v124 + 1);
                    }
                    else {
                      double v56 = *(double *)&v124;
                    }
                    if (v25) {
                      double v53 = *(double *)&v124;
                    }
                    else {
                      double v53 = *((double *)&v124 + 1);
                    }
                    if (v25) {
                      double v57 = v127;
                    }
                    else {
                      double v57 = *(double *)&v126;
                    }
                    if (v25) {
                      double v54 = *(double *)&v126;
                    }
                    else {
                      double v54 = v127;
                    }
                  }
                  *(double *)&long long v122 = v57;
                  *((double *)&v122 + 1) = v54;
                  *(double *)&long long v123 = v56;
                  *((double *)&v123 + 1) = v53;
                }
              }
              double v58 = (*(double *)&v123 - *(double *)&v122) * (*(double *)&v123 - *(double *)&v122);
              if (!v25) {
                double v58 = (*((double *)&v123 + 1) - *((double *)&v122 + 1))
              }
                    * (*((double *)&v123 + 1) - *((double *)&v122 + 1));
              double v59 = *(double *)&v126 + sqrt(v26 - v58) - *(double *)&v124;
              if (*v103 >= v59) {
                double v59 = *v103;
              }
              *int v103 = v59;
              char v105 = 1;
            }
            unint64_t v60 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a1 + 88))(a1, v27 + 1);
            unint64_t v110 = v35;
            unint64_t v61 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a2 + 88))(a2, v35 + 1);
            unint64_t v35 = v61;
            if (v60 >= v109 || v61 >= v20)
            {
              if (v60 < v109)
              {
                *(void *)&long long v126 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v60);
                *((void *)&v126 + 1) = v84;
                double v127 = v85;
                unint64_t v35 = v110;
              }
              else
              {
                if (v61 >= v20) {
                  break;
                }
                *(void *)&long long v124 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v61);
                *((void *)&v124 + 1) = v63;
                double v125 = v64;
                unint64_t v60 = v27;
              }
              unint64_t v65 = v109;
            }
            else
            {
              unint64_t v107 = v27;
              BOOL v55 = v33 > v27;
              unint64_t v65 = v109;
              if (!v55)
              {
                double v66 = *(double *)&v126;
                unint64_t v33 = v60;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 72))(a1, v33) > v66) {
                    break;
                  }
                  unint64_t v33 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a1 + 88))(a1, v33 + 1);
                }
                while (v33 < v109);
              }
              if (v34 <= v110)
              {
                double v67 = *(double *)&v124;
                unint64_t v34 = v35;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 72))(a2, v34) < v67) {
                    break;
                  }
                  unint64_t v34 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)a2 + 88))(a2, v34 + 1);
                }
                while (v34 < v20);
              }
              *(void *)&long long v120 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v60);
              *((void *)&v120 + 1) = v68;
              double v121 = v69;
              *(void *)&long long v118 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v35);
              *((void *)&v118 + 1) = v70;
              double v119 = v71;
              double v72 = _determineBucketDistance((double *)&v126, (double *)&v118, v25 == 0, (double *)v117);
              if (v34 >= v20)
              {
                unint64_t v81 = v34;
              }
              else
              {
                *(void *)&long long v111 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v34);
                *((void *)&v111 + 1) = v73;
                *(void *)&long long v112 = v74;
                long long v115 = *MEMORY[0x263F00148];
                long long v116 = v115;
                double v75 = _determineBucketDistance((double *)&v126, (double *)&v111, v25 == 0, (double *)&v115);
                if (v75 >= v72)
                {
                  double v76 = v72;
                  unint64_t v81 = v34;
                }
                else
                {
                  double v76 = v75;
                  if (v33 >= v109) {
                    unint64_t v77 = v107;
                  }
                  else {
                    unint64_t v77 = v33;
                  }
                  (*(void (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v77);
                  unint64_t v79 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 80))(a2, v78);
                  if (v35 <= v79) {
                    unint64_t v80 = v79;
                  }
                  else {
                    unint64_t v80 = v35;
                  }
                  unint64_t v81 = v34;
                  if (v80 < v34)
                  {
                    *(void *)&long long v111 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v80);
                    *((void *)&v111 + 1) = v82;
                    *(void *)&long long v112 = v83;
                    double v76 = _determineBucketDistance((double *)&v126, (double *)&v111, v108 == 0, (double *)&v115);
                    unint64_t v81 = v80;
                  }
                  if (v76 >= v72)
                  {
                    double v76 = v72;
                  }
                  else
                  {
                    double v119 = *(double *)&v112;
                    v117[0] = v115;
                    v117[1] = v116;
                    long long v118 = v111;
                    unint64_t v35 = v81;
                  }
                }
                double v72 = v76;
              }
              unsigned int v25 = v108;
              double v86 = _determineBucketDistance((double *)&v120, (double *)&v124, v108 == 0, (double *)&v115);
              if (v33 >= v109)
              {
                a5 = v104;
              }
              else
              {
                *(void *)&long long v113 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v33);
                *((void *)&v113 + 1) = v87;
                double v114 = v88;
                long long v111 = *MEMORY[0x263F00148];
                long long v112 = v111;
                double v89 = _determineBucketDistance((double *)&v113, (double *)&v124, v108 == 0, (double *)&v111);
                if (v89 >= v86)
                {
                  a5 = v104;
                  unsigned int v25 = v108;
                }
                else
                {
                  double v90 = v89;
                  if (v81 >= v106) {
                    unint64_t v91 = v110;
                  }
                  else {
                    unint64_t v91 = v81;
                  }
                  (*(void (**)(_DWORD *, unint64_t))(*(void *)a2 + 64))(a2, v91);
                  unint64_t v93 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a1 + 80))(a1, v92);
                  if (v60 <= v93) {
                    unint64_t v94 = v93;
                  }
                  else {
                    unint64_t v94 = v60;
                  }
                  unint64_t v95 = v33;
                  unsigned int v25 = v108;
                  if (v94 < v33)
                  {
                    *(void *)&long long v113 = (*(double (**)(_DWORD *, unint64_t))(*(void *)a1 + 64))(a1, v94);
                    *((void *)&v113 + 1) = v96;
                    double v114 = v97;
                    double v90 = _determineBucketDistance((double *)&v113, (double *)&v124, v108 == 0, (double *)&v111);
                    unint64_t v95 = v94;
                  }
                  a5 = v104;
                  if (v90 < v86)
                  {
                    long long v120 = v113;
                    double v121 = v114;
                    long long v115 = v111;
                    long long v116 = v112;
                    unint64_t v60 = v95;
                    double v86 = v90;
                  }
                }
              }
              unint64_t v20 = v106;
              if (v72 <= v86)
              {
                long long v124 = v118;
                double v125 = v119;
                unint64_t v60 = v107;
              }
              else
              {
                long long v126 = v120;
                double v127 = v121;
                unint64_t v35 = v110;
              }
            }
            BOOL v98 = v60 >= v65 || v35 >= v20;
            unint64_t v27 = v60;
          }
          while (!v98);
          char v6 = v105;
        }
      }
    }
  }
  return v6 & 1;
}

void EQKit::OpticalKern::Edge::PathSegment::minOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((void *)this + 6)) {
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(void *)this + 56))(this);
  }
}

void EQKit::OpticalKern::Edge::PathSegment::maxOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((void *)this + 6)) {
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(void *)this + 56))(this);
  }
}

double EQKit::OpticalKern::Edge::PathSegment::closestOffset(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *((double *)this + 5) + *(double *)(v1 + 56) * *((double *)this + 8);
  }
  else {
    return 0.0;
  }
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::bucketCount(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *(void *)(v1 + 24) - *(void *)(v1 + 16) + 1;
  }
  else {
    return 1;
  }
}

double EQKit::OpticalKern::Edge::PathSegment::bucketLength(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *((double *)this + 8) * (1.0 / (double)*(unint64_t *)(v1 + 8));
  }
  else {
    return 1.0;
  }
}

double EQKit::OpticalKern::Edge::PathSegment::bucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    return *((double *)this + 5) + *(double *)(*(void *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  }
  else {
    return 0.0;
  }
}

double EQKit::OpticalKern::Edge::PathSegment::offset(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    return *((double *)this + 5) + *(double *)(*(void *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  }
  else {
    return 0.0;
  }
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::nextValidBucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  if (!*((void *)this + 6)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return a2;
}

void EQKit::OpticalKern::Edge::PathSegment::appendToCGPath(EQKit::OpticalKern::Edge::PathSegment *this, CGPath *a2)
{
  uint64_t v2 = (int *)*((void *)this + 6);
  if (v2)
  {
    int v5 = *v2;
    unint64_t v6 = *((void *)v2 + 1);
    double v7 = *((double *)this + 8);
    memset(&v29, 0, sizeof(v29));
    CGAffineTransformMakeTranslation(&v29, *((CGFloat *)this + 2), *((CGFloat *)this + 3));
    uint64_t v8 = *((void *)v2 + 2);
    if (v8 <= *((void *)v2 + 3))
    {
      char v9 = 0;
      double v10 = v7 * (1.0 / (double)v6);
      double v11 = 0.0;
      do
      {
        uint64_t v12 = *((void *)v2 + 2);
        BOOL v13 = __OFSUB__(v8, v12);
        uint64_t v14 = v8 - v12;
        if (v14 < 0 != v13 || (uint64_t v15 = *((void *)v2 + 4), v14 >= (unint64_t)((*((void *)v2 + 5) - v15) >> 3)))
        {
          double v16 = 1.79769313e308;
          if ((*v2 & 0xFFFFFFFE) == 2) {
            double v16 = -1.79769313e308;
          }
        }
        else
        {
          double v16 = *(double *)(v15 + 8 * v14);
        }
        double v17 = v16 * *((double *)this + 8);
        if ((v9 & 1) == 0)
        {
          double v20 = (double)v8;
          if ((v5 | 2) == 2)
          {
            CGPathMoveToPoint(a2, &v29, v17, v10 * v20);
            uint64_t v21 = v8 + 1;
            double v22 = v10 * (double)(v8 + 1);
            unint64_t v23 = a2;
            double v24 = v17;
          }
          else
          {
            CGPathMoveToPoint(a2, &v29, v10 * v20, v17);
            uint64_t v21 = v8 + 1;
            double v24 = v10 * (double)(v8 + 1);
            unint64_t v23 = a2;
            double v22 = v17;
          }
          CGPathAddLineToPoint(v23, &v29, v24, v22);
          char v9 = 1;
          double v11 = v17;
          goto LABEL_22;
        }
        int v18 = v5 | 2;
        if (v17 == v11)
        {
          if (v18 != 2) {
            goto LABEL_20;
          }
        }
        else
        {
          double v19 = (double)v8;
          if (v18 != 2)
          {
            CGPathAddLineToPoint(a2, &v29, v10 * v19, v17);
LABEL_20:
            uint64_t v21 = v8 + 1;
            double v27 = v10 * (double)(v8 + 1);
            double v26 = a2;
            double v25 = v17;
            goto LABEL_21;
          }
          CGPathAddLineToPoint(a2, &v29, v17, v10 * v19);
        }
        uint64_t v21 = v8 + 1;
        double v25 = v10 * (double)(v8 + 1);
        double v26 = a2;
        double v27 = v17;
LABEL_21:
        CGPathAddLineToPoint(v26, &v29, v27, v25);
        char v9 = 1;
LABEL_22:
        uint64_t v2 = (int *)*((void *)this + 6);
        BOOL v28 = v8 < *((void *)v2 + 3);
        uint64_t v8 = v21;
      }
      while (v28);
    }
  }
}

double EQKit::OpticalKern::Edge::ParallelSegment::minOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4);
}

double EQKit::OpticalKern::Edge::ParallelSegment::maxOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4) + *((double *)this + 6);
}

double EQKit::OpticalKern::Edge::ParallelSegment::closestOffset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::bucketCount(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return 1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucketLength(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double result = *((double *)this + 6);
  if (result <= 0.0) {
    return 1.0;
  }
  return result;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucket(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double v1 = *((double *)this + 5);
  (*(void (**)(EQKit::OpticalKern::Edge::ParallelSegment *))(*(void *)this + 56))(this);
  return v1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::offset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::nextValidBucket(EQKit::OpticalKern::Edge::ParallelSegment *this, uint64_t a2)
{
  return a2;
}

void EQKit::OpticalKern::Edge::ParallelSegment::appendToCGPath(CGFloat *this, CGMutablePathRef path)
{
  if (path)
  {
    if ((*((_DWORD *)this + 2) | 2) == 2)
    {
      CGPathMoveToPoint(path, 0, this[5], this[4]);
      double v4 = this[5];
      double v5 = this[4] + this[6];
    }
    else
    {
      CGPathMoveToPoint(path, 0, this[4], this[5]);
      double v5 = this[5];
      double v4 = this[4] + this[6];
    }
    CGPathAddLineToPoint(path, 0, v4, v5);
  }
}

uint64_t EQKit::OpticalKern::Edge::Composite::Composite(uint64_t a1, int **a2, uint64_t a3, uint64_t **a4)
{
  int v5 = *((_DWORD *)a2 + 6);
  *(void *)(a1 + ++*(void *)(this + 8) = 0;
  *(_DWORD *)a1 = v5;
  *(void *)(a1 + ++*(void *)(this + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v6 = *a2;
  if (*a2 == a2[1])
  {
    uint64_t v12 = 0;
    double v11 = 0;
  }
  else
  {
    int v7 = *((_DWORD *)a2 + 6);
    do
    {
      int v8 = *v6;
      if (*v6 == 1)
      {
        EQKit::OpticalKern::Spec::Entry::copyPath((EQKit::OpticalKern::Spec::Entry *)v6);
        operator new();
      }
      if (v8 == 2)
      {
        char v9 = (const __CTFont *)*((void *)v6 + 4);
        if (a4 && v9)
        {
          LOWORD(cf.b) = *((_WORD *)v6 + 20);
          cf.c = 12.0;
          LODWORD(cf.d) = v7;
          *(void *)&cf.a = CTFontCopyPostScriptName(v9);
          EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(a4, (uint64_t)&cf, &v18);
          long long v18 = 0uLL;
          if (*(void *)&cf.a) {
            CFRelease(*(CFTypeRef *)&cf.a);
          }
          goto LABEL_15;
        }
        if (v9)
        {
          CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(*((CTFontRef *)v6 + 4), 12.0, 0, 0);
          if (CopyWithAttributes)
          {
            memset(&cf, 0, sizeof(cf));
            CGAffineTransformMakeScale(&cf, 1.0, -1.0);
            CTFontCreatePathForGlyph(CopyWithAttributes, *((_WORD *)v6 + 20), &cf);
            operator new();
          }
LABEL_15:
          operator new();
        }
      }
      else if (v8 == 3)
      {
        operator new();
      }
      v6 += 18;
    }
    while (v6 != a2[1]);
    double v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(uint64_t **)(a1 + 16);
  }
  unint64_t v13 = 126 - 2 * __clz(((char *)v12 - (char *)v11) >> 4);
  *(void *)&cf.a = _compareSegmentsMinOrthogonal;
  if (v12 == v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(v11, v12, (uint64_t (**)(uint64_t *, uint64_t *))&cf, v14, 1);
  return a1;
}

void sub_223552234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a27 = a13;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_223552358()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v0);
  }
  if (v1) {
    MEMORY[0x223CB8F20](v2, 0x1080C4076FF3075);
  }
  JUMPOUT(0x223552340);
}

void EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(uint64_t **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  int v7 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
  int v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    uint64_t v9 = v7[6];
    double v10 = (std::__shared_weak_count *)v7[7];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a3 = v9;
    a3[1] = v10;
  }
  else
  {
    double v10 = 0;
  }
  pthread_rwlock_unlock(v6);
  if (!v8 && ((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v6);
    double v11 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
    if (v11)
    {
      v11[8] = **a1;
      uint64_t v12 = v11[6];
      uint64_t v13 = v11[7];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v16 = **a1;
      uint64_t v17 = a2;
      uint64_t v14 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v17);
      uint64_t v15 = (std::__shared_weak_count *)v14[7];
      v14[6] = 0;
      v14[7] = 0;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v15);
      }
      v14[8] = v16;
      if (a1[4] > a1[7]) {
        *((unsigned char *)a1 + 4++*(void *)(this + 8) = 1;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *a3 = v12;
    a3[1] = v13;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v10);
    }
    pthread_rwlock_unlock(v6);
  }
}

void sub_223552538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a11);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _compareSegmentsMinOrthogonal(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (*(void *)a2)
    {
      double v4 = (*(double (**)(uint64_t))(*(void *)result + 24))(result);
      return v4 < (*(double (**)(void))(**(void **)a2 + 24))();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold(int *a1, uint64_t a2, double *a3, double *a4, void **a5, double a6)
{
  int v6 = *a1;
  *a3 = 0.0;
  uint64_t v7 = *((void *)a1 + 1);
  if (v7 == *((void *)a1 + 2))
  {
    char v13 = 0;
  }
  else
  {
    char v13 = 0;
    unsigned int v29 = v6 & 0xFFFFFFFD;
    uint64_t v14 = (long long *)MEMORY[0x263F00148];
    do
    {
      uint64_t v27 = v7;
      uint64_t v16 = *(_DWORD **)v7;
      uint64_t v15 = *(std::__shared_weak_count **)(v7 + 8);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v28 = v15;
      uint64_t v18 = *(void *)(a2 + 8);
      uint64_t v17 = *(void *)(a2 + 16);
      while (v18 != v17)
      {
        double v19 = *(_DWORD **)v18;
        double v20 = *(std::__shared_weak_count **)(v18 + 8);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v30 = *v14;
        long long v31 = v30;
        if (v16
          && v19
          && EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(v16, v19, a3, &v30, a5, a6))
        {
          if ((v13 & 1) == 0
            || (!v29
              ? (double v21 = *(double *)&v31 - *(double *)&v30, v22 = a4[2], v23 = *a4)
              : (double v21 = *((double *)&v31 + 1) - *((double *)&v30 + 1), v22 = a4[3], v23 = a4[1]),
                v21 < v22 - v23))
          {
            long long v24 = v31;
            *(_OWORD *)a4 = v30;
            *((_OWORD *)a4 + 1) = v24;
          }
          char v13 = 1;
        }
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v20);
        }
        uint64_t v17 = *(void *)(a2 + 16);
        v18 += 16;
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v28);
      }
      uint64_t v7 = v27 + 16;
    }
    while (v27 + 16 != *((void *)a1 + 2));
  }
  return v13 & 1;
}

void sub_223552798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a11);
  }
  _Unwind_Resume(exception_object);
}

CGMutablePathRef EQKit::OpticalKern::Edge::Composite::newPathForEdge(EQKit::OpticalKern::Edge::Composite *this)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  if (Mutable)
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 1); i != *((uint64_t **)this + 2); i += 2)
    {
      uint64_t v4 = *i;
      int v5 = (std::__shared_weak_count *)i[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        (*(void (**)(uint64_t, CGMutablePathRef))(*(void *)v4 + 16))(v4, Mutable);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v5);
      }
    }
  }
  return Mutable;
}

void sub_223552864(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void EQKit::OpticalKern::Edge::PathSegment::~PathSegment(EQKit::OpticalKern::Edge::PathSegment *this)
{
  *(void *)this = &unk_26D6865E0;
  int v1 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26D6865E0;
  int v1 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }

  JUMPOUT(0x223CB8F20);
}

void EQKit::OpticalKern::Edge::ParallelSegment::~ParallelSegment(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
}

double _determineBucketDistance(double *a1, double *a2, int a3, double *a4)
{
  double v4 = a2[1];
  double v5 = a2[2];
  double v7 = a1[1];
  double v6 = a1[2];
  if (v6 > v4 && v5 > v7)
  {
    if (v7 >= v4) {
      double v4 = a1[1];
    }
    if (v5 < v6) {
      double v6 = a2[2];
    }
    double v28 = v6 + v4;
    double v27 = v28 * 0.5;
    double v25 = *a1;
    if (a3) {
      double v24 = *a1;
    }
    else {
      double v24 = v28 * 0.5;
    }
    if (a3)
    {
      double v25 = v27;
      double v26 = *a2;
    }
    else
    {
      double v26 = v27;
    }
    if (!a3) {
      double v27 = *a2;
    }
  }
  else
  {
    if (a3) {
      double v9 = *a1;
    }
    else {
      double v9 = a1[1];
    }
    if (a3) {
      double v10 = a1[1];
    }
    else {
      double v10 = *a1;
    }
    if (a3) {
      double v11 = *a2;
    }
    else {
      double v11 = a2[2];
    }
    if (a3) {
      double v12 = a2[2];
    }
    else {
      double v12 = *a2;
    }
    if (a3) {
      double v13 = *a2;
    }
    else {
      double v13 = a2[1];
    }
    if (a3) {
      double v14 = a2[1];
    }
    else {
      double v14 = *a2;
    }
    if (a3) {
      double v15 = *a1;
    }
    else {
      double v15 = a1[2];
    }
    if (a3) {
      double v16 = a1[2];
    }
    else {
      double v16 = *a1;
    }
    if (v6 < v4)
    {
      double v9 = v15;
      double v10 = v16;
      double v11 = v13;
      double v12 = v14;
    }
    if (a3) {
      double v17 = *a2;
    }
    else {
      double v17 = a2[2];
    }
    if (a3) {
      double v18 = a2[2];
    }
    else {
      double v18 = *a2;
    }
    if (a3) {
      double v19 = *a2;
    }
    else {
      double v19 = a1[1];
    }
    if (a3)
    {
      double v20 = *a2;
    }
    else
    {
      double v7 = *a2;
      double v20 = a2[1];
    }
    if (a3) {
      double v21 = a2[1];
    }
    else {
      double v21 = *a2;
    }
    if (a3)
    {
      double v5 = *a2;
      double v22 = a1[2];
    }
    else
    {
      double v22 = *a2;
    }
    BOOL v23 = v6 < v4;
    if (v6 < v4) {
      double v24 = v5;
    }
    else {
      double v24 = v19;
    }
    if (v23) {
      double v25 = v22;
    }
    else {
      double v25 = v7;
    }
    if (v23) {
      double v26 = v20;
    }
    else {
      double v26 = v17;
    }
    if (v23) {
      double v27 = v21;
    }
    else {
      double v27 = v18;
    }
    if (*a2 >= *a1)
    {
      double v24 = v9;
      double v25 = v10;
      double v26 = v11;
      double v27 = v12;
    }
  }
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;
  a4[3] = v27;
  double result = (v27 - v25) * (v27 - v25) + (v26 - v24) * (v26 - v24);
  if (*a2 < *a1 && a2[2] > a1[1] && a1[2] > a2[1]) {
    return -result;
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a2);
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223552B10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CB8F20);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::PathSegment,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223552C00(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CB8F20);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFHashCode v8 = *(void *)a2;
  if (*(void *)a2) {
    CFHashCode v8 = CFHash((CFTypeRef)v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a2 + 8) << 16;
  CFHashCode v10 = v8 ^ *(unsigned int *)(a2 + 24);
  unint64_t v11 = v10 ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ v9;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    double v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      double v16 = (void *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v11)
          {
            if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v16 + 2), a2)) {
              return v16;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4) {
              break;
            }
          }
          double v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(a1, v11, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  double v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *double v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(this + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  double v16 = (void *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100](v27, 0);
  return v16;
}

void sub_223552F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  CFHashCode v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + ++*(void *)(this + 8) = v7;
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:nn180100]<EQKit::OpticalKern::Glyph::Key const&>((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + ++*(void *)(this + 16) = 1;
  return result;
}

void sub_223552F80(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:nn180100]<EQKit::OpticalKern::Glyph::Key const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *(_WORD *)(a1 + ++*(void *)(this + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + ++*(void *)(this + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4++*(void *)(this + 8) = 0;
  *(void *)(a1 + 32) = 0;
  return a1;
}

void std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::Path,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223553060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CB8F20);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
void sub_22355342C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (a1 == a2) {
    return;
  }
  char v5 = a1 + 2;
  if (a1 + 2 == a2) {
    return;
  }
  uint64_t v7 = 0;
  CFHashCode v8 = a1;
  do
  {
    uint64_t v9 = v8;
    CFHashCode v8 = v5;
    uint64_t v10 = *a3;
    unint64_t v11 = (std::__shared_weak_count *)v9[3];
    uint64_t v31 = v9[2];
    uint64_t v32 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)v9[1];
    uint64_t v29 = *v9;
    uint64_t v30 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = v10(&v31, &v29);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v30);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v32);
    }
    if (!v13) {
      goto LABEL_32;
    }
    uint64_t v14 = *v8;
    unint64_t v15 = (std::__shared_weak_count *)v9[3];
    uint64_t v16 = v7;
    uint64_t *v8 = 0;
    v8[1] = 0;
    while (1)
    {
      unint64_t v17 = (char *)a1 + v16;
      long long v18 = *(_OWORD *)((char *)a1 + v16);
      *(void *)unint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      float v19 = *(std::__shared_weak_count **)((char *)a1 + v16 + 24);
      *((_OWORD *)v17 + 1) = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v19);
      }
      if (!v16)
      {
        size_t v23 = a1;
        goto LABEL_30;
      }
      BOOL v20 = *a3;
      uint64_t v27 = v14;
      double v28 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v21 = *(std::__shared_weak_count **)((char *)a1 + v16 - 8);
      uint64_t v25 = *(uint64_t *)((char *)a1 + v16 - 16);
      double v26 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v22 = v20(&v27, &v25);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v26);
      }
      if (!v28) {
        break;
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v28);
      if ((v22 & 1) == 0) {
        goto LABEL_29;
      }
LABEL_27:
      v16 -= 16;
    }
    if (v22) {
      goto LABEL_27;
    }
LABEL_29:
    size_t v23 = (uint64_t *)((char *)a1 + v16);
LABEL_30:
    char v24 = (std::__shared_weak_count *)v23[1];
    *size_t v23 = v14;
    v23[1] = (uint64_t)v15;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v24);
    }
LABEL_32:
    char v5 = v8 + 2;
    v7 += 16;
  }
  while (v8 + 2 != a2);
}

void sub_223553618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    char v5 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v7 = (std::__shared_weak_count **)(a1 + 3);
      do
      {
        CFHashCode v8 = v4;
        unint64_t v4 = v5;
        uint64_t v9 = *a3;
        uint64_t v10 = (std::__shared_weak_count *)v8[3];
        uint64_t v28 = v8[2];
        uint64_t v29 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v11 = (std::__shared_weak_count *)v8[1];
        uint64_t v26 = *v8;
        uint64_t v27 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v12 = v9(&v28, &v26);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v27);
        }
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v29);
        }
        if (v12)
        {
          int v13 = (std::__shared_weak_count *)*v4;
          uint64_t v14 = (std::__shared_weak_count *)v8[3];
          unint64_t v15 = v7;
          *unint64_t v4 = 0;
          v4[1] = 0;
          do
          {
            long long v16 = *(_OWORD *)(v15 - 3);
            *(v15 - 3) = 0;
            *(v15 - 2) = 0;
            unint64_t v17 = *v15;
            *(_OWORD *)(v15 - 1) = v16;
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v17);
            }
            long long v18 = *a3;
            char v24 = v13;
            uint64_t v25 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            float v19 = *(v15 - 4);
            uint64_t v22 = (uint64_t)*(v15 - 5);
            size_t v23 = v19;
            if (v19) {
              atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v20 = v18((uint64_t *)&v24, &v22);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v23);
            }
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v25);
            }
            v15 -= 2;
          }
          while ((v20 & 1) != 0);
          unint64_t v21 = *v15;
          *(v15 - 1) = v13;
          *unint64_t v15 = v14;
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v21);
          }
        }
        char v5 = v4 + 2;
        v7 += 2;
      }
      while (v4 + 2 != a2);
    }
  }
}

void sub_2235537CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(void *a1, void *a2, void *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  CFHashCode v8 = *a4;
  uint64_t v10 = (std::__shared_weak_count **)(a2 + 1);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v55 = *a2;
  double v56 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count **)(a1 + 1);
  unint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v53 = *a1;
  double v54 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v13 = v8(&v55, &v53);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v54);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v56);
  }
  uint64_t v14 = *a4;
  unint64_t v15 = (std::__shared_weak_count **)(a3 + 1);
  if (v13)
  {
    long long v16 = *v15;
    uint64_t v43 = *a3;
    uint64_t v44 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v17 = (std::__shared_weak_count *)a2[1];
    uint64_t v41 = *a2;
    uint64_t v42 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = v14(&v43, &v41);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v42);
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v44);
    }
    uint64_t v19 = *a1;
    if (v18)
    {
      *a1 = *a3;
      *a3 = v19;
      uint64_t result = 1;
LABEL_49:
      uint64_t v10 = (std::__shared_weak_count **)(a3 + 1);
      goto LABEL_50;
    }
    *a1 = *a2;
    *a2 = v19;
    uint64_t v31 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v31;
    uint64_t v32 = *a4;
    unint64_t v33 = (std::__shared_weak_count *)a3[1];
    uint64_t v39 = *a3;
    long long v40 = v33;
    if (v33)
    {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v31 = *v10;
    }
    uint64_t v37 = *a2;
    uint64_t v38 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v34 = v32(&v39, &v37);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v38);
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v40);
    }
    if (v34)
    {
      uint64_t v35 = *a2;
      *a2 = *a3;
      *a3 = v35;
      uint64_t result = 2;
      int v12 = v10;
      goto LABEL_49;
    }
  }
  else
  {
    unint64_t v21 = *v15;
    uint64_t v51 = *a3;
    long long v52 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)a2[1];
    uint64_t v49 = *a2;
    std::string v50 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v23 = v14(&v51, &v49);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v50);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v52);
    }
    if ((v23 & 1) == 0) {
      return 0;
    }
    uint64_t v24 = *a2;
    *a2 = *a3;
    *a3 = v24;
    uint64_t v25 = a2[1];
    a2[1] = a3[1];
    a3[1] = v25;
    uint64_t v26 = *a4;
    uint64_t v27 = (std::__shared_weak_count *)a2[1];
    uint64_t v47 = *a2;
    long long v48 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)a1[1];
    uint64_t v45 = *a1;
    float64x2_t v46 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v29 = v26(&v47, &v45);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v46);
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v48);
    }
    if (v29)
    {
      uint64_t v30 = *a1;
      *a1 = *a2;
      *a2 = v30;
      uint64_t result = 2;
LABEL_50:
      uint64_t v36 = *v12;
      *int v12 = *v10;
      *uint64_t v10 = v36;
      return result;
    }
  }
  return 1;
}

void sub_223553B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  char v6 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  CFHashCode v8 = *a3;
  uint64_t v56 = v7;
  double v57 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*(a2 - 1);
  uint64_t v54 = *(a2 - 2);
  uint64_t v55 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = v8(&v56, &v54);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v55);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v57);
  }
  if (v10)
  {
    uint64_t i = a1;
    do
    {
      int v12 = *a3;
      uint64_t v52 = v7;
      uint64_t v53 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v13 = (std::__shared_weak_count *)i[3];
      uint64_t v50 = i[2];
      uint64_t v51 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = v12(&v52, &v50);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v51);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v53);
      }
      i += 2;
    }
    while ((v14 & 1) == 0);
  }
  else
  {
    for (uint64_t i = a1 + 2; i < v4; i += 2)
    {
      unint64_t v15 = *a3;
      uint64_t v48 = v7;
      uint64_t v49 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = (std::__shared_weak_count *)i[1];
      uint64_t v46 = *i;
      uint64_t v47 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v17 = v15(&v48, &v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v47);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v49);
      }
      if (v17) {
        break;
      }
    }
  }
  if (i < v4)
  {
    do
    {
      int v18 = *a3;
      uint64_t v44 = v7;
      uint64_t v45 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (std::__shared_weak_count *)*(v4 - 1);
      uint64_t v42 = *(v4 - 2);
      uint64_t v43 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v20 = v18(&v44, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v43);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v45);
      }
      v4 -= 2;
    }
    while ((v20 & 1) != 0);
  }
  while (i < v4)
  {
    uint64_t v21 = *i;
    *uint64_t i = *v4;
    *unint64_t v4 = v21;
    uint64_t v22 = i[1];
    i[1] = v4[1];
    v4[1] = v22;
    do
    {
      char v23 = *a3;
      uint64_t v40 = v7;
      uint64_t v41 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (std::__shared_weak_count *)i[3];
      uint64_t v38 = i[2];
      uint64_t v39 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v23(&v40, &v38);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v39);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v41);
      }
      i += 2;
    }
    while (!v25);
    do
    {
      uint64_t v26 = *a3;
      uint64_t v36 = v7;
      uint64_t v37 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = (std::__shared_weak_count *)*(v4 - 1);
      uint64_t v34 = *(v4 - 2);
      uint64_t v35 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v28 = v26(&v36, &v34);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v35);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v37);
      }
      v4 -= 2;
    }
    while ((v28 & 1) != 0);
  }
  int v29 = (long long *)(i - 2);
  if (i - 2 != a1)
  {
    long long v30 = *v29;
    *(void *)int v29 = 0;
    *(i - 1) = 0;
    uint64_t v31 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v30;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v31);
    }
  }
  uint64_t v32 = (std::__shared_weak_count *)*(i - 1);
  *(i - 2) = v7;
  *(i - 1) = (uint64_t)v6;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v32);
  }
  return i;
}

void sub_223553E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v29 = *(std::__shared_weak_count **)(v27 - 104);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v29);
  }
  long long v30 = *(std::__shared_weak_count **)(v27 - 88);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v30);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = 0;
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  do
  {
    uint64_t v9 = *a3;
    char v10 = (std::__shared_weak_count *)a1[v6 + 3];
    uint64_t v56 = a1[v6 + 2];
    double v57 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = v8;
    uint64_t v55 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v11 = v9(&v56, &v54);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v55);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v57);
    }
    v6 += 2;
  }
  while ((v11 & 1) != 0);
  int v12 = &a1[v6];
  if (v6 == 2)
  {
    if (v12 < a2)
    {
      for (a2 -= 2; ; a2 -= 2)
      {
        char v17 = *a3;
        int v18 = (std::__shared_weak_count *)a2[1];
        uint64_t v52 = *a2;
        uint64_t v53 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = v8;
        uint64_t v51 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v19 = v17(&v52, &v50);
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v51);
        }
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v53);
        }
        char v20 = v12 >= a2 ? 1 : v19;
        if (v20) {
          break;
        }
      }
    }
  }
  else
  {
    do
    {
      uint64_t v14 = *(a2 - 2);
      char v13 = (std::__shared_weak_count *)*(a2 - 1);
      a2 -= 2;
      unint64_t v15 = *a3;
      uint64_t v48 = v14;
      uint64_t v49 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v46 = v8;
      uint64_t v47 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v16 = v15(&v48, &v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v47);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v49);
      }
    }
    while ((v16 & 1) == 0);
  }
  if (v12 >= a2)
  {
    uint64_t v21 = &a1[v6];
  }
  else
  {
    uint64_t v21 = &a1[v6];
    uint64_t v22 = a2;
    do
    {
      uint64_t v23 = *v21;
      *uint64_t v21 = *v22;
      *uint64_t v22 = v23;
      uint64_t v24 = v21[1];
      v21[1] = v22[1];
      v22[1] = v24;
      do
      {
        uint64_t v26 = v21[2];
        int v25 = (std::__shared_weak_count *)v21[3];
        v21 += 2;
        uint64_t v27 = *a3;
        uint64_t v44 = v26;
        uint64_t v45 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v42 = v8;
        uint64_t v43 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v28 = v27(&v44, &v42);
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v43);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v45);
        }
      }
      while ((v28 & 1) != 0);
      do
      {
        uint64_t v30 = *(v22 - 2);
        int v29 = (std::__shared_weak_count *)*(v22 - 1);
        v22 -= 2;
        uint64_t v31 = *a3;
        uint64_t v40 = v30;
        uint64_t v41 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v38 = v8;
        uint64_t v39 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v32 = v31(&v40, &v38);
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v39);
        }
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v41);
        }
      }
      while (!v32);
    }
    while (v21 < v22);
  }
  unint64_t v33 = (long long *)(v21 - 2);
  if (v21 - 2 != a1)
  {
    long long v34 = *v33;
    *(void *)unint64_t v33 = 0;
    *(v21 - 1) = 0;
    uint64_t v35 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v34;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    }
  }
  uint64_t v36 = (std::__shared_weak_count *)*(v21 - 1);
  *(v21 - 2) = v8;
  *(v21 - 1) = (uint64_t)v7;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v36);
  }
  return v21 - 2;
}

void sub_22355421C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a25);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  unint64_t v4 = a2;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a3;
      uint64_t v9 = (std::__shared_weak_count *)*(a2 - 1);
      uint64_t v44 = *(a2 - 2);
      uint64_t v45 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v10 = (std::__shared_weak_count *)a1[1];
      uint64_t v42 = *a1;
      uint64_t v43 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v11 = v8(&v44, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v43);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v45);
      }
      if (v11)
      {
        uint64_t v12 = *a1;
        *a1 = *(v4 - 2);
        *(v4 - 2) = v12;
        uint64_t v13 = a1[1];
        a1[1] = *(v4 - 1);
        *(v4 - 1) = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v14 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a3);
      unint64_t v15 = a1 + 6;
      if (a1 + 6 == v4) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      int v32 = v4;
      break;
  }
  while (1)
  {
    int v18 = *a3;
    char v19 = (std::__shared_weak_count *)v15[1];
    uint64_t v40 = *v15;
    uint64_t v41 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v20 = (std::__shared_weak_count *)v14[1];
    uint64_t v38 = *v14;
    uint64_t v39 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = v18(&v40, &v38);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v39);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v41);
    }
    if (v21)
    {
      int v33 = v17;
      uint64_t v22 = *v15;
      uint64_t v23 = (std::__shared_weak_count *)v15[1];
      uint64_t v24 = v16;
      *unint64_t v15 = 0;
      v15[1] = 0;
      while (1)
      {
        int v25 = (char *)a1 + v24;
        long long v26 = *(_OWORD *)((char *)a1 + v24 + 32);
        *((void *)v25 + 4) = 0;
        *((void *)v25 + 5) = 0;
        uint64_t v27 = *(std::__shared_weak_count **)((char *)a1 + v24 + 56);
        *((_OWORD *)v25 + 3) = v26;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v27);
        }
        if (v24 == -32) {
          break;
        }
        char v28 = *a3;
        uint64_t v36 = v22;
        uint64_t v37 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v29 = *(std::__shared_weak_count **)((char *)a1 + v24 + 24);
        uint64_t v34 = *(uint64_t *)((char *)a1 + v24 + 16);
        uint64_t v35 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = v28(&v36, &v34);
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v35);
        }
        if (v37)
        {
          std::__shared_weak_count::__release_shared[abi:nn180100](v37);
          if ((v30 & 1) == 0)
          {
            uint64_t v14 = (uint64_t *)((char *)a1 + v24 + 32);
            goto LABEL_40;
          }
        }
        else if (!v30)
        {
          goto LABEL_40;
        }
        v14 -= 2;
        v24 -= 16;
      }
      uint64_t v14 = a1;
LABEL_40:
      uint64_t v31 = (std::__shared_weak_count *)v14[1];
      *uint64_t v14 = v22;
      v14[1] = (uint64_t)v23;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v31);
      }
      int v17 = v33 + 1;
      unint64_t v4 = v32;
      if (v33 == 7) {
        return v15 + 2 == v32;
      }
    }
    uint64_t v14 = v15;
    v16 += 16;
    v15 += 2;
    if (v15 == v4) {
      return 1;
    }
  }
}

void sub_2235545A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a22);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a5);
  char v10 = *a5;
  int v11 = (std::__shared_weak_count *)a4[1];
  uint64_t v38 = *a4;
  uint64_t v39 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v36 = *a3;
  uint64_t v37 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = v10(&v38, &v36);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v37);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v39);
  }
  if (v13)
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = a3[1];
    a3[1] = a4[1];
    a4[1] = v15;
    uint64_t v16 = *a5;
    int v17 = (std::__shared_weak_count *)a3[1];
    uint64_t v34 = *a3;
    uint64_t v35 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = (std::__shared_weak_count *)a2[1];
    uint64_t v32 = *a2;
    int v33 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = v16(&v34, &v32);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v33);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    }
    if (v19)
    {
      uint64_t v20 = *a2;
      *a2 = *a3;
      *a3 = v20;
      uint64_t v21 = a2[1];
      a2[1] = a3[1];
      a3[1] = v21;
      uint64_t v22 = *a5;
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      uint64_t v30 = *a2;
      uint64_t v31 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (std::__shared_weak_count *)a1[1];
      uint64_t v28 = *a1;
      int v29 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v22(&v30, &v28);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v29);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v31);
      }
      if (v25)
      {
        uint64_t v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
        uint64_t v27 = a1[1];
        a1[1] = a2[1];
        a2[1] = v27;
      }
    }
  }
}

void sub_2235547EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  int v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v50 = *a5;
  uint64_t v51 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v48 = *a4;
  uint64_t v49 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = v12(&v50, &v48);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v49);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v51);
  }
  if (v15)
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = a4[1];
    a4[1] = a5[1];
    a5[1] = v17;
    int v18 = *a6;
    int v19 = (std::__shared_weak_count *)a4[1];
    uint64_t v46 = *a4;
    uint64_t v47 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (std::__shared_weak_count *)a3[1];
    uint64_t v44 = *a3;
    uint64_t v45 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = v18(&v46, &v44);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v45);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v47);
    }
    if (v21)
    {
      uint64_t v22 = *a3;
      *a3 = *a4;
      *a4 = v22;
      uint64_t v23 = a3[1];
      a3[1] = a4[1];
      a4[1] = v23;
      uint64_t v24 = *a6;
      int v25 = (std::__shared_weak_count *)a3[1];
      uint64_t v42 = *a3;
      uint64_t v43 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = (std::__shared_weak_count *)a2[1];
      uint64_t v40 = *a2;
      uint64_t v41 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v27 = v24(&v42, &v40);
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v41);
      }
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v43);
      }
      if (v27)
      {
        uint64_t v28 = *a2;
        *a2 = *a3;
        *a3 = v28;
        uint64_t v29 = a2[1];
        a2[1] = a3[1];
        a3[1] = v29;
        uint64_t v30 = *a6;
        uint64_t v31 = (std::__shared_weak_count *)a2[1];
        uint64_t v38 = *a2;
        uint64_t v39 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = (std::__shared_weak_count *)a1[1];
        uint64_t v36 = *a1;
        uint64_t v37 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v33 = v30(&v38, &v36);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v37);
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v39);
        }
        if (v33)
        {
          uint64_t v34 = *a1;
          *a1 = *a2;
          *a2 = v34;
          uint64_t v35 = a1[1];
          a1[1] = a2[1];
          a2[1] = v35;
        }
      }
    }
  }
}

void sub_223554AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v14 = (uint64_t *)v6;
      do
      {
        int v15 = *a4;
        uint64_t v16 = (std::__shared_weak_count *)v14[1];
        uint64_t v26 = *v14;
        int v27 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (std::__shared_weak_count *)a1[1];
        uint64_t v24 = *a1;
        int v25 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v18 = v15(&v26, &v24);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v25);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v27);
        }
        if (v18)
        {
          uint64_t v19 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v19;
          uint64_t v20 = v14[1];
          v14[1] = a1[1];
          a1[1] = v20;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v21 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, v6, (uint64_t (**)(long long *, uint64_t *))a4, v21);
        v6 -= 16;
      }
      while (v21-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void sub_223554CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  char v5 = a4;
  uint64_t v6 = a1;
  uint64_t v36 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4) {
    return;
  }
  uint64_t v9 = ((uint64_t)a4 - a1) >> 3;
  uint64_t v10 = v9 + 1;
  unint64_t v11 = (long long *)(a1 + 16 * (v9 + 1));
  uint64_t v12 = v9 + 2;
  if (v9 + 2 < a3)
  {
    uint64_t v13 = *a2;
    long long v50 = *v11;
    if (*((void *)&v50 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 3);
    uint64_t v48 = *((void *)v11 + 2);
    uint64_t v49 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v13((uint64_t *)&v50, &v48);
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v49);
    }
    if (*((void *)&v50 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v50 + 1));
      if ((v15 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (v15)
    {
LABEL_12:
      ++v11;
      uint64_t v10 = v12;
    }
  }
LABEL_13:
  uint64_t v16 = *a2;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v11 + 1);
  uint64_t v46 = *(void *)v11;
  uint64_t v47 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v18 = (std::__shared_weak_count *)v5[1];
  uint64_t v44 = *v5;
  uint64_t v45 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v19 = v16(&v46, &v44);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v45);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v47);
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v21 = *v5;
    uint64_t v20 = (std::__shared_weak_count *)v5[1];
    *char v5 = 0;
    v5[1] = 0;
    uint64_t v35 = v6;
    while (1)
    {
      uint64_t v22 = (uint64_t *)v11;
      long long v23 = *v11;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      uint64_t v24 = (std::__shared_weak_count *)v5[1];
      *(_OWORD *)char v5 = v23;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v24);
      }
      if (v36 < v10)
      {
LABEL_48:
        uint64_t v34 = (std::__shared_weak_count *)v22[1];
        *uint64_t v22 = v21;
        v22[1] = (uint64_t)v20;
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v34);
        }
        return;
      }
      uint64_t v25 = 2 * v10;
      uint64_t v10 = (2 * v10) | 1;
      unint64_t v11 = (long long *)(v6 + 16 * v10);
      uint64_t v26 = v25 + 2;
      if (v25 + 2 < a3)
      {
        int v27 = (uint64_t (*)(long long *, uint64_t *))*a2;
        long long v28 = *v11;
        long long v43 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = (std::__shared_weak_count *)*((void *)v11 + 3);
        uint64_t v41 = *((void *)v11 + 2);
        uint64_t v42 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = v27(&v43, &v41);
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v42);
        }
        if (!*((void *)&v43 + 1))
        {
          if (!v30) {
            goto LABEL_36;
          }
LABEL_35:
          ++v11;
          uint64_t v10 = v26;
          goto LABEL_36;
        }
        std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v43 + 1));
        if (v30) {
          goto LABEL_35;
        }
      }
LABEL_36:
      uint64_t v31 = *a2;
      uint64_t v32 = (std::__shared_weak_count *)*((void *)v11 + 1);
      uint64_t v39 = *(void *)v11;
      uint64_t v40 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = v21;
      uint64_t v38 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v33 = v31(&v39, &v37);
      uint64_t v6 = v35;
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v38);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v40);
      }
      char v5 = v22;
      if (v33) {
        goto LABEL_48;
      }
    }
  }
}

void sub_223554F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a24);
  }
  if (*(void *)(v24 - 88)) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)(v24 - 88));
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t *), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      int v15 = *(std::__shared_weak_count **)(v9 + 8);
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:nn180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - ++*(void *)(this + 16) = 0;
      *(void *)(a2 - ++*(void *)(this + 8) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - ++*(void *)(this + 16) = v8;
      *(void *)(a2 - ++*(void *)(this + 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v14);
      }
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_2235550E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(long long *, uint64_t *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_14;
    }
    uint64_t v12 = *a2;
    long long v13 = *(_OWORD *)v9;
    long long v21 = v13;
    if (*((void *)&v13 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v9 + 24);
    uint64_t v19 = *(void *)(v9 + 16);
    uint64_t v20 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v12(&v21, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v20);
    }
    if (*((void *)&v21 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v21 + 1));
      if ((v15 & 1) == 0) {
        goto LABEL_14;
      }
LABEL_13:
      v9 += 16;
      uint64_t v6 = v11;
      goto LABEL_14;
    }
    if (v15) {
      goto LABEL_13;
    }
LABEL_14:
    long long v16 = *(_OWORD *)v9;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + ++*(void *)(this + 8) = 0;
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v17);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void sub_223555220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (void *)(a1 + 16 * (v4 >> 1));
    uint64_t v10 = *a3;
    long long v11 = *(_OWORD *)v9;
    long long v29 = v11;
    if (*((void *)&v11 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a2 - 8);
    long long v13 = (void *)(a2 - 16);
    uint64_t v27 = *(void *)(a2 - 16);
    long long v28 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v14 = v10(&v29, &v27);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v28);
    }
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    if (v14)
    {
      uint64_t v16 = *(void *)(a2 - 16);
      int v15 = *(std::__shared_weak_count **)(a2 - 8);
      *long long v13 = 0;
      v13[1] = 0;
      do
      {
        uint64_t v17 = v9;
        long long v18 = *(_OWORD *)v9;
        *uint64_t v9 = 0;
        v9[1] = 0;
        uint64_t v19 = (std::__shared_weak_count *)v13[1];
        *(_OWORD *)long long v13 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v19);
        }
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(a1 + 16 * v8);
        uint64_t v20 = *a3;
        long long v21 = *(_OWORD *)v9;
        long long v26 = v21;
        if (*((void *)&v21 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = v16;
        uint64_t v25 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v22 = v20(&v26, &v24);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v25);
        }
        if (*((void *)&v26 + 1)) {
          std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v26 + 1));
        }
        long long v13 = v17;
      }
      while ((v22 & 1) != 0);
      long long v23 = (std::__shared_weak_count *)v17[1];
      void *v17 = v16;
      v17[1] = v15;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v23);
      }
    }
  }
}

void sub_2235553B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void EQKit::OpticalKern::Spec::Entry::~Entry(EQKit::OpticalKern::Spec::Entry *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  double v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
}

void sub_223555464(_Unwind_Exception *exception_object)
{
  double v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  _Unwind_Resume(exception_object);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const CGPath *a3)
{
  *(_DWORD *)this = 1;
  *(CGPoint *)((char *)this + ++*(void *)(this + 8) = a2;
  *((void *)this + 3) = a3;
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = -1;
  *((void *)this + 7) = 0;
  *((void *)this + ++*(void *)(this + 8) = 0;
  *((void *)this + 6) = 0;
  if (a3) {
    CFRetain(a3);
  }
  return this;
}

void sub_2235554D0(_Unwind_Exception *exception_object)
{
  double v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  _Unwind_Resume(exception_object);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  *(_DWORD *)this = 2;
  *(CGPoint *)((char *)this + ++*(void *)(this + 8) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a3;
  *((_WORD *)this + 20) = a4;
  *((void *)this + 7) = 0;
  *((void *)this + ++*(void *)(this + 8) = 0;
  *((void *)this + 6) = 0;
  if (a3) {
    CFRetain(a3);
  }
  return this;
}

void sub_223555538(_Unwind_Exception *exception_object)
{
  double v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::OpticalKern::Spec::Entry::Entry(uint64_t this, CGPoint a2, double a3)
{
  *(_DWORD *)this = 3;
  *(CGPoint *)(this + ++*(void *)(this + 8) = a2;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_WORD *)(this + 40) = -1;
  *(double *)(this + 4++*(void *)(this + 8) = a3;
  *(void *)(this + 56) = 0;
  *(void *)(this + ++*(void *)(this + 64) = 0;
  return this;
}

{
  *(_DWORD *)this = 3;
  *(CGPoint *)(this + ++*(void *)(this + 8) = a2;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_WORD *)(this + 40) = -1;
  *(double *)(this + 4++*(void *)(this + 8) = a3;
  *(void *)(this + 56) = 0;
  *(void *)(this + ++*(void *)(this + 64) = 0;
  return this;
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, const EQKit::OpticalKern::Spec::Entry *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *(_OWORD *)((char *)this + ++*(void *)(this + 8) = *(_OWORD *)((char *)a2 + 8);
  unint64_t v4 = (const void *)*((void *)a2 + 3);
  double v3 = (const void *)*((void *)a2 + 4);
  *((void *)this + 3) = v4;
  *((void *)this + 4) = v3;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = 0;
  *((void *)this + ++*(void *)(this + 8) = 0;
  if (v4)
  {
    CFRetain(v4);
    double v3 = (const void *)*((void *)this + 4);
  }
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

void sub_223555604(_Unwind_Exception *exception_object)
{
  double v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::OpticalKern::Spec::Entry::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(const void **)(a1 + 32);
    if (v4) {
      CFRelease(v4);
    }
    char v5 = *(const void **)(a1 + 24);
    if (v5) {
      CFRelease(v5);
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + ++*(void *)(this + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(void *)(a1 + 4++*(void *)(this + 8) = *(void *)(a2 + 48);
    uint64_t v7 = *(void *)(a2 + 56);
    uint64_t v6 = *(void *)(a2 + 64);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + ++*(void *)(this + 64) = v6;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
    }
    uint64_t v9 = *(const void **)(a1 + 24);
    if (v9) {
      CFRetain(v9);
    }
    uint64_t v10 = *(const void **)(a1 + 32);
    if (v10) {
      CFRetain(v10);
    }
  }
  return a1;
}

CGPathRef EQKit::OpticalKern::Spec::Entry::copyPath(EQKit::OpticalKern::Spec::Entry *this)
{
  if (*((void *)this + 3))
  {
    uint64_t v1 = (const void *)*((void *)this + 3);
    return (CGPathRef)CFRetain(v1);
  }
  else
  {
    double v3 = (const __CTFont *)*((void *)this + 4);
    if (!v3) {
      return 0;
    }
    int v4 = *((unsigned __int16 *)this + 20);
    if (v4 == 0xFFFF)
    {
      return 0;
    }
    else
    {
      memset(&v5, 0, sizeof(v5));
      CGAffineTransformMakeScale(&v5, 1.0, -1.0);
      return CTFontCreatePathForGlyph(v3, v4, &v5);
    }
  }
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const CGPath *a3)
{
  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v6, a2, a3);
  unint64_t v4 = *((void *)this + 1);
  if (v4 >= *((void *)this + 2))
  {
    uint64_t v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t)this, (const EQKit::OpticalKern::Spec::Entry *)v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v6);
    uint64_t v5 = v4 + 72;
    *((void *)this + 1) = v4 + 72;
  }
  *((void *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v6);
}

void sub_2235557DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v7, a2, a3, a4);
  unint64_t v5 = *((void *)this + 1);
  if (v5 >= *((void *)this + 2))
  {
    uint64_t v6 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t)this, (const EQKit::OpticalKern::Spec::Entry *)v7);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v7);
    uint64_t v6 = v5 + 72;
    *((void *)this + 1) = v5 + 72;
  }
  *((void *)this + 1) = v6;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v7);
}

void sub_223555870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, double a3)
{
  int v6 = 3;
  CGPoint v7 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __int16 v10 = -1;
  double v11 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v4 = *((void *)this + 1);
  if (v4 >= *((void *)this + 2))
  {
    uint64_t v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t)this, (const EQKit::OpticalKern::Spec::Entry *)&v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)&v6);
    uint64_t v5 = v4 + 72;
    *((void *)this + 1) = v4 + 72;
  }
  *((void *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)&v6);
}

void sub_22355591C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>(uint64_t a1, const EQKit::OpticalKern::Spec::Entry *a2)
{
  uint64_t v2 = *(EQKit::OpticalKern::Spec::Entry **)a1;
  unint64_t v3 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x1C71C71C71C71C7) {
    unint64_t v10 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    double v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(v7, v10);
  }
  else {
    double v11 = 0;
  }
  int v14 = v11;
  int v15 = (EQKit::OpticalKern::Spec::Entry *)&v11[72 * v3];
  uint64_t v17 = &v11[72 * v10];
  EQKit::OpticalKern::Spec::Entry::Entry(v15, a2);
  uint64_t v16 = (char *)v15 + 72;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer((EQKit::OpticalKern::Spec::Entry **)a1, &v14);
  uint64_t v12 = *(void *)(a1 + 8);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_223555A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Spec::Entry *std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(EQKit::OpticalKern::Spec::Entry **a1, void *a2)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  BOOL result = (EQKit::OpticalKern::Spec::Entry *)a2[1];
  while (v4 != v5)
  {
    unint64_t v4 = (const EQKit::OpticalKern::Spec::Entry *)((char *)v4 - 72);
    BOOL result = EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)((char *)result - 72), v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (EQKit::OpticalKern::Spec::Entry *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (EQKit::OpticalKern::Spec::Entry *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + ++*(void *)(this + 16) = i - 72;
    EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_DWORD *EQKit::Layout::Config::Config(_DWORD *this)
{
  *this = 2;
  return this;
}

{
  *this = 2;
  return this;
}

void EQKit::Layout::Config::newConfigFromDictionary(EQKit::Layout::Config *this, const EQKit::Environment::Version *a2, NSDictionary *a3)
{
}

void sub_223555CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _BOOL(NSDictionary *a1, NSString *a2)
{
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = (void *)EQKitUtilDynamicCast(v4, (uint64_t)[(NSDictionary *)a1 objectForKey:a2]);

  return [v5 BOOLValue];
}

void sub_223555E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223555EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223555FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235561E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223556320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_223556768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_223556A18(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_223556BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223556C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223556CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223556E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v11;

  _Unwind_Resume(a1);
}

void sub_223556F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223556FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223557020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223557094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235572C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223557450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223557578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223557970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223557AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223557DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223557F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223558174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223558244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  int v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  BOOL result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::__emplace_unique_key_args<long long,std::pair<long long const,NSMutableArray * {__strong}>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  a3[1] = 0;
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *char v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v12;
  *uint64_t v12 = i;
  *(void *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    char v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2235585A4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,void *>>>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void sub_2235586B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355875C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223558858(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2235589DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_223558AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223558BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223558C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223558E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_223558F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223559100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_2235591D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2235592D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235595D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Block_object_dispose((const void *)(v31 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_2235598C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223559B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_223559C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223559E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355A0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22355A410(_Unwind_Exception *a1)
{
  unint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_22355A680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355AAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355AD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22355ADF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v11) {

  }
  _Unwind_Resume(a1);
}

void sub_22355AEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TSP::DataDigestForString(TSP *this@<X0>, uint64_t a2@<X8>)
{
  int v11 = this;
  if ([(TSP *)v11 length] == 40)
  {
    uint64_t v4 = [(TSP *)v11 UTF8String];
    uint64_t v5 = 0;
    unint64_t v6 = (char *)(v4 + 1);
    do
    {
      int v7 = *(v6 - 1);
      int v8 = *v6;
      if (v7 > 96) {
        LOBYTE(v7) = v7 - 32;
      }
      int v9 = (char)v7;
      if (v8 > 96) {
        LOBYTE(v++*(void *)(this + 8) = v8 - 32;
      }
      if ((char)v8 > 64) {
        LOBYTE(v++*(void *)(this + 8) = v8 + 9;
      }
      char v10 = 16 * v7;
      if (v9 > 64) {
        v10 -= 112;
      }
      *(unsigned char *)(a2 + v5++) = v10 & 0xF0 | v8 & 0xF;
      v6 += 2;
    }
    while (v5 != 20);
  }
  else
  {
    [(TSP *)v11 length];
    TSULogErrorInFunction();
  }
}

void sub_22355AFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_22355B21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_22355B3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22355B48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22355B6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355B818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355B92C(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_22355BCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355BE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22355C18C(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_22355C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_22355C438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355C58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355C734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22355C898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_22355C9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22355CACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355D04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355D1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355D2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355D400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22355D4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22355D5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      objc_destroyWeak(v2 + 3);
    }
    operator delete(v2);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::find<std::array<unsigned char,20ul>>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (result[2] == *a2
        && result[3] == a2[1]
        && *((_DWORD *)result + 8) == (unint64_t)*((unsigned int *)a2 + 4))
      {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      objc_destroyWeak(v2 + 5);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    char v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *uint64_t v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  void v14[3] = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(this + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  int v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)v24, 0);
  return v11;
}

void sub_22355D9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::__emplace_unique_key_args<std::array<unsigned char,20ul>,std::piecewise_construct_t const&,std::tuple<std::array<unsigned char,20ul> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = *(void *)a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *(void *)a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    char v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *(void *)a2
            && i[3] == *(void *)(a2 + 8)
            && *((_DWORD *)i + 8) == (unint64_t)*(unsigned int *)(a2 + 16))
          {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = a1 + 16;
  float v16 = operator new(0x30uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *float v16 = 0;
  v16[1] = v7;
  long long v17 = **a4;
  *((_DWORD *)v16 + ++*(void *)(this + 8) = *((_DWORD *)*a4 + 4);
  *((_OWORD *)v16 + 1) = v17;
  void v16[5] = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v23);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(this + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v25 >= v8) {
          v25 %= v8;
        }
      }
      else
      {
        v25 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (uint64_t *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)v27, 0);
  return i;
}

void sub_22355DC60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_22355E048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355E14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355E254(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22355E348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355E4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355E544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355E614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355E6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355E920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22355E980()
{
}

void sub_22355EA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22355EBB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355ED04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355EE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(void *)(result + 4++*(void *)(this + 8) = *(void *)(a2 + 48);
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_22355F420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  char v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TSPData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_22355F560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355F7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22355FD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22355FE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22355FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22355FF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223560020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22356014C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235602E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356057C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  objc_end_catch();
  _Block_object_dispose(&a19, 8);

  _Block_object_dispose((const void *)(v26 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_2235606F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_223560924(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_223560990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235609D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223560AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223560D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223560EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223560FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235611D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235612A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22356134C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223561458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_223561550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223561608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22356172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223561898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_223561A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_223561BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223561D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_223561DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223561F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235620E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2235621EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TSPCGDataProviderGetBytes(void *a1, const char *a2, uint64_t a3)
{
  return [a1 readToBuffer:a2 size:a3];
}

uint64_t TSPCGDataProviderSkipForward(void *a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v4 = [v3 offset];
  [v3 seekToOffset:v4 + a2];
  uint64_t v5 = [v3 offset] - v4;

  return v5;
}

void sub_2235622A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TSPCGDataProviderRewind(void *a1, const char *a2)
{
  return [a1 seekToOffset:0];
}

void TSPCGDataProviderReleaseInfo(void *a1)
{
  CGAffineTransform cf = a1;
  [cf close];
  CFRelease(cf);
}

void sub_223562308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223562418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235626E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, objc_super a12)
{
  a12.super_class = (Class)TSPTemporaryDataStorage;
  [(_Unwind_Exception *)&a12 dealloc];
  _Unwind_Resume(a1);
}

void sub_2235627B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22356285C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_223562980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223562FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356312C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223563240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22356333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_223563488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235635EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223563644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2235636A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223563768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223563804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235638F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356399C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_223563A60(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_223563AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223563B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223563C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223563D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223563E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223563FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223564124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223564390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223564488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223564574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356473C(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_2235647C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  char v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TSPDataRepReadChannel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_223564940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235655E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2235656E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356595C(_Unwind_Exception *a1)
{
}

void sub_223565AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_223565C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_223565DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_223565F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_223566420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UnsafePointer()
{
  if (TSPBundle::once != -1) {
    dispatch_once(&TSPBundle::once, &__block_literal_global_8);
  }
  id v0 = (void *)TSPBundle::bundle;

  return v0;
}

uint64_t __TSPBundle_block_invoke()
{
  TSPBundle::bundle = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];

  return MEMORY[0x270F9A758]();
}

void sub_2235668FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235669F0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_223566AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223566B54(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_223566CC4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_223566D88(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t TSP::ObjectStateIdentifier::ObjectStateIdentifier(uint64_t this)
{
  *(unsigned char *)this = 0;
  *(void *)(this + ++*(void *)(this + 8) = 0;
  *(unsigned char *)(this + ++*(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(unsigned char *)this = 0;
  *(void *)(this + ++*(void *)(this + 8) = 0;
  *(unsigned char *)(this + ++*(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t TSP::ObjectStateIdentifier::ObjectStateIdentifier(uint64_t this, uint64_t a2)
{
  *(unsigned char *)this = 1;
  *(void *)(this + ++*(void *)(this + 8) = a2;
  *(unsigned char *)(this + ++*(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(unsigned char *)this = 1;
  *(void *)(this + ++*(void *)(this + 8) = a2;
  *(unsigned char *)(this + ++*(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

TSP::ObjectStateIdentifier *TSP::ObjectStateIdentifier::ObjectStateIdentifier(TSP::ObjectStateIdentifier *this, NSString *a2)
{
  unint64_t v3 = a2;
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + ++*(void *)(this + 16) = 1;
  *((void *)this + 3) = v3;
  return this;
}

{
  NSString *v3;

  unint64_t v3 = a2;
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + ++*(void *)(this + 16) = 1;
  *((void *)this + 3) = v3;
  return this;
}

void TSP::ObjectStateIdentifier::~ObjectStateIdentifier(id *this)
{
}

{
}

uint64_t TSP::ObjectStateIdentifier::hasDataState(TSP::ObjectStateIdentifier *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t TSP::ObjectStateIdentifier::dataState(TSP::ObjectStateIdentifier *this)
{
  if (!*(unsigned char *)this)
  {
    int8x8_t v2 = [MEMORY[0x263F7C7F0] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"int64_t TSP::ObjectStateIdentifier::dataState() const"];
    uint64_t v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/persistence/src/TSPObjectStateIdentifier.mm"];
    [v2 handleFailureInFunction:v3 file:v4 lineNumber:34 description:@"Asked for data state when we have none"];
  }
  return *((void *)this + 1);
}

void sub_22356700C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TSP::ObjectStateIdentifier::setDataState(uint64_t this, uint64_t a2)
{
  *(unsigned char *)this = 1;
  *(unsigned char *)(this + ++*(void *)(this + 16) = 0;
  *(void *)(this + ++*(void *)(this + 8) = a2;
  return this;
}

uint64_t TSP::ObjectStateIdentifier::hasFileState(TSP::ObjectStateIdentifier *this)
{
  return *((unsigned __int8 *)this + 16);
}

id TSP::ObjectStateIdentifier::fileState(TSP::ObjectStateIdentifier *this)
{
  if (!*((unsigned char *)this + 16))
  {
    int8x8_t v2 = [MEMORY[0x263F7C7F0] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"NSString *TSP::ObjectStateIdentifier::fileState() const"];
    uint64_t v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/persistence/src/TSPObjectStateIdentifier.mm"];
    [v2 handleFailureInFunction:v3 file:v4 lineNumber:52 description:@"Asked for file state when we have none"];
  }
  uint64_t v5 = (void *)*((void *)this + 3);

  return v5;
}

void sub_223567104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TSP::ObjectStateIdentifier::setFileState(TSP::ObjectStateIdentifier *this, NSString *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + ++*(void *)(this + 16) = 1;
  objc_storeStrong((id *)this + 3, a2);
}

void sub_223567240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223567374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235674C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223567600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22356779C(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_223567884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223567A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223567B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_223567BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_223567F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223567FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223568098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223568100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  char v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TSPAVAssetResourceLoaderDelegate;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_223568340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_22356853C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223568730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223568D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223568E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TSPCryptoComponentWriteChannel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2235690FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2235693AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235697EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223569904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TSPCryptoReadChannel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_223569AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356A448(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v5 - 256), 8);
  _Block_object_dispose((const void *)(v5 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_22356A818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_22356A944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22356AAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356AC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_22356ADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22356AFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356B228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356B300(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22356B444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22356B4EC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22356B604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_22356C910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_22356DBE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL TSKMainThreadRunLoopEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t TSKMainThreadRunLoopPerform()
{
  objc_opt_class();
  id v0 = (void *)TSUDynamicCast();

  return objc_msgSend(v0, "p_flushPendingMainThreadBlocksQueueAcquiringLock:", 1);
}

void sub_22356E65C(_Unwind_Exception *a1)
{
}

void sub_22356E67C(void *a1)
{
}

void sub_22356E800(_Unwind_Exception *a1)
{
}

void sub_22356E95C(void *a1)
{
}

void sub_22356EBDC(void *exc_buf)
{
  if (v1) {
    objc_end_catch();
  }
  objc_begin_catch(exc_buf);
  JUMPOUT(0x22356EBA0);
}

void sub_22356EED0(_Unwind_Exception *a1)
{
}

void sub_22356EEF0(void *a1)
{
}

void sub_22356F22C(_Unwind_Exception *a1)
{
}

void sub_22356F24C(void *a1)
{
}

void -[TSKAccessController p_blockMainThreadForWrite](TSKAccessController *self, SEL a2)
{
  if (([MEMORY[0x263F08B88] isMainThread] & 1) == 0)
  {
    unint64_t v3 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"-[TSKAccessController p_blockMainThreadForWrite]"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/kit/TSKAccessController.m"), 648, @"this method should only be invoked on the main thread");
  }
  if (self->_secondaryThreadWriting)
  {
    uint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"-[TSKAccessController p_blockMainThreadForWrite]"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/kit/TSKAccessController.m"), 649, @"shouldn't be trying to block the main thread for a secondary thread write if there's already one ongoing");
  }
  self->_secondaryThreadWriting = 1;
  if ([(TSKAccessController *)self p_hasRead])
  {
    unint64_t v7 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v8 = [NSString stringWithUTF8String:"-[TSKAccessController p_blockMainThreadForWrite]"];
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/kit/TSKAccessController.m"), 655, @"failed to release read privs");
  }
  [(TSKAccessController *)self signalIdentifier:@"kTSKMainThreadBlockedIdentifier"];
  [(TSKAccessController *)self waitOnIdentifier:@"kTSKWriteCompleteIdentifier"];
  self->_secondaryThreadWriting = 0;
  [(TSKAccessController *)self waitOnIdentifier:@"kTSKPostWriteCompleteIdentifier"];
}

void sub_22356F3E4(_Unwind_Exception *a1)
{
}

void sub_22356F404(void *a1)
{
}

void sub_22356F914(_Unwind_Exception *a1)
{
}

void sub_22356F934(void *a1)
{
}

void sub_22356FA34(_Unwind_Exception *a1)
{
}

void sub_22356FA54(void *a1)
{
}

void sub_22356FC8C(_Unwind_Exception *a1)
{
}

void sub_22356FCAC(void *a1)
{
}

void sub_22357129C(_Unwind_Exception *a1)
{
}

void sub_223571318(_Unwind_Exception *a1)
{
}

void sub_2235713AC(_Unwind_Exception *a1)
{
}

void sub_2235714E0(_Unwind_Exception *a1)
{
}

void sub_22357155C(_Unwind_Exception *a1)
{
}

void sub_2235715D8(_Unwind_Exception *a1)
{
}

void sub_223571654(_Unwind_Exception *a1)
{
}

void sub_2235716D0(_Unwind_Exception *a1)
{
}

void sub_22357174C(_Unwind_Exception *a1)
{
}

void sub_2235717C8(_Unwind_Exception *a1)
{
}

void sub_223571844(_Unwind_Exception *a1)
{
}

void sub_2235718C0(_Unwind_Exception *a1)
{
}

void sub_223573578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TSKModelPathToDescendant(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v4 = (void *)[a1 childEnumerator];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v21;
LABEL_4:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v21 != v7) {
        objc_enumerationMutation(v4);
      }
      if (*(void **)(*((void *)&v20 + 1) + 8 * v8) == a2) {
        break;
      }
      if (v6 == ++v8)
      {
        uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
        uint64_t v6 = v5;
        if (v5) {
          goto LABEL_4;
        }
        goto LABEL_13;
      }
    }
    uint64_t result = __TSKModelPathToDescendant_block_invoke(v5, a1, a2);
    if (result) {
      return result;
    }
  }
LABEL_13:
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  char v10 = objc_msgSend(a1, "childEnumerator", 0);
  uint64_t result = [v10 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v15 = TSKModelPathToDescendant(v14, a2);
        if (v15) {
          return objc_msgSend((id)__TSKModelPathToDescendant_block_invoke(v15, a1, v14), "stringByAppendingPathComponent:", v15);
        }
      }
      uint64_t v11 = [v10 countByEnumeratingWithState:&v16 objects:v24 count:16];
      uint64_t result = 0;
      if (v11) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t __TSKModelPathToDescendant_block_invoke(int a1, void *a2, id a3)
{
  if (!a2 || (objc_opt_respondsToSelector() & 1) == 0) {
    return objc_msgSend(NSString, "stringWithFormat:", @"%s-%p", object_getClassName(a3), a3);
  }

  return [a2 modelPathComponentForChild:a3];
}

void sub_223574F64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22357501C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSKBundle()
{
  if (TSKBundle_onceToken != -1) {
    dispatch_once(&TSKBundle_onceToken, &__block_literal_global_10);
  }
  return TSKBundle_sTSKBundle;
}

uint64_t __TSKBundle_block_invoke()
{
  uint64_t result = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  TSKBundle_sTSKBundle = result;
  return result;
}

void sub_22358188C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235818FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235819F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235882C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22358839C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235884D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235885EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22358874C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_223588B10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_223588FD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x223588F04);
  }
  _Unwind_Resume(a1);
}

void sub_223588FE8(_Unwind_Exception *a1)
{
  objc_end_catch();
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_223589008(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x223589010);
  }
  objc_terminate();
}

void sub_22358B838(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSKPositionSearchReferenceComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  [a2 searchReferencePoint];
  double v6 = v5;
  double v8 = v7;
  [a3 searchReferencePoint];
  if (v6 == v9 && v8 == v10)
  {
    uint64_t v15 = [a2 model];
    if (v15 != [a3 model]) {
      return 0;
    }
    uint64_t result = objc_msgSend((id)objc_msgSend(a2, "selection"), "compare:", objc_msgSend(a3, "selection"));
    if (result) {
      return result;
    }
    uint64_t v16 = [a2 annotation];
    if (v16 == [a3 annotation]) {
      return 0;
    }
    if (![a2 annotation]) {
      return -1;
    }
    if (![a3 annotation]) {
      return 1;
    }
    unsigned int v17 = objc_msgSend((id)objc_msgSend(a2, "annotation"), "annotationType");
    if (v17 < objc_msgSend((id)objc_msgSend(a3, "annotation"), "annotationType")) {
      return -1;
    }
    unsigned int v18 = objc_msgSend((id)objc_msgSend(a2, "annotation"), "annotationType");
    return v18 > objc_msgSend((id)objc_msgSend(a3, "annotation"), "annotationType");
  }
  else
  {
    uint64_t v12 = 1;
    uint64_t v13 = -1;
    if (v6 >= v9) {
      uint64_t v13 = v6 > v9;
    }
    if (v8 <= v10) {
      uint64_t v12 = v13;
    }
    if (v8 >= v10) {
      return v12;
    }
    else {
      return -1;
    }
  }
}

uint64_t TSKSearchReferenceComparison(void *a1, void *a2)
{
  return TSKPositionSearchReferenceComparator_block_invoke((uint64_t)a1, a1, a2);
}

void sub_2235909B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_2235910E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_223591634(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFIndex p_registerProperty(uint64_t a1, const void *a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)sStringToPropertyMap;
  if (!sStringToPropertyMap)
  {
    if (sPropertyToStringMap)
    {
      double v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void p_registerProperty(TSSProperty, NSString *)");
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSProperties.m"), 25, @"Two-way dictionaries not set up correctly.");
    }
    sStringToPropertyMap = (uint64_t)CFDictionaryCreateMutable(0, 4624, MEMORY[0x263EFFF88], 0);
    sPropertyToStringMap = (uint64_t)CFDictionaryCreateMutable(0, 4624, 0, MEMORY[0x263EFFF90]);
    CFDictionaryRef v4 = (const __CFDictionary *)sStringToPropertyMap;
  }
  CFIndex Count = CFDictionaryGetCount(v4);
  CFDictionaryAddValue((CFMutableDictionaryRef)sStringToPropertyMap, a2, (const void *)(int)a1);
  if (CFDictionaryGetCount((CFDictionaryRef)sStringToPropertyMap) != Count + 1)
  {
    double v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void p_registerProperty(TSSProperty, NSString *)");
    [v8 handleFailureInFunction:v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSProperties.m"), 37, @"Likely collision in string to property dictionary around %@ (%d)", a2, a1 file lineNumber description];
  }
  CFIndex v10 = CFDictionaryGetCount((CFDictionaryRef)sPropertyToStringMap);
  CFDictionaryAddValue((CFMutableDictionaryRef)sPropertyToStringMap, (const void *)(int)a1, a2);
  if (CFDictionaryGetCount((CFDictionaryRef)sPropertyToStringMap) != v10 + 1)
  {
    uint64_t v11 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "void p_registerProperty(TSSProperty, NSString *)");
    [v11 handleFailureInFunction:v12, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSProperties.m"), 42, @"Likely collision in property to string dictionary around %@ (%d)", a2, a1 file lineNumber description];
  }
  CFIndex v13 = CFDictionaryGetCount((CFDictionaryRef)sStringToPropertyMap);
  CFIndex result = CFDictionaryGetCount((CFDictionaryRef)sPropertyToStringMap);
  if (v13 != result)
  {
    uint64_t v15 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v16 = objc_msgSend(NSString, "stringWithUTF8String:", "void p_registerProperty(TSSProperty, NSString *)");
    CFIndex result = objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSProperties.m"), 45, @"Two-way string to property id dictionaries are out of sync.");
  }
  int v17 = sMaxPropertyValue;
  if (sMaxPropertyValue <= (int)a1) {
    int v17 = a1;
  }
  sMaxPropertyValue = v17;
  return result;
}

BOOL String(void *key, _DWORD *a2)
{
  if (p_buildStringToPropertyMapsIfNeeded_onceToken != -1) {
    dispatch_once(&p_buildStringToPropertyMapsIfNeeded_onceToken, &__block_literal_global_18);
  }
  value = 0;
  int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)sStringToPropertyMap, key, (const void **)&value);
  if (a2) {
    *a2 = value;
  }
  return ValueIfPresent != 0;
}

uint64_t String(void *a1)
{
  unsigned int v5 = 0;
  if (!String(a1, &v5))
  {
    int8x8_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"TSSProperty TSSPropertyFromString(NSString *)"];
    [v2 handleFailureInFunction:v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSProperties.m"), 91, @"Unknown property key string: %@", a1 file lineNumber description];
  }
  return v5;
}

{
  void *v1;
  void *v2;

  uint64_t v1 = (void *)[a1 componentsSeparatedByString:@"-"];
  if (v1 && (int8x8_t v2 = v1, (unint64_t)[v1 count] >= 3)) {
    return (int)objc_msgSend((id)objc_msgSend(v2, "objectAtIndexedSubscript:", 1), "intValue");
  }
  else {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)[a1 componentsSeparatedByString:@"-"];
  if (!v1) {
    return 0;
  }
  int8x8_t v2 = v1;
  if ((unint64_t)[v1 count] < 3) {
    return 0;
  }

  return [v2 objectAtIndexedSubscript:0];
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)[a1 componentsSeparatedByString:@"-"];
  if (!v1) {
    return 0;
  }
  int8x8_t v2 = v1;
  if ((unint64_t)[v1 count] < 3) {
    return 0;
  }

  return [v2 objectAtIndexedSubscript:2];
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)[a1 componentsSeparatedByString:@"-"];
  if (!v1) {
    return 0;
  }
  int8x8_t v2 = v1;
  if ([v1 count] != 4) {
    return 0;
  }

  return [v2 objectAtIndexedSubscript:3];
}

{
  void *v2;
  void v4[5];
  void v5[5];
  void v6[2];

  v6[1] = *MEMORY[0x263EF8340];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v6[0] = a1;
    a1 = (void *)[MEMORY[0x263EFF8C0] arrayWithObjects:v6 count:1];
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      a1 = 0;
    }
  }
  int8x8_t v2 = (void *)[MEMORY[0x263F089D8] stringWithString:@"$Source Class|Source|Relationship|Target|Target Sheet||Root Sheet|Child Sheet$"];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  id v5[2] = __TSSDebugStyleRelationshipDescription_block_invoke;
  void v5[3] = &unk_2646B0FB0;
  v5[4] = v2;
  if (a1)
  {
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 3221225472;
    _WORD v4[2] = __TSSDebugStyleRelationshipDescription_block_invoke_2;
    uint64_t v4[3] = &unk_2646B1000;
    v4[4] = v5;
    [a1 enumerateObjectsUsingBlock:v4];
  }
  return objc_msgSend(v2, "tsu_stringByExpandingTableFormatting");
}

BOOL String(int a1, void **a2)
{
  if (p_buildStringToPropertyMapsIfNeeded_onceToken != -1) {
    dispatch_once(&p_buildStringToPropertyMapsIfNeeded_onceToken, &__block_literal_global_18);
  }
  value = 0;
  int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)sPropertyToStringMap, (const void *)a1, (const void **)&value);
  if (a2) {
    *a2 = value;
  }
  return ValueIfPresent != 0;
}

void *String(uint64_t a1)
{
  unsigned int v5 = 0;
  if (!String(a1, &v5))
  {
    int8x8_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"NSString *TSSStringFromProperty(TSSProperty)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSProperties.m"), 117, @"Unknown property key integer %u", a1);
  }
  return v5;
}

BOOL String(BOOL result)
{
  if (result) {
    return String(result, 0);
  }
  return result;
}

__CFString *String(unsigned int a1)
{
  if (a1 < 4) {
    return off_2646B0E40[(char)a1];
  }
  int8x8_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"NSString *TSSStringFromValueType(TSSValueType)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSProperties.m"), 171, @"Unexpected entry type.");
  return 0;
}

CFIndex __p_buildStringToPropertyMapsIfNeeded_block_invoke()
{
  p_registerProperty(0, @"invalidProperty");
  p_registerProperty(1, @"testString");
  p_registerProperty(2, @"testDate");
  p_registerProperty(3, @"testObject");
  p_registerProperty(4, @"testObject2");
  p_registerProperty(5, @"testTSPObject");
  p_registerProperty(6, @"testTSPContainedObject");
  p_registerProperty(7, @"testStyle");
  p_registerProperty(8, @"testBool");
  p_registerProperty(9, @"testInteger");
  p_registerProperty(10, @"testInteger2");
  p_registerProperty(11, @"testEnum");
  p_registerProperty(12, @"testFloat");
  p_registerProperty(13, @"testFloat2");
  p_registerProperty(14, @"testDouble");
  p_registerProperty(15, @"testDouble2");
  p_registerProperty(16, @"fontName");
  p_registerProperty(17, @"fontSize");
  p_registerProperty(18, @"fontColor");
  p_registerProperty(19, @"bold");
  p_registerProperty(20, @"italic");
  p_registerProperty(21, @"capitalization");
  p_registerProperty(22, @"underline");
  p_registerProperty(23, @"underlineWidth");
  p_registerProperty(24, @"underlineColor");
  p_registerProperty(25, @"word_underline");
  p_registerProperty(26, @"strikethru");
  p_registerProperty(27, @"strikethruWidth");
  p_registerProperty(28, @"strikethruColor");
  p_registerProperty(29, @"word_strikethrough");
  p_registerProperty(30, @"hidden");
  p_registerProperty(31, @"outline");
  p_registerProperty(32, @"outlineColor");
  p_registerProperty(33, @"baselineShift");
  p_registerProperty(34, @"kerning");
  p_registerProperty(35, @"tracking");
  p_registerProperty(36, @"superscript");
  p_registerProperty(37, @"textBackground");
  p_registerProperty(38, @"dropCapBackground");
  p_registerProperty(39, @"language");
  p_registerProperty(40, @"textShadow");
  p_registerProperty(41, @"ligatures");
  p_registerProperty(42, @"hotKey");
  p_registerProperty(43, @"coreTextFontFeatures");
  p_registerProperty(44, @"writingDirection");
  p_registerProperty(45, @"emphasisMarks");
  p_registerProperty(46, @"compatibilityFont");
  p_registerProperty(47, @"role");
  p_registerProperty(48, @"allowNativeSmallCaps");
  p_registerProperty(49, @"outlineFilled");
  p_registerProperty(50, @"weight");
  p_registerProperty(51, @"lineBalancing");
  p_registerProperty(52, @"fontSizeDelta");
  p_registerProperty(53, @"coreTextFontAttributes");
  p_registerProperty(54, @"fontDesignTrait");
  p_registerProperty(55, @"fontFamily");
  p_registerProperty(56, @"monospacedDigits");
  p_registerProperty(80, @"firstLineIndent");
  p_registerProperty(81, @"leftIndent");
  p_registerProperty(82, @"rightIndent");
  p_registerProperty(83, @"defaultTabStops");
  p_registerProperty(84, @"tabs");
  p_registerProperty(85, @"lineSpacing");
  p_registerProperty(86, @"alignment");
  p_registerProperty(87, @"spaceBefore");
  p_registerProperty(88, @"spaceAfter");
  p_registerProperty(89, @"keepLinesTogether");
  p_registerProperty(90, @"keepWithNext");
  p_registerProperty(91, @"pageBreakBefore");
  p_registerProperty(92, @"widowControl");
  p_registerProperty(93, @"hyphenate");
  p_registerProperty(94, @"hyphenationMinimumWordLength");
  p_registerProperty(95, @"hyphenationMinimumCharactersBefore");
  p_registerProperty(96, @"hyphenationMinimumCharactersAfter");
  p_registerProperty(97, @"hyphenationZone");
  p_registerProperty(98, @"paragraphFill");
  p_registerProperty(99, @"followingParagraphStyle");
  p_registerProperty(100, @"firstTopicNumber");
  p_registerProperty(101, @"decimalTab");
  p_registerProperty(102, @"paragraphBorderType");
  p_registerProperty(103, @"paragraphStroke");
  p_registerProperty(104, @"paragraphRuleWidth");
  p_registerProperty(105, @"paragraphRuleOffset");
  p_registerProperty(106, @"outlineLevel");
  p_registerProperty(107, @"outlineStyleType");
  p_registerProperty(108, @"listStyle");
  p_registerProperty(109, @"dropCap");
  p_registerProperty(110, @"hangingPunctuation");
  p_registerProperty(111, @"lineStyling");
  p_registerProperty(112, @"followingParagraphStyleIdentifier");
  p_registerProperty(113, @"showInTOC");
  p_registerProperty(114, @"tocStyle");
  p_registerProperty(136, @"TSWPTOCShowPageNumber");
  p_registerProperty(137, @"TSWPTOCPageNumberStyle");
  p_registerProperty(144, @"layoutParagraphStyle");
  p_registerProperty(145, @"layoutMargins");
  p_registerProperty(146, @"padding");
  p_registerProperty(147, @"minimumHorizontalInset");
  p_registerProperty(148, @"columns");
  p_registerProperty(149, @"verticalAlignment");
  p_registerProperty(150, @"followingLayoutStyle");
  p_registerProperty(151, @"layoutContinuous");
  p_registerProperty(152, @"shrinkTextToFit");
  p_registerProperty(153, @"verticalText");
  p_registerProperty(154, @"truncateLastLine");
  p_registerProperty(155, @"maxLineCount");
  p_registerProperty(176, @"listTextIndents");
  p_registerProperty(177, @"listLabelIndents");
  p_registerProperty(178, @"listClassicTextIndents");
  p_registerProperty(179, @"listClassicFontSize");
  p_registerProperty(180, @"listLabelType");
  p_registerProperty(181, @"listLabelGeometries");
  p_registerProperty(182, @"listLabelImages");
  p_registerProperty(183, @"listLabelStrings");
  p_registerProperty(184, @"listLabelNumbers");
  p_registerProperty(185, @"listLabelTieredNumbers");
  p_registerProperty(186, @"listClassicGeometries");
  p_registerProperty(187, @"labelCharacterStyle1");
  p_registerProperty(188, @"labelCharacterStyle2");
  p_registerProperty(189, @"labelCharacterStyle3");
  p_registerProperty(190, @"labelCharacterStyle4");
  p_registerProperty(191, @"labelCharacterStyle5");
  p_registerProperty(192, @"labelCharacterStyle6");
  p_registerProperty(193, @"labelCharacterStyle7");
  p_registerProperty(194, @"labelCharacterStyle8");
  p_registerProperty(195, @"labelCharacterStyle9");
  p_registerProperty(196, @"textPosition");
  p_registerProperty(197, @"labelPosition");
  p_registerProperty(198, @"scale");
  p_registerProperty(199, @"baselineOffset");
  p_registerProperty(200, @"scaleWithText");
  p_registerProperty(201, @"labelAlignment");
  p_registerProperty(202, @"labelType");
  p_registerProperty(203, @"bulletImage");
  p_registerProperty(204, @"textLabel");
  p_registerProperty(205, @"listLevelCharacterStyle");
  p_registerProperty(206, @"listLevelFontSize");
  p_registerProperty(207, @"listLevelLabelColor");
  p_registerProperty(208, @"listLevelBodyFontSize");
  p_registerProperty(209, @"listLevelBodyFont");
  p_registerProperty(210, @"listLevelFontName");
  p_registerProperty(211, @"defaultTextStylePresetIndex");
  p_registerProperty(212, @"defaultParagraphStyle");
  p_registerProperty(512, @"geometry");
  p_registerProperty(513, @"geometryPosition");
  p_registerProperty(514, @"children");
  p_registerProperty(515, @"style");
  p_registerProperty(516, @"fill");
  p_registerProperty(517, @"stroke");
  p_registerProperty(518, @"opacity");
  p_registerProperty(519, @"reflection");
  p_registerProperty(520, @"shadow");
  p_registerProperty(521, @"externalTextWrap");
  p_registerProperty(522, @"headLineEnd");
  p_registerProperty(523, @"tailLineEnd");
  p_registerProperty(524, @"hyperlinkURL");
  p_registerProperty(525, @"aspectRatioLocked");
  p_registerProperty(526, @"pathSource");
  p_registerProperty(527, @"mediaFlags");
  p_registerProperty(528, @"media");
  p_registerProperty(529, @"mask");
  p_registerProperty(530, @"instantAlpha");
  p_registerProperty(531, @"imageAdjustments");
  p_registerProperty(532, @"movieMedia");
  p_registerProperty(533, @"posterImageData");
  p_registerProperty(534, @"startTime");
  p_registerProperty(535, @"endTime");
  p_registerProperty(536, @"posterTime");
  p_registerProperty(537, @"loopOption");
  p_registerProperty(538, @"volume");
  p_registerProperty(539, @"connectedTo");
  p_registerProperty(540, @"connectedFrom");
  p_registerProperty(768, @"TSTAutoResize");
  p_registerProperty(769, @"TSTBandedRows");
  p_registerProperty(770, @"TSTBandedCellFill");
  p_registerProperty(771, @"TSTBodyCellsHorizontalBorderStroke");
  p_registerProperty(772, @"TSTBodyCellsVerticalBorderStroke");
  p_registerProperty(773, @"TSTBodyCellsHorizontalStroke");
  p_registerProperty(774, @"TSTBodyCellsVerticalStroke");
  p_registerProperty(775, @"TSTHeaderColumnSeparatorStroke");
  p_registerProperty(776, @"TSTHeaderColumnHorizontalStroke");
  p_registerProperty(777, @"TSTHeaderColumnVerticalStroke");
  p_registerProperty(778, @"TSTHeaderColumnBorderStroke");
  p_registerProperty(779, @"TSTHeaderRowSeparatorStroke");
  p_registerProperty(780, @"TSTHeaderRowVerticalStroke");
  p_registerProperty(781, @"TSTHeaderRowHorizontalStroke");
  p_registerProperty(782, @"TSTHeaderRowBorderStroke");
  p_registerProperty(783, @"TSTFooterRowSeparatorStroke");
  p_registerProperty(784, @"TSTFooterRowVerticalStroke");
  p_registerProperty(785, @"TSTFooterRowHorizontalStroke");
  p_registerProperty(786, @"TSTFooterRowBorderStroke");
  p_registerProperty(787, @"TSTTableStrokePresetList");
  p_registerProperty(788, @"TSTTableVerticalStrokesVisible");
  p_registerProperty(789, @"TSTTableHorizontalStrokesVisible");
  p_registerProperty(790, @"TSTTableHeaderRowSepVisible");
  p_registerProperty(791, @"TSTTableHeaderRowVerticalsVisible");
  p_registerProperty(792, @"TSTTableHeaderColSepVisible");
  p_registerProperty(793, @"TSTTableHeaderColHorizontalsVisible");
  p_registerProperty(794, @"TSTTableFooterSepVisible");
  p_registerProperty(795, @"TSTTableFooterVerticalsVisible");
  p_registerProperty(796, @"TSTTableBorderStrokesVisible");
  p_registerProperty(797, @"TSTTableMasterFontFamily");
  p_registerProperty(798, @"TSTTableWritingDirection");
  p_registerProperty(799, @"TSTTableBehavesLikeSpreadsheet");
  p_registerProperty(800, @"TSTTableDefaultGeometry");
  p_registerProperty(801, @"TSTTableDefaultInlineGeometry");
  p_registerProperty(802, @"TSTTableDefaultRowCount");
  p_registerProperty(803, @"TSTTableDefaultColumnCount");
  p_registerProperty(804, @"TSTTableDefaultHeaderRowCount");
  p_registerProperty(805, @"TSTTableDefaultHeaderColumnCount");
  p_registerProperty(806, @"TSTTableDefaultFooterRowCount");
  p_registerProperty(896, @"TSTCellTextWrap");
  p_registerProperty(897, @"TSTCellType");
  p_registerProperty(898, @"TSTCellFill");
  p_registerProperty(899, @"TSTCellTopStroke");
  p_registerProperty(900, @"TSTCellBottomStroke");
  p_registerProperty(901, @"TSTCellLeftStroke");
  p_registerProperty(902, @"TSTCellRightStroke");
  p_registerProperty(903, @"TSTCellVerticalAlignment");
  p_registerProperty(904, @"TSTCellPadding");
  p_registerProperty(1024, @"TSCHChartInfoBorderOpacityProperty");
  p_registerProperty(1025, @"TSCHChartSeriesTrendlineEquationParagraphStyleIndexProperty");
  p_registerProperty(1026, @"TSCHChartSeriesLabelParagraphStyleIndexProperty");
  p_registerProperty(1027, @"TSCHChartInfoCombineLayersProperty");
  p_registerProperty(1028, @"TSCHChartAxisMajorGridlineOpacityProperty");
  p_registerProperty(1029, @"TSCHChartSeriesShowSymbolProperty");
  p_registerProperty(1030, @"TSCHChartInfoShowLegendProperty");
  p_registerProperty(1031, @"TSCHChartSeriesErrorBarSettingProperty");
  p_registerProperty(1032, @"TSCHChartAxisShowLabelsProperty");
  p_registerProperty(1033, @"TSCHChartInfoInterBarGapProperty");
  p_registerProperty(1034, @"TSCHChartSeriesErrorBarLineEndProperty");
  p_registerProperty(1035, @"TSCHChartSeriesErrorBarCustomNegativeDataProperty");
  p_registerProperty(1036, @"TSCHChartAxisShowSeriesLabelsProperty");
  p_registerProperty(1037, @"TSCHChartAxis3DLabelPositionProperty");
  p_registerProperty(1038, @"TSCHChartAxisNumberFormatProperty");
  p_registerProperty(1039, @"TSCHChartSeriesTrendLineShowR2ValueProperty");
  p_registerProperty(1040, @"TSCHChartInfoTitleColorProperty");
  p_registerProperty(1041, @"TSCHLegendModelShadowProperty");
  p_registerProperty(1042, @"TSCHChartSeriesTrendlineEquationOpacityProperty");
  p_registerProperty(1043, @"TSCHChartAxisNumberOfMinorGridlinesProperty");
  p_registerProperty(1044, @"TSCHChartSeriesShowSeriesLabelsProperty");
  p_registerProperty(1045, @"TSCHChartAxisMajorGridlineShadowProperty");
  p_registerProperty(1046, @"TSCHChartSeriesTrendLineShowEquationProperty");
  p_registerProperty(1047, @"TSCHChartAxisShowMinorTickmarksProperty");
  p_registerProperty(1048, @"TSCHChartAxisPlotToEdgesProperty");
  p_registerProperty(1049, @"TSCHChartSeriesNumberFormatProperty");
  p_registerProperty(1050, @"TSCHChartSeriesStrokeProperty");
  p_registerProperty(1051, @"TSCHChartSeriesErrorBarCustomPositiveDataScatterXProperty");
  p_registerProperty(1052, @"TSCHChartAxisHorizontalSpacingProperty");
  p_registerProperty(1053, @"TSCHChartAxisTitleProperty");
  p_registerProperty(1054, @"TSCHChartInfoDEPRECATEDTrendlineRSquaredParagraphStyleIndexProperty");
  p_registerProperty(1055, @"TSCHChartAxisUserMaxProperty");
  p_registerProperty(1056, @"TSCHChartSeriesTrendLineShadowProperty");
  p_registerProperty(1057, @"TSCHChartInfoDataSetNameParagraphStyleIndexProperty");
  p_registerProperty(1058, @"TSCHChartInfoMultiDataControlTypeProperty");
  p_registerProperty(1059, @"TSCHChartInfoDEPRECATEDMasterFontFamilyProperty");
  p_registerProperty(1060, @"TSCHChartInfoSkipHiddenDataProperty");
  p_registerProperty(1061, @"TSCHChartAxisTickmarkLocationProperty");
  p_registerProperty(1062, @"TSCHChartSeriesYAxisOrdinalProperty");
  p_registerProperty(1063, @"TSCHChartSeriesSymbolFillUseSeriesFillProperty");
  p_registerProperty(1064, @"TSCHChartSeriesPercentNumberFormatProperty");
  p_registerProperty(1065, @"TSCHChartSeriesErrorBarPercentValueProperty");
  p_registerProperty(1066, @"TSCHChartAxis3DGridlineOpacityProperty");
  p_registerProperty(1067, @"TSCHChartInfo3DScaleProperty");
  p_registerProperty(1068, @"TSCHChartInfo3DInterSetDepthGapProperty");
  p_registerProperty(1069, @"TSCHChartSeriesTrendLinePeriodProperty");
  p_registerProperty(1070, @"TSCHChartInfo3DLightingPackageProperty");
  p_registerProperty(1071, @"TSCHChartSeriesValueLabelPositionProperty");
  p_registerProperty(1072, @"TSCHChartSeriesErrorBarCustomNegativeDataScatterXProperty");
  p_registerProperty(1073, @"TSCHChartInfoDEPRECATEDMasterFontNamedSizeProperty");
  p_registerProperty(1074, @"TSCHChartSeriesSymbolTypeProperty");
  p_registerProperty(1075, @"TSCHChartSeriesSizeDimensionProperty");
  p_registerProperty(1076, @"TSCHChartSeriesWedgeExplosionProperty");
  p_registerProperty(1077, @"TSCHChartInfoBackgroundStrokeProperty");
  p_registerProperty(1078, @"TSCHLegendModelLabelParagraphStyleIndexProperty");
  p_registerProperty(1079, @"TSCHChartSeriesTrendLineTypeProperty");
  p_registerProperty(1080, @"TSCHChartSeriesShowErrorBarScatterXProperty");
  p_registerProperty(1081, @"TSCHChartSeriesTrendLineRSquaredOffsetYProperty");
  p_registerProperty(1082, @"TSCHChartInfoDEPRECATEDTrendlineEquationParagraphStyleIndexProperty");
  p_registerProperty(1083, @"TSCHChartAxisNumberFormatTypeProperty");
  p_registerProperty(1084, @"TSCHChartInfoDEPRECATED3DLightingPackageProperty");
  p_registerProperty(1085, @"TSCHChartSeriesTrendlineRSquaredParagraphStyleIndexProperty");
  p_registerProperty(1086, @"TSCHChartSeriesShowTrendLineProperty");
  p_registerProperty(1087, @"TSCHChartAxisShowMajorGridlinesProperty");
  p_registerProperty(1088, @"TSCHChartInfo3DBarShapeProperty");
  p_registerProperty(1089, @"TSCHChartSeriesTrendLineShowLabelProperty");
  p_registerProperty(1090, @"TSCHChartAxisUserMinProperty");
  p_registerProperty(1091, @"TSCHChartSeriesErrorBarPercentValueScatterXProperty");
  p_registerProperty(1092, @"TSCHChartAxisShowMinimumLabelProperty");
  p_registerProperty(1093, @"TSCHChartInfoDEPRECATEDAGAINMasterFontNamedSizeProperty");
  p_registerProperty(1094, @"TSCHChartInfoDEPRECATEDTrendlineEquationShadowProperty");
  p_registerProperty(1095, @"TSCHChartSeriesDEPRECATED3DFillProperty");
  p_registerProperty(1096, @"TSCHChartSeriesTrendlineRSquaredOpacityProperty");
  p_registerProperty(1097, @"TSCHChartInfoDEPRECATED3DShadowProperty");
  p_registerProperty(1098, @"TSCHChartSeriesSymbolFillProperty");
  p_registerProperty(1099, @"TSCHChartInfoDEPRECATEDTrendlineEquationOpacityProperty");
  p_registerProperty(1100, @"TSCHChartInfoTitleProperty");
  p_registerProperty(1101, @"TSCHChartInfoTitleParagraphStyleIndexProperty");
  p_registerProperty(1102, @"TSCHChartSeriesFillProperty");
  p_registerProperty(1103, @"TSCHChartAxisNumberOfMajorGridlinesProperty");
  p_registerProperty(1104, @"TSCHChartInfo3DRotationProperty");
  p_registerProperty(1105, @"TSCHChartInfoBorderStrokeProperty");
  p_registerProperty(1106, @"TSCHChartAxisScaleProperty");
  p_registerProperty(1107, @"TSCHChartSeriesErrorBarTypeProperty");
  p_registerProperty(1108, @"TSCHChartSeriesLineTypeProperty");
  p_registerProperty(1109, @"TSCHChartSeriesShadowProperty");
  p_registerProperty(1110, @"TSCHChartInfoDEPRECATED3DBarShapeProperty");
  p_registerProperty(1111, @"TSCHChartSeriesErrorBarFixedValueProperty");
  p_registerProperty(1112, @"TSCHChartInfo3DChartOpacityProperty");
  p_registerProperty(1113, @"TSCHChartSeriesShowErrorBarProperty");
  p_registerProperty(1114, @"TSCHChartSeriesLabelExplosionProperty");
  p_registerProperty(1115, @"TSCHChartSeriesShowNegativeDataProperty");
  p_registerProperty(1116, @"TSCHChartAxisLabelParagraphStyleIndexProperty");
  p_registerProperty(1117, @"TSCHChartAxisMajorGridlineStrokeProperty");
  p_registerProperty(1118, @"TSCHChartInfoBackgroundFillProperty");
  p_registerProperty(1119, @"TSCHChartInfoBorderShadowProperty");
  p_registerProperty(1120, @"TSCHChartInfo3DBevelEdgesProperty");
  p_registerProperty(1121, @"TSCHChartInfoShowBorderProperty");
  p_registerProperty(1122, @"TSCHChartSeriesErrorBarShadowProperty");
  p_registerProperty(1123, @"TSCHLegendModelStrokeProperty");
  p_registerProperty(1124, @"TSCHChartSeriesOpacityProperty");
  p_registerProperty(1125, @"TSCHChartSeriesTrendLineOrderProperty");
  p_registerProperty(1126, @"TSCHChartSeriesTrendLineStrokeProperty");
  p_registerProperty(1127, @"TSCHChartAxis3DGridlineStrokeProperty");
  p_registerProperty(1128, @"TSCHChartAxisShowTitleProperty");
  p_registerProperty(1129, @"TSCHChartInfoShowTitleProperty");
  p_registerProperty(1130, @"TSCHChartSeriesValueLabelsAxisProperty");
  p_registerProperty(1131, @"TSCHChartAxisLabelsOrientationProperty");
  p_registerProperty(1132, @"TSCHChartAxisMinorGridlineShadowProperty");
  p_registerProperty(1133, @"TSCHChartAxisMinorGridlineStrokeProperty");
  p_registerProperty(1134, @"TSCHChartAxisShowMinorGridlinesProperty");
  p_registerProperty(1135, @"TSCHChartInfoPieStartAngleProperty");
  p_registerProperty(1136, @"TSCHChartAxisShowLastLabelProperty");
  p_registerProperty(1137, @"TSCHChartSeriesNumberFormatTypeProperty");
  p_registerProperty(1138, @"TSCHChartSeriesTrendLineLabelStringProperty");
  p_registerProperty(1139, @"TSCHChartSeriesErrorBarTypeScatterXProperty");
  p_registerProperty(1140, @"TSCHChartSeriesShowLineProperty");
  p_registerProperty(1141, @"TSCHChartSeriesErrorBarSettingScatterXProperty");
  p_registerProperty(1142, @"TSCHChartSeriesErrorBarStrokeScatterXProperty");
  p_registerProperty(1143, @"TSCHChartSeriesShowValueLabelsProperty");
  p_registerProperty(1144, @"TSCHChartAxisShowAxisProperty");
  p_registerProperty(1145, @"TSCHChartInfoDEPRECATEDTrendlineRSquaredOpacityProperty");
  p_registerProperty(1146, @"TSCHChartInfoDataSetNameLocationProperty");
  p_registerProperty(1147, @"TSCHChartSeriesTrendLineEquationOffsetYProperty");
  p_registerProperty(1148, @"TSCHChartSeriesSymbolSizeProperty");
  p_registerProperty(1149, @"TSCHChartAxisShowMajorTickmarksProperty");
  p_registerProperty(1150, @"TSCHChartSeriesErrorBarLineEndScatterXProperty");
  p_registerProperty(1151, @"TSCHChartSeriesSymbolFillUseSeriesStrokeProperty");
  p_registerProperty(1152, @"TSCHChartSeriesOutsideLabelParagraphStyleIndexProperty");
  p_registerProperty(1153, @"TSCHChartAxisMinorGridlineOpacityProperty");
  p_registerProperty(1154, @"TSCHChartSeriesTrendLineRSquaredOffsetXProperty");
  p_registerProperty(1155, @"TSCHChartInfoDEPRECATED3DBevelEdgesProperty");
  p_registerProperty(1156, @"TSCHChartSeriesAdjustmentScaleProperty");
  p_registerProperty(1157, @"TSCHChartInfo3DViewportProperty");
  p_registerProperty(1158, @"TSCHChartSeriesTrendLineEquationOffsetXProperty");
  p_registerProperty(1159, @"TSCHChartInfoGridBackgroundOpacityProperty");
  p_registerProperty(1160, @"TSCHChartInfoInterSetGapProperty");
  p_registerProperty(1161, @"TSCHChartSeriesSeriesTypeProperty");
  p_registerProperty(1162, @"TSCHChartSeriesDEPRECATEDSeriesLabelsOnProperty");
  p_registerProperty(1163, @"TSCHChartSeriesErrorBarFixedValueScatterXProperty");
  p_registerProperty(1164, @"TSCHChartSeriesErrorBarStrokeProperty");
  p_registerProperty(1165, @"TSCHChartInfoDEPRECATEDTrendlineRSquaredShadowProperty");
  p_registerProperty(1166, @"TSCHLegendModelOpacityProperty");
  p_registerProperty(1167, @"TSCHChartSeriesErrorBarStdDevValueProperty");
  p_registerProperty(1168, @"TSCHChartInfoGridBackgroundFillProperty");
  p_registerProperty(1169, @"TSCHChartSeriesErrorBarCustomPositiveDataProperty");
  p_registerProperty(1170, @"TSCHChartSeriesErrorBarStdDevValueScatterXProperty");
  p_registerProperty(1171, @"TSCHLegendModelFillProperty");
  p_registerProperty(1172, @"TSCHChartSeriesSymbolStrokeProperty");
  p_registerProperty(1173, @"TSCHChartAxisTitleParagraphStyleIndexProperty");
  p_registerProperty(1174, @"TSCHChartAxisVerticalSpacingProperty");
  p_registerProperty(1175, @"TSCHChartAxisNumberOfDecadesProperty");
  p_registerProperty(1176, @"TSCHChartInfoAreaDEPRECATED3DLightingPackageProperty");
  p_registerProperty(1177, @"TSCHChartInfoBarDEPRECATED3DLightingPackageProperty");
  p_registerProperty(1178, @"TSCHChartInfoColumnDEPRECATED3DLightingPackageProperty");
  p_registerProperty(1179, @"TSCHChartInfoDefaultDEPRECATED3DLightingPackageProperty");
  p_registerProperty(1180, @"TSCHChartInfoLineDEPRECATED3DLightingPackageProperty");
  p_registerProperty(1181, @"TSCHChartInfoPieDEPRECATED3DLightingPackageProperty");
  p_registerProperty(1182, @"TSCHChartInfoDefaultDEPRECATEDAGAINMasterFontNamedSizeProperty");
  p_registerProperty(1183, @"TSCHChartInfoDefaultDEPRECATED3DBarShapeProperty");
  p_registerProperty(1184, @"TSCHChartInfoBarDEPRECATED3DBevelEdgesProperty");
  p_registerProperty(1185, @"TSCHChartInfoColumnDEPRECATED3DBevelEdgesProperty");
  p_registerProperty(1186, @"TSCHChartInfoDefaultDEPRECATED3DBevelEdgesProperty");
  p_registerProperty(1187, @"TSCHChartInfoPieDEPRECATED3DBevelEdgesProperty");
  p_registerProperty(1188, @"TSCHChartInfoAreaDEPRECATED3DShadowProperty");
  p_registerProperty(1189, @"TSCHChartInfoBarDEPRECATED3DShadowProperty");
  p_registerProperty(1190, @"TSCHChartInfoColumnDEPRECATED3DShadowProperty");
  p_registerProperty(1191, @"TSCHChartInfoLineDEPRECATED3DShadowProperty");
  p_registerProperty(1192, @"TSCHChartInfoPieDEPRECATED3DShadowProperty");
  p_registerProperty(1193, @"TSCHChartInfoDefaultDEPRECATEDMasterFontFamilyProperty");
  p_registerProperty(1194, @"TSCHChartInfoDefaultDEPRECATEDMasterFontNamedSizeProperty");
  p_registerProperty(1195, @"TSCHChartInfoDefaultDEPRECATEDTrendlineEquationOpacityProperty");
  p_registerProperty(1196, @"TSCHChartInfoDefaultDEPRECATEDTrendlineEquationParagraphStyleIndexProperty");
  p_registerProperty(1197, @"TSCHChartInfoDefaultDEPRECATEDTrendlineEquationShadowProperty");
  p_registerProperty(1198, @"TSCHChartInfoDefaultDEPRECATEDTrendlineRSquaredOpacityProperty");
  p_registerProperty(1199, @"TSCHChartInfoDefaultDEPRECATEDTrendlineRSquaredParagraphStyleIndexProperty");
  p_registerProperty(1200, @"TSCHChartInfoDefaultDEPRECATEDTrendlineRSquaredShadowProperty");
  p_registerProperty(1201, @"TSCHChartSeriesAreaDEPRECATED3DFillProperty");
  p_registerProperty(1202, @"TSCHChartSeriesBarDEPRECATED3DFillProperty");
  p_registerProperty(1203, @"TSCHChartSeriesColumnDEPRECATED3DFillProperty");
  p_registerProperty(1204, @"TSCHChartSeriesDefaultDEPRECATED3DFillProperty");
  p_registerProperty(1205, @"TSCHChartSeriesLineDEPRECATED3DFillProperty");
  p_registerProperty(1206, @"TSCHChartSeriesPieDEPRECATED3DFillProperty");
  p_registerProperty(1207, @"TSCHChartSeriesPieDEPRECATEDSeriesLabelsOnProperty");
  p_registerProperty(1208, @"TSCHChartAxisDefault3DLabelPositionProperty");
  p_registerProperty(1209, @"TSCHChartAxisDefaultNumberFormatProperty");
  p_registerProperty(1210, @"TSCHChartAxisDefaultNumberFormatTypeProperty");
  p_registerProperty(1211, @"TSCHChartAxisValueNumberOfDecadesProperty");
  p_registerProperty(1212, @"TSCHChartAxisValueNumberOfMajorGridlinesProperty");
  p_registerProperty(1213, @"TSCHChartAxisValueNumberOfMinorGridlinesProperty");
  p_registerProperty(1214, @"TSCHChartAxisCategoryPlotToEdgesProperty");
  p_registerProperty(1215, @"TSCHChartAxisValueScaleProperty");
  p_registerProperty(1216, @"TSCHChartAxisCategoryShowLabelsProperty");
  p_registerProperty(1217, @"TSCHChartAxisDefaultShowLabelsProperty");
  p_registerProperty(1218, @"TSCHChartAxisValueShowLabelsProperty");
  p_registerProperty(1219, @"TSCHChartAxisCategoryShowSeriesLabelsProperty");
  p_registerProperty(1220, @"TSCHChartAxisMultiDataShowSeriesLabelsProperty");
  p_registerProperty(1221, @"TSCHChartAxisCategoryShowTitleProperty");
  p_registerProperty(1222, @"TSCHChartAxisValueShowTitleProperty");
  p_registerProperty(1223, @"TSCHChartAxisCategoryTitleProperty");
  p_registerProperty(1224, @"TSCHChartAxisValueTitleProperty");
  p_registerProperty(1225, @"TSCHChartAxisDefaultUserMaxProperty");
  p_registerProperty(1226, @"TSCHChartAxisDefaultUserMinProperty");
  p_registerProperty(1227, @"TSCHChartAxisCategory3DGridlineOpacityProperty");
  p_registerProperty(1228, @"TSCHChartAxisValue3DGridlineOpacityProperty");
  p_registerProperty(1229, @"TSCHChartAxisCategory3DGridlineStrokeProperty");
  p_registerProperty(1230, @"TSCHChartAxisValue3DGridlineStrokeProperty");
  p_registerProperty(1231, @"TSCHChartAxisCategoryHorizontalSpacingProperty");
  p_registerProperty(1232, @"TSCHChartAxisCategoryLabelParagraphStyleIndexProperty");
  p_registerProperty(1233, @"TSCHChartAxisDefaultLabelParagraphStyleIndexProperty");
  p_registerProperty(1234, @"TSCHChartAxisValueLabelParagraphStyleIndexProperty");
  p_registerProperty(1235, @"TSCHChartAxisCategoryLabelsOrientationProperty");
  p_registerProperty(1236, @"TSCHChartAxisDefaultLabelsOrientationProperty");
  p_registerProperty(1237, @"TSCHChartAxisValueLabelsOrientationProperty");
  p_registerProperty(1238, @"TSCHChartAxisCategoryMajorGridlineOpacityProperty");
  p_registerProperty(1239, @"TSCHChartAxisValueMajorGridlineOpacityProperty");
  p_registerProperty(1240, @"TSCHChartAxisCategoryMajorGridlineShadowProperty");
  p_registerProperty(1241, @"TSCHChartAxisValueMajorGridlineShadowProperty");
  p_registerProperty(1242, @"TSCHChartAxisCategoryMajorGridlineStrokeProperty");
  p_registerProperty(1243, @"TSCHChartAxisValueMajorGridlineStrokeProperty");
  p_registerProperty(1244, @"TSCHChartAxisCategoryMinorGridlineOpacityProperty");
  p_registerProperty(1245, @"TSCHChartAxisValueMinorGridlineOpacityProperty");
  p_registerProperty(1246, @"TSCHChartAxisCategoryMinorGridlineShadowProperty");
  p_registerProperty(1247, @"TSCHChartAxisValueMinorGridlineShadowProperty");
  p_registerProperty(1248, @"TSCHChartAxisCategoryMinorGridlineStrokeProperty");
  p_registerProperty(1249, @"TSCHChartAxisValueMinorGridlineStrokeProperty");
  p_registerProperty(1250, @"TSCHChartAxisCategoryShowAxisProperty");
  p_registerProperty(1251, @"TSCHChartAxisValueShowAxisProperty");
  p_registerProperty(1252, @"TSCHChartAxisCategoryShowLastLabelProperty");
  p_registerProperty(1253, @"TSCHChartAxisCategoryShowMajorGridlinesProperty");
  p_registerProperty(1254, @"TSCHChartAxisValueShowMajorGridlinesProperty");
  p_registerProperty(1255, @"TSCHChartAxisCategoryShowMajorTickmarksProperty");
  p_registerProperty(1256, @"TSCHChartAxisValueShowMajorTickmarksProperty");
  p_registerProperty(1257, @"TSCHChartAxisValueShowMinimumLabelProperty");
  p_registerProperty(1258, @"TSCHChartAxisCategoryShowMinorGridlinesProperty");
  p_registerProperty(1259, @"TSCHChartAxisValueShowMinorGridlinesProperty");
  p_registerProperty(1260, @"TSCHChartAxisCategoryShowMinorTickmarksProperty");
  p_registerProperty(1261, @"TSCHChartAxisValueShowMinorTickmarksProperty");
  p_registerProperty(1262, @"TSCHChartAxisCategoryTickmarkLocationProperty");
  p_registerProperty(1263, @"TSCHChartAxisValueTickmarkLocationProperty");
  p_registerProperty(1264, @"TSCHChartAxisCategoryTitleParagraphStyleIndexProperty");
  p_registerProperty(1265, @"TSCHChartAxisDefaultTitleParagraphStyleIndexProperty");
  p_registerProperty(1266, @"TSCHChartAxisValueTitleParagraphStyleIndexProperty");
  p_registerProperty(1267, @"TSCHChartAxisCategoryVerticalSpacingProperty");
  p_registerProperty(1268, @"TSCHChartInfoDefault3DBarShapeProperty");
  p_registerProperty(1269, @"TSCHChartInfoDefault3DBevelEdgesProperty");
  p_registerProperty(1270, @"TSCHChartInfoDefault3DInterSetDepthGapProperty");
  p_registerProperty(1271, @"TSCHChartInfoDefault3DRotationProperty");
  p_registerProperty(1272, @"TSCHChartInfoArea3DScaleProperty");
  p_registerProperty(1273, @"TSCHChartInfoBar3DScaleProperty");
  p_registerProperty(1274, @"TSCHChartInfoColumn3DScaleProperty");
  p_registerProperty(1275, @"TSCHChartInfoDefault3DScaleProperty");
  p_registerProperty(1276, @"TSCHChartInfoLine3DScaleProperty");
  p_registerProperty(1277, @"TSCHChartInfoPie3DScaleProperty");
  p_registerProperty(1278, @"TSCHChartInfoDefault3DViewportProperty");
  p_registerProperty(1279, @"TSCHChartInfoDefaultPieStartAngleProperty");
  p_registerProperty(1280, @"TSCHChartInfoDefaultShowLegendProperty");
  p_registerProperty(1281, @"TSCHChartInfoDefaultShowTitleProperty");
  p_registerProperty(1282, @"TSCHChartInfoDefaultSkipHiddenDataProperty");
  p_registerProperty(1283, @"TSCHChartInfoDefaultTitleProperty");
  p_registerProperty(1284, @"TSCHChartInfoDefaultDataSetNameLocationProperty");
  p_registerProperty(1285, @"TSCHChartInfoDefaultMultiDataControlTypeProperty");
  p_registerProperty(1286, @"TSCHChartInfoDefault3DChartOpacityProperty");
  p_registerProperty(1287, @"TSCHChartInfoArea3DLightingPackageProperty");
  p_registerProperty(1288, @"TSCHChartInfoBar3DLightingPackageProperty");
  p_registerProperty(1289, @"TSCHChartInfoColumn3DLightingPackageProperty");
  p_registerProperty(1290, @"TSCHChartInfoDefault3DLightingPackageProperty");
  p_registerProperty(1291, @"TSCHChartInfoLine3DLightingPackageProperty");
  p_registerProperty(1292, @"TSCHChartInfoPie3DLightingPackageProperty");
  p_registerProperty(1293, @"TSCHChartInfoDefaultBackgroundFillProperty");
  p_registerProperty(1294, @"TSCHChartInfoDefaultBackgroundStrokeProperty");
  p_registerProperty(1295, @"TSCHChartInfoDefaultBorderOpacityProperty");
  p_registerProperty(1296, @"TSCHChartInfoDefaultBorderShadowProperty");
  p_registerProperty(1297, @"TSCHChartInfoDefaultBorderStrokeProperty");
  p_registerProperty(1298, @"TSCHChartInfoDefaultCombineLayersProperty");
  p_registerProperty(1299, @"TSCHChartInfoDefaultGridBackgroundFillProperty");
  p_registerProperty(1300, @"TSCHChartInfoDefaultGridBackgroundOpacityProperty");
  p_registerProperty(1301, @"TSCHChartInfoDefaultInterBarGapProperty");
  p_registerProperty(1302, @"TSCHChartInfoDefaultInterSetGapProperty");
  p_registerProperty(1303, @"TSCHChartInfoDefaultShowBorderProperty");
  p_registerProperty(1304, @"TSCHChartInfoDefaultTitleColorProperty");
  p_registerProperty(1305, @"TSCHChartInfoDefaultTitleParagraphStyleIndexProperty");
  p_registerProperty(1306, @"TSCHChartInfoDefaultDataSetNameParagraphStyleIndexProperty");
  p_registerProperty(1307, @"TSCHChartSeriesBubbleAdjustmentScaleProperty");
  p_registerProperty(1308, @"TSCHChartSeriesDefaultErrorBarCustomNegativeDataProperty");
  p_registerProperty(1309, @"TSCHChartSeriesDefaultErrorBarCustomNegativeDataScatterXProperty");
  p_registerProperty(1310, @"TSCHChartSeriesDefaultErrorBarCustomPositiveDataProperty");
  p_registerProperty(1311, @"TSCHChartSeriesDefaultErrorBarCustomPositiveDataScatterXProperty");
  p_registerProperty(1312, @"TSCHChartSeriesDefaultErrorBarFixedValueProperty");
  p_registerProperty(1313, @"TSCHChartSeriesDefaultErrorBarFixedValueScatterXProperty");
  p_registerProperty(1314, @"TSCHChartSeriesDefaultErrorBarPercentValueProperty");
  p_registerProperty(1315, @"TSCHChartSeriesDefaultErrorBarPercentValueScatterXProperty");
  p_registerProperty(1316, @"TSCHChartSeriesDefaultErrorBarSettingProperty");
  p_registerProperty(1317, @"TSCHChartSeriesDefaultErrorBarSettingScatterXProperty");
  p_registerProperty(1318, @"TSCHChartSeriesDefaultErrorBarStdDevValueProperty");
  p_registerProperty(1319, @"TSCHChartSeriesDefaultErrorBarStdDevValueScatterXProperty");
  p_registerProperty(1320, @"TSCHChartSeriesDefaultErrorBarTypeProperty");
  p_registerProperty(1321, @"TSCHChartSeriesDefaultErrorBarTypeScatterXProperty");
  p_registerProperty(1322, @"TSCHChartSeriesPieLabelExplosionProperty");
  p_registerProperty(1323, @"TSCHChartSeriesBubbleLineTypeProperty");
  p_registerProperty(1324, @"TSCHChartSeriesLineLineTypeProperty");
  p_registerProperty(1325, @"TSCHChartSeriesMixedLineLineTypeProperty");
  p_registerProperty(1326, @"TSCHChartSeriesScatterLineTypeProperty");
  p_registerProperty(1327, @"TSCHChartSeriesDefaultNumberFormatProperty");
  p_registerProperty(1328, @"TSCHChartSeriesPieNumberFormatProperty");
  p_registerProperty(1329, @"TSCHChartSeriesDefaultNumberFormatTypeProperty");
  p_registerProperty(1330, @"TSCHChartSeriesPieNumberFormatTypeProperty");
  p_registerProperty(1331, @"TSCHChartSeriesStackedPercentNumberFormatProperty");
  p_registerProperty(1332, @"TSCHChartSeriesDefaultSeriesTypeProperty");
  p_registerProperty(1333, @"TSCHChartSeriesDefaultShowErrorBarProperty");
  p_registerProperty(1334, @"TSCHChartSeriesDefaultShowErrorBarScatterXProperty");
  p_registerProperty(1335, @"TSCHChartSeriesScatterShowLineProperty");
  p_registerProperty(1336, @"TSCHChartSeriesBubbleShowNegativeDataProperty");
  p_registerProperty(1337, @"TSCHChartSeriesPieShowSeriesLabelsProperty");
  p_registerProperty(1338, @"TSCHChartSeriesAreaShowSymbolProperty");
  p_registerProperty(1339, @"TSCHChartSeriesLineShowSymbolProperty");
  p_registerProperty(1340, @"TSCHChartSeriesMixedAreaShowSymbolProperty");
  p_registerProperty(1341, @"TSCHChartSeriesMixedLineShowSymbolProperty");
  p_registerProperty(1342, @"TSCHChartSeriesScatterShowSymbolProperty");
  p_registerProperty(1343, @"TSCHChartSeriesDefaultShowTrendLineProperty");
  p_registerProperty(1344, @"TSCHChartSeriesAreaShowValueLabelsProperty");
  p_registerProperty(1345, @"TSCHChartSeriesBarShowValueLabelsProperty");
  p_registerProperty(1346, @"TSCHChartSeriesBubbleShowValueLabelsProperty");
  p_registerProperty(1347, @"TSCHChartSeriesDefaultShowValueLabelsProperty");
  p_registerProperty(1348, @"TSCHChartSeriesLineShowValueLabelsProperty");
  p_registerProperty(1349, @"TSCHChartSeriesMixedShowValueLabelsProperty");
  p_registerProperty(1350, @"TSCHChartSeriesPieShowValueLabelsProperty");
  p_registerProperty(1351, @"TSCHChartSeriesScatterShowValueLabelsProperty");
  p_registerProperty(1352, @"TSCHChartSeriesBubbleSizeDimensionProperty");
  p_registerProperty(1353, @"TSCHChartSeriesAreaSymbolTypeProperty");
  p_registerProperty(1354, @"TSCHChartSeriesLineSymbolTypeProperty");
  p_registerProperty(1355, @"TSCHChartSeriesMixedAreaSymbolTypeProperty");
  p_registerProperty(1356, @"TSCHChartSeriesMixedLineSymbolTypeProperty");
  p_registerProperty(1357, @"TSCHChartSeriesScatterSymbolTypeProperty");
  p_registerProperty(1358, @"TSCHChartSeriesDefaultTrendLineEquationOffsetXProperty");
  p_registerProperty(1359, @"TSCHChartSeriesDefaultTrendLineEquationOffsetYProperty");
  p_registerProperty(1360, @"TSCHChartSeriesDefaultTrendLineLabelStringProperty");
  p_registerProperty(1361, @"TSCHChartSeriesDefaultTrendLineOrderProperty");
  p_registerProperty(1362, @"TSCHChartSeriesDefaultTrendLinePeriodProperty");
  p_registerProperty(1363, @"TSCHChartSeriesDefaultTrendLineRSquaredOffsetXProperty");
  p_registerProperty(1364, @"TSCHChartSeriesDefaultTrendLineRSquaredOffsetYProperty");
  p_registerProperty(1365, @"TSCHChartSeriesDefaultTrendLineShowEquationProperty");
  p_registerProperty(1366, @"TSCHChartSeriesDefaultTrendLineShowLabelProperty");
  p_registerProperty(1367, @"TSCHChartSeriesDefaultTrendLineShowR2ValueProperty");
  p_registerProperty(1368, @"TSCHChartSeriesDefaultTrendLineTypeProperty");
  p_registerProperty(1369, @"TSCHChartSeriesPieWedgeExplosionProperty");
  p_registerProperty(1370, @"TSCHChartSeriesDefaultYAxisOrdinalProperty");
  p_registerProperty(1371, @"TSCHChartSeriesBubbleShowSeriesLabelsProperty");
  p_registerProperty(1372, @"TSCHChartSeriesBubbleValueLabelsAxisProperty");
  p_registerProperty(1373, @"TSCHChartSeriesScatterShowSeriesLabelsProperty");
  p_registerProperty(1374, @"TSCHChartSeriesScatterValueLabelsAxisProperty");
  p_registerProperty(1375, @"TSCHChartSeriesDefaultErrorBarLineEndProperty");
  p_registerProperty(1376, @"TSCHChartSeriesDefaultErrorBarLineEndScatterXProperty");
  p_registerProperty(1377, @"TSCHChartSeriesDefaultErrorBarShadowProperty");
  p_registerProperty(1378, @"TSCHChartSeriesDefaultErrorBarStrokeProperty");
  p_registerProperty(1379, @"TSCHChartSeriesDefaultErrorBarStrokeScatterXProperty");
  p_registerProperty(1380, @"TSCHChartSeries3DAreaFillProperty");
  p_registerProperty(1381, @"TSCHChartSeries3DBarFillProperty");
  p_registerProperty(1382, @"TSCHChartSeries3DColumnFillProperty");
  p_registerProperty(1383, @"TSCHChartSeries3DLineFillProperty");
  p_registerProperty(1384, @"TSCHChartSeries3DPieFillProperty");
  p_registerProperty(1385, @"TSCHChartSeriesAreaFillProperty");
  p_registerProperty(1386, @"TSCHChartSeriesBarFillProperty");
  p_registerProperty(1387, @"TSCHChartSeriesColumnFillProperty");
  p_registerProperty(1388, @"TSCHChartSeriesDefaultFillProperty");
  p_registerProperty(1389, @"TSCHChartSeriesMixedAreaFillProperty");
  p_registerProperty(1390, @"TSCHChartSeriesMixedColumnFillProperty");
  p_registerProperty(1391, @"TSCHChartSeriesPieFillProperty");
  p_registerProperty(1392, @"TSCHChartSeriesAreaLabelParagraphStyleIndexProperty");
  p_registerProperty(1393, @"TSCHChartSeriesBarLabelParagraphStyleIndexProperty");
  p_registerProperty(1394, @"TSCHChartSeriesDefaultLabelParagraphStyleIndexProperty");
  p_registerProperty(1395, @"TSCHChartSeriesLineLabelParagraphStyleIndexProperty");
  p_registerProperty(1396, @"TSCHChartSeriesMixedLabelParagraphStyleIndexProperty");
  p_registerProperty(1397, @"TSCHChartSeriesPieLabelParagraphStyleIndexProperty");
  p_registerProperty(1398, @"TSCHChartSeriesDefaultOpacityProperty");
  p_registerProperty(1399, @"TSCHChartSeriesAreaOutsideLabelParagraphStyleIndexProperty");
  p_registerProperty(1400, @"TSCHChartSeriesBarOutsideLabelParagraphStyleIndexProperty");
  p_registerProperty(1401, @"TSCHChartSeriesDefaultOutsideLabelParagraphStyleIndexProperty");
  p_registerProperty(1402, @"TSCHChartSeriesMixedOutsideLabelParagraphStyleIndexProperty");
  p_registerProperty(1403, @"TSCHChartSeriesPieOutsideLabelParagraphStyleIndexProperty");
  p_registerProperty(1404, @"TSCHChartSeries3DAreaShadowProperty");
  p_registerProperty(1405, @"TSCHChartSeries3DBarShadowProperty");
  p_registerProperty(1406, @"TSCHChartSeries3DColumnShadowProperty");
  p_registerProperty(1407, @"TSCHChartSeries3DLineShadowProperty");
  p_registerProperty(1408, @"TSCHChartSeries3DPieShadowProperty");
  p_registerProperty(1409, @"TSCHChartSeriesAreaShadowProperty");
  p_registerProperty(1410, @"TSCHChartSeriesBarShadowProperty");
  p_registerProperty(1411, @"TSCHChartSeriesBubbleShadowProperty");
  p_registerProperty(1412, @"TSCHChartSeriesDefaultShadowProperty");
  p_registerProperty(1413, @"TSCHChartSeriesLineShadowProperty");
  p_registerProperty(1414, @"TSCHChartSeriesMixedAreaShadowProperty");
  p_registerProperty(1415, @"TSCHChartSeriesMixedColumnShadowProperty");
  p_registerProperty(1416, @"TSCHChartSeriesMixedLineShadowProperty");
  p_registerProperty(1417, @"TSCHChartSeriesPieShadowProperty");
  p_registerProperty(1418, @"TSCHChartSeriesScatterShadowProperty");
  p_registerProperty(1419, @"TSCHChartSeriesAreaStrokeProperty");
  p_registerProperty(1420, @"TSCHChartSeriesBarStrokeProperty");
  p_registerProperty(1421, @"TSCHChartSeriesBubbleStrokeProperty");
  p_registerProperty(1422, @"TSCHChartSeriesLineStrokeProperty");
  p_registerProperty(1423, @"TSCHChartSeriesMixedAreaStrokeProperty");
  p_registerProperty(1424, @"TSCHChartSeriesMixedColumnStrokeProperty");
  p_registerProperty(1425, @"TSCHChartSeriesMixedLineStrokeProperty");
  p_registerProperty(1426, @"TSCHChartSeriesPieStrokeProperty");
  p_registerProperty(1427, @"TSCHChartSeriesScatterStrokeProperty");
  p_registerProperty(1428, @"TSCHChartSeriesAreaSymbolFillProperty");
  p_registerProperty(1429, @"TSCHChartSeriesBubbleSymbolFillProperty");
  p_registerProperty(1430, @"TSCHChartSeriesLineSymbolFillProperty");
  p_registerProperty(1431, @"TSCHChartSeriesMixedAreaSymbolFillProperty");
  p_registerProperty(1432, @"TSCHChartSeriesMixedLineSymbolFillProperty");
  p_registerProperty(1433, @"TSCHChartSeriesScatterSymbolFillProperty");
  p_registerProperty(1434, @"TSCHChartSeriesAreaSymbolFillUseSeriesFillProperty");
  p_registerProperty(1435, @"TSCHChartSeriesLineSymbolFillUseSeriesFillProperty");
  p_registerProperty(1436, @"TSCHChartSeriesMixedAreaSymbolFillUseSeriesFillProperty");
  p_registerProperty(1437, @"TSCHChartSeriesMixedLineSymbolFillUseSeriesFillProperty");
  p_registerProperty(1438, @"TSCHChartSeriesAreaSymbolFillUseSeriesStrokeProperty");
  p_registerProperty(1439, @"TSCHChartSeriesBubbleSymbolFillUseSeriesStrokeProperty");
  p_registerProperty(1440, @"TSCHChartSeriesLineSymbolFillUseSeriesStrokeProperty");
  p_registerProperty(1441, @"TSCHChartSeriesMixedAreaSymbolFillUseSeriesStrokeProperty");
  p_registerProperty(1442, @"TSCHChartSeriesMixedLineSymbolFillUseSeriesStrokeProperty");
  p_registerProperty(1443, @"TSCHChartSeriesScatterSymbolFillUseSeriesStrokeProperty");
  p_registerProperty(1444, @"TSCHChartSeriesAreaSymbolSizeProperty");
  p_registerProperty(1445, @"TSCHChartSeriesLineSymbolSizeProperty");
  p_registerProperty(1446, @"TSCHChartSeriesMixedAreaSymbolSizeProperty");
  p_registerProperty(1447, @"TSCHChartSeriesMixedLineSymbolSizeProperty");
  p_registerProperty(1448, @"TSCHChartSeriesScatterSymbolSizeProperty");
  p_registerProperty(1449, @"TSCHChartSeriesAreaSymbolStrokeProperty");
  p_registerProperty(1450, @"TSCHChartSeriesBubbleSymbolStrokeProperty");
  p_registerProperty(1451, @"TSCHChartSeriesLineSymbolStrokeProperty");
  p_registerProperty(1452, @"TSCHChartSeriesMixedAreaSymbolStrokeProperty");
  p_registerProperty(1453, @"TSCHChartSeriesMixedLineSymbolStrokeProperty");
  p_registerProperty(1454, @"TSCHChartSeriesScatterSymbolStrokeProperty");
  p_registerProperty(1455, @"TSCHChartSeriesDefaultTrendlineEquationOpacityProperty");
  p_registerProperty(1456, @"TSCHChartSeriesDefaultTrendlineEquationParagraphStyleIndexProperty");
  p_registerProperty(1457, @"TSCHChartSeriesDefaultTrendlineRSquaredOpacityProperty");
  p_registerProperty(1458, @"TSCHChartSeriesDefaultTrendlineRSquaredParagraphStyleIndexProperty");
  p_registerProperty(1459, @"TSCHChartSeriesDefaultTrendLineShadowProperty");
  p_registerProperty(1460, @"TSCHChartSeriesDefaultTrendLineStrokeProperty");
  p_registerProperty(1461, @"TSCHChartSeriesAreaValueLabelPositionProperty");
  p_registerProperty(1462, @"TSCHChartSeriesBarValueLabelPositionProperty");
  p_registerProperty(1463, @"TSCHChartSeriesBubbleValueLabelPositionProperty");
  p_registerProperty(1464, @"TSCHChartSeriesDefaultValueLabelPositionProperty");
  p_registerProperty(1465, @"TSCHChartSeriesLineValueLabelPositionProperty");
  p_registerProperty(1466, @"TSCHChartSeriesMixedAreaValueLabelPositionProperty");
  p_registerProperty(1467, @"TSCHChartSeriesMixedColumnValueLabelPositionProperty");
  p_registerProperty(1468, @"TSCHChartSeriesMixedLineValueLabelPositionProperty");
  p_registerProperty(1469, @"TSCHChartSeriesScatterValueLabelPositionProperty");
  p_registerProperty(1470, @"TSCHChartSeriesStackedAreaValueLabelPositionProperty");
  p_registerProperty(1471, @"TSCHChartSeriesStackedBarValueLabelPositionProperty");
  p_registerProperty(1472, @"TSCHLegendModelDefaultFillProperty");
  p_registerProperty(1473, @"TSCHLegendModelDefaultLabelParagraphStyleIndexProperty");
  p_registerProperty(1474, @"TSCHLegendModelDefaultOpacityProperty");
  p_registerProperty(1475, @"TSCHLegendModelDefaultShadowProperty");
  p_registerProperty(1476, @"TSCHLegendModelDefaultStrokeProperty");
  p_registerProperty(4096, @"TKSlideTransitionProperty");
  p_registerProperty(4097, @"TKSlideTitlePlaceholderVisibilityProperty");
  p_registerProperty(4098, @"TKSlideBodyPlaceholderVisibilityProperty");
  p_registerProperty(4099, @"TKSlideImagePlaceholderVisibilityProperty");
  p_registerProperty(4100, @"TKSlideSlideNumberPlaceholderVisibilityProperty");
  p_registerProperty(4101, @"text(Propagation)");
  p_registerProperty(4102, @"firstParagraphStyle(Propagation)");
  p_registerProperty(4103, @"firstListStyle(Propagation)");
  p_registerProperty(4104, @"TKMasterSlideBodyParagraphStyles");
  p_registerProperty(4105, @"TKMasterSlideBodyListStyles");
  p_registerProperty(4106, @"TKSlideContentsProperty");
  p_registerProperty(4107, @"TKSlidePlaceholdersForTagsProperty");
  p_registerProperty(4608, @"TRWorkspaceCanvasScaleProperty");
  p_registerProperty(4609, @"TRWorkspaceContentScaleProperty");
  p_registerProperty(4610, @"TRWorkspacePaginagedProperty");
  p_registerProperty(4611, @"TRWorkspacePageGutterProperty");
  p_registerProperty(4612, @"TRWorkspacePageOrientationProperty");
  p_registerProperty(4613, @"TRWorkspaceTopMarginProperty");
  p_registerProperty(4614, @"TRWorkspaceLeftMarginProperty");
  p_registerProperty(4615, @"TRWorkspaceRightMarginProperty");
  p_registerProperty(4616, @"TRWorkspaceBottomMarginProperty");
  p_registerProperty(4617, @"TRWorkspacePageNumberOrientationProperty");
  p_registerProperty(4618, @"TRWorkspaceUsePrinterMarginsProperty");
  p_registerProperty(4619, @"TRWorkspaceStartPageNumberProperty");
  p_registerProperty(4620, @"TRWorkspaceUseStartPageNumberProperty");
  p_registerProperty(4621, @"TRFitToSinglePage");
  p_registerProperty(4622, @"stageStroke");

  return p_registerProperty(4623, @"thumbnailStroke");
}

__CFString *p_infoStringFromPropertyValue()
{
  CFIndex result = @"int";
  switch(@"int")
  {
    case 0u:
      CFIndex result = (__CFString *)TSUObjectReferenceDescription();
      break;
    case 1u:
      return result;
    case 2u:
      CFIndex result = @"float";
      break;
    case 3u:
      CFIndex result = @"double";
      break;
    default:
      CFIndex result = &stru_26D688A48;
      break;
  }
  return result;
}

__CFString *p_summaryFromPropertyValue(uint64_t a1, void *a2)
{
  if (objc_opt_respondsToSelector())
  {
    return (__CFString *)[a2 performSelector:sel_tssPropertySummary];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      return (__CFString *)[a2 description];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        return @"NSNull";
      }
      else {
        return &stru_26D688A48;
      }
    }
  }
}

void sub_2235962C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22359646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *String(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  return i_TSSPropertyStoreCreateWithFirstPropertyAndArgumentList(a1, &a9);
}

void String(size_t *a1, uint64_t a2, double a3)
{
  if (!a1)
  {
    uint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyStoreSetDoubleValueForProperty(TSSPropertyStoreRef, TSSProperty, double)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 317, @"nil map reference");
  }
  double v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!*((unsigned char *)v8 + 10)) {

    }
    String(v9, a2, a3);
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    String((uint64_t)v10, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v10, 1);
  }
}

{
  void *v6;
  uint64_t v7;
  size_t *v8;
  size_t *v9;
  int v10;
  float v11;
  void v12[2];

  if (!a1)
  {
    uint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSSPropertyStoreSetCGFloatValueForProperty(TSSPropertyStoreRef, TSSProperty, CGFloat)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 334, @"nil map reference");
  }
  double v8 = p_TSSPropertyStoreSearch(a1, a2);
  v12[0] = 0;
  v12[1] = 0;
  if (v8)
  {
    uint64_t v9 = v8;
    if (!*((unsigned char *)v8 + 10)) {
  }
    }
  else
  {
    uint64_t v9 = v12;
  }
  CFIndex v10 = String(a2);
  if (v10 == 3)
  {
    String((uint64_t)v9, a2, a3);
  }
  else if (v10 == 2)
  {
    uint64_t v11 = a3;
    String((uint64_t)v9, a2, v11);
  }
  if (v9 == v12) {
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v12, 1);
  }
}

void String(uint64_t *a1, int64_t *a2)
{
  int64_t v3 = *a2;
  if (*a2)
  {
    if (*a1)
    {
      if (v3 >= 1)
      {
        unsigned int v5 = 0;
        uint64_t v6 = 0;
        unint64_t v7 = a2[1];
        unint64_t v8 = a1[1];
        unint64_t v9 = v7;
        do
        {
          unint64_t v10 = a1[1] + 16 * *a1;
          if (v8 >= v10)
          {
LABEL_10:
            if (!v6)
            {
              uint64_t v6 = (id *)malloc_type_calloc(v3 - ((uint64_t)(v9 - v7) >> 4), 0x10uLL, 0x10820400B94AB5FuLL);
              unsigned int v5 = v6;
            }
            *(_OWORD *)unsigned int v5 = *(_OWORD *)v9;
            if (!*((unsigned char *)v5 + 10)) {
              id v13 = *v5;
            }
            v9 += 16;
            v5 += 2;
          }
          else
          {
            unsigned int v11 = *(unsigned __int16 *)(v9 + 8);
            while (1)
            {
              unsigned int v12 = *(unsigned __int16 *)(v8 + 8);
              if (v12 == v11) {
                break;
              }
              if (v12 < v11)
              {
                v8 += 16;
                if (v8 < v10) {
                  continue;
                }
              }
              goto LABEL_10;
            }
            if (!*(unsigned char *)(v9 + 10)) {
              id v14 = *(id *)v9;
            }
            if (!*(unsigned char *)(v8 + 10)) {

            }
            long long v15 = *(_OWORD *)v9;
            v9 += 16;
            *(_OWORD *)unint64_t v8 = v15;
            v8 += 16;
          }
          int64_t v3 = *a2;
          unint64_t v7 = a2[1];
        }
        while (v9 < v7 + 16 * *a2);
        if (v6)
        {
          p_TSSPropertyStoreAddNewEntries(a1, v6, ((char *)v5 - (char *)v6) >> 4);
          free(v6);
        }
      }
    }
    else
    {
      uint64_t v16 = malloc_type_calloc(v3, 0x10uLL, 0x10820400B94AB5FuLL);
      a1[1] = (uint64_t)v16;
      if (v16)
      {
        int64_t v18 = *a2;
        int v17 = (const void *)a2[1];
        *a1 = *a2;
        memcpy(v16, v17, 16 * v18);
        unint64_t v19 = *a1;
        if (*a1)
        {
          uint64_t v20 = 0;
          unsigned int v21 = 1;
          do
          {
            uint64_t v22 = a1[1];
            if (!*(unsigned char *)(v22 + 16 * v20 + 10))
            {
              id v23 = *(id *)(v22 + 16 * v20);
              unint64_t v19 = *a1;
            }
            uint64_t v20 = v21;
          }
          while (v19 > v21++);
        }
      }
    }
  }
}

void *String(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = *result;
    if (*result)
    {
      unint64_t v3 = 0;
      unsigned __int16 v4 = 0;
      CFIndex result = 0;
      uint64_t v5 = v1[1];
      do
      {
        uint64_t v6 = v5 + 16 * v3;
        unsigned __int16 v7 = v4;
        CFIndex result = (void *)((char *)result + (v4 | (*(unsigned __int16 *)(v6 + 8) << 16)));
        if (*(unsigned char *)(v6 + 10) == 1) {
          CFIndex result = (void *)((char *)result + *(int *)(v5 + 16 * v3) + (unint64_t)v4);
        }
        ++v4;
        unint64_t v3 = (unsigned __int16)(v7 + 1);
      }
      while (v2 > v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double String(size_t *a1, unsigned __int16 a2)
{
  unint64_t v2 = p_TSSPropertyStoreSearch(a1, a2);
  if (!v2) {
    return INFINITY;
  }

  return String((uint64_t)v2);
}

{
  size_t *v2;
  double v3;
  int v4;
  uint64_t vars8;

  unint64_t v2 = p_TSSPropertyStoreSearch(a1, a2);
  if (!v2) {
    return INFINITY;
  }
  unsigned __int16 v4 = *((unsigned __int8 *)v2 + 10);
  if (v4 != 3)
  {
    if (v4 == 2) {
      return String((uint64_t)v2, v3);
    }
    return INFINITY;
  }

  return String((uint64_t)v2);
}

void String(uint64_t *a1)
{
  uint64_t v1 = String(a1);
  NSLog((NSString *)@"%@", v1);
}

void *String(void *a1, void *a2, char a3)
{
  uint64_t v6 = (void *)[MEMORY[0x263EFF980] array];
  unsigned __int16 v7 = (void *)[MEMORY[0x263EFF980] array];
  unint64_t v8 = (void *)[MEMORY[0x263EFF980] array];
  [v6 addObject:objc_msgSend(NSString, "stringWithFormat:", @"TSSPropertyStoreRef %p", a1)];
  [v7 addObject:objc_msgSend(NSString, "stringWithFormat:", @"TSSPropertyStoreRef %p", a2)];
  [v8 addObject:@" "];
  uint64_t v20 = 0;
  unsigned int v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  uint64_t v23 = objc_msgSend((id)objc_msgSend(v6, "lastObject"), "length");
  unint64_t v9 = p_TSSPropertyStoreBuildPropertySet(a1);
  id v10 = [(TSSPropertySet *)v9 propertySetByAddingPropertiesFromSet:p_TSSPropertyStoreBuildPropertySet(a2)];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  id v18[2] = __TSSPropertyStoreDiffDescription_block_invoke;
  void v18[3] = &unk_2646B0F58;
  v18[8] = a1;
  v18[9] = a2;
  char v19 = a3;
  v18[4] = v8;
  v18[5] = v6;
  v18[6] = v7;
  v18[7] = &v20;
  [v10 enumeratePropertiesUsingBlock:v18];
  unsigned int v11 = (void *)[MEMORY[0x263F089D8] string];
  unint64_t v12 = 0;
  id v13 = &stru_26D688A48;
  while (v12 < [v8 count])
  {
    for (uint64_t i = (void *)[v6 objectAtIndexedSubscript:v12];
          ;
          uint64_t i = (void *)[i stringByAppendingString:@"         "])
    {
      unint64_t v15 = [i length];
      if (v15 >= v21[3]) {
        break;
      }
    }
    unint64_t v16 = [i length];
    if (v16 > v21[3]) {
      uint64_t i = objc_msgSend(i, "substringToIndex:");
    }
    [v11 appendFormat:@"%@%@ %@   %@", v13, objc_msgSend(v8, "objectAtIndexedSubscript:", v12), i, objc_msgSend(v7, "objectAtIndexedSubscript:", v12)];
    ++v12;
    id v13 = @"\n";
  }
  _Block_object_dispose(&v20, 8);
  return v11;
}

void sub_2235973B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

TSSMutablePropertySet *p_TSSPropertyStoreBuildPropertySet(void *a1)
{
  unint64_t v2 = objc_alloc_init(TSSMutablePropertySet);
  if (a1 && *a1)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      [(TSSMutablePropertySet *)v2 addProperty:*(unsigned __int16 *)(a1[1] + 16 * v3 + 8)];
      uint64_t v3 = v4;
    }
    while (*a1 > (unint64_t)v4++);
  }
  return v2;
}

unint64_t __TSSPropertyStoreDiffDescription_block_invoke(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unsigned int v4 = (void *)[MEMORY[0x263EFF980] array];
  uint64_t v5 = (void *)[MEMORY[0x263EFF980] array];
  uint64_t v6 = (unsigned int *)p_TSSPropertyStoreSearch(*(size_t **)(a1 + 64), a2);
  unsigned __int16 v7 = p_TSSPropertyStoreSearch(*(size_t **)(a1 + 72), a2);
  unint64_t v9 = (unsigned int *)v7;
  id v10 = @" ";
  if (v6)
  {
    if (v7)
    {
      if (String((uint64_t)v6, (uint64_t)v7, v8)) {
        unsigned int v11 = @" ";
      }
      else {
        unsigned int v11 = @"!";
      }
    }
    else
    {
      unsigned int v11 = @"+";
    }
    objc_msgSend(v4, "addObjectsFromArray:", objc_msgSend((id)String(v6), "componentsSeparatedByString:", @"\n"));
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v12 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v27 != v14) {
            objc_enumerationMutation(v4);
          }
          unint64_t v16 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          unint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          if (v17 <= [v16 length])
          {
            uint64_t v19 = [v16 length];
            uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          }
          else
          {
            uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
            uint64_t v19 = *(void *)(v18 + 24);
          }
          *(void *)(v18 + 24) = v19;
        }
        uint64_t v13 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v13);
    }
    id v10 = v11;
    if (v9) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v11 = @"-";
    if (v7)
    {
LABEL_20:
      objc_msgSend(v5, "addObjectsFromArray:", objc_msgSend((id)String(v9), "componentsSeparatedByString:", @"\n"));
      id v10 = v11;
    }
  }
  unint64_t v20 = [v4 count];
  if (v20 < [v5 count])
  {
    do
    {
      [v4 addObject:&stru_26D688A48];
      unint64_t v21 = [v4 count];
    }
    while (v21 < [v5 count]);
  }
  unint64_t v22 = [v5 count];
  if (v22 < [v4 count])
  {
    do
    {
      [v5 addObject:&stru_26D688A48];
      unint64_t v23 = [v5 count];
    }
    while (v23 < [v4 count]);
  }
  unint64_t result = [v4 count];
  if (result)
  {
    for (unint64_t j = 0; j < result; ++j)
    {
      if (*(unsigned char *)(a1 + 80) || ([(__CFString *)v10 isEqualToString:@" "] & 1) == 0)
      {
        [*(id *)(a1 + 32) addObject:v10];
        objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(v4, "objectAtIndexedSubscript:", j));
        objc_msgSend(*(id *)(a1 + 48), "addObject:", objc_msgSend(v5, "objectAtIndexedSubscript:", j));
      }
      unint64_t result = [v4 count];
    }
  }
  return result;
}

uint64_t String(void *a1, void *a2)
{
  void v12[3] = *MEMORY[0x263EF8340];
  unsigned int v4 = objc_alloc_init(TSSMutablePropertySet);
  uint64_t v5 = objc_alloc_init(TSSMutablePropertySet);
  uint64_t v6 = objc_alloc_init(TSSMutablePropertySet);
  v12[0] = v4;
  v12[1] = v5;
  v12[2] = v6;
  uint64_t v7 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:3];
  double v8 = p_TSSPropertyStoreBuildPropertySet(a1);
  id v9 = [(TSSPropertySet *)v8 propertySetByAddingPropertiesFromSet:p_TSSPropertyStoreBuildPropertySet(a2)];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  _DWORD v11[2] = __TSSPropertyStoreDiffPropertyNames_block_invoke;
  void v11[3] = &unk_2646B0F80;
  v11[7] = a1;
  v11[8] = a2;
  id v11[4] = v4;
  v11[5] = v5;
  v11[6] = v6;
  [v9 enumeratePropertiesUsingBlock:v11];
  return v7;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (![a1 stylesheet]) {
    return 1;
  }
  unsigned int v4 = [a1 stylesheet];
  if (v4 == [a2 stylesheet]) {
    return 1;
  }
  unint64_t result = objc_msgSend((id)objc_msgSend(a1, "stylesheet"), "parent");
  if (result)
  {
    uint64_t v6 = objc_msgSend((id)objc_msgSend(a1, "stylesheet"), "parent");
    return v6 == [a2 stylesheet];
  }
  return result;
}

uint64_t __TSSPropertyStoreDiffPropertyNames_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = p_TSSPropertyStoreSearch(*(size_t **)(a1 + 56), a2);
  uint64_t result = (uint64_t)p_TSSPropertyStoreSearch(*(size_t **)(a1 + 64), a2);
  if (v4)
  {
    if (result)
    {
      uint64_t v6 = p_TSSPropertyStoreSearch(*(size_t **)(a1 + 56), a2);
      uint64_t v7 = p_TSSPropertyStoreSearch(*(size_t **)(a1 + 64), a2);
      uint64_t result = String((uint64_t)v6, (uint64_t)v7, v8);
      if (result) {
        return result;
      }
      id v9 = (void **)(a1 + 32);
    }
    else
    {
      id v9 = (void **)(a1 + 40);
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    id v9 = (void **)(a1 + 48);
  }
  id v10 = *v9;

  return [v10 addProperty:a2];
}

void String(unint64_t *a1)
{
  unint64_t v3 = *a1;
  unint64_t v2 = (id *)a1[1];
  if (*a1)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      if (!BYTE2(v2[2 * v4 + 1])) {

      }
      uint64_t v4 = v5;
    }
    while (v3 > v5++);
    unint64_t v2 = (id *)a1[1];
  }
  free(v2);
  *a1 = 0;
  a1[1] = 0;
}

uint64_t String(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [NSString stringWithFormat:@"%@-%lu-%@", a1, a2, a3];
}

uint64_t String(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [NSString stringWithFormat:@"%@-%lu-%@", a1, a2, a3];
  return [NSString stringWithFormat:@"%@-%@", v5, a4];
}

uint64_t String(void *a1, const char *a2)
{
  return [a1 stringByReplacingOccurrencesOfString:@"-" withString:@"_"];
}

{
  return [a1 componentsSeparatedByString:@"-"];
}

uint64_t String(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)[a1 componentsSeparatedByString:@"-"];
  if (v4 && [v4 count] == 3) {
    return [NSString stringWithFormat:@"%@-%@", a1, a2];
  }
  else {
    return 0;
  }
}

id String(void *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v2 = (void *)[MEMORY[0x263F7C870] setWithSet:a1];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(a1);
        }
        objc_opt_class();
        uint64_t v7 = TSUDynamicCast();
        if (v7)
        {
          for (uint64_t i = (void *)v7; [i parent]; objc_msgSend(v2, "addObject:", i))
            uint64_t i = (void *)[i parent];
        }
        ++v6;
      }
      while (v6 != v4);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  return (id)[v2 copy];
}

{
  id v2;
  id v3;
  void v5[6];

  if (!a1) {
    return 0;
  }
  unint64_t v2 = (id)[a1 propertyMap];
  if (!v2) {
    unint64_t v2 = +[TSSPropertyMap propertyMap];
  }
  uint64_t v3 = (id)objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "properties"), "mutableCopy");
  objc_msgSend(v3, "removeProperties:", objc_msgSend(v2, "allProperties"));
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  id v5[2] = __TSSFullPropertyMapForStyle_block_invoke;
  void v5[3] = &unk_2646B0F08;
  v5[4] = a1;
  v5[5] = v2;
  [v3 enumeratePropertiesUsingBlock:v5];
  return v2;
}

__CFString *String(void *a1)
{
  if (!a1) {
    return @"nil";
  }
  unint64_t v2 = (void *)[a1 rootAncestor];
  uint64_t v3 = [v2 descendantCount] + 1;
  uint64_t v4 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "documentRoot"), "theme"), "stylesheet");
  if (v3 != 2) {
    return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%lu of %lu", v3 - objc_msgSend(a1, "descendantCount"), v3);
  }
  if (v2 == (void *)v4)
  {
    if (v2 == a1)
    {
      return @"Theme";
    }
    else
    {
      if ((void *)[v2 child] != a1)
      {
        uint64_t v12 = [MEMORY[0x263F7C7F0] currentHandler];
        uint64_t v13 = [NSString stringWithUTF8String:"NSString *TSSDebugStylesheetDescription(TSSStylesheet *)"];
        uint64_t v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSStyle.m"];
        double v8 = (void *)v12;
        uint64_t v9 = v13;
        uint64_t v10 = 209;
        goto LABEL_12;
      }
      return @"Document";
    }
  }
  else if (v2 == a1)
  {
    return @"Pasteboard-Root";
  }
  else
  {
    if ((void *)[v2 child] != a1)
    {
      uint64_t v5 = [MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *TSSDebugStylesheetDescription(TSSStylesheet *)"];
      uint64_t v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSStyle.m"];
      double v8 = (void *)v5;
      uint64_t v9 = v6;
      uint64_t v10 = 224;
LABEL_12:
      [v8 handleFailureInFunction:v9 file:v7 lineNumber:v10 description:@"Unexpected."];
      return @"Unexpected";
    }
    return @"Pasteboard-Child";
  }
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)[a1 stylesheet];

  return String(v1);
}

{
  if ([a1 styleIdentifier]) {
    return (__CFString *)[NSString stringWithFormat:@"<%@>", objc_msgSend(a1, "styleIdentifier")];
  }
  else {
    return &stru_26D688A48;
  }
}

{
  if ([a1 name]) {
    return (__CFString *)[NSString stringWithFormat:@"'%@'", objc_msgSend(a1, "name")];
  }
  else {
    return &stru_26D688A48;
  }
}

{
  uint64_t vars8;

  if (!a1) {
    return &stru_26D688A48;
  }
  if ([a1 styleIdentifier])
  {
    if ([a1 styleIdentifier]) {
      return (__CFString *)[NSString stringWithFormat:@"<%@>", objc_msgSend(a1, "styleIdentifier")];
    }
    return &stru_26D688A48;
  }
  if ([a1 name] && objc_msgSend((id)objc_msgSend(a1, "name"), "length"))
  {
    if ([a1 name]) {
      return (__CFString *)[NSString stringWithFormat:@"'%@'", objc_msgSend(a1, "name")];
    }
    return &stru_26D688A48;
  }

  return (__CFString *)TSUObjectReferenceDescription();
}

void *String(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v2 = (void *)[MEMORY[0x263F089D8] string];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  if ([a1 styleIdentifier]) {
    uint64_t v3 = (__CFString *)[NSString stringWithFormat:@"<%@>", objc_msgSend(a1, "styleIdentifier")];
  }
  else {
    uint64_t v3 = &stru_26D688A48;
  }
  v17[0] = v3;
  if ([a1 name]) {
    uint64_t v4 = (__CFString *)[NSString stringWithFormat:@"'%@'", objc_msgSend(a1, "name")];
  }
  else {
    uint64_t v4 = &stru_26D688A48;
  }
  v17[1] = v4;
  uint64_t v5 = (void *)[MEMORY[0x263EFF8C0] arrayWithObjects:v17 count:2];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if ([v10 length])
        {
          if ([v2 length]) {
            long long v11 = @" ";
          }
          else {
            long long v11 = &stru_26D688A48;
          }
          [v2 appendFormat:@"%@%@", v11, v10];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v18 count:16];
    }
    while (v7);
  }
  return v2;
}

uint64_t __TSSDebugStyleRelationshipDescription_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = (objc_class *)objc_opt_class();
  [v8 appendFormat:@"%@|%p|%@|", NSStringFromClass(v9), a2, a3];
  uint64_t v10 = *(void **)(a1 + 32);
  if (a4)
  {
    objc_msgSend(v10, "appendFormat:", @"%p|", a4);
    long long v11 = objc_msgSend((id)objc_msgSend(a4, "stylesheet"), "rootAncestor");
    uint64_t v12 = *(void **)(a1 + 32);
    if (v11)
    {
      return [v12 appendFormat:@"%p|%@|%p|%p$", objc_msgSend(a4, "stylesheet"), String(objc_msgSend(a4, "stylesheet")), v11, objc_msgSend(v11, "child")];
    }
    else
    {
      return [v12 appendFormat:@"|None$"];
    }
  }
  else
  {
    return [v10 appendString:@"nil$"];
  }
}

uint64_t __TSSDebugStyleRelationshipDescription_block_invoke_2(uint64_t a1, void *a2)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if ([a2 parent]) {
    (*(void (**)(void, void *, __CFString *, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, @"parent", [a2 parent]);
  }
  uint64_t v4 = (void *)[a2 propertyMap];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  _DWORD v7[2] = __TSSDebugStyleRelationshipDescription_block_invoke_3;
  v7[3] = &unk_2646B0FD8;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7[4] = a2;
  v7[5] = v5;
  return [v4 enumeratePropertiesAndObjectsUsingBlock:v7];
}

uint64_t __TSSDebugStyleRelationshipDescription_block_invoke_3(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (!a3)
  {
    uint64_t v6 = result;
    objc_opt_class();
    uint64_t result = objc_opt_isKindOfClass();
    if (result)
    {
      uint64_t v9 = v6 + 32;
      uint64_t v7 = *(void *)(v6 + 32);
      uint64_t v8 = *(void *)(v9 + 8);
      uint64_t v10 = String(a2);
      long long v11 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(v8 + 16);
      return v11(v8, v7, v10, a4);
    }
  }
  return result;
}

void sub_223598A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_22359A1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_22359A334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __TSSFullPropertyMapForStyle_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = [*(id *)(a1 + 32) boxedValueForProperty:a2];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void **)(a1 + 40);
    return [v6 setBoxedObject:v5 forProperty:a2];
  }
  return result;
}

void sub_22359AE54(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359AF08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359B118(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359B3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

void sub_22359B4D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359B548(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359B5C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359B6FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359B8BC(_Unwind_Exception *exception_object)
{
}

void sub_22359BA44(_Unwind_Exception *exception_object)
{
}

void sub_22359BBB0(_Unwind_Exception *exception_object)
{
}

void sub_22359BC18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359BD7C(_Unwind_Exception *exception_object)
{
}

void sub_22359BEC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359C0B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359C2EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359C760(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359C874(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359CA2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359CAF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22359CE88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double String(uint64_t a1)
{
  if (!a1)
  {
    unint64_t v2 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"double TSSPropertyEntryGetDoubleValue(const TSSPropertyEntry *)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 106, @"invalid nil value for '%s'", "entry");
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 10);
  if (v4 >= 3)
  {
    if (v4 == 3)
    {
      double result = *(double *)a1;
      if (*(double *)a1 != INFINITY) {
        return result;
      }
    }
    else
    {
      uint64_t v8 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v9 = [NSString stringWithUTF8String:"double TSSPropertyEntryGetDoubleValue(const TSSPropertyEntry *)"];
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 121, @"Unexpected entry type", v12);
    }
  }
  else
  {
    uint64_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"double TSSPropertyEntryGetDoubleValue(const TSSPropertyEntry *)"];
    [v5 handleFailureInFunction:v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 118, @"Asked for double value of a %@-valued property.", String(*(unsigned __int8 *)(a1 + 10)) file lineNumber description];
  }
  uint64_t v10 = objc_msgSend(MEMORY[0x263F7C7F0], "currentHandler", result);
  uint64_t v11 = [NSString stringWithUTF8String:"double TSSPropertyEntryGetDoubleValue(const TSSPropertyEntry *)"];
  [v10 handleFailureInFunction:v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 125, @"Undefined value in entry for property %d %@", *(unsigned __int16 *)(a1 + 8), String(*(unsigned __int16 *)(a1 + 8)) file lineNumber description];
  return INFINITY;
}

void sub_22359D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

uint64_t String()
{
  uint64_t v0 = TSUProtocolCast();
  uint64_t v1 = (void *)TSUProtocolCast();
  unint64_t v2 = v1;
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    return [v1 isThemeEquivalent:v2];
  }
  if (v1)
  {
    unint64_t v2 = 0;
    return [v1 isThemeEquivalent:v2];
  }
  return 0;
}

{
  uint64_t v0;
  void block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  uint64_t v3 = 0;
  unsigned int v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 1;
  if (_styleValidationQueue_onceToken != -1) {
    dispatch_once(&_styleValidationQueue_onceToken, &__block_literal_global_21);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __TSSShouldValidateStyles_block_invoke;
  block[3] = &unk_2646B1270;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)_styleValidationQueue_queue, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t identifierFollowsPackageConvention(NSString *a1)
{
  return [(id)String(a1) isEqualToString:@"imported"] ^ 1;
}

void sub_2235A0410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void sub_2235A06F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _styleValidationQueue()
{
  if (_styleValidationQueue_onceToken != -1) {
    dispatch_once(&_styleValidationQueue_onceToken, &__block_literal_global_21);
  }
  return _styleValidationQueue_queue;
}

dispatch_queue_t ___styleValidationQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("TSSValidation", 0);
  _styleValidationQueue_queue = (uint64_t)result;
  return result;
}

double __TSSShouldValidateStyles_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = String == 0;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFAbsoluteTime v1 = CFAbsoluteTimeGetCurrent() - *(double *)&String;
    double result = *(double *)&String;
    if (v1 > *(double *)&String)
    {
      double result = *(double *)&String + *(double *)&String;
      *(double *)&String = *(double *)&String + *(double *)&String;
    }
  }
  return result;
}

void String()
{
  if (_styleValidationQueue_onceToken != -1) {
    dispatch_once(&_styleValidationQueue_onceToken, &__block_literal_global_21);
  }
  uint64_t v0 = _styleValidationQueue_queue;

  dispatch_sync(v0, &__block_literal_global_4);
}

{
  NSObject *v0;
  uint64_t vars8;

  if (_styleValidationQueue_onceToken != -1) {
    dispatch_once(&_styleValidationQueue_onceToken, &__block_literal_global_21);
  }
  uint64_t v0 = _styleValidationQueue_queue;

  dispatch_sync(v0, &__block_literal_global_6);
}

void __TSSEnableStyleValidation_block_invoke()
{
  if (!--String)
  {
    CFAbsoluteTimeGetCurrent();
    String = 0;
  }
}

void __TSSSuppressStyleValidation_block_invoke()
{
  if (!String++)
  {
    String = CFAbsoluteTimeGetCurrent();
    String = 0x4000000000000000;
  }
}

void sub_2235A1318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235A26C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235A2748(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235A282C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2235A3538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2235A4180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void sub_2235AD39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2235B32B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TSDImageMaxAllowedDataLength()
{
  if (objc_msgSend(+[TSDCapabilities currentCapabilities](TSDCapabilities, "currentCapabilities"), "isRendererH4OrBelow"))return 0x2000000; {
  else
  }
    return 0x4000000;
}

uint64_t TSDDirectionOpposite(uint64_t a1)
{
  return TSDDirectionOpposite_opposite[a1];
}

uint64_t TSDDirectionTurnRight(uint64_t a1)
{
  return TSDDirectionTurnRight_rightTurn[a1];
}

double TSDDirectionDelta(uint64_t a1)
{
  return TSDDirectionDelta_deltas[2 * a1];
}

id TSDResampledImageFromProvider(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  [a1 naturalSize];
  double v15 = v14;
  double v17 = v16;
  objc_opt_class();
  uint64_t v18 = (void *)TSUDynamicCast();
  if (v18) {
    BOOL v19 = v15 <= a6;
  }
  else {
    BOOL v19 = 0;
  }
  if (v19 && a2 == 0 && v17 <= a7)
  {
    uint64_t v29 = v18;
    if ((a5 & 4) == 0 || ([v18 isOpaque] & 1) == 0)
    {
      int v30 = (void *)[v29 imageData];
      uint64_t v31 = objc_msgSend(+[TSDCapabilities currentCapabilities](TSDCapabilities, "currentCapabilities"), "isRendererH4OrBelow")? 0x2000000: 0x4000000;
      if (![v30 isLengthLikelyToBeGreaterThan:v31]) {
        return 0;
      }
    }
  }
  unint64_t v22 = (__CFString *)[a3 stringByDeletingPathExtension];
  if (!v22 || (unint64_t v23 = v22, ![(__CFString *)v22 length])) {
    unint64_t v23 = @"image";
  }
  uint64_t v24 = [(__CFString *)v23 stringByAppendingString:@"-small"];
  unint64_t v25 = -[TSDImageResamplingOperation initWithImageProvider:desiredSize:]([TSDImageResamplingOperation alloc], "initWithImageProvider:desiredSize:", a1, a6, a7);
  [(TSDImageResamplingOperation *)v25 setDisplayName:v24];
  [(TSDImageResamplingOperation *)v25 setObjectContext:a4];
  [(TSDImageResamplingOperation *)v25 setMaskingPath:a2];
  id v26 = [(TSDImageResamplingOperation *)v25 performResampleOperationWithResampleOptions:a5 bitmapContextOptions:9];
  id v27 = v26;

  return v26;
}

id TSDResampleImageData(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  id v9 = a1;
  if (!a1)
  {
    uint64_t v10 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "TSPData *TSDResampleImageData(TSPData *, CGSize, CGPathRef, TSDImageResampleOptions)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 143, @"invalid nil value for '%s'", "sourceImageData");
  }
  if (a4 <= 0.0 || a5 <= 0.0)
  {
    uint64_t v12 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "TSPData *TSDResampleImageData(TSPData *, CGSize, CGPathRef, TSDImageResampleOptions)");
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 144, @"bogus size to resample");
  }
  if (objc_msgSend(+[TSDCapabilities currentCapabilities](TSDCapabilities, "currentCapabilities"), "isRendererH4OrBelow"))uint64_t v14 = 0x2000000; {
  else
  }
    uint64_t v14 = 0x4000000;
  if ([v9 isLengthLikelyToBeGreaterThan:v14]) {
    return 0;
  }
  double v16 = 0;
  if (v9 && a4 > 0.0 && a5 > 0.0)
  {
    id v17 = objc_alloc_init(MEMORY[0x263F086B0]);
    uint64_t v18 = objc_msgSend(+[TSDImageProviderPool sharedPool](TSDImageProviderPool, "sharedPool"), "temporaryProviderForData:shouldValidate:", v9, 1);
    char v19 = [v18 isError];
    if ((a3 & 2) != 0)
    {
      if (v19)
      {
LABEL_20:
        id v21 = v9;

        double v16 = v9;
        goto LABEL_21;
      }
    }
    else
    {
      objc_opt_class();
      unint64_t v20 = (void *)TSUDynamicCast();
      if (!v20 || ([v20 isValid] & 1) == 0) {
        goto LABEL_20;
      }
    }
    id v9 = TSDResampledImageFromProvider(v18, a2, (void *)[v9 filename], objc_msgSend(v9, "context"), a3, a4, a5);
    goto LABEL_20;
  }
LABEL_21:

  return v16;
}

id TSDPossiblyResampledImageDataFromNSData(void *a1, uint64_t a2, void *a3, uint64_t a4, double a5, double a6)
{
  if (!a1)
  {
    unint64_t v25 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v26 = objc_msgSend(NSString, "stringWithUTF8String:", "TSPData *TSDPossiblyResampledImageDataFromNSData(NSData *, CGSize, TSPObjectContext *, NSString *, TSDImageResampleOptions)");
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 185, @"invalid nil value for '%s'", "imageNSData");
    if (a2) {
      goto LABEL_3;
    }
LABEL_24:
    id v27 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v28 = objc_msgSend(NSString, "stringWithUTF8String:", "TSPData *TSDPossiblyResampledImageDataFromNSData(NSData *, CGSize, TSPObjectContext *, NSString *, TSDImageResampleOptions)");
    objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 186, @"invalid nil value for '%s'", "context");
    goto LABEL_3;
  }
  if (!a2) {
    goto LABEL_24;
  }
LABEL_3:
  if (a5 <= 0.0 || a6 <= 0.0)
  {
    uint64_t v12 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "TSPData *TSDPossiblyResampledImageDataFromNSData(NSData *, CGSize, TSPObjectContext *, NSString *, TSDImageResampleOptions)");
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 187, @"bogus size to resample");
  }
  unint64_t v14 = [a1 length];
  int v15 = objc_msgSend(+[TSDCapabilities currentCapabilities](TSDCapabilities, "currentCapabilities"), "isRendererH4OrBelow");
  unint64_t v16 = 0x4000000;
  if (v15) {
    unint64_t v16 = 0x2000000;
  }
  if (v14 > v16) {
    return 0;
  }
  id v18 = 0;
  if (a5 > 0.0 && a1 && a2 && a6 > 0.0)
  {
    id v19 = objc_alloc_init(MEMORY[0x263F086B0]);
    id v20 = +[TSPData readOnlyDataFromNSData:a1 filename:a3 context:0];
    id v21 = [(TSDImageProvider *)[TSDBitmapImageProvider alloc] initWithImageData:v20];
    unint64_t v22 = v21;
    if (!v21
      || ![(TSDBitmapImageProvider *)v21 isValid]
      || (id v23 = TSDResampledImageFromProvider(v22, 0, a3, a2, a4, a5, a6)) == 0
      || (id v18 = v23, v23 == v20))
    {
      id v18 = +[TSPData dataFromNSData:a1 filename:a3 context:a2];
    }
    id v24 = v18;
  }

  return v18;
}

void _TSDBitmapContextClearContextInfo(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", 0), "pointerValue");
      v4[0] = MEMORY[0x263EF8330];
      v4[1] = 3221225472;
      _WORD v4[2] = __TSDClearCGContextInfo_block_invoke;
      uint64_t v4[3] = &__block_descriptor_40_e33_v16__0__TSUPointerKeyDictionary_8l;
      v4[4] = v3;
      TSDAccessCGContextInfoDictionaryWithBlock(1, 0, (uint64_t)v4);
    }
  }
}

uint64_t TSDClearCGContextInfo(uint64_t a1)
{
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 3221225472;
  v2[2] = __TSDClearCGContextInfo_block_invoke;
  void v2[3] = &__block_descriptor_40_e33_v16__0__TSUPointerKeyDictionary_8l;
  v2[4] = a1;
  return TSDAccessCGContextInfoDictionaryWithBlock(1, 0, (uint64_t)v2);
}

CGContext *TSDBitmapContextCreate(char a1, double a2)
{
  size_t v3 = (unint64_t)TSDCeilSize(a2);
  size_t v5 = (unint64_t)v4;
  if (a1)
  {
    if ((a1 & 0x20) != 0) {
      uint64_t v10 = TSUP3ColorSpace();
    }
    else {
      uint64_t v10 = TSUDeviceRGBColorSpace();
    }
    uint64_t v8 = (CGColorSpace *)v10;
    if ((a1 & 4) != 0) {
      int v12 = 4102;
    }
    else {
      int v12 = 8198;
    }
    uint64_t v13 = 5;
    if ((a1 & 4) == 0) {
      uint64_t v13 = 8;
    }
    if ((a1 & 0x10) != 0) {
      int v14 = 8193;
    }
    else {
      int v14 = 8194;
    }
    if ((a1 & 2) != 0) {
      uint32_t v9 = v14;
    }
    else {
      uint32_t v9 = v12;
    }
    if ((a1 & 2) != 0) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = v13;
    }
  }
  else
  {
    if ((a1 & 2) != 0)
    {
      uint64_t v8 = 0;
      uint32_t v9 = 7;
    }
    else
    {
      uint64_t v6 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
      uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "CGContextRef TSDBitmapContextCreate(CGSize, TSDBitmapContextOptions)");
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 304, @"Must include a color or alpha channel.");
      uint64_t v8 = 0;
      uint32_t v9 = 8194;
    }
    size_t v11 = 8;
  }
  size_t AlignedBytesPerRow = TSUBitmapGetAlignedBytesPerRow();
  id releaseInfo = objc_alloc_init(MEMORY[0x263EFF980]);
  id v17 = CGBitmapContextCreateWithData(0, v3, v5, v11, AlignedBytesPerRow, v8, v9, (CGBitmapContextReleaseDataCallback)_TSDBitmapContextClearContextInfo, releaseInfo);
  objc_msgSend(releaseInfo, "addObject:", objc_msgSend(MEMORY[0x263F08D40], "valueWithPointer:", v17));
  TSDSetCGContextInfo((uint64_t)v17, 0, 0, 0, 0, 1.0);
  if ((a1 & 8) != 0)
  {
    CGContextTranslateCTM(v17, 0.0, (double)v5);
    CGContextScaleCTM(v17, 1.0, -1.0);
  }
  return v17;
}

void TSDSetCGContextInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  int v12 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x263F08B88], "currentThread"), "threadDictionary"), "objectForKey:", @"TSDTilingTileLayerPositionTLSKey");
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 CGPointValue];
    double v15 = v14;
    double v17 = v16;
  }
  else
  {
    double v15 = *MEMORY[0x263F00148];
    double v17 = *(double *)(MEMORY[0x263F00148] + 8);
  }

  TSDSetCGContextInfoWithTileOffset(a1, a2, a3, a4, v13 != 0, a5, a6, v15, v17);
}

void *TSUCompositeImageWithColor(void *result, void *a2, CGBlendMode a3, CGFloat a4)
{
  if (result)
  {
    uint64_t v7 = result;
    [result scale];
    double v9 = v8;
    [v7 size];
    double v12 = TSDMultiplySizeScalar(v10, v11, v9);
    uint64_t v13 = TSDBitmapContextCreate(3, v12);
    double v14 = TSDRectWithSize();
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    id v21 = (CGImage *)[v7 CGImage];
    v24.origin.CGFloat x = v14;
    v24.origin.double y = v16;
    v24.size.CGFloat width = v18;
    v24.size.CGFloat height = v20;
    CGContextDrawImage(v13, v24, v21);
    CGContextSetFillColorWithColor(v13, (CGColorRef)[a2 CGColor]);
    CGContextSetAlpha(v13, a4);
    CGContextSetBlendMode(v13, a3);
    v25.origin.CGFloat x = v14;
    v25.origin.double y = v16;
    v25.size.CGFloat width = v18;
    v25.size.CGFloat height = v20;
    CGContextFillRect(v13, v25);
    Image = CGBitmapContextCreateImage(v13);
    uint64_t v23 = [MEMORY[0x263F7C858] imageWithCGImage:Image scale:0 orientation:v9];
    CGImageRelease(Image);
    CGContextRelease(v13);
    return (void *)v23;
  }
  return result;
}

double TSDComputeBoxTransformAndSizeForPDFPage(CGPDFPage *a1, uint64_t a2, CGFloat *a3)
{
  return TSDComputeBoxTransformAndSizeForPDFPageIgnoringAngle(a1, a2, a3, 0);
}

double TSDComputeBoxTransformAndSizeForPDFPageIgnoringAngle(CGPDFPage *a1, uint64_t a2, CGFloat *a3, int a4)
{
  if (!a1)
  {
    uint64_t v29 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v30 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect TSDComputeBoxTransformAndSizeForPDFPageIgnoringAngle(CGPDFPageRef, CGAffineTransform *, CGSize *, BOOL)");
    objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v30, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 485, @"invalid nil value for '%s'", "page");
    return *MEMORY[0x263F001A8];
  }
  CGRect BoxRect = CGPDFPageGetBoxRect(a1, kCGPDFMediaBox);
  CGFloat x = BoxRect.origin.x;
  CGFloat y = BoxRect.origin.y;
  CGFloat width = BoxRect.size.width;
  CGFloat height = BoxRect.size.height;
  CGRect v36 = CGPDFPageGetBoxRect(a1, kCGPDFCropBox);
  CGFloat v12 = v36.origin.x;
  CGFloat v13 = v36.origin.y;
  CGFloat v14 = v36.size.width;
  CGFloat v15 = v36.size.height;
  CGRect v45 = CGPDFPageGetBoxRect(a1, kCGPDFArtBox);
  v37.origin.CGFloat x = x;
  v37.origin.CGFloat y = y;
  v37.size.CGFloat width = width;
  v37.size.CGFloat height = height;
  CGRect v46 = CGRectIntersection(v37, v45);
  v38.origin.CGFloat x = v12;
  v38.origin.CGFloat y = v13;
  v38.size.CGFloat width = v14;
  v38.size.CGFloat height = v15;
  CGRect v39 = CGRectIntersection(v38, v46);
  double v16 = v39.origin.x;
  CGFloat v17 = v39.origin.y;
  CGFloat v18 = v39.size.width;
  CGFloat v19 = v39.size.height;
  double MinX = CGRectGetMinX(v39);
  v40.origin.CGFloat x = v16;
  v40.origin.CGFloat y = v17;
  v40.size.CGFloat width = v18;
  v40.size.CGFloat height = v19;
  double MinY = CGRectGetMinY(v40);
  v41.origin.CGFloat x = v16;
  v41.origin.CGFloat y = v17;
  v41.size.CGFloat width = v18;
  v41.size.CGFloat height = v19;
  double MaxX = CGRectGetMaxX(v41);
  v42.origin.CGFloat x = v16;
  v42.origin.CGFloat y = v17;
  v42.size.CGFloat width = v18;
  v42.size.CGFloat height = v19;
  CGFloat MaxY = CGRectGetMaxY(v42);
  v43.origin.CGFloat x = v16;
  v43.origin.CGFloat y = v17;
  v43.size.CGFloat width = v18;
  v43.size.CGFloat height = v19;
  CGFloat v22 = CGRectGetWidth(v43);
  v44.origin.CGFloat x = v16;
  v44.origin.CGFloat y = v17;
  v44.size.CGFloat width = v18;
  v44.size.CGFloat height = v19;
  CGFloat v23 = CGRectGetHeight(v44);
  int RotationAngle = CGPDFPageGetRotationAngle(a1);
  if (a4) {
    int v25 = 0;
  }
  else {
    int v25 = RotationAngle;
  }
  if (v25 == 90)
  {
    long long v27 = xmmword_2238393E0;
    double v28 = MaxX;
    double MaxX = -MinY;
    double v26 = 1.0;
LABEL_11:
    CGFloat v31 = v23;
    CGFloat v23 = v22;
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  double v26 = 0.0;
  if (v25 == 180)
  {
    long long v27 = xmmword_2238393D0;
    double v28 = MaxY;
  }
  else
  {
    if (v25 == 270)
    {
      long long v27 = xmmword_2238393F0;
      double v28 = -MinX;
      double v26 = -1.0;
      double MaxX = MaxY;
      goto LABEL_11;
    }
    double MaxX = -MinX;
    long long v27 = xmmword_223839400;
    double v28 = -MinY;
  }
  CGFloat v31 = v22;
  if (a2)
  {
LABEL_12:
    *(_OWORD *)a2 = v27;
    *(double *)(a2 + ++*(void *)(this + 16) = v26;
    *(void *)(a2 + 24) = v27;
    *(double *)(a2 + 32) = MaxX;
    *(double *)(a2 + 40) = v28;
  }
LABEL_13:
  if (a3)
  {
    *a3 = v31;
    a3[1] = v23;
  }
  return v16;
}

__n128 TSDComputeDrawTransformForPDFPage@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>, double a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>, CGFloat a8@<D5>)
{
  memset(&v36, 0, sizeof(v36));
  CGAffineTransformMakeTranslation(&v36, a3 * -0.5, a4 * -0.5);
  __n128 v16 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v16;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v36;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v17 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v17;
  a1[2] = *(__n128 *)&v35.tx;
  CGFloat v18 = a5;
  v17.n128_f64[0] = a6;
  CGFloat v19 = a7;
  CGFloat v20 = a8;
  tCGFloat x = CGRectGetMinX(*(CGRect *)((char *)&v17 - 8));
  v37.origin.CGFloat x = a5;
  v37.origin.CGFloat y = a6;
  v37.size.CGFloat width = a7;
  v37.size.CGFloat height = a8;
  CGFloat MinY = CGRectGetMinY(v37);
  v38.origin.CGFloat x = a5;
  v38.origin.CGFloat y = a6;
  v38.size.CGFloat width = a7;
  v38.size.CGFloat height = a8;
  double Width = CGRectGetWidth(v38);
  v39.origin.CGFloat x = a5;
  v39.origin.CGFloat y = a6;
  v39.size.CGFloat width = a7;
  v39.size.CGFloat height = a8;
  double Height = CGRectGetHeight(v39);
  CGAffineTransformMakeScale(&v35, Width / a3, Height / a4);
  CGAffineTransform v36 = v35;
  __n128 v24 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v24;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v35;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v25 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v25;
  a1[2] = *(__n128 *)&v35.tx;
  CGAffineTransformMakeTranslation(&v35, Width * 0.5, Height * 0.5);
  CGAffineTransform v36 = v35;
  __n128 v26 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v26;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v35;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v27 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v27;
  a1[2] = *(__n128 *)&v35.tx;
  CGAffineTransformMakeTranslation(&v35, tx, MinY);
  CGAffineTransform v36 = v35;
  __n128 v28 = a1[1];
  *(__n128 *)&t1.a = *a1;
  *(__n128 *)&t1.c = v28;
  *(__n128 *)&t1.tCGFloat x = a1[2];
  CGAffineTransform t2 = v35;
  CGAffineTransformConcat(&v35, &t1, &t2);
  __n128 v29 = *(__n128 *)&v35.c;
  *a1 = *(__n128 *)&v35.a;
  a1[1] = v29;
  a1[2] = *(__n128 *)&v35.tx;
  __n128 v30 = a1[1];
  *a2 = *a1;
  a2[1] = v30;
  __n128 result = a1[2];
  a2[2] = result;
  return result;
}

uint64_t TSDSetCGContextInfoForShadowContext(uint64_t a1, double a2)
{
  TSDSetCGContextInfo(a1, 0, 0, 0, 0, 1.0);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  id v5[2] = __TSDSetCGContextInfoForShadowContext_block_invoke;
  void v5[3] = &__block_descriptor_48_e33_v16__0__TSUPointerKeyDictionary_8l;
  v5[4] = a1;
  *(double *)&v5[5] = a2;
  return TSDAccessCGContextInfoDictionaryWithBlock(1, 1, (uint64_t)v5);
}

uint64_t __TSDSetCGContextInfoForShadowContext_block_invoke(uint64_t a1, void *a2)
{
  objc_opt_class();
  [a2 objectForKey:*(void *)(a1 + 32)];
  double v4 = (void *)TSUDynamicCast();
  if (!v4)
  {
    size_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSDSetCGContextInfoForShadowContext(CGContextRef, CGFloat)_block_invoke");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 626, @"invalid nil value for '%s'", "dict");
  }
  double v7 = *(double *)(a1 + 40);
  *(float *)&double v7 = v7;
  uint64_t v8 = [NSNumber numberWithFloat:v7];

  return [v4 setValue:v8 forKey:@"TSDCGContextInfoDictionaryKeyShadowedLayoutAngle"];
}

uint64_t TSDCGContextUpdateLayoutAngle(uint64_t a1, double a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextUpdateLayoutAngle_block_invoke;
  v3[3] = &__block_descriptor_48_e33_v16__0__TSUPointerKeyDictionary_8l;
  v3[4] = a1;
  *(double *)&v3[5] = a2;
  return TSDAccessCGContextInfoDictionaryWithBlock(1, 1, (uint64_t)v3);
}

uint64_t __TSDCGContextUpdateLayoutAngle_block_invoke(uint64_t a1, void *a2)
{
  objc_opt_class();
  [a2 objectForKey:*(void *)(a1 + 32)];
  double v4 = (void *)TSUDynamicCast();
  if (!v4)
  {
    size_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSDCGContextUpdateLayoutAngle(CGContextRef, CGFloat)_block_invoke");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 635, @"invalid nil value for '%s'", "dict");
  }
  double v7 = *(double *)(a1 + 40);
  *(float *)&double v7 = v7;
  uint64_t v8 = [NSNumber numberWithFloat:v7];

  return [v4 setValue:v8 forKey:@"TSDCGContextInfoDictionaryKeyLayoutAngle"];
}

uint64_t TSDCGContextSetIsReflection(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextSetIsReflection_block_invoke;
  v3[3] = &__block_descriptor_41_e33_v16__0__TSUPointerKeyDictionary_8l;
  v3[4] = a1;
  char v4 = a2;
  return TSDAccessCGContextInfoDictionaryWithBlock(1, 1, (uint64_t)v3);
}

uint64_t __TSDCGContextSetIsReflection_block_invoke(uint64_t a1, void *a2)
{
  objc_opt_class();
  [a2 objectForKey:*(void *)(a1 + 32)];
  char v4 = (void *)TSUDynamicCast();
  if (!v4)
  {
    size_t v5 = (void *)[MEMORY[0x263F7C7F0] currentHandler];
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void TSDCGContextSetIsReflection(CGContextRef, BOOL)_block_invoke");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/drawables/TSDUtility.m"), 644, @"invalid nil value for '%s'", "dict");
  }
  uint64_t v7 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];

  return [v4 setValue:v7 forKey:@"TSDCGContextInfoDictionaryKeyIsReflection"];
}

uint64_t TSDCGContextSetBitmapQualityInfo(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextSetBitmapQualityInfo_block_invoke;
  v3[3] = &unk_2646B16B8;
  v3[4] = a2;
  void v3[5] = a1;
  return TSDAccessCGContextInfoDictionaryWithBlock(1, 1, (uint64_t)v3);
}

uint64_t __TSDCGContextSetBitmapQualityInfo_block_invoke(uint64_t a1, void *a2)
{
  objc_opt_class();
  [a2 objectForKey:*(void *)(a1 + 40)];
  char v4 = (void *)TSUDynamicCast();
  if (!v4) {
    char v4 = (void *)[MEMORY[0x263EFF9A0] dictionaryWithCapacity:1];
  }
  [v4 setValue:*(void *)(a1 + 32) forKey:@"TSDCGContextInfoDictionaryKeyBitmapQualityInfo"];
  uint64_t v5 = *(void *)(a1 + 40);

  return [a2 setObject:v4 forKey:v5];
}

void TSDSetCGContextInfoWithTileOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, double a7, double a8, double a9)
{
  id v18 = objc_alloc(MEMORY[0x263EFF9A0]);
  uint64_t v19 = [NSNumber numberWithBool:a2];
  uint64_t v20 = [NSNumber numberWithBool:a3];
  uint64_t v21 = [NSNumber numberWithBool:a4];
  *(float *)&double v22 = a7;
  uint64_t v23 = [NSNumber numberWithFloat:v22];
  if (a5) {
    uint64_t v24 = objc_msgSend(MEMORY[0x263F08D40], "valueWithCGPoint:", a8, a9);
  }
  else {
    uint64_t v24 = [MEMORY[0x263EFF9D0] null];
  }
  __n128 v25 = objc_msgSend(v18, "initWithObjectsAndKeys:", v19, @"TSDCGContextInfoDictionaryKeyIsPrintContext", v20, @"TSDCGContextInfoDictionaryKeyIsPDFContext", v21, @"TSDCGContextInfoDictionaryKeyIsCALayerContext", v23, @"TSDCGContextInfoDictionaryKeyAssociatedScreenScale", v24, @"TSDCGContextInfoDictionaryKeyTileOffset", objc_msgSend(NSNumber, "numberWithBool:", a6), @"TSDCGContextInfoDictionaryKeyHasBackgroundsSuppressed", 0);
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 3221225472;
  void v26[2] = __TSDSetCGContextInfoWithTileOffset_block_invoke;
  void v26[3] = &unk_2646B16B8;
  void v26[4] = v25;
  _OWORD v26[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(1, 1, (uint64_t)v26);
}

uint64_t __TSDSetCGContextInfoWithTileOffset_block_invoke(uint64_t a1, void *a2)
{
  objc_opt_class();
  [a2 objectForKey:*(void *)(a1 + 40)];
  char v4 = (void *)TSUDynamicCast();
  uint64_t v5 = *(void **)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = v4;
    [v4 addEntriesFromDictionary:v5];
    uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(a1 + 40);

  return [a2 setObject:v5 forKey:v7];
}

uint64_t __TSDClearCGContextInfo_block_invoke(uint64_t a1, void *a2)
{
  return [a2 removeObjectForKey:*(void *)(a1 + 32)];
}

__CFString *NSStringFromCGLineCap(unsigned int a1)
{
  if (a1 > 2) {
    return @"invalid CGLineCap";
  }
  else {
    return off_2646B1720[a1];
  }
}

__CFString *NSStringFromCGLineJoin(unsigned int a1)
{
  if (a1 > 2) {
    return @"invalid CGLineJoin";
  }
  else {
    return off_2646B1738[a1];
  }
}

double TSDCGContextGetShadowedLayoutAngle(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = (double *)&v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextGetShadowedLayoutAngle_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  double v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BCCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double __TSDCGContextGetShadowedLayoutAngle_block_invoke(uint64_t a1, void *a2)
{
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyShadowedLayoutAngle"), "floatValue");
  double result = v3;
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t TSDCGContextIsShadowContext(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextIsShadowContext_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BCE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __TSDCGContextIsShadowContext_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyShadowedLayoutAngle");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result != 0;
  return result;
}

uint64_t TSDCGContextGetIsReflection(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextGetIsReflection_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BCF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __TSDCGContextGetIsReflection_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyIsReflection"), "BOOLValue");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t TSDCGContextGetBitmapQualityInfo(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x3052000000;
  char v7 = __Block_byref_object_copy__11;
  uint64_t v8 = __Block_byref_object_dispose__11;
  uint64_t v9 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextGetBitmapQualityInfo_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  uint64_t v1 = v5[5];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BD048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

uint64_t __TSDCGContextGetBitmapQualityInfo_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyBitmapQualityInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

double TSDCGContextGetLayoutAngle(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = (double *)&v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextGetLayoutAngle_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  double v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BD174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double __TSDCGContextGetLayoutAngle_block_invoke(uint64_t a1, void *a2)
{
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyLayoutAngle"), "floatValue");
  double result = v3;
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t TSDCGContextIsPrintContext(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextIsPrintContext_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BD284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __TSDCGContextIsPrintContext_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyIsPrintContext"), "BOOLValue");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __TSDCGContextHasBackgroundsSuppressed_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyHasBackgroundsSuppressed"), "BOOLValue");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t TSDCGContextIsPDFContext(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextIsPDFContext_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BD3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __TSDCGContextIsPDFContext_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyIsPDFContext"), "BOOLValue");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t TSDCGContextIsCALayerContext(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextIsCALayerContext_block_invoke;
  v3[3] = &unk_2646B1700;
  v3[4] = &v4;
  void v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2235BD4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __TSDCGContextIsCALayerContext_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", *(void *)(a1 + 40)), "objectForKey:", @"TSDCGContextInfoDictionaryKeyIsCALayerContext"), "BOOLValue");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}