uint64_t PluginsManager::get(PluginsManager *this)
{
  void *v2;
  void ***v3;
  void **v4;

  v2 = &__block_literal_global;
  if (atomic_load_explicit((atomic_ullong *volatile)&PluginsManager::get(void)::initOnce, memory_order_acquire) != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&PluginsManager::get(void)::initOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>);
  }
  return PluginsManager::manager;
}

void ___ZN14PluginsManager3getEv_block_invoke()
{
}

void PluginsManager::get_plugin_ptr(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v27[19] = *MEMORY[0x263EF8340];
  v22.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v22.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v8 = std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>(a1, (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(void *)a4 = v8[7];
    char v9 = 1;
LABEL_19:
    *(unsigned char *)(a4 + 16) = v9;
    goto LABEL_20;
  }
  std::unique_lock<std::mutex>::unlock(&v22);
  if (!a3 || !os_variant_allows_internal_security_policies())
  {
    *(void *)&long long v20 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((void *)&v20 + 1) = 63;
    int v21 = 16;
    di_log::logger<di_log::log_printer<92ul>>::logger(v23, &v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Plugin ", 7);
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      v16 = (void *)a2;
    }
    else {
      v16 = *(void **)a2;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" is not registered", 18);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf((uint64_t)v23);
    MEMORY[0x223C24910](v27);
    v18 = std::generic_category();
    char v9 = 0;
    *(void *)a4 = 45;
    *(void *)(a4 + 8) = v18;
    goto LABEL_19;
  }
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "com.apple.raw");
    v23[3] = rawTestPluginCreate;
    v23[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(v24, "com.apple.diskimage-plugin.nbd");
    v24[3] = amberPluginCreate;
    v24[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, "com.apple.diskimage-plugin.amber");
    v25[3] = amberPluginCreate;
    v25[4] = 16;
    std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::map[abi:ne180100]((uint64_t)&register_internal_plugin(std::string const&)::internal_plugins, v23, 3);
    for (uint64_t i = 0; i != -15; i -= 5)
    {
      if (SHIBYTE(v25[i + 2]) < 0) {
        operator delete((void *)v25[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::~map[abi:ne180100], &register_internal_plugin(std::string const&)::internal_plugins, &dword_21E237000);
  }
  if (std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>((uint64_t)&register_internal_plugin(std::string const&)::internal_plugins, (void **)a2) != (void **)&unk_267D2B0A0)
  {
    v23[0] = (void *)a2;
    v10 = std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&register_internal_plugin(std::string const&)::internal_plugins, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v23);
    int v11 = *(char *)(a2 + 23);
    v12 = *(PluginsManager **)a2;
    uint64_t v13 = ((uint64_t (*)(uint64_t))v10[7])(v10[8]);
    if (v11 >= 0) {
      v14 = (PluginsManager *)a2;
    }
    else {
      v14 = v12;
    }
    di_plugin_register(v14, v13);
  }
  PluginsManager::get_plugin_ptr(a1, a2, 0);
LABEL_20:
  if (v22.__owns_) {
    std::mutex::unlock(v22.__m_);
  }
}

void sub_21E2394CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = 0;
  while (1)
  {
    if (*(char *)(v18 + v20 + 103) < 0) {
      operator delete(*(void **)(v18 + v20 + 80));
    }
    v20 -= 40;
    if (v20 == -120)
    {
      if (a14) {
        std::mutex::unlock(a13);
      }
      _Unwind_Resume(a1);
    }
  }
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    di_log::logger<di_log::log_printer<92ul>>::logger();
  }
}

void *di_log::logger<di_log::log_printer<92ul>>::logger(void *a1, long long *a2)
{
  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<92ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1E218;
  a1[45] = &unk_26CF1E318;
  a1[46] = &unk_26CF1E340;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1E218;
  a1[45] = &unk_26CF1E2A0;
  a1[46] = &unk_26CF1E2C8;
  return a1;
}

void sub_21E2396AC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *PluginsManager::create_plugin_image(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v7 = *__error();
  if (DIForwardLogs())
  {
    v18[0] = 0;
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEFAULT);
    uint64_t buf = 0x6704100402;
    char v9 = "RO";
    std::unique_lock<std::mutex> v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    __int16 v21 = 2080;
    if ((a3 & 3) != 0) {
      char v9 = "RW";
    }
    __int16 v23 = 2080;
    v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = a4;
    v10 = (const char *)_os_log_send_and_compose_impl();
    if (v10)
    {
      int v11 = (char *)v10;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v10);
      free(v11);
    }
  }
  else
  {
    v12 = getDIOSLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = "RW";
      uint64_t buf = 0x6704100402;
      std::unique_lock<std::mutex> v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      __int16 v21 = 2080;
      if ((a3 & 3) == 0) {
        uint64_t v13 = "RO";
      }
      __int16 v23 = 2080;
      v24 = v13;
      __int16 v25 = 2112;
      uint64_t v26 = a4;
      _os_log_impl(&dword_21E237000, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Creating %s plugin instance with params: %@", (uint8_t *)&buf, 0x26u);
    }
  }
  *__error() = v7;
  v18[1] = a4;
  v19 = 0;
  LODWORD(v18[0]) = 16;
  HIDWORD(v18[0]) = a3;
  v14 = (void *)(*(uint64_t (**)(void *, __CFError **))(a2 + 8))(v18, &v19);
  int v15 = v14;
  if (v14 && *(_DWORD *)v14 <= 0x57u)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"Plugin image struct size ", 25);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }
  verify_plugin_image(v14, v19);
  return v15;
}

void sub_21E2399C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_21E239B78(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 112);
  return a1;
}

void *verify_plugin_image(void *result, __CFError *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!result)
  {
    if (a2)
    {
      int v7 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t buf = 68158210;
        int v16 = 71;
        __int16 v17 = 2080;
        uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        __int16 v19 = 2114;
        uint64_t v20 = a2;
        char v9 = (const char *)_os_log_send_and_compose_impl();
        if (v9)
        {
          v10 = (char *)v9;
          fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
          free(v10);
        }
      }
      else
      {
        int v11 = getDIOSLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          int v16 = 71;
          __int16 v17 = 2080;
          uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          __int16 v19 = 2114;
          uint64_t v20 = a2;
          _os_log_impl(&dword_21E237000, v11, OS_LOG_TYPE_ERROR, "%.*s: Failed initializing plugin: %{public}@", buf, 0x1Cu);
        }
      }
      *__error() = v7;
      v12 = a2;
      int Code = CFErrorGetCode(a2);
      if (Code < 0) {
        int v14 = Code;
      }
      else {
        int v14 = -Code;
      }
      CFRelease(v12);
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin initialization failed";
      unsigned int v4 = v14;
    }
    else
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin bug: returned init failure without supplying the error";
      unsigned int v4 = -14;
    }
LABEL_9:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v3, v4);
  }
  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    uint64_t v3 = "Mandatory callbacks in the plugin's image struct are missing";
    unsigned int v4 = -22;
    goto LABEL_9;
  }
  return result;
}

void *PluginsManager::decode_plugin_image(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v7 = *__error();
  if (DIForwardLogs())
  {
    uint64_t v17 = 0;
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)uint64_t buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 114;
    __int16 v19 = 2080;
    uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 114;
      __int16 v19 = 2080;
      uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl(&dword_21E237000, v11, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }
  *__error() = v7;
  *(void *)uint64_t buf = 0;
  v12 = *(uint64_t (**)(long long *, uint64_t, uint8_t *))(a2 + 16);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  uint64_t v13 = (void *)v12(&v15, a4, buf);
  return verify_plugin_image(v13, *(__CFError **)buf);
}

uint64_t PluginsManager::register_plugin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967274;
  }
  if (*(_DWORD *)(a3 + 4) != 1)
  {
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v15.__r_.__value_.__l.__size_ = 31;
    LODWORD(v15.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<147ul>>::logger(&v12, (long long *)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Plugin version ", 15);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" is incompatible with the framework, expected ", 46);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf((uint64_t)&v12);
    goto LABEL_6;
  }
  if (*(_DWORD *)a3 <= 0x27u)
  {
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v15.__r_.__value_.__l.__size_ = 31;
    LODWORD(v15.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<152ul>>::logger(&v12, (long long *)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Plugin struct size ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf((uint64_t)&v12);
LABEL_6:
    MEMORY[0x223C24910](v14);
    return 4294967209;
  }
  if (!*(void *)(a3 + 8) || !*(void *)(a3 + 16))
  {
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v15.__r_.__value_.__l.__size_ = 31;
    LODWORD(v15.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<157ul>>::logger(&v12, (long long *)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Mandatory callbacks in the plugin's struct are missing", 54);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf((uint64_t)&v12);
    MEMORY[0x223C24910](v14);
    return 4294967274;
  }
  uint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>(a1, (void **)a2))
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v11 = *(std::string *)a2;
    }
    operator new();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
  v15.__r_.__value_.__l.__size_ = 31;
  LODWORD(v15.__r_.__value_.__r.__words[2]) = 16;
  di_log::logger<di_log::log_printer<163ul>>::logger(&v12, (long long *)&v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Plugin ", 7);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    v8 = (const std::string::value_type *)a2;
  }
  else {
    v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" cannot be re-registered", 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf((uint64_t)&v12);
  MEMORY[0x223C24910](v14);
  uint64_t v3 = 4294967279;
  std::mutex::unlock(v6);
  return v3;
}

void sub_21E23A56C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  if (*(char *)(v23 - 73) < 0) {
    operator delete(*(void **)(v23 - 96));
  }
  MEMORY[0x223C249A0](v22, 0x10B3C401459F3A3);
  __cxa_begin_catch(a1);
  PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()((uint64_t)&a9, v21);
  __cxa_rethrow();
}

void sub_21E23A600(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  di_log::logger<di_log::log_printer<171ul>>::~logger((uint64_t)va);
  std::mutex::unlock(v3);
  JUMPOUT(0x21E23A684);
}

void sub_21E23A610()
{
}

void sub_21E23A630(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21E23A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<157ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21E23A648(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  di_log::logger<di_log::log_printer<163ul>>::~logger((uint64_t)va);
  JUMPOUT(0x21E23A654);
}

void sub_21E23A660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<152ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<147ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<147ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1E438;
  a1[45] = &unk_26CF1E538;
  a1[46] = &unk_26CF1E560;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1E438;
  a1[45] = &unk_26CF1E4C0;
  a1[46] = &unk_26CF1E4E8;
  return a1;
}

void sub_21E23A78C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<152ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<152ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1E658;
  a1[45] = &unk_26CF1E758;
  a1[46] = &unk_26CF1E780;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1E658;
  a1[45] = &unk_26CF1E6E0;
  a1[46] = &unk_26CF1E708;
  return a1;
}

void sub_21E23A8F4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<157ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<157ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1E878;
  a1[45] = &unk_26CF1E978;
  a1[46] = &unk_26CF1E9A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1E878;
  a1[45] = &unk_26CF1E900;
  a1[46] = &unk_26CF1E928;
  return a1;
}

void sub_21E23AA5C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<163ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<163ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1EA98;
  a1[45] = &unk_26CF1EB98;
  a1[46] = &unk_26CF1EBC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1EA98;
  a1[45] = &unk_26CF1EB20;
  a1[46] = &unk_26CF1EB48;
  return a1;
}

void sub_21E23ABC4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<171ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<171ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1ECB8;
  a1[45] = &unk_26CF1EDB8;
  a1[46] = &unk_26CF1EDE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1ECB8;
  a1[45] = &unk_26CF1ED40;
  a1[46] = &unk_26CF1ED68;
  return a1;
}

void sub_21E23AD2C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  return a1;
}

void PluginsManager::release_plugin(uint64_t a1, void **a2)
{
  unsigned int v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__erase_unique<std::string>((uint64_t **)a1, a2);
  std::mutex::unlock(v4);
}

void sub_21E23ADEC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFStringRef PluginsManager::copy_plugin_description(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PluginsManager::get_plugin_ptr(a1, a2, 1, (uint64_t)&v8);
  if (v9 && (v5 = *(uint64_t (**)(uint64_t))(v8 + 24)) != 0)
  {
    return (CFStringRef)v5(a3);
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v7 = (const char *)a2;
    }
    else {
      int v7 = *(const char **)a2;
    }
    return CFStringCreateWithCString(0, v7, 0x8000100u);
  }
}

void plugin_header::plugin_header(uint64_t a1, uint64_t a2, uint64_t a3, int a4, long long *a5, uint64_t a6)
{
  v25[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v11;
  }
  uint64_t v12 = PluginsManager::get((PluginsManager *)a1);
  PluginsManager::get_plugin_ptr(v12, a2, 1, (uint64_t)v21);
  if (v22)
  {
    v25[0] = &unk_26CF1F488;
    v25[3] = v25;
    if (a6)
    {
      uint64_t v14 = PluginsManager::get(v13);
      std::string v15 = PluginsManager::decode_plugin_image(v14, v21[0], a5, a6);
      std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v25);
      std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>(&v20, (uint64_t)v15);
    }
    uint64_t v16 = PluginsManager::get(v13);
    plugin_image = PluginsManager::create_plugin_image(v16, v21[0], a4, a3);
    std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v25);
    std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>(&v20, (uint64_t)plugin_image);
  }
  exception = (char *)__cxa_allocate_exception(0x40uLL);
  long long v19 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v21);
  *(void *)exception = &unk_26CF39EE0;
  *(_OWORD *)(exception + 8) = v19;
  exception[24] = 0;
  exception[48] = 0;
  *((void *)exception + 7) = "Failed to get plugin instance";
}

void sub_21E23B0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (*(char *)(v6 + 39) < 0) {
    operator delete(*v7);
  }
  char v9 = *(std::__shared_weak_count **)(v6 + 8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(uint64_t result)
{
  if (*(unsigned char *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CF1F460;
  }
  return result;
}

void DiskImagePlugin::create_sync_ring(DiskImagePlugin *this)
{
  uint64_t v2 = (std::once_flag::_State_type *)((char *)this + 264);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15DiskImagePlugin16create_sync_ringEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_18;
  v3[4] = this;
  unsigned int v4 = v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>);
  }
}

uint64_t ___ZN15DiskImagePlugin16create_sync_ringEv_block_invoke(uint64_t a1)
{
  return std::optional<PluginRing>::emplace[abi:ne180100]<_di_plugin_image_t *,void (&)(io_rings_desc_t *,void *),DiskImagePlugin *,void>((PluginRing *)(*(void *)(a1 + 32) + 56));
}

uint64_t std::optional<PluginRing>::emplace[abi:ne180100]<_di_plugin_image_t *,void (&)(io_rings_desc_t *,void *),DiskImagePlugin *,void>(PluginRing *a1)
{
  if (*((unsigned char *)a1 + 200))
  {
    PluginRing::~PluginRing(a1);
    *(unsigned char *)(v1 + 200) = 0;
  }
  uint64_t result = PluginRing::PluginRing();
  *(unsigned char *)(result + 200) = 1;
  return result;
}

void di_plugin_sync_cqe_callback(int a1, DiskImagePlugin *this)
{
}

uint64_t DiskImagePlugin::sync_enter_and_wait(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PluginRing::set_dest_obj_id(a1 + 56, a2);
  *(void *)(a2 + 16) = a3 + 16;
  uint64_t v6 = io_rings_enter(*(void *)(a1 + 104), 1, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    *(void *)&long long v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((void *)&v9 + 1) = 36;
    int v10 = 16;
    di_log::logger<di_log::log_printer<243ul>>::logger(v11, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"failed to enter SQE to the ring, ret code ", 42);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf((uint64_t)v11);
    MEMORY[0x223C24910](&v13);
  }
  else
  {
    gcd::gcd_semaphore::wait((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }
  return v7;
}

void sub_21E23B3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<243ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<243ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<243ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1EED8;
  a1[45] = &unk_26CF1EFD8;
  a1[46] = &unk_26CF1F000;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1EED8;
  a1[45] = &unk_26CF1EF60;
  a1[46] = &unk_26CF1EF88;
  return a1;
}

void sub_21E23B4E4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImagePlugin::read(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v9 = PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 7));
  if (!v8) {
    return -35;
  }
  uint64_t v10 = v8;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  uint64_t v11 = *(void *)(a4 + 72);
  uint64_t v12 = a3[9];
  v46 = (long long *)(a3 + 9);
  unint64_t v47 = (*(uint64_t (**)(void *, double))(*a1 + 24))(a1, v9);
  memset(v64, 0, sizeof(v64));
  (*(void (**)(_OWORD *__return_ptr, void *))(*a1 + 72))(v64, a1);
  unint64_t v13 = a3[18];
  v45 = a3 + 18;
  unint64_t v14 = (*(void *)(a4 + 144) - v13) & ~((uint64_t)(*(void *)(a4 + 144) - v13) >> 63);
  if (*(void *)&v64[0]
    && v11 - v12 >= *((void *)&v64[0] + 1) * *(void *)&v64[0]
                  + (v14 - 1 + *(void *)&v64[0]) / *(void *)&v64[0] * *(void *)&v64[0])
  {
    uint64_t v15 = *(uint64_t (**)(void))(a1[2] + 32);
    if (v15)
    {
      unsigned int v16 = v15();
      unint64_t v17 = v13;
      if (v16) {
        unint64_t v17 = v13 / v16 * v16;
      }
    }
    else
    {
      unint64_t v17 = a3[18];
    }
    unint64_t v14 = (v14 - 1 + v13 - v17 + *(void *)&v64[0]) / *(void *)&v64[0] * *(void *)&v64[0];
    unint64_t v13 = v17;
  }
  long long v19 = (std::__shared_weak_count *)a3[1];
  uint64_t v51 = *a3;
  v52 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = v10;
  unint64_t v44 = v13;
  v53[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a3 + 25);
  long long v55 = *(_OWORD *)(a3 + 7);
  long long v20 = *(_OWORD *)(a3 + 11);
  long long v56 = *v46;
  uint64_t v54 = a3[6];
  long long v57 = v20;
  char v58 = *((unsigned char *)a3 + 104);
  uint64_t v21 = (std::__shared_weak_count *)a3[15];
  uint64_t v59 = a3[14];
  v60 = v21;
  unint64_t v22 = v14 / v47;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v61 = *((_OWORD *)a3 + 8);
  uint64_t v62 = *v45;
  char v63 = *((unsigned char *)a3 + 152);
  while (!sg_vec_ns::details::sg_vec_iterator::is_end_of_buffers((sg_vec_ns::details::sg_vec_iterator *)&v51))
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)&v55);
    uint64_t v24 = v59;
    uint64_t v23 = v60;
    if (v60)
    {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v14 >= (unint64_t)v61) {
        unint64_t v25 = v61;
      }
      else {
        unint64_t v25 = v14;
      }
      if (!v25)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        break;
      }
    }
    else
    {
      if (v14 >= (unint64_t)v61) {
        unint64_t v25 = v61;
      }
      else {
        unint64_t v25 = v14;
      }
      if (!v25) {
        break;
      }
    }
    uint64_t v26 = v66;
    if (v66 >= v67)
    {
      uint64_t v28 = (v66 - v65) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v67 - v65;
      if ((v67 - v65) >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31) {
        v32 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v67, v31);
      }
      else {
        v32 = 0;
      }
      v33 = &v32[16 * v28];
      *(void *)v33 = v24;
      *((void *)v33 + 1) = v25;
      v35 = v65;
      v34 = v66;
      v36 = v33;
      if (v66 != v65)
      {
        do
        {
          *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
          v36 -= 16;
          v34 -= 16;
        }
        while (v34 != v35);
        v34 = v65;
      }
      uint64_t v27 = v33 + 16;
      v65 = v36;
      v66 = v33 + 16;
      v67 = &v32[16 * v31];
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)v66 = v24;
      *((void *)v26 + 1) = v25;
      uint64_t v27 = v26 + 16;
    }
    v66 = v27;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&v51, (uint64_t)v48);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    v14 -= v25;
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  v37 = v65;
  *(unsigned char *)uint64_t v43 = 2;
  *(void *)(v43 + 24) = v37;
  *(void *)(v43 + 32) = v44 / v47;
  *(void *)(v43 + 40) = 0;
  *(_DWORD *)(v43 + 48) = v22;
  int v38 = DiskImagePlugin::sync_enter_and_wait((uint64_t)a1, v43, a2);
  if (v38 == (unint64_t)v22)
  {
    v39 = (std::__shared_weak_count *)a3[1];
    unint64_t v18 = v47 * v38;
    uint64_t v51 = *a3;
    v52 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v53[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a3 + 25);
    long long v55 = *(_OWORD *)(a3 + 7);
    long long v40 = *(_OWORD *)(a3 + 11);
    long long v56 = *v46;
    uint64_t v54 = a3[6];
    long long v57 = v40;
    char v58 = *((unsigned char *)a3 + 104);
    v41 = (std::__shared_weak_count *)a3[15];
    uint64_t v59 = a3[14];
    v60 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v61 = *((_OWORD *)a3 + 8);
    uint64_t v62 = *v45;
    char v63 = *((unsigned char *)a3 + 152);
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v51, v18);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
  }
  else if (v38 < 0)
  {
    unint64_t v18 = v38;
  }
  else
  {
    unint64_t v18 = -5;
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  return v18;
}

void sub_21E23BA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  v39 = *(void **)(v37 - 120);
  if (v39)
  {
    *(void *)(v37 - 112) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sg_vec_ns::details::sg_vec_iterator::operator++(a1);
}

void sub_21E23BA98(_Unwind_Exception *a1)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator(v1);
  _Unwind_Resume(a1);
}

void sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator(sg_vec_ns::details::sg_vec_iterator *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t DiskImagePlugin::write(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 56));
  if (!v8) {
    return -35;
  }
  uint64_t v9 = v8;
  __p = 0;
  v66 = 0;
  v67 = 0;
  uint64_t v10 = *a3;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)char v58 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v58[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  long long v59 = *(_OWORD *)(a3 + 9);
  long long v60 = *(_OWORD *)(a3 + 11);
  char v61 = *((unsigned char *)a3 + 104);
  uint64_t v15 = a3[14];
  unsigned int v16 = (std::__shared_weak_count *)a3[15];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  unint64_t v18 = a3[18];
  unint64_t v17 = a3 + 18;
  long long v62 = *((_OWORD *)v17 - 1);
  unint64_t v63 = v18;
  char v64 = *((unsigned char *)v17 + 8);
  uint64_t v19 = *a4;
  long long v20 = (std::__shared_weak_count *)a4[1];
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v54 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v54[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v21 = a4[6];
  uint64_t v22 = a4[7];
  uint64_t v23 = a4[8];
  long long v55 = *(_OWORD *)(a4 + 9);
  long long v56 = *(_OWORD *)(a4 + 11);
  char v57 = *((unsigned char *)a4 + 104);
  uint64_t v24 = a4[14];
  unint64_t v25 = (std::__shared_weak_count *)a4[15];
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = 0;
  v84[0] = *(_OWORD *)v58;
  *(_OWORD *)((char *)v84 + 9) = *(_OWORD *)&v58[9];
  long long v87 = v59;
  long long v88 = v60;
  long long v92 = v62;
  v70[0] = *(_OWORD *)v54;
  *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)&v54[9];
  long long v75 = v56;
  uint64_t v82 = v10;
  v83 = v11;
  uint64_t v85 = v12;
  *(void *)&long long v86 = v13;
  *((void *)&v86 + 1) = v14;
  char v89 = v61;
  uint64_t v90 = v15;
  v91 = v16;
  unint64_t v93 = v63;
  char v94 = v64;
  uint64_t v68 = v19;
  v69 = v20;
  uint64_t v71 = v21;
  uint64_t v72 = v22;
  uint64_t v73 = v23;
  char v76 = v57;
  long long v74 = v55;
  uint64_t v77 = v24;
  v78 = v25;
  long long v79 = *((_OWORD *)a4 + 8);
  char v81 = *((unsigned char *)a4 + 152);
  unint64_t v80 = a4[18];
  unint64_t v27 = v80;
  v114[0] = 0;
  v114[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v82, (uint64_t)&v68))
  {
    if (v93 >= v27 || v26 == -1) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v111 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((void *)&v111 + 1) = 104;
      LODWORD(v112) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(&v107, &v111);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"sg: ", 4);
      operator<<(&v109);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v107);
      MEMORY[0x223C24910](&v110);
    }
    *(void *)&long long v107 = 0;
    *((void *)&v107 + 1) = v27;
    char v108 = 2;
    trim_sg_to_interval(&v82, (uint64_t)&v107, (uint64_t)&v111);
    uint64_t v29 = v111;
    int64_t v30 = v112;
    if (v66 >= v67)
    {
      uint64_t v32 = (v66 - __p) >> 4;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v67 - __p;
      if ((v67 - __p) >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35) {
        v36 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v67, v35);
      }
      else {
        v36 = 0;
      }
      uint64_t v37 = &v36[16 * v32];
      *(void *)uint64_t v37 = v29;
      *((void *)v37 + 1) = v30;
      int v38 = v66;
      v39 = v37;
      if (v66 != __p)
      {
        do
        {
          *((_OWORD *)v39 - 1) = *((_OWORD *)v38 - 1);
          v39 -= 16;
          v38 -= 16;
        }
        while (v38 != __p);
        int v38 = __p;
      }
      unint64_t v31 = v37 + 16;
      __p = v39;
      v67 = &v36[16 * v35];
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)v66 = v111;
      *((void *)v66 + 1) = v30;
      unint64_t v31 = v66 + 16;
    }
    v66 = v31;
    uint64_t v40 = (int)v112;
    if ((v112 & 0x80000000) != 0) {
      int64_t v41 = (int)v112;
    }
    else {
      int64_t v41 = v112;
    }
    BOOL v42 = v41 >= 0 || v41 == 0;
    char v43 = v42;
    if (v42)
    {
      unint64_t v44 = v113;
      if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v82, (const sg_vec_ns::details::sg_vec_iterator *)&v68, v113, v41))
      {
        v95[0] = v82;
        v95[1] = v83;
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v96[0] = v84[0];
        *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v84 + 9);
        uint64_t v97 = v85;
        long long v98 = v86;
        long long v99 = v87;
        long long v100 = v88;
        char v101 = v89;
        uint64_t v102 = v90;
        v103 = v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v104 = v92;
        unint64_t v105 = v93;
        char v106 = v94;
        sg_vec_ns::generate_vec_ref((uint64_t)v95, (uint64_t)&v68, (uint64_t)v44, v41, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v107);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v114, (uint64_t)&v107);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v107);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v95);
        sg_vec_ref::begin((sg_vec_ref *)v114, (uint64_t)&v107);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v82, &v107);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v107);
        sg_vec_ref::end((sg_vec_ref *)v114, (uint64_t)&v107);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v68, &v107);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v107);
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v82, v41);
      v26 += v41;
    }
    else
    {
      if ((int)v112 >= 0) {
        uint64_t v40 = -(uint64_t)(int)v112;
      }
      unint64_t v51 = v40;
    }
    if (*((void *)&v111 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v111 + 1));
    }
    if ((v43 & 1) == 0) {
      goto LABEL_60;
    }
  }
  unint64_t v51 = v26;
LABEL_60:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v114);
  if (v78) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
  }
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  unint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 24))(v53);
  unint64_t v46 = *v17 / v45;
  *(unsigned char *)uint64_t v9 = 4;
  *(void *)(v9 + 24) = __p;
  *(void *)(v9 + 32) = v46;
  *(void *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 48) = v51 / v45;
  int v47 = DiskImagePlugin::sync_enter_and_wait(v53, v9, v52);
  uint64_t v48 = -5;
  if (v47 < 0) {
    uint64_t v48 = v47;
  }
  if (v47 == (unint64_t)(v51 / v45)) {
    uint64_t v49 = v45 * v47;
  }
  else {
    uint64_t v49 = v48;
  }
  if (__p) {
    operator delete(__p);
  }
  return v49;
}

void sub_21E23C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (STACK[0x5B8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5B8]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x5E0]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a65);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x260]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a22);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a42);
  if (__p)
  {
    a63 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImagePlugin::flush(uint64_t a1, uint64_t a2, int a3)
{
  PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 56));
  if (!v6) {
    return 4294967261;
  }
  *(unsigned char *)uint64_t v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;
  return DiskImagePlugin::sync_enter_and_wait(a1, v6, a2);
}

uint64_t DiskImagePlugin::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a4;
  uint64_t v7 = (PluginRing *)(a1 + 56);
  for (uint64_t i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    PluginRing::try_sub_sqe_allocate(v7);
    if (!v9) {
      break;
    }
    uint64_t v10 = *(i - 1);
    uint64_t v11 = *i;
    *(unsigned char *)uint64_t v9 = 6;
    *(void *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 32) = v11;
    uint64_t result = DiskImagePlugin::sync_enter_and_wait(a1, v9, a2);
    if (result) {
      return result;
    }
    if (!--v4) {
      return 0;
    }
  }
  return 4294967261;
}

void DiskImagePlugin::sync_cqe_callback(DiskImagePlugin *this)
{
  uint64_t v1 = (DiskImagePlugin *)((char *)this + 56);
  PluginRing::get_next_cqe((DiskImagePlugin *)((char *)this + 56), (uint64_t)&v4);
  if (v6)
  {
    uint64_t v2 = v4;
    int v3 = v5;
    do
    {
      *(_DWORD *)uint64_t v2 = v3;
      gcd::gcd_semaphore::signal((dispatch_semaphore_t *)(v2 + 8));
      PluginRing::get_next_cqe(v1, (uint64_t)&v4);
      uint64_t v2 = v4;
      int v3 = v5;
    }
    while (v6);
  }
}

unint64_t DiskImagePlugin::read_async(DiskImagePlugin *this, DiskImagePlugin::ContextPluginAsync *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  memset(v71, 0, sizeof(v71));
  memset(v70, 0, sizeof(v70));
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  uint64_t v4 = *(void *)a3;
  int v5 = (std::__shared_weak_count *)*((void *)a3 + 1);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)char v58 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v58[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *((void *)a3 + 7);
  uint64_t v8 = *((void *)a3 + 8);
  long long v59 = *(_OWORD *)((char *)a3 + 72);
  long long v60 = *(_OWORD *)((char *)a3 + 88);
  char v61 = *((unsigned char *)a3 + 104);
  uint64_t v9 = *((void *)a3 + 14);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)a3 + 15);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (unint64_t *)((char *)a3 + 144);
  long long v62 = *((_OWORD *)a3 + 8);
  unint64_t v63 = *((void *)a3 + 18);
  char v64 = *((unsigned char *)a3 + 152);
  uint64_t v12 = *(void *)a4;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)a4 + 1);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v54 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v54[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v14 = *((void *)a4 + 6);
  uint64_t v15 = *((void *)a4 + 7);
  uint64_t v16 = *((void *)a4 + 8);
  long long v55 = *(_OWORD *)((char *)a4 + 72);
  long long v56 = *(_OWORD *)((char *)a4 + 88);
  char v57 = *((unsigned char *)a4 + 104);
  uint64_t v18 = *((void *)a4 + 14);
  unint64_t v17 = (std::__shared_weak_count *)*((void *)a4 + 15);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = 0;
  uint64_t v86 = v4;
  long long v87 = v5;
  v88[0] = *(_OWORD *)v58;
  *(_OWORD *)((char *)v88 + 9) = *(_OWORD *)&v58[9];
  uint64_t v89 = v6;
  *(void *)&long long v90 = v7;
  *((void *)&v90 + 1) = v8;
  long long v91 = v59;
  long long v92 = v60;
  char v93 = v61;
  uint64_t v94 = v9;
  v95 = v10;
  long long v96 = v62;
  unint64_t v97 = v63;
  char v98 = v64;
  uint64_t v72 = v12;
  uint64_t v73 = v13;
  v74[0] = *(_OWORD *)v54;
  *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)&v54[9];
  uint64_t v75 = v14;
  uint64_t v76 = v15;
  uint64_t v77 = v16;
  char v80 = v57;
  long long v78 = v55;
  long long v79 = v56;
  uint64_t v81 = v18;
  uint64_t v82 = v17;
  long long v83 = *((_OWORD *)a4 + 8);
  char v85 = *((unsigned char *)a4 + 152);
  unint64_t v84 = *((void *)a4 + 18);
  unint64_t v20 = v84;
  LOBYTE(v118[0]) = 0;
  char v119 = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v86, (uint64_t)&v72))
  {
    if (v97 >= v20 || v19 == -1) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v115 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((void *)&v115 + 1) = 104;
      LODWORD(v116) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(&v111, &v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v113, (uint64_t)"sg: ", 4);
      operator<<(&v113);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v111);
      MEMORY[0x223C24910](&v114);
    }
    *(void *)&long long v111 = 0;
    *((void *)&v111 + 1) = v20;
    char v112 = 2;
    trim_sg_to_interval(&v86, (uint64_t)&v111, (uint64_t)&v115);
    std::vector<std::shared_ptr<char>>::emplace_back<std::shared_ptr<char> const&>((uint64_t *)v71, &v115);
    uint64_t v22 = v115;
    int64_t v23 = v116;
    uint64_t v24 = v70[2];
    if (v70[2] >= v70[3])
    {
      int64_t v26 = ((char *)v70[2] - (char *)v70[1]) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      }
      int64_t v28 = (char *)v70[3] - (char *)v70[1];
      if (((char *)v70[3] - (char *)v70[1]) >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        int64_t v30 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v70[3], v29);
      }
      else {
        int64_t v30 = 0;
      }
      unint64_t v31 = &v30[16 * v26];
      *(void *)unint64_t v31 = v22;
      *((void *)v31 + 1) = v23;
      uint64_t v32 = (char *)v70[2];
      unint64_t v33 = (char *)v70[1];
      uint64_t v34 = v31;
      if (v70[2] != v70[1])
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
          v34 -= 16;
          v32 -= 16;
        }
        while (v32 != v33);
        uint64_t v32 = (char *)v70[1];
      }
      unint64_t v25 = v31 + 16;
      v70[1] = v34;
      _OWORD v70[2] = v31 + 16;
      v70[3] = &v30[16 * v29];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(void *)_OWORD v70[2] = v115;
      v24[1] = v23;
      unint64_t v25 = v24 + 2;
    }
    _OWORD v70[2] = v25;
    uint64_t v35 = (int)v116;
    if ((v116 & 0x80000000) != 0) {
      int64_t v36 = (int)v116;
    }
    else {
      int64_t v36 = v116;
    }
    BOOL v37 = v36 >= 0 || v36 == 0;
    char v38 = v37;
    if (v37)
    {
      v39 = v117;
      if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v86, (const sg_vec_ns::details::sg_vec_iterator *)&v72, v117, v36))
      {
        v99[0] = v86;
        v99[1] = v87;
        if (v87) {
          atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v100[0] = v88[0];
        *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)v88 + 9);
        uint64_t v101 = v89;
        long long v102 = v90;
        long long v103 = v91;
        long long v104 = v92;
        char v105 = v93;
        uint64_t v106 = v94;
        long long v107 = v95;
        if (v95) {
          atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v108 = v96;
        unint64_t v109 = v97;
        char v110 = v98;
        sg_vec_ns::generate_vec_ref((uint64_t)v99, (uint64_t)&v72, (uint64_t)v39, v36, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v111);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v118, (uint64_t)&v111);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v111);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v99);
        sg_vec_ref::begin((sg_vec_ref *)v118, (uint64_t)&v111);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v86, &v111);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v111);
        sg_vec_ref::end((sg_vec_ref *)v118, (uint64_t)&v111);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v72, &v111);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v111);
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v86, v36);
      v19 += v36;
    }
    else
    {
      if ((int)v116 >= 0) {
        uint64_t v35 = -(uint64_t)(int)v116;
      }
      unint64_t v51 = v35;
    }
    if (*((void *)&v115 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v115 + 1));
    }
    if ((v38 & 1) == 0) {
      goto LABEL_59;
    }
  }
  unint64_t v51 = v19;
LABEL_59:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v118);
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
  }
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  unint64_t v40 = *v11;
  unint64_t v41 = (*(uint64_t (**)(DiskImagePlugin *))(*(void *)this + 24))(this);
  unint64_t v42 = (*(uint64_t (**)(DiskImagePlugin *))(*(void *)this + 24))(this);
  LOBYTE(v65) = 2;
  *((void **)&v66 + 1) = v70[1];
  long long v67 = v40 / v41;
  LODWORD(v68) = v51 / v42;
  unint64_t v43 = *((void *)a2 + 3);
  if (v43 >= *((void *)a2 + 4))
  {
    uint64_t v48 = std::vector<di_async_sub_transaction_t>::__emplace_back_slow_path<di_async_sub_transaction_t>((uint64_t *)a2 + 2, (uint64_t)&v65);
    uint64_t v49 = *(std::__shared_weak_count **)&v71[32];
    *((void *)a2 + 3) = v48;
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  else
  {
    long long v44 = v66;
    *(_OWORD *)unint64_t v43 = v65;
    *(_OWORD *)(v43 + 16) = v44;
    long long v45 = v67;
    long long v46 = v69;
    int v47 = v70[0];
    *(_OWORD *)(v43 + 48) = v68;
    *(_OWORD *)(v43 + 64) = v46;
    *(_OWORD *)(v43 + 32) = v45;
    *(void *)(v43 + 80) = v47;
    *(void *)(v43 + 88) = 0;
    *(void *)(v43 + 96) = 0;
    *(void *)(v43 + 104) = 0;
    *(_OWORD *)(v43 + 88) = *(_OWORD *)&v70[1];
    v70[1] = 0;
    _OWORD v70[2] = 0;
    *(void **)(v43 + 104) = v70[3];
    *(void *)(v43 + 112) = 0;
    v70[3] = 0;
    *(void *)(v43 + 120) = 0;
    *(void *)(v43 + 128) = 0;
    *(_OWORD *)(v43 + 112) = *(_OWORD *)v71;
    *(void *)(v43 + 128) = *(void *)&v71[16];
    memset(v71, 0, 24);
    *(_OWORD *)(v43 + 136) = *(_OWORD *)&v71[24];
    *(void *)&v71[32] = 0;
    *(void *)&v71[24] = 0;
    *((void *)a2 + 3) = v43 + 152;
  }
  v118[0] = (void **)v71;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](v118);
  if (v70[1])
  {
    _OWORD v70[2] = v70[1];
    operator delete(v70[1]);
  }
  return v51;
}

void sub_21E23CBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (STACK[0x640]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x640]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x668]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x248]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x2E8]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a23);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a43);
  di_async_sub_transaction_t::~di_async_sub_transaction_t((di_async_sub_transaction_t *)&a63);
  _Unwind_Resume(a1);
}

void di_async_sub_transaction_t::~di_async_sub_transaction_t(di_async_sub_transaction_t *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v4 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
}

uint64_t DiskImagePlugin::subscribe_to_ring(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 56))();
  if (v3)
  {
    io_rings_subscriber_subscribe(a2, v3);
  }
  return 4294967284;
}

void DiskImagePlugin::~DiskImagePlugin(DiskImagePlugin *this)
{
  *(void *)this = &unk_26CF1DCB0;
  if (*((unsigned char *)this + 256)) {
    PluginRing::~PluginRing((DiskImagePlugin *)((char *)this + 56));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CF1DCB0;
  if (*((unsigned char *)this + 256)) {
    PluginRing::~PluginRing((DiskImagePlugin *)((char *)this + 56));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t DiskImagePlugin::get_block_size(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 8))();
}

uint64_t DiskImagePlugin::get_num_blocks(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 16))();
}

uint64_t DiskImagePlugin::is_writable(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 24))();
}

void DiskImage::create_image_info(DiskImage *this)
{
  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Image info is not supported for the given image type", 0x16u);
}

uint64_t DiskImage::verify_image()
{
  return 1;
}

uint64_t DiskImagePlugin::set_size(DiskImagePlugin *this)
{
  return 4294967218;
}

double DiskImagePlugin::get_io_constraints@<D0>(DiskImagePlugin *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    int v6 = v5();
    uint64_t v4 = *((void *)this + 2);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (unsigned int v8 = v7()) != 0)
  {
    uint64_t v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t DiskImagePlugin::supports_unmap(DiskImagePlugin *this)
{
  return 1;
}

uint64_t DiskImage::supports_get_extents(DiskImage *this)
{
  return 0;
}

BOOL DiskImagePlugin::may_read_extra(DiskImagePlugin *this)
{
  (*(void (**)(void *__return_ptr))(*(void *)this + 72))(v4);
  if (v4[0]) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4[1] == 0;
  }
  return !v1 || v4[2] != 0 || v4[3] != 0;
}

void DiskImage::get_extents_iterator_interface()
{
}

void DiskImagePlugin::_create_ctx(DiskImagePlugin *this)
{
}

void sub_21E23D060(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10A1C4088054FEALL);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::read(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v15[66] = *MEMORY[0x263EF8340];
  sg_vec::sg_vec(v14, a3);
  sg_vec_ref::begin((sg_vec_ref *)v15, (uint64_t)v11);
  double v5 = sg_vec_ref::end((sg_vec_ref *)v15, (uint64_t)v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *, double))(*(void *)a1 + 144))(a1, a2, v11, v8, v5);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  sg_vec::~sg_vec((sg_vec *)v14);
  return v6;
}

void sub_21E23D18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

uint64_t DiskImage::write(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v15[66] = *MEMORY[0x263EF8340];
  sg_vec::sg_vec(v14, a3);
  sg_vec_ref::begin((sg_vec_ref *)v15, (uint64_t)v11);
  double v5 = sg_vec_ref::end((sg_vec_ref *)v15, (uint64_t)v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *, double))(*(void *)a1 + 152))(a1, a2, v11, v8, v5);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  sg_vec::~sg_vec((sg_vec *)v14);
  return v6;
}

void sub_21E23D2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void __clang_call_terminate(void *a1)
{
}

uint64_t amberPluginCreate(uint64_t a1)
{
  if (amberPluginCreate(unsigned long long)::once != -1) {
    dispatch_once(&amberPluginCreate(unsigned long long)::once, &__block_literal_global_28);
  }
  uint64_t v2 = (uint64_t (*)(uint64_t))amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate;
  if (!amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate) {
    return 0;
  }
  return v2(a1);
}

uint64_t std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2644A1FA8, MEMORY[0x263F8C060]);
}

void sub_21E23D4D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *___ZL17amberPluginCreatey_block_invoke()
{
  v0 = dlopen("/usr/lib/libAmber.dylib", 5);
  if (v0)
  {
    double result = dlsym(v0, "AmberDiskImagePluginCreate");
    amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate = result;
    if (result) {
      return result;
    }
    *(void *)&long long v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18;
    int v3 = 16;
    di_log::logger<di_log::log_printer<58ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cannot find AmberDiskImagePluginCreate in libAmber", 50);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf((uint64_t)v4);
  }
  else
  {
    *(void *)&long long v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18;
    int v3 = 16;
    di_log::logger<di_log::log_printer<52ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cannot load libAmber", 20);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf((uint64_t)v4);
  }
  return (void *)MEMORY[0x223C24910](&v6);
}

void sub_21E23D668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<58ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<52ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<52ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1DDD8;
  a1[45] = &unk_26CF1DED8;
  a1[46] = &unk_26CF1DF00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1DDD8;
  a1[45] = &unk_26CF1DE60;
  a1[46] = &unk_26CF1DE88;
  return a1;
}

void sub_21E23D78C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<58ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<58ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1DFF8;
  a1[45] = &unk_26CF1E0F8;
  a1[46] = &unk_26CF1E120;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1DFF8;
  a1[45] = &unk_26CF1E080;
  a1[46] = &unk_26CF1E0A8;
  return a1;
}

void sub_21E23D8F4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x223C24620](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x223C24630](v13);
  return a1;
}

void sub_21E23DA98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x223C24630](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x21E23DA78);
}

void sub_21E23DAEC(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_21E23DC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1DF70;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E23DDB0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1DF70;
  di_log::logger_buf<di_log::log_printer<52ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<52ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<52ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E23E328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<52ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 52;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 52;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void std::stringbuf::str[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  unsigned __int8 v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1E190;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E23E820(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1E190;
  di_log::logger_buf<di_log::log_printer<58ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<58ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<58ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E23ED98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<58ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 58;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 58;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::map[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_21E23F014(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      os_log_type_t v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          os_log_type_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = (void *)a2;
        do
        {
          os_log_type_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          uint64_t v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = *(void ***)(a2 + 8);
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = (void **)a2;
    do
    {
      uint64_t v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      uint64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:
  return (void **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

__n128 std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21E23F2D4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      size_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      size_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              size_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            size_t v3 = v9[2];
            size_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *size_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            size_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          size_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        size_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *size_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void **std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>(uint64_t a1, void **a2)
{
  size_t v2 = (void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    size_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_21E23F874(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  size_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<92ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1E3B0;
  di_log::logger_buf<di_log::log_printer<92ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<92ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E23FDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<92ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 92;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 92;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t DiskImagesRuntimeException::DiskImagesRuntimeException(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &unk_26CF39EE0;
  char v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_21E240090(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void DiskImagesRuntimeException::~DiskImagesRuntimeException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26CF39EE0;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  DiskImagesRuntimeException::~DiskImagesRuntimeException(this);
  JUMPOUT(0x223C249A0);
}

void DiskImagesRuntimeException::DiskImagesRuntimeException(DiskImagesRuntimeException *this, const char *a2, unsigned int a3)
{
  *(void *)this = &unk_26CF39EE0;
  char v6 = std::generic_category();
  *((void *)this + 1) = a3;
  *((void *)this + 2) = v6;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 7) = a2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<147ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1E5D0;
  di_log::logger_buf<di_log::log_printer<147ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<147ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E24069C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<147ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 147;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 147;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<152ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1E7F0;
  di_log::logger_buf<di_log::log_printer<152ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<152ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E240E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<152ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 152;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 152;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<157ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1EA10;
  di_log::logger_buf<di_log::log_printer<157ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<157ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E241584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<157ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 157;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 157;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<163ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1EC30;
  di_log::logger_buf<di_log::log_printer<163ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<163ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E241CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<163ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 163;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 163;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<171ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1EE50;
  di_log::logger_buf<di_log::log_printer<171ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<171ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E24250C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<171ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 171;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 171;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<243ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1F070;
  di_log::logger_buf<di_log::log_printer<243ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<243ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E242C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<243ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 243;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 243;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

__n128 sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  uint64_t v8 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v8;
  return result;
}

double sg_vec_ns::details::buffer_iterator::sync(sg_vec_ns::details::buffer_iterator *this)
{
  sg_vec_ns::details::buffer_iterator::make_value((uint64_t)this, 1, (uint64_t)&v6);
  long long v2 = v6;
  long long v6 = 0uLL;
  long long v3 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + 56) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    long long v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
    double result = *(double *)&v7;
    *(_OWORD *)((char *)this + 72) = v7;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    double result = *(double *)&v7;
    *(_OWORD *)((char *)this + 72) = v7;
  }
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::vector<iovec>::__throw_length_error[abi:ne180100]()
{
}

void *std::allocator<iovec>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::vector<di_async_sub_transaction_t>::__emplace_back_slow_path<di_async_sub_transaction_t>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  unint64_t v10 = (char *)std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *((void *)v11 + 15) = 0;
  *((void *)v11 + 16) = 0;
  *((void *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  v19[2] = v11 + 152;
  std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_21E2431E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<di_async_sub_transaction_t>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(152 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<di_async_sub_transaction_t>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    unint64_t v8 = (__n128 *)(a7 - 64);
    do
    {
      __n128 v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 72) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 88) = v9;
      __n128 v10 = *(__n128 *)(a3 - 120);
      __n128 v11 = *(__n128 *)(a3 - 104);
      __n128 v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(void *)(a3 - 72);
      v8->n128_u64[0] = 0;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 40) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      __n128 *v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      v8[1].n128_u64[1] = 0;
      v8[2].n128_u64[0] = 0;
      v8[2].n128_u64[1] = 0;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      __n128 result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      unint64_t v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152;
      a3 -= 152;
    }
    while (a3 != a5);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v4 = (void **)(a1 + 112);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(i - 152);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  long long v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<char>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<char>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

__n128 DiskImage::default_extents_iterator_interface::make_val@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[1];
  *a2 = result;
  a2[1].n128_u64[0] = this[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

void DiskImage::default_extents_iterator_interface::clone(DiskImage::default_extents_iterator_interface *this)
{
}

void DiskImage::default_extents_iterator_interface::~default_extents_iterator_interface(DiskImage::default_extents_iterator_interface *this)
{
}

DiskImagePlugin::ContextPluginSync *DiskImagePlugin::ContextPluginSync::ContextPluginSync(DiskImagePlugin::ContextPluginSync *this, DiskImagePlugin *a2)
{
  *(void *)this = &unk_26CF1F160;
  *((void *)this + 1) = a2;
  gcd::gcd_semaphore::gcd_semaphore((DiskImagePlugin::ContextPluginSync *)((char *)this + 24), 0);
  DiskImagePlugin::create_sync_ring(a2);
  return this;
}

void sub_21E2435BC(_Unwind_Exception *a1)
{
  gcd::gcd_group::~gcd_group(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::Context::_read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t DiskImage::Context::_write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t DiskImage::Context::_unmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t DiskImage::Context::_flush(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), a1, a2);
}

void DiskImagePlugin::ContextPluginSync::~ContextPluginSync(NSObject **this)
{
  *this = &unk_26CF1F160;
  gcd::gcd_group::~gcd_group(this + 3);
}

{
  uint64_t vars8;

  *this = &unk_26CF1F160;
  gcd::gcd_group::~gcd_group(this + 3);
  JUMPOUT(0x223C249A0);
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, uint64_t *a2)
{
  v17[15] = *MEMORY[0x263EF8340];
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  uint64_t v5 = *a2;
  uint64_t v6 = dummy_shared_ptr[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[4];
  long long v15 = v17;
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v7;
  long long v16 = xmmword_21E39B4E0;
  sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, &v15);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(&v15);
  uint64_t v8 = a1[1];
  long long v15 = (void *)*a1;
  uint64_t v9 = (uint64_t)&v15[3 * v8];
  uint64_t v10 = a1[19];
  long long v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  __n128 v12 = &v13[v10];
  sg_vec_ref::sg_vec_ref((uint64_t)(a1 + 26), (uint64_t *)&v15, &v14, &v13, &v12, a2[3], a2[2]);
  return a1;
}

void sub_21E243830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sg_vec_ns::details::sg_vec_data::~sg_vec_data(v12);
  _Unwind_Resume(a1);
}

uint64_t sg_vec_ns::details::sg_vec_data::sg_vec_data(uint64_t a1, void *a2)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_21E39B4F0;
  boost::container::small_vector_base<std::pair<std::shared_ptr<char>,unsigned long>,void,void>::move_construct_impl(a1, a2);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_21E39B4F0;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>(a1 + 144, v3);
  return a1;
}

void sub_21E2438D0(_Unwind_Exception *a1)
{
  if (v1[20])
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(v1);
  _Unwind_Resume(a1);
}

void sg_vec_ns::details::sg_vec_data::~sg_vec_data(sg_vec_ns::details::sg_vec_data *this)
{
  if (*((void *)this + 20))
  {
    uint64_t v2 = (char *)*((void *)this + 18);
    if ((char *)this + 168 != v2) {
      operator delete(v2);
    }
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(this);
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, (const char *)this);
  __cxa_throw(exception, (struct type_info *)off_2644A1FA8, MEMORY[0x263F8C060]);
}

void sub_21E243998(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::container::small_vector_base<std::pair<std::shared_ptr<char>,unsigned long>,void,void>::move_construct_impl(uint64_t a1, void *a2)
{
  uint64_t v4 = (long long *)(a2 + 3);
  unint64_t v3 = (long long *)*a2;
  if (v4 == v3)
  {
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::assign<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>((uint64_t *)a1, v3, (uint64_t)v3 + 24 * a2[1]);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(a2);
  }
  else
  {
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::assign<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>(uint64_t *a1, long long *a2, uint64_t a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3);
  if (v5 <= a1[2])
  {
    boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>,std::pair<std::shared_ptr<char>,unsigned long>*>((uint64_t)a1, a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3), *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x555555555555556) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
    }
    uint64_t v7 = operator new(a3 - (void)a2);
    uint64_t v8 = (uint64_t *)*a1;
    if (*a1)
    {
      boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(a1);
      if (a1 + 3 != v8) {
        operator delete(v8);
      }
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>(a1, (uint64_t)a2, a3);
  }
}

void boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void *boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *result + 24 * v3;
  uint64_t v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      v5 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v3 = result[1];
  }
  result[1] = v3 - 0x5555555555555555 * ((v5 - v4) >> 3);
  return result;
}

void boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>,std::pair<std::shared_ptr<char>,unsigned long>*>(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      unint64_t v15 = a3;
      do
      {
        long long v16 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v17 = *(std::__shared_weak_count **)(a4 + 8);
        *(_OWORD *)a4 = v16;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        *(void *)(a4 + 16) = *((void *)v8 + 2);
        a4 += 24;
        uint64_t v8 = (long long *)((char *)v8 + 24);
        --v15;
      }
      while (v15);
    }
    if (a5 != a3)
    {
      unint64_t v18 = a3 - a5;
      uint64_t v19 = (std::__shared_weak_count **)(a4 + 8);
      do
      {
        if (*v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v19);
        }
        v19 += 3;
        BOOL v14 = __CFADD__(v18++, 1);
      }
      while (!v14);
    }
  }
  else
  {
    if (a5)
    {
      uint64_t v10 = a2;
      uint64_t v8 = (long long *)((char *)a2 + 24 * a5);
      unint64_t v11 = a5;
      do
      {
        long long v12 = *v10;
        *(void *)uint64_t v10 = 0;
        *((void *)v10 + 1) = 0;
        long long v13 = *(std::__shared_weak_count **)(a4 + 8);
        *(_OWORD *)a4 = v12;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        *(void *)(a4 + 16) = *((void *)v10 + 2);
        a4 += 24;
        uint64_t v10 = (long long *)((char *)v10 + 24);
        --v11;
      }
      while (v11);
    }
    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *(void *)(a4 + 16) = *((void *)v8 + 2);
        uint64_t v8 = (long long *)((char *)v8 + 24);
        a4 += 24;
        BOOL v14 = __CFADD__(v9++, 1);
      }
      while (!v14);
    }
  }
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = a2 - v3;
  if (a2 >= v3)
  {
    uint64_t v5 = (char *)(*(void *)a1 + 8 * v3);
    if (*(void *)(a1 + 16) - v3 < v4)
    {
      boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>((void **)a1, v5, (const char *)v4, &v6);
    }
    else
    {
      boost::container::expand_forward_and_insert_alloc<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *,boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(a1, v5, v5, v4);
      *(void *)(a1 + 8) += v4;
    }
  }
  else
  {
    *(void *)(a1 + 8) = a2;
  }
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(void **a1@<X0>, char *a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a1;
  unint64_t v9 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v9 >> 60) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v10);
  }
  unint64_t v11 = (char *)v9;
  long long v12 = (char *)operator new(8 * v9);
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(a1, v12, v11, a2, (uint64_t)a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void boost::container::expand_forward_and_insert_alloc<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *,boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(int a1, unsigned char *__src, unsigned char *__dst, unint64_t a4)
{
  if (!a4) {
    return;
  }
  int64_t v7 = __dst - __src;
  if (__dst == __src)
  {
    size_t v9 = 8 * a4;
    goto LABEL_9;
  }
  if (a4 <= v7 >> 3)
  {
    uint64_t v11 = 8 * a4;
    long long v12 = &__dst[-8 * a4];
    memmove(__dst, v12, 8 * a4);
    if (v12 != __src) {
      memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
    }
    uint64_t v10 = __src;
    size_t v9 = v11;
    goto LABEL_13;
  }
  uint64_t v8 = v7 >> 3;
  if (__src) {
    memmove(&__src[8 * a4], __src, __dst - __src);
  }
  bzero(__src, v7);
  if (a4 != v8)
  {
    size_t v9 = 8 * (a4 - v8);
LABEL_9:
    uint64_t v10 = __dst;
LABEL_13:
    bzero(v10, v9);
  }
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  size_t v9 = &a2[v3];
  if (v8 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (*a1) {
    BOOL v12 = __dst == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = v12 || v10 == __src;
  BOOL v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    BOOL v14 = &__dst[__src - v10];
  }
  if (a5) {
    bzero(v14, 8 * a5);
  }
  if (__src)
  {
    unint64_t v15 = &v10[8 * (void)v11];
    if (v15 != __src && v14 != 0) {
      memmove(&v14[8 * a5], __src, v15 - __src);
    }
  }
  if (v10 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  uint64_t v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

void *boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != (void *)*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

void sg_vec::~sg_vec(sg_vec *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 67);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((void *)this + 20))
  {
    unint64_t v8 = (char *)*((void *)this + 18);
    if ((char *)this + 168 != v8) {
      operator delete(v8);
    }
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(this);
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>(void ***a1)
{
  return (*(void *(**)(void *__return_ptr))(***a1 + 16))(**a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1E3B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2441C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1E5D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E244254(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1E7F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2442E4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1EA10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E244374(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1EC30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E244404(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_21E244540(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((void *)&v9 + 1) = 93;
  int v10 = 0;
  di_log::logger<di_log::log_printer<167ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unregistering plugin ", 21);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, v5, v6);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf((uint64_t)v11);
  uint64_t result = MEMORY[0x223C24910](&v13);
  unint64_t v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8) {
    return v8(a2);
  }
  return result;
}

void sub_21E2446C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<167ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF1F1C8;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF1F1C8;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()(a1 + 32, *(void *)(a1 + 24));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *v2;
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *di_log::logger<di_log::log_printer<167ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<167ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1F230;
  a1[45] = &unk_26CF1F330;
  a1[46] = &unk_26CF1F358;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1F230;
  a1[45] = &unk_26CF1F2B8;
  a1[46] = &unk_26CF1F2E0;
  return a1;
}

void sub_21E2449A0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1F3C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E244A84(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1F3C8;
  di_log::logger_buf<di_log::log_printer<167ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<167ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<167ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E244FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<167ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 167;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 167;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1EE50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E245288(_Unwind_Exception *a1)
{
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  char v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  unsigned __int8 v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      unsigned __int8 v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    char v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      char v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  char v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    char v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      char v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  char v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *char v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      long long v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        long long v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    long long v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  __int16 v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    __int16 v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *__int16 v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::bad_expected_access<void>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x223C249A0);
}

void std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::~__func()
{
}

void *std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26CF1F488;
  return result;
}

void std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF1F488;
}

uint64_t std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3) {
    return v3();
  }
  return result;
}

uint64_t std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::target_type()
{
}

void *std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  char v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  uint64_t *v3 = 0;
  return a1;
}

void std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>(void *a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = a2;
  operator new();
}

void sub_21E2459D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100](&a10);
    MEMORY[0x223C249A0](v12, 0x10A1C40FC8AAF90);
    __cxa_begin_catch(exception_object);
    std::function<void ()(_di_plugin_image_t *)>::operator()(v11, v10);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(_di_plugin_image_t *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__shared_ptr_pointer[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF1F518;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  a1[3] = a2;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 4), (uint64_t)v6);
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF1F518;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100](&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

{
  uint64_t vars8;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF1F518;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100](&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void *std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  std::function<void ()(_di_plugin_image_t *)>::operator()(a1 + 32, *(void *)(a1 + 24));
  return std::__function::__value_func<void ()(_di_plugin_image_t *)>::~__value_func[abi:ne180100](v1);
}

uint64_t std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1F070;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E245E0C(_Unwind_Exception *a1)
{
}

void *di_log::logger<di_log::log_printer<545ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<545ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1F620;
  a1[45] = &unk_26CF1F720;
  a1[46] = &unk_26CF1F748;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1F620;
  a1[45] = &unk_26CF1F6A8;
  a1[46] = &unk_26CF1F6D0;
  return a1;
}

void sub_21E245F20(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  return a1;
}

sg_vec_ref *std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>(sg_vec_ref *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 528))
  {
    sg_vec_ref::operator=(a1, a2);
  }
  else
  {
    sg_vec_ref::sg_vec_ref(a1, a2);
    *((unsigned char *)a1 + 528) = 1;
  }
  return a1;
}

void sg_vec_ref::~sg_vec_ref(sg_vec_ref *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  char v6 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = a2[1];
  *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  long long v7 = *(long long *)((char *)a2 + 72);
  long long v8 = *(long long *)((char *)a2 + 88);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  long long v9 = a2[7];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(_OWORD *)(a1 + 128) = a2[8];
  uint64_t v11 = *((void *)a2 + 18);
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 144) = v11;
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1F7B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E246168(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1F7B8;
  di_log::logger_buf<di_log::log_printer<545ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<545ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<545ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2466E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<545ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 545;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 545;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

sg_vec_ref *sg_vec_ref::operator=(sg_vec_ref *a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *(void *)(a2 + 8);
  int v4 = (sg_vec_ref *)((char *)a1 + 8);
  *((void *)a1 + 2) = *(void *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *((unsigned char *)a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)((char *)a1 + 40) = v6;
  *(_OWORD *)((char *)a1 + 24) = v5;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 9);
  *((_OWORD *)a1 + 4) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)a1 + 12) = *(void *)(a2 + 96);
  *((void *)a1 + 13) = *(void *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *((unsigned char *)a1 + 144) = *(unsigned char *)(a2 + 144);
  *((_OWORD *)a1 + 7) = v9;
  *((_OWORD *)a1 + 8) = v10;
  long long v11 = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  os_log_type_t v12 = (std::__shared_weak_count *)*((void *)a1 + 20);
  *(_OWORD *)((char *)a1 + 152) = v11;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *(_OWORD *)((char *)a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)((char *)a1 + 184) = *(_OWORD *)(a2 + 184);
  *((unsigned char *)a1 + 200) = *(unsigned char *)(a2 + 200);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v14, a1, v4, 1);
  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a1 + 368, v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v14[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14[0] + 1));
  }
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v14, a1, (sg_vec_ref *)((char *)a1 + 96), 0);
  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a1 + 208, v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v14[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14[0] + 1));
  }
  return a1;
}

sg_vec_ref *sg_vec_ref::sg_vec_ref(sg_vec_ref *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v3;
  int v4 = (sg_vec_ref *)((char *)a1 + 8);
  *((void *)a1 + 2) = *(void *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *((unsigned char *)a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)((char *)a1 + 40) = v6;
  *(_OWORD *)((char *)a1 + 24) = v5;
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)a1 + 12) = *(void *)(a2 + 96);
  *((void *)a1 + 13) = *(void *)(a2 + 104);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *((unsigned char *)a1 + 144) = *(unsigned char *)(a2 + 144);
  *((_OWORD *)a1 + 7) = v7;
  *((_OWORD *)a1 + 8) = v8;
  *(_OWORD *)((char *)a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)((char *)a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)((char *)a1 + 184) = *(_OWORD *)(a2 + 184);
  *((unsigned char *)a1 + 200) = *(unsigned char *)(a2 + 200);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ref *)((char *)a1 + 208), a1, (sg_vec_ref *)((char *)a1 + 96), 0);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ref *)((char *)a1 + 368), a1, v4, 1);
  return a1;
}

void sub_21E246B20(_Unwind_Exception *a1)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator(v2);
  int v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    int v4 = *(std::__shared_weak_count **)(a1 + 328);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    long long v5 = *(std::__shared_weak_count **)(a1 + 216);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    long long v6 = *(std::__shared_weak_count **)(a1 + 160);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    long long v7 = *(std::__shared_weak_count **)(a1 + 72);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  return a1;
}

void *std::vector<std::shared_ptr<char>>::emplace_back<std::shared_ptr<char> const&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  long long v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)v4, v13);
    unint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(a1, v19);
    long long v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(v19);
  }
  else
  {
    *long long v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_21E246CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>,std::reverse_iterator<std::shared_ptr<char>*>,std::reverse_iterator<std::shared_ptr<char>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>,std::reverse_iterator<std::shared_ptr<char>*>,std::reverse_iterator<std::shared_ptr<char>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<char>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    int v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_21E248608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t _diskDisappearedCallback(uint64_t a1, void *a2)
{
  return [a2 onDiskDisappearedWithDisk:a1];
}

uint64_t _idleCallback(void *a1, const char *a2)
{
  return [a1 setCallbackReached:1];
}

void _daOperationCallback(uint64_t a1, const __DADissenter *a2, void *a3)
{
  id v8 = a3;
  if (a2)
  {
    int v4 = NSString;
    uint64_t Status = DADissenterGetStatus(a2);
    uint64_t v6 = [v4 stringWithFormat:@"Dissented with status 0x%X, pid %d", Status, DADissenterGetProcessID()];
    uint64_t v7 = +[DIError errorWithEnumValue:156 verboseInfo:v6];
    [v8 setOperationError:v7];
  }
  [v8 setCallbackReached:1];
}

void sub_21E24CF08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_21E24D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21E24D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21E24DDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21E24ED24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2 == 1)
  {
    id v24 = objc_begin_catch(exception_object);
    uint64_t v25 = [v24 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v25 error:v23];

    objc_end_catch();
    JUMPOUT(0x21E24ECE8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_21E24F1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    uint64_t v19 = [v18 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v19 error:v17];

    objc_end_catch();
    JUMPOUT(0x21E24F1A8);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E24FAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E250088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E2501DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void create_stack_vector_from_single_path(const std::__fs::filesystem::path *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v6 = SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]);
  std::string::size_type v7 = a1->__pn_.__r_.__value_.__r.__words[0];
  id v8 = NSURL;
  long long v9 = NSString;
  uint64_t v10 = [NSString defaultCStringEncoding];
  if (v6 >= 0) {
    unint64_t v11 = a1;
  }
  else {
    unint64_t v11 = (const std::__fs::filesystem::path *)v7;
  }
  uint64_t v12 = [v9 stringWithCString:v11 encoding:v10];
  char v13 = [v8 fileURLWithPath:v12];

  id v44 = 0;
  id v45 = 0;
  BOOL v14 = +[DiskImageGraph loadPlistDictFromURL:v13 dict:&v45 error:&v44];
  id v15 = v45;
  id v16 = v44;
  uint64_t v17 = v16;
  if (!v14)
  {
    __int16 v20 = [v16 domain];
    if ([v20 isEqualToString:@"com.apple.DiskImages2.ErrorDomain"])
    {
      BOOL v21 = [v17 code] == 167;

      if (v21)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        goto LABEL_10;
      }
    }
    else
    {
    }
    int v22 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v43 = 0;
      uint64_t v23 = getDIOSLog();
      os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      id v24 = [v17 description];
      *(_DWORD *)uint64_t buf = 68158210;
      int v47 = 124;
      __int16 v48 = 2080;
      uint64_t v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesyste"
            "m::path &, BOOL)";
      __int16 v50 = 2112;
      unint64_t v51 = v24;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();

      if (v25)
      {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v25);
        free(v25);
      }
    }
    else
    {
      int64_t v30 = getDIOSLog();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        unint64_t v31 = [v17 description];
        *(_DWORD *)uint64_t buf = 68158210;
        int v47 = 124;
        __int16 v48 = 2080;
        uint64_t v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesys"
              "tem::path &, BOOL)";
        __int16 v50 = 2112;
        unint64_t v51 = v31;
        _os_log_impl(&dword_21E237000, v30, OS_LOG_TYPE_ERROR, "%.*s: Failed to read pstack: %@.", buf, 0x1Cu);
      }
    }
    *__error() = v22;
    exception = __cxa_allocate_exception(0x40uLL);
    [v17 domain];
    if ([(id)objc_claimAutoreleasedReturnValue() isEqualToString:*MEMORY[0x263F08438]])
    {
      unsigned int v33 = [v17 code];
      uint64_t v34 = std::generic_category();
      unint64_t v35 = 0;
    }
    else
    {
      uint64_t error_code = make_error_code(150);
      unsigned int v33 = error_code;
      unint64_t v35 = error_code & 0xFFFFFFFF00000000;
    }
    void *exception = &unk_26CF39EE0;
    exception[1] = v33 | v35;
    exception[2] = v34;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Failed to read pstack.";
  }
  id v42 = v16;
  id v18 = [[DiskImageGraph alloc] initWithData:v15 pstackURL:v13 imported:0 error:&v42];
  id v19 = v42;

  if (!v18)
  {
    int v26 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v43 = 0;
      uint64_t v27 = getDIOSLog();
      os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
      int64_t v28 = [v19 description];
      *(_DWORD *)uint64_t buf = 68158210;
      int v47 = 124;
      __int16 v48 = 2080;
      uint64_t v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesyste"
            "m::path &, BOOL)";
      __int16 v50 = 2112;
      unint64_t v51 = v28;
      unint64_t v29 = (char *)_os_log_send_and_compose_impl();

      if (v29)
      {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v29);
        free(v29);
      }
    }
    else
    {
      int64_t v36 = getDIOSLog();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        BOOL v37 = [v19 description];
        *(_DWORD *)uint64_t buf = 68158210;
        int v47 = 124;
        __int16 v48 = 2080;
        uint64_t v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesys"
              "tem::path &, BOOL)";
        __int16 v50 = 2112;
        unint64_t v51 = v37;
        _os_log_impl(&dword_21E237000, v36, OS_LOG_TYPE_ERROR, "%.*s: Failed to create graph from plist: %@.", buf, 0x1Cu);
      }
    }
    *__error() = v26;
    char v38 = __cxa_allocate_exception(0x40uLL);
    uint64_t v39 = make_error_code(161);
    *char v38 = &unk_26CF39EE0;
    v38[1] = v39;
    v38[2] = v40;
    *((unsigned char *)v38 + 24) = 0;
    *((unsigned char *)v38 + 48) = 0;
    v38[7] = "Failed to create graph from plist.";
  }
  create_stack_vec_from_graph(v18, a2, a3);

  uint64_t v17 = v19;
LABEL_10:
}

void sub_21E2508A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void create_stack_vec_from_graph(DiskImageGraph *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  BOOL v14 = v5;
  int v6 = [(DiskImageGraph *)v5 activeNode];
  if (v6)
  {
    if ([v6 isCache])
    {
      int v7 = 1;
    }
    else
    {
      id v8 = [v6 parent];
      if (v8) {
        int v7 = 3;
      }
      else {
        int v7 = 0;
      }
    }
    if (*a3 != a3[1] || (a2 & 1) != 0 || !v7 || v7 == 3)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v6 filePath];
        id v15 = [(id)objc_claimAutoreleasedReturnValue() path];
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v16, &v15);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v17, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        }
        else {
          std::string v17 = v16;
        }
        operator new();
      }
      id v9 = v6;
      id v10 = [v9 pluginName];
      std::string::basic_string[abi:ne180100]<0>(&v17, (char *)[v10 UTF8String]);

      [v9 pluginParams];
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t error_code = make_error_code(150);
    void *exception = &unk_26CF39EE0;
    exception[1] = error_code;
    exception[2] = v13;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Stack with cache as top image cannot be opened for writing.";
  }
}

void sub_21E250E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void create_stack_vector_from_single_fd(const std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  int v7 = (void *)[objc_alloc(MEMORY[0x263F08840]) initWithFileDescriptor:a2 closeOnDealloc:0];
  id v33 = 0;
  id v8 = [v7 readDataUpToLength:0x100000 error:&v33];
  id v9 = v33;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t error_code = make_error_code(154);
    void *exception = &unk_26CF39EE0;
    exception[1] = error_code;
    exception[2] = v19;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Failed to read from fd.";
  }
  id v32 = 0;
  id v10 = [MEMORY[0x263F08AC0] propertyListWithData:v8 options:0 format:&v34 error:&v32];
  id v11 = v32;

  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!a1->__pn_.__r_.__value_.__l.__size_) {
        goto LABEL_14;
      }
      a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
    }
    else if (!*((unsigned char *)&a1->__pn_.__r_.__value_.__s + 23))
    {
LABEL_14:
      __int16 v20 = __cxa_allocate_exception(0x40uLL);
      BOOL v21 = std::generic_category();
      *__int16 v20 = &unk_26CF39EE0;
      v20[1] = 22;
      v20[2] = v21;
      *((unsigned char *)v20 + 24) = 0;
      *((unsigned char *)v20 + 48) = 0;
      v20[7] = "Cannot initialize pstack disk image without path.";
    }
    uint64_t v12 = NSURL;
    uint64_t v13 = objc_msgSend(NSString, "stringWithCString:encoding:", a1, objc_msgSend(NSString, "defaultCStringEncoding"));
    BOOL v14 = [v12 fileURLWithPath:v13];

    id v31 = v11;
    id v15 = [[DiskImageGraph alloc] initWithData:v10 pstackURL:v14 imported:0 error:&v31];
    id v16 = v31;

    if (!v15)
    {
      int v22 = *__error();
      if (DIForwardLogs())
      {
        uint64_t v23 = getDIOSLog();
        os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
        id v24 = [v16 description];
        *(_DWORD *)uint64_t buf = 68158210;
        int v36 = 127;
        __int16 v37 = 2080;
        char v38 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::file"
              "system::path &, BOOL)";
        __int16 v39 = 2112;
        uint64_t v40 = v24;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();

        if (v25)
        {
          fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v25);
          free(v25);
        }
      }
      else
      {
        int v26 = getDIOSLog();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = [v16 description];
          *(_DWORD *)uint64_t buf = 68158210;
          int v36 = 127;
          __int16 v37 = 2080;
          char v38 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::fi"
                "lesystem::path &, BOOL)";
          __int16 v39 = 2112;
          uint64_t v40 = v27;
          _os_log_impl(&dword_21E237000, v26, OS_LOG_TYPE_ERROR, "%.*s: Failed to create graph from plist: %@.", buf, 0x1Cu);
        }
      }
      *__error() = v22;
      int64_t v28 = __cxa_allocate_exception(0x40uLL);
      uint64_t v29 = make_error_code(161);
      *int64_t v28 = &unk_26CF39EE0;
      v28[1] = v29;
      v28[2] = v30;
      *((unsigned char *)v28 + 24) = 0;
      *((unsigned char *)v28 + 48) = 0;
      v28[7] = "Failed to create graph from plist.";
    }
    create_stack_vec_from_graph(v15, a3, a4);

    id v11 = v16;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_21E251498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v7);

  _Unwind_Resume(a1);
}

void *std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100]((diskimage_uio::stack_image_node **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  int v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_21E251614(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  int v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    id v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    id v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    BOOL v14 = this;
    if ((v6 & 0x80) != 0) {
      BOOL v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_21E25178C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  int v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *int v4 = result;
    int v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)int v4 = v10;
    int v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)int v4 = 0;
  return result;
}

diskimage_uio::stack_image_node *std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100](diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    diskimage_uio::stack_image_node::~stack_image_node(result);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

void std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    int v4 = (diskimage_uio::stack_image_node **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21E2519D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E251A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E251C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E252070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E252500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_21E2528C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E252C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E252DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E252EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E252F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E252FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25311C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2531E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E253ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E253CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E253F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E254090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E254164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E254280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E254754(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    BOOL v14 = [v13 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v14 error:v10];

    objc_end_catch();
    JUMPOUT(0x21E25471CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_21E254B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_21E254DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E254F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E255098(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_21E25526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  id v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_21E2554C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E255570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E255658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25573C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E255818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2558A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E255A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E255C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E255D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2560F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_21E256348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25641C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2564A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E256C74(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }

  if (a2 == 1)
  {
    std::string::size_type v17 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v17 error:v12];

    objc_end_catch();
    JUMPOUT(0x21E2566D0);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImage::Context::flush(void *a1)
{
  if (*(unsigned char *)(a1[1] + 8))
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v3 = "DiskImage::Context::flush(di_flush_mode)";
      *((void *)&v3 + 1) = 25;
      int v4 = 2;
      di_log::logger<di_log::log_printer<191ul>>::logger(v5, &v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Disk image is terminated, skipping flush", 40);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf((uint64_t)v5);
      MEMORY[0x223C24910](&v7);
    }
    return 4294967290;
  }
  else
  {
    uint64_t v1 = *(uint64_t (**)(void))(*a1 + 24);
    return v1();
  }
}

void sub_21E256F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<191ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<191ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<191ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1F860;
  a1[45] = &unk_26CF1F960;
  a1[46] = &unk_26CF1F988;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1F860;
  a1[45] = &unk_26CF1F8E8;
  a1[46] = &unk_26CF1F910;
  return a1;
}

void sub_21E257078(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1F9F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E25715C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1F9F8;
  di_log::logger_buf<di_log::log_printer<191ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<191ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<191ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2576D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<191ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 191;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        id v13 = a2;
      }
      else {
        id v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 191;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_21E257C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21E25811C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21E2587B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E258854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E258960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E258A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E258AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E258BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E258C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E258D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E258EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E259108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2591CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E259288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void sub_21E259F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25A124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25A198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25A254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25A2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25A37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25A77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a17);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }

  _Unwind_Resume(a1);
}

void sub_21E25A958(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_21E25AA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E25AAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25AFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21E25B128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21E25B2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21E25B4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21E25BBE8()
{
}

void sub_21E25BBF8()
{
  JUMPOUT(0x21E25BC2CLL);
}

void sub_21E25BC08()
{
}

void sub_21E25BC14()
{
}

void sub_21E25BC48()
{
  JUMPOUT(0x21E25BC64);
}

void sub_21E25BC5C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    char v6 = __cxa_begin_catch(a1);
    uint64_t v7 = [v2 path];
    +[DIError nilWithDIException:v6 prefix:v7 error:v3];
    objc_claimAutoreleasedReturnValue();

    __cxa_end_catch();
    JUMPOUT(0x21E25B5ECLL);
  }

  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<FileLocal,Backend>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  unsigned __int8 v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    int v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    unsigned __int8 v2 = a2;
  }
  *unsigned __int8 v2 = 0;
  v2[1] = 0;
  return result;
}

#error "21E25C050: call analysis failed (funcsize=146)"

void sub_21E25C234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25C3FC(_Unwind_Exception *a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  AEAAuthData v12 = va_arg(va1, AEAAuthData);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,AEAHelper::kms_t,AEAHelper::wkms_t>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  AEAwrapper::AuthData::~AuthData((AEAAuthData *)va);
  os_log_type_t v11 = *(std::__shared_weak_count **)(v8 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (a2 == 1)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) description:@"Error while creating AEA backend" error:v7];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x21E25C3D0);
  }

  _Unwind_Resume(a1);
}

void sub_21E25C660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25C670(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va);
  __cxa_begin_catch(a1);
  +[DIError nilWithEnumValue:150 verboseInfo:@"Error checking for AEA file" error:v2];
  objc_claimAutoreleasedReturnValue();
  __cxa_end_catch();
  JUMPOUT(0x21E25C5BCLL);
}

void sub_21E25C6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  JUMPOUT(0x21E25C664);
}

void sub_21E25C840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, std::__shared_weak_count *a20,uint64_t a21,uint8_t buf,uint64_t a23,__int16 bufa,__int16 a25,uint64_t a26)
{
  uint64_t v30 = a23;
  a23 = 0;
  if (v30) {
    MEMORY[0x223C249A0](v30, 0x1000C404247E4FDLL);
  }
  if (a2 == 2)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) description:0 error:v27];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x21E25C804);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    [v26 backend];
    UDIF_header::UDIF_header(&bufa, &a19);
    if (a20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a20);
    }
    std::make_unique[abi:ne180100]<udif::header,udif::header const&>();
  }

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<udif::header,udif::header const&>()
{
}

void UDIF_header::~UDIF_header(UDIF_header *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    MEMORY[0x223C249A0](v3, 0x1000C407784F2AFLL);
  }
}

void sub_21E25D084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25D148(_Unwind_Exception *a1, int a2)
{
  char v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Error encrypting new image" error:v3];
    __cxa_end_catch();
    JUMPOUT(0x21E25D12CLL);
  }

  _Unwind_Resume(a1);
}

void sub_21E25D268(_Unwind_Exception *a1, int a2)
{
  char v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Error encrypting new image" error:v3];
    __cxa_end_catch();
    JUMPOUT(0x21E25D24CLL);
  }

  _Unwind_Resume(a1);
}

void sub_21E25D368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21E25D778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint8_t buf,int a27,__int16 a28,uint64_t a29,__int16 a30,uint64_t a31)
{
  std::ostringstream::~ostringstream((uint64_t)&buf);
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void sub_21E25D7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x21E25D7D0);
  }
  JUMPOUT(0x21E25D7ECLL);
}

#error "21E25D924: call analysis failed (funcsize=151)"

void sub_21E25DA6C(_Unwind_Exception *a1)
{
}

void sub_21E25DA74(_Unwind_Exception *a1)
{
}

void sub_21E25DA8C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x21E25DA94);
  }
  __clang_call_terminate(a1);
}

void sub_21E25DC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25E66C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint8_t buf,uint64_t a51,__int16 a52,__int16 a53)
{
}

void sub_21E25EC90(_Unwind_Exception *a1)
{
}

void sub_21E25ECB4(_Unwind_Exception *a1)
{
}

void sub_21E25ECC0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::insert(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 3);
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12) >> 3);
    unint64_t v16 = 2 * v15;
    if (2 * v15 <= v13) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v24 = v7;
    if (v17) {
      uint64_t v18 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v7, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v20 = v18;
    __int16 v21 = &v18[24 * v14];
    int v22 = v21;
    uint64_t v23 = &v18[24 * v17];
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::push_back(&v20, a3);
    uint64_t v4 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, &v20, v4);
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer(&v20);
  }
  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }
  else
  {
    std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__move_range((uint64_t)a1, a2, v6, a2 + 24);
    __n128 v10 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    os_log_type_t v11 = *(std::__shared_weak_count **)(v4 + 8);
    *(__n128 *)uint64_t v4 = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }
  return v4;
}

void sub_21E25EE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::emplace_back<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]((uint64_t)v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer(v16);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_21E25EF7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_21E25F1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25F2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25F3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25F4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E25F70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E25F82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E25FA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "21E25FC30: call analysis failed (funcsize=181)"

void sub_21E25FD64()
{
}

void sub_21E25FDA4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21E25FA54);
}

void *di_log::logger<di_log::log_printer<651ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<651ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF1FB58;
  a1[45] = &unk_26CF1FC58;
  a1[46] = &unk_26CF1FC80;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF1FB58;
  a1[45] = &unk_26CF1FBE0;
  a1[46] = &unk_26CF1FC08;
  return a1;
}

void sub_21E25FEB4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  return a1;
}

void sub_21E25FFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  MEMORY[0x223C249A0](v10, 0x10E1C40ACB1F3BALL);

  _Unwind_Resume(a1);
}

void sub_21E2602E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<Knoxbackend,Backend>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    unint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<AEA_backend,Backend>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    unint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_21E26054C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E260614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2606B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  MEMORY[0x223C249A0](v10, 0x10B3C402F18E594);

  _Unwind_Resume(a1);
}

void sub_21E260730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E260888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E260920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2609D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E260B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    -[DiskImageParamsUDIF_XPC initWithBackendXPC:header:](a10);
  }

  _Unwind_Resume(a1);
}

void sub_21E260E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E261198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_21E26125C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E261360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E261480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E261580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E261BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void sub_21E2620B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_21E2621A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2622C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(uint64_t a1, const void **a2)
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = NSString;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v4 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
  uint64_t v6 = objc_msgSend(NSString, "defaultCStringEncoding", __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v5;
  }
  uint64_t v8 = [v3 stringWithCString:p_p encoding:v6];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = [**(id **)(v2 + 24) getAEAKeyFromSAKSWithMetadata:v8 key:**(void **)(v2 + 32) error:**(void **)(v2 + 40)];

  return v9;
}

void sub_21E262470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(void ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = NSURL;
  if (*((char *)a2 + 23) >= 0) {
    int v4 = a2;
  }
  else {
    int v4 = (uint64_t *)*a2;
  }
  std::string::size_type v5 = [NSString stringWithCString:v4 encoding:4];
  uint64_t v6 = [v3 URLWithString:v5];

  BOOL v7 = +[DIKeyRetriever KKMSKeyWithURL:v6 destKey:**v2 destKeySize:*v2[1] error:*v2[2]];
  return v7;
}

void sub_21E262538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void **)*a1;
  int v4 = NSURL;
  if (*((char *)a2 + 23) >= 0) {
    std::string::size_type v5 = a2;
  }
  else {
    std::string::size_type v5 = (uint64_t *)*a2;
  }
  uint64_t v6 = [NSString stringWithCString:v5 encoding:1];
  BOOL v7 = [v4 URLWithString:v6];

  BOOL v8 = +[DIKeyRetriever WKMSKeyWithURL:v7 authData:a2[3] destKey:*v3[6] destKeySize:*v3[7] error:*v3[8]];
  return v8;
}

void sub_21E2625FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,AEAHelper::kms_t,AEAHelper::wkms_t>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CF1FAD8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    JUMPOUT(0x223C24980);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *>((uint64_t)&v11, a2, v7, v6);
}

__n128 std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    std::string::size_type v5 = (long long *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * ((v4 - *a1) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v26 = a1[4];
      unint64_t v13 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v12, v10);
      unint64_t v15 = &v13[24 * v11];
      unint64_t v16 = a1[1];
      unint64_t v17 = a1[2] - v16;
      if (v17)
      {
        uint64_t v18 = &v15[v17];
        __int16 v19 = &v13[24 * v11];
        do
        {
          *(_OWORD *)__int16 v19 = *(_OWORD *)v16;
          *(void *)unint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v16 + 16);
          v19 += 24;
          v16 += 24;
        }
        while (v19 != v18);
        int64x2_t v20 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v20 = vdupq_n_s64(v16);
        uint64_t v18 = &v13[24 * v11];
      }
      uint64_t v23 = (void *)*a1;
      *a1 = v13;
      a1[1] = v15;
      int64x2_t v24 = v20;
      uint64_t v21 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[24 * v14];
      uint64_t v25 = v21;
      std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer(&v23);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *>((uint64_t)&v23, v5, (long long *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24;
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      long long v9 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      uint64_t v10 = *(std::__shared_weak_count **)(a4 + v7 - 16);
      *(_OWORD *)(a4 + v7 - 24) = v9;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      *(_DWORD *)(a4 + v7 - 8) = *(_DWORD *)(v8 - 8);
      v7 -= 24;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void *std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  std::string::size_type v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)std::string::size_type v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      *(_DWORD *)(a4 + 16) = *((_DWORD *)v5 + 4);
      a4 += 24;
      std::string::size_type v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 24);
      a3 -= 24;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 + 16);
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
      v4 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 24;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 24;
  }
}

void **std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>,std::reverse_iterator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t smart_enums::validators::flags<unsigned int>(uint64_t result, int a2, int *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 4 * a4;
    do
    {
      int v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4;
    }
    while (v4);
  }
  if (a2)
  {
    uint64_t v6 = result;
    int v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = v6;
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &unk_26CF1FB20;
    *((_DWORD *)exception + 8) = v7;
  }
  return result;
}

void smart_enums::validators::validator_exception<unsigned int>::~validator_exception(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x223C249A0);
}

void smart_enums::validators::validator_exception<unsigned int>::reason(smart_enums::validators::validator_exception_base *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)smart_enums::validators::validator_exception_base::what(a1);
  std::string::basic_string[abi:ne180100]<0>(v15, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)v15[1];
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v11 = v9;
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](&v14);
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_21E263340(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

BOOL FileDescriptor::is_mounted_on_apfs(FileDescriptor *this)
{
  FileDescriptor::get_mounted_on_fs((uint64_t *)__p, this);
  unint64_t v1 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 4)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v6 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    BOOL v3 = *(_DWORD *)v2 == 1936093281;
    if ((char)v6 < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v3 = 0;
    if ((char)v6 < 0) {
LABEL_9:
    }
      operator delete(__p[0]);
  }
  return v3;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<651ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF1FCF0;
  di_log::logger_buf<di_log::log_printer<651ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<651ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2639B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<651ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 651;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v13 = a2;
      }
      else {
        char v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 651;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void DiskImageROChunkRaw::~DiskImageROChunkRaw(DiskImageROChunkRaw *this)
{
  *(void *)this = &unk_26CF1FD70;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF1FD70;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t DiskImageROChunkRaw::get_block_size(DiskImageROChunkRaw *this)
{
  return *((void *)this + 4);
}

unint64_t DiskImageROChunkRaw::get_num_blocks(DiskImageROChunkRaw *this)
{
  return (unint64_t)(*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
       / *((void *)this + 4);
}

uint64_t DiskImageROChunkRaw::is_writable(DiskImageROChunkRaw *this)
{
  return 0;
}

void DiskImageROChunkRaw::create_image_info(DiskImageROChunkRaw *this)
{
}

void sub_21E263DA0(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C408DB67ED7);
  _Unwind_Resume(a1);
}

uint64_t DiskImageROChunkRaw::set_size(DiskImageROChunkRaw *this)
{
  return 4294967251;
}

__n128 DiskImageROChunkRaw::get_io_constraints@<Q0>(DiskImageROChunkRaw *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 40);
  long long v3 = *(_OWORD *)((char *)this + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t DiskImage::supports_unmap(DiskImage *this)
{
  return 0;
}

uint64_t DiskImage::may_read_extra(DiskImage *this)
{
  return 0;
}

void DiskImageROChunkRaw::_create_ctx(DiskImageROChunkRaw *this)
{
}

void sub_21E263E74(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

unint64_t DiskImage::read(DiskImage *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  v34[0] = DiskImage::read;
  v34[1] = 0;
  v34[2] = this;
  v34[3] = a2;
  uint64_t v4 = *((void *)a3 + 1);
  *(void *)&long long v22 = *(void *)a3;
  *((void *)&v22 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v23[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v24 = *((void *)a3 + 6);
  long long v25 = *(_OWORD *)((char *)a3 + 56);
  long long v26 = *(_OWORD *)((char *)a3 + 72);
  long long v27 = *(_OWORD *)((char *)a3 + 88);
  char v28 = *((unsigned char *)a3 + 104);
  int v5 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v29 = *((void *)a3 + 14);
  uint64_t v30 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = *((_OWORD *)a3 + 8);
  uint64_t v32 = *((void *)a3 + 18);
  char v33 = *((unsigned char *)a3 + 152);
  uint64_t v6 = *((void *)a4 + 1);
  *(void *)&long long v10 = *(void *)a4;
  *((void *)&v10 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v11[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v12 = *((void *)a4 + 6);
  long long v13 = *(_OWORD *)((char *)a4 + 56);
  long long v14 = *(_OWORD *)((char *)a4 + 72);
  long long v15 = *(_OWORD *)((char *)a4 + 88);
  char v16 = *((unsigned char *)a4 + 104);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v17 = *((void *)a4 + 14);
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *((_OWORD *)a4 + 8);
  uint64_t v20 = *((void *)a4 + 18);
  char v21 = *((unsigned char *)a4 + 152);
  unint64_t v8 = for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>((uint64_t)v34, &v22, &v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  return v8;
}

void sub_21E264034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

unint64_t DiskImage::write(DiskImage *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  v34[0] = DiskImage::write;
  v34[1] = 0;
  v34[2] = this;
  v34[3] = a2;
  uint64_t v4 = *((void *)a3 + 1);
  *(void *)&long long v22 = *(void *)a3;
  *((void *)&v22 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v23[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v24 = *((void *)a3 + 6);
  long long v25 = *(_OWORD *)((char *)a3 + 56);
  long long v26 = *(_OWORD *)((char *)a3 + 72);
  long long v27 = *(_OWORD *)((char *)a3 + 88);
  char v28 = *((unsigned char *)a3 + 104);
  int v5 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v29 = *((void *)a3 + 14);
  uint64_t v30 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = *((_OWORD *)a3 + 8);
  uint64_t v32 = *((void *)a3 + 18);
  char v33 = *((unsigned char *)a3 + 152);
  uint64_t v6 = *((void *)a4 + 1);
  *(void *)&long long v10 = *(void *)a4;
  *((void *)&v10 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v11[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v12 = *((void *)a4 + 6);
  long long v13 = *(_OWORD *)((char *)a4 + 56);
  long long v14 = *(_OWORD *)((char *)a4 + 72);
  long long v15 = *(_OWORD *)((char *)a4 + 88);
  char v16 = *((unsigned char *)a4 + 104);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v17 = *((void *)a4 + 14);
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *((_OWORD *)a4 + 8);
  uint64_t v20 = *((void *)a4 + 18);
  char v21 = *((unsigned char *)a4 + 152);
  unint64_t v8 = for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>((uint64_t)v34, &v22, &v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  return v8;
}

void sub_21E2641EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t DiskImageROChunkRaw::read(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  DiskImageROChunkRaw::get_rounded_sg_entry(a1, a3, (uint64_t)&v6);
  int v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_21E264284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageROChunkRaw::write()
{
  return -102;
}

uint64_t DiskImageROChunkRaw::flush()
{
  return 4294967251;
}

uint64_t DiskImage::unmap()
{
  return 4294967251;
}

uint64_t DiskImage::set_size(DiskImage *this)
{
  return 4294967218;
}

double DiskImage::get_io_constraints@<D0>(DiskImage *this@<X0>, _OWORD *a2@<X8>)
{
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

void DiskImageROChunkRaw::ContextROChunkRaw::~ContextROChunkRaw(DiskImageROChunkRaw::ContextROChunkRaw *this)
{
  *(void *)this = &unk_26CF1FE70;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF1FE70;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x223C249A0);
}

unint64_t for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  unint64_t v15 = details::for_each_sg_in_vec_internal<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>(a1, (sg_vec_ns *)&v28, (const sg_vec_ns::details::sg_vec_iterator *)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_21E2644B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t DiskImage::read(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

unint64_t details::for_each_sg_in_vec_internal<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>(uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v8 = 0;
  unint64_t v9 = *((void *)a3 + 18);
  v32[0] = 0;
  v32[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((void *)a2 + 18) >= v9 || v8 >= a4) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v30 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((void *)&v30 + 1) = 142;
      int v31 = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(&v26, &v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"sg: ", 4);
      operator<<(&v28);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v26);
      MEMORY[0x223C24910](&v29);
    }
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = v9;
    char v27 = 2;
    trim_sg_to_interval(a2, (uint64_t)&v26, (uint64_t)&v30);
    long long v11 = *(uint64_t (**)(void *, void, long long *))a1;
    uint64_t v12 = *(void *)(a1 + 8);
    long long v13 = (void *)(*(void *)(a1 + 16) + (v12 >> 1));
    if (v12) {
      long long v11 = *(uint64_t (**)(void *, void, long long *))(*v13 + v11);
    }
    int64_t v14 = v11(v13, *(void *)(a1 + 24), &v30);
    unint64_t v16 = v14;
    BOOL v17 = v14 >= 0 || v14 == 0;
    char v18 = v17;
    if (v17)
    {
      uint64_t v19 = (uint64_t)v15;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v15, v14))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v25, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v25, (uint64_t)a3, v19, v16, a4, (sg_vec_ref *)&v26);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v32, (uint64_t)&v26);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v26);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v25);
        sg_vec_ref::begin((sg_vec_ref *)v32, (uint64_t)&v26);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, &v26);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v26);
        sg_vec_ref::end((sg_vec_ref *)v32, (uint64_t)&v26);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, &v26);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v26);
      }
      if (a5) {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v16);
      }
      else {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v16);
      }
      v8 += v16;
    }
    else
    {
      if ((int)v14 >= 0) {
        uint64_t v20 = v14;
      }
      else {
        uint64_t v20 = -(int)v14;
      }
      unint64_t v22 = -v20;
    }
    if (*((void *)&v30 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
    }
    if ((v18 & 1) == 0) {
      goto LABEL_34;
    }
  }
  unint64_t v22 = v8;
LABEL_34:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v32);
  return v22;
}

void sub_21E2647A0(_Unwind_Exception *a1)
{
  if (STACK[0x2E8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E8]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::write(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

void *DiskImageROChunkRaw::get_rounded_sg_entry@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  unint64_t v9 = a2[4];
  uint64_t v10 = *a2;
  double result = details::get_dummy_shared_ptr();
  uint64_t v12 = result[1];
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = v6 / v7 * v7;
  unint64_t v14 = v8 - v13;
  unint64_t v15 = v5 + v6 + v7 - 1 - v13 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v15) {
    unint64_t v15 = v9;
  }
  if (v14 >= v15) {
    unint64_t v14 = v15;
  }
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v14;
  *(unsigned char *)(a3 + 40) = 0;
  return result;
}

uint64_t DiskImageRaw::DiskImageRaw(uint64_t a1, void *a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CF1FEC8;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 40))() % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    unint64_t v7 = std::generic_category();
    exception[1] = 152;
    exception[2] = v7;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Size is not a multiple of block size";
  }
  return a1;
}

void sub_21E264A10(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void DiskImageRaw::~DiskImageRaw(DiskImageRaw *this)
{
  *(void *)this = &unk_26CF1FEC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF1FEC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t DiskImageRaw::get_block_size(DiskImageRaw *this)
{
  return *((void *)this + 4);
}

unint64_t DiskImageRaw::get_num_blocks(DiskImageRaw *this)
{
  return (unint64_t)(*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2))
       / *((void *)this + 4);
}

uint64_t DiskImageRaw::is_writable(DiskImageRaw *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 48))();
}

void DiskImageRaw::create_image_info(DiskImageRaw *this)
{
}

void sub_21E264BD4(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C408DB67ED7);
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::set_size(DiskImageRaw *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 56))();
}

uint64_t DiskImageRaw::supports_unmap(DiskImageRaw *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 32))();
}

void DiskImageRaw::_create_ctx(DiskImageRaw *this)
{
}

void sub_21E264CD0(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::read(DiskImageRaw *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  v48[80] = *MEMORY[0x263EF8340];
  std::string __p = v48;
  long long v47 = xmmword_21E39BDD0;
  unint64_t v7 = sg_vec_ns::count_buffers(a3, a4, a3);
  uint64_t v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    }
    uint64_t v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v10, v9, (_DWORD *)__p + 10 * v47, 0, 0);
  }
  v45[0] = &__p;
  v45[1] = a2;
  uint64_t v11 = *((void *)a3 + 1);
  *(void *)&long long v33 = *(void *)a3;
  *((void *)&v33 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  v34[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v35 = *((void *)a3 + 6);
  long long v36 = *(_OWORD *)((char *)a3 + 56);
  long long v37 = *(_OWORD *)((char *)a3 + 72);
  long long v38 = *(_OWORD *)((char *)a3 + 88);
  char v39 = *((unsigned char *)a3 + 104);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v40 = *((void *)a3 + 14);
  uint64_t v41 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v42 = *((_OWORD *)a3 + 8);
  uint64_t v43 = *((void *)a3 + 18);
  char v44 = *((unsigned char *)a3 + 152);
  uint64_t v13 = *((void *)a4 + 1);
  *(void *)&long long v21 = *(void *)a4;
  *((void *)&v21 + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  v22[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v23 = *((void *)a4 + 6);
  long long v24 = *(_OWORD *)((char *)a4 + 56);
  long long v25 = *(_OWORD *)((char *)a4 + 72);
  long long v26 = *(_OWORD *)((char *)a4 + 88);
  char v27 = *((unsigned char *)a4 + 104);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v28 = *((void *)a4 + 14);
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v30 = *((_OWORD *)a4 + 8);
  uint64_t v31 = *((void *)a4 + 18);
  char v32 = *((unsigned char *)a4 + 152);
  _Z18for_each_sg_in_vecIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m((uint64_t)v45, &v33, &v21, 0xFFFFFFFFFFFFFFFFLL);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  (*(void (**)(void))(**((void **)a2 + 2) + 144))(*((void *)a2 + 2));
  if ((void)v47)
  {
    int v15 = 0;
    unint64_t v16 = (unsigned int *)__p;
    uint64_t v17 = 40 * v47;
    do
    {
      int v18 = lw_future<int>::get(v16);
      int v19 = v18;
      if (v18 < 0) {
        break;
      }
      v15 += v18;
      v16 += 10;
      int v19 = v15;
      v17 -= 40;
    }
    while (v17);
  }
  else
  {
    int v19 = 0;
  }
  if (*((void *)&v47 + 1) && v48 != __p) {
    operator delete(__p);
  }
  return v19;
}

void sub_21E264FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a9);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a29);
  if (a53)
  {
    if (v53 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::write(DiskImageRaw *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  v48[80] = *MEMORY[0x263EF8340];
  std::string __p = v48;
  long long v47 = xmmword_21E39BDD0;
  unint64_t v7 = sg_vec_ns::count_buffers(a3, a4, a3);
  uint64_t v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    }
    uint64_t v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v10, v9, (_DWORD *)__p + 10 * v47, 0, 0);
  }
  v45[0] = &__p;
  v45[1] = a2;
  uint64_t v11 = *((void *)a3 + 1);
  *(void *)&long long v33 = *(void *)a3;
  *((void *)&v33 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  v34[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v35 = *((void *)a3 + 6);
  long long v36 = *(_OWORD *)((char *)a3 + 56);
  long long v37 = *(_OWORD *)((char *)a3 + 72);
  long long v38 = *(_OWORD *)((char *)a3 + 88);
  char v39 = *((unsigned char *)a3 + 104);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v40 = *((void *)a3 + 14);
  uint64_t v41 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v42 = *((_OWORD *)a3 + 8);
  uint64_t v43 = *((void *)a3 + 18);
  char v44 = *((unsigned char *)a3 + 152);
  uint64_t v13 = *((void *)a4 + 1);
  *(void *)&long long v21 = *(void *)a4;
  *((void *)&v21 + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  v22[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v23 = *((void *)a4 + 6);
  long long v24 = *(_OWORD *)((char *)a4 + 56);
  long long v25 = *(_OWORD *)((char *)a4 + 72);
  long long v26 = *(_OWORD *)((char *)a4 + 88);
  char v27 = *((unsigned char *)a4 + 104);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v28 = *((void *)a4 + 14);
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v30 = *((_OWORD *)a4 + 8);
  uint64_t v31 = *((void *)a4 + 18);
  char v32 = *((unsigned char *)a4 + 152);
  _Z18for_each_sg_in_vecIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m((uint64_t)v45, &v33, &v21, 0xFFFFFFFFFFFFFFFFLL);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  (*(void (**)(void))(**((void **)a2 + 2) + 144))(*((void *)a2 + 2));
  if ((void)v47)
  {
    int v15 = 0;
    unint64_t v16 = (unsigned int *)__p;
    uint64_t v17 = 40 * v47;
    do
    {
      int v18 = lw_future<int>::get(v16);
      int v19 = v18;
      if (v18 < 0) {
        break;
      }
      v15 += v18;
      v16 += 10;
      int v19 = v15;
      v17 -= 40;
    }
    while (v17);
  }
  else
  {
    int v19 = 0;
  }
  if (*((void *)&v47 + 1) && v48 != __p) {
    operator delete(__p);
  }
  return v19;
}

void sub_21E2652EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a9);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a29);
  if (a53)
  {
    if (v53 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), a3);
}

uint64_t DiskImageRaw::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a4;
  for (uint64_t i = (void *)(a3 + 8); ; i += 2)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a2 + 16) + 24))(*(void *)(a2 + 16), *(void *)(a1 + 32) * *(i - 1), *i * *(void *)(a1 + 32));
    if (result) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }
  return result;
}

void DiskImageRaw::ContextRaw::~ContextRaw(DiskImageRaw::ContextRaw *this)
{
  *(void *)this = &unk_26CF1FFC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF1FFC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t sg_vec_ns::count_buffers(sg_vec_ns *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  long long v3 = *(_OWORD *)((char *)this + 72);
  long long v13 = *(_OWORD *)((char *)this + 56);
  long long v14 = v3;
  long long v15 = *(_OWORD *)((char *)this + 88);
  char v16 = *((unsigned char *)this + 104);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  uint64_t v17 = *((void *)this + 14);
  int v18 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *((_OWORD *)this + 8);
  uint64_t v5 = *((void *)a2 + 7);
  uint64_t v6 = *((void *)a2 + 8);
  uint64_t v7 = *((void *)a2 + 9);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 15);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (uint64_t i = 0; ; ++i)
  {
    BOOL v10 = (void)v13 == v5 && *((void *)&v13 + 1) == v6;
    if (v10 && (void)v14 == v7) {
      break;
    }
    sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)&v13);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return i;
}

void sub_21E265578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z18for_each_sg_in_vecIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  uint64_t v15 = _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(a1, (sg_vec_ns *)&v28, (const sg_vec_ns::details::sg_vec_iterator *)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_21E2656CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v10 = *(void *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>(a1, *(_DWORD **)a1, a4, (_DWORD *)(*(void *)a1 + 40 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10 && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  uint64_t v11 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = a3;
}

void sub_21E265774(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    long long v12 = a2;
    do
    {
      lw_future<int>::lw_future(a5, v12);
      v12 += 10;
      a5 += 40;
    }
    while (v12 != v11);
  }
  if (a6)
  {
    uint64_t v13 = a6;
    unint64_t v14 = a5;
    do
    {
      unint64_t v15 = lw_future<int>::lw_future(v14, a7);
      a7 += 10;
      unint64_t v14 = v15 + 40;
      --v13;
    }
    while (v13);
  }
  if (v11 != a4)
  {
    unint64_t v16 = a5 + 40 * a6;
    do
    {
      unint64_t v17 = lw_future<int>::lw_future(v16, v11);
      v11 += 10;
      unint64_t v16 = v17 + 40;
    }
    while (v11 != a4);
  }
}

void sub_21E26584C(void *a1)
{
}

void sub_21E265854()
{
}

void sub_21E265890()
{
}

unint64_t lw_future<int>::lw_future(unint64_t a1, _DWORD *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = ref::details::_get_tagged_ptr_lock(a1, a2);
  *(void *)(a1 + 24) = ref::details::_get_tagged_ptr_cond(a1, v4);
  if (*((unsigned char *)a2 + 4))
  {
    *(_DWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 4) = 1;
  }
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  long long v5 = *(unint64_t **)(a1 + 32);
  if (v5) {
    unint64_t *v5 = a1;
  }
  return a1;
}

uint64_t _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *((void *)a3 + 18);
  v30[0] = 0;
  v30[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((void *)a2 + 18) >= v8 || v7 >= a4) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v27 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((void *)&v27 + 1) = 104;
      LODWORD(v28) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(&v23, &v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"sg: ", 4);
      operator<<(&v25);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v23);
      MEMORY[0x223C24910](&v26);
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    trim_sg_to_interval(a2, (uint64_t)&v23, (uint64_t)&v27);
    uint64_t v10 = *(uint64_t **)a1;
    (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 16) + 128))(&v23);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(v10, (_DWORD *)(*v10 + 40 * v11), (const char *)1, &v23, &v31);
    }
    else
    {
      lw_future<int>::lw_future(*v10 + 40 * v11, &v23);
      ++v10[1];
    }
    uint64_t v12 = (int)v28;
    if ((v28 & 0x80000000) != 0) {
      int64_t v13 = (int)v28;
    }
    else {
      int64_t v13 = v28;
    }
    BOOL v14 = v13 >= 0 || v13 == 0;
    char v15 = v14;
    if (v14)
    {
      unint64_t v16 = v29;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v29, v13))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v22, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v22, (uint64_t)a3, (uint64_t)v16, v13, a4, (sg_vec_ref *)&v23);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v30, (uint64_t)&v23);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v22);
        sg_vec_ref::begin((sg_vec_ref *)v30, (uint64_t)&v23);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, &v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v23);
        sg_vec_ref::end((sg_vec_ref *)v30, (uint64_t)&v23);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, &v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v23);
      }
      if (a5) {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      else {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      v7 += v13;
    }
    else
    {
      if ((int)v28 >= 0) {
        uint64_t v12 = -(uint64_t)(int)v28;
      }
      uint64_t v18 = v12;
    }
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
    if ((v15 & 1) == 0) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = v7;
LABEL_37:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
  return v18;
}

void sub_21E265C08(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E0]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x333333333333334) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  BOOL v14 = operator new(40 * v11);
  boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>((uint64_t)a1, (unint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x333333333333333;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x333333333333333 - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  long long v9 = &a2[v3];
  if (v8 < 0x333333333333333) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v10 = *(void *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(a1, *(_DWORD **)a1, a4, (_DWORD *)(*(void *)a1 + 40 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10 && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  uint64_t v11 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = a3;
}

void sub_21E265E30(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      unint64_t v13 = lw_future<int>::lw_future(a5, v12);
      v12 += 10;
      a5 = v13 + 40;
    }
    while (v12 != v11);
  }
  unint64_t result = lw_future<int>::lw_future(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      unint64_t v15 = lw_future<int>::lw_future(result, v11);
      v11 += 10;
      unint64_t result = v15 + 40;
    }
    while (v11 != a4);
  }
  return result;
}

void sub_21E265EE8(void *a1)
{
}

void sub_21E265EF0()
{
}

void sub_21E265F10()
{
}

uint64_t lw_future<int>::get(unsigned int *a1)
{
  if (*((unsigned char *)a1 + 4)) {
    return *a1;
  }
  atomic_fetch_add((atomic_ullong *volatile)a1 + 1, 1uLL);
  unint64_t v4 = (std::mutex *)*((void *)a1 + 2);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)a1 + 2);
  v6.__owns_ = 1;
  std::mutex::lock(v4);
  if (!*((unsigned char *)a1 + 4))
  {
    unint64_t v5 = (std::condition_variable *)*((void *)a1 + 3);
    do
      std::condition_variable::wait(v5, &v6);
    while (!*((unsigned char *)a1 + 4));
  }
  atomic_fetch_add((atomic_ullong *volatile)a1 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::unique_lock<std::mutex>::unlock(&v6);
  uint64_t v2 = *a1;
  if (v6.__owns_) {
    std::mutex::unlock(v6.__m_);
  }
  return v2;
}

void sub_21E265FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z18for_each_sg_in_vecIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  uint64_t v15 = _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(a1, (sg_vec_ns *)&v28, (const sg_vec_ns::details::sg_vec_iterator *)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_21E266114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *((void *)a3 + 18);
  v30[0] = 0;
  v30[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((void *)a2 + 18) >= v8 || v7 >= a4) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v27 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((void *)&v27 + 1) = 104;
      LODWORD(v28) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(&v23, &v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"sg: ", 4);
      operator<<(&v25);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v23);
      MEMORY[0x223C24910](&v26);
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    trim_sg_to_interval(a2, (uint64_t)&v23, (uint64_t)&v27);
    long long v10 = *(uint64_t **)a1;
    (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 16) + 136))(&v23);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(v10, (_DWORD *)(*v10 + 40 * v11), (const char *)1, &v23, &v31);
    }
    else
    {
      lw_future<int>::lw_future(*v10 + 40 * v11, &v23);
      ++v10[1];
    }
    uint64_t v12 = (int)v28;
    if ((v28 & 0x80000000) != 0) {
      int64_t v13 = (int)v28;
    }
    else {
      int64_t v13 = v28;
    }
    BOOL v14 = v13 >= 0 || v13 == 0;
    char v15 = v14;
    if (v14)
    {
      unint64_t v16 = v29;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v29, v13))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v22, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v22, (uint64_t)a3, (uint64_t)v16, v13, a4, (sg_vec_ref *)&v23);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v30, (uint64_t)&v23);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v22);
        sg_vec_ref::begin((sg_vec_ref *)v30, (uint64_t)&v23);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, &v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v23);
        sg_vec_ref::end((sg_vec_ref *)v30, (uint64_t)&v23);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, &v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v23);
      }
      if (a5) {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      else {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      v7 += v13;
    }
    else
    {
      if ((int)v28 >= 0) {
        uint64_t v12 = -(uint64_t)(int)v28;
      }
      uint64_t v18 = v12;
    }
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
    if ((v15 & 1) == 0) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = v7;
LABEL_37:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
  return v18;
}

void sub_21E26641C(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E0]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

uint64_t DiskImagePlugin::DiskImagePlugin(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CF1DCB0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 48) = *(void *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  return a1;
}

void sub_21E266524(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void DiskImageUDIF::DiskImageUDIF(uint64_t a1, uint64_t *a2)
{
  udif::details::UDIF_base::UDIF_base((uint64_t)v2, a2);
}

void sub_21E2665D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  udif::details::UDIF_base::~UDIF_base((udif::details::UDIF_base *)va);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::DiskImageUDIFRead(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CF20060;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)udif::details::UDIF_base::UDIF_base(a1 + 64, a2) = &unk_26CF20020;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v6 = *(void *)(a2 + 96);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = 1;
    *(void *)(a1 + 32) = 2 * v6;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return a1;
}

void sub_21E266694(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void UDIFReader<locks::None>::~UDIFReader(udif::details::UDIF_base *a1)
{
  udif::details::UDIF_base::~UDIF_base(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_block_size()
{
  return 512;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_num_blocks(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

__n128 DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_io_constraints@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::may_read_extra(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::_create_ctx()
{
}

void sub_21E26675C(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10A1C40622C4E86);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::read(uint64_t a1, uint64_t a2, sg_vec_ns *this, sg_vec_ns::details::sg_vec_iterator *a4)
{
  v123[128] = *MEMORY[0x263EF8340];
  v121 = v123;
  long long v122 = xmmword_21E39BDD0;
  std::string __p = v120;
  long long v119 = xmmword_21E39BDD0;
  unint64_t v8 = sg_vec_ns::count_buffers(this, a4, this);
  uint64_t v10 = v8;
  if (v8 > 0x10)
  {
    if (v8 >= 0x333333333333334) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v9);
    }
    uint64_t v11 = operator new(40 * v8);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v11, v10, (_DWORD *)__p + 10 * v119, 0, 0);
  }
  uint64_t v12 = *((void *)a4 + 18) - *((void *)this + 18);
  udif::details::UDIF_base::_get_runs_for_io((udif::details::UDIF_base *)(a1 + 64), *((void *)this + 3), v12 & ~(v12 >> 63), (uint64_t *)&v121);
  int64_t v13 = (std::__shared_weak_count *)*((void *)a4 + 1);
  uint64_t v104 = *(void *)a4;
  char v105 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v68 = a1;
  BOOL v14 = (sg_vec_ns::details::sg_vec_iterator *)((char *)a4 + 56);
  long long v15 = *(_OWORD *)((char *)a4 + 56);
  v106[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v106 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v107 = *((void *)a4 + 6);
  long long v108 = v15;
  long long v16 = *(_OWORD *)((char *)a4 + 88);
  long long v109 = *(_OWORD *)((char *)a4 + 72);
  long long v110 = v16;
  char v111 = *((unsigned char *)a4 + 104);
  long long v17 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v112 = *((void *)a4 + 14);
  uint64_t v113 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v114 = *((_OWORD *)a4 + 8);
  uint64_t v115 = *((void *)a4 + 18);
  char v116 = *((unsigned char *)a4 + 152);
  v102[0] = 0;
  char v103 = 0;
  uint64_t v18 = (char *)v121;
  uint64_t v19 = *((void *)v121 + 3);
  long long v20 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v89 = *(void **)this;
  long long v90 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = (sg_vec_ns *)((char *)this + 56);
  long long v22 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)long long v91 = *((_OWORD *)this + 1);
  *(_OWORD *)&v91[9] = *(_OWORD *)((char *)this + 25);
  uint64_t v92 = *((void *)this + 6);
  long long v93 = v22;
  long long v23 = *(_OWORD *)((char *)this + 88);
  long long v94 = *(_OWORD *)((char *)this + 72);
  long long v95 = v23;
  char v96 = *((unsigned char *)this + 104);
  char v24 = (std::__shared_weak_count *)*((void *)this + 15);
  uint64_t v97 = *((void *)this + 14);
  char v98 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v99 = *((_OWORD *)this + 8);
  uint64_t v100 = *((void *)this + 18);
  char v101 = *((unsigned char *)this + 152);
  uint64_t v69 = a2;
  if (!(void)v122)
  {
    uint64_t v25 = 0;
    uint64_t v72 = 0;
    goto LABEL_83;
  }
  long long v67 = this;
  uint64_t v25 = 0;
  uint64_t v71 = &v18[64 * (void)v122];
  uint64_t v72 = 0;
  v70 = (uint64_t **)(a2 + 16);
  while (1)
  {
    unint64_t v26 = *((void *)v18 + 4);
    if (v26)
    {
      if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v89, (uint64_t)&v104)) {
        break;
      }
    }
    if (v26 > *(void *)&v91[16]) {
      sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&v89);
    }
    if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v89, (uint64_t)&v104))
    {
      *(void *)&long long v85 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v85 + 1) = 75;
      v86.i32[0] = 16;
      di_log::logger<di_log::log_printer<184ul>>::logger(v73, &v85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Udif: advanced buffer, needs to read ", 37);
      udif::operator<<(&v79, (int *)v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)" but buffer is full", 19);
      std::ios_base::getloc((const std::ios_base *)((char *)&v79 + *(void *)(v79 - 24)));
      uint64_t v53 = std::locale::use_facet((const std::locale *)&v83, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
      std::locale::~locale((std::locale *)&v83);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf((uint64_t)v73);
      goto LABEL_82;
    }
    long long v27 = v89;
    int64_t v28 = v90;
    if (v90) {
      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v29 = *(void *)&v91[16];
    if (v26 <= *(void *)&v91[16])
    {
      if (*(_DWORD *)v18)
      {
        int8x16_t v32 = *(int8x16_t *)(v18 + 8);
        uint64_t v33 = *((void *)v18 + 4);
        *(void *)&long long v85 = v27;
        *((void *)&v85 + 1) = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int8x16_t v86 = vextq_s8(v32, v32, 8uLL);
        uint64_t v87 = v33;
        char v88 = 0;
        if (v72)
        {
          *(void *)&long long v83 = v18;
          char v34 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(v70, (unsigned int *)v18, (uint64_t)&std::piecewise_construct, (_DWORD **)&v83);
          (*(void (**)(long long *__return_ptr))(*v34[5] + 128))(v73);
          if ((void)v119 == *((void *)&v119 + 1))
          {
            boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>((uint64_t *)&__p, (_DWORD *)__p + 10 * v119, (const char *)1, v73, &v83);
          }
          else
          {
            lw_future<int>::lw_future((unint64_t)__p + 40 * v119, v73);
            *(void *)&long long v119 = v119 + 1;
          }
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v89, v26);
          goto LABEL_30;
        }
        *(void *)&v73[0] = v18;
        long long v36 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(v70, (unsigned int *)v18, (uint64_t)&std::piecewise_construct, (_DWORD **)v73);
        int v37 = (*(uint64_t (**)(uint64_t *, long long *))(*v36[5] + 88))(v36[5], &v85);
        uint64_t v25 = v37;
        if (v37 < 0)
        {
          char v35 = 0;
          int v31 = 2;
        }
        else if (*(unsigned char *)(v69 + 56) && *((int *)v18 + 8) > (uint64_t)v37)
        {
          *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
          *((void *)&v83 + 1) = 75;
          int v84 = 16;
          di_log::logger<di_log::log_printer<214ul>>::logger(v73, &v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)&v79 + *(void *)(v79 - 24)));
          char v38 = std::locale::use_facet(&v117, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
          std::locale::~locale(&v117);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf((uint64_t)v73);
          MEMORY[0x223C24910](&v80);
          char v35 = 0;
          int v31 = 2;
          uint64_t v25 = -5;
        }
        else
        {
          uint64_t v39 = DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::trim_io(v68, (void **)&v85, (uint64_t)v18, &v121, v29);
          v26 -= v39;
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v89, v26);
          uint64_t v66 = v19;
          if ((void)v122)
          {
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = (void)v122 << 6;
            uint64_t v43 = (uint64_t *)((char *)v121 + 32);
            do
            {
              uint64_t v45 = *v43;
              v43 += 8;
              uint64_t v44 = v45;
              uint64_t v46 = v45 + v40;
              uint64_t v47 = v45 + v41;
              uint64_t v48 = v29 - v41;
              BOOL v49 = v45 + v41 > v29;
              if (v45 + v41 >= v29) {
                uint64_t v41 = 0;
              }
              else {
                uint64_t v41 = v47;
              }
              if (v49)
              {
                uint64_t v41 = v44;
                uint64_t v50 = v48;
              }
              else
              {
                uint64_t v50 = 0;
              }
              uint64_t v40 = v46 + v50;
              v42 -= 64;
            }
            while (v42);
          }
          else
          {
            uint64_t v40 = 0;
          }
          char cow = sg_vec_ns::details::sg_vec_iterator::get_cow(v67);
          unint64_t v52 = v40 - v39;
          uint64_t v19 = v39 + v66;
          sg_vec_ref::sg_vec_ref((sg_vec_ref *)v73, v21, v14, v39 + v66, v52, cow);
          std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v102);
          sg_vec_ref::sg_vec_ref((sg_vec_ref *)v102, (uint64_t)v73);
          char v103 = 1;
          if (v82) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v82);
          }
          if (v81) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          }
          if (v78) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v78);
          }
          if (v77) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v77);
          }
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
          if (v74) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v74);
          }
          sg_vec_ref::begin((sg_vec_ref *)v102, (uint64_t)v73);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v89, v73);
          if (v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v75);
          }
          if (*((void *)&v73[0] + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73[0] + 1));
          }
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v89, v26);
          sg_vec_ref::end((sg_vec_ref *)v102, (uint64_t)v73);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v104, v73);
          if (v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v75);
          }
          if (*((void *)&v73[0] + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73[0] + 1));
          }
LABEL_30:
          int v31 = 0;
          char v35 = 1;
        }
        if (*((void *)&v85 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
        }
        if ((v35 & 1) == 0) {
          goto LABEL_37;
        }
      }
      else
      {
        bzero(v27, v26);
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v89, v26);
      }
      int v31 = 0;
      v72 += v26;
      goto LABEL_37;
    }
    *(void *)&long long v85 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
    *((void *)&v85 + 1) = 75;
    v86.i32[0] = 16;
    di_log::logger<di_log::log_printer<193ul>>::logger(v73, &v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Udif: needs to read ", 20);
    udif::operator<<(&v79, (int *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)" but buffer is too small ", 25);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)&v79 + *(void *)(v79 - 24)));
    uint64_t v30 = std::locale::use_facet((const std::locale *)&v83, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)&v83);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf((uint64_t)v73);
    MEMORY[0x223C24910](&v80);
    int v31 = 2;
    uint64_t v25 = -28;
LABEL_37:
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (!v31)
    {
      v18 += 64;
      if (v18 != v71) {
        continue;
      }
    }
    goto LABEL_83;
  }
  *(void *)&long long v85 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((void *)&v85 + 1) = 75;
  v86.i32[0] = 16;
  di_log::logger<di_log::log_printer<175ul>>::logger(v73, &v85);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Udif: needs to read ", 20);
  udif::operator<<(&v79, (int *)v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)" but buffer is full", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)&v79 + *(void *)(v79 - 24)));
  uint64_t v54 = std::locale::use_facet((const std::locale *)&v83, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale((std::locale *)&v83);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf((uint64_t)v73);
LABEL_82:
  MEMORY[0x223C24910](&v80);
  uint64_t v25 = -28;
LABEL_83:
  long long v55 = *(void **)(v69 + 16);
  if (v55 != (void *)(v69 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v55[5] + 144))(v55[5]);
      long long v56 = (void *)v55[1];
      if (v56)
      {
        do
        {
          char v57 = v56;
          long long v56 = (void *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          char v57 = (void *)v55[2];
          BOOL v58 = *v57 == (void)v55;
          long long v55 = v57;
        }
        while (!v58);
      }
      long long v55 = v57;
    }
    while (v57 != (void *)(v69 + 24));
  }
  if ((v25 & 0x8000000000000000) == 0)
  {
    if ((void)v119)
    {
      long long v59 = (unsigned int *)__p;
      long long v60 = (unsigned int *)((char *)__p + 40 * v119);
      char v61 = v121;
      while (1)
      {
        do
        {
          int v62 = v61[16];
          v61 += 16;
        }
        while (!v62);
        int v63 = lw_future<int>::get(v59);
        uint64_t v25 = v63;
        if (v63 < 0) {
          break;
        }
        if (*(unsigned char *)(v69 + 56) && (int)v61[8] > (uint64_t)v63)
        {
          *(void *)&long long v85 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
          *((void *)&v85 + 1) = 75;
          v86.i32[0] = 16;
          di_log::logger<di_log::log_printer<254ul>>::logger(v73, &v85);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)&v79 + *(void *)(v79 - 24)));
          char v64 = std::locale::use_facet((const std::locale *)&v83, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
          std::locale::~locale((std::locale *)&v83);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf((uint64_t)v73);
          MEMORY[0x223C24910](&v80);
          uint64_t v25 = -5;
          break;
        }
        v59 += 10;
        if (v59 == v60)
        {
          uint64_t v25 = v72;
          break;
        }
      }
    }
    else
    {
      uint64_t v25 = v72;
    }
  }
  if (v98) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v98);
  }
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v102);
  if (v113) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v113);
  }
  if (v105) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v105);
  }
  if (*((void *)&v119 + 1) && v120 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v122 + 1) && v123 != v121) {
    operator delete(v121);
  }
  return v25;
}

void sub_21E2674BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (STACK[0x620] && a12 != STACK[0x610]) {
    operator delete((void *)STACK[0x610]);
  }
  if (STACK[0x8B8])
  {
    if (a13 != STACK[0x8A8]) {
      operator delete((void *)STACK[0x8A8]);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::flush()
{
  return 4294967251;
}

uint64_t udif::details::UDIF_base::UDIF_base(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)__n128 result = &unk_26CF3B3E8;
  *(void *)(result + 8) = v2;
  long long v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v4;
  uint64_t v5 = result + 16;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(result + 24) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + 8) = v3;
    void *v3 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *(void *)(result + 8) = v5;
  }
  *(void *)(result + 32) = *(void *)(a2 + 32);
  unint64_t v7 = (void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v8;
  uint64_t v9 = result + 40;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 32) = v7;
    *unint64_t v7 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(result + 32) = v9;
  }
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(result + 72) = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(result + 80) = v12;
  *(void *)(result + 104) = *(void *)(a2 + 104);
  int64_t v13 = (void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(result + 112) = v14;
  uint64_t v15 = result + 112;
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(result + 120) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a2 + 104) = v13;
    *int64_t v13 = 0;
    *(void *)(a2 + 120) = 0;
  }
  else
  {
    *(void *)(result + 104) = v15;
  }
  return result;
}

void std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::ContextUDIF(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26CF20160;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  uint64_t v3 = a1 + 16;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a1 + 40;
  *(void *)(a1 + 48) = 0;
  udif::details::UDIF_base::make_backend_contexts((udif::details::UDIF_base *)(a2 + 64), (uint64_t)v7);
  v6[0] = v3;
  v6[1] = v4;
  std::tuple<std::map<udif::run_type,std::shared_ptr<Backend>> &,std::shared_ptr<Backend>&>::operator=[abi:ne180100]<std::map<udif::run_type,std::shared_ptr<Backend>>,std::shared_ptr<Backend>,0>(v6, (uint64_t)v7);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)v7, v8);
  *(unsigned char *)(a1 + 56) = 1;
  return a1;
}

void sub_21E26781C(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t *std::tuple<std::map<udif::run_type,std::shared_ptr<Backend>> &,std::shared_ptr<Backend>&>::operator=[abi:ne180100]<std::map<udif::run_type,std::shared_ptr<Backend>>,std::shared_ptr<Backend>,0>(uint64_t *a1, uint64_t a2)
{
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__move_assign(*a1, (void *)a2);
  uint64_t v4 = a1[1];
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  *(_OWORD *)uint64_t v4 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::~ContextUDIF(uint64_t a1)
{
  *(void *)a1 = &unk_26CF20160;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::~ContextUDIF(uint64_t a1)
{
  *(void *)a1 = &unk_26CF20160;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  JUMPOUT(0x223C249A0);
}

void std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void *di_log::logger<di_log::log_printer<175ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<175ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF201C0;
  a1[45] = &unk_26CF202C0;
  a1[46] = &unk_26CF202E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF201C0;
  a1[45] = &unk_26CF20248;
  a1[46] = &unk_26CF20270;
  return a1;
}

void sub_21E267B28(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<184ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<184ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF203E0;
  a1[45] = &unk_26CF204E0;
  a1[46] = &unk_26CF20508;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF203E0;
  a1[45] = &unk_26CF20468;
  a1[46] = &unk_26CF20490;
  return a1;
}

void sub_21E267C90(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<193ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<193ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF20600;
  a1[45] = &unk_26CF20700;
  a1[46] = &unk_26CF20728;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF20600;
  a1[45] = &unk_26CF20688;
  a1[46] = &unk_26CF206B0;
  return a1;
}

void sub_21E267DF8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<214ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<214ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF20820;
  a1[45] = &unk_26CF20920;
  a1[46] = &unk_26CF20948;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF20820;
  a1[45] = &unk_26CF208A8;
  a1[46] = &unk_26CF208D0;
  return a1;
}

void sub_21E267F60(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::trim_io(uint64_t a1, void **a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5 = a4[1];
  if (!v5) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = v5 << 6;
  uint64_t v9 = (uint64_t *)(*a4 + 32);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    uint64_t v12 = v11 + v6;
    uint64_t v13 = v11 + v7;
    uint64_t v14 = a5 - v7;
    BOOL v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v13;
    }
    if (v15)
    {
      uint64_t v7 = v10;
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v6 = v12 + v16;
    v8 -= 64;
  }
  while (v8);
  if (v6 <= a5 + a5 * *(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(void *)(a3 + 32) - v17);
  return v17;
}

void *di_log::logger<di_log::log_printer<254ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<254ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF20A40;
  a1[45] = &unk_26CF20B40;
  a1[46] = &unk_26CF20B68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF20A40;
  a1[45] = &unk_26CF20AC8;
  a1[46] = &unk_26CF20AF0;
  return a1;
}

void sub_21E268160(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF20358;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E268244(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF20358;
  di_log::logger_buf<di_log::log_printer<175ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<175ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<175ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2687BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<175ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 175;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 175;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF20578;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E268A58(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF20578;
  di_log::logger_buf<di_log::log_printer<184ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<184ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<184ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E268FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<184ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 184;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 184;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF20798;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E26926C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF20798;
  di_log::logger_buf<di_log::log_printer<193ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<193ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<193ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2697E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<193ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 193;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 193;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t **std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  char v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        char v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    os_log_type_t v11 = operator new(0x38uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF209B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E269B44(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF209B8;
  di_log::logger_buf<di_log::log_printer<214ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<214ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<214ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E26A0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<214ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 214;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unsigned int v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 214;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    int v4 = *(std::__shared_weak_count **)(a1 + 328);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    int v5 = *(std::__shared_weak_count **)(a1 + 216);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    char v6 = *(std::__shared_weak_count **)(a1 + 160);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    *(unsigned char *)(a1 + 528) = 0;
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF20BD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E26A3CC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF20BD8;
  di_log::logger_buf<di_log::log_printer<254ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<254ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<254ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E26A944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<254ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 254;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unsigned int v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 254;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void udif::details::UDIF_base::~UDIF_base(udif::details::UDIF_base *this)
{
  *(void *)this = &unk_26CF3B3E8;
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    MEMORY[0x223C249A0](v2, 0x1000C407784F2AFLL);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  udif::details::UDIF_base::~UDIF_base(this);
  JUMPOUT(0x223C249A0);
}

void std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E26AC58(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x223C24980](v1, 0x1000C8077774924);
  }
  __cxa_rethrow();
}

void sub_21E26AC80(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x223C24980);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::shared_ptr<unsigned char>::shared_ptr[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E26AD9C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x223C24980](v1, 0x1000C8077774924);
  }
  __cxa_rethrow();
}

void sub_21E26ADC4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<unsigned char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x223C24980);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::allocate_shared[abi:ne180100]<DiskImageASIF,std::allocator<DiskImageASIF>,std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,void>@<X0>(DiskImageASIF **a1@<X1>, Backend *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x1008uLL);
  uint64_t result = std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,std::allocator<DiskImageASIF>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_21E26AED8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,std::allocator<DiskImageASIF>,0>(void *a1, DiskImageASIF **a2, Backend *a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20D50;
  uint64_t dir_latest_offset = DiskImageASIF::get_dir_latest_offset(*a2, a3, (const di_asif::header *)a3);
  DiskImageASIF::DiskImageASIF(a1 + 3, a2, a3, dir_latest_offset, v9, a4);
  return a1;
}

void sub_21E26AF6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DiskImageASIF>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DiskImageASIF>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<DiskImageASIF>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocate_shared[abi:ne180100]<DiskImageASIF,std::allocator<DiskImageASIF>,unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,void>(uint64_t a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  BOOL v15 = operator new(0x1008uLL);
  std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,std::allocator<DiskImageASIF>,0>(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_21E26B0BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,std::allocator<DiskImageASIF>,0>(void *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20D50;
  DiskImageASIF::DiskImageASIF((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, a6, a7, a8);
}

void sub_21E26B178(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DiskImage  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<DiskImage  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImage  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::allocate_shared[abi:ne180100]<PurgeableFileBackend,std::allocator<PurgeableFileBackend>,char const*,void>(char **a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  std::__shared_ptr_emplace<PurgeableFileBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<PurgeableFileBackend>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21E26B29C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PurgeableFileBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<PurgeableFileBackend>,0>(void *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20E00;
  std::construct_at[abi:ne180100]<PurgeableFileBackend,char const*,PurgeableFileBackend*>((FileLocal *)(a1 + 3), a2);
  return a1;
}

void sub_21E26B2F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PurgeableFileBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PurgeableFileBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<PurgeableFileBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

FileLocal *std::construct_at[abi:ne180100]<PurgeableFileBackend,char const*,PurgeableFileBackend*>(FileLocal *a1, char **a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  PurgeableFileBackend::PurgeableFileBackend(a1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21E26B3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PurgeableFileBackend::PurgeableFileBackend(FileLocal *a1, uint64_t a2)
{
  int v3 = FileDescriptorWrapper::open_file(a2, 514);
  FileLocal::FileLocal(a1, v3, 1, 0);
  *(void *)a1 = &unk_26CF41198;
  *((void *)a1 + 3) = &unk_26CF41278;
  *((void *)a1 + 4) = &unk_26CF412B0;
}

void FileLocal::FileLocal(FileLocal *this, int a2, BOOL a3, char a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  char v8 = a4;
  Backend::Backend((Backend *)this);
  *uint64_t v7 = &unk_26CF41300;
  v7[3] = &unk_26CF413E0;
  v7[4] = &unk_26CF41418;
  FileDescriptor::FileDescriptor((FileDescriptor *)v9, a2, a3);
  std::allocate_shared[abi:ne180100]<FileLocal::shared_state_t,std::allocator<FileLocal::shared_state_t>,FileDescriptor,BOOL &,void>((uint64_t)v9, &v8, (void *)this + 5);
  FileDescriptorWrapper::~FileDescriptorWrapper((FileDescriptorWrapper *)v9);
  *((void *)this + 7) = *((void *)this + 5) + 8;
  *((void *)this + 8) = (char *)this + 88;
  *(_OWORD *)((char *)this + 72) = xmmword_21E39BDD0;
}

void sub_21E26B5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  FileDescriptorWrapper::~FileDescriptorWrapper((FileDescriptorWrapper *)va);
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<FileLocal::shared_state_t,std::allocator<FileLocal::shared_state_t>,FileDescriptor,BOOL &,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xB0uLL);
  uint64_t result = std::__shared_ptr_emplace<FileLocal::shared_state_t>::__shared_ptr_emplace[abi:ne180100]<FileDescriptor,BOOL &,std::allocator<FileLocal::shared_state_t>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21E26B644(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal::shared_state_t>::__shared_ptr_emplace[abi:ne180100]<FileDescriptor,BOOL &,std::allocator<FileLocal::shared_state_t>,0>(void *a1, uint64_t a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20E50;
  FileLocal::shared_state_t::shared_state_t((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_21E26B6A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::__on_zero_shared(uint64_t a1)
{
}

uint64_t FileLocal::shared_state_t::shared_state_t(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = -1;
  *(void *)a1 = &unk_26CF20EA0;
  long long v4 = *(_OWORD *)(a2 + 12);
  long long v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 49) = FileDescriptor::is_mounted_on_smb((FileDescriptor *)a1);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = 0;
  return a1;
}

void sub_21E26B7D0(_Unwind_Exception *a1)
{
  FileDescriptorWrapper::~FileDescriptorWrapper(v1);
  _Unwind_Resume(a1);
}

BOOL FileDescriptor::is_mounted_on_smb(FileDescriptor *this)
{
  FileDescriptor::get_mounted_on_fs((uint64_t *)__p, this);
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1717726579 && v4 == 115;
    if ((char)v9 < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v6 = 0;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }
  return v6;
}

uint64_t FileDescriptorWrapper::get_file_descriptor(FileDescriptorWrapper *this)
{
  return *((unsigned int *)this + 2);
}

void FileDescriptor::~FileDescriptor(FileDescriptor *this)
{
  FileDescriptorWrapper::~FileDescriptorWrapper(this);
  JUMPOUT(0x223C249A0);
}

void std::__destroy_at[abi:ne180100]<FileLocal::shared_state_t,0>(uint64_t *a1)
{
  std::__expected_base<std::unique_ptr<char,std::function<void ()(char *)>>,std::error_code>::__repr::__destroy_union_member[abi:ne180100](a1 + 12);
  FileDescriptorWrapper::~FileDescriptorWrapper((FileDescriptorWrapper *)a1);
}

uint64_t *std::__expected_base<std::unique_ptr<char,std::function<void ()(char *)>>,std::error_code>::__repr::__destroy_union_member[abi:ne180100](uint64_t *result)
{
  if (*((unsigned char *)result + 40))
  {
    unint64_t v1 = result;
    std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](result, 0);
    return std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v1 + 1);
  }
  return result;
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(char *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t std::function<void ()(char *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      long long v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF1FCF0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E26BB54(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<BufferedWriteBackend,std::allocator<BufferedWriteBackend>,std::shared_ptr<Backend> &,unsigned long,void>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0xA8uLL);
  std::__shared_ptr_emplace<BufferedWriteBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,unsigned long,std::allocator<BufferedWriteBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E26BBD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<BufferedWriteBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,unsigned long,std::allocator<BufferedWriteBackend>,0>(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20EE0;
  BufferedWriteBackend::BufferedWriteBackend(a1 + 3, a2, *a3);
  return a1;
}

void sub_21E26BC30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BufferedWriteBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BufferedWriteBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<BufferedWriteBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21E26BDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void crypto::header_serializer::decode(crypto::header_serializer *this@<X0>, void *a2@<X8>)
{
  uint64_t v7 = 0;
  char v4 = this;
  if ([(crypto::header_serializer *)v4 decodeBytesForKey:@"crypto_header" returnedLength:&v7])
  {
    if (v7 == 76) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unexpected crypto header length (", 33);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v6, 0x9Au);
  }
  *a2 = 0;
}

void sub_21E26BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_21E26BF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E26C050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<LockableResource,Backend>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    long long v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_21E26C1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_21E26C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  MEMORY[0x223C249A0](v10, 0x1000C4015A9971DLL);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_21E26C418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26C6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  crypto::keys::~keys((crypto::keys *)&a11);

  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }

  _Unwind_Resume(a1);
}

void crypto::keys::~keys(crypto::keys *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    MEMORY[0x223C249A0](v3, 0x1000C4015A9971DLL);
  }
  char v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }
}

void sub_21E26CBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_21E26CED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26D078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_21E26D1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_21E26D348(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_21E26D504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26D580()
{
}

void crypto::format_serializer::decode(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  size_t v22 = 0;
  size_t v23 = 0;
  id v5 = a1;
  BOOL v6 = (const void *)[v5 decodeBytesForKey:@"encKeys" returnedLength:&v23];
  id v7 = v5;
  uint64_t v8 = [v7 decodeBytesForKey:@"prngKeys" returnedLength:&v22];
  if (v6 && (unsigned __int8 v9 = (const void *)v8) != 0)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    __int16 v19 = 0;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>(&v19, v6, (uint64_t)v6 + v23, v23);
    uint64_t v18 = 0;
    __n128 v17 = 0uLL;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>(&v17, v9, (uint64_t)v9 + v22, v22);
    crypto::keys::keys(v11, (uint64_t)&v19, &v17, a2);
    std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>(a3);
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      MEMORY[0x223C249A0](v10, 0x1000C4015A9971DLL);
    }
    if (v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (v17.n128_u64[0])
    {
      v17.n128_u64[1] = v17.n128_u64[0];
      operator delete((void *)v17.n128_u64[0]);
    }
    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_21E26D6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  crypto::keys::~keys((crypto::keys *)&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  char v24 = *(void **)(v22 - 96);
  if (v24)
  {
    *(void *)(v22 - 88) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_21E26D8F0(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void crypto::format_serializer::encode(crypto::format_serializer *this, NSCoder *a2, const crypto::format *a3)
{
  char v4 = this;
  [(crypto::format_serializer *)v4 encodeBytes:a2[6].super.isa length:76 forKey:@"crypto_header"];
  [(crypto::format_serializer *)v4 encodeBytes:a2->super.isa length:a2[1].super.isa - a2->super.isa forKey:@"encKeys"];
  [(crypto::format_serializer *)v4 encodeBytes:a2[3].super.isa length:a2[4].super.isa - a2[3].super.isa forKey:@"prngKeys"];
}

void sub_21E26D9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E26DAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_21E26DBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_21E26DC38(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E26DD2C(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_21E26DE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }

  _Unwind_Resume(a1);
}

void sub_21E26DF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

#error "21E26E1E4: call analysis failed (funcsize=142)"

void sub_21E26E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_21E26E580(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_21E26E688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26E7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_21E26EAC8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_21E26EBB8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_21E26ED00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26EE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26EF34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26F0A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26F2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26F3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_21E26F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void sub_21E26F92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E26FB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void sub_21E26FDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }

  _Unwind_Resume(a1);
}

uint64_t plugin_decode_buffer(void *a1, const char *a2, void **a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a1 && a2 && a3)
  {
    id v5 = a1;
    BOOL v6 = [NSString stringWithUTF8String:a2];
    id v7 = [v5 objectForKeyedSubscript:v6];
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v7 length])
      {
        uint64_t v8 = malloc_type_malloc([v7 length], 0x2E7B6484uLL);
        *a3 = v8;
        if (v8)
        {
          id v9 = v7;
          memcpy(v8, (const void *)[v9 bytes], objc_msgSend(v9, "length"));
          uint64_t v10 = [v9 length];
        }
        else
        {
          int v20 = *__error();
          if (DIForwardLogs())
          {
            uint64_t v21 = getDIOSLog();
            os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t buf = 68158466;
            int v25 = 59;
            __int16 v26 = 2080;
            long long v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v28 = 2048;
            uint64_t v29 = [v7 length];
            __int16 v30 = 2112;
            int v31 = v6;
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();

            if (v22)
            {
              fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v22);
              free(v22);
            }
          }
          else
          {
            size_t v23 = getDIOSLog();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 68158466;
              int v25 = 59;
              __int16 v26 = 2080;
              long long v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
              __int16 v28 = 2048;
              uint64_t v29 = [v7 length];
              __int16 v30 = 2112;
              int v31 = v6;
              _os_log_impl(&dword_21E237000, v23, OS_LOG_TYPE_ERROR, "%.*s: Out of memory, failed to allocated %zu bytes for key %@", buf, 0x26u);
            }
          }
          *__error() = v20;
          uint64_t v10 = -12;
        }
      }
      else
      {
        int v15 = *__error();
        if (DIForwardLogs())
        {
          int v16 = getDIOSLog();
          os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t buf = 68158210;
          int v25 = 59;
          __int16 v26 = 2080;
          long long v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
          __int16 v28 = 2112;
          uint64_t v29 = (uint64_t)v6;
          __n128 v17 = (char *)_os_log_send_and_compose_impl();

          if (v17)
          {
            fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v17);
            free(v17);
          }
        }
        else
        {
          uint64_t v18 = getDIOSLog();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t buf = 68158210;
            int v25 = 59;
            __int16 v26 = 2080;
            long long v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v28 = 2112;
            uint64_t v29 = (uint64_t)v6;
            _os_log_impl(&dword_21E237000, v18, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }
        *__error() = v15;
        uint64_t v10 = -22;
      }
    }
    else
    {
      uint64_t v10 = -2;
    }
  }
  else
  {
    int v11 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v12 = getDIOSLog();
      os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v25 = 59;
      __int16 v26 = 2080;
      long long v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();

      if (v13)
      {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v13);
        free(v13);
      }
    }
    else
    {
      uint64_t v14 = getDIOSLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v25 = 59;
        __int16 v26 = 2080;
        long long v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
        _os_log_impl(&dword_21E237000, v14, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v11;
    return -22;
  }
  return v10;
}

void sub_21E2703C4(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t plugin_decode_fd(void *a1, const char *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    uint64_t v3 = a1;
    char v4 = [NSString stringWithUTF8String:a2];
    id v5 = [v3 objectForKeyedSubscript:v4];
    if (v5)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v6 = dup([v5 fileDescriptor]);
        if ((v6 & 0x80000000) != 0) {
          uint64_t v6 = -*__error();
        }
      }
      else
      {
        int v11 = *__error();
        if (DIForwardLogs())
        {
          uint64_t v12 = getDIOSLog();
          os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t buf = 68158210;
          int v17 = 42;
          __int16 v18 = 2080;
          __int16 v19 = "int plugin_decode_fd(void *, const char *)";
          __int16 v20 = 2112;
          uint64_t v21 = v4;
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();

          if (v13)
          {
            fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v13);
            free(v13);
          }
        }
        else
        {
          uint64_t v14 = getDIOSLog();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t buf = 68158210;
            int v17 = 42;
            __int16 v18 = 2080;
            __int16 v19 = "int plugin_decode_fd(void *, const char *)";
            __int16 v20 = 2112;
            uint64_t v21 = v4;
            _os_log_impl(&dword_21E237000, v14, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }
        *__error() = v11;
        uint64_t v6 = 4294967274;
      }
    }
    else
    {
      uint64_t v6 = 4294967294;
    }
  }
  else
  {
    int v7 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v8 = getDIOSLog();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v17 = 42;
      __int16 v18 = 2080;
      __int16 v19 = "int plugin_decode_fd(void *, const char *)";
      id v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      uint64_t v10 = getDIOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v17 = 42;
        __int16 v18 = 2080;
        __int16 v19 = "int plugin_decode_fd(void *, const char *)";
        _os_log_impl(&dword_21E237000, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v7;
    return 4294967274;
  }
  return v6;
}

void sub_21E2707B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2708E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void plugin_encode_buffer(void *a1, const char *a2, const void *a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1 && a2 && a3 && a4)
  {
    id v13 = a1;
    int v7 = [NSString stringWithUTF8String:a2];
    uint64_t v8 = [MEMORY[0x263EFF8F8] dataWithBytes:a3 length:a4];
    [v13 setObject:v8 forKeyedSubscript:v7];
  }
  else
  {
    int v9 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v10 = getDIOSLog();
      os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v15 = 69;
      __int16 v16 = 2080;
      int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
      int v11 = (char *)_os_log_send_and_compose_impl();

      if (v11)
      {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v11);
        free(v11);
      }
    }
    else
    {
      uint64_t v12 = getDIOSLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v15 = 69;
        __int16 v16 = 2080;
        int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
        _os_log_impl(&dword_21E237000, v12, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v9;
  }
}

void sub_21E270B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void plugin_encode_fd(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    id v11 = a1;
    id v5 = [NSString stringWithUTF8String:a2];
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x263F08840]) initWithFileDescriptor:a3];
    [v11 setObject:v6 forKeyedSubscript:v5];
  }
  else
  {
    int v7 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v8 = getDIOSLog();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v13 = 48;
      __int16 v14 = 2080;
      int v15 = "void plugin_encode_fd(void *, const char *, int)";
      int v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      uint64_t v10 = getDIOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v13 = 48;
        __int16 v14 = 2080;
        int v15 = "void plugin_encode_fd(void *, const char *, int)";
        _os_log_impl(&dword_21E237000, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v7;
  }
}

void sub_21E270DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E270EB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::byte>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<crypto::keys,std::allocator<crypto::format>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21E270F60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<crypto::keys,std::allocator<crypto::format>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20F58;
  crypto::format::format(a1 + 3);
  return a1;
}

void sub_21E270FBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<crypto::format>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto::format>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<crypto::format>::__on_zero_shared(uint64_t a1)
{
}

void std::__destroy_at[abi:ne180100]<crypto::format,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    MEMORY[0x223C249A0](v3, 0x1000C4015A9971DLL);
  }
  char v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  id v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
}

void *std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,std::allocator<crypto::format>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21E27113C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,std::allocator<crypto::format>,0>(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20F58;
  crypto::format::format(a1 + 3, a2, a3, *a4, *a5);
  return a1;
}

void sub_21E2711A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,char const*,int &,void>(char **a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<FileLocal>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E27121C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<FileLocal>,0>(void *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  std::construct_at[abi:ne180100]<FileLocal,char const*,int &,FileLocal*>((FileLocal *)(a1 + 3), a2, a3);
  return a1;
}

void sub_21E271278(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FileLocal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FileLocal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF20FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<FileLocal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

FileLocal *std::construct_at[abi:ne180100]<FileLocal,char const*,int &,FileLocal*>(FileLocal *a1, char **a2, _DWORD *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  LODWORD(a3) = *a3;
  int v5 = FileDescriptorWrapper::open_file((uint64_t)__p, (int)a3);
  FileLocal::FileLocal(a1, v5, (a3 & 3) != 0, 0);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21E27139C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL &,BOOL &,void>(int *a1@<X1>, BOOL *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,BOOL &,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E271430(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,BOOL &,std::allocator<FileLocal>,0>(void *a1, int *a2, BOOL *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_21E271498(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,void>(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,std::allocator<SparseBundleBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E27152C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,std::allocator<SparseBundleBackend>,0>(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21008;
  SparseBundleBackend::SparseBundleBackend(a1 + 3, *a2, *a3);
  return a1;
}

void sub_21E271590(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SparseBundleBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SparseBundleBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<SparseBundleBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,char const*,int &,unsigned long &,void>(char **a1@<X1>, unsigned int *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,unsigned long &,std::allocator<SparseBundleBackend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E2716B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,unsigned long &,std::allocator<SparseBundleBackend>,0>(void *a1, char **a2, unsigned int *a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21008;
  std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,unsigned long &,SparseBundleBackend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_21E271714(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,unsigned long &,SparseBundleBackend*>(uint64_t a1, char **a2, unsigned int *a3, uint64_t *a4)
{
  v14[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = (di_utils *)std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  v14[0] = di_utils::random_uuid(v7);
  v14[1] = v10;
  SparseBundleBackend::SparseBundleBackend(a1, __p, v8, v9, v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21E2717D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,char const*,int &,void>(char **a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<SparseBundleBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E271860(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<SparseBundleBackend>,0>(void *a1, char **a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21008;
  std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,SparseBundleBackend*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_21E2718BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,SparseBundleBackend*>(uint64_t a1, char **a2, unsigned int *a3)
{
  _OWORD v11[2] = *MEMORY[0x263EF8340];
  int v5 = (di_utils *)std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  uint64_t v6 = *a3;
  v11[0] = di_utils::random_uuid(v5);
  v11[1] = v7;
  SparseBundleBackend::SparseBundleBackend(a1, __p, v6, 0, v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21E27196C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,unsigned long long &,void>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,std::allocator<BackendNull>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21E2719F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,std::allocator<BackendNull>,0>(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF21058;
  uint64_t v3 = *a2;
  uint64_t v4 = di_utils::random_uuid((di_utils *)a1);
  uint64_t v6 = v5;
  Backend::Backend((Backend *)(a1 + 24));
  *(void *)(a1 + 24) = &unk_26CF210A8;
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v6;
  return a1;
}

void sub_21E271A8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BackendNull>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendNull>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void BackendNull::~BackendNull(BackendNull *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t BackendNull::flush()
{
  return 0;
}

uint64_t Backend::unmap_range(Backend *this)
{
  return 4294967251;
}

uint64_t Backend::supports_unmap(Backend *this)
{
  return 0;
}

uint64_t BackendNull::get_size(BackendNull *this)
{
  return *((void *)this + 3);
}

uint64_t BackendNull::is_writable(BackendNull *this)
{
  return 1;
}

uint64_t BackendNull::truncate(BackendNull *this, uint64_t a2)
{
  *((void *)this + 3) = a2;
  return 0;
}

void *BackendNull::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendNull", 11);
}

void *Backend::getContext@<X0>(Backend *this@<X0>, void *a2@<X8>)
{
  return std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(a2, (void *)this + 1);
}

uint64_t BackendNull::write(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t BackendNull::read(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t Backend::write(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v6 = v2;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 80))(a1, &v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  return v4;
}

void sub_21E271C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Backend::read(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v6 = v2;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, &v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  return v4;
}

void sub_21E271D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Backend::read(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48;
    v5 -= 48;
    if (!v5) {
      return 0;
    }
  }
  uint64_t v7 = v6;
  *(void *)&long long v9 = "int Backend::read(const elements_t &)";
  *((void *)&v9 + 1) = 17;
  int v10 = 16;
  di_log::logger<di_log::log_printer<124ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Backend: failed reading element in vector", 41);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)v11);
  MEMORY[0x223C24910](&v13);
  return v7;
}

void sub_21E271E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<124ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Backend::write(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48;
    v5 -= 48;
    if (!v5) {
      return 0;
    }
  }
  uint64_t v7 = v6;
  *(void *)&long long v9 = "int Backend::write(const elements_t &)";
  *((void *)&v9 + 1) = 18;
  int v10 = 16;
  di_log::logger<di_log::log_printer<135ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Backend: failed writing element in vector", 41);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf((uint64_t)v11);
  MEMORY[0x223C24910](&v13);
  return v7;
}

void sub_21E271F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<135ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t Backend::future_read@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v13) = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t tagged_ptr_lock = ref::details::_get_tagged_ptr_lock((unint64_t)&v13, a2);
  uint64_t v12 = &v13;
  uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v13, v6);
  uint64_t v18 = &v12;
  lw_future<int>::lw_future((unint64_t)v10, &v13);
  id v11 = v12;
  *((void *)v12 + 4) = &v11;
  int v7 = (*(uint64_t (**)(uint64_t, const void *))(*(void *)a1 + 88))(a1, a2);
  uint64_t v8 = v11;
  *id v11 = v7;
  *((unsigned char *)v8 + 4) = 1;
  lw_promise<int>::notify_future((uint64_t)&v11);
  unint64_t result = lw_future<int>::lw_future(a3, v10);
  if (v11) {
    *((void *)v11 + 4) = 0;
  }
  return result;
}

void sub_21E272034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t Backend::future_write@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v13) = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t tagged_ptr_lock = ref::details::_get_tagged_ptr_lock((unint64_t)&v13, a2);
  uint64_t v12 = &v13;
  uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v13, v6);
  uint64_t v18 = &v12;
  lw_future<int>::lw_future((unint64_t)v10, &v13);
  id v11 = v12;
  *((void *)v12 + 4) = &v11;
  int v7 = (*(uint64_t (**)(uint64_t, const void *))(*(void *)a1 + 80))(a1, a2);
  uint64_t v8 = v11;
  *id v11 = v7;
  *((unsigned char *)v8 + 4) = 1;
  lw_promise<int>::notify_future((uint64_t)&v11);
  unint64_t result = lw_future<int>::lw_future(a3, v10);
  if (v11) {
    *((void *)v11 + 4) = 0;
  }
  return result;
}

void sub_21E272138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t Backend::full_name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t BackendNull::get_identifier(BackendNull *this)
{
  return *((void *)this + 4);
}

void *std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(void *a1, void *a2)
{
  long long v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void *di_log::logger<di_log::log_printer<124ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<124ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF21188;
  a1[45] = &unk_26CF21288;
  a1[46] = &unk_26CF212B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF21188;
  a1[45] = &unk_26CF21210;
  a1[46] = &unk_26CF21238;
  return a1;
}

void sub_21E272320(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF21320;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E272404(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF21320;
  di_log::logger_buf<di_log::log_printer<124ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<124ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<124ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E27297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<124ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 124;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    int v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v13 = a2;
      }
      else {
        int v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 124;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<135ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<135ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF213A8;
  a1[45] = &unk_26CF214A8;
  a1[46] = &unk_26CF214D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF213A8;
  a1[45] = &unk_26CF21430;
  a1[46] = &unk_26CF21458;
  return a1;
}

void sub_21E272C9C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF21540;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E272D80(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF21540;
  di_log::logger_buf<di_log::log_printer<135ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<135ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<135ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2732F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<135ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 135;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    int v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v13 = a2;
      }
      else {
        int v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 135;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void lw_promise<int>::notify_future(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 8))
  {
    unsigned __int8 v2 = *(std::mutex **)(*(void *)a1 + 16);
    std::mutex::lock(v2);
    if (atomic_load((unint64_t *)(*(void *)a1 + 8))) {
      std::condition_variable::notify_all(*(std::condition_variable **)(*(void *)a1 + 24));
    }
    std::mutex::unlock(v2);
  }
}

void std::allocate_shared[abi:ne180100]<Ram,std::allocator<Ram>,unsigned long long,boost::uuids::uuid,void>(size_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x80uLL);
  std::__shared_ptr_emplace<Ram>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::allocator<Ram>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E2735F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Ram>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::allocator<Ram>,0>(void *a1, size_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF215C0;
  Ram::Ram((uint64_t)(a1 + 3), *a2, *a3, a3[1]);
  return a1;
}

void sub_21E27365C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Ram>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF215C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ram>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF215C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<Ram>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t Ram::Ram(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  v16[4] = *MEMORY[0x263EF8340];
  Backend::Backend((Backend *)a1);
  void *v8 = &unk_26CF43FA0;
  v8[3] = 0;
  long long v9 = v8 + 3;
  v8[7] = 0;
  v8[9] = a2;
  v8[10] = a3;
  v8[11] = a4;
  int v10 = malloc_type_valloc(a2, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v13, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v16[0] = &unk_26CF21610;
  v16[3] = v16;
  char v14 = v10;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v16);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v16);
  std::unique_ptr<char,std::function<void ()(char *)>>::operator=[abi:ne180100](v9, (uint64_t *)&v14);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v14, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v15);
  *(void *)(a1 + 64) = *(void *)(a1 + 24);
  *(void *)(a1 + 96) = getpagesize();
  return a1;
}

void sub_21E27386C(_Unwind_Exception *a1)
{
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](v2, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100]((void *)(v1 + 32));
  int v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::~__func()
{
}

{
  JUMPOUT(0x223C249A0);
}

{
  JUMPOUT(0x223C249A0);
}

{
  JUMPOUT(0x223C249A0);
}

{
  JUMPOUT(0x223C249A0);
}

{
  JUMPOUT(0x223C249A0);
}

void *std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26CF21610;
  return result;
}

{
  void *result;

  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26CF22828;
  return result;
}

{
  void *result;

  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26CF359B8;
  return result;
}

{
  void *result;

  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26CF3B1A0;
  return result;
}

{
  void *result;

  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26CF3B220;
  return result;
}

{
  void *result;

  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26CF43F20;
  return result;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF21610;
}

{
  *a2 = &unk_26CF22828;
}

{
  *a2 = &unk_26CF359B8;
}

{
  *a2 = &unk_26CF3B1A0;
}

{
  *a2 = &unk_26CF3B220;
}

{
  *a2 = &unk_26CF43F20;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::operator()(uint64_t a1, void **a2)
{
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

uint64_t std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::target_type()
{
}

{
}

{
}

{
}

{
}

{
}

uint64_t std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,unsigned long long &,boost::uuids::uuid &,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,boost::uuids::uuid &,std::allocator<BackendNull>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E273B9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,boost::uuids::uuid &,std::allocator<BackendNull>,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF21058;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  Backend::Backend((Backend *)(a1 + 24));
  *(void *)(a1 + 24) = &unk_26CF210A8;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  return a1;
}

void sub_21E273C2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,std::allocator<crypto_format_backend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E273CA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,std::allocator<crypto_format_backend>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216A0;
  int v5 = 0;
  crypto_format_backend::crypto_format_backend(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_21E273D14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<crypto_format_backend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF216A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto_format_backend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF216A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<crypto_format_backend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,std::allocator<crypto_format_backend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E273E2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,std::allocator<crypto_format_backend>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216A0;
  int v5 = 0;
  crypto_format_backend::crypto_format_backend(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_21E273E98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,std::shared_ptr<Backend> &,void>(void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x68uLL);
  std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::allocator<readSynchronizer>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_21E273F0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::allocator<readSynchronizer>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216F0;
  readSynchronizer::readSynchronizer(a1 + 3);
  return a1;
}

void sub_21E273F68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<readSynchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF216F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<readSynchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF216F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<readSynchronizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,std::shared_ptr<Backend>,void>(void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x68uLL);
  std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::allocator<readSynchronizer>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_21E274078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::allocator<readSynchronizer>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216F0;
  readSynchronizer::readSynchronizer(a1 + 3);
  return a1;
}

void sub_21E2740D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AEA_backend,std::allocator<AEA_backend>,std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,void>(void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x70uLL);
  std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,std::allocator<AEA_backend>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_21E274150(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,std::allocator<AEA_backend>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21740;
  AEA_backend::AEA_backend(a1 + 3);
  return a1;
}

void sub_21E2741AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AEA_backend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AEA_backend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<AEA_backend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<std::string,std::allocator<std::string>,char const*,void>@<X0>(char **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  unint64_t result = std::__shared_ptr_emplace<std::string>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<std::string>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21E2742A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::string>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<std::string>,0>(void *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21790;
  std::string::basic_string[abi:ne180100]<0>(a1 + 3, *a2);
  return a1;
}

void sub_21E274304(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::allocate_shared[abi:ne180100]<Knoxbackend,std::allocator<Knoxbackend>,std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,void>(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,std::allocator<Knoxbackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E27441C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,std::allocator<Knoxbackend>,0>(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF217E0;
  Knoxbackend::Knoxbackend(a1 + 3, a2, *a3);
  return a1;
}

void sub_21E27447C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Knoxbackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF217E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Knoxbackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF217E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<Knoxbackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<plugin_header,std::allocator<plugin_header>,char const*&,__CFDictionary const*,int &,void>@<X0>(char **a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x40uLL);
  unint64_t result = std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*&,__CFDictionary const*,int &,std::allocator<plugin_header>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_21E27458C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*&,__CFDictionary const*,int &,std::allocator<plugin_header>,0>(void *a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21830;
  std::construct_at[abi:ne180100]<plugin_header,char const*&,__CFDictionary const*,int &,plugin_header*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_21E2745E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<plugin_header>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<plugin_header>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<plugin_header>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::construct_at[abi:ne180100]<plugin_header,char const*&,__CFDictionary const*,int &,plugin_header*>(uint64_t a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  memset(v10, 0, sizeof(v10));
  plugin_header::plugin_header(a1, __p, v7, v8 | 0x100000000, v10, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21E2746FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<plugin_header,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::allocate_shared[abi:ne180100]<BackendPlugin,std::allocator<BackendPlugin>,std::shared_ptr<plugin_header> &,void>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  std::__shared_ptr_emplace<BackendPlugin>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<plugin_header> &,std::allocator<BackendPlugin>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21E2747CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendPlugin>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<plugin_header> &,std::allocator<BackendPlugin>,0>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF21880;
  Backend::Backend((Backend *)(a1 + 24));
  *(void *)(a1 + 24) = &unk_26CF218D0;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 48) = *a2;
  *(void *)(a1 + 56) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_21E274860(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BackendPlugin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendPlugin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF21880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<BackendPlugin>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void BackendPlugin::~BackendPlugin(BackendPlugin *this)
{
  *(void *)this = &unk_26CF218D0;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CF218D0;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t BackendPlugin::flush()
{
  return 4294967251;
}

uint64_t BackendPlugin::get_size(BackendPlugin *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))();
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 8))() * v2;
}

void *BackendPlugin::is_writable(BackendPlugin *this)
{
  return (*(void *(**)(void *__return_ptr))(**((void **)this + 3) + 24))(*((void **)this + 3));
}

uint64_t BackendPlugin::truncate(BackendPlugin *this)
{
  return 4294967251;
}

void *BackendPlugin::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendPlugin", 13);
}

uint64_t BackendPlugin::write()
{
  return 4294967251;
}

uint64_t BackendPlugin::read()
{
  return 4294967251;
}

uint64_t BackendPlugin::get_identifier(plugin_header **this)
{
  return plugin_header::get_uuid(this[3]);
}

uint64_t plugin_header::get_uuid(plugin_header *this)
{
  CFUUIDRef v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(void *)this + 48))();
  uint64_t v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v3);
  return v1;
}

void sub_21E274AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

const void **CFAutoRelease<__CFUUID const*>::~CFAutoRelease(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<plugin_header,std::allocator<plugin_header>,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,void>@<X0>(char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  char v12 = operator new(0x40uLL);
  unint64_t result = std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,std::allocator<plugin_header>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_21E274B84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,std::allocator<plugin_header>,0>(void *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21830;
  std::construct_at[abi:ne180100]<plugin_header,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,plugin_header*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_21E274BE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<plugin_header,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,plugin_header*>(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  plugin_header::plugin_header(a1, __p, 0, 0, a5, *a6);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21E274C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E274D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E274D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E274DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E274FB4(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v5;

  if (a2 == 1)
  {
    uint64_t v9 = +[DIError errorWithDIException:__cxa_begin_catch(a1) description:0 prefix:0 error:0];
    int v10 = (void *)v3[6];
    v3[6] = v9;

    __cxa_end_catch();
    JUMPOUT(0x21E274F94);
  }

  _Unwind_Resume(a1);
}

void sub_21E275040()
{
}

void sub_21E275048()
{
}

void sub_21E275188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E275324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E275564(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v7 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v7 error:v2];

    objc_end_catch();
    JUMPOUT(0x21E27552CLL);
  }
  _Unwind_Resume(a1);
}

void sub_21E275B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E275DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E276118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27625C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E276474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20,__int16 a21,int a22)
{
  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Failed opening the shadow/cache file(s)" error:v23];
    __cxa_end_catch();
    JUMPOUT(0x21E276430);
  }

  _Unwind_Resume(a1);
}

void sub_21E276860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E276930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E276978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2769D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E276B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E276CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E276D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E276EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_21E277A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E277B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E277DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E278178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E278440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2785B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E278724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27887C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2789B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E278A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E278A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

#error "21E27923C: call analysis failed (funcsize=235)"

void sub_21E2796D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E279C8C(_Unwind_Exception *a1, int a2)
{
  uint64_t v7 = v5;

  if (a2 == 1)
  {
    uint64_t v10 = [objc_begin_catch(a1) reason];
    +[DIError nilWithEnumValue:150 verboseInfo:v10 error:v2];
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x21E279C44);
  }

  _Unwind_Resume(a1);
}

void sub_21E279ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27A12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27A1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27A2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27A39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27A49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27A588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27A7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  FileLocal::~FileLocal((FileLocal *)&a20);

  _Unwind_Resume(a1);
}

void FileLocal::~FileLocal(FileLocal *this)
{
  *(void *)this = &unk_26CF41300;
  *((void *)this + 3) = &unk_26CF413E0;
  *((void *)this + 4) = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFUUIDRef v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CF41300;
  *((void *)this + 3) = &unk_26CF413E0;
  *((void *)this + 4) = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFUUIDRef v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x223C249A0);
}

void sub_21E27AF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27B10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27B248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27B294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27B2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E27B3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27B4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E27B844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  FileLocal::~FileLocal((FileLocal *)&a22);
  if (a2 == 1)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) prefix:@"failed to open existing output file" error:v22];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x21E27B6E8);
  }
  _Unwind_Resume(a1);
}

void sub_21E27C3C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    __int16 v30 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v30 error:v22];

    objc_end_catch();
    JUMPOUT(0x21E27B9CCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_21E27C760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 56;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      uint64_t v4 = *(std::__shared_weak_count **)(v3 - 48);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      v3 += 64;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21E27D874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void PluginRingSubscriber::PluginRingSubscriber(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  io_rings_subscriber_subscribe(a3, a2);
}

void PluginRingSubscriber::~PluginRingSubscriber(PluginRingSubscriber *this)
{
}

void PluginRing::PluginRing()
{
}

void sub_21E27DBD8(_Unwind_Exception *exception_object)
{
}

void PluginRing::~PluginRing(PluginRing *this)
{
}

double PluginRing::try_sub_sqe_allocate(PluginRing *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this + 19);
  unsigned int v2 = atomic_load((unsigned int *)this + 18);
  if (v2 - v1 < *(_DWORD *)(*((void *)this + 1) + 8))
  {
    unsigned int v3 = v2;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)this + 18, &v3, v2 + 1);
      if (v3 == v2) {
        break;
      }
      unsigned int v4 = atomic_load((unsigned int *)this + 19);
      unsigned int v5 = v3 - v4;
      unsigned int v2 = v3;
      if (v5 >= *(_DWORD *)(*((void *)this + 1) + 8)) {
        return result;
      }
    }
    return io_rings_sqe_allocate(*((void *)this + 6));
  }
  return result;
}

void PluginRing::get_next_cqe(PluginRing *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t cqe = io_rings_get_cqe(*((void *)this + 6));
  if ((v5 & 0x100000000) != 0)
  {
    uint64_t v7 = cqe;
    uint64_t v8 = v5;
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)this + 19, 1u);
    if (atomic_load((unint64_t *)this + 10))
    {
      unsigned int v11 = atomic_load((unsigned int *)this + 18);
      if (add + 1 == v11)
      {
        std::mutex::lock((std::mutex *)((char *)this + 136));
        std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
        std::mutex::unlock((std::mutex *)((char *)this + 136));
      }
    }
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v6;
}

uint64_t PluginRing::set_dest_obj_id(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 64);
  return result;
}

void di_hybrid_subscriber_t::di_hybrid_subscriber_t(di_hybrid_subscriber_t *a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26CF225C8;
  v3[1] = a1;
  v3[3] = v3;
  io_rings_di_subscriber_t::io_rings_di_subscriber_t();
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__value_func[abi:ne180100](v3);
  *((void *)a1 + 35) = di_hybrid_subscriber_t::get_cache_di(a1);
  uint64_t v2 = *(void *)(*(void *)(io_rings_di_subscriber_t::get_di(a1) + 24) - 24);
  *((void *)a1 + 36) = v2;
  *((void *)a1 + 37) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  PluginRing::PluginRing();
}

void sub_21E27DF54(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)(v1 + 576));
  std::mutex::~mutex(v4);
  gcd::gcd_group::~gcd_group(v5);
  PluginRing::~PluginRing(v2);
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__value_func[abi:ne180100]((void *)(v1 + 248));
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::get_cache_di(di_hybrid_subscriber_t *this)
{
  duint64_t i = io_rings_di_subscriber_t::get_di(this);
  uint64_t v2 = *(void *)(di + 16);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(di + 24) - v2) >> 4);
  BOOL v4 = v3 >= 2;
  unint64_t v5 = v3 - 2;
  if (v4
    && *(_DWORD *)(v2 + 48 * v5) == 2
    && (uint64_t v6 = v2 + 48 * v5,
        uint64_t v8 = *(void *)(v6 + 8),
        uint64_t v7 = v6 + 8,
        (*(unsigned int (**)(uint64_t))(*(void *)v8 + 40))(v8)))
  {
    return *(void *)v7;
  }
  else
  {
    return 0;
  }
}

void async_cqe_callback(int a1, dispatch_queue_t *this)
{
}

uint64_t di_hybrid_subscriber_t::exec_sync(uint64_t *a1, unsigned __int8 *a2)
{
  io_rings_di_subscriber_t::get_ctx((io_rings_di_subscriber_t *)a1, v8);
  if (v8[1])
  {
    unsigned int v4 = io_rings_parse_and_execute_sqe((uint64_t)a1, (uint64_t)v8, (uint64_t)a2);
    if (*a2 - 1 > 1) {
      uint64_t sqe = io_rings_return_status(a1[7], (uint64_t)a2, v4, 0);
    }
    else {
      uint64_t sqe = di_hybrid_subscriber_t::handle_read_sqe((uint64_t)a1, (uint64_t)a2, (uint64_t)v8, v4);
    }
  }
  else
  {
    uint64_t sqe = io_rings_return_status(a1[7], (uint64_t)a2, 0xFFFFFFF4, 0);
  }
  uint64_t v6 = sqe;
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)v8);
  return v6;
}

void sub_21E27E104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::handle_read_sqe(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 8) + 24) - 16);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  if (v8 != v9)
  {
    if ((a4 & 0x80000000) == 0) {
      operator new();
    }
    do
    {
      v9 -= 152;
      std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v9);
    }
    while (v9 != v8);
    *(void *)(v7 + 24) = v8;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  return io_rings_return_status(v10, a2, a4, 0);
}

void sub_21E27E4F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::add_sqe(uint64_t a1, unsigned __int8 *a2)
{
  BOOL is_barrier = io_rings_sqe_is_barrier(a2);
  unint64_t v5 = (dispatch_queue_t *)(a1 + 624);
  if (is_barrier)
  {
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 0x40000000;
    v8[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke;
    void v8[3] = &__block_descriptor_tmp_3;
    v8[4] = a1;
    v8[5] = a2;
    gcd::gcd_queue::barrier_async(v5, v8);
  }
  else
  {
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    _OWORD v7[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_3;
    v7[3] = &__block_descriptor_tmp_4;
    v7[4] = a1;
    v7[5] = a2;
    gcd::gcd_queue::async(v5, v7);
  }
  return 0;
}

void ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 632));
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(v2 + 56);
    io_rings_return_status(v5, v4, 0xFFFFFFA7, 0);
  }
  else
  {
    PluginRing::wait_for_pending_ios((PluginRing *)(v2 + 304));
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    _OWORD v7[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_0;
    uint64_t v6 = *(void *)(a1 + 40);
    v7[4] = v2;
    v7[5] = v6;
    gcd::gcd_queue::async((dispatch_queue_t *)(v2 + 624), v7);
  }
}

void PluginRing::wait_for_pending_ios(PluginRing *this)
{
  uint64_t v1 = (unsigned int *)((char *)this + 72);
  unsigned int v2 = atomic_load((unsigned int *)this + 18);
  unsigned int v3 = (unsigned int *)((char *)this + 76);
  unsigned int v4 = atomic_load((unsigned int *)this + 19);
  if (v2 != v4)
  {
    atomic_fetch_add((atomic_ullong *volatile)this + 10, 1uLL);
    v10.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 136);
    v10.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 136));
    unsigned int v6 = atomic_load(v1);
    unsigned int v7 = atomic_load(v3);
    if (v6 != v7)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)((char *)this + 88), &v10);
        unsigned int v8 = atomic_load((unsigned int *)this + 18);
        unsigned int v9 = atomic_load((unsigned int *)this + 19);
      }
      while (v8 != v9);
    }
    if (v10.__owns_) {
      std::mutex::unlock(v10.__m_);
    }
    atomic_fetch_add((atomic_ullong *volatile)this + 10, 0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  __dmb(9u);
  return di_hybrid_subscriber_t::exec_sync(v1, *(unsigned __int8 **)(a1 + 40));
}

uint64_t ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  __dmb(9u);
  return di_hybrid_subscriber_t::exec_sync(v1, *(unsigned __int8 **)(a1 + 40));
}

uint64_t di_hybrid_subscriber_t::suspend(uint64_t this)
{
  int v1 = 2;
  atomic_compare_exchange_strong((atomic_uint *volatile)(this + 632), (unsigned int *)&v1, 0);
  if (v1 == 2)
  {
    uint64_t v2 = this;
    gcd::gcd_queue::suspend((dispatch_object_t *)(this + 624));
    io_rings_suspend(*(void *)(v2 + 352));
    *(void *)&long long v3 = "di_hybrid_subscriber_t::suspend()";
    *((void *)&v3 + 1) = 31;
    int v4 = 0;
    di_log::logger<di_log::log_printer<250ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Plugin's ring suspended, ret code ", 34);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf((uint64_t)v5);
    return MEMORY[0x223C24910](&v7);
  }
  return this;
}

void sub_21E27E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<250ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<250ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<250ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF21C60;
  a1[45] = &unk_26CF21D60;
  a1[46] = &unk_26CF21D88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF21C60;
  a1[45] = &unk_26CF21CE8;
  a1[46] = &unk_26CF21D10;
  return a1;
}

void sub_21E27E9F4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_hybrid_subscriber_t::resume(uint64_t this)
{
  int v1 = 0;
  atomic_compare_exchange_strong((atomic_uint *volatile)(this + 632), (unsigned int *)&v1, 2u);
  if (!v1)
  {
    uint64_t v2 = this;
    gcd::gcd_queue::resume((dispatch_object_t *)(this + 624));
    io_rings_resume(*(void *)(v2 + 352));
    *(void *)&long long v3 = "di_hybrid_subscriber_t::resume()";
    *((void *)&v3 + 1) = 30;
    int v4 = 0;
    di_log::logger<di_log::log_printer<259ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Plugin's ring resumed, ret code ", 32);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf((uint64_t)v5);
    return MEMORY[0x223C24910](&v7);
  }
  return this;
}

void sub_21E27EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<259ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<259ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<259ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF21E80;
  a1[45] = &unk_26CF21F80;
  a1[46] = &unk_26CF21FA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF21E80;
  a1[45] = &unk_26CF21F08;
  a1[46] = &unk_26CF21F30;
  return a1;
}

void sub_21E27EC38(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  return a1;
}

di_async_sub_transaction_t *di_async_sub_transaction_t::append_empty_buffer(di_async_sub_transaction_t *this, int a2)
{
  if (a2) {
    di_async_sub_transaction_t::enqueue_new_buffer(this);
  }
  return this;
}

void di_async_sub_transaction_t::enqueue_new_buffer(di_async_sub_transaction_t *this)
{
}

void sub_21E27EEE4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((void **)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

char *di_async_sub_transaction_t::append_moved_transaction_buffers(uint64_t a1, uint64_t a2)
{
  std::vector<std::shared_ptr<char>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>>((uint64_t *)(a1 + 112), *(void **)(a1 + 120), *(void *)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 4);
  double result = std::vector<iovec>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<iovec*>>,std::move_iterator<std::__wrap_iter<iovec*>>>(a1 + 88, *(char **)(a1 + 96), *(long long **)(a2 + 88), *(long long **)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4);
  *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t *compact_sub_transactions@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = *result;
  uint64_t v42 = result[1];
  if (*result == v42)
  {
    *a6 = v7;
    a6[1] = v7;
    a6[2] = result[2];
    *double result = 0;
    result[1] = 0;
    result[2] = 0;
    return result;
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  unint64_t v10 = a4;
  unint64_t v11 = a2;
  unint64_t v40 = a3 - 1;
  unint64_t v41 = a4 * a5;
  do
  {
    unint64_t v12 = *(void *)(v7 + 32) * v10;
    unint64_t v13 = v12 / v11 * v11;
    uint64_t v14 = a6[1];
    if (*a6 != v14)
    {
      unint64_t v15 = *(_DWORD *)(v14 - 104) * a4 + *(void *)(v14 - 120) * v10;
      LODWORD(v16) = v12 - v15;
      BOOL v17 = v12 >= v15 && v15 + a3 > v13;
      if (v17
        && (unint64_t)(((uint64_t)(*(void *)(v14 - 56) - *(void *)(v14 - 64)) >> 4)
                            + ((uint64_t)(*(void *)(v7 + 96) - *(void *)(v7 + 88)) >> 4)
                            + 1) < 0x400)
      {
        goto LABEL_22;
      }
      uint64_t v18 = (di_async_sub_transaction_t *)(v14 - 152);
      unint64_t v19 = (v40 + v15) / a3 * a3;
      if (v41 < v19) {
        LODWORD(v19) = v41;
      }
      di_async_sub_transaction_t::append_empty_buffer(v18, v19 - v15);
    }
    memset(v50, 0, sizeof(v50));
    *(_OWORD *)std::string __p = 0u;
    uint64_t v21 = *(void *)(v7 + 136);
    uint64_t v20 = *(void *)(v7 + 144);
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v51 = v21;
    *((void *)&v51 + 1) = v20;
    long long v23 = *(_OWORD *)(v7 + 48);
    long long v22 = *(_OWORD *)(v7 + 64);
    uint64_t v24 = *(void *)(v7 + 80);
    long long v45 = *(_OWORD *)(v7 + 32);
    long long v46 = v23;
    long long v25 = *(_OWORD *)(v7 + 16);
    long long v43 = *(_OWORD *)v7;
    long long v44 = v25;
    uint64_t v48 = v24;
    long long v47 = v22;
    LODWORD(v46) = 0;
    *(void *)&long long v45 = v13 / v10;
    unint64_t v26 = a6[1];
    if (v26 >= a6[2])
    {
      uint64_t v31 = std::vector<di_async_sub_transaction_t>::__push_back_slow_path<di_async_sub_transaction_t>(a6, (uint64_t)&v43);
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&v51 + 1);
      a6[1] = v31;
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
    }
    else
    {
      long long v27 = v44;
      *(_OWORD *)unint64_t v26 = v43;
      *(_OWORD *)(v26 + 16) = v27;
      long long v28 = v45;
      long long v29 = v47;
      uint64_t v30 = v48;
      *(_OWORD *)(v26 + 48) = v46;
      *(_OWORD *)(v26 + 64) = v29;
      *(_OWORD *)(v26 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v28;
      *(void *)(v26 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v30;
      *(void *)(v26 + 88) = 0;
      *(void *)(v26 + 96) = 0;
      *(void *)(v26 + 104) = 0;
      *(_OWORD *)(v26 + 88) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)(v26 + 104) = v50[0];
      *(void *)(v26 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
      v50[0] = 0;
      *(void *)(v26 + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
      *(void *)(v26 + 128) = 0;
      *(_OWORD *)(v26 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)&v50[1];
      *(void *)(v26 + 128) = v50[3];
      memset(&v50[1], 0, 24);
      *(_OWORD *)(v26 + 136) = v51;
      long long v51 = 0uLL;
      a6[1] = v26 + 152;
    }
    unint64_t v52 = (void **)&v50[1];
    std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v52);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    unint64_t v16 = v12 % v11;
    uint64_t v14 = a6[1];
LABEL_22:
    uint64_t v33 = v14 - 152;
    di_async_sub_transaction_t::append_empty_buffer((di_async_sub_transaction_t *)(v14 - 152), v16);
    di_async_sub_transaction_t::append_moved_transaction_buffers(v33, v7);
    v7 += 152;
  }
  while (v7 != v42);
  uint64_t v34 = a6[1];
  char v35 = (di_async_sub_transaction_t *)(v34 - 152);
  uint64_t v36 = *(_DWORD *)(v34 - 104) * a4 + *(void *)(v34 - 120) * v10;
  unint64_t v37 = (v40 + v36) / a3 * a3;
  if (v41 < v37) {
    LODWORD(v37) = v41;
  }
  double result = (uint64_t *)di_async_sub_transaction_t::append_empty_buffer(v35, (int)v37 - (int)v36);
  uint64_t v38 = *a6;
  uint64_t v39 = a6[1];
  while (v38 != v39)
  {
    if (*(unsigned char *)v38 == 2) {
      *(void *)(v38 + 24) = *(void *)(v38 + 88);
    }
    v38 += 152;
  }
  return result;
}

void sub_21E27F240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<di_async_sub_transaction_t *>::emplace_back<di_async_sub_transaction_t *>(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<di_async_sub_transaction_t *>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  unint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

void di_hybrid_subscriber_t::handle_pending_sqes(di_hybrid_subscriber_t *this)
{
  if (*((void *)this + 77))
  {
    uint64_t v2 = (char *)this + 576;
    long long v3 = (std::mutex *)((char *)this + 512);
    std::mutex::lock((std::mutex *)this + 8);
    for (int i = 0; *((void *)this + 77); --i)
    {
      PluginRing::try_sub_sqe_allocate((di_hybrid_subscriber_t *)((char *)this + 304));
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(*(void *)(*((void *)this + 73) + ((*((void *)this + 76) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*((void *)this + 76) & 0x1FFLL));
      long long v7 = *(_OWORD *)(v6 + 32);
      long long v8 = *(_OWORD *)(v6 + 48);
      long long v9 = *(_OWORD *)(v6 + 64);
      *(void *)(v5 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(void *)(v6 + 80);
      *(_OWORD *)(v5 + 48) = v8;
      *(_OWORD *)(v5 + 64) = v9;
      *(_OWORD *)(v5 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v7;
      long long v10 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
      *(_OWORD *)(v5 + 16) = v10;
      *(_DWORD *)(v5 + 8) = *((_DWORD *)this + 92);
      *((int64x2_t *)this + 38) = vaddq_s64(*((int64x2_t *)this + 38), (int64x2_t)xmmword_21E39C940);
      std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2, 1);
    }
    std::mutex::unlock(v3);
    if (i)
    {
      uint64_t v11 = *((void *)this + 44);
      io_rings_enter(v11, -i, 0);
    }
  }
}

void sub_21E27F450(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::cancel(uint64_t this)
{
  unsigned int v1 = atomic_load((unsigned int *)(this + 632));
  if (v1 != 1)
  {
    uint64_t v2 = this;
    if (atomic_exchange((atomic_uint *volatile)(this + 632), 1u) == 2) {
      gcd::gcd_queue::suspend((dispatch_object_t *)(this + 624));
    }
    gcd::gcd_queue::resume((dispatch_object_t *)(v2 + 624));
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(v2 + 624), &__block_literal_global_3);
    if (io_rings_cancel(*(void *)(v2 + 352)) < 0) {
      goto LABEL_28;
    }
    long long v3 = (std::mutex *)(v2 + 512);
    std::mutex::lock((std::mutex *)(v2 + 512));
    uint64_t v4 = *(void ***)(v2 + 584);
    uint64_t v5 = *(void ***)(v2 + 592);
    if (v5 == v4)
    {
      long long v9 = (void *)(v2 + 616);
    }
    else
    {
      unint64_t v6 = *(void *)(v2 + 608);
      long long v7 = &v4[v6 >> 9];
      long long v8 = (uint64_t *)((char *)*v7 + 8 * (v6 & 0x1FF));
      long long v9 = (void *)(v2 + 616);
      uint64_t v10 = *(uint64_t *)((char *)v4 + (((*(void *)(v2 + 616) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(void *)(v2 + 616) + v6) & 0x1FF);
      if (v8 != (uint64_t *)v10)
      {
        do
        {
          uint64_t v11 = *v8;
          long long v20 = 0u;
          memset(v21, 0, sizeof(v21));
          memset(v19, 0, sizeof(v19));
          *(void *)(v11 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
          *(_OWORD *)(v11 + 48) = 0u;
          *(_OWORD *)(v11 + 64) = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
          *(_OWORD *)(v11 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0u;
          *(_OWORD *)uint64_t v11 = 0u;
          unint64_t v12 = *(void **)(v11 + 88);
          if (v12)
          {
            *(void *)(v11 + 96) = v12;
            operator delete(v12);
            *(void *)(v11 + 88) = 0;
            *(void *)(v11 + 96) = 0;
            *(void *)(v11 + 104) = 0;
          }
          *(_OWORD *)(v11 + 88) = *(_OWORD *)((char *)&v19[5] + 8);
          *(void *)(v11 + 104) = *((void *)&v19[6] + 1);
          memset((char *)&v19[5] + 8, 0, 24);
          std::vector<std::shared_ptr<char>>::__vdeallocate((uint64_t *)(v11 + 112));
          *(_OWORD *)(v11 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v20;
          *(void *)(v11 + 128) = v21[0];
          long long v20 = 0uLL;
          memset(v21, 0, sizeof(v21));
          uint64_t v13 = *(std::__shared_weak_count **)(v11 + 144);
          *(_OWORD *)(v11 + 136) = *(_OWORD *)&v21[1];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          if (v21[2]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21[2]);
          }
          *(void *)&long long v17 = &v20;
          std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
          if (*((void *)&v19[5] + 1))
          {
            *(void *)&v19[6] = *((void *)&v19[5] + 1);
            operator delete(*((void **)&v19[5] + 1));
          }
          if ((char *)++v8 - (unsigned char *)*v7 == 4096)
          {
            uint64_t v14 = (uint64_t *)v7[1];
            ++v7;
            long long v8 = v14;
          }
        }
        while (v8 != (uint64_t *)v10);
        uint64_t v4 = *(void ***)(v2 + 584);
        uint64_t v5 = *(void ***)(v2 + 592);
        long long v3 = (std::mutex *)(v2 + 512);
        long long v9 = (void *)(v2 + 616);
      }
    }
    *long long v9 = 0;
    unint64_t v15 = (char *)v5 - (char *)v4;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v4 = (void **)(*(void *)(v2 + 584) + 8);
        *(void *)(v2 + 584) = v4;
        unint64_t v15 = *(void *)(v2 + 592) - (void)v4;
      }
      while (v15 > 0x10);
    }
    if (v15 >> 3 == 1)
    {
      uint64_t v16 = 256;
    }
    else
    {
      if (v15 >> 3 != 2)
      {
LABEL_27:
        std::mutex::unlock(v3);
LABEL_28:
        *(void *)&long long v17 = "di_hybrid_subscriber_t::cancel()";
        *((void *)&v17 + 1) = 30;
        int v18 = 0;
        di_log::logger<di_log::log_printer<486ul>>::logger(v19, &v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Plugin's async ring cancelled, ret code ", 40);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf((uint64_t)v19);
        return MEMORY[0x223C24910](&v23);
      }
      uint64_t v16 = 512;
    }
    *(void *)(v2 + 608) = v16;
    goto LABEL_27;
  }
  return this;
}

void sub_21E27F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  di_log::logger<di_log::log_printer<486ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<486ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<486ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF22100;
  a1[45] = &unk_26CF22200;
  a1[46] = &unk_26CF22228;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF22100;
  a1[45] = &unk_26CF22188;
  a1[46] = &unk_26CF221B0;
  return a1;
}

void sub_21E27F860(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  return a1;
}

void di_hybrid_subscriber_t::cqe_callback(dispatch_queue_t *this)
{
  uint64_t v2 = (PluginRing *)(this + 38);
  PluginRing::get_next_cqe((PluginRing *)(this + 38), (uint64_t)&v18);
  char v3 = v19;
  if (v19)
  {
    long long v4 = v18;
    uint64_t v5 = MEMORY[0x263EF8330];
    do
    {
      uint64_t v6 = *(void *)(v4 + 136);
      long long v7 = *(std::__shared_weak_count **)(v4 + 144);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = v5;
        uint64_t v9 = 1174405120;
        uint64_t v10 = ___ZN22di_hybrid_subscriber_t12cqe_callbackEv_block_invoke;
        uint64_t v11 = &__block_descriptor_tmp_12;
        unint64_t v12 = this;
        uint64_t v13 = v4;
        long long v14 = v4;
        char v15 = v3;
        uint64_t v16 = v6;
        long long v17 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v9 = 1174405120;
        uint64_t v10 = ___ZN22di_hybrid_subscriber_t12cqe_callbackEv_block_invoke;
        uint64_t v11 = &__block_descriptor_tmp_12;
        unint64_t v12 = this;
        uint64_t v13 = v4;
        long long v14 = v4;
        char v15 = v3;
        uint64_t v16 = v6;
        long long v17 = 0;
      }
      if (this[35]) {
        gcd::gcd_queue::async(this + 63, &v8);
      }
      else {
        v10((uint64_t)&v8);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      PluginRing::get_next_cqe(v2, (uint64_t)&v18);
      long long v4 = v18;
      char v3 = v19;
    }
    while (v19);
  }
  if (!this[35]) {
    di_hybrid_subscriber_t::handle_pending_sqes((di_hybrid_subscriber_t *)this);
  }
}

void sub_21E27FA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22di_hybrid_subscriber_t12cqe_callbackEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(di_hybrid_subscriber_t **)(a1 + 32);
  unsigned int v3 = di_hybrid_subscriber_t::handle_sub_cqe(v2, *(di_async_sub_transaction_t **)(a1 + 40), *(_DWORD *)(a1 + 56));
  if (v3)
  {
    int v4 = 0;
    atomic_compare_exchange_strong((atomic_uint *volatile)(*(void *)(a1 + 72) + 16), (unsigned int *)&v4, v3);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(v5 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(void *)(v5 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  uint64_t v6 = *(void **)(v5 + 88);
  if (v6)
  {
    *(void *)(v5 + 96) = v6;
    operator delete(v6);
  }
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  std::vector<std::shared_ptr<char>>::__vdeallocate((uint64_t *)(v5 + 112));
  *(void *)(v5 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(v5 + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(void *)(v5 + 128) = 0;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  long long v7 = *(std::__shared_weak_count **)(v5 + 144);
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v10 = (void **)v8;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((void *)v2 + 35)) {
    di_hybrid_subscriber_t::handle_pending_sqes(v2);
  }
}

uint64_t di_hybrid_subscriber_t::handle_sub_cqe(di_hybrid_subscriber_t *this, di_async_sub_transaction_t *a2, int a3)
{
  v48[66] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((unsigned int *)a2 + 12);
  if (a3 == v3)
  {
    uint64_t v4 = *((void *)this + 35);
    if (v4)
    {
      uint64_t v6 = *((void *)a2 + 4);
      uint64_t v7 = *((void *)this + 37);
      dummy_shared_ptr = details::get_dummy_shared_ptr();
      uint64_t v10 = dummy_shared_ptr;
      unint64_t v12 = (char *)*((void *)a2 + 11);
      uint64_t v11 = (char *)*((void *)a2 + 12);
      uint64_t v13 = v44;
      std::string __p = v44;
      long long v43 = xmmword_21E39B4F0;
      unint64_t v14 = (unint64_t)(v11 - v12 - 16) >> 4;
      if (v11 == v12) {
        unint64_t v15 = 0;
      }
      else {
        unint64_t v15 = v14 + 1;
      }
      if (v15 < 6)
      {
        if (v12 == v11)
        {
          unint64_t v15 = 0;
        }
        else
        {
          unint64_t v25 = v14 + 1;
          do
          {
            uint64_t v26 = *(void *)v12;
            uint64_t v27 = dummy_shared_ptr[1];
            if (v27) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v28 = *((void *)v12 + 1);
            *uint64_t v13 = v26;
            v13[1] = v27;
            v13[2] = v28;
            v12 += 16;
            v13 += 3;
            --v25;
          }
          while (v25);
        }
      }
      else
      {
        if (v15 >= 0x555555555555556) {
          boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v9);
        }
        uint64_t v16 = operator new(24 * v15);
        long long v17 = v16;
        if (__p)
        {
          uint64_t v32 = v16;
          uint64_t v33 = v7;
          uint64_t v18 = v43;
          if ((void)v43)
          {
            char v19 = (std::__shared_weak_count **)((char *)__p + 8);
            do
            {
              if (*v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*v19);
              }
              v19 += 3;
              --v18;
            }
            while (v18);
          }
          *(void *)&long long v43 = 0;
          long long v17 = v32;
          uint64_t v7 = v33;
          if (v44 != __p) {
            operator delete(__p);
          }
        }
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v15;
        std::string __p = v17;
        if (v12 == v11)
        {
          uint64_t v24 = 0;
          long long v20 = (char *)v17;
        }
        else
        {
          long long v20 = (char *)v17;
          do
          {
            uint64_t v21 = *(void *)v12;
            uint64_t v22 = v10[1];
            if (v22) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v23 = *((void *)v12 + 1);
            *(void *)long long v20 = v21;
            *((void *)v20 + 1) = v22;
            *((void *)v20 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v23;
            v20 += 24;
            v12 += 16;
          }
          while (v12 != v11);
          uint64_t v24 = v43;
        }
        unint64_t v15 = v24 - 0x5555555555555555 * ((v20 - (unsigned char *)v17) >> 3);
      }
      *(void *)&long long v43 = v15;
      long long v45 = (unint64_t *)&v47;
      long long v46 = xmmword_21E39B4F0;
      boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v45, v15);
      unint64_t v37 = __p;
      uint64_t v34 = (uint64_t)__p + 24 * v15;
      unint64_t v41 = v45;
      unint64_t v40 = &v45[v46];
      sg_vec_ref::sg_vec_ref((uint64_t)v48, (uint64_t *)&v37, &v34, &v41, &v40, v7 * v6, v7 * v3);
      long long v29 = (DiskImage::Context *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
      sg_vec_ref::begin((sg_vec_ref *)v48, (uint64_t)&v37);
      sg_vec_ref::end((sg_vec_ref *)v48, (uint64_t)&v34);
      uint64_t v30 = DiskImage::Context::write(v29, (const sg_vec_ns::details::sg_vec_iterator *)&v37, (const sg_vec_ns::details::sg_vec_iterator *)&v34);
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      if (v29) {
        (*(void (**)(DiskImage::Context *))(*(void *)v29 + 40))(v29);
      }
      if (v30 < 0) {
        uint64_t v4 = v30;
      }
      else {
        uint64_t v4 = 0;
      }
      sg_vec::~sg_vec((sg_vec *)&__p);
    }
  }
  else if (a3 < 0)
  {
    return a3;
  }
  else
  {
    return 4294967291;
  }
  return v4;
}

void sub_21E27FEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 40))(v57);
  }
  sg_vec::~sg_vec((sg_vec *)&a57);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_72c47_ZTSNSt3__110shared_ptrI19di_hybrid_context_tEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  *(void *)(result + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 72);
  *(void *)(result + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_72c47_ZTSNSt3__110shared_ptrI19di_hybrid_context_tEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t di_plugin_cq_event_callback(uint64_t a1)
{
  io_rings_cq_get_overruns(a1);
  *(void *)&long long v3 = "di_plugin_cq_event_callback(io_uhandle_t, void *, enum io_rings_event_type_t, struct io_rings_event_type_data_t *)";
  *((void *)&v3 + 1) = 27;
  int v4 = 16;
  di_log::logger<di_log::log_printer<57ul>>::logger(v5, &v3);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" overrun events occurred in the plugin's ring!", 46);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x223C24910](&v7);
  return io_rings_cq_clear_overruns(a1);
}

void sub_21E280074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<57ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<57ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<57ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF21A40;
  a1[45] = &unk_26CF21B40;
  a1[46] = &unk_26CF21B68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF21A40;
  a1[45] = &unk_26CF21AC8;
  a1[46] = &unk_26CF21AF0;
  return a1;
}

void sub_21E280188(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF21BD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E28026C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF21BD8;
  di_log::logger_buf<di_log::log_printer<57ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<57ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<57ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2807E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<57ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 57;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 57;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *double result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(io_rings_setup_params_out_t *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t std::function<void ()(io_rings_setup_params_out_t *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_1::__invoke(uint64_t a1, unsigned __int8 *a2)
{
  return 0;
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_2::__invoke()
{
  return 1;
}

void pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 64);
  while (*(void *)(a1 + 104))
  {
    uint64_t v3 = (unint64_t *)(*(void *)(*(void *)(a1 + 72) + ((*(void *)(a1 + 96) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * (*(void *)(a1 + 96) & 0x1FFLL));
    if (atomic_load(v3))
    {
      unint64_t v5 = atomic_load(v3);
      if (v5) {
        (*(void (**)(unint64_t))(*(void *)v5 + 40))(v5);
      }
    }
    *(int64x2_t *)(a1 + 96) = vaddq_s64(*(int64x2_t *)(a1 + 96), (int64x2_t)xmmword_21E39C940);
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2, 1);
  }
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v2);
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<250ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF21DF8;
  di_log::logger_buf<di_log::log_printer<250ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<250ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E281278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<250ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 250;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 250;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<259ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF22018;
  di_log::logger_buf<di_log::log_printer<259ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<259ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2819EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<259ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 259;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 259;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

void std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char *)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E281CA0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x223C24980](v1, 0x1000C8077774924);
  }
  __cxa_rethrow();
}

void sub_21E281CC8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x223C24980);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN26di_async_sub_transaction_t15allocate_bufferEmEUlPT_E_))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::vector<std::shared_ptr<char>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        uint64_t v21 = (long long *)(a3 + 16 * a5);
      }
      else
      {
        uint64_t v21 = (long long *)(a3 + 16 * v20);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<char>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::shared_ptr<char>*>((uint64_t)v9, (uint64_t)v21, a4, (_OWORD *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<char>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::shared_ptr<char> *>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char> *>>,std::shared_ptr<char> *>((uint64_t)v26, (long long *)v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        __int16 v18 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)v9, v17);
      }
      else {
        __int16 v18 = 0;
      }
      __int16 v22 = &v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = 16 * a5;
      uint64_t v24 = &v22[16 * a5];
      do
      {
        *(_OWORD *)__int16 v22 = *(_OWORD *)v7;
        v22 += 16;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        v7 += 16;
        v23 -= 16;
      }
      while (v23);
      v26[2] = v24;
      int v5 = (void *)std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_21E281EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<char>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<char> *,std::shared_ptr<char> *,std::shared_ptr<char> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>,std::reverse_iterator<std::shared_ptr<char>*>,std::reverse_iterator<std::shared_ptr<char>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<char>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::shared_ptr<char>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_OWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<char>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::shared_ptr<char>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  uint64_t v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::shared_ptr<char>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::shared_ptr<char>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::shared_ptr<char>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::shared_ptr<char>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<char> *,std::shared_ptr<char> *,std::shared_ptr<char> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    char v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *char v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

long long *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::shared_ptr<char> *>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char> *>>,std::shared_ptr<char> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  int v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)int v5 = 0;
      *((void *)v5 + 1) = 0;
      long long v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<iovec>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<iovec*>>,std::move_iterator<std::__wrap_iter<iovec*>>>(uint64_t a1, char *__src, long long *a3, long long *a4, uint64_t a5)
{
  int v5 = __src;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    uint64_t v13 = *(unsigned char **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__src - v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v40 = v9;
    if (v17) {
      __int16 v18 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v9, v17);
    }
    else {
      __int16 v18 = 0;
    }
    uint64_t v31 = &v18[16 * v15];
    std::string __p = v18;
    unint64_t v37 = v31;
    uint64_t v39 = &v18[16 * v17];
    uint64_t v32 = 16 * a5;
    uint64_t v33 = &v31[16 * a5];
    do
    {
      long long v34 = *v7++;
      *(_OWORD *)uint64_t v31 = v34;
      v31 += 16;
      v32 -= 16;
    }
    while (v32);
    uint64_t v38 = v33;
    int v5 = (char *)std::vector<iovec>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37) {
      v38 += (v37 - v38 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)__src) >> 4;
  if (v19 >= a5)
  {
    uint64_t v20 = &a3[a5];
    uint64_t v21 = *(char **)(v9 - 8);
LABEL_18:
    unint64_t v25 = &__src[16 * a5];
    uint64_t v26 = &v21[-16 * a5];
    uint64_t v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      uint64_t v27 = v21;
      do
      {
        long long v28 = *(_OWORD *)v26;
        v26 += 16;
        *(_OWORD *)uint64_t v27 = v28;
        v27 += 16;
      }
      while ((unint64_t)v26 < v12);
    }
    *(void *)(a1 + 8) = v27;
    if (v21 != v25) {
      memmove(&v21[-16 * ((v21 - v25) >> 4)], __src, v21 - v25);
    }
    if (v20 != v7)
    {
      long long v29 = v5;
      do
      {
        long long v30 = *v7++;
        *(_OWORD *)long long v29 = v30;
        v29 += 16;
      }
      while (v7 != v20);
    }
    return v5;
  }
  uint64_t v20 = &a3[v19];
  uint64_t v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    __int16 v22 = v20;
    uint64_t v23 = *(_OWORD **)(v9 - 8);
    do
    {
      long long v24 = *v22++;
      *v23++ = v24;
      v21 += 16;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (void)__src) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_21E2823CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<iovec>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  int v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  long long v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    long long v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t std::vector<di_async_sub_transaction_t>::__push_back_slow_path<di_async_sub_transaction_t>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  uint64_t v10 = (char *)std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v13;
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((void *)v11 + 1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *((void *)v11 + 15) = 0;
  *((void *)v11 + 16) = 0;
  *((void *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  v19[2] = v11 + 152;
  std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_21E282638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<di_async_sub_transaction_t>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 152;
        std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::shared_ptr<char>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<char>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<486ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF22298;
  di_log::logger_buf<di_log::log_printer<486ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<486ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E282C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<486ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 486;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 486;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t DiskImage::Context::write(DiskImage::Context *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  if ((*(unsigned char *)(*((void *)this + 1) + 8) & 1) == 0) {
    return (*(uint64_t (**)(DiskImage::Context *, const sg_vec_ns::details::sg_vec_iterator *, const sg_vec_ns::details::sg_vec_iterator *))(*(void *)this + 8))(this, a2, a3);
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v4 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v4 + 1) = 25;
    int v5 = 2;
    di_log::logger<di_log::log_printer<166ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Disk image is terminated, skipping write", 40);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
  }
  return -6;
}

void sub_21E282FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<166ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<166ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<166ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF22320;
  a1[45] = &unk_26CF22420;
  a1[46] = &unk_26CF22448;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF22320;
  a1[45] = &unk_26CF223A8;
  a1[46] = &unk_26CF223D0;
  return a1;
}

void sub_21E2830C8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF224B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2831AC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF224B8;
  di_log::logger_buf<di_log::log_printer<166ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<166ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<166ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E283724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<166ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 166;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 166;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF21DF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E283A34(_Unwind_Exception *a1)
{
}

void std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::~__func()
{
}

void *std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26CF22538;
  return result;
}

void std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF22538;
}

uint64_t std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 32))();
}

uint64_t std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::target_type()
{
}

void *std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__func()
{
}

void *std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CF225C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF225C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::operator()(uint64_t a1)
{
  dint i = (DiskImageStackable *)io_rings_di_subscriber_t::get_di(*(io_rings_di_subscriber_t **)(a1 + 8));
  DiskImageStackable::create_async_ctx(di);
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target_type()
{
}

void DiskImageStackable::create_async_ctx(DiskImageStackable *this)
{
}

void sub_21E283D2C(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10A1C40D4D23789);
  _Unwind_Resume(a1);
}

uint64_t DiskImageStackable::ContextStackable::ContextStackable(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26CF22648;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  char v6 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  if (a3 == 1)
  {
    uint64_t bottom_async_cache = DiskImageStackable::ContextStackable::get_bottom_async_cache(a1, a2);
    char v8 = 0;
    *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = bottom_async_cache;
    *(void *)(a1 + 48) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    char v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 24) - 24) + 96))(*(void *)(*(void *)(a2 + 24) - 24));
  }
  *(unsigned char *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24); v10 != i; v10 += 48)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) == (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)
    {
      uint64_t v12 = *(void *)(v10 + 32);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v10 + 8) + 136))(*(void *)(v10 + 8));
    std::vector<std::shared_ptr<DiskImage::Context>>::emplace_back<std::unique_ptr<DiskImage::Context>>(v6, &v15);
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
    }
  }
  return a1;
}

void sub_21E283F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<DiskImage::Context>>::emplace_back<std::unique_ptr<DiskImagePlugin::ContextPluginAsync>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    long long v16 = (uint64_t *)&v13[16 * v9];
    __int16 v18 = &v13[16 * v12];
    std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImagePlugin::ContextPluginAsync,std::default_delete<DiskImagePlugin::ContextPluginAsync>,void>(v16, a2);
    int v17 = v16 + 2;
    std::vector<std::shared_ptr<DiskImage::Context>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(&v15);
  }
  else
  {
    std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImagePlugin::ContextPluginAsync,std::default_delete<DiskImagePlugin::ContextPluginAsync>,void>(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_21E2840D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<DiskImage::Context>>::emplace_back<std::unique_ptr<DiskImage::Context>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    long long v16 = (uint64_t *)&v13[16 * v9];
    __int16 v18 = &v13[16 * v12];
    std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImage::Context,std::default_delete<DiskImage::Context>,void>(v16, a2);
    int v17 = v16 + 2;
    std::vector<std::shared_ptr<DiskImage::Context>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(&v15);
  }
  else
  {
    std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImage::Context,std::default_delete<DiskImage::Context>,void>(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_21E2841EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void DiskImageStackable::ContextStackable::~ContextStackable(DiskImageStackable::ContextStackable *this)
{
  *(void *)this = &unk_26CF22648;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26CF22648;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x223C249A0](this, 0x10A1C40D4D23789);
}

uint64_t *std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImagePlugin::ContextPluginAsync,std::default_delete<DiskImagePlugin::ContextPluginAsync>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::shared_ptr<DiskImage::Context>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<DiskImage::Context>>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<DiskImage::Context>>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<DiskImage::Context>>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<DiskImage::Context>>,std::reverse_iterator<std::shared_ptr<DiskImage::Context>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

unint64_t DiskImagePlugin::ContextPluginAsync::_read(DiskImagePlugin **this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  return DiskImagePlugin::read_async(this[1], (DiskImagePlugin::ContextPluginAsync *)this, a2, a3);
}

void DiskImagePlugin::ContextPluginAsync::~ContextPluginAsync(DiskImagePlugin::ContextPluginAsync *this)
{
  *(void *)this = &unk_26CF22700;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26CF22700;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x223C249A0](this, 0xA1C40987D6AD5);
}

uint64_t *std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImage::Context,std::default_delete<DiskImage::Context>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<DiskImage::Context  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<DiskImage::Context  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImage::Context  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == -2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
  else if (v2 == -1)
  {
    if (*(void *)(a1 + 8))
    {
      uint64_t v3 = *(std::mutex **)a1;
      std::mutex::lock(*(std::mutex **)a1);
      std::deque<std::atomic<DiskImage::Context *>>::emplace_back<DiskImage::Context *&>((void *)(*(void *)a1 + 64), (void *)(a1 + 8));
      std::mutex::unlock(v3);
    }
  }
  else if ((v2 & 0x8000000000000000) == 0)
  {
    atomic_store(*(void *)(a1 + 8), (unint64_t *)(*(void *)(*(void *)(*(void *)a1 + 72)+ (((unint64_t)(*(void *)(*(void *)a1 + 96) + v2) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*(void *)(*(void *)a1 + 96) + v2) & 0x1FF)));
  }
  return a1;
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::emplace_back<DiskImage::Context *&>(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<std::atomic<DiskImage::Context *>>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  uint64_t v10 = v8 + 1;
  a1[5] = v10;
  unint64_t v11 = v7 + v10;
  unint64_t v12 = (void *)(v5 + 8 * (v11 >> 9));
  uint64_t v13 = v11 & 0x1FF;
  if (v13) {
    uint64_t v14 = *v12 + 8 * v13;
  }
  else {
    uint64_t v14 = *(v12 - 1) + 4096;
  }
  return v14 - 8;
}

void std::deque<std::atomic<DiskImage::Context *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21E284BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF22018;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2850D4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  unsigned int v2 = atomic_load((unsigned int *)(v1 + 16));
  if (!v2) {
    unsigned int v2 = *(_DWORD *)(v1 + 20);
  }
  io_rings_return_status(*(void *)(*(void *)v1 + 56), *(void *)(v1 + 8), v2, 0);
  char v4 = (void **)(v1 + 24);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x223C249A0](v1, 0x1060C40352A0DA6);
}

uint64_t std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::deque<di_async_sub_transaction_t *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21E2854A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF22298;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E285570(_Unwind_Exception *a1)
{
}

void sub_21E286350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2863CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E286488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2864E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E28674C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_21E28696C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E286A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E286C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E286D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E286EA8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  BOOL v14 = v13;

  if (a11) {
    MEMORY[0x223C24980](a11, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = NSString;
    (*(void (**)(void *))(*(void *)v17 + 16))(v17);
    uint64_t v19 = [v18 stringWithFormat:@"Invalid public key: %s"];
    +[DIError failWithPOSIXCode:22 verboseInfo:v19 error:v12];

    __cxa_end_catch();
    JUMPOUT(0x21E286DE0);
  }

  _Unwind_Resume(a1);
}

void sub_21E287160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2874A4(_Unwind_Exception *a1)
{
  unint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_21E28763C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E287758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E287B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E287FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E288270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E2884AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_21E2885D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_21E288708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E288848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x223C249A0](a10, 0x1000C404247E4FDLL);
  }

  _Unwind_Resume(a1);
}

_DWORD *crypto::header::encryption_key_bits_size_t::encryption_key_bits_size_t(_DWORD *this, int a2)
{
  *this = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "encryption_key_bits_size_t";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &unk_26CF1FB20;
    *((_DWORD *)exception + 8) = a2;
  }
  return this;
}

void sub_21E288EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Backend::read(Backend *this, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  uint64_t v11 = a2;
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  char v16 = 0;
  uint64_t v9 = (*(uint64_t (**)(Backend *, char **))(*(void *)this + 104))(this, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_21E288FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E289104(_Unwind_Exception *a1)
{
  MEMORY[0x223C24980](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_21E2892A4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

uint64_t std::optional<crypto::public_key_header>::operator=[abi:ne180100]<crypto::public_key_header,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    uint64_t v5 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(void *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }
  else
  {
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(unsigned char *)(a1 + 564) = 1;
  }
  return a1;
}

void sub_21E289900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E289A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E289B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E289CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E289E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a9);
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  _Unwind_Resume(a1);
}

const void **CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_21E28A010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21E28A1EC(_Unwind_Exception *a1, int a2)
{
  uint64_t v8 = v6;

  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Failed to create disk image with shadow/cache" error:v4];
    __cxa_end_catch();
    JUMPOUT(0x21E28A1A4);
  }

  _Unwind_Resume(a1);
}

void diskimage_uio::resolve_stack_nodes_from_path(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  create_stack_vector_from_single_path(a1, a1[1].__pn_.__r_.__value_.__s.__data_[0], &v3);
  if ((void)v3 == *((void *)&v3 + 1)) {
    operator new();
  }
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  *(unsigned char *)(a2 + 24) = 1;
  v5.__r_.__value_.__r.__words[0] = (std::string::size_type)&v3;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_21E28A4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, __int16 *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x223C249A0](v26, 0x1072C40D6CB2E0FLL);
  a17 = &a12;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a2 == 1)
  {
    int v29 = *((_DWORD *)__cxa_begin_catch(a1) + 2);
    long long v30 = std::generic_category();
    *(_DWORD *)uint64_t v25 = v29;
    *(void *)(v25 + 8) = v30;
    *(unsigned char *)(v25 + 24) = 0;
    __cxa_end_catch();
    JUMPOUT(0x21E28A4A4);
  }
  _Unwind_Resume(a1);
}

void *diskimage_uio::details::diskimage_impl::diskimage_impl(void *a1, const std::error_category **a2)
{
  *a1 = &unk_26CF228A8;
  a1[1] = 0;
  diskimage_uio::details::diskimage_open_params_impl::query_image_format(*a2, (uint64_t)v17);
  if (!v17[16])
  {
    *(void *)&long long v13 = "diskimage_uio::details::diskimage_impl::diskimage_impl(diskimage_open_params &&)";
    *((void *)&v13 + 1) = 54;
    int v14 = 16;
    di_log::logger<di_log::log_printer<1109ul>>::logger(v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Diskimageuio: Can't get image format", 36);
    di_log::logger<di_log::log_printer<1109ul>>::~logger((uint64_t)v15);
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v17);
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership((diskimage_uio::details::diskimage_open_params_impl *)*a2, v15);
  uint64_t v4 = v15[0];
  v15[0] = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = v15[0];
    v15[0] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
  }
  (*(void (**)(void *__return_ptr))(*(void *)a1[1] + 72))(v15);
  if (v15[0] || v15[1] || v15[2] || v15[3])
  {
    uint64_t v7 = (const void *)a1[1];
    if (!v7
    {
      *(void *)&long long v13 = "diskimage_uio::details::diskimage_impl::diskimage_impl(diskimage_open_params &&)";
      *((void *)&v13 + 1) = 54;
      int v14 = 16;
      di_log::logger<di_log::log_printer<1122ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
      di_log::logger<di_log::log_printer<1122ul>>::~logger((uint64_t)v15);
      uint64_t v10 = __cxa_allocate_exception(0x10uLL);
      void *v10 = make_error_code(164);
      v10[1] = v11;
    }
  }
  return a1;
}

void sub_21E28A848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v14);
  uint64_t v16 = *(void *)(v13 + 8);
  *(void *)(v13 + 8) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::diskimage_open_params::query_image_format@<X0>(const std::error_category **this@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::query_image_format(*this, a2);
}

void *di_log::logger<di_log::log_printer<1109ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1109ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF229B0;
  a1[45] = &unk_26CF22AB0;
  a1[46] = &unk_26CF22AD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF229B0;
  a1[45] = &unk_26CF22A38;
  a1[46] = &unk_26CF22A60;
  return a1;
}

void sub_21E28A9D0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t diskimage_uio::diskimage_open_params::get_internal(diskimage_uio::diskimage_open_params *this)
{
  return *(void *)this;
}

void diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(diskimage_uio::details::diskimage_open_params_impl *this@<X0>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(v6, this);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v6);
  }
  bzero(__p, 0x270uLL);
  diskimage_uio::details::diskimage_open_params_impl::operator=((uint64_t)this, (long long *)__p);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v12);
  uint64_t v4 = v11;
  uint64_t v11 = 0;
  if (v4) {
    MEMORY[0x223C249A0](v4, 0x1000C4015A9971DLL);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *a2 = v6[0];
}

void sub_21E28AB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11)
  {
    if (a9) {
      (*(void (**)(uint64_t))(*(void *)a9 + 16))(a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<1122ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1122ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF22C30;
  a1[45] = &unk_26CF22D30;
  a1[46] = &unk_26CF22D58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF22C30;
  a1[45] = &unk_26CF22CB8;
  a1[46] = &unk_26CF22CE0;
  return a1;
}

void sub_21E28ACDC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t make_error_code(uint64_t result)
{
  {
    int v2 = result;
    LODWORD(result) = v2;
    if (v1)
    {
      LODWORD(result) = v2;
    }
  }
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(diskimage_uio::details::diskimage_open_params_impl *this)
{
  long long v3 = this;
  uint64_t v1 = *((unsigned int *)this + 138);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(diskimage_uio::details::diskimage_open_params_impl ***, char *))off_26CF22E38[v1])(&v4, (char *)this + 48);
}

void *diskimage_uio::const_extents_iterator::const_extents_iterator(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

void diskimage_uio::const_extents_iterator::const_extents_iterator(diskimage_uio::const_extents_iterator *this, const diskimage_uio::const_extents_iterator *a2)
{
}

void sub_21E28AE8C(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x1020C40FA731AC5);
  _Unwind_Resume(a1);
}

void diskimage_uio::const_extents_iterator::operator=()
{
}

void sub_21E28AF0C(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x1020C40FA731AC5);
  _Unwind_Resume(a1);
}

void *diskimage_uio::const_extents_iterator::const_extents_iterator(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t ***diskimage_uio::const_extents_iterator::operator=(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = *v4;
    *uint64_t v4 = 0;
    if (v5) {
      std::default_delete<DiskImage::const_extents_iterator_t>::operator()[abi:ne180100]((uint64_t)v4, v5);
    }
    MEMORY[0x223C249A0](v4, 0x1020C40FA731AC5);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

BOOL diskimage_uio::const_extents_iterator::operator==(uint64_t **a1, uint64_t **a2)
{
  return DiskImage::const_extents_iterator_t::operator==(**a1, **a2);
}

BOOL diskimage_uio::const_extents_iterator::operator!=(uint64_t **a1, uint64_t **a2)
{
  return DiskImage::const_extents_iterator_t::operator!=(**a1, **a2);
}

uint64_t diskimage_uio::const_extents_iterator::operator*(void *a1)
{
  return *a1 + 8;
}

uint64_t diskimage_uio::const_extents_iterator::operator->(void *a1)
{
  return *a1 + 8;
}

uint64_t *diskimage_uio::const_extents_iterator::operator++(uint64_t *a1)
{
  return a1;
}

uint64_t diskimage_uio::details::extents_iterator_impl::operator++(uint64_t a1)
{
  DiskImage::const_extents_iterator_t::operator++(*(DiskImage::const_extents_iterator_t **)a1);
  diskimage_uio::details::extents_iterator_impl::make_val(a1, (uint64_t)&v3);
  *(_OWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  return a1;
}

void diskimage_uio::const_extents_iterator::operator++(diskimage_uio::const_extents_iterator *a1@<X0>, diskimage_uio::const_extents_iterator *a2@<X8>)
{
}

void sub_21E28B0DC(_Unwind_Exception *a1)
{
  diskimage_uio::const_extents_iterator::~const_extents_iterator(v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::const_extents_iterator::~const_extents_iterator(uint64_t ***this)
{
  int v2 = *this;
  if (*this)
  {
    long long v3 = *v2;
    *int v2 = 0;
    if (v3) {
      std::default_delete<DiskImage::const_extents_iterator_t>::operator()[abi:ne180100]((uint64_t)v2, v3);
    }
    MEMORY[0x223C249A0](v2, 0x1020C40FA731AC5);
  }
  *this = 0;
}

void diskimage_uio::extents_db::extents_db()
{
}

{
  diskimage_uio::extents_db::extents_db();
}

void sub_21E28B1C8(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

const std::error_category *diskimage_uio::extents_db::create@<X0>(char a1@<W3>, uint64_t a2@<X8>)
{
  if ((a1 & 8) == 0) {
    diskimage_uio::extents_db::extents_db();
  }
  uint64_t result = std::generic_category();
  *(void *)(a2 + 8) = result;
  *(void *)a2 = 45;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t std::make_error_code[abi:ne180100](unsigned int a1)
{
  return a1;
}

void *diskimage_uio::extents_db::extents_db(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t **diskimage_uio::extents_db::operator=(uint64_t **a1, uint64_t **a2)
{
  int v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = *v4;
    *int v4 = 0;
    if (v5) {
      std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((uint64_t)v4, v5);
    }
    MEMORY[0x223C249A0](v4, 0x1020C403A5D3213);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void diskimage_uio::extents_db::begin(DiskImage::extents_t ***this)
{
}

void diskimage_uio::details::extents_db_impl::begin(DiskImage::extents_t **this)
{
  DiskImage::extents_t::begin(*this, (uint64_t)&v1);
  operator new();
}

void sub_21E28B400(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v2;
  MEMORY[0x223C249A0](v5, 0x1020C40FA731AC5);
  char v7 = *(uint64_t **)(v3 - 24);
  *(void *)(v3 - 24) = 0;
  if (v7) {
    std::default_delete<DiskImage::const_extents_iterator_t>::operator()[abi:ne180100](v3 - 24, v7);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    operator new();
  }
  _Unwind_Resume(a1);
}

void diskimage_uio::extents_db::end(DiskImage::extents_t ***this)
{
}

void diskimage_uio::details::extents_db_impl::end(DiskImage::extents_t **this)
{
  DiskImage::extents_t::end(*this, (uint64_t)&v1);
  operator new();
}

void sub_21E28B598(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v2;
  MEMORY[0x223C249A0](v5, 0x1020C40FA731AC5);
  char v7 = *(uint64_t **)(v3 - 24);
  *(void *)(v3 - 24) = 0;
  if (v7) {
    std::default_delete<DiskImage::const_extents_iterator_t>::operator()[abi:ne180100](v3 - 24, v7);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    operator new();
  }
  _Unwind_Resume(a1);
}

void diskimage_uio::extents_db::~extents_db(uint64_t **this)
{
  uint64_t v2 = *this;
  if (*this)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3) {
      std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((uint64_t)v2, v3);
    }
    MEMORY[0x223C249A0](v2, 0x1020C403A5D3213);
  }
  *this = 0;
}

uint64_t diskimage_uio::is_read_only(unsigned int a1)
{
  return (a1 > 0xB) | (0x67Du >> a1) & 1;
}

void diskimage_uio::diskimage_open_params::diskimage_open_params()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_21E28B7AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::set_path@<X0>(std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__fs::filesystem::__status(a1, 0);
  if (LOBYTE(v15[0]) == 255 || LOBYTE(v15[0]) == 0)
  {
    *(void *)&long long v13 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((void *)&v13 + 1) = 75;
    int v14 = 16;
    di_log::logger<di_log::log_printer<573ul>>::logger(v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Diskimageuio: path ", 19);
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = a1->__pn_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" doesn't exist", 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf((uint64_t)v15);
    MEMORY[0x223C24910](&v17);
    uint64_t result = std::generic_category();
    *(void *)a4 = 2;
    *(void *)(a4 + 8) = result;
    *(unsigned char *)(a4 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 564) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(a2, 0, 1);
  }
  return result;
}

void sub_21E28B930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_21E28BA4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::details::diskimage_open_params_impl::open_with_plugin(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned char *a5@<X8>)
{
  memset(v12, 0, sizeof(v12));
  if (a4 == 1) {
    uint64_t v7 = 0x100000002;
  }
  else {
    uint64_t v7 = 0x100000000;
  }
  plugin_header::plugin_header(&v8, a2, a3, v7, v12, 0);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>(a1 + 48, a1 + 48, (uint64_t)&v8);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(_DWORD *)(a1 + 56std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 12;
  *a5 = 0;
  a5[16] = 1;
}

void sub_21E28BC80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::details::diskimage_open_params_impl::set_fd(uint64_t a1, int a2, int a3, char a4)
{
  int v10 = a2;
  char v9 = a4;
  *(_DWORD *)(a1 + 564) = a3;
  *(_DWORD *)(a1 + 568) = a3;
  int v7 = 2 * ((a3 - 1) < 2);
  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,int,BOOL &,void>(&v10, &v7, &v9, &v8);
  long long v5 = v8;
  long long v8 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  operator new();
}

void sub_21E28BD8C(_Unwind_Exception *a1, int a2)
{
  MEMORY[0x223C249A0](v3, 0x1000C4015A9971DLL);
  if (a2 == 2)
  {
    uint64_t v6 = *((unsigned int *)__cxa_begin_catch(a1) + 2);
    int v7 = std::generic_category();
    *(void *)uint64_t v2 = v6;
    *(void *)(v2 + 8) = v7;
    *(unsigned char *)(v2 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x21E28BD74);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x21E28BD60);
  }
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::create()
{
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    long long v5 = *(std::__shared_weak_count **)(v4 + 616);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 600);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    int v7 = *(std::__shared_weak_count **)(v4 + 584);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + 48);
    uint64_t v8 = *(void *)(v4 + 40);
    *(void *)(v4 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    if (v8) {
      MEMORY[0x223C249A0](v8, 0x1000C4015A9971DLL);
    }
    char v9 = *(std::__shared_weak_count **)(v4 + 32);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x223C249A0](v4, 0x1032C40F3DE37C8);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl(diskimage_uio::details::diskimage_open_params_impl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 48);
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    MEMORY[0x223C249A0](v5, 0x1000C4015A9971DLL);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params(diskimage_uio::diskimage_open_params *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 616);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 600);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 584);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 48);
    uint64_t v6 = *(void *)(v2 + 40);
    *(void *)(v2 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    if (v6) {
      MEMORY[0x223C249A0](v6, 0x1000C4015A9971DLL);
    }
    int v7 = *(std::__shared_weak_count **)(v2 + 32);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x223C249A0](v2, 0x1032C40F3DE37C8);
  }
  *(void *)this = 0;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params(void *this, diskimage_uio::details::diskimage_open_params_impl *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

void diskimage_uio::diskimage_open_params::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2) {
    diskimage_uio::details::diskimage_open_params_impl::encode(v2, a2);
  }
}

void diskimage_uio::details::diskimage_open_params_impl::encode(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = bswap32(*(_DWORD *)(a1 + 564));
  unsigned int v18 = bswap32(*(_DWORD *)(a1 + 568));
  unsigned int v19 = v4;
  (*(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2)(a2, "required_mode", &v19, 4);
  (*(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2)(a2, "current_mode", &v18, 4);
  uint64_t v5 = *(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2;
  if (*(_DWORD *)(a1 + 552) == 5)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      uint64_t v6 = *(unsigned int **)(a1 + 64);
      uint64_t v7 = *(void *)(a1 + 72);
    }
    else
    {
      uint64_t v6 = (unsigned int *)(a1 + 64);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 87);
    }
    v5(a2, "plugin_name", v6, v7 + 1);
    (*(void (**)(void))(*(void *)(a1 + 48) + 64))();
  }
  else
  {
    uint64_t v8 = (const char *)a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v8 = *(const char **)a1;
    }
    size_t v9 = strlen(v8);
    v5(a2, "path", (unsigned int *)v8, v9 + 1);
    uint64_t v10 = *(void *)(a1 + 576);
    if (v10 && *(void *)(a1 + 592) && *(void *)(a1 + 608))
    {
      char v11 = *(std::__shared_weak_count **)(a1 + 584);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(void (**)(uint64_t, const char *, uint64_t))(a2 + 8);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 176))(v10);
      v12(a2, "crypto_fd", v13);
      crypto::format_serializer::encode((void (**)(void, const char *, void, uint64_t))a2, *(void **)(a1 + 592));
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14) {
        (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))a2)(a2, "crypto_hdr", v14, 76);
      }
      uint64_t v15 = *(void *)(a1 + 24);
      char v11 = *(std::__shared_weak_count **)(a1 + 32);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = *(void (**)(uint64_t, const char *, uint64_t))(a2 + 8);
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 176))(v15);
      v16(a2, "fd", v17);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_21E28C388(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void diskimage_uio::diskimage_open_params::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  diskimage_uio::details::diskimage_open_params_impl::decode(a1, (uint64_t)v3);
  if (v4) {
    operator new();
  }
  *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::details::diskimage_open_params_impl,std::error_code>::error((uint64_t)v3);
  *(unsigned char *)(a2 + 16) = 0;
  if (v4) {
    diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>((uint64_t)v3);
  }
}

void sub_21E28C474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (LOBYTE(STACK[0x280])) {
    diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::decode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unsigned int v47 = 0;
  diskimage_uio::details::diskimage_open_params_impl::decode_buffer(a1, (uint64_t)"required_mode", &v47, 4uLL, (uint64_t)&v45);
  if (!v46)
  {
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v45);
LABEL_40:
    *(_OWORD *)a2 = *result;
    goto LABEL_41;
  }
  unsigned int v44 = 0;
  diskimage_uio::details::diskimage_open_params_impl::decode_buffer(a1, (uint64_t)"current_mode", &v44, 4uLL, (uint64_t)&v51);
  if (!v51.__r_.__value_.__s.__data_[16] || !v46)
  {
    if (!v51.__r_.__value_.__s.__data_[16])
    {
      long long v45 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      if (v46) {
        std::string::value_type v46 = 0;
      }
      uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v45);
      goto LABEL_40;
    }
    if (v46) {
      long long v45 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    }
    else {
      std::string::value_type v46 = v51.__r_.__value_.__s.__data_[16];
    }
  }
  unsigned int v5 = bswap32(v47);
  unsigned int v47 = v5;
  unsigned int v6 = bswap32(v44);
  unsigned int v44 = v6;
  if (v5 == 2)
  {
    LOBYTE(v5) = 0;
    LODWORD(v42[0]) = 2;
LABEL_18:
    char v7 = 1;
    goto LABEL_20;
  }
  if (v5 != 1)
  {
    if (v5)
    {
      uint64_t v8 = std::generic_category();
      char v7 = 0;
      v42[0] = 34;
      v42[1] = v8;
      LOBYTE(v5) = 1;
      unsigned int v6 = v44;
      goto LABEL_20;
    }
    LODWORD(v42[0]) = 0;
    goto LABEL_18;
  }
  LOBYTE(v5) = 0;
  char v7 = 1;
  LODWORD(v42[0]) = 1;
LABEL_20:
  char v43 = v7;
  if (v6 == 2 || v6 == 1)
  {
    LODWORD(v40[0]) = v6;
  }
  else
  {
    if (v6)
    {
      v40[0] = 34;
      v40[1] = std::generic_category();
      char v41 = 0;
      if (v43)
      {
        uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v40);
        goto LABEL_40;
      }
      goto LABEL_26;
    }
    LODWORD(v40[0]) = 0;
  }
  char v41 = 1;
  if (v5)
  {
LABEL_26:
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v42);
    goto LABEL_40;
  }
  LODWORD(v51.__r_.__value_.__l.__data_) = 1;
  v51.__r_.__value_.__s.__data_[16] = 1;
  if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)v40, (uint64_t)&v51))
  {
    LODWORD(v51.__r_.__value_.__l.__data_) = 0;
    v51.__r_.__value_.__s.__data_[16] = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)v42, (uint64_t)&v51))
    {
      uint64_t result = std::generic_category();
      *(void *)a2 = 22;
      *(void *)(a2 + 8) = result;
LABEL_41:
      *(unsigned char *)(a2 + 624) = 0;
      return result;
    }
  }
  int v9 = v42[0];
  int v10 = v40[0];
  uint64_t v39 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a1, "plugin_name", &v39);
  if (v11 < 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = v39;
    if (!v39[v11 - 1])
    {
      bzero(&v51, 0x270uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      if (v10 == 1) {
        uint64_t v13 = 0x100000002;
      }
      else {
        uint64_t v13 = 0x100000000;
      }
      plugin_header::plugin_header(v48, __p, 0, v13, a1, a1);
      std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>::operator=[abi:ne180100]<plugin_header,0,plugin_header,5ul,0>((uint64_t)v52, (uint64_t)v48);
      plugin_header::~plugin_header(v48);
      if (SBYTE7(v34) < 0) {
        operator delete(__p[0]);
      }
      v52[128] = 12;
      diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (long long *)&v51);
      *(unsigned char *)(a2 + 624) = 1;
      diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v51);
      return (_OWORD *)MEMORY[0x223C24980](v12, 0x1000C8077774924);
    }
  }
  uint64_t v38 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a1, "path", &v38);
  uint64_t v15 = v38;
  if (v38 && v14 > 0)
  {
    if (v38[v14 - 1])
    {
      uint64_t v16 = std::generic_category();
      *(void *)a2 = 22;
      *(void *)(a2 + 8) = v16;
      *(unsigned char *)(a2 + 624) = 0;
      goto LABEL_89;
    }
    std::string::basic_string[abi:ne180100]<0>(&v51, v38);
    std::string v37 = v51;
    int v17 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a1, "crypto_fd");
    int v36 = v17;
    if (v17 < 0 && v17 != -2)
    {
      int v18 = -v17;
      unsigned int v19 = std::generic_category();
      *(_DWORD *)a2 = v18;
      *(void *)(a2 + 8) = v19;
      *(unsigned char *)(a2 + 624) = 0;
      goto LABEL_87;
    }
    long long v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)std::string __p = 0u;
    if ((v17 & 0x80000000) == 0)
    {
      crypto::format_serializer::decode(a1, (uint64_t)v48);
      if (v49)
      {
        LOBYTE(v27) = v10 == 1;
        char v30 = 0;
        std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>(&v36, (BOOL *)&v27, &v30, &v31);
        long long v32 = v31;
        long long v31 = 0uLL;
        std::make_shared[abi:ne180100]<crypto::format,crypto::format,void>((uint64_t)v48, &v28);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(&v51, &v32, &v28);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::operator=((uint64_t)__p, (long long *)&v51);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)&v51);
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (*((void *)&v32 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
        }
        if (*((void *)&v31 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
        }
        if (v10 == v9)
        {
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(&v51, (long long *)&v37, v9, (uint64_t)__p);
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (long long *)&v51);
          *(unsigned char *)(a2 + 624) = 1;
          diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v51);
          goto LABEL_78;
        }
        unint64_t v22 = std::generic_category();
        *(void *)a2 = 22;
        *(void *)(a2 + 8) = v22;
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::format,std::error_code>::error((uint64_t)v48);
      }
      *(unsigned char *)(a2 + 624) = 0;
LABEL_78:
      if (v49) {
        std::__destroy_at[abi:ne180100]<crypto::format,0>((uint64_t)v48);
      }
      goto LABEL_86;
    }
    int v27 = 0;
    int v20 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a1, "fd");
    int v27 = v20;
    if (v20 < 0)
    {
      int v23 = -v20;
      uint64_t v24 = std::generic_category();
      *(_DWORD *)a2 = v23;
      *(void *)(a2 + 8) = v24;
    }
    else
    {
      crypto::header_serializer::decode((uint64_t (**)(void, const char *, char **))a1, (uint64_t)v48);
      if (v50)
      {
        uint64_t v28 = 0;
        goto LABEL_66;
      }
      uint64_t v25 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v48);
      uint64_t v26 = std::generic_category();
      v51.__r_.__value_.__r.__words[0] = 2;
      v51.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
      if (std::operator==[abi:ne180100](v25, (uint64_t)&v51))
      {
        uint64_t v28 = 0;
        if (!v50)
        {
          LOBYTE(v31) = v10 == 1;
          char v30 = 0;
          std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>(&v27, (BOOL *)&v31, &v30, &v32);
          long long v31 = v32;
          if (*((void *)&v32 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(&v51, (long long *)&v37, (std::string::size_type *)&v31, v10, v9, (std::string::size_type *)&v28);
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (long long *)&v51);
          *(unsigned char *)(a2 + 624) = 1;
          diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v51);
          if (*((void *)&v31 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
          }
          if (*((void *)&v32 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
          }
          uint64_t v21 = v28;
          uint64_t v28 = 0;
          if (v21) {
            MEMORY[0x223C249A0](v21, 0x1000C4015A9971DLL);
          }
          goto LABEL_86;
        }
LABEL_66:
        std::make_unique[abi:ne180100]<crypto::header,crypto::header>();
      }
      *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v48);
    }
    *(unsigned char *)(a2 + 624) = 0;
LABEL_86:
    diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)__p);
LABEL_87:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
LABEL_89:
    uint64_t result = (_OWORD *)MEMORY[0x223C24980](v15, 0x1000C8077774924);
    if (v12) {
      return (_OWORD *)MEMORY[0x223C24980](v12, 0x1000C8077774924);
    }
    return result;
  }
  uint64_t result = std::generic_category();
  *(void *)a2 = 22;
  *(void *)(a2 + 8) = result;
  *(unsigned char *)(a2 + 624) = 0;
  if (v12) {
    return (_OWORD *)MEMORY[0x223C24980](v12, 0x1000C8077774924);
  }
  return result;
}

void sub_21E28CB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,char a58)
{
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)&a17);
  if (a33 < 0) {
    operator delete(__p);
  }
  MEMORY[0x223C24980](v59, 0x1000C8077774924);
  if (v58) {
    MEMORY[0x223C24980](v58, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::details::diskimage_open_params_impl,std::error_code>::error(uint64_t result)
{
  if (*(unsigned char *)(result + 624))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CF1F460;
  }
  return result;
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::query_image_format@<X0>(const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_open_params_impl::validate_unlocked(this, (uint64_t)v12);
  if (v12[16])
  {
    *(_DWORD *)a2 = this[70].__vftable;
    char v5 = 1;
  }
  else
  {
    *(void *)&long long v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::query_image_format() const";
    *((void *)&v7 + 1) = 85;
    int v8 = 16;
    di_log::logger<di_log::log_printer<660ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Diskimageuio: query format failed ", 34);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v9, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x223C24910](&v11);
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

void sub_21E28CECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<660ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::diskimage_open_params::is_locked@<X0>(const std::error_category **this@<X0>, BOOL *a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::is_locked(*this, a2);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::is_locked@<X0>(const std::error_category *this@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = this[5].__vftable != 0;
    char v5 = 1;
  }
  else
  {
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v6);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }
  a2[16] = v5;
  return result;
}

_OWORD *diskimage_uio::diskimage_open_params::is_encrypted@<X0>(const std::error_category **this@<X0>, unsigned char *a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::is_encrypted(*this, a2);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::is_encrypted@<X0>(const std::error_category *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v7);
  if (v7[16])
  {
    if (this[5].__vftable)
    {
      LOBYTE(v5) = 1;
    }
    else
    {
      char v5 = this[72].__vftable;
      if (v5)
      {
        char v5 = this[74].__vftable;
        if (v5) {
          LOBYTE(v5) = this[76].__vftable != 0;
        }
      }
    }
    *a2 = (_BYTE)v5;
    char v6 = 1;
  }
  else
  {
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v7);
    char v6 = 0;
    *(_OWORD *)a2 = *result;
  }
  a2[16] = v6;
  return result;
}

uint64_t diskimage_uio::diskimage_open_params::is_read_only@<X0>(diskimage_uio::details::diskimage_open_params_impl **this@<X0>, unsigned char *a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::is_read_only(*this, a2);
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::is_read_only@<X0>(diskimage_uio::details::diskimage_open_params_impl *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 48))(*((void *)this + 3));
  LOBYTE(v5) = 1;
  if (result)
  {
    if (*((_DWORD *)this + 142))
    {
      unsigned int v6 = *((_DWORD *)this + 140);
      BOOL v7 = v6 > 0xB;
      unsigned int v5 = (0x67Du >> v6) & 1;
      if (v7) {
        LOBYTE(v5) = 1;
      }
    }
    else
    {
      LOBYTE(v5) = 1;
    }
  }
  *a2 = v5;
  a2[16] = 1;
  return result;
}

double diskimage_uio::diskimage_open_params::get_block_size@<D0>(const std::error_category **this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = diskimage_uio::details::diskimage_open_params_impl::get_block_size(*this, a2).n128_u64[0];
  return result;
}

__n128 diskimage_uio::details::diskimage_open_params_impl::get_block_size@<Q0>(const std::error_category *this@<X0>, __n128 *a2@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl::validate_unlocked(this, (uint64_t)v13);
  if (v13[16])
  {
    uint64_t v4 = LODWORD(this[69].__vftable);
    if (v4 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v10[0] = &v8;
    ((void (*)(void *, const std::error_category *))off_26CF28368[v4])(v10, &this[6]);
  }
  else
  {
    *(void *)&long long v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_block_size() const";
    *((void *)&v8 + 1) = 81;
    int v9 = 16;
    di_log::logger<di_log::log_printer<671ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Diskimageuio: query format failed ", 34);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v10, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x223C24910](&v12);
    BOOL v7 = (__n128 *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }
  return result;
}

void sub_21E28D18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<671ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>(const std::error_category **this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks(*this, a2).n128_u64[0];
  return result;
}

__n128 diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks@<Q0>(const std::error_category *this@<X0>, __n128 *a2@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl::validate_unlocked(this, (uint64_t)v13);
  if (v13[16])
  {
    uint64_t v4 = LODWORD(this[69].__vftable);
    if (v4 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v10[0] = &v8;
    ((void (*)(void *, const std::error_category *))off_26CF287D8[v4])(v10, &this[6]);
  }
  else
  {
    *(void *)&long long v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((void *)&v8 + 1) = 80;
    int v9 = 16;
    di_log::logger<di_log::log_printer<681ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Diskimageuio: query format failed ", 34);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v10, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x223C24910](&v12);
    BOOL v7 = (__n128 *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }
  return result;
}

void sub_21E28D2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<681ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::get_uuid(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

void diskimage_uio::diskimage_open_params::set_passphrase(std::error_category **this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
}

void diskimage_uio::details::diskimage_open_params_impl::set_passphrase(std::error_category *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl::is_encrypted(this, v31);
  if (!v31[16])
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v24 + 1) = 81;
    int v25 = 16;
    di_log::logger<di_log::log_printer<741ul>>::logger(&v26, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, can't get encrypted status ", 63);
    uint64_t v17 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v31);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v26, v17);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x223C24910](v30);
    int v18 = (long long *)v31;
LABEL_24:
    *(_OWORD *)a4 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v18);
    goto LABEL_25;
  }
  if (!v31[0])
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v24 + 1) = 81;
    int v25 = 16;
    di_log::logger<di_log::log_printer<745ul>>::logger(&v26, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, image not encrypted", 55);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x223C24910](v30);
    *(void *)a4 = make_error_code(161);
    *(void *)(a4 + 8) = v19;
LABEL_25:
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }
  diskimage_uio::details::diskimage_open_params_impl::is_locked(this, (BOOL *)&v24);
  if (!(_BYTE)v25)
  {
    *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v22 + 1) = 81;
    int v23 = 16;
    di_log::logger<di_log::log_printer<751ul>>::logger(&v26, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, can't get locked status ", 60);
    uint64_t v20 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v24);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v26, v20);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x223C24910](v30);
    int v18 = &v24;
    goto LABEL_24;
  }
  if (!(_BYTE)v24)
  {
    *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v22 + 1) = 81;
    int v23 = 16;
    di_log::logger<di_log::log_printer<755ul>>::logger(&v26, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, image already unlocked", 58);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x223C24910](v30);
    uint64_t v21 = std::generic_category();
    *(void *)a4 = 17;
    *(void *)(a4 + 8) = v21;
    goto LABEL_25;
  }
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t((uint64_t)&v26, (uint64_t)&this[5], &this[3].__vftable, (uint64_t)a2);
  long long v8 = v26;
  long long v26 = 0uLL;
  int v9 = (std::__shared_weak_count *)this[73].__vftable;
  *(_OWORD *)&this[72].__vftable = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  long long v10 = v27;
  long long v27 = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)this[75].__vftable;
  *(_OWORD *)&this[74].__vftable = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  long long v12 = v28;
  long long v28 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)this[77].__vftable;
  *(_OWORD *)&this[76].__vftable = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
  }
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  uint64_t v14 = this[76].__vftable;
  uint64_t v15 = this[77].__vftable;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v15->~error_category_0, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)this[4].__vftable;
  this[3].__vftable = v14;
  this[4].__vftable = v15;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx((diskimage_uio::details::diskimage_open_params_impl *)this, a2, a3, a4);
}

void sub_21E28D604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  di_log::logger<di_log::log_printer<755ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_context::read(DiskImage::Context **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  BOOL v7 = a1;
  v56[66] = *MEMORY[0x263EF8340];
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)*a1 + 1) + 24))(*((void *)*a1 + 1));
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  long long v12 = dummy_shared_ptr;
  uint64_t v13 = *(uint64_t **)a2;
  uint64_t v14 = *(unsigned int *)(a2 + 8);
  uint64_t v15 = v52;
  std::string __p = v52;
  long long v51 = xmmword_21E39B4F0;
  uint64_t v16 = (v14 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v14) {
    unint64_t v17 = v16 + 1;
  }
  else {
    unint64_t v17 = 0;
  }
  if (v17 < 6)
  {
    if (v14)
    {
      uint64_t v27 = v16 + 1;
      do
      {
        uint64_t v28 = *v13;
        uint64_t v29 = dummy_shared_ptr[1];
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = v13[1];
        *uint64_t v15 = v28;
        v15[1] = v29;
        v15[2] = v30;
        v13 += 2;
        v15 += 3;
        --v27;
      }
      while (v27);
    }
    else
    {
      unint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v40 = a4;
    if (v17 >= 0x555555555555556) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v11);
    }
    int v18 = operator new(24 * v17);
    if (__p)
    {
      uint64_t v39 = v7;
      uint64_t v19 = v51;
      if ((void)v51)
      {
        uint64_t v20 = (std::__shared_weak_count **)((char *)__p + 8);
        do
        {
          if (*v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*v20);
          }
          v20 += 3;
          --v19;
        }
        while (v19);
      }
      *(void *)&long long v51 = 0;
      BOOL v7 = v39;
      if (v52 != __p) {
        operator delete(__p);
      }
    }
    *(void *)&long long v51 = 0;
    *((void *)&v51 + 1) = v17;
    std::string __p = v18;
    if (v14)
    {
      uint64_t v21 = &v13[2 * v14];
      long long v22 = (char *)v18;
      do
      {
        uint64_t v23 = *v13;
        uint64_t v24 = v12[1];
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = v13[1];
        *(void *)long long v22 = v23;
        *((void *)v22 + 1) = v24;
        *((void *)v22 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v25;
        v22 += 24;
        v13 += 2;
      }
      while (v13 != v21);
      uint64_t v26 = v51;
    }
    else
    {
      uint64_t v26 = 0;
      long long v22 = (char *)v18;
    }
    unint64_t v17 = v26 - 0x5555555555555555 * ((v22 - (unsigned char *)v18) >> 3);
    a4 = v40;
  }
  *(void *)&long long v51 = v17;
  uint64_t v53 = (unint64_t *)&v55;
  long long v54 = xmmword_21E39B4F0;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v53, v17);
  long long v45 = __p;
  uint64_t v42 = (uint64_t)__p + 24 * v51;
  char v49 = v53;
  uint64_t v48 = &v53[v54];
  sg_vec_ref::sg_vec_ref((uint64_t)v56, (uint64_t *)&v45, &v42, &v49, &v48, v9 * a3, v9 * a4);
  long long v31 = *v7;
  sg_vec_ref::begin((sg_vec_ref *)v56, (uint64_t)&v45);
  sg_vec_ref::end((sg_vec_ref *)v56, (uint64_t)&v42);
  uint64_t v32 = DiskImage::Context::read(v31, (const sg_vec_ns::details::sg_vec_iterator *)&v45, (const sg_vec_ns::details::sg_vec_iterator *)&v42);
  uint64_t v34 = v33;
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v32 < 0 && v32)
  {
    long long v35 = std::generic_category();
    char v36 = 0;
    *(_DWORD *)a5 = v32;
    *(void *)(a5 + 8) = v35;
  }
  else if (v34 == v9 * a3)
  {
    *(void *)a5 = v32;
    char v36 = 1;
  }
  else
  {
    uint64_t error_code = make_error_code(164);
    char v36 = 0;
    *(void *)a5 = error_code;
    *(void *)(a5 + 8) = v38;
  }
  *(unsigned char *)(a5 + 16) = v36;
  sg_vec::~sg_vec((sg_vec *)&__p);
}

void sub_21E28DA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

uint64_t DiskImage::Context::read(DiskImage::Context *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  if ((*(unsigned char *)(*((void *)this + 1) + 8) & 1) == 0) {
    return (**(uint64_t (***)(DiskImage::Context *, const sg_vec_ns::details::sg_vec_iterator *, const sg_vec_ns::details::sg_vec_iterator *))this)(this, a2, a3);
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v4 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v4 + 1) = 24;
    int v5 = 2;
    di_log::logger<di_log::log_printer<159ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Disk image is terminated, skipping read", 39);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
  }
  return -6;
}

void sub_21E28DB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<159ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_context::write(DiskImage::Context **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a1;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)*a1 + 1) + 24))(*((void *)*a1 + 1));
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  long long v12 = dummy_shared_ptr;
  uint64_t v13 = *(uint64_t **)a2;
  uint64_t v14 = *(unsigned int *)(a2 + 8);
  uint64_t v15 = v52;
  std::string __p = v52;
  long long v51 = xmmword_21E39B4F0;
  uint64_t v16 = (v14 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v14) {
    unint64_t v17 = v16 + 1;
  }
  else {
    unint64_t v17 = 0;
  }
  if (v17 < 6)
  {
    if (v14)
    {
      uint64_t v27 = v16 + 1;
      do
      {
        uint64_t v28 = *v13;
        uint64_t v29 = dummy_shared_ptr[1];
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = v13[1];
        *uint64_t v15 = v28;
        v15[1] = v29;
        v15[2] = v30;
        v13 += 2;
        v15 += 3;
        --v27;
      }
      while (v27);
    }
    else
    {
      unint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v40 = a4;
    if (v17 >= 0x555555555555556) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v11);
    }
    int v18 = operator new(24 * v17);
    if (__p)
    {
      uint64_t v39 = v7;
      uint64_t v19 = v51;
      if ((void)v51)
      {
        uint64_t v20 = (std::__shared_weak_count **)((char *)__p + 8);
        do
        {
          if (*v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*v20);
          }
          v20 += 3;
          --v19;
        }
        while (v19);
      }
      *(void *)&long long v51 = 0;
      uint64_t v7 = v39;
      if (v52 != __p) {
        operator delete(__p);
      }
    }
    *(void *)&long long v51 = 0;
    *((void *)&v51 + 1) = v17;
    std::string __p = v18;
    if (v14)
    {
      uint64_t v21 = &v13[2 * v14];
      long long v22 = (char *)v18;
      do
      {
        uint64_t v23 = *v13;
        uint64_t v24 = v12[1];
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = v13[1];
        *(void *)long long v22 = v23;
        *((void *)v22 + 1) = v24;
        *((void *)v22 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v25;
        v22 += 24;
        v13 += 2;
      }
      while (v13 != v21);
      uint64_t v26 = v51;
    }
    else
    {
      uint64_t v26 = 0;
      long long v22 = (char *)v18;
    }
    unint64_t v17 = v26 - 0x5555555555555555 * ((v22 - (unsigned char *)v18) >> 3);
    a4 = v40;
  }
  *(void *)&long long v51 = v17;
  uint64_t v53 = (unint64_t *)&v55;
  long long v54 = xmmword_21E39B4F0;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v53, v17);
  long long v45 = __p;
  uint64_t v42 = (uint64_t)__p + 24 * v51;
  char v49 = v53;
  uint64_t v48 = &v53[v54];
  sg_vec_ref::sg_vec_ref((uint64_t)v56, (uint64_t *)&v45, &v42, &v49, &v48, v9 * a3, v9 * a4);
  v56[200] = 1;
  long long v31 = *v7;
  sg_vec_ref::begin((sg_vec_ref *)v56, (uint64_t)&v45);
  sg_vec_ref::end((sg_vec_ref *)v56, (uint64_t)&v42);
  uint64_t v32 = DiskImage::Context::write(v31, (const sg_vec_ns::details::sg_vec_iterator *)&v45, (const sg_vec_ns::details::sg_vec_iterator *)&v42);
  uint64_t v34 = v33;
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v32 < 0 && v32)
  {
    long long v35 = std::generic_category();
    char v36 = 0;
    *(_DWORD *)a5 = v32;
    *(void *)(a5 + 8) = v35;
  }
  else if (v34 == v9 * a3)
  {
    *(void *)a5 = v32;
    char v36 = 1;
  }
  else
  {
    uint64_t error_code = make_error_code(164);
    char v36 = 0;
    *(void *)a5 = error_code;
    *(void *)(a5 + 8) = v38;
  }
  *(unsigned char *)(a5 + 16) = v36;
  sg_vec::~sg_vec((sg_vec *)&__p);
}

void sub_21E28DF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

uint64_t diskimage_uio::diskimage_context::flush@<X0>(void **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 >= 3)
  {
    uint64_t result = make_error_code(164);
    char v6 = 0;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v7;
  }
  else
  {
    uint64_t result = DiskImage::Context::flush(*a1);
    if (result)
    {
      int v5 = result;
      uint64_t result = (uint64_t)std::generic_category();
      char v6 = 0;
      *(_DWORD *)a3 = v5;
      *(void *)(a3 + 8) = result;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      char v6 = 1;
    }
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t diskimage_uio::diskimage_context::unmap@<X0>(void **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = DiskImage::Context::unmap(*a1);
  if (result)
  {
    int v6 = result;
    uint64_t result = (uint64_t)std::generic_category();
    char v7 = 0;
    *(_DWORD *)a3 = v6;
    *(void *)(a3 + 8) = result;
  }
  else
  {
    uint64_t v8 = a2[2];
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 16 * v8;
      uint64_t v11 = (uint64_t *)(*(void *)a2 + 8);
      do
      {
        uint64_t v12 = *v11;
        v11 += 2;
        v9 += v12;
        v10 -= 16;
      }
      while (v10);
    }
    else
    {
      uint64_t v9 = 0;
    }
    *(void *)a3 = v9;
    char v7 = 1;
  }
  *(unsigned char *)(a3 + 16) = v7;
  return result;
}

uint64_t DiskImage::Context::unmap(void *a1)
{
  if (*(unsigned char *)(a1[1] + 8))
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v3 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
      *((void *)&v3 + 1) = 25;
      int v4 = 2;
      di_log::logger<di_log::log_printer<173ul>>::logger(v5, &v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Disk image is terminated, skipping unmap", 40);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf((uint64_t)v5);
      MEMORY[0x223C24910](&v7);
    }
    return 4294967290;
  }
  else
  {
    uint64_t v1 = *(uint64_t (**)(void))(*a1 + 16);
    return v1();
  }
}

void sub_21E28E188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<173ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::error_category *diskimage_uio::diskimage_context::get_extents@<X0>(char a1@<W3>, uint64_t a2@<X8>)
{
  return diskimage_uio::extents_db::create(a1, a2);
}

const std::error_category *diskimage_uio::diskimage_context::get_extents@<X0>(uint64_t a1@<X8>)
{
  return diskimage_uio::diskimage_context::get_extents(7, a1);
}

void *diskimage_uio::diskimage_context::diskimage_context(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *diskimage_uio::diskimage_context::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void diskimage_uio::diskimage_context::~diskimage_context(diskimage_uio::diskimage_context *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  *(void *)this = 0;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  *(void *)this = 0;
}

uint64_t *diskimage_uio::diskimage::diskimage(uint64_t *a1, uint64_t *a2)
{
  int v4 = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>((uint64_t)&v4, (uint64_t)&v6);
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
  return a1;
}

{
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(*a2, a2[1]);
  return a1;
}

{
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(*a2, a2[1]);
  return a1;
}

void sub_21E28E3E0(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(void *)&long long v15 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v15 + 1) = 77;
    int v16 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v17, &v15);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)v17, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v17);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157);
    exception[1] = v10;
  }
  if (a1 + 16 != a2) {
    operator new();
  }
  int v13 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)a1;
  int v4 = *(const std::error_category **)(a1 + 8);
  uint64_t v14 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    *(void *)&long long v15 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v15 + 1) = 77;
    int v16 = 16;
    di_log::logger<di_log::log_printer<1915ul>>::logger(v17, &v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v19, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v17);
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    uint64_t v12 = std::generic_category();
    *uint64_t v11 = 22;
    v11[1] = v12;
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format(v4, (uint64_t)&v15);
  LODWORD(v17[0]) = 12;
  char v18 = 1;
  if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v15, (uint64_t)v17))
  {
    operator new();
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v14, (uint64_t)&v15);
  LODWORD(v17[0]) = 11;
  char v18 = 1;
  if (!diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v15, (uint64_t)v17)|| (v5 = (uint64_t *)*((void *)v14 + 6), uint64_t v6 = v5[1], v6 - *v5 != 16))
  {
    operator new();
  }
  uint64_t v7 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(*v5, v6);
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v14);
  return v7;
}

void sub_21E28E688(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

uint64_t *diskimage_uio::diskimage::diskimage(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  v22[26] = *MEMORY[0x263EF8340];
  if (!a3)
  {
    *(void *)&long long v16 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
    *((void *)&v16 + 1) = 151;
    LODWORD(v17) = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(&lpsrc, &v16);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)&lpsrc, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)&lpsrc);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157);
    exception[1] = v11;
  }
  if (a3 != 1) {
    operator new();
  }
  int v4 = *a2;
  LODWORD(lpsrc) = **a2;
  int v5 = (int)lpsrc;
  uint64_t v19 = (diskimage_uio::details::diskimage_open_params_impl *)*((void *)v4 + 1);
  *((void *)v4 + 1) = 0;
  int v14 = v5;
  long long v15 = v19;
  uint64_t v19 = 0;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v19);
  if (v14)
  {
    *(void *)&long long v16 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
    *((void *)&v16 + 1) = 151;
    LODWORD(v17) = 16;
    di_log::logger<di_log::log_printer<1915ul>>::logger(&lpsrc, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(&v21, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)" rather than image", 18);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf((uint64_t)&lpsrc);
    MEMORY[0x223C24910](v22);
    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    int v13 = std::generic_category();
    void *v12 = 22;
    v12[1] = v13;
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v15, (uint64_t)&v16);
  LODWORD(lpsrc) = 12;
  LOBYTE(v2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
  if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v16, (uint64_t)&lpsrc))
  {
    operator new();
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v15, (uint64_t)&v16);
  LODWORD(lpsrc) = 11;
  LOBYTE(v2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
  if (!diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v16, (uint64_t)&lpsrc)|| (v6 = (uint64_t *)*((void *)v15 + 6), uint64_t v7 = v6[1], v7 - *v6 != 16))
  {
    operator new();
  }
  uint64_t v8 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(*v6, v7);
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v15);
  *a1 = v8;
  return a1;
}

void sub_21E28F608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, diskimage_uio::diskimage_open_params *a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  _Unwind_Resume(a1);
}

void sub_21E28F710()
{
}

void sub_21E28F718()
{
  MEMORY[0x223C249A0](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x21E28F738);
}

void sub_21E28F7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, diskimage_uio::diskimage_open_params *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  __cxa_end_catch();
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v21 = *(void *)(v19 - 152);
  *(void *)(v19 - 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(a12);
  uint64_t v22 = *(void *)(a11 + 8);
  *(void *)(a11 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  MEMORY[0x223C249A0](a11, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_21E28F82C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21E28FAE4);
}

void sub_21E28F83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, diskimage_uio::diskimage_open_params *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  __cxa_free_exception(v19);
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v22 = *(void *)(v20 - 152);
  *(void *)(v20 - 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(a12);
  uint64_t v23 = *(void *)(a11 + 8);
  *(void *)(a11 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  MEMORY[0x223C249A0](a11, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_21E28F8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x21E28F9E4);
}

void sub_21E28F9B0()
{
}

uint64_t diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(void *)&long long v15 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v15 + 1) = 77;
    int v16 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v17, &v15);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)v17, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v17);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157);
    exception[1] = v10;
  }
  if (a1 + 16 != a2) {
    operator new();
  }
  int v13 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)a1;
  int v4 = *(const std::error_category **)(a1 + 8);
  int v14 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    *(void *)&long long v15 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v15 + 1) = 77;
    int v16 = 16;
    di_log::logger<di_log::log_printer<1915ul>>::logger(v17, &v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v19, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v17);
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    uint64_t v12 = std::generic_category();
    *uint64_t v11 = 22;
    v11[1] = v12;
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format(v4, (uint64_t)&v15);
  LODWORD(v17[0]) = 12;
  char v18 = 1;
  if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v15, (uint64_t)v17))
  {
    operator new();
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v14, (uint64_t)&v15);
  LODWORD(v17[0]) = 11;
  char v18 = 1;
  if (!diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v15, (uint64_t)v17)|| (v5 = (uint64_t *)*((void *)v14 + 6), uint64_t v6 = v5[1], v6 - *v5 != 16))
  {
    operator new();
  }
  uint64_t v7 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(*v5, v6);
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v14);
  return v7;
}

void sub_21E28FDB4(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

uint64_t *diskimage_uio::diskimage::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = diskimage_uio::diskimage::diskimage(&v4, a1);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void diskimage_uio::diskimage::~diskimage(diskimage_uio::diskimage *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = 0;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = 0;
}

uint64_t *diskimage_uio::diskimage::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = diskimage_uio::diskimage::diskimage(&v5, a1, a2);
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t diskimage_uio::diskimage::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(*a1, a1[1]);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void *diskimage_uio::diskimage::diskimage(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *diskimage_uio::diskimage::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

uint64_t diskimage_uio::diskimage::is_read_only(diskimage_uio::diskimage *this)
{
  return (*(unsigned int (**)(void))(**(void **)(*(void *)this + 8) + 40))(*(void *)(*(void *)this + 8)) ^ 1;
}

uint64_t diskimage_uio::diskimage::get_block_size(diskimage_uio::diskimage *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)this + 8) + 24))();
}

uint64_t diskimage_uio::diskimage::get_nr_blocks(diskimage_uio::diskimage *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)this + 8) + 32))();
}

uint64_t diskimage_uio::diskimage::create_context@<X0>(diskimage_uio::details::diskimage_impl **this@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_impl::create_context(*this, a2);
}

uint64_t diskimage_uio::details::diskimage_impl::create_context@<X0>(diskimage_uio::details::diskimage_impl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_impl::create_context_impl(this, (uint64_t)v4);
  if (v5)
  {
    *(void *)a2 = v4[0];
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    uint64_t result = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v4);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(unsigned char *)(a2 + 16) = 0;
    if (v5)
    {
      uint64_t result = v4[0];
      v4[0] = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      }
    }
  }
  return result;
}

void sub_21E290198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {
    diskimage_uio::details::diskimage_impl::create_context(&a10);
  }
  _Unwind_Resume(exception_object);
}

void diskimage_uio::details::diskimage_impl::subscribe_to_ring(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 8);
  if (v1)
  {
    if (!v2 || (uint64_t v1 = *(const void **)(v2[3] - 24)) != 0)
    {
      {
        operator new();
      }
    }
  }
  operator new();
}

void sub_21E290464(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<di_hybrid_subscriber_t>::reset[abi:ne180100]((di_hybrid_subscriber_t **)va, 0);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x21E290430);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_plugin_impl::subscribe_to_ring(uint64_t a1, uint64_t a2)
{
  return DiskImagePlugin::subscribe_to_ring(*(void *)(a1 + 8), a2);
}

uint64_t diskimage_uio::diskimage::subscribe_to_ring(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 16))();
}

uint64_t diskimage_uio::add_di_role@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(void *)(a3 + 8) = *a2;
  *a2 = 0;
  return result;
}

void *diskimage_uio::operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = "auto";
    uint64_t v3 = 4;
  }
  else if (a2 == 1)
  {
    uint64_t v2 = "read write";
    uint64_t v3 = 10;
  }
  else if (a2)
  {
    uint64_t v2 = "unknown";
    uint64_t v3 = 7;
  }
  else
  {
    uint64_t v2 = "read only";
    uint64_t v3 = 9;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;

  switch(a2)
  {
    case 0:
      uint64_t v2 = "image";
      goto LABEL_6;
    case 1:
      uint64_t v2 = "cache";
LABEL_6:
      uint64_t v3 = 5;
      break;
    case 2:
      uint64_t v2 = "snapshot";
      uint64_t v3 = 8;
      break;
    case 3:
      uint64_t v2 = "shadow";
      uint64_t v3 = 6;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7;
      break;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;

  switch(a2)
  {
    case 1:
      uint64_t v2 = "raw";
      uint64_t v3 = 3;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
    case 2:
      uint64_t v2 = "udro";
      goto LABEL_11;
    case 3:
      uint64_t v2 = "udzo";
      goto LABEL_11;
    case 4:
      uint64_t v2 = "ulfo";
      goto LABEL_11;
    case 5:
      uint64_t v2 = "ulmo";
      goto LABEL_11;
    case 6:
      uint64_t v2 = "udzo_max";
      uint64_t v3 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
    case 7:
      uint64_t v2 = "udsb";
      goto LABEL_11;
    case 8:
      uint64_t v2 = "asif";
LABEL_11:
      uint64_t v3 = 4;
      break;
    case 11:
      uint64_t v2 = "pstack";
      uint64_t v3 = 6;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7;
      break;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  int v2;
  int v4;

  if ((a2 - 1) >= 3) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = a2;
  }
  uint64_t v4 = v2;
  return operator<<(a1, &v4);
}

uint64_t io_rings_di_subscriber_t::io_rings_di_subscriber_t(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2), uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 850045863;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 19std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 16std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 23std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = -1;
  *(void *)(a1 + 24std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = a3;
  if (*(void *)(a4 + 24))
  {
    std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 248, a4);
  }
  else
  {
    *(void *)(a1 + 248) = &unk_26CF2A840;
    *(void *)(a1 + 256) = a1;
    *(void *)(a1 + 27std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = a1 + 248;
  }
  io_rings_subscriber_sync_init((uint64_t (**)(uint64_t, uint64_t))a1, a2);
  *(void *)a1 = io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_1::__invoke;
  return a1;
}

void sub_21E29086C(_Unwind_Exception *a1)
{
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(v1);
  _Unwind_Resume(a1);
}

uint64_t io_rings_di_subscriber_t::get_di(io_rings_di_subscriber_t *this)
{
  return *(void *)(*((void *)this + 30) + 8);
}

uint64_t io_rings_di_subscriber_t::get_ctx@<X0>(io_rings_di_subscriber_t *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)this + 120;
  uint64_t v5 = *((void *)this + 28);
  if (v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)this + 24)+ (((unint64_t)(v6 + *((void *)this + 27)) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v6 + *((void *)this + 27)) & 0x1FF)), 0);
      if (v7) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
    *a2 = v4;
    a2[1] = v7;
    long long v15 = (unint64_t)v4;
    a2[2] = v6;
    uint64_t v16 = -2;
  }
  else
  {
LABEL_5:
    long long v15 = 0uLL;
    uint64_t v16 = -1;
    uint64_t v8 = *((void *)this + 34);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v13);
    if (v14)
    {
      unint64_t v9 = *((void *)this + 29);
      if ((v9 & 0x8000000000000000) != 0 || *((void *)this + 28) + 1 <= v9) {
        uint64_t v10 = -1;
      }
      else {
        uint64_t v10 = -2;
      }
      uint64_t v11 = v13;
      *a2 = v4;
      a2[1] = v11;
      a2[2] = v10;
    }
    else
    {
      *(_OWORD *)a2 = v15;
      a2[2] = v16;
      *((void *)&v15 + 1) = 0;
      uint64_t v16 = -2;
    }
  }
  return pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)&v15);
}

void sub_21E2909D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)va);
  _Unwind_Resume(a1);
}

void pstack_header::pstack_header(void *a1, const void **a2, char *a3, char a4)
{
  *a1 = 0;
  if (*a2)
  {
    if (v6)
    {
      memset(&v12[3], 0, 24);
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 176))(v6);
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
      create_stack_vector_from_single_fd((const std::__fs::filesystem::path *)&__p, v7, a4, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v12[0] != v12[1]) {
        operator new();
      }
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      uint64_t v11 = std::generic_category();
      exception[1] = 22;
      exception[2] = v11;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "pstack_header";
      void *exception = &unk_26CF2A3D8;
    }
  }
  uint64_t v8 = __cxa_allocate_exception(0x40uLL);
  void *v8 = &unk_26CF39EE0;
  unint64_t v9 = std::generic_category();
  v8[1] = 22;
  _OWORD v8[2] = v9;
  *((unsigned char *)v8 + 24) = 0;
  *((unsigned char *)v8 + 48) = 0;
  v8[7] = "pstack_header";
  void *v8 = &unk_26CF2A3D8;
}

void sub_21E290ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,char a27,int a28,__int16 a29,char a30)
{
  a16 = &a19;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](v30, 0);
  _Unwind_Resume(a1);
}

void header_exception::header_exception(header_exception *this, const char *a2, unsigned int a3)
{
  *(void *)this = &unk_26CF39EE0;
  uint64_t v6 = std::generic_category();
  *((void *)this + 1) = a3;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v6;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 7) = a2;
  *(void *)this = &unk_26CF2A3D8;
}

uint64_t std::vector<diskimage_uio::diskimage_open_params_pair>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    uint64_t v6 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](result, a2);
    unint64_t v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64(v8);
      uint64_t v10 = &v6[v5];
    }
    else
    {
      uint64_t v10 = &v6[v5];
      do
      {
        int v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((void *)v10 + 1) = *(void *)(v8 + 8);
        *(void *)(v8 + 8) = 0;
      }
      while ((char *)v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

diskimage_uio::diskimage_open_params *diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::operator=(diskimage_uio::diskimage_open_params *a1, long long *a2)
{
  char v5 = *((unsigned char *)a2 + 16);
  if (v5)
  {
    *(void *)&long long v4 = *(void *)a2;
    *(void *)a2 = 0;
  }
  else
  {
    long long v4 = *a2;
  }
  diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::swap((diskimage_uio::diskimage_open_params *)&v4, a1);
  if (v5) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }
  return a1;
}

void sub_21E29117C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node(uint64_t a1, int a2, int a3, long long *a4, long long *a5, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 24) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 48) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v10;
  }
  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_21E291240(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void diskimage_uio::details::diskimage_impl::~diskimage_impl(diskimage_uio::details::diskimage_impl *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26CF228A8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26CF228A8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  JUMPOUT(0x223C249A0);
}

void diskimage_uio::details::diskimage_plugin_impl::~diskimage_plugin_impl(diskimage_uio::details::diskimage_plugin_impl *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26CF228A8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26CF228A8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  JUMPOUT(0x223C249A0);
}

void diskimage_uio::anonymous namespace'::di_err_category::~di_err_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x223C249A0);
}

const char *diskimage_uio::anonymous namespace'::di_err_category::name(diskimage_uio::_anonymous_namespace_::di_err_category *this)
{
  return "disk image";
}

void *diskimage_uio::anonymous namespace'::di_err_category::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if ((a1 - 150) > 0x10) {
    uint64_t v3 = "(unrecognized error)";
  }
  else {
    uint64_t v3 = off_2644A2598[a1 - 150];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1109ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF22B48;
  di_log::logger_buf<di_log::log_printer<1109ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1109ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E291A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1109ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1109;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1109;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  long long v5 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  char v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v7;
  if (v8) {
    MEMORY[0x223C249A0](v8, 0x1000C4015A9971DLL);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(a1 + 48, (uint64_t)(a2 + 3));
  uint64_t v9 = *((void *)a2 + 70);
  *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
  *(void *)(a1 + 56std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v9;
  long long v10 = a2[36];
  a2[36] = 0u;
  int v11 = *(std::__shared_weak_count **)(a1 + 584);
  *(_OWORD *)(a1 + 576) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  long long v12 = a2[37];
  *((void *)a2 + 75) = 0;
  *((void *)a2 + 74) = 0;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 600);
  *(_OWORD *)(a1 + 59std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  long long v14 = a2[38];
  *((void *)a2 + 77) = 0;
  *((void *)a2 + 76) = 0;
  int64x2_t v15 = *(std::__shared_weak_count **)(a1 + 616);
  *(_OWORD *)(a1 + 608) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return a1;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = a2[1];
  *((void *)a2 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = a2[2];
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 504);
  uint64_t v4 = *(unsigned int *)(a2 + 504);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26CF22BB8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26CF22BE8[v4])(&v5, result, a2);
}

void ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS8_SA_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void ***a2)
{
  return std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS8_SA_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void plugin_header::~plugin_header(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 2) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<2ul,di_asif::header>(result, (uint64_t)a3);
  }
  *a2 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  long long v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 3) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<3ul,raw_header>(result, a3);
  }
  *a2 = *a3;
  return result;
}

void ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, void ***a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<4ul,pstack_header,pstack_header>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<0ul,std::monostate>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CF22BB8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<1ul,udif::header,udif::header>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v3 = *(_OWORD *)(a3 + 16);
    long long v4 = *(_OWORD *)(a3 + 32);
    long long v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v4;
    *(_DWORD *)(a2 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    long long v6 = *(_OWORD *)(a3 + 88);
    long long v7 = *(_OWORD *)(a3 + 104);
    long long v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 88) = v6;
    long long v9 = *(_OWORD *)(a3 + 152);
    long long v10 = *(_OWORD *)(a3 + 168);
    long long v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 20std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 168) = v10;
    *(_OWORD *)(a2 + 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v9;
    long long v12 = *(_OWORD *)(a3 + 248);
    long long v13 = *(_OWORD *)(a3 + 264);
    long long v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 23std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 264) = v13;
    *(_OWORD *)(a2 + 28std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v14;
    *(_OWORD *)(a2 + 248) = v12;
    long long v16 = *(_OWORD *)(a3 + 312);
    long long v15 = *(_OWORD *)(a3 + 328);
    long long v17 = *(_OWORD *)(a3 + 296);
    *(void *)(a2 + 344) = *(void *)(a3 + 344);
    *(_OWORD *)(a2 + 31std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v16;
    *(_OWORD *)(a2 + 328) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 35std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    long long v18 = *(_OWORD *)(a3 + 360);
    long long v19 = *(_OWORD *)(a3 + 376);
    long long v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 408) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 39std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 36std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v18;
    long long v21 = *(_OWORD *)(a3 + 424);
    long long v22 = *(_OWORD *)(a3 + 440);
    long long v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 47std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 44std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    uint64_t v24 = *(void *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(void *)(a2 + 488) = v24;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<1ul,udif::header>(a1, a3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<1ul,udif::header>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26CF22BB8[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + 8) = 512;
  *(_DWORD *)(a1 + 1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a2 + 12);
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 6std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  long long v7 = *(_OWORD *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 20std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v7;
  long long v10 = *(_OWORD *)(a2 + 248);
  long long v11 = *(_OWORD *)(a2 + 264);
  long long v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 23std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 28std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v12;
  *(_OWORD *)(a1 + 248) = v10;
  long long v14 = *(_OWORD *)(a2 + 312);
  long long v13 = *(_OWORD *)(a2 + 328);
  long long v15 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 31std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v14;
  *(_OWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 35std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 352);
  long long v16 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 376);
  long long v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 39std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 36std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v16;
  __n128 result = *(__n128 *)(a2 + 424);
  long long v20 = *(_OWORD *)(a2 + 440);
  long long v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 47std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 44std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(void *)(a1 + 49std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 492);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<2ul,di_asif::header>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26CF22BB8[v4])(&v9, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a2 + 12);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 6std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 7std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(void *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<3ul,raw_header>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26CF22BB8[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void ***std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<4ul,pstack_header,pstack_header>(uint64_t a1, void ***a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 504) != 4) {
    return (void ***)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<4ul,pstack_header>(a1, a3);
  }
  long long v3 = (void **)*a3;
  *a3 = 0;
  return std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](a2, v3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<4ul,pstack_header>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26CF22BB8[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 5)
  {
    long long v5 = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    char v6 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    char v7 = (void **)(a2 + 16);
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*v7);
    }
    long long v8 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a3 + 32);
    *(_OWORD *)char v7 = v8;
    *(unsigned char *)(a3 + 39) = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<5ul,plugin_header>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<5ul,plugin_header>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26CF22BB8[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  long long v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1122ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF22DC8;
  di_log::logger_buf<di_log::log_printer<1122ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1122ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E292B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1122ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1122;
    __int16 v22 = 2082;
    long long v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1122;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + 1) = 110;
  int v4 = 16;
  di_log::logger<di_log::log_printer<1134ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x223C24910](&v7);
  __n128 result = std::generic_category();
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_21E292DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf((uint64_t)va);
  MEMORY[0x223C24910](v4 + 368);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>(void **a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif (**a1 + 24);
}

void sub_21E293120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (LOBYTE(STACK[0x430])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif ((Backend **)(**(void **)a1 + 24), (uint64_t)v11);
  if (!v13) {
    goto LABEL_4;
  }
  if (v12 != 2) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (di_asif::header::operator==((uint64_t)v11, a2)) {
LABEL_4:
  }
    operator new();
  *(void *)&long long v6 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = di_asif::header]";
  *((void *)&v6 + 1) = 110;
  int v7 = 16;
  di_log::logger<di_log::log_printer<1153ul>>::logger(v8, &v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Diskimageuio: ASIF header changed while unlocked", 48);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf((uint64_t)v8);
  MEMORY[0x223C24910](&v10);
  __n128 result = std::generic_category();
  *(void *)a3 = 35;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  if (v13) {
    return (const std::error_category *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
  }
  return result;
}

void sub_21E29337C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (LOBYTE(STACK[0x430])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw((const Backend **)(**(void **)a1 + 24), *a2, (uint64_t)v11);
  if (!v13) {
    goto LABEL_6;
  }
  if (v12 != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v11[0] == *a2 && v11[1] == a2[1]) {
LABEL_6:
  }
    operator new();
  *(void *)&long long v6 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = raw_header]";
  *((void *)&v6 + 1) = 110;
  int v7 = 16;
  di_log::logger<di_log::log_printer<1139ul>>::logger(v8, &v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Diskimageuio: Raw header changed while unlocked", 47);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf((uint64_t)v8);
  MEMORY[0x223C24910](&v10);
  __n128 result = std::generic_category();
  *(void *)a3 = 35;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  if (v13) {
    return (const std::error_category *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
  }
  return result;
}

void sub_21E293574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (LOBYTE(STACK[0x430])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>(diskimage_uio::details::diskimage_open_params_impl ****a1@<X1>, uint64_t a2@<X8>)
{
  long long v38 = 0uLL;
  v39[0] = 0;
  long long v3 = **a1;
  uint64_t v4 = (int *)(*a1)[1];
  if (v3 == (diskimage_uio::details::diskimage_open_params_impl **)v4)
  {
    uint64_t v25 = 0;
    uint64_t v24 = 0;
LABEL_26:
    if (v25 - v24 == 16)
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format(*(const std::error_category **)(v24 + 8), (uint64_t)&v36);
      LODWORD(v3std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 12;
      v31.i8[8] = 1;
      BOOL v26 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v36, (uint64_t)&v30);
      uint64_t v24 = v38;
      if (v26)
      {
        if (*(_DWORD *)v38)
        {
          *(void *)&long long v36 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = pstack_header]";
          *((void *)&v36 + 1) = 110;
          int v37 = 16;
          di_log::logger<di_log::log_printer<1170ul>>::logger(&v30, &v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Diskimageuio: Single element in pstack that isn't an image", 58);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf((uint64_t)&v30);
          MEMORY[0x223C24910](v35);
          uint64_t v27 = std::generic_category();
          *(void *)a2 = 22;
          *(void *)(a2 + 8) = v27;
          *(unsigned char *)(a2 + 16) = 0;
          goto LABEL_33;
        }
        diskimage_uio::details::diskimage_impl::diskimage_impl(&v30, (const std::error_category **)(v38 + 8));
LABEL_32:
        *(void *)a2 = v31.i64[0];
        *(unsigned char *)(a2 + 16) = 1;
        goto LABEL_33;
      }
      uint64_t v25 = *((void *)&v38 + 1);
    }
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(&v30, v24, v25);
    goto LABEL_32;
  }
  while (1)
  {
    diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr((uint64_t *)&v36, v3[1]);
    int v5 = v37;
    if ((_BYTE)v37)
    {
      int v6 = *(_DWORD *)v3;
      LODWORD(v28) = *(_DWORD *)v3;
      int v7 = v3[1];
      *((void *)&v28 + 1) = v7;
      v3[1] = 0;
      uint64_t v8 = *((void *)&v38 + 1);
      if (*((void *)&v38 + 1) >= v39[0])
      {
        uint64_t v10 = (uint64_t)(*((void *)&v38 + 1) - v38) >> 4;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          std::vector<iovec>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v39[0] - v38;
        if ((uint64_t)(v39[0] - v38) >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        unint64_t v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v11;
        uint64_t v33 = v39;
        uint64_t v14 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)v39, v13);
        long long v16 = &v14[16 * v10];
        *(_DWORD *)long long v16 = v28;
        *((void *)v16 + 1) = *((void *)&v28 + 1);
        *((void *)&v28 + 1) = 0;
        uint64_t v17 = *((void *)&v38 + 1);
        uint64_t v18 = v38;
        if (*((void *)&v38 + 1) == (void)v38)
        {
          int64x2_t v21 = vdupq_n_s64(*((unint64_t *)&v38 + 1));
          uint64_t v19 = &v14[16 * v10];
        }
        else
        {
          uint64_t v19 = &v14[16 * v10];
          do
          {
            int v20 = *(_DWORD *)(v17 - 16);
            v17 -= 16;
            *((_DWORD *)v19 - 4) = v20;
            v19 -= 16;
            *((void *)v19 + 1) = *(void *)(v17 + 8);
            *(void *)(v17 + 8) = 0;
          }
          while (v17 != v18);
          int64x2_t v21 = (int64x2_t)v38;
        }
        uint64_t v9 = v16 + 16;
        *(void *)&long long v38 = v19;
        *((void *)&v38 + 1) = v16 + 16;
        int64x2_t v31 = v21;
        uint64_t v22 = v39[0];
        v39[0] = &v14[16 * v15];
        uint64_t v32 = v22;
        uint64_t v30 = v21.i64[0];
        std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&v30);
      }
      else
      {
        **((_DWORD **)&v38 + 1) = v6;
        *(void *)(v8 + 8) = v7;
        uint64_t v9 = (char *)(v8 + 16);
        *((void *)&v28 + 1) = 0;
      }
      *((void *)&v38 + 1) = v9;
      diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)((char *)&v28 + 8));
    }
    else
    {
      *(void *)&long long v28 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = pstack_header]";
      *((void *)&v28 + 1) = 110;
      int v29 = 16;
      di_log::logger<di_log::log_printer<1162ul>>::logger(&v30, &v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Diskimageuio: Invalid pstack element", 36);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf((uint64_t)&v30);
      MEMORY[0x223C24910](v35);
      *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v36);
      *(unsigned char *)(a2 + 16) = 0;
    }
    if ((_BYTE)v37)
    {
      uint64_t v23 = v36;
      *(void *)&long long v36 = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      }
    }
    if (!v5) {
      break;
    }
    v3 += 2;
    if (v3 == (diskimage_uio::details::diskimage_open_params_impl **)v4)
    {
      uint64_t v25 = *((void *)&v38 + 1);
      uint64_t v24 = v38;
      goto LABEL_26;
    }
  }
LABEL_33:
  *(void *)&long long v36 = &v38;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_21E293950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)__cxa_begin_catch(a1);
    *(unsigned char *)(v13 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x21E293904);
  }
  *(void *)(v14 - 136) = v14 - 112;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 136));
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>()
{
}

void sub_21E293AB8(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10B3C402F18E594);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<1134ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1134ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF22E80;
  a1[45] = &unk_26CF22F80;
  a1[46] = &unk_26CF22FA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF22E80;
  a1[45] = &unk_26CF22F08;
  a1[46] = &unk_26CF22F30;
  return a1;
}

void sub_21E293BDC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF23018;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E293CC0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF23018;
  di_log::logger_buf<di_log::log_printer<1134ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1134ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1134ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E294238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1134ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1134;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1134;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif (uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  UDIF_header::UDIF_header(&v23, a1);
  long long v1 = *(_OWORD *)(v23 + 32);
  long long v20 = *(_OWORD *)(v23 + 16);
  long long v21 = v1;
  uint64_t v22 = *(void *)(v23 + 48);
  long long v2 = *(_OWORD *)(v23 + 64);
  long long v3 = *(_OWORD *)(v23 + 88);
  long long v4 = *(_OWORD *)(v23 + 104);
  long long v5 = *(_OWORD *)(v23 + 136);
  long long v43 = *(_OWORD *)(v23 + 120);
  long long v44 = v5;
  long long v41 = v3;
  long long v42 = v4;
  long long v6 = *(_OWORD *)(v23 + 152);
  long long v7 = *(_OWORD *)(v23 + 168);
  long long v8 = *(_OWORD *)(v23 + 184);
  long long v48 = *(_OWORD *)(v23 + 200);
  long long v49 = v2;
  long long v46 = v7;
  long long v47 = v8;
  long long v45 = v6;
  long long v9 = *(_OWORD *)(v23 + 216);
  long long v10 = *(_OWORD *)(v23 + 232);
  long long v11 = *(_OWORD *)(v23 + 264);
  long long v12 = *(_OWORD *)(v23 + 280);
  long long v34 = *(_OWORD *)(v23 + 248);
  long long v35 = v11;
  long long v32 = v9;
  long long v33 = v10;
  long long v13 = *(_OWORD *)(v23 + 296);
  long long v14 = *(_OWORD *)(v23 + 312);
  long long v15 = *(_OWORD *)(v23 + 328);
  uint64_t v40 = *(void *)(v23 + 344);
  long long v38 = v14;
  long long v39 = v15;
  long long v36 = v12;
  long long v37 = v13;
  long long v16 = *(_OWORD *)(v23 + 440);
  long long v28 = *(_OWORD *)(v23 + 424);
  long long v29 = v16;
  long long v17 = *(_OWORD *)(v23 + 472);
  long long v30 = *(_OWORD *)(v23 + 456);
  long long v31 = v17;
  long long v18 = *(_OWORD *)(v23 + 376);
  long long v24 = *(_OWORD *)(v23 + 360);
  long long v25 = v18;
  long long v19 = *(_OWORD *)(v23 + 408);
  long long v26 = *(_OWORD *)(v23 + 392);
  long long v27 = v19;
  operator new();
}

void sub_21E294804(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x258]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
    if (a4) {
      (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    UDIF_header::~UDIF_header((UDIF_header *)va);
    long long v12 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v12);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<1146ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1146ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF23410;
  a1[45] = &unk_26CF23510;
  a1[46] = &unk_26CF23538;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF23410;
  a1[45] = &unk_26CF23498;
  a1[46] = &unk_26CF234C0;
  return a1;
}

void sub_21E294A1C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(diskimage_uio::details::diskimage_open_params_impl *this)
{
}

void sub_21E294AB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      long long v3 = __cxa_begin_catch(a1);
      *(void *)&long long v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((void *)&v5 + 1) = 146;
      int v6 = 16;
      di_log::logger<di_log::log_printer<393ul>>::logger(v8, &v5);
      operator<<(&v9, (uint64_t)v3);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf((uint64_t)v8);
      MEMORY[0x223C24910](&v10);
      *(void *)uint64_t v2 = make_error_code(161);
      *(void *)(v2 + 8) = v4;
      *(unsigned char *)(v2 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
      goto LABEL_7;
    }
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  int v7 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)&v5);
  int v11 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(v2, (uint64_t)v8);
  *(_DWORD *)(v2 + 51std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v11;
  *(unsigned char *)(v2 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_21E294CB0(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 504);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26CF22BB8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 504) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 504);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26CF231A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 2003069043;
  *(void *)(a2 + 4) = *(void *)(a3 + 4);
  *(_DWORD *)(a2 + 1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a3 + 12);
  __n128 result = *(__n128 *)(a3 + 16);
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 6std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a3 + 62);
  *(_OWORD *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 7std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(void *)(a2 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a3 + 72);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 16);
  *(void *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(void *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a3 + 16) = 0;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26CF22BB8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

void *di_log::logger<di_log::log_printer<393ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<393ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF231F0;
  a1[45] = &unk_26CF232F0;
  a1[46] = &unk_26CF23318;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF231F0;
  a1[45] = &unk_26CF23278;
  a1[46] = &unk_26CF232A0;
  return a1;
}

void sub_21E294F48(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF23388;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29502C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF23388;
  di_log::logger_buf<di_log::log_printer<393ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<393ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<393ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2955A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<393ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 393;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 393;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

BOOL udif::header::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24)
    || *(void *)(a1 + 32) != *(void *)(a2 + 32)
    || *(void *)(a1 + 40) != *(void *)(a2 + 40)
    || *(void *)(a1 + 48) != *(void *)(a2 + 48)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)
    || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
  {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    int v5 = *(unsigned __int8 *)(a1 + 64 + v4);
    int v6 = *(unsigned __int8 *)(a2 + 64 + v4);
    BOOL v7 = v5 != v6 || v4++ == 15;
  }
  while (!v7);
  if (v5 != v6) {
    return 0;
  }
  BOOL result = udif::details::checksum::operator==((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  if (!result) {
    return result;
  }
  if (*(void *)(a1 + 216) != *(void *)(a2 + 216) || *(void *)(a1 + 224) != *(void *)(a2 + 224)) {
    return 0;
  }
  uint64_t v9 = 0;
  do
  {
    int v10 = *(unsigned __int8 *)(a1 + 232 + v9);
    int v11 = *(unsigned __int8 *)(a2 + 232 + v9);
    if (v10 != v11) {
      break;
    }
    BOOL v7 = v9++ == 63;
  }
  while (!v7);
  if (v10 != v11 || *(void *)(a1 + 296) != *(void *)(a2 + 296) || *(void *)(a1 + 304) != *(void *)(a2 + 304)) {
    return 0;
  }
  uint64_t v12 = 0;
  do
  {
    int v13 = *(unsigned __int8 *)(a1 + 312 + v12);
    int v14 = *(unsigned __int8 *)(a2 + 312 + v12);
    if (v13 != v14) {
      break;
    }
    BOOL v7 = v12++ == 39;
  }
  while (!v7);
  if (v13 != v14) {
    return 0;
  }
  BOOL result = udif::details::checksum::operator==((_DWORD *)(a1 + 352), (_DWORD *)(a2 + 352));
  if (!result) {
    return result;
  }
  return *(_DWORD *)(a1 + 488) == *(_DWORD *)(a2 + 488) && *(void *)(a1 + 492) == *(void *)(a2 + 492);
}

BOOL udif::details::checksum::operator==(_DWORD *a1, _DWORD *a2)
{
  if (*a1 == *a2 && (unint64_t v2 = a1[1], v2 == a2[1])) {
    return memcmp(a1 + 2, a2 + 2, v2 >> 3) == 0;
  }
  else {
    return 0;
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF235A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E295A7C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF235A8;
  di_log::logger_buf<di_log::log_printer<1146ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1146ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1146ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E295FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1146ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1146;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1146;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif@<X0>(Backend **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  di_asif::header::header((di_asif::header *)v4, *a1);
  int v10 = 2003069043;
  uint64_t v11 = *(void *)&v4[4];
  int v12 = v5;
  long long v13 = v6;
  long long v14 = v7;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v8;
  *(void *)&v15[14] = *(void *)&v8[14];
  __int16 v16 = 0;
  uint64_t v17 = v9;
  int v18 = 2;
  int v19 = 8;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v10);
  *(_DWORD *)(a2 + 51std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v19;
  *(unsigned char *)(a2 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v10);
}

void sub_21E2962E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a19);
    uint64_t v20 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(exception_object);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v20);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<1153ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1153ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF23630;
  a1[45] = &unk_26CF23730;
  a1[46] = &unk_26CF23758;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF23630;
  a1[45] = &unk_26CF236B8;
  a1[46] = &unk_26CF236E0;
  return a1;
}

void sub_21E296440(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  return a1;
}

BOOL di_asif::header::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    int v3 = *(unsigned __int8 *)(a1 + 32 + v2);
    int v4 = *(unsigned __int8 *)(a2 + 32 + v2);
  }
  while (v3 == v4 && v2++ != 15);
  return v3 == v4
      && *(void *)(a1 + 48) == *(void *)(a2 + 48)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(unsigned __int16 *)(a1 + 68) == *(unsigned __int16 *)(a2 + 68)
      && *(unsigned __int16 *)(a1 + 70) == *(unsigned __int16 *)(a2 + 70)
      && *(void *)(a1 + 72) == *(void *)(a2 + 72);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF237C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29661C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF237C8;
  di_log::logger_buf<di_log::log_printer<1153ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1153ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1153ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E296B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1153ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1153;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1153;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw@<X0>(const Backend **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  raw_header::raw_header((raw_header *)&v5, *a1, a2);
  v6[0] = v5;
  int v7 = 3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v6);
  int v9 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)v8);
  *(_DWORD *)(a3 + 51std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v9;
  *(unsigned char *)(a3 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
}

void sub_21E296E5C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x210]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
    long long v5 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v5);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<1139ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1139ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF23850;
  a1[45] = &unk_26CF23950;
  a1[46] = &unk_26CF23978;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF23850;
  a1[45] = &unk_26CF238D8;
  a1[46] = &unk_26CF23900;
  return a1;
}

void sub_21E296FD0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  return a1;
}

void raw_header::raw_header(raw_header *this, const Backend *a2, unint64_t a3)
{
  unint64_t v5 = (*(uint64_t (**)(const Backend *))(*(void *)a2 + 40))(a2);
  unint64_t v6 = 512;
  if (a3) {
    unint64_t v6 = a3;
  }
  if (v5 % v6)
  {
    exception = (header_exception *)__cxa_allocate_exception(0x40uLL);
    header_exception::header_exception(exception, "raw_header", 0x16u);
  }
  *(void *)this = v6;
  *((void *)this + 1) = v5 / v6;
}

void sub_21E2970E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF239E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E297170(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF239E8;
  di_log::logger_buf<di_log::log_printer<1139ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1139ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1139ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2976E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1139ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1139;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1139;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<1162ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1162ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF23A70;
  a1[45] = &unk_26CF23B70;
  a1[46] = &unk_26CF23B98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF23A70;
  a1[45] = &unk_26CF23AF8;
  a1[46] = &unk_26CF23B20;
  return a1;
}

void sub_21E2979F8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1170ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1170ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF23CD0;
  a1[45] = &unk_26CF23DD0;
  a1[46] = &unk_26CF23DF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF23CD0;
  a1[45] = &unk_26CF23D58;
  a1[46] = &unk_26CF23D80;
  return a1;
}

void sub_21E297B60(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF23C08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E297C44(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF23C08;
  di_log::logger_buf<di_log::log_printer<1162ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1162ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1162ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2981BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1162ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1162;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1162;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

BOOL diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) != 0) != (*(unsigned char *)(a2 + 16) != 0)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v4 = *(_DWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(a1);
    return v4 == *(_DWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(a2);
  }
  else
  {
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(a1);
    uint64_t v7 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(a2);
    return *(void *)(v6 + 8) == *(void *)(v7 + 8) && *(_DWORD *)v6 == *(_DWORD *)v7;
  }
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(uint64_t result)
{
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t v1 = (long long *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    long long v3 = *v1;
    *(void *)exception = &unk_26CF23CA0;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::bad_expected_access<std::error_code>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF23E68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29858C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF23E68;
  di_log::logger_buf<di_log::log_printer<1170ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1170ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1170ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E298B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1170ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1170;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1170;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

void *diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CF228A8;
  a1[1] = 0;
  if (a2 == a3)
  {
    *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__"
                      "wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v52 + 1) = 54;
    LODWORD(v53) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v54, &v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: No diskimage given", 32);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v54);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157);
    exception[1] = v42;
  }
  int v50 = *(_DWORD *)a2;
  long long v51 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  char v6 = v51;
  *(void *)(a2 + 8) = 0;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v6);
  uint64_t v7 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &lpsrc);
    uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
    if (!v50)
    {
      *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v52 + 1) = 54;
      LODWORD(v53) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v54, &v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot", 93);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v54);
      long long v43 = __cxa_allocate_exception(0x10uLL);
      *long long v43 = make_error_code(163);
      v43[1] = v44;
    }
    uint64_t v9 = v8;
    long long v52 = 0uLL;
    unint64_t v53 = 0;
    uint64_t v10 = lpsrc;
    if (v50 == 1)
    {
      lpsrc = 0;
      long long v54 = v10;
      LODWORD(v55) = 2;
    }
    else
    {
      int v14 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
      if (v50 == 3) {
        int v15 = v14;
      }
      else {
        int v15 = 0;
      }
      __int16 v16 = lpsrc;
      if (v15 == 1 && lpsrc != 0)
      {
        if (v18) {
          v18[184] = 0;
        }
      }
      uint64_t v19 = *((void *)&v52 + 1);
      lpsrc = 0;
      long long v54 = v16;
      LODWORD(v55) = v15 ^ 1;
      if (*((void *)&v52 + 1) < v53)
      {
        **((void **)&v52 + 1) = v16;
        if (v16) {
          operator new();
        }
        *(void *)(v19 + 8) = 0;
        long long v54 = 0;
        *(_DWORD *)(v19 + 16) = v55;
        *((void *)&v52 + 1) = v19 + 24;
        goto LABEL_25;
      }
    }
    uint64_t v20 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v52, (uint64_t)&v54);
    uint64_t v21 = v54;
    *((void *)&v52 + 1) = v20;
    long long v54 = 0;
    if (v21) {
      (*(void (**)(void *))(*(void *)v21 + 16))(v21);
    }
LABEL_25:
    int v22 = v50;
    BOOL v23 = v50 == 1;
    while (1)
    {
      int v50 = *(_DWORD *)v7;
      diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v51, (uint64_t *)(v7 + 8));
      diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v51);
      diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v51, (uint64_t)v47);
      if (!v48)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1028ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Can't get image format", 36);
        di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v54);
        long long v34 = __cxa_allocate_exception(0x10uLL);
        _OWORD *v34 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v47);
      }
      diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &v54);
      uint64_t v24 = (uint64_t *)v54;
      long long v54 = 0;
      long long v25 = lpsrc;
      lpsrc = v24;
      if (v25)
      {
        (*(void (**)(void *))(*(void *)v25 + 16))(v25);
        long long v26 = v54;
        long long v54 = 0;
        if (v26) {
          (*(void (**)(void *))(*(void *)v26 + 16))(v26);
        }
        uint64_t v24 = (uint64_t *)lpsrc;
      }
      uint64_t v27 = *v24;
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1035ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Nested stacking is not allowed.", 45);
        di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v54);
        goto LABEL_64;
      }
      if ((*(uint64_t (**)(uint64_t *))(v27 + 24))(v24) != v9)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1040ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Multiple images given but block size differ. ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" block_size: ", 13);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" / ", 3);
        (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
        std::ostream::operator<<();
        di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v54);
LABEL_64:
        uint64_t v35 = 163;
LABEL_65:
        long long v36 = __cxa_allocate_exception(0x10uLL);
        void *v36 = make_error_code(v35);
        v36[1] = v37;
      }
      v7 += 16;
      if (v7 == a3) {
        break;
      }
      if (v47[0] != 8)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1056ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ", 48);
        long long v38 = diskimage_uio::operator<<(v58, v47[0]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" instead", 8);
        di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v54);
        goto LABEL_64;
      }
      if (v50 != 1)
      {
        if (v50 != 2)
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1063ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ", 109);
          diskimage_uio::operator<<(v58, v50);
          di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v54);
LABEL_71:
          long long v39 = __cxa_allocate_exception(0x10uLL);
          void *v39 = make_error_code(163);
          v39[1] = v40;
        }
        if ((*(unsigned int (**)(void *))(*(void *)lpsrc + 40))(lpsrc))
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1068ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Snapshots should be read only", 43);
          di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v54);
          goto LABEL_71;
        }
LABEL_41:
        int v28 = 1;
        goto LABEL_45;
      }
      if (v23)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1074ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Only single cache is allowed", 42);
        di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v54);
        goto LABEL_71;
      }
      if (v22 == 2)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1079ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Snapshot detected on top of cache", 47);
        di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v54);
        goto LABEL_71;
      }
      BOOL v23 = 1;
      int v28 = 2;
LABEL_45:
      if (v47[0] != 12)
      {
        (*(void (**)(void **__return_ptr))(*(void *)lpsrc + 72))(&v54);
        if (v54 || v55 || v56 || v57)
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1089ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
          di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v54);
          uint64_t v35 = 164;
          goto LABEL_65;
        }
      }
      long long v29 = lpsrc;
      lpsrc = 0;
      long long v54 = v29;
      LODWORD(v55) = v28;
      uint64_t v30 = *((void *)&v52 + 1);
      if (*((void *)&v52 + 1) >= v53)
      {
        uint64_t v31 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v52, (uint64_t)&v54);
        long long v32 = v54;
        *((void *)&v52 + 1) = v31;
        long long v54 = 0;
        if (v32) {
          (*(void (**)(void *))(*(void *)v32 + 16))(v32);
        }
      }
      else
      {
        **((void **)&v52 + 1) = v29;
        if (v29) {
          operator new();
        }
        *(void *)(v30 + 8) = 0;
        long long v54 = 0;
        *(_DWORD *)(v30 + 16) = v55;
        *((void *)&v52 + 1) = v30 + 24;
      }
      if (v7 == a3) {
        operator new();
      }
    }
    if (v50)
    {
      *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v59 + 1) = 54;
      int v60 = 16;
      di_log::logger<di_log::log_printer<1048ul>>::logger(&v54, &v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ", 59);
      diskimage_uio::operator<<(v58, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" given", 6);
      di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v54);
      goto LABEL_64;
    }
    (*(void (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
    goto LABEL_41;
  }
  if (v50)
  {
    *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__"
                      "wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v52 + 1) = 54;
    LODWORD(v53) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v54, &v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v58, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v54);
    long long v45 = __cxa_allocate_exception(0x10uLL);
    long long v46 = std::generic_category();
    void *v45 = 22;
    v45[1] = v46;
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &v54);
  uint64_t v11 = v54;
  long long v54 = 0;
  uint64_t v12 = a1[1];
  a1[1] = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = v54;
    long long v54 = 0;
    if (v13) {
      (*(void (**)(void *))(*(void *)v13 + 16))(v13);
    }
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v51);
  return a1;
}

void sub_21E299994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  int v22 = a20;
  a20 = 0;
  if (v22) {
    (*((void (**)(void **))*v22 + 2))(v22);
  }
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  _Unwind_Resume(a1);
}

void sub_21E2999A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)va);
  JUMPOUT(0x21E299C70);
}

void sub_21E299A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2 == 1)
  {
    uint64_t v66 = __cxa_begin_catch(a1);
    *(void *)&a11 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__"
                      "wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&a11 + 1) = 54;
    a12 = 16;
    di_log::logger<di_log::log_printer<1101ul>>::logger(&a19, &a11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a64, (uint64_t)"Diskimageuio: Can't create stackable image: ", 44);
    operator<<(&a64, (uint64_t)v66);
    di_log::logger<di_log::log_printer<1101ul>>::~logger((uint64_t)&a19);
    exception = __cxa_allocate_exception(0x10uLL);
    int v68 = v66[2];
    uint64_t v69 = std::generic_category();
    *(_DWORD *)exception = v68;
    exception[1] = v69;
  }
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v70 = a13;
  a13 = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v64);
  uint64_t v71 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
  }
  _Unwind_Resume(a1);
}

void sub_21E299A1C()
{
}

void sub_21E299A24()
{
}

void sub_21E299A2C()
{
  MEMORY[0x223C249A0](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x21E299A4CLL);
}

void sub_21E299AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  __cxa_end_catch();
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299B08(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21E299CD8);
}

void sub_21E299B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  __cxa_free_exception(v21);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  _Unwind_Resume(a1);
}

void sub_21E299B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E299BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 16))(a20);
  }
  JUMPOUT(0x21E299C5CLL);
}

void sub_21E299BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<978ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<978ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF23EF0;
  a1[45] = &unk_26CF23FF0;
  a1[46] = &unk_26CF24018;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF23EF0;
  a1[45] = &unk_26CF23F78;
  a1[46] = &unk_26CF23FA0;
  return a1;
}

void sub_21E299DE0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required(const std::error_category *this)
{
  diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v20);
  if (!v20[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = std::make_error_code[abi:ne180100](0x16u);
    exception[1] = v6;
  }
  uint64_t v3 = this[3].__vftable;
  uint64_t v2 = (uint64_t *)&this[3];
  if (v3)
  {
    get_sink_backend((uint64_t)v2, &v14);
    std::dynamic_pointer_cast[abi:ne180100]<LockableResource,Backend>(&v14, &v18);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v18 && ((*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18) & 1) == 0)
    {
      int v4 = (**(uint64_t (***)(void *))v18)(v18);
      if (v4)
      {
        int v9 = v4;
        *(void *)&long long v12 = "diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required()";
        *((void *)&v12 + 1) = 76;
        int v13 = 16;
        di_log::logger<di_log::log_printer<957ul>>::logger(&v14, &v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Diskimageuio: Couldn't lock backend ", 36);
        operator<<((uint64_t)&v16, *v2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" err: ", 6);
        int v10 = v9;
        uint64_t v11 = std::generic_category();
        std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v14, (uint64_t)&v10);
        di_log::logger<di_log::log_printer<957ul>>::~logger((uint64_t)&v14);
        uint64_t v7 = __cxa_allocate_exception(0x10uLL);
        uint64_t v8 = std::generic_category();
        *(_DWORD *)uint64_t v7 = v9;
        v7[1] = v8;
      }
      *(void *)&long long v12 = "diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required()";
      *((void *)&v12 + 1) = 76;
      int v13 = 2;
      di_log::logger<di_log::log_printer<960ul>>::logger(&v14, &v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Diskimageuio: locked backend ", 29);
      operator<<((uint64_t)&v16, *v2);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf((uint64_t)&v14);
      MEMORY[0x223C24910](&v17);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
}

void sub_21E29A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  di_log::logger<di_log::log_printer<957ul>>::~logger((uint64_t)va);
  int v9 = *(std::__shared_weak_count **)(v7 - 64);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<989ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<989ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24770;
  a1[45] = &unk_26CF24870;
  a1[46] = &unk_26CF24898;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24770;
  a1[45] = &unk_26CF247F8;
  a1[46] = &unk_26CF24820;
  return a1;
}

void sub_21E29A1BC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1002ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1002ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24990;
  a1[45] = &unk_26CF24A90;
  a1[46] = &unk_26CF24AB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24990;
  a1[45] = &unk_26CF24A18;
  a1[46] = &unk_26CF24A40;
  return a1;
}

void sub_21E29A324(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1028ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1028ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24BB0;
  a1[45] = &unk_26CF24CB0;
  a1[46] = &unk_26CF24CD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24BB0;
  a1[45] = &unk_26CF24C38;
  a1[46] = &unk_26CF24C60;
  return a1;
}

void sub_21E29A48C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1035ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1035ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24DD0;
  a1[45] = &unk_26CF24ED0;
  a1[46] = &unk_26CF24EF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24DD0;
  a1[45] = &unk_26CF24E58;
  a1[46] = &unk_26CF24E80;
  return a1;
}

void sub_21E29A5F4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1040ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1040ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24FF0;
  a1[45] = &unk_26CF250F0;
  a1[46] = &unk_26CF25118;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24FF0;
  a1[45] = &unk_26CF25078;
  a1[46] = &unk_26CF250A0;
  return a1;
}

void sub_21E29A75C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1048ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1048ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF25210;
  a1[45] = &unk_26CF25310;
  a1[46] = &unk_26CF25338;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF25210;
  a1[45] = &unk_26CF25298;
  a1[46] = &unk_26CF252C0;
  return a1;
}

void sub_21E29A8C4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1056ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1056ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF25430;
  a1[45] = &unk_26CF25530;
  a1[46] = &unk_26CF25558;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF25430;
  a1[45] = &unk_26CF254B8;
  a1[46] = &unk_26CF254E0;
  return a1;
}

void sub_21E29AA2C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1063ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1063ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF25650;
  a1[45] = &unk_26CF25750;
  a1[46] = &unk_26CF25778;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF25650;
  a1[45] = &unk_26CF256D8;
  a1[46] = &unk_26CF25700;
  return a1;
}

void sub_21E29AB94(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1068ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1068ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF25870;
  a1[45] = &unk_26CF25970;
  a1[46] = &unk_26CF25998;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF25870;
  a1[45] = &unk_26CF258F8;
  a1[46] = &unk_26CF25920;
  return a1;
}

void sub_21E29ACFC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1074ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1074ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF25A90;
  a1[45] = &unk_26CF25B90;
  a1[46] = &unk_26CF25BB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF25A90;
  a1[45] = &unk_26CF25B18;
  a1[46] = &unk_26CF25B40;
  return a1;
}

void sub_21E29AE64(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1079ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1079ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF25CB0;
  a1[45] = &unk_26CF25DB0;
  a1[46] = &unk_26CF25DD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF25CB0;
  a1[45] = &unk_26CF25D38;
  a1[46] = &unk_26CF25D60;
  return a1;
}

void sub_21E29AFCC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1089ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1089ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF25ED0;
  a1[45] = &unk_26CF25FD0;
  a1[46] = &unk_26CF25FF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF25ED0;
  a1[45] = &unk_26CF25F58;
  a1[46] = &unk_26CF25F80;
  return a1;
}

void sub_21E29B134(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1101ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1101ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF260F0;
  a1[45] = &unk_26CF261F0;
  a1[46] = &unk_26CF26218;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF260F0;
  a1[45] = &unk_26CF26178;
  a1[46] = &unk_26CF261A0;
  return a1;
}

void sub_21E29B29C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF24088;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29B380(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF24088;
  di_log::logger_buf<di_log::log_printer<978ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<978ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<978ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29B8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<978ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 978;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 978;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::verify_backend@<X0>(const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  if (LODWORD(this[70].__vftable) == 12 || this[3].__vftable)
  {
    *(unsigned char *)a2 = 0;
    char v3 = 1;
  }
  else
  {
    *(void *)&long long v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((void *)&v4 + 1) = 81;
    int v5 = 16;
    di_log::logger<di_log::log_printer<617ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Diskimageuio: backend doesn't exist", 35);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
    this = std::generic_category();
    char v3 = 0;
    *(void *)a2 = 6;
    *(void *)(a2 + 8) = this;
  }
  *(unsigned char *)(a2 + 16) = v3;
  return this;
}

void sub_21E29BBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<617ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>(uint64_t a1, uint64_t a2)
{
  char v3 = (void *)(a1 + 360);
  long long v4 = (const char *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  size_t v5 = strlen(v4);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  char v8 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  std::ostream::operator<<();
  return a1;
}

void *di_log::logger<di_log::log_printer<957ul>>::logger(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<957ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24330;
  a1[45] = &unk_26CF24430;
  a1[46] = &unk_26CF24458;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24330;
  a1[45] = &unk_26CF243B8;
  a1[46] = &unk_26CF243E0;
  return a1;
}

void sub_21E29BD78(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<960ul>>::logger(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<960ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24550;
  a1[45] = &unk_26CF24650;
  a1[46] = &unk_26CF24678;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24550;
  a1[45] = &unk_26CF245D8;
  a1[46] = &unk_26CF24600;
  return a1;
}

void sub_21E29BEE0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<617ul>>::logger(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<617ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF24110;
  a1[45] = &unk_26CF24210;
  a1[46] = &unk_26CF24238;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF24110;
  a1[45] = &unk_26CF24198;
  a1[46] = &unk_26CF241C0;
  return a1;
}

void sub_21E29C048(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF242A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29C12C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF242A8;
  di_log::logger_buf<di_log::log_printer<617ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<617ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<617ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29C6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<617ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 617;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 617;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF244C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29C930(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF244C8;
  di_log::logger_buf<di_log::log_printer<957ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<957ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<957ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29CEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<957ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 957;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 957;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF246E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29D134(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF246E8;
  di_log::logger_buf<di_log::log_printer<960ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<960ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<960ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29D6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<960ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 960;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 960;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF24908;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29D938(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF24908;
  di_log::logger_buf<di_log::log_printer<989ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<989ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<989ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29DEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<989ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 989;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 989;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF24B28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29E13C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF24B28;
  di_log::logger_buf<di_log::log_printer<1002ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1002ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1002ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29E6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1002ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1002;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1002;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = (uint64_t *)&v10[24 * v4];
  int v15 = v14;
  uint64_t v16 = &v10[24 * v9];
  *((_DWORD *)std::shared_ptr<DiskImage>::shared_ptr[abi:ne180100]<DiskImage,std::default_delete<DiskImage>,void>(v14, (uint64_t *)a2)+ 4) = *(_DWORD *)(a2 + 8);
  v15 += 3;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer(&v13);
  return v11;
}

void sub_21E29E9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<DiskImage>::shared_ptr[abi:ne180100]<DiskImage,std::default_delete<DiskImage>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *BOOL result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF24D48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29EAD0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF24D48;
  di_log::logger_buf<di_log::log_printer<1028ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1028ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1028ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29F048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1028ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1028;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1028;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF24F68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29F2D4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF24F68;
  di_log::logger_buf<di_log::log_printer<1035ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1035ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1035ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E29F84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1035ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1035;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1035;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF25188;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E29FAD8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF25188;
  di_log::logger_buf<di_log::log_printer<1040ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1040ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1040ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A0050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1040ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1040;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1040;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF253A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A02DC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF253A8;
  di_log::logger_buf<di_log::log_printer<1048ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1048ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1048ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A0854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1048ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1048;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1048;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF255C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A0AE0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF255C8;
  di_log::logger_buf<di_log::log_printer<1056ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1056ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1056ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A1058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1056ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1056;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1056;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF257E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A12E4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF257E8;
  di_log::logger_buf<di_log::log_printer<1063ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1063ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1063ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1063ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1063;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1063;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF25A08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A1AE8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF25A08;
  di_log::logger_buf<di_log::log_printer<1068ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1068ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1068ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A2060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1068ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1068;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1068;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF25C28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A22EC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF25C28;
  di_log::logger_buf<di_log::log_printer<1074ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1074ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1074ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A2864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1074ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1074;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1074;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF25E48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A2AF0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF25E48;
  di_log::logger_buf<di_log::log_printer<1079ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1079ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1079ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A3068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1079ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1079;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1079;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26068;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A32F4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26068;
  di_log::logger_buf<di_log::log_printer<1089ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1089ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1089ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A386C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1089ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1089;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1089;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26288;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A3AF8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26288;
  di_log::logger_buf<di_log::log_printer<1101ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1101ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1101ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A4070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1101ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1101;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1101;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

void diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(diskimage_uio::details::extents_iterator_impl *this, const diskimage_uio::details::extents_iterator_impl *a2)
{
}

void sub_21E2A430C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<DiskImage::const_extents_iterator_t>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::details::extents_iterator_impl::make_val@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)this + 8);
  int v3 = *(_DWORD *)(*(void *)this + 32);
  if ((v3 - 1) >= 3) {
    int v3 = 0;
  }
  uint64_t v4 = (*(unsigned char *)(*(void *)this + 24) & 1) + *(void *)(*(void *)this + 16);
  if ((*(unsigned char *)(*(void *)this + 24) & 2) == 0) {
    ++v2;
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  return this;
}

void std::default_delete<DiskImage::const_extents_iterator_t>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    }
    JUMPOUT(0x223C249A0);
  }
}

void diskimage_uio::details::extents_db_impl::extents_db_impl(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  operator new();
}

void sub_21E2A44C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE7__cloneEv()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26CF26308;
  return result;
}

void _ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF26308;
}

void *_ZNSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEEclES5_Oy@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  BOOL result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 128))(&v4);
  *a2 = v4;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN9DiskImage9extents_t17interface_factoryMUlRKS0_yE_E)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE11target_typeEv()
{
  return &_ZTIN9DiskImage9extents_t17interface_factoryMUlRKS0_yE_E;
}

void *std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100]((void *)(a2 + 56));
    uint64_t v3 = *(void *)(a2 + 32);
    *(void *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    JUMPOUT(0x223C249A0);
  }
}

uint64_t DiskImage::extents_t::begin@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator()((uint64_t)this + 56, (uint64_t)this, *((void *)this + 1));
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a2, &v5, *((_DWORD *)this + 12));
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_21E2A4794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    diskimage_uio::details::extents_db_impl::begin();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t DiskImage::const_extents_iterator_t::const_extents_iterator_t(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *(void *)(a1 + 8) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  char v6 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = a3;
  DiskImage::const_extents_iterator_t::make_val((DiskImage::const_extents_iterator_t *)a1, (uint64_t)v8);
  *char v6 = v8[0];
  *(_OWORD *)((char *)v6 + 1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_21E2A4878(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    diskimage_uio::details::extents_db_impl::begin();
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  diskimage_uio::details::extents_iterator_impl::make_val(a1, (uint64_t)&v6);
  *uint64_t v4 = v6;
  *(_DWORD *)(a1 + 24) = v7;
  return a1;
}

void sub_21E2A48F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<DiskImage::const_extents_iterator_t>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DiskImage::extents_t::end@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator()((uint64_t)this + 56, (uint64_t)this, *((void *)this + 2));
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a2, &v5, *((_DWORD *)this + 12));
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_21E2A4994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    diskimage_uio::details::extents_db_impl::begin();
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<573ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<573ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF263A0;
  a1[45] = &unk_26CF264A0;
  a1[46] = &unk_26CF264C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF263A0;
  a1[45] = &unk_26CF26428;
  a1[46] = &unk_26CF26450;
  return a1;
}

void sub_21E2A4AB0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  return a1;
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::open_and_resolve@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    unint64_t v9 = *(std::__shared_weak_count **)(a1 + 584);
    *(_OWORD *)(a1 + 576) = 0u;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    int v10 = *(std::__shared_weak_count **)(a1 + 600);
    *(void *)(a1 + 59std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    *(void *)(a1 + 60std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 616);
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 616) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v30 = *(std::string *)a1;
    }
    v28[0] = 2 * ((a2 - 1) < 2);
    std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,std::string,int,void>((uint64_t)&v30, v28, &v24);
    long long v12 = v24;
    long long v24 = 0uLL;
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v12;
    if (v13)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (*((void *)&v24 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)(a1 + 568) = a2;
    operator new();
  }
  diskimage_uio::details::diskimage_open_params_impl::is_locked((const std::error_category *)a1, (BOOL *)v28);
  if (!v29)
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v24 + 1) = 83;
    int v25 = 16;
    di_log::logger<di_log::log_printer<534ul>>::logger(&v30, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Diskimageuio: Couldn't get locked status ", 41);
    uint64_t v16 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v28);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v30, v16);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x223C24910](v32);
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v28);
    *(_OWORD *)a4 = *result;
    goto LABEL_24;
  }
  if (LOBYTE(v28[0]))
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v24 + 1) = 83;
    int v25 = 16;
    di_log::logger<di_log::log_printer<565ul>>::logger(&v30, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Diskimageuio: decryption key missing", 36);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x223C24910](v32);
    uint64_t result = (_OWORD *)make_error_code(162);
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v15;
LABEL_24:
    *(unsigned char *)(a4 + 16) = 0;
    return result;
  }
  *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((void *)&v24 + 1) = 83;
  int v25 = 2;
  di_log::logger<di_log::log_printer<539ul>>::logger(&v30, &v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Diskimageuio: backend isn't locked", 34);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf((uint64_t)&v30);
  MEMORY[0x223C24910](v32);
  diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header((Backend **)a1, 0, (uint64_t)&v30);
  if (v33)
  {
    uint64_t v17 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value((uint64_t)&v30);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(a1 + 48, v17);
    *(_DWORD *)(a1 + 56std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_DWORD *)(v17 + 512);
    *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v22 + 1) = 83;
    int v23 = 2;
    di_log::logger<di_log::log_printer<561ul>>::logger(&v24, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Diskimageuio: resolved disk image format ", 41);
    diskimage_uio::operator<<(&v26, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf((uint64_t)&v24);
    uint64_t result = (_OWORD *)MEMORY[0x223C24910](v27);
    *(unsigned char *)a4 = 0;
    char v18 = 1;
  }
  else
  {
    int v19 = *(_DWORD *)(a1 + 564);
    if (v19)
    {
      if (*(_DWORD *)(a1 + 568) != v19)
      {
        __int16 v20 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)&v30);
        uint64_t v21 = std::generic_category();
        *(void *)&long long v24 = 35;
        *((void *)&v24 + 1) = v21;
        if ((*(unsigned int (**)(void, void, long long *))(**((void **)v20 + 1) + 32))(*((void *)v20 + 1), *v20, &v24)|| (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v24 + 1) + 40))(*((void *)&v24 + 1), v20, v24))
        {
          *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v22 + 1) = 83;
          int v23 = 2;
          di_log::logger<di_log::log_printer<545ul>>::logger(&v24, &v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(&v26, *(_DWORD *)(a1 + 564));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(&v26, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v24);
          MEMORY[0x223C24910](v27);
          if (a3)
          {
            *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((void *)&v22 + 1) = 83;
            int v23 = 2;
            di_log::logger<di_log::log_printer<551ul>>::logger(&v24, &v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Diskimageuio: reopen backend to required mode ", 46);
            diskimage_uio::operator<<(&v26, *(_DWORD *)(a1 + 564));
            di_log::logger<di_log::log_printer<551ul>>::~logger((uint64_t)&v24);
            uint64_t result = (_OWORD *)diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(a1, *(unsigned int *)(a1 + 564), 0);
            goto LABEL_37;
          }
          *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v22 + 1) = 83;
          int v23 = 16;
          di_log::logger<di_log::log_printer<554ul>>::logger(&v24, &v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(&v26, *(_DWORD *)(a1 + 564));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(&v26, *(_DWORD *)(a1 + 568));
          di_log::logger<di_log::log_printer<554ul>>::~logger((uint64_t)&v24);
        }
      }
    }
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)&v30);
    char v18 = 0;
    *(_OWORD *)a4 = *result;
  }
  *(unsigned char *)(a4 + 16) = v18;
LABEL_37:
  if (v33) {
    return (_OWORD *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
  }
  return result;
}

void sub_21E2A50FC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x458])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x250]);
  }
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26538;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A52FC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26538;
  di_log::logger_buf<di_log::log_printer<573ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<573ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<573ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A5874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<573ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 573;
    __int16 v22 = 2082;
    int v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 573;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t(diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *this)
{
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *di_log::logger<di_log::log_printer<534ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<534ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF265C0;
  a1[45] = &unk_26CF266C0;
  a1[46] = &unk_26CF266E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF265C0;
  a1[45] = &unk_26CF26648;
  a1[46] = &unk_26CF26670;
  return a1;
}

void sub_21E2A5BCC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<539ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<539ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF267E0;
  a1[45] = &unk_26CF268E0;
  a1[46] = &unk_26CF26908;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF267E0;
  a1[45] = &unk_26CF26868;
  a1[46] = &unk_26CF26890;
  return a1;
}

void sub_21E2A5D34(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  return a1;
}

double diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header@<D0>(Backend **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(0, this + 3, *((_DWORD *)this + 141) == 0, (uint64_t)this, a2, (uint64_t)v23);
  if (v25)
  {
    uint64_t v5 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value((uint64_t)v23);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v19, v5);
    unsigned int v22 = *(_DWORD *)(v5 + 512);
    BOOL v6 = v22 > 0xB || ((1 << v22) & 0x982) == 0;
    if (v6 || *((_DWORD *)this + 142) || !*((_DWORD *)this + 141))
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v14, (uint64_t)v19);
      unsigned int v18 = v22;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)&v14);
      *(_DWORD *)(a3 + 51std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v18;
      *(unsigned char *)(a3 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
    }
    else
    {
      *(void *)&long long v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((void *)&v12 + 1) = 107;
      int v13 = 2;
      di_log::logger<di_log::log_printer<503ul>>::logger(&v14, &v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Diskimageuio: Required read-write disk image (", 46);
      int v10 = diskimage_uio::operator<<(&v16, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf((uint64_t)&v14);
      MEMORY[0x223C24910](&v17);
      uint64_t v11 = std::generic_category();
      *(void *)a3 = 35;
      *(void *)(a3 + 8) = v11;
      *(unsigned char *)(a3 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v19);
  }
  else
  {
    *(void *)&long long v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((void *)&v14 + 1) = 107;
    int v15 = 16;
    di_log::logger<di_log::log_printer<495ul>>::logger(v19, &v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Diskimageuio: Couldn't get diskimage: ", 38);
    uint64_t v8 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)v23);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v19, v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x223C24910](&v21);
    *(unsigned char *)a3 = 0;
    int v9 = v25;
    *(unsigned char *)(a3 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v25;
    if (!v9)
    {
      double result = v23[0];
      *(_OWORD *)a3 = *(_OWORD *)v23;
      return result;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)v23);
    *(_DWORD *)(a3 + 51std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v24;
  }
  if (v25) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v23);
  }
  return result;
}

void sub_21E2A6008(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x630])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x428]);
  }
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100](unsigned int *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void, void, uint64_t))(**((void **)a1 + 1) + 32))(*((void *)a1 + 1), *a1, a2))return 1; {
  int v4 = *(uint64_t (**)(void))(**(void **)(a2 + 8) + 40);
  }
  return v4();
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error(uint64_t result)
{
  if (*(unsigned char *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CF1F460;
  }
  return result;
}

void *di_log::logger<di_log::log_printer<551ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<551ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF27060;
  a1[45] = &unk_26CF27160;
  a1[46] = &unk_26CF27188;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF27060;
  a1[45] = &unk_26CF270E8;
  a1[46] = &unk_26CF27110;
  return a1;
}

void sub_21E2A6278(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<554ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<554ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF27280;
  a1[45] = &unk_26CF27380;
  a1[46] = &unk_26CF273A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF27280;
  a1[45] = &unk_26CF27308;
  a1[46] = &unk_26CF27330;
  return a1;
}

void sub_21E2A63E0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value(uint64_t result)
{
  if (!*(unsigned char *)(result + 520))
  {
    uint64_t v1 = (long long *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    long long v3 = *v1;
    *(void *)exception = &unk_26CF23CA0;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

void *di_log::logger<di_log::log_printer<561ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<561ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF274A0;
  a1[45] = &unk_26CF275A0;
  a1[46] = &unk_26CF275C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF274A0;
  a1[45] = &unk_26CF27528;
  a1[46] = &unk_26CF27550;
  return a1;
}

void sub_21E2A65B8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<565ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<565ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF276C0;
  a1[45] = &unk_26CF277C0;
  a1[46] = &unk_26CF277E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF276C0;
  a1[45] = &unk_26CF27748;
  a1[46] = &unk_26CF27770;
  return a1;
}

void sub_21E2A6720(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  return a1;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,std::string,int,void>(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<std::string,int,std::allocator<FileLocal>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E2A67F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<std::string,int,std::allocator<FileLocal>,0>(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  int v4 = *a3;
  int v5 = FileDescriptorWrapper::open_file(a2, *a3);
  FileLocal::FileLocal((FileLocal *)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_21E2A6870(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26758;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A6900(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26758;
  di_log::logger_buf<di_log::log_printer<534ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<534ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<534ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A6E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<534ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 534;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 534;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26978;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A7104(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26978;
  di_log::logger_buf<di_log::log_printer<539ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<539ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<539ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A767C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<539ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 539;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 539;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr@<X0>(int a1@<W0>, Backend **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      uint64_t v13 = 1;
      break;
    case 1:
      goto LABEL_19;
    case 2:
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif ((uint64_t)a2);
    case 7:
    case 9:
    case 12:
      int v19 = 0;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v20, (uint64_t)&v18);
      int v23 = 0;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a6, (uint64_t)v20);
      *(_DWORD *)(a6 + 51std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v23;
      *(unsigned char *)(a6 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v18);
    case 8:
      return diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif (a2, a6);
    case 11:
      if (*(char *)(a4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string v18 = *(std::string *)a4;
      }
      pstack_header::pstack_header(&v17, (const void **)a2, (char *)&v18, a3);
    default:
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      v18.__r_.__value_.__l.__size_ = 132;
      LODWORD(v18.__r_.__value_.__r.__words[2]) = 16;
      di_log::logger<di_log::log_printer<485ul>>::logger(v20, (long long *)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Diskimageuio: Unsupported image format", 38);
      diskimage_uio::operator<<(&v21, a1);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf((uint64_t)v20);
      MEMORY[0x223C24910](&v22);
      uint64_t result = make_error_code(161);
      *(void *)a6 = result;
      *(void *)(a6 + 8) = v16;
      *(unsigned char *)(a6 + 52std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
      return result;
  }
  do
  {
    int v14 = 2;
    if ((v13 - 2) >= 5)
    {
      if (v13 == 1) {
        goto LABEL_18;
      }
      if (v13 == 10) {
        int v14 = 2;
      }
      else {
        int v14 = v13;
      }
    }
    if (v13 == v14)
    {
      uint64_t result = diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(v13, a2, a3, a4, a5);
      if (!*(unsigned char *)(a6 + 520)) {
        return result;
      }
      uint64_t result = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value(a6);
      int v15 = *(_DWORD *)(result + 512);
      if (v15 || !*(unsigned char *)(a6 + 520))
      {
        if (v15) {
          return result;
        }
      }
      else
      {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(a6);
      }
    }
LABEL_18:
    uint64_t v13 = (v13 + 1);
  }
  while (v13 != 13);
LABEL_19:
  return diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw((const Backend **)a2, a5, a6);
}

void sub_21E2A7C04(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unsigned __int8 v2 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v2);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<495ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<495ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF26C20;
  a1[45] = &unk_26CF26D20;
  a1[46] = &unk_26CF26D48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF26C20;
  a1[45] = &unk_26CF26CA8;
  a1[46] = &unk_26CF26CD0;
  return a1;
}

void sub_21E2A7E04(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<503ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<503ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF26E40;
  a1[45] = &unk_26CF26F40;
  a1[46] = &unk_26CF26F68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF26E40;
  a1[45] = &unk_26CF26EC8;
  a1[46] = &unk_26CF26EF0;
  return a1;
}

void sub_21E2A7F6C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<485ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<485ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF26A00;
  a1[45] = &unk_26CF26B00;
  a1[46] = &unk_26CF26B28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF26A00;
  a1[45] = &unk_26CF26A88;
  a1[46] = &unk_26CF26AB0;
  return a1;
}

void sub_21E2A80D4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26B98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A81B8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26B98;
  di_log::logger_buf<di_log::log_printer<485ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<485ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<485ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A8730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<485ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 485;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 485;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26DB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A89BC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26DB8;
  di_log::logger_buf<di_log::log_printer<495ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<495ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<495ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A8F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<495ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 495;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 495;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF26FD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A91C0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF26FD8;
  di_log::logger_buf<di_log::log_printer<503ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<503ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<503ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A9738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<503ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 503;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 503;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF271F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2A99C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF271F8;
  di_log::logger_buf<di_log::log_printer<551ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<551ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<551ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2A9F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<551ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 551;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 551;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF27418;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2AA1C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF27418;
  di_log::logger_buf<di_log::log_printer<554ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<554ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<554ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AA740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<554ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 554;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 554;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF27638;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2AA9CC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF27638;
  di_log::logger_buf<di_log::log_printer<561ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<561ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<561ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AAF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<561ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 561;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 561;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF27858;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2AB1D0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF27858;
  di_log::logger_buf<di_log::log_printer<565ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<565ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<565ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AB748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<565ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 565;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 565;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>::operator=[abi:ne180100]<plugin_header,0,plugin_header,5ul,0>(uint64_t a1, uint64_t a2)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<610ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<610ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF278E0;
  a1[45] = &unk_26CF279E0;
  a1[46] = &unk_26CF27A08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF278E0;
  a1[45] = &unk_26CF27968;
  a1[46] = &unk_26CF27990;
  return a1;
}

void sub_21E2ABA8C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF27A78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ABB70(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF27A78;
  di_log::logger_buf<di_log::log_printer<610ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<610ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<610ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AC0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<610ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 610;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 610;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,int,BOOL &,void>(int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,int,BOOL &,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E2AC370(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,int,BOOL &,std::allocator<FileLocal>,0>(void *a1, int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_21E2AC3E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t crypto::format_serializer::encode(void (**a1)(void, const char *, void, uint64_t), void *a2)
{
  (*a1)(a1, "crypto_hdr", a2[6], 76);
  (*a1)(a1, "enc_keys", *a2, a2[1] - *a2);
  int v4 = (uint64_t (*)(void (**)(void, const char *, void, uint64_t), const char *))*a1;
  return v4(a1, "prng_keys");
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::decode_buffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  __src = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void **))a1)(a1, a2, &__src);
  int v10 = __src;
  if (__src) {
    BOOL v11 = v9 <= 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    goto LABEL_8;
  }
  if (v9 != a4)
  {
    (*(void (**)(void *))(a1 + 16))(__src);
LABEL_8:
    uint64_t result = std::generic_category();
    char v13 = 0;
    *(void *)a5 = 22;
    *(void *)(a5 + 8) = result;
    goto LABEL_9;
  }
  memcpy(a3, __src, a4);
  uint64_t result = (const std::error_category *)(*(uint64_t (**)(void *))(a1 + 16))(v10);
  *(unsigned char *)a5 = 0;
  char v13 = 1;
LABEL_9:
  *(unsigned char *)(a5 + 16) = v13;
  return result;
}

void crypto::format_serializer::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  crypto::header_serializer::decode((uint64_t (**)(void, const char *, char **))a1, (uint64_t)v14);
  if (!v14[80])
  {
    *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v14);
LABEL_9:
    *(unsigned char *)(a2 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    return;
  }
  char v13 = 0;
  int64_t v4 = (*(uint64_t (**)(uint64_t, const char *, const void **))a1)(a1, "enc_keys", &v13);
  if (!v13 || v4 <= 0)
  {
    char v6 = std::generic_category();
    *(void *)a2 = 22;
    *(void *)(a2 + 8) = v6;
    goto LABEL_9;
  }
  int v10 = 0;
  BOOL v11 = 0;
  uint64_t v12 = 0;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v10, v13, (uint64_t)v13 + v4, v4);
  (*(void (**)(const void *))(a1 + 16))(v13);
  uint64_t v9 = 0;
  int64_t v5 = (*(uint64_t (**)(uint64_t, const char *, const void **))a1)(a1, "prng_keys", &v9);
  if (v9 && v5 > 0)
  {
    memset(v8, 0, sizeof(v8));
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(v8, v9, (uint64_t)v9 + v5, v5);
    (*(void (**)(const void *))(a1 + 16))(v9);
    operator new();
  }
  uint64_t v7 = std::generic_category();
  *(void *)a2 = 22;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  if (v10)
  {
    BOOL v11 = v10;
    operator delete(v10);
  }
}

void sub_21E2AC7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  crypto::keys::~keys((crypto::keys *)&a19);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  long long v32 = *(void **)(v30 - 160);
  if (v32)
  {
    *(void *)(v30 - 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::format,std::error_code>::error(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CF1F460;
  }
  return result;
}

void std::make_shared[abi:ne180100]<crypto::format,crypto::format,void>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = operator new(0x60uLL);
  v4[1] = 0;
  void v4[2] = 0;
  *int64_t v4 = &unk_26CF20F58;
  std::construct_at[abi:ne180100]<crypto::format,crypto::format,crypto::format*>((uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
}

const std::error_category *crypto::header_serializer::decode@<X0>(uint64_t (**a1)(void, const char *, char **)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  uint64_t v3 = (*a1)(a1, "crypto_hdr", &v8);
  int64_t v4 = v8;
  if (v8) {
    BOOL v5 = v3 <= 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = std::generic_category();
    *(void *)a2 = 2;
    *(void *)(a2 + 8) = result;
    *(unsigned char *)(a2 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  }
  else
  {
    if (v3 == 76)
    {
      crypto::header::header((crypto::header *)v9, v8);
      *(void *)a2 = 0x6173646372636E65;
      *(_OWORD *)(a2 + 8) = v10;
      *(void *)(a2 + 24) = v11;
      *(_DWORD *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v12;
      *(_OWORD *)(a2 + 36) = v13;
      *(_OWORD *)(a2 + 5std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v14;
      *(void *)(a2 + 68) = v15;
      *(unsigned char *)(a2 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 1;
    }
    else
    {
      uint64_t v7 = std::generic_category();
      *(void *)a2 = 22;
      *(void *)(a2 + 8) = v7;
      *(unsigned char *)(a2 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    }
    return (const std::error_category *)MEMORY[0x223C24980](v4, 0x1000C8077774924);
  }
  return result;
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error(uint64_t result)
{
  if (*(unsigned char *)(result + 80))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26CF1F460;
  }
  return result;
}

void std::make_unique[abi:ne180100]<crypto::header,crypto::header>()
{
}

void *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    uint64_t result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E2ACBB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>(int *a1@<X1>, BOOL *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  size_t v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL,BOOL,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E2ACC4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL,BOOL,std::allocator<FileLocal>,0>(void *a1, int *a2, BOOL *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_21E2ACCB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double std::construct_at[abi:ne180100]<crypto::format,crypto::format,crypto::format*>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
  *(_OWORD *)(a1 + 48) = v3;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return result;
}

void *diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(void *a1, void *a2, uint64_t *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  a1[3] = v5;
  a1[2] = v6;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  int v10 = 0;
  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,void>((uint64_t)a1, (uint64_t)(a1 + 2), &v10, &v11);
  long long v7 = v11;
  long long v11 = 0uLL;
  size_t v8 = (std::__shared_weak_count *)a1[5];
  *((_OWORD *)a1 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  return a1;
}

void sub_21E2ACDE0(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(v3, v2);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  size_t v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E2ACE7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216A0;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_21E2ACED8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  v9[1] = *MEMORY[0x263EF8340];
  int v8 = *a4;
  v9[0] = 0x200000001;
  smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", v8, (int *)v9, 2);
  crypto_format_backend::crypto_format_backend(a1, a2, a3, &v8);
  return a1;
}

std::string *diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(std::string *this, long long *a2, int a3, uint64_t a4)
{
  v16[1] = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[23].__r_.__value_.__l.__data_) = 0;
  LODWORD(this[23].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[0] = 0;
  HIDWORD(this[23].__r_.__value_.__r.__words[1]) = a3;
  LODWORD(this[23].__r_.__value_.__r.__words[2]) = a3;
  *(_OWORD *)&this[24].__r_.__value_.__l.__data_ = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_OWORD *)&this[24].__r_.__value_.__r.__words[2] = *(_OWORD *)(a4 + 16);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(_OWORD *)&this[25].__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 32);
  *(void *)(a4 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a4 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  std::string::size_type size = this[25].__r_.__value_.__l.__size_;
  std::string::size_type v9 = this[25].__r_.__value_.__r.__words[2];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = (std::__shared_weak_count *)this[1].__r_.__value_.__l.__size_;
  this[1].__r_.__value_.__r.__words[0] = size;
  this[1].__r_.__value_.__l.__size_ = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, this[23].__r_.__value_.__r.__words[2], 0, (uint64_t)v15);
  if (!v15[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
  }
  if (LODWORD(this[23].__r_.__value_.__r.__words[1]) == 8)
  {
    std::string::pointer data = this[1].__r_.__value_.__l.__data_;
    long long v11 = (std::__shared_weak_count *)this[1].__r_.__value_.__l.__size_;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v16[0] = 0x200000001;
    smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", 2, (int *)v16, 2);
    *((_DWORD *)data + 48) = 2;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return this;
}

void sub_21E2AD130(_Unwind_Exception *a1)
{
  long long v3 = v2;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)(v1 + 576));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 40);
  *(void *)(v1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  if (v5) {
    MEMORY[0x223C249A0](v5, 0x1000C4015A9971DLL);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

std::string *diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(std::string *this, long long *a2, std::string::size_type *a3, int a4, int a5, std::string::size_type *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  this[1].__r_.__value_.__r.__words[0] = *a3;
  std::string::size_type v12 = a3[1];
  this[1].__r_.__value_.__l.__size_ = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v13 = *a6;
  *a6 = 0;
  this[1].__r_.__value_.__r.__words[2] = v13;
  LODWORD(this[23].__r_.__value_.__l.__data_) = 0;
  LODWORD(this[23].__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(this[23].__r_.__value_.__r.__words[1]) = a5;
  LODWORD(this[23].__r_.__value_.__r.__words[2]) = a4;
  *(_OWORD *)&this[24].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[24].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[25].__r_.__value_.__r.__words[1] = 0u;
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, a4, 1, (uint64_t)v16);
  if (!v16[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v16);
  }
  return this;
}

void sub_21E2AD2C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)(v1 + 576));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)(v1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  if (v4) {
    MEMORY[0x223C249A0](v4, 0x1000C4015A9971DLL);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 32);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  uint64_t v5 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v5;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 48, (uint64_t)(a2 + 3));
  uint64_t v6 = *((void *)a2 + 70);
  *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
  *(void *)(a1 + 56std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v6;
  *(_OWORD *)(a1 + 576) = a2[36];
  a2[36] = 0u;
  *(_OWORD *)(a1 + 59std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = a2[37];
  *((void *)a2 + 75) = 0;
  *((void *)a2 + 74) = 0;
  *(_OWORD *)(a1 + 608) = a2[38];
  *((void *)a2 + 77) = 0;
  *((void *)a2 + 76) = 0;
  return a1;
}

void sub_21E2AD3E0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)(v1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  if (v4) {
    MEMORY[0x223C249A0](v4, 0x1000C4015A9971DLL);
  }
  diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(v2, v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 616);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 600);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 584);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  if (v5) {
    MEMORY[0x223C249A0](v5, 0x1000C4015A9971DLL);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v7 = *(void **)a1;
    operator delete(v7);
  }
}

unsigned char *diskimage_uio::details::diskimage_open_params_impl::validate_unlocked@<X0>(const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl::is_locked(this, v12);
  if (v12[16])
  {
    double result = (unsigned char *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value((uint64_t)v12);
    if (*result)
    {
      *(void *)&long long v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((void *)&v7 + 1) = 84;
      int v8 = 16;
      di_log::logger<di_log::log_printer<650ul>>::logger(v9, &v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Diskimageuio: image is locked", 29);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x223C24910](v11);
      double result = (unsigned char *)make_error_code(162);
      char v4 = 0;
      *(void *)a2 = result;
      *(void *)(a2 + 8) = v5;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      char v4 = 1;
    }
  }
  else
  {
    *(void *)&long long v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((void *)&v7 + 1) = 84;
    int v8 = 16;
    di_log::logger<di_log::log_printer<645ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Diskimageuio: can't get lock status ", 36);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v9, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x223C24910](v11);
    double result = (unsigned char *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

void sub_21E2AD618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<650ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<660ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<660ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF27F40;
  a1[45] = &unk_26CF28040;
  a1[46] = &unk_26CF28068;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF27F40;
  a1[45] = &unk_26CF27FC8;
  a1[46] = &unk_26CF27FF0;
  return a1;
}

void sub_21E2AD73C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<645ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<645ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF27B00;
  a1[45] = &unk_26CF27C00;
  a1[46] = &unk_26CF27C28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF27B00;
  a1[45] = &unk_26CF27B88;
  a1[46] = &unk_26CF27BB0;
  return a1;
}

void sub_21E2AD8A4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<650ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<650ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF27D20;
  a1[45] = &unk_26CF27E20;
  a1[46] = &unk_26CF27E48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF27D20;
  a1[45] = &unk_26CF27DA8;
  a1[46] = &unk_26CF27DD0;
  return a1;
}

void sub_21E2ADA0C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF27C98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ADAF0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF27C98;
  di_log::logger_buf<di_log::log_printer<645ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<645ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<645ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AE068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<645ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 645;
    __int16 v22 = 2082;
    int v23 = v8;
    std::string::size_type v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 645;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF27EB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2AE2F4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF27EB8;
  di_log::logger_buf<di_log::log_printer<650ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<650ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<650ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AE86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<650ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 650;
    __int16 v22 = 2082;
    int v23 = v8;
    std::string::size_type v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 650;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF280D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2AEAF8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF280D8;
  di_log::logger_buf<di_log::log_printer<660ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<660ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<660ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AF070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<660ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 660;
    __int16 v22 = 2082;
    int v23 = v8;
    std::string::size_type v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 660;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<671ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<671ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF28160;
  a1[45] = &unk_26CF28260;
  a1[46] = &unk_26CF28288;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF28160;
  a1[45] = &unk_26CF281E8;
  a1[46] = &unk_26CF28210;
  return a1;
}

void sub_21E2AF380(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF282F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2AF464(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF282F8;
  di_log::logger_buf<di_log::log_printer<671ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<671ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<671ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2AF9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<671ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 671;
    __int16 v22 = 2082;
    int v23 = v8;
    std::string::size_type v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 671;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "hdr_get_block_size(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + 1) = 70;
  int v4 = 16;
  di_log::logger<di_log::log_printer<100ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x223C24910](&v7);
  double result = std::generic_category();
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_21E2AFC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf((uint64_t)va);
  MEMORY[0x223C24910](v4 + 368);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X8>)
{
  *(void *)a1 = 512;
  *(unsigned char *)(a1 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(unsigned __int16 *)(a1 + 68);
  *(unsigned char *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *a1;
  *(unsigned char *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl::get_block_size(*(const std::error_category **)(*(void *)(*(void *)a1 + 8) - 8), &v3);
  *(void *)a2 = v3.n128_u64[0];
  *(unsigned char *)(a2 + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 8))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void *di_log::logger<di_log::log_printer<100ul>>::logger(void *a1, long long *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<100ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF283B0;
  a1[45] = &unk_26CF284B0;
  a1[46] = &unk_26CF284D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF283B0;
  a1[45] = &unk_26CF28438;
  a1[46] = &unk_26CF28460;
  return a1;
}

void sub_21E2AFE78(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF28548;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2AFF5C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF28548;
  di_log::logger_buf<di_log::log_printer<100ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<100ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<100ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B04D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<100ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 100;
    __int16 v22 = 2082;
    int v23 = v8;
    std::string::size_type v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 100;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<681ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<681ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF285D0;
  a1[45] = &unk_26CF286D0;
  a1[46] = &unk_26CF286F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF285D0;
  a1[45] = &unk_26CF28658;
  a1[46] = &unk_26CF28680;
  return a1;
}

void sub_21E2B07E4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF28768;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B08C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF28768;
  di_log::logger_buf<di_log::log_printer<681ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<681ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<681ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B0E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<681ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 681;
    __int16 v22 = 2082;
    int v23 = v8;
    std::string::size_type v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 681;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + 1) = 69;
  int v4 = 16;
  di_log::logger<di_log::log_printer<112ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x223C24910](&v7);
  uint64_t result = std::generic_category();
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_21E2B10F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf((uint64_t)va);
  MEMORY[0x223C24910](v4 + 368);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 492);
  *(unsigned char *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 48);
  *(unsigned char *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks(*(const std::error_category **)(*(void *)(*(void *)a1 + 8) - 8), &v3);
  *(void *)a2 = v3.n128_u64[0];
  *(unsigned char *)(a2 + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 16))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void *di_log::logger<di_log::log_printer<112ul>>::logger(void *a1, long long *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<112ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF28820;
  a1[45] = &unk_26CF28920;
  a1[46] = &unk_26CF28948;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF28820;
  a1[45] = &unk_26CF288A8;
  a1[46] = &unk_26CF288D0;
  return a1;
}

void sub_21E2B12E0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF289B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B13C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF289B8;
  di_log::logger_buf<di_log::log_printer<112ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<112ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<112ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<112ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 112;
    __int16 v22 = 2082;
    int v23 = v8;
    std::string::size_type v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 112;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<741ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<741ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF28A40;
  a1[45] = &unk_26CF28B40;
  a1[46] = &unk_26CF28B68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF28A40;
  a1[45] = &unk_26CF28AC8;
  a1[46] = &unk_26CF28AF0;
  return a1;
}

void sub_21E2B1C4C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<745ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<745ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF28C60;
  a1[45] = &unk_26CF28D60;
  a1[46] = &unk_26CF28D88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF28C60;
  a1[45] = &unk_26CF28CE8;
  a1[46] = &unk_26CF28D10;
  return a1;
}

void sub_21E2B1DB4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<751ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<751ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF28E80;
  a1[45] = &unk_26CF28F80;
  a1[46] = &unk_26CF28FA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF28E80;
  a1[45] = &unk_26CF28F08;
  a1[46] = &unk_26CF28F30;
  return a1;
}

void sub_21E2B1F1C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<755ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<755ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF290A0;
  a1[45] = &unk_26CF291A0;
  a1[46] = &unk_26CF291C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF290A0;
  a1[45] = &unk_26CF29128;
  a1[46] = &unk_26CF29150;
  return a1;
}

void sub_21E2B2084(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<764ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<764ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF292C0;
  a1[45] = &unk_26CF293C0;
  a1[46] = &unk_26CF293E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF292C0;
  a1[45] = &unk_26CF29348;
  a1[46] = &unk_26CF29370;
  return a1;
}

void sub_21E2B21EC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(diskimage_uio::details::diskimage_open_params_impl *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v25[19] = *MEMORY[0x263EF8340];
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, *((_DWORD *)this + 142), 0, (uint64_t)&v20);
  if (!v21)
  {
    if (*((_DWORD *)this + 141) == 1 && *((_DWORD *)this + 142) != 1)
    {
      uint64_t v13 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v20);
      long long v14 = std::generic_category();
      *(void *)&long long v22 = 35;
      *((void *)&v22 + 1) = v14;
      if ((*(unsigned int (**)(void, void, long long *))(**((void **)v13 + 1) + 32))(*((void *)v13 + 1), *v13, &v22)|| (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v22 + 1) + 40))(*((void *)&v22 + 1), v13, v22))
      {
        *(void *)&long long v18 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
        *((void *)&v18 + 1) = 96;
        int v19 = 2;
        di_log::logger<di_log::log_printer<698ul>>::logger(&v22, &v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Diskimageuio: required mode ", 28);
        diskimage_uio::operator<<(&v24, *((_DWORD *)this + 141));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)" is different than current mode ", 32);
        diskimage_uio::operator<<(&v24, *((_DWORD *)this + 142));
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf((uint64_t)&v22);
        MEMORY[0x223C24910](v25);
        diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, *((_DWORD *)this + 141), 0, (uint64_t)&v22);
        if (v23 && v21) {
          goto LABEL_28;
        }
        if (v23)
        {
          if (v21) {
            long long v20 = v22;
          }
          else {
            char v21 = v23;
          }
LABEL_28:
          *(void *)&long long v18 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
          *((void *)&v18 + 1) = 96;
          int v19 = 16;
          di_log::logger<di_log::log_printer<703ul>>::logger(&v22, &v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Diskimageuio: after reopening backend to read-write, it's no longer encrypted", 77);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf((uint64_t)&v22);
          goto LABEL_29;
        }
        long long v20 = v22;
        if (v21) {
          char v21 = 0;
        }
        if (a3)
        {
          diskimage_uio::details::diskimage_open_params_impl::set_passphrase(this, a2, 0);
          return;
        }
      }
    }
    *(void *)&long long v18 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((void *)&v18 + 1) = 96;
    int v19 = 16;
    di_log::logger<di_log::log_printer<714ul>>::logger(&v22, &v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Diskimageuio: couldn't resolve image while setting passphrase ", 62);
    uint64_t v10 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v20);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v22, v10);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf((uint64_t)&v22);
    MEMORY[0x223C24910](v25);
    long long v11 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v20);
LABEL_14:
    *(_OWORD *)a4 = *v11;
LABEL_30:
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }
  diskimage_uio::details::diskimage_open_params_impl::is_encrypted((const std::error_category *)this, &v18);
  if (!(_BYTE)v19)
  {
    *(void *)&long long v16 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((void *)&v16 + 1) = 96;
    int v17 = 16;
    di_log::logger<di_log::log_printer<719ul>>::logger(&v22, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Diskimageuio: can't set passphrase, can't get encrypted status ", 63);
    uint64_t v12 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v18);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v22, v12);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf((uint64_t)&v22);
    MEMORY[0x223C24910](v25);
    long long v11 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v18);
    goto LABEL_14;
  }
  if (!(_BYTE)v18)
  {
    *(void *)&long long v16 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((void *)&v16 + 1) = 96;
    int v17 = 16;
    di_log::logger<di_log::log_printer<723ul>>::logger(&v22, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Diskimageuio: can't set passphrase, image not encrypted after reopen", 68);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf((uint64_t)&v22);
LABEL_29:
    MEMORY[0x223C24910](v25);
    *(void *)a4 = make_error_code(161);
    *(void *)(a4 + 8) = v15;
    goto LABEL_30;
  }
  if (*((_DWORD *)this + 140) == 8)
  {
    uint64_t v9 = *((void *)this + 3);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v22 = 0x200000001;
    smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", 2, (int *)&v22, 2);
    *(_DWORD *)(v9 + 19std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 2;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_21E2B26D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  di_log::logger<di_log::log_printer<703ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF28BD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B27C0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF28BD8;
  di_log::logger_buf<di_log::log_printer<741ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<741ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<741ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B2D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<741ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 741;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 741;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF28DF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B2FC4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF28DF8;
  di_log::logger_buf<di_log::log_printer<745ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<745ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<745ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B353C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<745ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 745;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 745;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29018;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B37C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29018;
  di_log::logger_buf<di_log::log_printer<751ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<751ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<751ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B3D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<751ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 751;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 751;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29238;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B3FCC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29238;
  di_log::logger_buf<di_log::log_printer<755ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<755ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<755ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B4544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<755ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 755;
    __int16 v22 = 2082;
    char v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 755;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(void *)a1 = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0u;
  crypto::keys::keys(v15, *a3, a2, a4);
  std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>(&v14);
  long long v7 = v14;
  long long v14 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v14 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  int v13 = 0;
  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,void>((uint64_t)a3, a1 + 16, &v13, &v14);
  long long v9 = v14;
  long long v14 = 0uLL;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v14 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (__p)
  {
    __int16 v20 = __p;
    operator delete(__p);
  }
  uint64_t v11 = v18;
  uint64_t v18 = 0;
  if (v11) {
    MEMORY[0x223C249A0](v11, 0x1000C4015A9971DLL);
  }
  if (v16)
  {
    int v17 = v16;
    operator delete(v16);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  return a1;
}

void sub_21E2B488C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  crypto::keys::~keys((crypto::keys *)va);
  uint64_t v8 = (std::__shared_weak_count *)v6[5];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v9 = (std::__shared_weak_count *)v6[3];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v6[1];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E2B4948(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216A0;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_21E2B49A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29458;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B4A34(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29458;
  di_log::logger_buf<di_log::log_printer<764ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<764ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<764ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B4FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<764ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 764;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 764;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<698ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<698ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF294E0;
  a1[45] = &unk_26CF295E0;
  a1[46] = &unk_26CF29608;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF294E0;
  a1[45] = &unk_26CF29568;
  a1[46] = &unk_26CF29590;
  return a1;
}

void sub_21E2B52BC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<703ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<703ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF29700;
  a1[45] = &unk_26CF29800;
  a1[46] = &unk_26CF29828;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF29700;
  a1[45] = &unk_26CF29788;
  a1[46] = &unk_26CF297B0;
  return a1;
}

void sub_21E2B5424(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<714ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<714ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF29920;
  a1[45] = &unk_26CF29A20;
  a1[46] = &unk_26CF29A48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF29920;
  a1[45] = &unk_26CF299A8;
  a1[46] = &unk_26CF299D0;
  return a1;
}

void sub_21E2B558C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<719ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<719ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF29B40;
  a1[45] = &unk_26CF29C40;
  a1[46] = &unk_26CF29C68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF29B40;
  a1[45] = &unk_26CF29BC8;
  a1[46] = &unk_26CF29BF0;
  return a1;
}

void sub_21E2B56F4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<723ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<723ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF29D60;
  a1[45] = &unk_26CF29E60;
  a1[46] = &unk_26CF29E88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF29D60;
  a1[45] = &unk_26CF29DE8;
  a1[46] = &unk_26CF29E10;
  return a1;
}

void sub_21E2B585C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29678;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B5940(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29678;
  di_log::logger_buf<di_log::log_printer<698ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<698ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<698ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B5EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<698ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 698;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 698;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29898;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B6144(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29898;
  di_log::logger_buf<di_log::log_printer<703ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<703ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<703ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B66BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<703ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 703;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 703;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29AB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B6948(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29AB8;
  di_log::logger_buf<di_log::log_printer<714ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<714ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<714ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B6EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<714ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 714;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 714;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29CD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B714C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29CD8;
  di_log::logger_buf<di_log::log_printer<719ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<719ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<719ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B76C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<719ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 719;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 719;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF29EF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B7950(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF29EF8;
  di_log::logger_buf<di_log::log_printer<723ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<723ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<723ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B7EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<723ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 723;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 723;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<159ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<159ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF29F80;
  a1[45] = &unk_26CF2A080;
  a1[46] = &unk_26CF2A0A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF29F80;
  a1[45] = &unk_26CF2A008;
  a1[46] = &unk_26CF2A030;
  return a1;
}

void sub_21E2B81D8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2A118;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B82BC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2A118;
  di_log::logger_buf<di_log::log_printer<159ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<159ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<159ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B8834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<159ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 159;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 159;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<173ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<173ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2A1A0;
  a1[45] = &unk_26CF2A2A0;
  a1[46] = &unk_26CF2A2C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2A1A0;
  a1[45] = &unk_26CF2A228;
  a1[46] = &unk_26CF2A250;
  return a1;
}

void sub_21E2B8B44(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2A338;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B8C28(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2A338;
  di_log::logger_buf<di_log::log_printer<173ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<173ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<173ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2B91A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<173ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 173;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 173;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_impl::create_context_impl@<X0>(diskimage_uio::details::diskimage_impl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 136))(*((void *)this + 1));
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

di_hybrid_subscriber_t *std::unique_ptr<di_hybrid_subscriber_t>::reset[abi:ne180100](di_hybrid_subscriber_t **a1, di_hybrid_subscriber_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    di_hybrid_subscriber_t::~di_hybrid_subscriber_t(result);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

void di_hybrid_subscriber_t::~di_hybrid_subscriber_t(di_hybrid_subscriber_t *this)
{
  unsigned __int8 v2 = (NSObject **)((char *)this + 504);
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 63, &__block_literal_global_4);
  gcd::gcd_group::~gcd_group((NSObject **)this + 78);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)this + 72);
  std::mutex::~mutex((std::mutex *)this + 8);
  gcd::gcd_group::~gcd_group(v2);
  PluginRing::~PluginRing((di_hybrid_subscriber_t *)((char *)this + 304));
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__value_func[abi:ne180100]((void *)this + 31);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t((uint64_t)this + 120);
}

uint64_t *std::unique_ptr<io_rings_di_subscriber_t>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__value_func[abi:ne180100]((void *)(v2 + 248));
    pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(v2 + 120);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_1::__invoke(uint64_t *a1, uint64_t a2)
{
  io_rings_di_subscriber_t::get_ctx((io_rings_di_subscriber_t *)a1, v7);
  if (v7[1]) {
    unsigned int v4 = io_rings_parse_and_execute_sqe((uint64_t)a1, (uint64_t)v7, a2);
  }
  else {
    unsigned int v4 = -12;
  }
  uint64_t v5 = io_rings_return_status(a1[7], a2, v4, 0);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)v7);
  return v5;
}

void sub_21E2B95C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)va);
  _Unwind_Resume(a1);
}

void header_exception::~header_exception(std::exception *this)
{
  DiskImagesRuntimeException::~DiskImagesRuntimeException(this);
  JUMPOUT(0x223C249A0);
}

void ***std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x223C249A0](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF22B48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B97BC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF22DC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B984C(_Unwind_Exception *a1)
{
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>(uint64_t a1, char *__s)
{
  char v4 = (void *)(a1 + 360);
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v5);
  return a1;
}

void *di_log::logger<di_log::log_printer<1908ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1908ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2A408;
  a1[45] = &unk_26CF2A508;
  a1[46] = &unk_26CF2A530;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2A408;
  a1[45] = &unk_26CF2A490;
  a1[46] = &unk_26CF2A4B8;
  return a1;
}

void sub_21E2B99AC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1915ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1915ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2A628;
  a1[45] = &unk_26CF2A728;
  a1[46] = &unk_26CF2A750;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2A628;
  a1[45] = &unk_26CF2A6B0;
  a1[46] = &unk_26CF2A6D8;
  return a1;
}

void sub_21E2B9B14(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(void *)&long long v13 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&v13 + 1) = 77;
    int v14 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v15, &v13);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)v15, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v15);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157);
    exception[1] = v8;
  }
  if (a1 + 16 != a2) {
    operator new();
  }
  int v11 = *(_DWORD *)a1;
  int v3 = *(_DWORD *)a1;
  char v4 = *(const std::error_category **)(a1 + 8);
  os_log_type_t v12 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    *(void *)&long long v13 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&v13 + 1) = 77;
    int v14 = 16;
    di_log::logger<di_log::log_printer<1915ul>>::logger(v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v17, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v15);
    long long v9 = __cxa_allocate_exception(0x10uLL);
    uint64_t v10 = std::generic_category();
    *long long v9 = 22;
    v9[1] = v10;
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format(v4, (uint64_t)&v13);
  LODWORD(v15[0]) = 12;
  char v16 = 1;
  if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v13, (uint64_t)v15))
  {
    operator new();
  }
  diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v12, (uint64_t)&v13);
  LODWORD(v15[0]) = 11;
  char v16 = 1;
  if (!diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v13, (uint64_t)v15)|| *(void *)(*((void *)v12 + 6) + 8) - **((void **)v12 + 6) != 16)
  {
    operator new();
  }
  uint64_t v5 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>();
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v12);
  return v5;
}

void sub_21E2B9E10(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2A5A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2B9F1C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2A5A0;
  di_log::logger_buf<di_log::log_printer<1908ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1908ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1908ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2BA494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1908ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1908;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1908;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2A7C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2BA720(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2A7C0;
  di_log::logger_buf<di_log::log_printer<1915ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1915ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1915ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2BAC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1915ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1915;
    __int16 v22 = 2082;
    char v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1915;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CF228A8;
  a1[1] = 0;
  if (a2 == a3)
  {
    *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&v52 + 1) = 54;
    LODWORD(v53) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v54, &v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: No diskimage given", 32);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v54);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157);
    exception[1] = v42;
  }
  int v50 = *(_DWORD *)a2;
  long long v51 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  char v6 = v51;
  *(void *)(a2 + 8) = 0;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v6);
  uint64_t v7 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &lpsrc);
    uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
    if (!v50)
    {
      *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
      *((void *)&v52 + 1) = 54;
      LODWORD(v53) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v54, &v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot", 93);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v54);
      long long v43 = __cxa_allocate_exception(0x10uLL);
      *long long v43 = make_error_code(163);
      v43[1] = v44;
    }
    uint64_t v9 = v8;
    long long v52 = 0uLL;
    unint64_t v53 = 0;
    uint64_t v10 = lpsrc;
    if (v50 == 1)
    {
      lpsrc = 0;
      long long v54 = v10;
      LODWORD(v55) = 2;
    }
    else
    {
      int v14 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
      if (v50 == 3) {
        int v15 = v14;
      }
      else {
        int v15 = 0;
      }
      char v16 = lpsrc;
      if (v15 == 1 && lpsrc != 0)
      {
        if (v18) {
          v18[184] = 0;
        }
      }
      uint64_t v19 = *((void *)&v52 + 1);
      lpsrc = 0;
      long long v54 = v16;
      LODWORD(v55) = v15 ^ 1;
      if (*((void *)&v52 + 1) < v53)
      {
        **((void **)&v52 + 1) = v16;
        if (v16) {
          operator new();
        }
        *(void *)(v19 + 8) = 0;
        long long v54 = 0;
        *(_DWORD *)(v19 + 16) = v55;
        *((void *)&v52 + 1) = v19 + 24;
        goto LABEL_25;
      }
    }
    uint64_t v20 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v52, (uint64_t)&v54);
    uint64_t v21 = v54;
    *((void *)&v52 + 1) = v20;
    long long v54 = 0;
    if (v21) {
      (*(void (**)(void *))(*(void *)v21 + 16))(v21);
    }
LABEL_25:
    int v22 = v50;
    BOOL v23 = v50 == 1;
    while (1)
    {
      int v50 = *(_DWORD *)v7;
      diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v51, (uint64_t *)(v7 + 8));
      diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v51);
      diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v51, (uint64_t)v47);
      if (!v48)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1028ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Can't get image format", 36);
        di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v54);
        uint64_t v34 = __cxa_allocate_exception(0x10uLL);
        _OWORD *v34 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v47);
      }
      diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &v54);
      uint64_t v24 = (uint64_t *)v54;
      long long v54 = 0;
      unsigned __int8 v25 = lpsrc;
      lpsrc = v24;
      if (v25)
      {
        (*(void (**)(void *))(*(void *)v25 + 16))(v25);
        uint64_t v26 = v54;
        long long v54 = 0;
        if (v26) {
          (*(void (**)(void *))(*(void *)v26 + 16))(v26);
        }
        uint64_t v24 = (uint64_t *)lpsrc;
      }
      uint64_t v27 = *v24;
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1035ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Nested stacking is not allowed.", 45);
        di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v54);
        goto LABEL_64;
      }
      if ((*(uint64_t (**)(uint64_t *))(v27 + 24))(v24) != v9)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1040ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Multiple images given but block size differ. ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" block_size: ", 13);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" / ", 3);
        (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
        std::ostream::operator<<();
        di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v54);
LABEL_64:
        uint64_t v35 = 163;
LABEL_65:
        long long v36 = __cxa_allocate_exception(0x10uLL);
        void *v36 = make_error_code(v35);
        v36[1] = v37;
      }
      v7 += 16;
      if (v7 == a3) {
        break;
      }
      if (v47[0] != 8)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1056ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ", 48);
        long long v38 = diskimage_uio::operator<<(v58, v47[0]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" instead", 8);
        di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v54);
        goto LABEL_64;
      }
      if (v50 != 1)
      {
        if (v50 != 2)
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1063ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ", 109);
          diskimage_uio::operator<<(v58, v50);
          di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v54);
LABEL_71:
          long long v39 = __cxa_allocate_exception(0x10uLL);
          void *v39 = make_error_code(163);
          v39[1] = v40;
        }
        if ((*(unsigned int (**)(void *))(*(void *)lpsrc + 40))(lpsrc))
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1068ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Snapshots should be read only", 43);
          di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v54);
          goto LABEL_71;
        }
LABEL_41:
        int v28 = 1;
        goto LABEL_45;
      }
      if (v23)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1074ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Only single cache is allowed", 42);
        di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v54);
        goto LABEL_71;
      }
      if (v22 == 2)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1079ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Snapshot detected on top of cache", 47);
        di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v54);
        goto LABEL_71;
      }
      BOOL v23 = 1;
      int v28 = 2;
LABEL_45:
      if (v47[0] != 12)
      {
        (*(void (**)(void **__return_ptr))(*(void *)lpsrc + 72))(&v54);
        if (v54 || v55 || v56 || v57)
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1089ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
          di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v54);
          uint64_t v35 = 164;
          goto LABEL_65;
        }
      }
      char v29 = lpsrc;
      lpsrc = 0;
      long long v54 = v29;
      LODWORD(v55) = v28;
      uint64_t v30 = *((void *)&v52 + 1);
      if (*((void *)&v52 + 1) >= v53)
      {
        uint64_t v31 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v52, (uint64_t)&v54);
        long long v32 = v54;
        *((void *)&v52 + 1) = v31;
        long long v54 = 0;
        if (v32) {
          (*(void (**)(void *))(*(void *)v32 + 16))(v32);
        }
      }
      else
      {
        **((void **)&v52 + 1) = v29;
        if (v29) {
          operator new();
        }
        *(void *)(v30 + 8) = 0;
        long long v54 = 0;
        *(_DWORD *)(v30 + 16) = v55;
        *((void *)&v52 + 1) = v30 + 24;
      }
      if (v7 == a3) {
        operator new();
      }
    }
    if (v50)
    {
      *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
      *((void *)&v59 + 1) = 54;
      int v60 = 16;
      di_log::logger<di_log::log_printer<1048ul>>::logger(&v54, &v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ", 59);
      diskimage_uio::operator<<(v58, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" given", 6);
      di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v54);
      goto LABEL_64;
    }
    (*(void (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
    goto LABEL_41;
  }
  if (v50)
  {
    *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&v52 + 1) = 54;
    LODWORD(v53) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v54, &v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v58, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v54);
    long long v45 = __cxa_allocate_exception(0x10uLL);
    long long v46 = std::generic_category();
    void *v45 = 22;
    v45[1] = v46;
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &v54);
  int v11 = v54;
  long long v54 = 0;
  uint64_t v12 = a1[1];
  a1[1] = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = v54;
    long long v54 = 0;
    if (v13) {
      (*(void (**)(void *))(*(void *)v13 + 16))(v13);
    }
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v51);
  return a1;
}

void sub_21E2BBB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  int v22 = a20;
  a20 = 0;
  if (v22) {
    (*((void (**)(void **))*v22 + 2))(v22);
  }
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)va);
  JUMPOUT(0x21E2BBE04);
}

void sub_21E2BBBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2 == 1)
  {
    uint64_t v66 = __cxa_begin_catch(a1);
    *(void *)&a11 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&a11 + 1) = 54;
    a12 = 16;
    di_log::logger<di_log::log_printer<1101ul>>::logger(&a19, &a11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a64, (uint64_t)"Diskimageuio: Can't create stackable image: ", 44);
    operator<<(&a64, (uint64_t)v66);
    di_log::logger<di_log::log_printer<1101ul>>::~logger((uint64_t)&a19);
    exception = __cxa_allocate_exception(0x10uLL);
    int v68 = v66[2];
    uint64_t v69 = std::generic_category();
    *(_DWORD *)exception = v68;
    exception[1] = v69;
  }
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v70 = a13;
  a13 = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v64);
  uint64_t v71 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBBB0()
{
}

void sub_21E2BBBB8()
{
}

void sub_21E2BBBC0()
{
  MEMORY[0x223C249A0](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x21E2BBBE0);
}

void sub_21E2BBC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  __cxa_end_catch();
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBC9C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21E2BBE6CLL);
}

void sub_21E2BBCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  __cxa_free_exception(v21);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BBD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 16))(a20);
  }
  JUMPOUT(0x21E2BBDF0);
}

void sub_21E2BBD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void *diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  *a1 = &unk_26CF228A8;
  a1[1] = 0;
  if (a2 == a3)
  {
    *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v52 + 1) = 54;
    LODWORD(v53) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v54, &v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: No diskimage given", 32);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v54);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157);
    exception[1] = v42;
  }
  int v50 = *(_DWORD *)a2;
  long long v51 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  char v6 = v51;
  *(void *)(a2 + 8) = 0;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v6);
  uint64_t v7 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &lpsrc);
    uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
    if (!v50)
    {
      *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v52 + 1) = 54;
      LODWORD(v53) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v54, &v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot", 93);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v54);
      long long v43 = __cxa_allocate_exception(0x10uLL);
      *long long v43 = make_error_code(163);
      v43[1] = v44;
    }
    uint64_t v9 = v8;
    long long v52 = 0uLL;
    unint64_t v53 = 0;
    uint64_t v10 = lpsrc;
    if (v50 == 1)
    {
      lpsrc = 0;
      long long v54 = v10;
      LODWORD(v55) = 2;
    }
    else
    {
      int v14 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
      if (v50 == 3) {
        int v15 = v14;
      }
      else {
        int v15 = 0;
      }
      char v16 = lpsrc;
      if (v15 == 1 && lpsrc != 0)
      {
        if (v18) {
          v18[184] = 0;
        }
      }
      uint64_t v19 = *((void *)&v52 + 1);
      lpsrc = 0;
      long long v54 = v16;
      LODWORD(v55) = v15 ^ 1;
      if (*((void *)&v52 + 1) < v53)
      {
        **((void **)&v52 + 1) = v16;
        if (v16) {
          operator new();
        }
        *(void *)(v19 + 8) = 0;
        long long v54 = 0;
        *(_DWORD *)(v19 + 16) = v55;
        *((void *)&v52 + 1) = v19 + 24;
        goto LABEL_25;
      }
    }
    uint64_t v20 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v52, (uint64_t)&v54);
    uint64_t v21 = v54;
    *((void *)&v52 + 1) = v20;
    long long v54 = 0;
    if (v21) {
      (*(void (**)(void *))(*(void *)v21 + 16))(v21);
    }
LABEL_25:
    int v22 = v50;
    BOOL v23 = v50 == 1;
    while (1)
    {
      int v50 = *(_DWORD *)v7;
      diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v51, (uint64_t *)(v7 + 8));
      diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v51);
      diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v51, (uint64_t)v47);
      if (!v48)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1028ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Can't get image format", 36);
        di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v54);
        uint64_t v34 = __cxa_allocate_exception(0x10uLL);
        _OWORD *v34 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v47);
      }
      diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &v54);
      uint64_t v24 = (uint64_t *)v54;
      long long v54 = 0;
      unsigned __int8 v25 = lpsrc;
      lpsrc = v24;
      if (v25)
      {
        (*(void (**)(void *))(*(void *)v25 + 16))(v25);
        uint64_t v26 = v54;
        long long v54 = 0;
        if (v26) {
          (*(void (**)(void *))(*(void *)v26 + 16))(v26);
        }
        uint64_t v24 = (uint64_t *)lpsrc;
      }
      uint64_t v27 = *v24;
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1035ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Nested stacking is not allowed.", 45);
        di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v54);
        goto LABEL_64;
      }
      if ((*(uint64_t (**)(uint64_t *))(v27 + 24))(v24) != v9)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1040ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Multiple images given but block size differ. ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" block_size: ", 13);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" / ", 3);
        (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
        std::ostream::operator<<();
        di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v54);
LABEL_64:
        uint64_t v35 = 163;
LABEL_65:
        long long v36 = __cxa_allocate_exception(0x10uLL);
        void *v36 = make_error_code(v35);
        v36[1] = v37;
      }
      v7 += 16;
      if (v7 == a3) {
        break;
      }
      if (v47[0] != 8)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1056ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ", 48);
        long long v38 = diskimage_uio::operator<<(v58, v47[0]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" instead", 8);
        di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v54);
        goto LABEL_64;
      }
      if (v50 != 1)
      {
        if (v50 != 2)
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1063ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ", 109);
          diskimage_uio::operator<<(v58, v50);
          di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v54);
LABEL_71:
          long long v39 = __cxa_allocate_exception(0x10uLL);
          void *v39 = make_error_code(163);
          v39[1] = v40;
        }
        if ((*(unsigned int (**)(void *))(*(void *)lpsrc + 40))(lpsrc))
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1068ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Snapshots should be read only", 43);
          di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v54);
          goto LABEL_71;
        }
LABEL_41:
        int v28 = 1;
        goto LABEL_45;
      }
      if (v23)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1074ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Only single cache is allowed", 42);
        di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v54);
        goto LABEL_71;
      }
      if (v22 == 2)
      {
        *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std"
                          "::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
        *((void *)&v59 + 1) = 54;
        int v60 = 16;
        di_log::logger<di_log::log_printer<1079ul>>::logger(&v54, &v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: Snapshot detected on top of cache", 47);
        di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v54);
        goto LABEL_71;
      }
      BOOL v23 = 1;
      int v28 = 2;
LABEL_45:
      if (v47[0] != 12)
      {
        (*(void (**)(void **__return_ptr))(*(void *)lpsrc + 72))(&v54);
        if (v54 || v55 || v56 || v57)
        {
          *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v59 + 1) = 54;
          int v60 = 16;
          di_log::logger<di_log::log_printer<1089ul>>::logger(&v54, &v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
          di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v54);
          uint64_t v35 = 164;
          goto LABEL_65;
        }
      }
      char v29 = lpsrc;
      lpsrc = 0;
      long long v54 = v29;
      LODWORD(v55) = v28;
      uint64_t v30 = *((void *)&v52 + 1);
      if (*((void *)&v52 + 1) >= v53)
      {
        uint64_t v31 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v52, (uint64_t)&v54);
        long long v32 = v54;
        *((void *)&v52 + 1) = v31;
        long long v54 = 0;
        if (v32) {
          (*(void (**)(void *))(*(void *)v32 + 16))(v32);
        }
      }
      else
      {
        **((void **)&v52 + 1) = v29;
        if (v29) {
          operator new();
        }
        *(void *)(v30 + 8) = 0;
        long long v54 = 0;
        *(_DWORD *)(v30 + 16) = v55;
        *((void *)&v52 + 1) = v30 + 24;
      }
      if (v7 == a3) {
        operator new();
      }
    }
    if (v50)
    {
      *(void *)&long long v59 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v59 + 1) = 54;
      int v60 = 16;
      di_log::logger<di_log::log_printer<1048ul>>::logger(&v54, &v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ", 59);
      diskimage_uio::operator<<(v58, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" given", 6);
      di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v54);
      goto LABEL_64;
    }
    (*(void (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
    goto LABEL_41;
  }
  if (v50)
  {
    *(void *)&long long v52 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v52 + 1) = 54;
    LODWORD(v53) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v54, &v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v58, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v54);
    long long v45 = __cxa_allocate_exception(0x10uLL);
    long long v46 = std::generic_category();
    void *v45 = 22;
    v45[1] = v46;
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v51, &v54);
  int v11 = v54;
  long long v54 = 0;
  uint64_t v12 = a1[1];
  a1[1] = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = v54;
    long long v54 = 0;
    if (v13) {
      (*(void (**)(void *))(*(void *)v13 + 16))(v13);
    }
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v51);
  return a1;
}

void sub_21E2BCAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  int v22 = a20;
  a20 = 0;
  if (v22) {
    (*((void (**)(void **))*v22 + 2))(v22);
  }
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)va);
  JUMPOUT(0x21E2BCDD0);
}

void sub_21E2BCB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2 == 1)
  {
    uint64_t v66 = __cxa_begin_catch(a1);
    *(void *)&a11 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&a11 + 1) = 54;
    a12 = 16;
    di_log::logger<di_log::log_printer<1101ul>>::logger(&a19, &a11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a64, (uint64_t)"Diskimageuio: Can't create stackable image: ", 44);
    operator<<(&a64, (uint64_t)v66);
    di_log::logger<di_log::log_printer<1101ul>>::~logger((uint64_t)&a19);
    exception = __cxa_allocate_exception(0x10uLL);
    int v68 = v66[2];
    uint64_t v69 = std::generic_category();
    *(_DWORD *)exception = v68;
    exception[1] = v69;
  }
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v70 = a13;
  a13 = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v64);
  uint64_t v71 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCB7C()
{
}

void sub_21E2BCB84()
{
}

void sub_21E2BCB8C()
{
  MEMORY[0x223C249A0](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x21E2BCBACLL);
}

void sub_21E2BCC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  __cxa_end_catch();
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCC68(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21E2BCE38);
}

void sub_21E2BCC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  __cxa_free_exception(v21);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_21E2BCD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 16))(a20);
  }
  JUMPOUT(0x21E2BCDBCLL);
}

void sub_21E2BCD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v22 = *(void *)(a10 + 8);
  *(void *)(a10 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  _Unwind_Resume(a1);
}

unint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  v21[66] = *MEMORY[0x263EF8340];
  uint64_t v8 = (DiskImage::Context **)(a2 + 8);
  unint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8) + 24))(*(void *)(*(void *)(a2 + 8) + 8));
  uint64_t v10 = (diskimage_uio *)(*(uint64_t (**)(void))(**((void **)*v8 + 1) + 24))(*((void *)*v8 + 1));
  diskimage_uio::create_sg_vec_from_buffer(v10, a4, a3, a5, v20);
  int v11 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v21, (uint64_t)v17);
  sg_vec_ref::end((sg_vec_ref *)v21, (uint64_t)v14);
  unint64_t v12 = DiskImage::Context::read(v11, (const sg_vec_ns::details::sg_vec_iterator *)v17, (const sg_vec_ns::details::sg_vec_iterator *)v14);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if ((v12 & 0x8000000000000000) == 0) {
    v12 /= v9;
  }
  sg_vec::~sg_vec((sg_vec *)v20);
  return v12;
}

void sub_21E2BCFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  sg_vec::~sg_vec((sg_vec *)&a50);
  _Unwind_Resume(a1);
}

void diskimage_uio::create_sg_vec_from_buffer(diskimage_uio *this@<X0>, char *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = a2 * (void)this;
  uint64_t v8 = a4 * (void)this;
  uint64_t v9 = *((void *)details::get_dummy_shared_ptr() + 1);
  *(void *)&long long v10 = a3;
  *((void *)&v10 + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v7;
  char v14 = 0;
  sg_vec::sg_vec(a5, &v10);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
}

void sub_21E2BD080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, long long *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 4);
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v13 = &v15;
  uint64_t v16 = v4;
  long long v14 = xmmword_21E39B4E0;
  long long v15 = v5;
  sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, &v13);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(&v13);
  uint64_t v6 = a1[1];
  uint64_t v13 = (long long *)*a1;
  uint64_t v7 = (uint64_t)v13 + 24 * v6;
  uint64_t v8 = a1[19];
  uint64_t v11 = (unint64_t *)a1[18];
  uint64_t v12 = v7;
  long long v10 = &v11[v8];
  sg_vec_ref::sg_vec_ref((uint64_t)(a1 + 26), (uint64_t *)&v13, &v12, &v11, &v10, *((void *)a2 + 3), *((void *)a2 + 2));
  return a1;
}

void sub_21E2BD168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sg_vec_ns::details::sg_vec_data::~sg_vec_data(v12);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_1::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  v27[66] = *MEMORY[0x263EF8340];
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8) + 24))(*(void *)(*(void *)(a2 + 8) + 8));
  uint64_t v10 = v9 * a4;
  if (!v10) {
    return 0;
  }
  unint64_t v11 = v9;
  unint64_t v12 = -1;
  uint64_t v13 = 8;
  unint64_t v14 = v9 * a4;
  do
  {
    unint64_t v15 = *(void *)(a3 + v13);
    BOOL v16 = v14 >= v15;
    v14 -= v15;
    if (!v16) {
      return -22;
    }
    ++v12;
    v13 += 16;
  }
  while (v14);
  unint64_t v18 = v12 + 1;
  if (v12 <= 0x7FFFFFFFFFFFFFFELL)
  {
    uint64_t v23 = a3;
    uint64_t v24 = (std::__shared_weak_count *)(v12 + 1);
    diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>((uint64_t)&v23, v9 * a5, v10, (uint64_t)v26);
    uint64_t v17 = *(DiskImage::Context **)(a2 + 8);
    sg_vec_ref::begin((sg_vec_ref *)v27, (uint64_t)&v23);
    sg_vec_ref::end((sg_vec_ref *)v27, (uint64_t)v20);
    unint64_t v18 = DiskImage::Context::read(v17, (const sg_vec_ns::details::sg_vec_iterator *)&v23, (const sg_vec_ns::details::sg_vec_iterator *)v20);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if ((v18 & 0x8000000000000000) == 0) {
      v18 /= v11;
    }
    sg_vec::~sg_vec((sg_vec *)v26);
  }
  return v18;
}

void sub_21E2BD30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  sg_vec::~sg_vec((sg_vec *)&a50);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  uint64_t v10 = dummy_shared_ptr;
  unint64_t v11 = *(uint64_t **)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = (void *)(a4 + 24);
  *(void *)a4 = a4 + 24;
  long long v14 = xmmword_21E39B4F0;
  *(_OWORD *)(a4 + 8) = xmmword_21E39B4F0;
  uint64_t v15 = (v12 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v12) {
    unint64_t v16 = v15 + 1;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v16 < 6)
  {
    if (v12)
    {
      uint64_t v25 = v15 + 1;
      do
      {
        uint64_t v26 = *v11;
        uint64_t v27 = dummy_shared_ptr[1];
        if (v27) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v28 = v11[1];
        *uint64_t v13 = v26;
        v13[1] = v27;
        v13[2] = v28;
        v11 += 2;
        v13 += 3;
        --v25;
      }
      while (v25);
    }
    else
    {
      unint64_t v16 = 0;
    }
  }
  else
  {
    if (v16 >= 0x555555555555556) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v9);
    }
    uint64_t v17 = (char *)operator new(24 * v16);
    unint64_t v18 = *(void **)a4;
    if (*(void *)a4)
    {
      boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all((void *)a4);
      if (v13 != v18) {
        operator delete(v18);
      }
    }
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = v16;
    *(void *)a4 = v17;
    if (v12)
    {
      uint64_t v19 = &v11[2 * v12];
      uint64_t v20 = v17;
      long long v14 = xmmword_21E39B4F0;
      do
      {
        uint64_t v21 = *v11;
        uint64_t v22 = v10[1];
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v23 = v11[1];
        *(void *)uint64_t v20 = v21;
        *((void *)v20 + 1) = v22;
        *((void *)v20 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v23;
        v20 += 24;
        v11 += 2;
      }
      while (v11 != v19);
      uint64_t v24 = *(void *)(a4 + 8);
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v20 = v17;
      long long v14 = xmmword_21E39B4F0;
    }
    unint64_t v16 = v24 - 0x5555555555555555 * ((v20 - v17) >> 3);
  }
  *(void *)(a4 + 144) = a4 + 168;
  *(void *)(a4 + 8) = v16;
  *(_OWORD *)(a4 + 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v14;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>(a4 + 144, v16);
  uint64_t v29 = *(void *)(a4 + 8);
  uint64_t v36 = *(void *)a4;
  uint64_t v30 = v36 + 24 * v29;
  uint64_t v31 = *(void *)(a4 + 152);
  uint64_t v34 = *(unint64_t **)(a4 + 144);
  uint64_t v35 = v30;
  char v33 = &v34[v31];
  return sg_vec_ref::sg_vec_ref(a4 + 208, &v36, &v35, &v34, &v33, a2, a3);
}

void sub_21E2BD570(_Unwind_Exception *a1)
{
  if (v1[20])
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(v1);
  _Unwind_Resume(a1);
}

unint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_2::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  v21[66] = *MEMORY[0x263EF8340];
  uint64_t v8 = (DiskImage::Context **)(a2 + 8);
  unint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8) + 24))(*(void *)(*(void *)(a2 + 8) + 8));
  uint64_t v10 = (diskimage_uio *)(*(uint64_t (**)(void))(**((void **)*v8 + 1) + 24))(*((void *)*v8 + 1));
  diskimage_uio::create_sg_vec_from_buffer(v10, a4, a3, a5, v20);
  unint64_t v11 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v21, (uint64_t)v17);
  sg_vec_ref::end((sg_vec_ref *)v21, (uint64_t)v14);
  unint64_t v12 = DiskImage::Context::write(v11, (const sg_vec_ns::details::sg_vec_iterator *)v17, (const sg_vec_ns::details::sg_vec_iterator *)v14);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if ((v12 & 0x8000000000000000) == 0) {
    v12 /= v9;
  }
  sg_vec::~sg_vec((sg_vec *)v20);
  return v12;
}

void sub_21E2BD70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  sg_vec::~sg_vec((sg_vec *)&a50);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_3::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  v27[66] = *MEMORY[0x263EF8340];
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8) + 24))(*(void *)(*(void *)(a2 + 8) + 8));
  uint64_t v10 = v9 * a4;
  if (!v10) {
    return 0;
  }
  unint64_t v11 = v9;
  unint64_t v12 = -1;
  uint64_t v13 = 8;
  unint64_t v14 = v9 * a4;
  do
  {
    unint64_t v15 = *(void *)(a3 + v13);
    BOOL v16 = v14 >= v15;
    v14 -= v15;
    if (!v16) {
      return -22;
    }
    ++v12;
    v13 += 16;
  }
  while (v14);
  unint64_t v18 = v12 + 1;
  if (v12 <= 0x7FFFFFFFFFFFFFFELL)
  {
    uint64_t v23 = a3;
    uint64_t v24 = (std::__shared_weak_count *)(v12 + 1);
    diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>((uint64_t)&v23, v9 * a5, v10, (uint64_t)v26);
    uint64_t v17 = *(DiskImage::Context **)(a2 + 8);
    sg_vec_ref::begin((sg_vec_ref *)v27, (uint64_t)&v23);
    sg_vec_ref::end((sg_vec_ref *)v27, (uint64_t)v20);
    unint64_t v18 = DiskImage::Context::write(v17, (const sg_vec_ns::details::sg_vec_iterator *)&v23, (const sg_vec_ns::details::sg_vec_iterator *)v20);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if ((v18 & 0x8000000000000000) == 0) {
      v18 /= v11;
    }
    sg_vec::~sg_vec((sg_vec *)v26);
  }
  return v18;
}

void sub_21E2BD8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  sg_vec::~sg_vec((sg_vec *)&a50);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_4::__invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = DiskImage::Context::unmap(*(void **)(a2 + 8));
  if (v4 < 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = -v4;
  }
  if (v4) {
    return v5;
  }
  else {
    return a3;
  }
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_5::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a3)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
      uint64_t result = DiskImage::Context::flush(*(void **)(a2 + 8));
      break;
    default:
      a3 = 4294967274;
LABEL_3:
      uint64_t result = a3;
      break;
  }
  return result;
}

di_hybrid_subscriber_t *diskimage_uio::details::setup_di_subscriber<di_hybrid_subscriber_t>(di_hybrid_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke(di_hybrid_subscriber_t *result)
{
  if (result)
  {
    di_hybrid_subscriber_t::~di_hybrid_subscriber_t(result);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t diskimage_uio::details::setup_di_subscriber<io_rings_di_subscriber_t>(io_rings_di_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__value_func[abi:ne180100]((void *)(result + 248));
    pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(v1 + 120);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

void std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__func()
{
}

void *std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CF2A840;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF2A840;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_impl::create_context_impl(*(diskimage_uio::details::diskimage_impl **)(*(void *)(a1 + 8) + 240), a2);
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_21E2BDC58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::swap(diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  if (*((unsigned char *)this + 16)) {
    BOOL v4 = *((unsigned char *)a2 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v9[0] = *(void *)this;
    *(void *)this = 0;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }
  if (*((unsigned char *)this + 16))
  {
    if (!*((unsigned char *)a2 + 16))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *(void *)a2 = *(void *)this;
      *(void *)this = 0;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      char v6 = *((unsigned char *)this + 16);
      *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
      *((unsigned char *)a2 + 16) = v6;
      return result;
    }
  }
  else if (*((unsigned char *)a2 + 16))
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)this = v7;
    v9[0] = 0;
    char v8 = *((unsigned char *)this + 16);
    *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
    *((unsigned char *)a2 + 16) = v8;
    goto LABEL_11;
  }
  __n128 result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void OUTLINED_FUNCTION_0(_OWORD *a1)
{
  *(_OWORD *)uint64_t v1 = *a1;
  *(unsigned char *)(v1 + 16) = 0;
  __cxa_end_catch();
}

void *rawTestPluginCreate()
{
  return &rawTestPlugin_t::get_plugin(void)::plugin;
}

void rawTestPlugin_t::Create()
{
}

void sub_21E2BDDFC(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v3;
  MEMORY[0x223C249A0](v5, 0x1080C407694D455);
  if (a2 == 1)
  {
    uint64_t v7 = (rawTestPlugin_t *)__cxa_begin_catch(a1);
    rawTestPlugin_t::CreationError(v7, v2, v8);
    __cxa_end_catch();
    JUMPOUT(0x21E2BDDE8);
  }
  _Unwind_Resume(a1);
}

void rawTestPlugin_t::Decode(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v15 = 0;
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "path", &v15);
    unsigned int v6 = v5;
    if (v5 > 0)
    {
      [NSString stringWithUTF8String:v15];
      objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t))(a1 + 16))(v15);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "writable", &v15);
      unsigned int v8 = v7;
      if (v7 == 1)
      {
        (*(void (**)(void))(a1 + 16))();
        operator new();
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26CF2AF88;
      unint64_t v14 = std::generic_category();
      exception[1] = v8;
      exception[2] = v14;
      exception[3] = "Cannot decode writable";
    }
    unint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *unint64_t v11 = &unk_26CF2AF88;
    unint64_t v12 = std::generic_category();
    v11[1] = v6;
    _OWORD v11[2] = v12;
    void v11[3] = "Cannot decode path";
  }
  uint64_t v9 = __cxa_allocate_exception(0x20uLL);
  *uint64_t v9 = &unk_26CF2AF88;
  uint64_t v10 = std::generic_category();
  v9[1] = v4;
  void v9[2] = v10;
  v9[3] = "Cannot decode file descriptor";
}

void sub_21E2BE134(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (rawTestPlugin_t *)__cxa_begin_catch(exception_object);
    rawTestPlugin_t::CreationError(v3, v2, v4);
    __cxa_end_catch();
    JUMPOUT(0x21E2BDFECLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rawTestPlugin_t::Description(rawTestPlugin_t *this, const __CFDictionary *a2)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t rawTestPlugin_t::rawTestPlugin_t(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [*(id *)(a2 + 8) objectForKeyedSubscript:@"path"];
  BOOL v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 10std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = -1;
  *(void *)a1 = 88;
  *(void *)(a1 + 8) = rawTestPlugin_t::GetBlockSize;
  *(void *)(a1 + 16) = rawTestPlugin_t::GetNrBlocks;
  *(void *)(a1 + 24) = rawTestPlugin_t::IsWritable;
  *(void *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = rawTestPlugin_t::GetPreferredAlignment;
  *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = rawTestPlugin_t::GetPreferredSize;
  *(void *)(a1 + 48) = rawTestPlugin_t::GetUUID;
  *(void *)(a1 + 56) = rawTestPlugin_t::GetSubscriber;
  *(void *)(a1 + 64) = rawTestPlugin_t::Encode;
  *(void *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = rawTestPlugin_t::ReleaseImage;
  *(void *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  int v6 = open((const char *)[v4 fileSystemRepresentation], *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 10std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = *__error();
    void *exception = &unk_26CF2AF88;
    uint64_t v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }
  return a1;
}

void sub_21E2BE330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  rawTestPlugin_t::~rawTestPlugin_t(v1);
  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::CreationError(rawTestPlugin_t *this, const pluginException_t *a2, __CFError **a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v5 = *__error();
  if (DIForwardLogs())
  {
    int v6 = getDIOSLog();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    uint64_t v7 = (*(uint64_t (**)(rawTestPlugin_t *))(*(void *)this + 16))(this);
    int v8 = *((_DWORD *)this + 2);
    *(_DWORD *)uint64_t buf = 68158466;
    int v15 = 97;
    __int16 v16 = 2080;
    uint64_t v17 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = getDIOSLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = (*(uint64_t (**)(rawTestPlugin_t *))(*(void *)this + 16))(this);
      int v12 = *((_DWORD *)this + 2);
      *(_DWORD *)uint64_t buf = 68158466;
      int v15 = 97;
      __int16 v16 = 2080;
      uint64_t v17 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      _os_log_impl(&dword_21E237000, v10, OS_LOG_TYPE_ERROR, "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)", buf, 0x22u);
    }
  }
  *__error() = v5;
  if (a2)
  {
    *(void *)a2 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F08438] code:*((int *)this + 2) userInfo:0];
  }
  return 0;
}

void pluginException_t::pluginException_t(pluginException_t *this, const char *a2, unsigned int a3)
{
  *(void *)this = &unk_26CF2AF88;
  int v6 = std::generic_category();
  *((void *)this + 1) = a3;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v6;
  *((void *)this + 3) = a2;
}

uint64_t rawTestPlugin_t::GetBlockSize()
{
  return 512;
}

unint64_t rawTestPlugin_t::GetNrBlocks(rawTestPlugin_t *a1)
{
  rawTestPlugin_t::get_stat(a1, &v2);
  return (unint64_t)v2.st_size >> 9;
}

BOOL rawTestPlugin_t::IsWritable(uint64_t a1)
{
  return *(unsigned char *)(a1 + 96) != 0;
}

uint64_t rawTestPlugin_t::GetPreferredAlignment()
{
  return 1024;
}

uint64_t rawTestPlugin_t::GetPreferredSize()
{
  return 1024;
}

rawTestPlugin_t *rawTestPlugin_t::ReleaseImage(rawTestPlugin_t *result)
{
  if (result)
  {
    rawTestPlugin_t::~rawTestPlugin_t(result);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t rawTestPlugin_t::get_stat@<X0>(rawTestPlugin_t *this@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*((_DWORD *)this + 25), a2);
  if (result)
  {
    exception = (pluginException_t *)__cxa_allocate_exception(0x20uLL);
    unsigned int v4 = __error();
    pluginException_t::pluginException_t(exception, "fstat failed", *v4);
  }
  return result;
}

void sub_21E2BE718(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFUUIDRef rawTestPlugin_t::get_uuid(id *this)
{
  v5[2] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v1 = boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()((uint64_t)v5, (char *)[this[11] UTF8String], objc_msgSend(this[11], "length"));
  uint64_t v3 = v2;
  *(void *)&v6.byte0 = v1;
  *(void *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0, v6);
}

uint64_t boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  long long v13 = xmmword_21E39F070;
  int v14 = -1009589776;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v16 = 0;
  do
  {
    char v7 = *(unsigned char *)(a1 + v6);
    uint64_t v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      uint64_t v16 = 0;
      boost::uuids::detail::sha1::process_block(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        MEMORY[0x223C244F0](v12, "sha1 too many bytes");
        boost::throw_exception<std::runtime_error>((uint64_t)v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++v6;
  }
  while (v6 != 16);
  for (; a3; --a3)
  {
    char v9 = *a2;
    uint64_t v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      uint64_t v16 = 0;
      boost::uuids::detail::sha1::process_block(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        MEMORY[0x223C244F0](v12, "sha1 too many bytes");
        boost::throw_exception<std::runtime_error>((uint64_t)v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++a2;
  }
  return boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::hash_to_uuid(a1, (boost::uuids::detail::sha1 *)&v13);
}

void sub_21E2BE9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MEMORY[0x223C24510](va);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::hash_to_uuid(int a1, boost::uuids::detail::sha1 *this)
{
  v5[2] = *MEMORY[0x263EF8340];
  memset(v4, 0, 20);
  boost::uuids::detail::sha1::get_digest(this, (unsigned int (*)[5])v4);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)((char *)v5 + i) = bswap32(*(_DWORD *)((char *)v4 + i));
  BYTE6(v5[0]) = BYTE6(v5[0]) & 0xF | 0x50;
  return v5[0];
}

void boost::throw_exception<std::runtime_error>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x10uLL);
  uint64_t v3 = (void *)MEMORY[0x223C24500](exception, a1);
  __cxa_throw(v3, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

_DWORD *boost::uuids::detail::sha1::process_block(_DWORD *this)
{
  uint64_t v1 = 0;
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const char *)(this + 5);
  int8x16x4_t v41 = vld4q_s8(v2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v41.val[0].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v41.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v41.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v41.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v41.val[2]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v41.val[2].i8);
  int8x16_t v15 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v41.val[3]);
  v41.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v41.val[3].i8);
  v39[3] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)), (int8x16_t)vmovl_high_u16(v16));
  void v39[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v41.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v41.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + v1) = v17 >> 31;
    v1 += 4;
  }
  while (v1 != 256);
  unint64_t v18 = 0;
  int v19 = this[1];
  int v21 = this[3];
  int v20 = this[4];
  int v22 = v20;
  int v23 = this[2];
  int v24 = v21;
  int v25 = v23;
  int v26 = v19;
  int v27 = *this;
  do
  {
    int v28 = v27;
    int v29 = v25;
    int v30 = v24;
    int v31 = v25 ^ v26 ^ v24;
    int v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      int v33 = -1894007588;
    }
    else
    {
      int v32 = v31;
      int v33 = -899497514;
    }
    if (v18 <= 0x27)
    {
      int v34 = 1859775393;
    }
    else
    {
      int v31 = v32;
      int v34 = v33;
    }
    if (v18 <= 0x13) {
      int v31 = v30 & ~v26 | v29 & v26;
    }
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    int v35 = v36 >> 27;
    if (v18 <= 0x13) {
      int v34 = 1518500249;
    }
    int v37 = v22 + v31 + v35 + v34;
    HIDWORD(v38) = v26;
    LODWORD(v38) = v26;
    int v25 = v38 >> 2;
    int v27 = v37 + *((_DWORD *)v39 + v18++);
    int v22 = v30;
    int v24 = v29;
    int v26 = v28;
  }
  while (v18 != 80);
  *this += v27;
  this[1] = v28 + v19;
  this[2] = v25 + v23;
  this[3] = v29 + v21;
  this[4] = v30 + v20;
  return this;
}

_DWORD *boost::uuids::detail::sha1::get_digest(_DWORD *this, unsigned int (*a2)[5])
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = v4 + 1;
  *((unsigned char *)this + v4 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0x80;
  unint64_t v5 = *((void *)this + 11);
  if (v5 == 64)
  {
    *((void *)this + 11) = 0;
    this = boost::uuids::detail::sha1::process_block(this);
    unint64_t v5 = *(void *)(v3 + 88);
  }
  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *(void *)(v3 + 88) = v5 + 1;
        *(unsigned char *)(v3 + v5 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
        unint64_t v5 = *(void *)(v3 + 88);
      }
      while (v5 < 0x38);
    }
  }
  else
  {
    do
    {
      *(void *)(v3 + 88) = v5 + 1;
      *(unsigned char *)(v3 + v5 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
      unint64_t v5 = *(void *)(v3 + 88);
      if (v5 == 64)
      {
        *(void *)(v3 + 88) = 0;
        this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
        unint64_t v5 = *(void *)(v3 + 88);
      }
    }
    while (v5);
    unint64_t v6 = 0;
    do
    {
      unint64_t v5 = v6 + 1;
      *(unsigned char *)(v3 + 20 + v6) = 0;
    }
    while (v6++ < 0x37);
  }
  uint64_t v8 = *(void *)(v3 + 104) >> 24;
  *(void *)(v3 + 88) = v5 + 1;
  *(unsigned char *)(v3 + v5 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v8;
  uint64_t v9 = *(void *)(v3 + 88);
  if (v9 == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v9 = *(void *)(v3 + 88);
  }
  uint64_t v10 = *(void *)(v3 + 104) >> 16;
  *(void *)(v3 + 88) = v9 + 1;
  *(unsigned char *)(v3 + v9 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v10;
  uint64_t v11 = *(void *)(v3 + 88);
  if (v11 == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v11 = *(void *)(v3 + 88);
  }
  uint64_t v12 = *(void *)(v3 + 104) >> 8;
  *(void *)(v3 + 88) = v11 + 1;
  *(unsigned char *)(v3 + v11 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v12;
  uint64_t v13 = *(void *)(v3 + 88);
  if (v13 == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v13 = *(void *)(v3 + 88);
  }
  uint64_t v14 = *(void *)(v3 + 104);
  *(void *)(v3 + 88) = v13 + 1;
  *(unsigned char *)(v3 + v13 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v14;
  uint64_t v15 = *(void *)(v3 + 88);
  if (v15 == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v15 = *(void *)(v3 + 88);
  }
  uint64_t v16 = *(void *)(v3 + 96) >> 24;
  *(void *)(v3 + 88) = v15 + 1;
  *(unsigned char *)(v3 + v15 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v16;
  uint64_t v17 = *(void *)(v3 + 88);
  if (v17 == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v17 = *(void *)(v3 + 88);
  }
  uint64_t v18 = *(void *)(v3 + 96) >> 16;
  *(void *)(v3 + 88) = v17 + 1;
  *(unsigned char *)(v3 + v17 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v18;
  uint64_t v19 = *(void *)(v3 + 88);
  if (v19 == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v19 = *(void *)(v3 + 88);
  }
  uint64_t v20 = *(void *)(v3 + 96) >> 8;
  *(void *)(v3 + 88) = v19 + 1;
  *(unsigned char *)(v3 + v19 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v20;
  uint64_t v21 = *(void *)(v3 + 88);
  if (v21 == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v21 = *(void *)(v3 + 88);
  }
  uint64_t v22 = *(void *)(v3 + 96);
  *(void *)(v3 + 88) = v21 + 1;
  *(unsigned char *)(v3 + v21 + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v22;
  if (*(void *)(v3 + 88) == 64)
  {
    *(void *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
  }
  (*a2)[0] = *(_DWORD *)v3;
  (*a2)[1] = *(_DWORD *)(v3 + 4);
  (*a2)[2] = *(_DWORD *)(v3 + 8);
  (*a2)[3] = *(_DWORD *)(v3 + 12);
  (*a2)[4] = *(_DWORD *)(v3 + 16);
  return this;
}

void rawTestPlugin_t::get_subscriber()
{
}

uint64_t rawTestPlugin_t::IsAsync()
{
  return 1;
}

uint64_t rawTestPlugin_t::ReleaseSubscriber(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 104));

    uint64_t v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(void *)(v1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_addSQE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](a1 + 88, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    char v7 = v14 + 8;
    uint64_t v17 = *(char **)(a1 + 72);
    uint64_t v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *(char **)(a1 + 72);
    }
    *(void *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v14;
    *(void *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v7;
    *(void *)(a1 + 88) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v6 = a2;
    char v7 = v6 + 1;
  }
  *(void *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v7;
  std::mutex::unlock(v4);
  return 0;
}

void sub_21E2BF234(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void rawTestPlugin_t::subscriber_t::_execute(rawTestPlugin_t::subscriber_t *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  uint64_t v3 = (void *)*((void *)this + 9);
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  std::mutex::unlock(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"raw plugin: going to execute ", 29);
  unint64_t v5 = (void *)std::ostream::operator<<();
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" SQEs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  char v7 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v8 = *((void *)this + 12);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = ___ZN15rawTestPlugin_t12subscriber_t8_executeEv_block_invoke;
  block[3] = &__block_descriptor_64_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE_e5_v8__0l;
  block[4] = this;
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>(&__p, v3, v4, (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v8, block);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v3) {
    operator delete(v3);
  }
}

void sub_21E2BF3E0(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v2 - 56));
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *___ZN15rawTestPlugin_t12subscriber_t8_executeEv_block_invoke(void *result)
{
  uint64_t v1 = (uint64_t **)result[5];
  uint64_t v2 = (uint64_t **)result[6];
  if (v1 != v2)
  {
    uint64_t v3 = result[4];
    do
    {
      uint64_t v4 = *v1;
      unsigned int v5 = -45;
      switch(*(unsigned char *)*v1)
      {
        case 2:
          unsigned int iov = rawTestPlugin_t::do_io<io_rings_sqe_op_read_iov_t>(*(void *)(v3 + 64), v4 + 3, MEMORY[0x263EF8A20]);
          goto LABEL_7;
        case 4:
          unsigned int iov = rawTestPlugin_t::do_io<io_rings_sqe_op_write_iov_t>(*(void *)(v3 + 64), v4 + 3, MEMORY[0x263EF8A40]);
          goto LABEL_7;
        case 5:
          unsigned int iov = rawTestPlugin_t::flush(*(rawTestPlugin_t **)(v3 + 64));
LABEL_7:
          unsigned int v5 = iov;
          break;
        case 6:
          unsigned int v5 = 0;
          break;
        default:
          break;
      }
      uint64_t result = (void *)io_rings_return_status(*(void *)(v3 + 56), (uint64_t)v4, v5, 0);
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t rawTestPlugin_t::do_io<io_rings_sqe_op_read_iov_t>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }
    int v6 = -22;
  }
  else
  {
    int v6 = 0;
  }
LABEL_8:
  uint64_t v11 = a2[1] << 9;
  unsigned int v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  int v14 = *__error();
  if (DIForwardLogs())
  {
    uint64_t v15 = getDIOSLog();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    int v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    int v22 = 132;
    __int16 v23 = 2080;
    int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    uint64_t v18 = getDIOSLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      int v22 = 132;
      __int16 v23 = 2080;
      int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v19;
      _os_log_impl(&dword_21E237000, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }
  }
  *__error() = v14;
  int v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

void sub_21E2BF75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::do_io<io_rings_sqe_op_write_iov_t>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }
    int v6 = -22;
  }
  else
  {
    int v6 = 0;
  }
LABEL_8:
  uint64_t v11 = a2[1] << 9;
  unsigned int v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  int v14 = *__error();
  if (DIForwardLogs())
  {
    uint64_t v15 = getDIOSLog();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    int v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    int v22 = 133;
    __int16 v23 = 2080;
    int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    uint64_t v18 = getDIOSLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      int v22 = 133;
      __int16 v23 = 2080;
      int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v19;
      _os_log_impl(&dword_21E237000, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }
  }
  *__error() = v14;
  int v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

void sub_21E2BF9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::flush(rawTestPlugin_t *this)
{
  uint64_t result = fcntl(*((_DWORD *)this + 25), 51, 0);
  if (result != -1)
  {
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (uint64_t result = fsync(*((_DWORD *)this + 25)), result))
  {
LABEL_8:
    int v3 = *__error();
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }
  return result;
}

void *__copy_helper_block_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void __destroy_helper_block_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E2BFB20(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_suspend(rawTestPlugin_t::subscriber_t *this)
{
  *(void *)&long long v2 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((void *)&v2 + 1) = 39;
  int v3 = 0;
  di_log::logger<di_log::log_printer<121ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Suspended", 9);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x223C24910](&v6);
}

void sub_21E2BFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<121ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<121ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<121ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2A910;
  a1[45] = &unk_26CF2AA10;
  a1[46] = &unk_26CF2AA38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2A910;
  a1[45] = &unk_26CF2A998;
  a1[46] = &unk_26CF2A9C0;
  return a1;
}

void sub_21E2BFD1C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2AAA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2BFE00(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2AAA8;
  di_log::logger_buf<di_log::log_printer<121ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<121ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<121ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2C0378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<121ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 121;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 121;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_resume(rawTestPlugin_t::subscriber_t *this)
{
  *(void *)&long long v2 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((void *)&v2 + 1) = 38;
  int v3 = 0;
  di_log::logger<di_log::log_printer<122ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Resumed", 7);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x223C24910](&v6);
}

void sub_21E2C0620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<122ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<122ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<122ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2AB30;
  a1[45] = &unk_26CF2AC30;
  a1[46] = &unk_26CF2AC58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2AB30;
  a1[45] = &unk_26CF2ABB8;
  a1[46] = &unk_26CF2ABE0;
  return a1;
}

void sub_21E2C0734(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2ACC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2C0818(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2ACC8;
  di_log::logger_buf<di_log::log_printer<122ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<122ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<122ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2C0D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<122ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 122;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 122;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_cancel(dispatch_queue_t *this)
{
  dispatch_barrier_sync(this[12], &__block_literal_global_5);
  *(void *)&long long v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((void *)&v2 + 1) = 38;
  int v3 = 0;
  di_log::logger<di_log::log_printer<118ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cancelled", 9);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x223C24910](&v6);
}

void sub_21E2C1048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<118ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<118ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<118ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2AD70;
  a1[45] = &unk_26CF2AE70;
  a1[46] = &unk_26CF2AE98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2AD70;
  a1[45] = &unk_26CF2ADF8;
  a1[46] = &unk_26CF2AE20;
  return a1;
}

void sub_21E2C1160(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2AF08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2C1244(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2AF08;
  di_log::logger_buf<di_log::log_printer<118ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<118ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<118ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2C17BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<118ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 118;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 118;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t rawTestPlugin_t::encode(uint64_t a1, void (*a2)(uint64_t, const char *, uint64_t, uint64_t), void (*a3)(uint64_t, const char *, void), uint64_t a4)
{
  a3(a4, "fd", *(unsigned int *)(a1 + 100));
  a2(a4, "path", [*(id *)(a1 + 88) UTF8String], objc_msgSend(*(id *)(a1 + 88), "length") + 1);
  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1);
}

void pluginException_t::~pluginException_t(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x223C249A0);
}

uint64_t pluginException_t::what(pluginException_t *this)
{
  return *((void *)this + 3);
}

void rawTestPlugin_t::~rawTestPlugin_t(rawTestPlugin_t *this)
{
  close(*((_DWORD *)this + 25));
  *(void *)&long long v2 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((void *)&v2 + 1) = 33;
  int v3 = 0;
  di_log::logger<di_log::log_printer<325ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cleaning up!", 12);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf((uint64_t)v4);
  MEMORY[0x223C24910](&v6);
}

void *di_log::logger<di_log::log_printer<325ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<325ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2AFB8;
  a1[45] = &unk_26CF2B0B8;
  a1[46] = &unk_26CF2B0E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2AFB8;
  a1[45] = &unk_26CF2B040;
  a1[46] = &unk_26CF2B068;
  return a1;
}

void sub_21E2C1C6C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2B150;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2C1D50(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2B150;
  di_log::logger_buf<di_log::log_printer<325ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<325ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<325ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2C22C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<325ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    char v6 = getDIOSLog();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 325;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = getDIOSLog();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 325;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_21E237000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t io_rings_setup_impl(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 4294967274;
  if (a1 && a2 && a3 && a4)
  {
    if (*(_DWORD *)a2 <= 1u)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 4);
      if (v5 < 9) {
        return v4;
      }
      if (v5 < 0x10
        || ((char v6 = *(_DWORD **)(a2 + 8)) == 0 || !*v6)
        && (v5 < 0x31
         || !*(unsigned char *)(a2 + 48) && !memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v5 - 49)))
      {
        operator new();
      }
    }
    return 4294967251;
  }
  return v4;
}

void sub_21E2C26AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<io_rings_desc_t>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = -22;
  }
  else {
    unsigned int v2 = 1;
  }
  if (a2 <= 0 && a1 == 0) {
    return v2;
  }
  else {
    return 4294967251;
  }
}

void *io_rings_setup_copy_in_params(void *result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  if (v2 >= 0x18)
  {
    result[52] = *(void *)(a2 + 16);
    if (v2 >= 0x20)
    {
      result[53] = *(void *)(a2 + 24);
      if (v2 >= 0x28)
      {
        result[54] = *(void *)(a2 + 32);
        if (v2 >= 0x30) {
          result[55] = *(void *)(a2 + 40);
        }
      }
    }
  }
  return result;
}

uint64_t io_rings_setup_prepare_ring(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  if (a2 >= 0x2000) {
    unsigned int v3 = 0x2000;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a2 + 1 < 0x2000) {
    unsigned int v4 = a2 + 1;
  }
  else {
    unsigned int v4 = 0x2000;
  }
  if ((v4 & (v4 - 1)) != 0)
  {
    char v5 = 0;
    unsigned int v6 = 2 * v4;
    do
    {
      v6 >>= 1;
      ++v5;
    }
    while (v6 != 1);
    unsigned int v4 = 1 << v5;
  }
  uint64_t v7 = mmap(0, 88 * v3 + 8 + 4 * v4, 3, 4097, 0, 0);
  if (v7 == (void *)-1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  *(void *)a1 = v8;
  unint64_t v9 = mmap(0, (16 * v4) | 8, 3, 4097, 0, 0);
  if (v9 == (void *)-1) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v9;
  }
  *(void *)(a1 + 8) = v10;
  uint64_t result = 4294967284;
  if (*(void *)a1)
  {
    if (v10)
    {
      std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100]((std::mutex *)(a1 + 16));
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = *(void *)(a1 + 8);
      v14[0] = &unk_26CF2B1F8;
      v14[1] = a1;
      void v14[3] = v14;
      io_rings_sq_t::io_rings_sq_t(a1 + 16, v12, v13, v3, v4, v4, (uint64_t)v14);
    }
  }
  return result;
}

void sub_21E2C2944(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x21E2C28F8);
  }
  _Unwind_Resume(a1);
}

uint64_t io_rings_desc_free(uint64_t result)
{
  if (*(unsigned char *)(result + 264))
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 408))
    {
      unsigned int v2 = *(_DWORD *)(result + 136);
      uint64_t v3 = *(unsigned int *)(result + 312);
      uint64_t v4 = *(unsigned int *)(result + 56);
      std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100]((std::mutex *)(result + 16));
      std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100]((void *)(v1 + 272));
      if (*(void *)v1)
      {
        munmap(*(void **)v1, 4 * v4 + 88 * v2 + 8);
        *(void *)uint64_t v1 = 0;
      }
      uint64_t v5 = *(void **)(v1 + 8);
      if (v5)
      {
        munmap(v5, (16 * v3) | 8);
        *(void *)(v1 + 8) = 0;
      }
      uint64_t v6 = *(void *)(v1 + 704);
      *(void *)(v1 + 704) = 0;
      if (v6) {
        (*(void (**)(void))(v6 + 32))();
      }
      uint64_t v7 = 696;
      while (1)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v1 + v7);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 16;
        if (v7 == 440)
        {
          std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100](v1 + 272);
          std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100](v1 + 16);
          JUMPOUT(0x223C249A0);
        }
      }
    }
  }
  return result;
}

void io_rings_setup()
{
}

void sub_21E2C2B9C(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x1020C4030AEDD8CLL);
  _Unwind_Resume(a1);
}

uint64_t io_rings_get_supported_features(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1) {
    return 4294967194;
  }
  uint64_t result = 4294967274;
  if (a2)
  {
    if (a3)
    {
      bzero(a2, 8 * a3);
      uint64_t result = 0;
      *a2 = 2;
    }
  }
  return result;
}

uint64_t io_rings_get_num_sqes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t io_rings_get_num_cqes(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 312) - 1);
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3) {
    return 4294967194;
  }
  if (*(_DWORD *)(a1 + 712) == 2) {
    return 4294967207;
  }
  return io_rings_t<unsigned int,true>::enter(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t sqe = io_rings_sq_t::allocate_sqe((io_rings_sq_t *)(a1 + 16));
  if (sqe)
  {
    *(_DWORD *)(sqe + 1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    double result = 0.0;
    *(_OWORD *)(sqe + 24) = 0u;
    *(_OWORD *)(sqe + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
    *(_OWORD *)(sqe + 56) = 0u;
    *(_OWORD *)(sqe + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0u;
    *(_DWORD *)(sqe + 1) = 0;
    *(_DWORD *)(sqe + 4) = 0;
  }
  return result;
}

uint64_t io_rings_sq_t::allocate_sqe(io_rings_sq_t *this)
{
  uint64_t v2 = bitmap_allocator<unsigned long,(std::memory_order)4>::allocate((void *)this + 13);
  if (v2 < 0) {
    return 0;
  }
  atomic_fetch_add((atomic_uint *volatile)this + 12, 1u);
  *(_DWORD *)(*((void *)this + 3)
            + 4 * (*((_DWORD *)this + 11) & atomic_fetch_add((atomic_uint *volatile)this + 2, 1u))) = v2;
  return *((void *)this + 12) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return io_rings_cq_t::pop_cqe((unsigned int **)(a1 + 272));
}

uint64_t io_rings_cq_t::pop_cqe(unsigned int **this)
{
  if (*((unsigned char *)this + 96))
  {
    unsigned int v2 = atomic_load(*this);
    *((_DWORD *)this + 23) = v2;
    __dmb(9u);
    *((unsigned char *)this + 96) = 0;
  }
  unsigned int v3 = atomic_load(this[2]);
  io_rings_t<io_rings_cqe_t,true>::pop_elem_at_tail((uint64_t)this, (uint64_t)&v5);
  if (!v7) {
    return 0;
  }
  if (v3 == *((_DWORD *)this + 23)) {
    *((unsigned char *)this + 96) = 1;
  }
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  return result;
}

uint64_t io_rings_create_mkey()
{
  return 4294967194;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712)) {
    return 4294967274;
  }
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 16);
  if (!v3 || (uint64_t result = v3(), !result))
  {
    object_subscribers_t<16ul>::suspend_all(a1 + 448);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 71std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 1;
  }
  return result;
}

uint64_t io_rings_resume(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return 4294967274;
  }
  uint64_t v2 = a1 + 448;
  object_subscribers_t<16ul>::resume_all(a1 + 448);
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 24);
  if (v3 && (uint64_t v4 = v3(), v4))
  {
    uint64_t v5 = v4;
    object_subscribers_t<16ul>::suspend_all(v2);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 71std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  }
  return v5;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return -16;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 8);
  if (v2 && (int v3 = v2()) != 0)
  {
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 71std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 2;
    unint64_t v7 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
    if ((v7 & 0xFF00000000) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v8 = *(void *)(a1 + 112);
        if (!v8) {
          break;
        }
        uint64_t v9 = v8 + 88 * v7;
        io_rings_cq_t::enter(a1 + 272, *(void *)(v9 + 16), 0x1FFFFFFA7, 0);
        unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - *(void *)(a1 + 112)) >> 3);
        atomic_fetch_or((atomic_ullong *volatile)(*(void *)(a1 + 128) + 8 * (v10 >> 6)), 1 << v10);
        ++v5;
        unint64_t v7 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
      }
      while ((v7 & 0xFF00000000) != 0);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t io_rings_pop_sqe(uint64_t a1)
{
  unint64_t v2 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
  if ((v2 & 0xFF00000000) != 0) {
    return *(void *)(a1 + 112) + 88 * v2;
  }
  else {
    return 0;
  }
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
}

void object_subscribers_t<16ul>::unsubscribe(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  std::atomic_store[abi:ne180100]<io_rings_subscriber_t>((uint64_t *)(a1 + 16 * a2), &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_21E2C302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_release(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 712) == 2) {
      return io_rings_desc_free(result);
    }
  }
  return result;
}

uint64_t io_rings_cq_t::enter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __dmb(0xBu);
  uint64_t result = io_rings_t<io_rings_cqe_t,true>::insert_elem_safe(a1, a2, a3);
  if (result)
  {
    if (result == -28)
    {
      if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 100), 1u)) {
        std::function<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()(a1 + 104, 0, 4);
      }
      return 4294967268;
    }
  }
  else
  {
    return io_rings_t<unsigned int,true>::enter(a1, 1, a4);
  }
  return result;
}

BOOL io_rings_sqe_is_barrier(unsigned __int8 *a1)
{
  return *a1 == 5;
}

void io_rings_subscriber_subscribe(uint64_t a1, uint64_t a2)
{
}

void object_subscribers_t<16ul>::subscribe(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<io_rings_subscriber_t>::shared_ptr[abi:ne180100]<io_rings_subscriber_t,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t*)#1},void>(&v2, a2);
}

void sub_21E2C31AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8 = linked_elem_db_t::consume_elem((std::mutex *)(a1 + 144), (const void *)a2);
  __int16 v9 = *(_WORD *)(a2 + 2);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *(void *)(a1 + 112)) >> 3);
  atomic_fetch_or((atomic_ullong *volatile)(*(void *)(a1 + 128) + 8 * (v11 >> 6)), 1 << v11);
  if ((v9 & 4) != 0) {
    int v12 = 0;
  }
  else {
    int v12 = v8;
  }
  return io_rings_cq_t::enter(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v12);
}

void io_rings_consumer_single_sqe_execute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    uint64_t v5 = 0;
    int v6 = 0;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }
  std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16 * v4 + 448), &v5);
  if (!v5) {
    goto LABEL_6;
  }
  if (!(*(unsigned int (**)(void))v5)()) {
    (*(void (**)(void))(v5 + 8))();
  }
LABEL_7:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_21E2C332C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void io_rings_subscriber_get(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 < 5)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16 * a2 + 448), a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

uint64_t io_rings_parse_and_execute_sqe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 2) & 0xFFFA) != 0) {
    return 4294967194;
  }
  switch(*(unsigned char *)a3)
  {
    case 0:
      return 0;
    case 1:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 64);
      goto LABEL_9;
    case 2:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 80);
      goto LABEL_9;
    case 3:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 72);
      goto LABEL_9;
    case 4:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 88);
LABEL_9:
      uint64_t result = v4();
      break;
    case 5:
      if (*(_DWORD *)(a3 + 24) > 3u) {
        return 4294967194;
      }
      uint64_t result = (*(uint64_t (**)(void))(a1 + 104))();
      break;
    case 6:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a1 + 96))(a1, a2, *(unsigned int *)(a3 + 32), *(void *)(a3 + 24));
      break;
    default:
      return 4294967194;
  }
  return result;
}

uint64_t (**io_rings_subscriber_sync_init(uint64_t (**result)(uint64_t a1, uint64_t a2), uint64_t (*a2)(uint64_t a1, uint64_t a2)))(uint64_t a1, uint64_t a2)
{
  *uint64_t result = io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_0::__invoke;
  result[1] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_1::__invoke;
  result[2] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_2::__invoke;
  result[3] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_3::__invoke;
  result[4] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_4::__invoke;
  result[5] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_5::__invoke;
  result[6] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_6::__invoke;
  result[7] = a2;
  return result;
}

void object_subscribers_t<16ul>::suspend_all(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + i), &v3);
    if (v3) {
      (*(void (**)(void))(v3 + 24))();
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_21E2C34F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void object_subscribers_t<16ul>::resume_all(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + i), &v3);
    if (v3) {
      (*(void (**)(void))(v3 + 32))();
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_21E2C356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void io_rings_subscribers_cancel_all(uint64_t a1)
{
}

void object_subscribers_t<16ul>::cancel_all(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + i), &v3);
    if (v3) {
      (*(void (**)(void))(v3 + 40))();
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_21E2C35EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void linked_elem_db_t::add_elem_to_chain(std::mutex *this, const void *a2, int a3, int a4)
{
  std::mutex::lock(this);
  uint64_t v8 = *(void *)&this[1].__m_.__opaque[40];
  if (a3)
  {
    if (v8) {
      *(unsigned char *)(v8 + 4) = 1;
    }
    operator new();
  }
  if (a4 && v8) {
    *(unsigned char *)(v8 + 4) = 1;
  }
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  uint64_t v9 = *(void *)&this[1].__m_.__opaque[40];
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = v9;
  std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__emplace_unique_key_args<void const*,std::pair<void const*,linked_elem_db_t::node_t *>>((uint64_t)&this[1], &v10, &v10);
  if (a4) {
    *(void *)&this[1].__m_.__opaque[40] = 0;
  }
  ++*(void *)&this[1].__m_.__opaque[32];
  std::mutex::unlock(this);
}

void sub_21E2C36CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t linked_elem_db_t::consume_elem(std::mutex *this, const void *a2)
{
  int v6 = a2;
  if (*(void *)&this[1].__m_.__opaque[32])
  {
    std::mutex::lock(this);
    uint64_t v3 = std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::find<void const*>(&this[1].__m_.__sig, &v6);
    if (v3)
    {
      --*(void *)&this[1].__m_.__opaque[32];
      uint64_t v4 = v3[3];
      std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::erase(&this[1].__m_.__sig, v3);
      std::mutex::unlock(this);
      if (v4)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) != 1 || !*(unsigned char *)(v4 + 4)) {
          return 0;
        }
        MEMORY[0x223C249A0](v4, 0x1000C4090D0E795);
      }
    }
    else
    {
      std::mutex::unlock(this);
    }
  }
  return 1;
}

void sub_21E2C37A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void io_rings_consumer_add_linked_sqe(uint64_t a1, const void *a2, int a3)
{
  linked_elem_db_t::add_elem_to_chain((std::mutex *)(a1 + 144), a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(PluginsManager *a1, uint64_t a2)
{
  uint64_t v4 = PluginsManager::get(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  uint64_t v5 = PluginsManager::register_plugin(v4, (uint64_t)__p, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_21E2C3848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_plugin_release(PluginsManager *a1)
{
  uint64_t v2 = PluginsManager::get(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  PluginsManager::release_plugin(v2, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21E2C38BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::mutex *std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100](std::mutex *result)
{
  if (result[3].__m_.__opaque[48])
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 2;
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table((uint64_t)&result[3]);
    std::mutex::~mutex(v2);
    uint64_t v3 = *(void *)&v1[1].__m_.__opaque[40];
    *(void *)&v1[1].__m_.__opaque[40] = 0;
    if (v3) {
      MEMORY[0x223C24980](v3, 0x1000C8000313F17);
    }
    uint64_t result = (std::mutex *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v1->__m_.__opaque[48]);
    v1[3].__m_.__opaque[48] = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CF2B1F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF2B1F8;
  a2[1] = v2;
  return result;
}

uint64_t (**std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::operator()(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (***)(void))(*(void *)(a1 + 8) + 704);
  if (*result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::target_type()
{
}

void io_rings_sq_t::io_rings_sq_t(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v8 = a4;
  *(void *)&long long v10 = a2 + 88 * a4;
  *((void *)&v10 + 1) = a5;
  uint64_t v9 = io_rings_t<unsigned int,true>::io_rings_t(a1, a2 + 4 * a5 + 88 * a4, a3 + 16 * a6 + 4, &v10, a5, a7);
  *(void *)(v9 + 96) = a2;
  bitmap_allocator<unsigned long,(std::memory_order)4>::bitmap_allocator((void *)(v9 + 104), v8);
}

void sub_21E2C3BBC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t io_rings_t<unsigned int,true>::io_rings_t(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    char v7 = 0;
    unsigned int v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }
    while (v8 != 1);
    a5 = 1 << v7;
  }
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 56, a6);
  *(_WORD *)(a1 + 88) = 1;
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void bitmap_allocator<unsigned long,(std::memory_order)4>::bitmap_allocator(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new[]();
}

void *std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100](void *result)
{
  if (*((unsigned char *)result + 136))
  {
    uint64_t v1 = result;
    std::__function::__value_func<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::~__value_func[abi:ne180100](result + 13);
    uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v1 + 7);
    *((unsigned char *)v1 + 136) = 0;
  }
  return result;
}

void *std::__function::__value_func<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CF2B288;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF2B288;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(result + 432);
  if (v2) {
    return v2(result, *(void *)(result + 440));
  }
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::~__func()
{
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CF2B308;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF2B308;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  char v4 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(result + 416);
  if (v4) {
    return v4(result, *(void *)(result + 424), *a2, a3);
  }
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::target_type()
{
}

uint64_t io_rings_cq_t::io_rings_cq_t(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  *(void *)&long long v12 = a3;
  *((void *)&v12 + 1) = a6;
  uint64_t v10 = io_rings_t<unsigned int,true>::io_rings_t(a1, a3 + 16 * a6, 4 * a5 + 88 * a4 + a2 + 4, &v12, a6, a7);
  *(unsigned char *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 10std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  std::__function::__value_func<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__value_func[abi:ne180100](v10 + 104, a8);
  return a1;
}

void sub_21E2C40E8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    std::__function::__value_func<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::~__value_func[abi:ne180100]((void *)(a1 + 104));
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  }
  return a1;
}

uint64_t std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 248))
  {
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    uint64_t v2 = *(void *)(a1 + 112);
    *(void *)(a1 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    if (v2) {
      MEMORY[0x223C24980](v2, 0x1000C8000313F17);
    }
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  }
  return a1;
}

void std::default_delete<io_rings_desc_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 704);
    *(void *)(a2 + 704) = 0;
    if (v3) {
      (*(void (**)(void))(v3 + 32))();
    }
    uint64_t v4 = 696;
    while (1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a2 + v4);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v4 -= 16;
      if (v4 == 440)
      {
        std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100](a2 + 272);
        std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100](a2 + 16);
        JUMPOUT(0x223C249A0);
      }
    }
  }
}

uint64_t $_5::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::signal_work(*(GCDPool **)(a1 + 48));
}

uint64_t $_6::__invoke<io_rings_consumer_t *,BOOL>(uint64_t a1)
{
  return 0;
}

uint64_t $_7::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::suspend(*(GCDPool **)(a1 + 48));
}

uint64_t $_8::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::resume(*(GCDPool **)(a1 + 48));
}

uint64_t $_9::__invoke<io_rings_consumer_t *>(uint64_t result)
{
  if (result)
  {
    std::unique_ptr<GCDPool>::reset[abi:ne180100]((uint64_t *)(result + 48), 0);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t *std::unique_ptr<GCDPool>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    gcd::gcd_group::~gcd_group((NSObject **)(v2 + 16));
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t io_rings_t<unsigned int,true>::enter(uint64_t a1, int a2, int a3)
{
  int v4 = *(_DWORD *)(a1 + 52);
  int v5 = v4;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), (unsigned int *)&v5, (v4 + 2 * a2) | a3);
  if (v5 != v4)
  {
    int v6 = v5;
    do
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), (unsigned int *)&v6, (v5 + 2 * a2) | a3);
      BOOL v13 = v6 == v5;
      int v5 = v6;
    }
    while (!v13);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 48), -a2) == a2
    && (atomic_exchange((atomic_uchar *volatile)(a1 + 89), 1u) & 1) == 0)
  {
    while (1)
    {
      unsigned int v7 = *(_DWORD *)(a1 + 52);
      if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
        break;
      }
      unsigned int v8 = v7;
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v8, 0);
      if (v8 == v7)
      {
        unint64_t v9 = (v7 >> 1) | ((unint64_t)(v7 & 1) << 32);
        goto LABEL_11;
      }
    }
    unint64_t v9 = 0;
LABEL_11:
    unint64_t v10 = HIDWORD(v9);
    if (v9)
    {
LABEL_12:
      __dmb(0xBu);
      int v11 = v9 + atomic_fetch_add(*(atomic_uint *volatile *)a1, v9);
      unsigned int v12 = atomic_load(*(unsigned int **)(a1 + 16));
      BOOL v13 = v11 == v12 || v10 == 0;
      if (!v13)
      {
        int v14 = 1;
        atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 88), (unsigned __int8 *)&v14, 0);
        if (v14 == 1)
        {
          uint64_t v15 = *(void *)(a1 + 80);
          if (!v15) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t))(*(void *)v15 + 48))(v15);
        }
      }
      while (1)
      {
        unsigned int v16 = *(_DWORD *)(a1 + 52);
        if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
          break;
        }
        unsigned int v17 = v16;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v17, 0);
        if (v17 == v16)
        {
          LODWORD(v9) = v16 >> 1;
          LODWORD(v1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v16 & 1;
          if (v16 > 1) {
            goto LABEL_12;
          }
          break;
        }
      }
    }
LABEL_22:
    atomic_store(0, (unsigned __int8 *)(a1 + 89));
    __dmb(0xBu);
    if (*(_DWORD *)(a1 + 52))
    {
      while (2)
      {
        if ((atomic_exchange((atomic_uchar *volatile)(a1 + 89), 1u) & 1) == 0)
        {
          while (1)
          {
            unsigned int v18 = *(_DWORD *)(a1 + 52);
            if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
              break;
            }
            unsigned int v19 = v18;
            atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v19, 0);
            if (v19 == v18)
            {
              if (v18 > 1)
              {
                LODWORD(v1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v18 & 1;
                LODWORD(v9) = v18 >> 1;
                if (v9) {
                  goto LABEL_12;
                }
                goto LABEL_22;
              }
              break;
            }
          }
          atomic_store(0, (unsigned __int8 *)(a1 + 89));
          __dmb(0xBu);
          if (*(_DWORD *)(a1 + 52) && !atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
            continue;
          }
        }
        break;
      }
    }
  }
  return 0;
}

uint64_t bitmap_allocator<unsigned long,(std::memory_order)4>::allocate(void *a1)
{
  unint64_t v1 = *a1 + 63;
  if (v1 >= 0x40)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    int v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          unint64_t v6 = atomic_load(v3);
          if (!v6) {
            break;
          }
          unint64_t v7 = __clz(__rbit64(v6));
          if ((atomic_fetch_and((atomic_ullong *volatile)v3, ~(1 << v7)) & (1 << v7)) != 0) {
            return v7 + 8 * ((void)v3 - a1[1]);
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return -1;
}

uint64_t io_rings_t<io_rings_cqe_t,true>::pop_elem_at_tail@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  while (1)
  {
    unsigned int v2 = atomic_load(*(unsigned int **)result);
    unsigned int v3 = atomic_load(*(unsigned int **)(result + 16));
    if (v2 == v3)
    {
      if (atomic_exchange((atomic_uchar *volatile)(result + 88), 1u)) {
        break;
      }
      unsigned int v4 = atomic_load(*(unsigned int **)result);
      unsigned int v5 = atomic_load(*(unsigned int **)(result + 16));
      if (v4 == v5) {
        break;
      }
      int v6 = 1;
      atomic_compare_exchange_strong((atomic_uchar *volatile)(result + 88), (unsigned __int8 *)&v6, 0);
      if (v6 != 1) {
        break;
      }
    }
    uint64_t v7 = atomic_load(*(unsigned int **)(result + 16));
    unsigned int v8 = atomic_load(*(unsigned int **)result);
    if (v7 != v8)
    {
      uint64_t v9 = v7;
      atomic_compare_exchange_strong(*(atomic_uint *volatile *)(result + 16), (unsigned int *)&v9, v7 + 1);
      if (v9 == v7) {
        goto LABEL_11;
      }
      while (1)
      {
        LODWORD(v7) = v9;
        unsigned int v8 = atomic_load(*(unsigned int **)result);
        if (v9 == v8) {
          break;
        }
        uint64_t v10 = v9;
        atomic_compare_exchange_strong(*(atomic_uint *volatile *)(result + 16), (unsigned int *)&v10, v9 + 1);
        BOOL v11 = v10 == v9;
        uint64_t v9 = v10;
        if (v11) {
          goto LABEL_11;
        }
      }
    }
    unsigned int v8 = v7;
LABEL_11:
    if (v7 != v8)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(void *)(result + 24) + 16 * (*(_DWORD *)(result + 44) & v7));
      char v12 = 1;
      goto LABEL_14;
    }
  }
  char v12 = 0;
  *(unsigned char *)a2 = 0;
LABEL_14:
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

unint64_t io_rings_t<unsigned int,true>::pop_elem_at_tail(uint64_t a1)
{
  unsigned int v1 = atomic_load(*(unsigned int **)a1);
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2
    && ((atomic_exchange((atomic_uchar *volatile)(a1 + 88), 1u) & 1) != 0
     || (unsigned int v3 = atomic_load(*(unsigned int **)a1), v4 = atomic_load(*(unsigned int **)(a1 + 16)), v3 == v4)
     || (int v5 = 1, atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 88), (unsigned __int8 *)&v5, 0), v5 != 1)))
  {
    LOBYTE(a1) = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    int v11 = 0;
  }
  else
  {
    uint64_t v6 = atomic_load(*(unsigned int **)(a1 + 16));
    unsigned int v7 = atomic_load(*(unsigned int **)a1);
    if (v6 != v7)
    {
      uint64_t v8 = v6;
      atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 16), (unsigned int *)&v8, v6 + 1);
      if (v8 == v6)
      {
LABEL_10:
        if (v6 != v7)
        {
          unint64_t v12 = 0;
          LODWORD(a1) = *(_DWORD *)(*(void *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 44) & v6));
          int v11 = a1 & 0xFFFFFF00;
          uint64_t v13 = 0x100000000;
          return v13 | v12 | v11 | a1;
        }
      }
      else
      {
        while (1)
        {
          unsigned int v7 = atomic_load(*(unsigned int **)a1);
          if (v8 == v7) {
            break;
          }
          LODWORD(v6) = v8;
          uint64_t v9 = v8;
          atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 16), (unsigned int *)&v9, v8 + 1);
          BOOL v10 = v9 == v8;
          uint64_t v8 = v9;
          if (v10) {
            goto LABEL_10;
          }
        }
      }
    }
    a1 = io_rings_t<unsigned int,true>::pop_elem_at_tail();
    int v11 = a1 & 0xFFFFFF00;
    unint64_t v12 = a1 & 0xFFFFFF0000000000;
    uint64_t v13 = a1 & 0xFF00000000;
  }
  return v13 | v12 | v11 | a1;
}

uint64_t io_rings_t<io_rings_cqe_t,true>::insert_elem_safe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 1u);
  uint64_t v3 = atomic_load((unsigned int *)(a1 + 8));
  unsigned int v4 = atomic_load(*(unsigned int **)(a1 + 16));
  int v5 = v4 - v3;
  while (v5 != 1 && v5 != 1 - *(_DWORD *)(a1 + 40))
  {
    uint64_t v6 = v3;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 8), (unsigned int *)&v6, v3 + 1);
    if (v6 == v3)
    {
      uint64_t v8 = 0;
      BOOL v10 = (void *)(*(void *)(a1 + 24) + 16 * (*(_DWORD *)(a1 + 44) & v3));
      void *v10 = a2;
      v10[1] = a3;
      return v8;
    }
    unsigned int v7 = atomic_load(*(unsigned int **)(a1 + 16));
    int v5 = v7 - v6;
    uint64_t v3 = v6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 0xFFFFFFFF) == 1) {
    io_rings_t<unsigned int,true>::enter(a1, 0, 1);
  }
  return 4294967268;
}

uint64_t std::function<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()(uint64_t a1, int a2, int a3)
{
  int v6 = a3;
  int v5 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48))(v3, &v5, &v6);
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = io_rings_parse_and_execute_sqe(a1, 0, a2);
  uint64_t v5 = *(void *)(a1 + 56);
  return io_rings_return_status(v5, a2, v4, 0);
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_2::__invoke()
{
  return 0;
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_6::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

void std::atomic_store[abi:ne180100]<io_rings_subscriber_t>(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

BOOL std::atomic_compare_exchange_strong[abi:ne180100]<io_rings_subscriber_t>(uint64_t *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    if (v13)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      int v14 = (std::__shared_weak_count *)a1[1];
      *a1 = v12;
      a1[1] = v13;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    else
    {
      *a1 = v12;
      a1[1] = 0;
    }
    uint64_t v15 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      int v11 = (std::__shared_weak_count *)a2[1];
      *a2 = v9;
      a2[1] = v10;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    else
    {
      *a2 = v9;
      a2[1] = 0;
    }
    uint64_t v15 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v7 == v8;
}

void std::shared_ptr<io_rings_subscriber_t>::shared_ptr[abi:ne180100]<io_rings_subscriber_t,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E2C4B6C(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(v1 + 48))(v1);
  __cxa_rethrow();
}

void sub_21E2C4B84(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::atomic_load[abi:ne180100]<io_rings_subscriber_t>(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
}

void *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__emplace_unique_key_args<void const*,std::pair<void const*,linked_elem_db_t::node_t *>>(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  __int16 v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *__int16 v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    __int16 v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21E2C4EE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v1std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::find<void const*>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t GCDPool::GCDPool(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 8) = a2;
  gcd::gcd_queue::gcd_queue(a1 + 16, "rings_queue", 2);
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void GCDPool::exec_sync(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 1) {
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  }
  else {
    io_rings_consumer_single_sqe_execute(v3, a2);
  }
}

uint64_t GCDPool::signal_work(GCDPool *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this);
  if (v1 != 2) {
    return 0;
  }
  int v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  uint8x8_t v6 = 0;
  unint64_t v7 = (dispatch_queue_t *)((char *)this + 16);
  do
  {
    unint64_t v8 = (_WORD *)io_rings_pop_sqe(*((void *)this + 1));
    uint64_t v9 = (uint64_t)v8;
    if (!v8) {
      break;
    }
    __dmb(9u);
    if (v8[1])
    {
      int v10 = 1;
      goto LABEL_8;
    }
    if (*((unsigned char *)this + 24))
    {
      int v10 = 2;
LABEL_8:
      if (*((unsigned char *)this + 24)) {
        int v11 = v10;
      }
      else {
        int v11 = 0;
      }
      io_rings_consumer_add_linked_sqe(*((void *)this + 1), v8, v11);
      char v12 = *(unsigned char *)(v9 + 2);
      goto LABEL_12;
    }
    char v12 = v8[1];
LABEL_12:
    *((unsigned char *)this + 24) = v12 & 1;
    io_rings_subscriber_get(*((void *)this + 1), *(_DWORD *)(v9 + 8), &v18);
    if (v18)
    {
      if (v3 && *(_DWORD *)(v9 + 8) != v4)
      {
        (*(void (**)(uint64_t))(v5 + 8))(v5);
        if (v6)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          uint8x8_t v6 = 0;
        }
        uint64_t v5 = 0;
        int v3 = 0;
      }
      if ((*(unsigned int (**)(void))(v18 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v18)(v18, v9);
        if (!v5)
        {
          int v4 = *(_DWORD *)(v9 + 8);
          uint64_t v5 = v18;
          unint64_t v13 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v6) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          }
          int v3 = 1;
          uint8x8_t v6 = v13;
        }
      }
      else if (io_rings_sqe_is_barrier((unsigned __int8 *)v9))
      {
        v17[0] = MEMORY[0x263EF8330];
        v17[1] = 0x40000000;
        void v17[2] = ___ZN7GCDPool11signal_workEv_block_invoke;
        v17[3] = &__block_descriptor_tmp_2;
        v17[4] = this;
        v17[5] = v9;
        gcd::gcd_queue::barrier_async(v7, v17);
      }
      else
      {
        v16[0] = MEMORY[0x263EF8330];
        v16[1] = 0x40000000;
        void v16[2] = ___ZN7GCDPool11signal_workEv_block_invoke_3;
        v16[3] = &__block_descriptor_tmp_3_0;
        v16[4] = this;
        void v16[5] = v9;
        gcd::gcd_queue::async(v7, v16);
      }
    }
    else
    {
      io_rings_return_status(*((void *)this + 1), v9, 0xFFFFFFFA, 0);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    unsigned int v14 = atomic_load((unsigned int *)this);
  }
  while (v14 == 2);
  if (v3) {
    (*(void (**)(uint64_t))(v5 + 8))(v5);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return 0;
}

void sub_21E2C5678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN7GCDPool11signal_workEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(v1 + 8);
    io_rings_return_status(v4, v3, 0xFFFFFFA7, 0);
  }
  else
  {
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 0x40000000;
    uint64_t v6[2] = ___ZN7GCDPool11signal_workEv_block_invoke_2;
    void v6[3] = &__block_descriptor_tmp_2;
    uint64_t v5 = *(void *)(a1 + 40);
    v6[4] = v1;
    void v6[5] = v5;
    gcd::gcd_queue::async((dispatch_queue_t *)(v1 + 16), v6);
  }
}

void ___ZN7GCDPool11signal_workEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  GCDPool::exec_sync(v1, *(void *)(a1 + 40));
}

void ___ZN7GCDPool11signal_workEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  GCDPool::exec_sync(v1, *(void *)(a1 + 40));
}

uint64_t GCDPool::suspend(GCDPool *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this);
  if (v1 != 2) {
    return 4294967260;
  }
  atomic_store(0, (unsigned int *)this);
  gcd::gcd_queue::suspend((dispatch_object_t *)this + 2);
  return 0;
}

void GCDPool::cancel(GCDPool *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this);
  if (v1 != 1)
  {
    if (atomic_exchange((atomic_uint *volatile)this, 1u) == 2) {
      gcd::gcd_queue::suspend((dispatch_object_t *)this + 2);
    }
    io_rings_subscribers_cancel_all(*((void *)this + 1));
    gcd::gcd_queue::resume((dispatch_object_t *)this + 2);
    GCDPool::signal_work(this);
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 2, &__block_literal_global_6);
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 2, &__block_literal_global_7);
  }
}

uint64_t GCDPool::resume(GCDPool *this)
{
  if (atomic_load((unsigned int *)this)) {
    return 4294967274;
  }
  atomic_store(2u, (unsigned int *)this);
  gcd::gcd_queue::resume((dispatch_object_t *)this + 2);
  GCDPool::signal_work(this);
  return 0;
}

void populate_backends_info(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      get_next_backend_in_graph((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      uint8x8_t v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
}

{
  std::__shared_weak_count *v3;
  long long v4;
  long long v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  long long v8;
  long long v9;

  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      get_next_backend_in_graph((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      uint8x8_t v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
}

{
  std::__shared_weak_count *v3;
  long long v4;
  long long v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  long long v8;
  long long v9;

  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      get_next_backend_in_graph((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      uint8x8_t v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
}

{
  std::__shared_weak_count *v3;
  long long v4;
  long long v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  long long v8;
  long long v9;

  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      get_next_backend_in_graph((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      uint8x8_t v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_21E2C59BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

info::DiskImageInfoRaw *info::DiskImageInfoRaw::DiskImageInfoRaw(info::DiskImageInfoRaw *this, const DiskImageRaw *a2)
{
  *((void *)this + 3) = &unk_26CF2C060;
  *((void *)this + 4) = &unk_26CF2C090;
  *((void *)this + 5) = &unk_26CF2C0C0;
  *((void *)this + 6) = &unk_26CF2C0F0;
  *(void *)this = off_26CF2BAE8;
  *((void *)this + 1) = off_26CF2BB30;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2BB78;
  *(void *)((char *)this + unk_26CF2BACstd::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2BBC0;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2BC08;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2BC50;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2BC98;
  *(void *)this = off_26CF2B8C0;
  *((void *)this + 1) = off_26CF2B908;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2B950;
  *(void *)((char *)this + unk_26CF2B898) = off_26CF2B998;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2B9E0;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2BA28;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2BA70;
  *((unsigned char *)this + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  *((void *)this + 18) = 0;
  *(void *)this = &unk_26CF2B4A0;
  *((void *)this + 1) = &unk_26CF2B4E8;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = &unk_26CF2B530;
  *((void *)this + 3) = &unk_26CF2B578;
  *((void *)this + 4) = &unk_26CF2B5C0;
  *((void *)this + 5) = &unk_26CF2B608;
  *((void *)this + 6) = &unk_26CF2B650;
  *((void *)this + 7) = &unk_26CF2B6B0;
  *((void *)this + 15) = &unk_26CF2B720;
  long long v4 = (void *)((char *)a2 + 16);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 40))(*((void *)a2 + 2));
  uint64_t v6 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 8) = v5;
  *(void *)((char *)this + *(void *)(v6 - 112) + 56) = 0;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 16) = (*(uint64_t (**)(const DiskImageRaw *))(*(void *)a2 + 32))(a2);
  uint64_t v7 = (*(uint64_t (**)(const DiskImageRaw *))(*(void *)a2 + 24))(a2);
  long long v8 = (char *)this + *(void *)(*(void *)this - 112);
  if (!v8[32]) {
    v8[32] = 1;
  }
  *((void *)v8 + 3) = v7;
  populate_backends_info(v4, (uint64_t)this + *(void *)(*(void *)this - 104));
  return this;
}

void sub_21E2C5F4C(_Unwind_Exception *a1)
{
  info::EncryptionInfo::~EncryptionInfo(v1, (const void **)&off_26CF2B840);
  _Unwind_Resume(a1);
}

void info::EncryptionInfo::~EncryptionInfo(const void **this, const void **a2)
{
  unsigned int v2 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v2 - 3)) = a2[3];
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 3);
}

info::DiskImageInfoRaw *info::DiskImageInfoRaw::DiskImageInfoRaw(info::DiskImageInfoRaw *this, const DiskImageROChunkRaw *a2)
{
  *((void *)this + 3) = &unk_26CF2C060;
  *((void *)this + 4) = &unk_26CF2C090;
  *((void *)this + 5) = &unk_26CF2C0C0;
  *((void *)this + 6) = &unk_26CF2C0F0;
  *(void *)this = off_26CF2BAE8;
  *((void *)this + 1) = off_26CF2BB30;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2BB78;
  *(void *)((char *)this + unk_26CF2BACstd::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2BBC0;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2BC08;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2BC50;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2BC98;
  *(void *)this = off_26CF2B8C0;
  *((void *)this + 1) = off_26CF2B908;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2B950;
  *(void *)((char *)this + unk_26CF2B898) = off_26CF2B998;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2B9E0;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2BA28;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2BA70;
  *((unsigned char *)this + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  *((void *)this + 18) = 0;
  *(void *)this = &unk_26CF2B4A0;
  *((void *)this + 1) = &unk_26CF2B4E8;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = &unk_26CF2B530;
  *((void *)this + 3) = &unk_26CF2B578;
  *((void *)this + 4) = &unk_26CF2B5C0;
  *((void *)this + 5) = &unk_26CF2B608;
  *((void *)this + 6) = &unk_26CF2B650;
  *((void *)this + 7) = &unk_26CF2B6B0;
  *((void *)this + 15) = &unk_26CF2B720;
  long long v4 = (void *)((char *)a2 + 16);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 40))(*((void *)a2 + 2));
  uint64_t v6 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 8) = v5;
  uint64_t v7 = (char *)this + *(void *)(v6 - 112);
  *((void *)v7 + 5) = *((void *)v7 + 1);
  v7[48] = 1;
  long long v8 = (char *)this + *(void *)(*(void *)this - 112);
  *((void *)v8 + 3) = *((void *)v8 + 1);
  v8[32] = 1;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 56) = 0;
  uint64_t v9 = (*(uint64_t (**)(const DiskImageROChunkRaw *))(*(void *)a2 + 32))(a2);
  uint64_t v10 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 16) = v9;
  populate_backends_info(v4, (uint64_t)this + *(void *)(v10 - 104));
  return this;
}

void sub_21E2C6578(_Unwind_Exception *a1)
{
  info::EncryptionInfo::~EncryptionInfo(v1, (const void **)&off_26CF2B840);
  _Unwind_Resume(a1);
}

uint64_t info::details::InfoNullGetter<info::SizeInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::CompressionInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::EncryptionInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::MasterChecksumInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::ASIFInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::IdentityInfo>::get()
{
  return 0;
}

{
  return 0;
}

void info::SizeInfo::~SizeInfo(info::SizeInfo *this)
{
}

const void **info::SizeInfo::serialize_to_dict@<X0>(info::SizeInfo *this@<X0>, void *a2@<X8>)
{
  v16[1] = *(const void **)MEMORY[0x263EF8340];
  cf::make_empty_dict((CFMutableDictionaryRef *)&v7);
  uint64_t valuePtr = *((void *)this + 1);
  uint64_t v9 = (__CFString **)@"Total Bytes";
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v10 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
  int v11 = @"Sector Count";
  uint64_t valuePtr = *((void *)this + 2);
  CFNumberRef v12 = 0;
  CFNumberRef v12 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  unint64_t v13 = @"Empty Bytes";
  uint64_t valuePtr = *((void *)this + 7);
  CFNumberRef v14 = 0;
  CFNumberRef v14 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  float v15 = (__CFString *)&v9;
  v16[0] = (const void *)3;
  cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v15);
  for (uint64_t i = 5; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v9)[i]);
  if (*((unsigned char *)this + 48))
  {
    float v15 = @"Max Size Bytes";
    uint64_t valuePtr = *((void *)this + 5);
    v16[0] = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
    uint64_t v9 = &v15;
    uint64_t v10 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v9);
    CFAutoRelease<void const*>::~CFAutoRelease(v16);
  }
  if (*((unsigned char *)this + 32))
  {
    float v15 = @"Min Size Bytes";
    uint64_t valuePtr = *((void *)this + 3);
    v16[0] = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
    uint64_t v9 = &v15;
    uint64_t v10 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v9);
    CFAutoRelease<void const*>::~CFAutoRelease(v16);
  }
  *a2 = v7;
  uint64_t v7 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v7);
}

void sub_21E2C67F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21E2C6874()
{
}

__CFString *info::SizeInfo::get_category(info::SizeInfo *this)
{
  return @"Size Info";
}

void virtual thunk to'info::SizeInfo::~SizeInfo(info::SizeInfo *this)
{
}

char *virtual thunk to'info::details::InfoTrait<info::SizeInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

{
  return (char *)a1 + *(void *)(*a1 - 40);
}

void info::EncryptionInfo::~EncryptionInfo(info::EncryptionInfo *this)
{
  *(void *)this = &unk_26CF2C128;
  *((void *)this + 4) = &unk_26CF2C180;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CF2C128;
  *((void *)this + 4) = &unk_26CF2C180;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  JUMPOUT(0x223C249A0);
}

const void **info::EncryptionInfo::serialize_to_dict@<X0>(info::EncryptionInfo *this@<X0>, void *a2@<X8>)
{
  v16[1] = *(const void **)MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 16)) {
    CFAllocatorRef v4 = (const void **)MEMORY[0x263EFFB40];
  }
  else {
    CFAllocatorRef v4 = (const void **)MEMORY[0x263EFFB38];
  }
  uint64_t v5 = *v4;
  float v15 = (uint64_t *)@"Is Encrypted";
  v16[0] = v5;
  uint64_t valuePtr = 0;
  int v11 = &v15;
  uint64_t v12 = 1;
  cf::create_dict_from_list((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  CFAutoRelease<void const*>::~CFAutoRelease(v16);
  CFAutoRelease<__CFBoolean const*>::~CFAutoRelease(&valuePtr);
  if (*((unsigned char *)this + 16))
  {
    uint64_t valuePtr = (const void *)*((void *)this + 1);
    int v11 = (uint64_t **)@"Key Size";
    uint64_t v12 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
    unint64_t v13 = @"UUID";
    uint64_t v6 = (const void *)*((void *)this + 3);
    CFNumberRef v14 = v6;
    if (v6) {
      CFRetain(v6);
    }
    float v15 = (uint64_t *)&v11;
    v16[0] = (const void *)2;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (uint64_t i = 3; i != -1; i -= 2)
      CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v11)[i]);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v9);
}

void sub_21E2C6B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

__CFString *info::EncryptionInfo::get_category(info::EncryptionInfo *this)
{
  return @"Encryption Info";
}

void virtual thunk to'info::EncryptionInfo::~EncryptionInfo(info::EncryptionInfo *this)
{
  unsigned int v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)unsigned int v1 = &unk_26CF2C128;
  *((void *)v1 + 4) = &unk_26CF2C180;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
}

{
  char *v1;
  uint64_t vars8;

  unsigned int v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)unsigned int v1 = &unk_26CF2C128;
  *((void *)v1 + 4) = &unk_26CF2C180;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  JUMPOUT(0x223C249A0);
}

char *virtual thunk to'info::details::InfoTrait<info::EncryptionInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

{
  return (char *)a1 + *(void *)(*a1 - 40);
}

void info::DiskImageInfoRaw::~DiskImageInfoRaw(info::DiskImageInfoRaw *this)
{
  *((void *)this + 15) = off_26CF2BEA0;
  *((void *)this + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
}

{
  uint64_t vars8;

  *((void *)this + 15) = off_26CF2BEA0;
  *((void *)this + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
  JUMPOUT(0x223C249A0);
}

const void **info::DiskImageInfoRaw::serialize_to_dict@<X0>(info::DiskImageInfoRaw *this@<X0>, void *a2@<X8>)
{
  v10[8] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoRaw *))(*(void *)this + 24))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"RAW read-write image";
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoRaw *)((char *)this + *(void *)(*(void *)this - 112)), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoRaw *)((char *)this + *(void *)(*(void *)this - 120)), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  long long v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 7; i != -1; i -= 2)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_21E2C6F44(_Unwind_Exception *a1)
{
  for (uint64_t i = 56; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

__CFString *info::DiskImageInfoRaw::get_category(info::DiskImageInfoRaw *this)
{
  return @"RAW";
}

const void **virtual thunk to'info::DiskImageInfoRaw::~DiskImageInfoRaw(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

void virtual thunk to'info::DiskImageInfoRaw::~DiskImageInfoRaw(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'info::DiskImageInfoRaw::~DiskImageInfoRaw(info::DiskImageInfoRaw *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 15) = off_26CF2BEA0;
  *((void *)v1 + 3) = off_26CF2BEF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

const void **virtual thunk to'info::DiskImageInfoRaw::serialize_to_dict@<X0>(info::DiskImageInfoRaw *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoRaw::serialize_to_dict((info::DiskImageInfoRaw *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageInfoRaw::get_category(info::DiskImageInfoRaw *this)
{
  return @"RAW";
}

const void **virtual thunk to'info::DiskImageInfoRaw::serialize_to_dict@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoRaw::serialize_to_dict((info::DiskImageInfoRaw *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageInfoRaw::get_category()
{
  return @"RAW";
}

void info::details::InfoNullGetter<info::EncryptionInfo>::~InfoNullGetter()
{
}

void info::details::InfoNullGetter<info::MasterChecksumInfo>::~InfoNullGetter()
{
}

void info::details::InfoNullGetter<info::ASIFInfo>::~InfoNullGetter()
{
}

void info::details::InfoNullGetter<info::IdentityInfo>::~InfoNullGetter()
{
}

const void **CFAutoRelease<__CFString const*>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **CFAutoRelease<void const*>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **CFAutoRelease<__CFDictionary *>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **CFAutoRelease<__CFBoolean const*>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void info::DiskImageInfoSparseBundle::count_mapped_bytes(info::DiskImageInfoSparseBundle *this, const DiskImageSparseBundle *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  unsigned int v2 = (SparseBundleBackend *)*((void *)a2 + 70);
  unint64_t v3 = (unint64_t)(*((void *)v2 + 15) + *((void *)v2 + 16) - 1) / *((void *)v2 + 16);
  SparseBundleBackend::open_mapped_folder(v2);
}

void sub_21E2C7A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(std::string const&,unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 16))(a6);
  }
  _Unwind_Resume(a1);
}

void sub_21E2C7BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void info::DiskImageInfoSparseBundle::DiskImageInfoSparseBundle(info::DiskImageInfoSparseBundle *this, const DiskImageSparseBundle *a2)
{
  *((void *)this + 3) = &unk_26CF2C060;
  *((void *)this + 4) = &unk_26CF2C090;
  *((void *)this + 5) = &unk_26CF2C0C0;
  *((void *)this + 6) = &unk_26CF2C0F0;
  *(void *)this = off_26CF2C900;
  *((void *)this + 1) = off_26CF2C948;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2C990;
  *(void *)((char *)this + unk_26CF2C8D8) = off_26CF2C9D8;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2CA20;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2CA68;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2CAB0;
  *(void *)this = off_26CF2C6D8;
  *((void *)this + 1) = off_26CF2C720;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2C768;
  *(void *)((char *)this + unk_26CF2C6Bstd::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2C7B0;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2C7F8;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2C840;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2C888;
  *((void *)this + 7) = &off_26CF2CB10;
  *((void *)this + 1) = &off_26CF2CB68;
  *((unsigned char *)this + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = 0;
  *((void *)this + 15) = off_26CF2CC58;
  *((void *)this + 3) = off_26CF2CCB0;
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  *((void *)this + 18) = 0;
  info::IdentityInfo::IdentityInfo<DiskImageSparseBundle>((uint64_t *)this + 19, (uint64_t *)&off_26CF2C658, (uint64_t)a2);
  *(void *)this = &unk_26CF2C220;
  *((void *)this + 1) = &unk_26CF2C268;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = &unk_26CF2C2B0;
  *((void *)this + 3) = &unk_26CF2C2F8;
  *((void *)this + 4) = &unk_26CF2C340;
  *((void *)this + 5) = &unk_26CF2C388;
  *((void *)this + 6) = &unk_26CF2C3D0;
  *((void *)this + 7) = &unk_26CF2C430;
  *((void *)this + 15) = &unk_26CF2C4A0;
  *((void *)this + 19) = &unk_26CF2C510;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 8) = (*(uint64_t (**)(void))(**((void **)a2 + 70) + 40))(*((void *)a2 + 70));
  info::DiskImageInfoSparseBundle::count_mapped_bytes(this, a2);
}

void sub_21E2C82E0(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  info::IdentityInfo::~IdentityInfo(v2, (const void **)&off_26CF2C658);
  info::EncryptionInfo::~EncryptionInfo(v3, (const void **)&off_26CF2C638);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageSparseBundle>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)&unk_26CF2CF70;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFUUIDRef v11 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFUUIDBytes *)(*(void *)(a3 + 560) + 136));
  CFStringRef v8 = CFUUIDCreateString(v7, v11);
  CFStringRef v10 = v8;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v8 = v10;
  }
  a1[1] = (uint64_t)v8;
  CFStringRef v10 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v10);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v11);
  return a1;
}

void sub_21E2C84F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 16));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v11);
  _Unwind_Resume(a1);
}

void info::IdentityInfo::~IdentityInfo(const void **this, const void **a2)
{
  unint64_t v3 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v3 - 3)) = a2[3];
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 1);
}

void info::IdentityInfo::~IdentityInfo(info::IdentityInfo *this)
{
  *(void *)this = &unk_26CF2D038;
  *((void *)this + 4) = &unk_26CF2D090;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CF2D038;
  *((void *)this + 4) = &unk_26CF2D090;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 1);
  JUMPOUT(0x223C249A0);
}

const void **info::IdentityInfo::serialize_to_dict@<X0>(info::IdentityInfo *this@<X0>, void *a2@<X8>)
{
  v12[1] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v4 = (const void *)*((void *)this + 1);
  CFUUIDRef v11 = @"UUID";
  v12[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFStringRef v8 = &v11;
  uint64_t v9 = 1;
  cf::create_dict_from_list((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  CFAutoRelease<void const*>::~CFAutoRelease(v12);
  uint64_t v5 = (const void *)*((void *)this + 3);
  if (v5)
  {
    CFUUIDRef v11 = @"Parent UUID";
    v12[0] = v5;
    CFRetain(v5);
    CFStringRef v8 = &v11;
    uint64_t v9 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    CFAutoRelease<void const*>::~CFAutoRelease(v12);
  }
  uint64_t v6 = (const void *)*((void *)this + 2);
  if (v6)
  {
    CFUUIDRef v11 = @"Stable UUID";
    v12[0] = v6;
    CFRetain(v6);
    CFStringRef v8 = &v11;
    uint64_t v9 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    CFAutoRelease<void const*>::~CFAutoRelease(v12);
  }
  *a2 = v10;
  uint64_t v10 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
}

void sub_21E2C8830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CFAutoRelease<void const*>::~CFAutoRelease(v3);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

__CFString *info::IdentityInfo::get_category(info::IdentityInfo *this)
{
  return @"Identity Info";
}

void virtual thunk to'info::IdentityInfo::~IdentityInfo(info::IdentityInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_26CF2D038;
  *((void *)v1 + 4) = &unk_26CF2D090;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 1);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_26CF2D038;
  *((void *)v1 + 4) = &unk_26CF2D090;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 1);
  JUMPOUT(0x223C249A0);
}

char *virtual thunk to'info::details::InfoTrait<info::IdentityInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

{
  return (char *)a1 + *(void *)(*a1 - 40);
}

void info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle(info::DiskImageInfoSparseBundle *this)
{
  *((void *)this + 19) = off_26CF2CDA0;
  *((void *)this + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
  *((void *)this + 15) = off_26CF2CC58;
  *((void *)this + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
}

{
  uint64_t vars8;

  *((void *)this + 19) = off_26CF2CDA0;
  *((void *)this + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
  *((void *)this + 15) = off_26CF2CC58;
  *((void *)this + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
  JUMPOUT(0x223C249A0);
}

const void **info::DiskImageInfoSparseBundle::serialize_to_dict@<X0>(info::DiskImageInfoSparseBundle *this@<X0>, void *a2@<X8>)
{
  _DWORD v10[10] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoSparseBundle *))(*(void *)this + 24))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"Sparse bundle image";
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 112)), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 120)), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::IdentityInfo::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 128)), &v9);
  v10[8] = @"Identity Info";
  void v10[9] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  CFStringRef v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 9; i != -1; i -= 2)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_21E2C8D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  for (uint64_t i = 72; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

__CFString *info::DiskImageInfoSparseBundle::get_category(info::DiskImageInfoSparseBundle *this)
{
  return @"UDSB";
}

const void **virtual thunk to'info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

void virtual thunk to'info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle(info::DiskImageInfoSparseBundle *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 19) = off_26CF2CDA0;
  *((void *)v1 + 6) = off_26CF2CDF8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_26CF2CC58;
  *((void *)v1 + 3) = off_26CF2CCB0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x223C249A0);
}

const void **virtual thunk to'info::DiskImageInfoSparseBundle::serialize_to_dict@<X0>(info::DiskImageInfoSparseBundle *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoSparseBundle::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageInfoSparseBundle::get_category(info::DiskImageInfoSparseBundle *this)
{
  return @"UDSB";
}

const void **virtual thunk to'info::DiskImageInfoSparseBundle::serialize_to_dict@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoSparseBundle::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

{
  return info::DiskImageInfoSparseBundle::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageInfoSparseBundle::get_category()
{
  return @"UDSB";
}

{
  return @"UDSB";
}

void std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::~__func()
{
}

__n128 std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x30uLL);
  *(void *)unsigned int v2 = &unk_26CF2CFA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CF2CFA0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::operator()(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (**(void **)(result + 8) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Bands folder contains an out of range band (", 44);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)")", 1);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)&v12, 0x16u);
  }
  uint64_t v4 = *(void **)(result + 16);
  if (*v4) {
    sparse_bundles::mapped_blocks_t::mapped_blocks_t((uint64_t)&v12, *(void *)(result + 24) + 24, *a3, v4);
  }
  uint64_t v5 = *(void *)(result + 24);
  if ((unint64_t)(*(void *)(*(void *)(v5 + 560) + 120) + *(void *)(*(void *)(v5 + 560) + 128) - 1)
     / *(void *)(*(void *)(v5 + 560) + 128)
     - 1 == v3)
    uint64_t v6 = *(void *)(*(void *)(result + 40) + *(void *)(**(void **)(result + 40) - 112) + 8)
       - *(void *)(v5 + 64) * v3;
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  **(void **)(result + 32) += v6;
  return result;
}

void sub_21E2CA170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_21E2CA3F4()
{
}

uint64_t std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::string const&,unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void info::DiskImageInfoUDIF::extract_info_from_runs(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::map[abi:ne180100]((uint64_t)&v14, (uint64_t)a2 + 72);
  uint64_t v3 = v14;
  if (v14 != v15)
  {
    uint64_t v4 = (_DWORD *)((char *)this + 8);
    uint64_t v5 = *(void *)this;
    do
    {
      uint64_t v6 = *(void *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        int v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          int v8 = dword_21E39F9E0[v7];
          int v9 = dword_21E39F9F0[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *uint64_t v4 = v9;
        }
      }
      int64_t v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(void *)((char *)this + *(void *)(v5 - 128) + 16) += v3[9];
      *(void *)((char *)this + *(void *)(v5 - 112) + 56) -= v10 << 9;
      uint64_t v11 = v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void **)v3[2];
          BOOL v13 = *v12 == v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != v15);
  }
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v14, v15[0]);
}

uint64_t info::DiskImageInfoUDIF::extract_checksum_info(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  int v21 = *(_DWORD *)(*((void *)a2 + 17) + 352);
  udif::operator<<(&v22, &v21);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, __p);
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 136);
  uint64_t v5 = v4 + 8;
  if (v4[31] < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *((void *)v5 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v20;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  std::stringbuf::str[abi:ne180100]((uint64_t)v23, (long long *)__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *((void *)a2 + 17);
  unint64_t v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    uint64_t v8 = v6 + 360;
    unint64_t v9 = v7 >> 3;
    uint64_t v10 = v22;
    int v11 = *(_DWORD *)((char *)v23 + *(void *)(v22 - 24));
    if (v9 != 1)
    {
      unint64_t v12 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v22 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        BOOL v13 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, (char *)__p);
        *(void *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
        CFNumberRef v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
        ++v8;
        --v12;
      }
      while (v12);
      uint64_t v10 = v22;
    }
    *(_DWORD *)((char *)v23 + *(void *)(v10 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v10 - 24)) & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    float v15 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, (char *)__p);
    *(void *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 2;
    std::ostream::operator<<();
    *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) = v11;
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, __p);
  BOOL v16 = (char *)this + *(void *)(*(void *)this - 136);
  unint64_t v17 = v16 + 32;
  if (v16[55] < 0) {
    operator delete(*(void **)v17);
  }
  *(_OWORD *)unint64_t v17 = *(_OWORD *)__p;
  *((void *)v17 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v20;
  uint64_t v22 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v23[-1] + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v23[0] = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C24910](&v25);
}

void sub_21E2CA988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
}

void sub_21E2CAAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void info::DiskImageInfoUDIF::extract_raw_runs(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
}

void sub_21E2CAC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoUDIF::DiskImageInfoUDIF(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  *((void *)this + 5) = &unk_26CF2C060;
  *((void *)this + 6) = &unk_26CF2C090;
  *((void *)this + 7) = &unk_26CF2C0C0;
  *((void *)this + 8) = &unk_26CF2C0F0;
  *(void *)this = off_26CF2D950;
  *((void *)this + 3) = off_26CF2D998;
  *((void *)this + 4) = off_26CF2D9E0;
  *(void *)((char *)this + unk_26CF2D928) = off_26CF2DA28;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2DA70;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2DAB8;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2DB00;
  *(void *)this = off_26CF2D728;
  *((void *)this + 3) = off_26CF2D770;
  *((void *)this + 4) = off_26CF2D7B8;
  *(void *)((char *)this + unk_26CF2D70std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2D800;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2D848;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2D890;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2D8D8;
  *((void *)this + 9) = &off_26CF2DB60;
  *((void *)this + 3) = &off_26CF2DBB8;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((void *)this + 17) = off_26CF2DCA8;
  *((void *)this + 5) = off_26CF2DD00;
  *((unsigned char *)this + 144) = 0;
  *((unsigned char *)this + 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((void *)this + 21) = &off_26CF2DDF0;
  *((void *)this + 4) = &off_26CF2DE48;
  *((_DWORD *)this + 44) = 0;
  *((void *)this + 25) = off_26CF2DF98;
  *((void *)this + 6) = off_26CF2DFF0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  info::IdentityInfo::IdentityInfo<DiskImageUDIF>((uint64_t *)this + 32, (uint64_t *)&off_26CF2D6A8, (uint64_t)a2);
}

void sub_21E2CB474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFArray *>::~CFAutoRelease(v8);
  info::IdentityInfo::~IdentityInfo(v9, (const void **)&off_26CF2D6A8);
  info::MasterChecksumInfo::~MasterChecksumInfo(v7, (void **)&off_26CF2D688);
  info::EncryptionInfo::~EncryptionInfo(v6, (const void **)&off_26CF2D648);
  _Unwind_Resume(a1);
}

void info::IdentityInfo::IdentityInfo<DiskImageUDIF>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)&unk_26CF2CF70;
  uint64_t v3 = a2[1];
  *a1 = v3;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[2];
  uint64_t v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  udif::details::UDIF_base::get_identifier((udif::details::UDIF_base *)(a3 + 64));
}

void sub_21E2CB6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 16));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v11);
  _Unwind_Resume(a1);
}

void info::MasterChecksumInfo::~MasterChecksumInfo(void **this, void **a2)
{
  uint64_t v3 = *a2;
  *this = *a2;
  *(void **)((char *)this + *(v3 - 3)) = a2[3];
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

__CFString *info::DiskImageInfoUDIF::get_category(info::DiskImageInfoUDIF *this)
{
  unsigned int v1 = *((_DWORD *)this + 2) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_2644A2930[v1];
  }
}

__CFString *virtual thunk to'info::DiskImageInfoUDIF::get_category(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_2644A2930[v1];
  }
}

{
  unsigned int v1;

  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_2644A2930[v1];
  }
}

{
  unsigned int v1;

  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_2644A2930[v1];
  }
}

{
  unsigned int v1;

  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_2644A2930[v1];
  }
}

__CFString *virtual thunk to'info::DiskImageInfoUDIF::get_category(info::DiskImageInfoUDIF *this)
{
  unsigned int v1 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_2644A2930[v1];
  }
}

void *udif::operator<<(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (udif::checksum_type::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 66)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &udif::checksum_type::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  uint64_t v2 = 0;
  while (udif::run_type::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 90)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &udif::run_type::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  uint64_t v2 = 0;
  while (udif::header::segment_num_t::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &udif::header::segment_num_t::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  uint64_t v2 = 0;
  while (udif::header::segment_count_t::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &udif::header::segment_count_t::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  uint64_t v2 = 0;
  while (udif::header::image_variant_type::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 18)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &udif::header::image_variant_type::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

void info::DiskImageInfoUDIF::extract_runs_from_blx_arr(info::DiskImageInfoUDIF *this, CFArrayRef theArray)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  CFArrayGetCount(theArray);
  operator new[]();
}

void sub_21E2CBBF8(_Unwind_Exception *a1)
{
  MEMORY[0x223C24980](v1, 0x80C80B8603338);
  _Unwind_Resume(a1);
}

uint64_t std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::~pair(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64)) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(unsigned char *)(a1 + 24)) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(a1 + 16));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void info::DiskImageInfoUDIF::add_run(uint64_t a1, int *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v6 = *a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  int v13 = v6;
  udif::operator<<(&v15, &v13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, __p);
  if (v11 >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  CFStringRef v8 = CFStringCreateWithCString(v4, (const char *)v7, 0x8000100u);
  CFStringRef v12 = v8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  v14[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](&v18);
  CFDictionaryAddValue(Mutable, @"Type", v8);
  CFRelease(v8);
  addCFNumber64ToDict(Mutable, @"Reserved", a2[1]);
  addCFNumber64ToDict(Mutable, @"Sector Count", *((void *)a2 + 2));
  addCFNumber64ToDict(Mutable, @"Start Offset", *((void *)a2 + 1));
  addCFNumber64ToDict(Mutable, @"Compressed Offset", *((void *)a2 + 3));
  addCFNumber64ToDict(Mutable, @"Compressed Length", *((void *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_21E2CBF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a18 = *MEMORY[0x263F8C2B8];
  uint64_t v38 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a18 + *(void *)(a18 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a20 = v38;
  a21 = MEMORY[0x263F8C318] + 16;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](&a37);
  _Unwind_Resume(a1);
}

void info::CompressionInfo::~CompressionInfo(info::CompressionInfo *this)
{
}

const void **info::CompressionInfo::serialize_to_dict@<X0>(info::CompressionInfo *this@<X0>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = *((void *)this + 2);
  v12[0] = @"Compressed Bytes";
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  v12[1] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *((_DWORD *)this + 6);
  v12[2] = @"Compression Ratio";
  CFNumberRef v13 = 0;
  CFNumberRef v13 = CFNumberCreate(v4, kCFNumberFloatType, &valuePtr);
  unsigned int v5 = *((_DWORD *)this + 2) - 1;
  if (v5 > 3) {
    int v6 = @"raw";
  }
  else {
    int v6 = off_2644A2970[v5];
  }
  CFNumberRef v14 = @"Compression Type";
  uint64_t v15 = v6;
  v9[0] = (uint64_t)v12;
  v9[1] = 3;
  cf::create_dict_from_list(v9, (CFMutableDictionaryRef *)&v10);
  *a2 = v10;
  uint64_t v10 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
  for (uint64_t i = 5; i != -1; i -= 2)
    __n128 result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v12[i]);
  return result;
}

void sub_21E2CC1CC(_Unwind_Exception *a1)
{
  for (uint64_t i = 40; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

__CFString *info::CompressionInfo::get_category(info::CompressionInfo *this)
{
  return @"Compression Info";
}

void virtual thunk to'info::CompressionInfo::~CompressionInfo(info::CompressionInfo *this)
{
}

void info::MasterChecksumInfo::~MasterChecksumInfo(info::MasterChecksumInfo *this)
{
  *(void *)this = &unk_26CF2E318;
  *((void *)this + 7) = &unk_26CF2E370;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CF2E318;
  *((void *)this + 7) = &unk_26CF2E370;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x223C249A0);
}

const void **info::MasterChecksumInfo::serialize_to_dict@<X0>(info::MasterChecksumInfo *this@<X0>, void *a2@<X8>)
{
  v16[4] = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (*((char *)this + 55) < 0)
  {
    unsigned int v5 = (const UInt8 *)*((void *)this + 4);
    CFIndex v6 = *((void *)this + 5);
  }
  else
  {
    unsigned int v5 = (const UInt8 *)this + 32;
    CFIndex v6 = *((unsigned __int8 *)this + 55);
  }
  CFTypeRef cf = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, v6, 0x8000100u, 0);
  if (*((char *)this + 31) < 0)
  {
    unint64_t v7 = (const UInt8 *)*((void *)this + 1);
    CFIndex v8 = *((void *)this + 2);
  }
  else
  {
    unint64_t v7 = (const UInt8 *)this + 8;
    CFIndex v8 = *((unsigned __int8 *)this + 31);
  }
  uint64_t v9 = CFStringCreateWithBytes(v4, v7, v8, 0x8000100u, 0);
  CFTypeRef v14 = v9;
  v16[0] = @"Checksum Value";
  v16[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    uint64_t v9 = v14;
  }
  void v16[2] = @"Checksum Type";
  v16[3] = v9;
  if (v9) {
    CFRetain(v9);
  }
  v12[0] = (uint64_t)v16;
  v12[1] = 2;
  cf::create_dict_from_list(v12, (CFMutableDictionaryRef *)&v13);
  *a2 = v13;
  CFNumberRef v13 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v13);
  for (uint64_t i = 3; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v16[i]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&v14);
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
}

void sub_21E2CC4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  CFIndex v6 = va_arg(va1, const void *);
  CFAutoRelease<void const*>::~CFAutoRelease(v4);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

__CFString *info::MasterChecksumInfo::get_category(info::MasterChecksumInfo *this)
{
  return @"Master Checksum Info";
}

void virtual thunk to'info::MasterChecksumInfo::~MasterChecksumInfo(info::MasterChecksumInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_26CF2E318;
  *((void *)v1 + 7) = &unk_26CF2E370;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_26CF2E318;
  *((void *)v1 + 7) = &unk_26CF2E370;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
  JUMPOUT(0x223C249A0);
}

void info::DiskImageInfoUDIF::~DiskImageInfoUDIF(info::DiskImageInfoUDIF *this)
{
  *(void *)(v2 + 256) = off_26CF2E140;
  *(void *)(v2 + 64) = off_26CF2E198;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v2 + 280));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 34);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 33);
  *((void *)this + 25) = off_26CF2DF98;
  *((void *)this + 6) = off_26CF2DFF0;
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  *((void *)this + 17) = off_26CF2DCA8;
  *((void *)this + 5) = off_26CF2DD00;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF(this);
  JUMPOUT(0x223C249A0);
}

const void **info::DiskImageInfoUDIF::serialize_to_dict@<X0>(info::DiskImageInfoUDIF *this@<X0>, void *a2@<X8>)
{
  v26[1] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoUDIF *))(*(void *)this + 24))(this);
  char v11 = (uint64_t **)@"Image Format";
  uint64_t v12 = v4;
  info::DiskImageInfoUDIF::get_format_desc(this, (CFStringRef *)&cf);
  CFNumberRef v13 = @"Format Description";
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 112)), &v10);
  uint64_t v15 = @"Size Info";
  uint64_t v16 = v10;
  uint64_t v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 120)), &v10);
  char v17 = @"Encryption Info";
  uint64_t v18 = v10;
  uint64_t v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::CompressionInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 128)), &v10);
  size_t v19 = @"Compression Info";
  uint64_t v20 = v10;
  uint64_t v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::MasterChecksumInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 136)), &v10);
  int v21 = @"Master Checksum Info";
  uint64_t v22 = v10;
  uint64_t v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::IdentityInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 144)), &v10);
  uint64_t v23 = @"Identity Info";
  char v24 = v10;
  uint64_t v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  uint64_t v25 = (uint64_t *)&v11;
  v26[0] = (const void *)7;
  cf::create_dict_from_list((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 13; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v11)[i]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
  CFIndex v6 = (const void *)*((void *)this + 2);
  if (v6)
  {
    uint64_t v25 = (uint64_t *)@"Runs";
    v26[0] = v6;
    CFRetain(v6);
    char v11 = &v25;
    uint64_t v12 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    CFAutoRelease<void const*>::~CFAutoRelease(v26);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v9);
}

void sub_21E2CCA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'info::DiskImageInfoUDIF::~DiskImageInfoUDIF(void *a1)
{
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
  JUMPOUT(0x223C249A0);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 32)));
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'info::DiskImageInfoUDIF::~DiskImageInfoUDIF(info::DiskImageInfoUDIF *this)
{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x223C249A0);
}

const void **virtual thunk to'info::DiskImageInfoUDIF::serialize_to_dict@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoUDIF::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

{
  return info::DiskImageInfoUDIF::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

{
  return info::DiskImageInfoUDIF::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

{
  return info::DiskImageInfoUDIF::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

const void **virtual thunk to'info::DiskImageInfoUDIF::serialize_to_dict@<X0>(info::DiskImageInfoUDIF *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoUDIF::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

char *virtual thunk to'info::details::InfoTrait<info::CompressionInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *virtual thunk to'info::details::InfoTrait<info::MasterChecksumInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

{
  return (char *)a1 + *(void *)(*a1 - 40);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    unsigned int v5 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_21E2CD13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

udif::xml_rsrc_iterator *udif::xml_rsrc_iterator::xml_rsrc_iterator(udif::xml_rsrc_iterator *this, const udif::xml_rsrc_iterator *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::__optional_copy_base<CFAutoRelease<__CFDictionary const*>,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 16, (uint64_t)a2 + 16);
  *((void *)this + 4) = *((void *)a2 + 4);
  return this;
}

void sub_21E2CD1A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<CFAutoRelease<__CFDictionary const*>,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    *(void *)a1 = 0;
    uint64_t v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v3) {
      CFRetain(v3);
    }
    a1[8] = 1;
  }
  return a1;
}

void sub_21E2CD20C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8)) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)v1);
  }
  _Unwind_Resume(exception_object);
}

cf::CFUtilException *cf::CFUtilException::CFUtilException(cf::CFUtilException *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"CoreFoundation type mismatch: ", 30);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" while expecting ", 17);
  std::ostream::operator<<();
  DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)this, (uint64_t)v3, 0x16u);
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](&v5);
  *(void *)this = &unk_26CF2E2E8;
  return this;
}

void cf::CFUtilException::~CFUtilException(std::exception *this)
{
  DiskImagesRuntimeException::~DiskImagesRuntimeException(this);
  JUMPOUT(0x223C249A0);
}

void info::DiskImageInfoUDIF::~DiskImageInfoUDIF(const void **this, const void **a2)
{
  uint64_t v2 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v2 - 13)) = a2[1];
  *(const void **)((char *)this + *((void *)*this - 1io_rings_unsubscribe_dest_object(*(void *)this, *((_DWORD *)this + 2)) = a2[2];
  *(const void **)((char *)this + *((void *)*this - 3)) = a2[3];
  *(const void **)((char *)this + *((void *)*this - 4)) = a2[4];
  *(const void **)((char *)this + *((void *)*this - 5)) = a2[5];
  *(const void **)((char *)this + *((void *)*this - io_rings_cancel(*((void *)this + 6)) = a2[6];
  *(const void **)((char *)this + *((void *)*this - 7)) = a2[7];
  *(const void **)((char *)this + *((void *)*this - 8)) = a2[8];
  *(const void **)((char *)this + *((void *)*this - 14)) = a2[9];
  *(const void **)((char *)this + *((void *)*this - 15)) = a2[10];
  *(const void **)((char *)this + *((void *)*this - 1io_rings_cancel(*((void *)this + 6)) = a2[11];
  *(const void **)((char *)this + *((void *)*this - 17)) = a2[12];
  *(const void **)((char *)this + *((void *)*this - 18)) = a2[13];
  CFAutoRelease<__CFArray *>::~CFAutoRelease(this + 2);
}

CFStringRef info::DiskImageInfoUDIF::get_format_desc@<X0>(info::DiskImageInfoUDIF *this@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 128) + 8);
  if (v3)
  {
    if (v3 > 4) {
      char v4 = @"raw";
    }
    else {
      char v4 = off_2644A2970[v3 - 1];
    }
    CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%s (%@)", "UDIF read-only compressed image", v4);
  }
  else
  {
    CFStringRef result = @"UDIF uncompressed read-only image";
  }
  *a2 = result;
  return result;
}

const void **CFAutoRelease<__CFArray *>::~CFAutoRelease(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>>((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_21E2CD994(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>>(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = (uint64_t *)result + 1;
    do
    {
      CFStringRef result = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          std::locale v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          std::locale v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::locale v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x50uLL);
    uint64_t v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_5;
  }
  char v5 = *(unsigned char *)(a5 + 16);
  unint64_t v6 = (v5 & 1) + *(void *)(a5 + 8) - 1;
  unint64_t v7 = a2[4];
  if ((a2[6] & 2) == 0) {
    ++v7;
  }
  if (v6 < v7)
  {
LABEL_5:
    std::locale v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v11 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }
      while (v11);
    }
    unint64_t v16 = *(void *)a5;
    if ((*(unsigned char *)(a5 + 16) & 2) == 0) {
      ++v16;
    }
    if ((unint64_t)(v10[6] & 1) + v10[5] - 1 < v16) {
      goto LABEL_23;
    }
    return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a3, a5);
  }
  BOOL v11 = (v5 & 2) == 0;
  unint64_t v12 = *(void *)a5;
  if (v11) {
    ++v12;
  }
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    uint64_t v13 = a2[1];
    if (v13)
    {
      CFTypeRef v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        CFTypeRef v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      char v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v11 = *a4 == v17;
        char v17 = (uint64_t *)a4;
      }
      while (!v11);
    }
    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unint64_t v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0) {
      ++v18;
    }
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

void *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  CFStringRef result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
      unint64_t v6 = *(void *)a3;
    }
    else {
      unint64_t v6 = *(void *)a3 + 1;
    }
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        char v8 = *(unsigned char *)(v4 + 48);
        unint64_t v9 = v7[4];
        if ((v8 & 2) == 0) {
          ++v9;
        }
        if ((unint64_t)(*(unsigned char *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1 >= v9) {
          break;
        }
        uint64_t v4 = *v7;
        CFStringRef result = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }
      if ((unint64_t)(v8 & 1) + v7[5] - 1 >= v6) {
        break;
      }
      CFStringRef result = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = result;
  }
LABEL_14:
  *a2 = v7;
  return result;
}

void info::DiskImageInfoASIF::count_used_extents(info::DiskImageInfoASIF *this, const DiskImageASIF *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)di_asif::header::get_dir_offset((const DiskImageASIF *)((char *)a2 + 32), *((void *)a2 + 22)))
  {
    uint64_t v4 = *((void *)a2 + 44);
    uint64_t v5 = *((void *)a2 + 45);
    long long v21 = 0u;
    long long v22 = 0u;
    di_asif::details::dir_base::create_context((const DiskImageASIF *)((char *)a2 + 200), v19);
    unint64_t v6 = (uint64_t *)((char *)this + 16);
    if (v4 == v5)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      char v8 = 0;
      do
      {
        unint64_t v9 = *(void *)(v4 + 8 * (void)v8) * *((unsigned int *)a2 + 24);
        if (v9)
        {
          ++*(uint64_t *)((char *)v6 + *(void *)(*(void *)this - 136));
          di_asif::details::dir::load_create_table((atomic_ullong *)a2 + 25, (di_asif::details::ContextASIF *)v19, v8, v9, 0, 1, (atomic_ullong *)buf);
          if (*(void *)buf && !*(unsigned char *)(*(void *)buf + 520))
          {
            if (*(unsigned char *)(*(void *)buf + 400)) {
              uint64_t v10 = (di_asif::details::table *)(*(void *)buf + 40);
            }
            else {
              uint64_t v10 = 0;
            }
            info::DiskImageInfoASIF::count_table_extents((uint64_t *)this, v10, (di_asif::details::ContextASIF *)v19, &v21);
          }
          ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)buf);
        }
        char v8 = (ref::details **)((char *)v8 + 1);
        v7 += 8;
      }
      while (v4 + v7 != v5);
      uint64_t v11 = *((void *)&v21 + 1);
    }
    uint64_t v12 = *v6;
    *(void *)((char *)this + *(void *)(*(void *)this - 112) + 56) -= v12
                                                                           + (*(uint64_t (**)(const DiskImageASIF *))(*(void *)a2 + 24))(a2)
                                                                           * v11;
    uint64_t v13 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) && DIDebugLogsEnabled())
    {
      int v14 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)uint64_t buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 71;
        __int16 v24 = 2080;
        uint64_t v25 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
        __int16 v26 = 2048;
        uint64_t v27 = v13;
        unint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        if (v16)
        {
          char v17 = (char *)v16;
          fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v16);
          free(v17);
        }
      }
      else
      {
        unint64_t v18 = getDIOSLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 71;
          __int16 v24 = 2080;
          uint64_t v25 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
          __int16 v26 = 2048;
          uint64_t v27 = v13;
          _os_log_impl(&dword_21E237000, v18, OS_LOG_TYPE_DEBUG, "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)", buf, 0x1Cu);
        }
      }
      *__error() = v14;
    }
    v19[0] = &unk_26CF2F358;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
}

void sub_21E2CE010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E2CE18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t info::DiskImageInfoASIF::set_uuids_info(info::DiskImageInfoASIF *this, di_asif::details::dir **a2)
{
  void v17[6] = *(const void **)MEMORY[0x263EF8340];
  uint64_t stackable_source_identifier = DiskImageASIF::get_stackable_source_identifier(a2);
  v17[4] = (const void *)stackable_source_identifier;
  v17[5] = (const void *)v5;
  unint64_t v6 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (stackable_source_identifier | v5)
  {
    *(void *)&v18.byte8 = v5;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    *(void *)&v18.byte0 = stackable_source_identifier;
    v17[0] = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v18);
    CFStringRef v8 = CFUUIDCreateString(v7, (CFUUIDRef)v17[0]);
    v16[0] = v8;
    unint64_t v9 = (CFTypeRef *)((char *)this + *(void *)(*(void *)this - 128));
    if (v9[3])
    {
      CFRelease(v9[3]);
      CFStringRef v8 = (CFStringRef)v16[0];
    }
    v9[3] = v8;
    v16[0] = 0;
    CFAutoRelease<__CFString const*>::~CFAutoRelease(v16);
    CFAutoRelease<__CFUUID const*>::~CFAutoRelease(v17);
  }
  uint64_t result = DiskImageASIF::get_stable_uuid(a2);
  *(void *)&v11.byte8 = *(void *)&v11.byte0;
  v17[0] = (const void *)result;
  v17[1] = *(const void **)&v11.byte0;
  if (result | *(void *)&v11.byte0)
  {
    CFAllocatorRef v12 = *v6;
    *(void *)&v11.byte0 = result;
    v16[0] = CFUUIDCreateFromUUIDBytes(*v6, v11);
    CFStringRef v13 = CFUUIDCreateString(v12, (CFUUIDRef)v16[0]);
    CFStringRef v15 = v13;
    int v14 = (CFTypeRef *)((char *)this + *(void *)(*(void *)this - 128));
    if (v14[2])
    {
      CFRelease(v14[2]);
      CFStringRef v13 = v15;
    }
    void v14[2] = v13;
    CFStringRef v15 = 0;
    CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v15);
    return (uint64_t)CFAutoRelease<__CFUUID const*>::~CFAutoRelease(v16);
  }
  return result;
}

void sub_21E2CE32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unsigned int v3 = va_arg(va1, const void *);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoASIF::examine_mapped_extents(info::DiskImageInfoASIF *this, const DiskImageASIF *a2)
{
  v42[4] = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  v37[0] = Mutable;
  unint64_t v6 = (CFTypeRef *)((char *)this + *(void *)(*(void *)this - 136));
  if (v6[10])
  {
    CFRelease(v6[10]);
    CFMutableArrayRef Mutable = (CFMutableArrayRef)v37[0];
  }
  v6[10] = Mutable;
  v37[0] = 0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease(v37);
  di_asif::details::dir_base::create_context((const DiskImageASIF *)((char *)a2 + 200), v30);
  CFAllocatorRef v7 = *(const void **)((char *)this + *(void *)(*(void *)this - 112) + 16);
  v37[0] = a2;
  v37[1] = 0;
  v37[2] = v7;
  char v38 = 2;
  uint64_t v39 = 0;
  uint64_t v40 = v30;
  int v41 = 2;
  v42[0] = &unk_26CF26308;
  v42[3] = v42;
  DiskImage::extents_t::begin((DiskImage::extents_t *)v37, (uint64_t)&v25);
  DiskImage::extents_t::end((DiskImage::extents_t *)v37, (uint64_t)v24);
  CFStringRef v8 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v25, (uint64_t)v24))
  {
    if (v29 == 3)
    {
      int v17 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
        value = (void *)0x4B04100302;
        __int16 v33 = 2080;
        int v34 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
        __int16 v35 = 2048;
        uint64_t v36 = v26;
        size_t v19 = (const char *)_os_log_send_and_compose_impl();
        if (v19)
        {
          uint64_t v20 = (char *)v19;
          fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v19);
          free(v20);
        }
      }
      else
      {
        long long v21 = getDIOSLog();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          value = (void *)0x4B04100302;
          __int16 v33 = 2080;
          int v34 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
          __int16 v35 = 2048;
          uint64_t v36 = v26;
          _os_log_impl(&dword_21E237000, v21, OS_LOG_TYPE_ERROR, "%.*s: Failed during ASIF extents enumeration on offset: %llu", (uint8_t *)&value, 0x1Cu);
        }
      }
      *__error() = v17;
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      uint64_t v23 = std::generic_category();
      exception[1] = 22;
      exception[2] = v23;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Failed during ASIF extents enumeration.";
    }
    uint64_t v10 = v26;
    uint64_t v9 = v27;
    char v11 = v28;
    CFMutableArrayRef v12 = CFArrayCreateMutable(v4, 2, v8);
    value = v12;
    if ((v11 & 2) != 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v10 + 1;
    }
    addNumberToCFArray<unsigned long long>(v12, v13);
    addNumberToCFArray<unsigned long long>(value, (v11 & 1) + v9 - 1);
    CFArrayAppendValue(*(CFMutableArrayRef *)((char *)this + *(void *)(*(void *)this - 136) + 80), value);
    CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)&value);
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v25);
  }
  uint64_t v14 = v24[0];
  v24[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = v25;
  uint64_t v25 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v42);
  uint64_t v16 = v39;
  uint64_t v39 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 40))(v16);
  }
  v30[0] = &unk_26CF2F358;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
}

void sub_21E2CE7E4(_Unwind_Exception *a1)
{
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)(v1 - 176));
  _Unwind_Resume(a1);
}

info::DiskImageInfoASIF *info::DiskImageInfoASIF::DiskImageInfoASIF(info::DiskImageInfoASIF *this, const DiskImageASIF *a2, char a3)
{
  *((void *)this + 7) = &unk_26CF2C060;
  *((void *)this + 8) = &unk_26CF2C090;
  *((void *)this + 9) = &unk_26CF2C0C0;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = &unk_26CF2C0F0;
  *(void *)this = off_26CF2EB90;
  *((void *)this + 5) = off_26CF2EBD8;
  *((void *)this + 6) = off_26CF2EC20;
  *(void *)((char *)this + unk_26CF2EB68) = off_26CF2EC68;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2ECB0;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2ECF8;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2ED40;
  *(void *)this = off_26CF2E968;
  *((void *)this + 5) = off_26CF2E9B0;
  *((void *)this + 6) = off_26CF2E9F8;
  *(void *)((char *)this + unk_26CF2E94std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2EA40;
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = off_26CF2EA88;
  *(void *)((char *)this + *(void *)(*(void *)this - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2EAD0;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF2EB18;
  *((void *)this + 11) = &off_26CF2EDA0;
  *((void *)this + 5) = &off_26CF2EDF8;
  *((unsigned char *)this + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  *((void *)this + 19) = off_26CF2EEE8;
  *((void *)this + 7) = off_26CF2EF40;
  *((unsigned char *)this + 16std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((unsigned char *)this + 168) = 0;
  *((void *)this + 2std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  info::IdentityInfo::IdentityInfo<DiskImageASIF>((uint64_t *)this + 23, (uint64_t *)&off_26CF2E8C8, a2);
  *((void *)this + 29) = 0;
  *((void *)this + 37) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(void *)this = &unk_26CF2E418;
  *((void *)this + 5) = &unk_26CF2E460;
  *((void *)this + 6) = &unk_26CF2E4A8;
  *((void *)this + 7) = &unk_26CF2E4F0;
  *((void *)this + 8) = &unk_26CF2E538;
  *((void *)this + 9) = &unk_26CF2E580;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = &unk_26CF2E5C8;
  *((void *)this + 11) = &unk_26CF2E628;
  *((void *)this + 19) = &unk_26CF2E698;
  *((void *)this + 23) = &unk_26CF2E708;
  *((void *)this + 27) = &unk_26CF2E778;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v5 = (*(uint64_t (**)(const DiskImageASIF *))(*(void *)a2 + 32))(a2);
  uint64_t v6 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 16) = v5;
  uint64_t v7 = *(void *)((char *)this + *(void *)(v6 - 112) + 16);
  uint64_t v8 = (*(uint64_t (**)(const DiskImageASIF *))(*(void *)a2 + 24))(a2);
  uint64_t v9 = *(void *)this;
  uint64_t v10 = *(void *)this;
  *(void *)((char *)this + *(void *)(v9 - 112) + 8) = v8 * v7;
  uint64_t v11 = *((unsigned int *)a2 + 24);
  *(void *)((char *)this + *(void *)(v9 - 136) + 24) = v11;
  *(void *)((char *)this + *(void *)(v10 - 136) + 64) = *((void *)a2 + 11);
  *(void *)((char *)this + *(void *)(v10 - 136) + 8) = *((void *)a2 + 476);
  *(void *)((char *)this + *(void *)(v10 - 112) + 56) = *(void *)((char *)this + *(void *)(v10 - 112) + 8);
  uint64_t v12 = *((void *)a2 + 13);
  if (v12)
  {
    uint64_t v13 = v12 * v11;
  }
  else
  {
    uint64_t v14 = *((void *)a2 + 11);
    uint64_t v13 = (*(uint64_t (**)(const DiskImageASIF *))(*(void *)a2 + 24))(a2) * v14;
    uint64_t v9 = *(void *)this;
  }
  uint64_t v15 = (char *)this + *(void *)(v9 - 112);
  *((void *)v15 + 5) = v13;
  v15[48] = 1;
  uint64_t v16 = (char *)this + *(void *)(*(void *)this - 112);
  uint64_t v17 = *((unsigned int *)a2 + 24);
  if (!v16[32]) {
    v16[32] = 1;
  }
  *((void *)v16 + 3) = v17;
  *((unsigned char *)this + *(void *)(*(void *)this - 136) + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *((unsigned char *)a2 + 44) & 1;
  info::DiskImageInfoASIF::count_used_extents(this, a2);
  populate_backends_info((void *)a2 + 2, (uint64_t)this + *(void *)(*(void *)this - 104));
  info::DiskImageInfoASIF::set_uuids_info(this, (di_asif::details::dir **)a2);
  if ((a3 & 2) != 0) {
    info::DiskImageInfoASIF::examine_mapped_extents(this, a2);
  }
  return this;
}

void sub_21E2CF050(_Unwind_Exception *a1)
{
  info::ASIFInfo::~ASIFInfo(v2, (const void **)&off_26CF2E8E8);
  info::IdentityInfo::~IdentityInfo(v3, (const void **)&off_26CF2E8C8);
  info::EncryptionInfo::~EncryptionInfo(v1, (const void **)&off_26CF2E8A8);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageASIF>(uint64_t *a1, uint64_t *a2, DiskImageASIF *this)
{
  *a1 = (uint64_t)&unk_26CF2CF70;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  uint64_t stackable_identifier = DiskImageASIF::get_stackable_identifier(this);
  uint64_t v9 = v8;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  *(void *)&v15.byte0 = stackable_identifier;
  *(void *)&v15.byte8 = v9;
  CFUUIDRef v14 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v15);
  CFStringRef v11 = CFUUIDCreateString(v10, v14);
  CFStringRef v13 = v11;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v11 = v13;
  }
  a1[1] = (uint64_t)v11;
  CFStringRef v13 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v13);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v14);
  return a1;
}

void sub_21E2CF268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 16));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v11);
  _Unwind_Resume(a1);
}

void info::ASIFInfo::~ASIFInfo(const void **this, const void **a2)
{
  uint64_t v2 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v2 - 3)) = a2[3];
  CFAutoRelease<__CFArray *>::~CFAutoRelease(this + 10);
}

uint64_t info::DiskImageInfoASIF::count_table_extents(uint64_t *a1, di_asif::details::table *this, di_asif::details::ContextASIF *a3, void *a4)
{
  uint64_t result = di_asif::details::table::make_map_entry_iterators(this, (uint64_t)this, (uint64_t)v23);
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 3;
  unint64_t v10 = *((void *)this + 44);
  CFStringRef v11 = a1 + 4;
  while (v23[0] != v23[5] || v23[1] != v23[6])
  {
    uint64_t v12 = (const di_asif::details::table_entry_map *)di_asif::details::map_entry_iterator_t::operator*((uint64_t)v23);
    di_asif::details::table::make_data_entry_iterators_for_map(this, v12, (uint64_t)v22);
    while (v22[0] != v22[5] || v22[1] != v22[6])
    {
      *(_OWORD *)long long v21 = *(_OWORD *)di_asif::details::map_entry_iterator_t::operator*((uint64_t)v22);
      int flags = di_asif::details::table_entry_data::get_flags((di_asif::details::table_entry_data *)v21);
      uint64_t v14 = *a1;
      uint64_t v15 = *a1;
      unint64_t v16 = *(void *)((char *)v8 + *(void *)(*a1 - 112));
      BOOL v17 = v16 > v10;
      unint64_t v18 = v16 - v10;
      if (v17)
      {
        if (v18 >= *(void *)((char *)v9 + *(void *)(v15 - 136))) {
          uint64_t v19 = *(void *)((char *)v9 + *(void *)(v15 - 136));
        }
        else {
          uint64_t v19 = v18;
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      switch(flags)
      {
        case 0:
          ++*(void *)((char *)v11 + *(void *)(v15 - 136));
          *v8 += v19;
          break;
        case 1:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 40);
          a1[2] += v19;
          break;
        case 2:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 48);
          *v11 += v19;
          break;
        case 3:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 56);
          *v9 += v19;
          if (v19)
          {
            info::DiskImageInfoASIF::inspect_bitmap_for_entry(a1, this, a3, v21[0], v21[1], a4, v19);
            uint64_t v14 = *a1;
          }
          break;
        default:
          break;
      }
      v10 += *(void *)((char *)v9 + *(void *)(v14 - 136));
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)v22, (uint64_t)v21);
    }
    uint64_t result = di_asif::details::map_entry_iterator_t::operator++((uint64_t)v23, (uint64_t)v22);
  }
  return result;
}

void di_asif::details::ContextASIF::~ContextASIF(di_asif::details::ContextASIF *this)
{
  *(void *)this = &unk_26CF2F358;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF2F358;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x223C249A0);
}

atomic_ullong *info::DiskImageInfoASIF::inspect_bitmap_for_entry(void *a1, di_asif::details::table *a2, di_asif::details::ContextASIF *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v28[0] = a4;
  v28[1] = a5;
  unint64_t start_block = di_asif::details::table_entry_data::get_start_block((di_asif::details::table_entry_data *)v28);
  di_asif::details::table::get_bitmap(a2, a3, start_block, 0, &v27);
  CFStringRef v13 = (char *)a1 + *(void *)(*a1 - 112);
  unint64_t v14 = *((void *)v13 + 1);
  unint64_t v15 = *((void *)v13 + 2);
  if (v15 - 1 >= v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    uint64_t v26 = std::generic_category();
    exception[1] = 22;
    exception[2] = v26;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Corrupted ASIF image.";
  }
  unint64_t logical_offset = di_asif::details::table_entry_data::get_logical_offset((di_asif::details::table_entry_data *)v28);
  unint64_t v17 = logical_offset + a7;
  if (logical_offset < v17)
  {
    int v18 = 0;
    unint64_t v19 = v14 / v15;
    do
    {
      while (1)
      {
        if (v27) {
          uint64_t v20 = *(unsigned char *)(v27 + 224) ? (void *)(v27 + 40) : 0;
        }
        else {
          uint64_t v20 = 0;
        }
        unint64_t v21 = di_asif::details::map_element::search_for_pattern_match(v20, a2, v18, logical_offset, v17);
        long long v22 = a6;
        unint64_t v23 = (v21 - logical_offset) / v19;
        if (v18)
        {
          long long v22 = a6 + 1;
          if (v18 == 2) {
            break;
          }
        }
        *v22 += v23;
        ++v18;
        unint64_t logical_offset = v21;
      }
      int v18 = 0;
      a6[2] += v23;
      unint64_t logical_offset = v21;
    }
    while (v21 < v17);
  }
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v27);
}

void sub_21E2CF7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void DiskImage::extents_t::~extents_t(DiskImage::extents_t *this)
{
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100]((void *)this + 7);
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
}

void info::ASIFInfo::~ASIFInfo(info::ASIFInfo *this)
{
  *(void *)this = &unk_26CF2F620;
  *((void *)this + 11) = &unk_26CF2F678;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 10);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CF2F620;
  *((void *)this + 11) = &unk_26CF2F678;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 10);
  JUMPOUT(0x223C249A0);
}

const void **info::ASIFInfo::serialize_to_dict@<X0>(info::ASIFInfo *this@<X0>, void *a2@<X8>)
{
  v31[1] = *(const void **)MEMORY[0x263EF8340];
  uint64_t valuePtr = *((void *)this + 1);
  uint64_t v12 = (uint64_t **)@"Dir Pointer Version";
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v13 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
  unint64_t v14 = @"Num Tables";
  uint64_t valuePtr = *((void *)this + 2);
  CFNumberRef v15 = 0;
  CFNumberRef v15 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  unint64_t v16 = @"Chunk Size";
  uint64_t valuePtr = *((void *)this + 3);
  CFNumberRef v17 = 0;
  CFNumberRef v17 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  int v18 = @"Uninitialized Entries";
  uint64_t valuePtr = *((void *)this + 4);
  CFNumberRef v19 = 0;
  CFNumberRef v19 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  uint64_t v20 = @"Full Entries";
  uint64_t valuePtr = *((void *)this + 5);
  CFNumberRef v21 = 0;
  CFNumberRef v21 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  long long v22 = @"Unmapped Entries";
  uint64_t valuePtr = *((void *)this + 6);
  CFNumberRef v23 = 0;
  CFNumberRef v23 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  __int16 v24 = @"Bitmapped Entries";
  uint64_t valuePtr = *((void *)this + 7);
  CFNumberRef v25 = 0;
  CFNumberRef v25 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  uint64_t v26 = @"Max Sector Count";
  uint64_t valuePtr = *((void *)this + 8);
  CFNumberRef v27 = 0;
  CFNumberRef v5 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  uint64_t v6 = *((unsigned __int8 *)this + 72);
  CFNumberRef v27 = v5;
  char v28 = @"Is Cache";
  uint64_t valuePtr = v6;
  CFNumberRef v29 = 0;
  CFNumberRef v29 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  int v30 = (uint64_t *)&v12;
  v31[0] = (const void *)9;
  cf::create_dict_from_list((uint64_t *)&v30, (CFMutableDictionaryRef *)&v10);
  for (uint64_t i = 17; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v12)[i]);
  uint64_t v8 = (const void *)*((void *)this + 10);
  if (v8)
  {
    int v30 = (uint64_t *)@"Mapped Sectors";
    v31[0] = v8;
    CFRetain(v8);
    uint64_t v12 = &v30;
    uint64_t v13 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v12);
    CFAutoRelease<void const*>::~CFAutoRelease(v31);
  }
  *a2 = v10;
  unint64_t v10 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
}

void sub_21E2CFBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void sub_21E2CFC54()
{
}

__CFString *info::ASIFInfo::get_category(info::ASIFInfo *this)
{
  return @"ASIF Info";
}

void virtual thunk to'info::ASIFInfo::~ASIFInfo(info::ASIFInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_26CF2F620;
  *((void *)v1 + 11) = &unk_26CF2F678;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_26CF2F620;
  *((void *)v1 + 11) = &unk_26CF2F678;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

char *virtual thunk to'info::details::InfoTrait<info::ASIFInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

{
  return (char *)a1 + *(void *)(*a1 - 40);
}

void info::DiskImageInfoASIF::~DiskImageInfoASIF(info::DiskImageInfoASIF *this)
{
  *((void *)this + 27) = off_26CF2F178;
  *((void *)this + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 37);
  *((void *)this + 23) = off_26CF2F030;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 24);
  *((void *)this + 19) = off_26CF2EEE8;
  *((void *)this + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
}

{
  uint64_t vars8;

  *((void *)this + 27) = off_26CF2F178;
  *((void *)this + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 37);
  *((void *)this + 23) = off_26CF2F030;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 24);
  *((void *)this + 19) = off_26CF2EEE8;
  *((void *)this + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  JUMPOUT(0x223C249A0);
}

const void **info::DiskImageInfoASIF::serialize_to_dict@<X0>(info::DiskImageInfoASIF *this@<X0>, void *a2@<X8>)
{
  v10[12] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoASIF *))(*(void *)this + 24))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"Apple sparse image";
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 112)), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 120)), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::ASIFInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 136)), &v9);
  v10[8] = @"ASIF Info";
  void v10[9] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::IdentityInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 128)), &v9);
  _DWORD v10[10] = @"Identity Info";
  void v10[11] = v9;
  uint64_t v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 6;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 11; i != -1; i -= 2)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_21E2D01D0(_Unwind_Exception *a1)
{
  for (uint64_t i = 88; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

__CFString *info::DiskImageInfoASIF::get_category(info::DiskImageInfoASIF *this)
{
  return @"ASIF";
}

const void **virtual thunk to'info::DiskImageInfoASIF::~DiskImageInfoASIF(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

void virtual thunk to'info::DiskImageInfoASIF::~DiskImageInfoASIF(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'info::DiskImageInfoASIF::~DiskImageInfoASIF(info::DiskImageInfoASIF *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 27) = off_26CF2F178;
  *((void *)v1 + 9) = off_26CF2F1D0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_26CF2F030;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2F088;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_26CF2EEE8;
  *((void *)v1 + 7) = off_26CF2EF40;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x223C249A0);
}

const void **virtual thunk to'info::DiskImageInfoASIF::serialize_to_dict@<X0>(info::DiskImageInfoASIF *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoASIF::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageInfoASIF::get_category(info::DiskImageInfoASIF *this)
{
  return @"ASIF";
}

const void **virtual thunk to'info::DiskImageInfoASIF::serialize_to_dict@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoASIF::serialize_to_dict((info::DiskImageInfoASIF *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

{
  return info::DiskImageInfoASIF::serialize_to_dict((info::DiskImageInfoASIF *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

{
  return info::DiskImageInfoASIF::serialize_to_dict((info::DiskImageInfoASIF *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageInfoASIF::get_category()
{
  return @"ASIF";
}

{
  return @"ASIF";
}

{
  return @"ASIF";
}

uint64_t di_asif::header::get_dir_offset(di_asif::header *this, uint64_t a2)
{
  if (a2 == 1) {
    return (uint64_t)this + 24;
  }
  if (a2)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: invalid dir index to header", 0x16u);
  }
  return (uint64_t)this + 16;
}

atomic_ullong *ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(atomic_ullong *a1)
{
  uint64_t result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(unsigned char *)(a1 + 520) || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2))
  {
    int v7 = (a3 >> 1) & 2;
    goto LABEL_9;
  }
  int v7 = (a3 >> 1) & 2;
  if (!ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::close<di_asif::details::table,int>(a1))
  {
LABEL_9:
    atomic_store(0, (unsigned int *)(a1 + 24));
    std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((void *)(a1 + 40));
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 408, a1, a2, v7);
    MEMORY[0x223C24800](a1 + 24);
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(void *)&long long v9 = "ref::details::ctrl_blk<di_asif::details::table, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::table, tag_t = unsigned long long]";
    *((void *)&v9 + 1) = 78;
    int v10 = 16;
    di_log::logger<di_log::log_printer<210ul>>::logger(v11, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v11);
    MEMORY[0x223C24910](&v13);
    goto LABEL_9;
  }
  if (v3) {
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 408, a1, a2, v7 | 1);
  }
  return 0;
}

void sub_21E2D1D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<210ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::close<di_asif::details::table,int>(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 400)) {
    return 0;
  }
  uint64_t v1 = (di_asif::details::table *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 496);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, di_asif::details::table *))(*(void *)v2 + 48))(v2, v1);
  }
  else {
    return di_asif::details::table::close(v1);
  }
}

void *di_log::logger<di_log::log_printer<210ul>>::logger(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<210ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF2F3B8;
  a1[45] = &unk_26CF2F4B8;
  a1[46] = &unk_26CF2F4E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF2F3B8;
  a1[45] = &unk_26CF2F440;
  a1[46] = &unk_26CF2F468;
  return a1;
}

void sub_21E2D1EB4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void *std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100](void *result)
{
  if (*((unsigned char *)result + 360))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 35));
    std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v1 + 29);
    std::mutex::~mutex((std::mutex *)(v1 + 21));
    std::mutex::~mutex((std::mutex *)(v1 + 13));
    uint64_t v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = v2;
      operator delete(v2);
    }
    std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](v1 + 2, 0);
    uint64_t result = std::__function::__value_func<void ()(di_asif::details::table_entry *)>::~__value_func[abi:ne180100](v1 + 3);
    *((unsigned char *)v1 + 36std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF2F550;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2D2068(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF2F550;
  di_log::logger_buf<di_log::log_printer<210ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<210ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<210ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2D25E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<210ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 210;
    __int16 v22 = 2082;
    CFNumberRef v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    CFStringRef v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v14 = a2;
      }
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 210;
      __int16 v22 = 2082;
      CFNumberRef v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t *std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(di_asif::details::table_entry *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t std::function<void ()(di_asif::details::table_entry *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(di_asif::details::table_entry *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

atomic_ullong *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(atomic_ullong *a1)
{
  uint64_t result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(unsigned char *)(a1 + 344)
    || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(unsigned char *)(a1 + 224)
    || (uint64_t v7 = *(void *)(a1 + 320)) == 0)
  {
    int v8 = (a3 >> 1) & 2;
    goto LABEL_11;
  }
  int v8 = (a3 >> 1) & 2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 40))
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((void *)(a1 + 40));
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 232, a1, a2, v8);
    MEMORY[0x223C24800](a1 + 24);
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(void *)&long long v10 = "ref::details::ctrl_blk<di_asif::details::map_element, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::map_element, tag_t = unsigned long long]";
    *((void *)&v10 + 1) = 84;
    int v11 = 16;
    di_log::logger<di_log::log_printer<210ul>>::logger(v12, &v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v12);
    MEMORY[0x223C24910](&v14);
    goto LABEL_11;
  }
  if (v3) {
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 232, a1, a2, v8 | 1);
  }
  return 0;
}

void sub_21E2D2AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<210ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void *std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100](void *result)
{
  if (*((unsigned char *)result + 184))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 15));
    v1[4] = &unk_26CF2F5D0;
    std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100](v1 + 7, 0);
    uint64_t result = std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100](v1 + 8);
    *((unsigned char *)v1 + 184) = 0;
  }
  return result;
}

void lock_free::bitmap_dynamically_allocated_t::~bitmap_dynamically_allocated_t(lock_free::bitmap_dynamically_allocated_t *this)
{
  *(void *)this = &unk_26CF2F5D0;
  uint64_t v1 = (void *)((char *)this + 32);
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100]((uint64_t *)this + 3, 0);
  std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100](v1);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF2F5D0;
  uint64_t v1 = (void *)((char *)this + 32);
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100]((uint64_t *)this + 3, 0);
  std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100](v1);
  JUMPOUT(0x223C249A0);
}

uint64_t *std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(unsigned long long *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t std::function<void ()(unsigned long long *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

DiskImageInfo *info::DiskImageInfoLocked::DiskImageInfoLocked(DiskImageInfo *a1, crypto::header **a2)
{
  *((void *)a1 + 3) = &unk_26CF2C060;
  *((void *)a1 + 4) = &unk_26CF2C090;
  *((void *)a1 + 5) = &unk_26CF2C0C0;
  *((void *)a1 + 6) = &unk_26CF2C0F0;
  *(void *)a1 = off_26CF2FCB8;
  *((void *)a1 + 1) = off_26CF2FD00;
  *((void *)a1 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2FD48;
  *(void *)((char *)a1 + unk_26CF2FC9std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = off_26CF2FD90;
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 48)) = off_26CF2FDD8;
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2FE20;
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 64)) = off_26CF2FE68;
  *(void *)a1 = off_26CF2FA90;
  *((void *)a1 + 1) = off_26CF2FAD8;
  *((void *)a1 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = off_26CF2FB20;
  *(void *)((char *)a1 + unk_26CF2FA68) = off_26CF2FB68;
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 48)) = off_26CF2FBB0;
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 5io_rings_cancel(*((void *)this + 6)) = off_26CF2FBF8;
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 64)) = off_26CF2FC40;
  *((unsigned char *)a1 + 64) = 0;
  *((unsigned char *)a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *((void *)a1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(void *)a1 = &unk_26CF2F708;
  *((void *)a1 + 1) = &unk_26CF2F750;
  *((void *)a1 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = &unk_26CF2F798;
  *((void *)a1 + 3) = &unk_26CF2F7E0;
  *((void *)a1 + 4) = &unk_26CF2F828;
  *((void *)a1 + 5) = &unk_26CF2F870;
  *((void *)a1 + 6) = &unk_26CF2F8B8;
  *((void *)a1 + 7) = &unk_26CF2F918;
  crypto::header::populate_crypto_header_info(*a2, a1);
  return a1;
}

void sub_21E2D3190(_Unwind_Exception *a1)
{
  info::EncryptionInfo::~EncryptionInfo(v1, (const void **)&off_26CF2FA10);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoLocked::~DiskImageInfoLocked(info::DiskImageInfoLocked *this)
{
  *((void *)this + 7) = off_26CF2FEC8;
  *((void *)this + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 10);
}

{
  uint64_t vars8;

  *((void *)this + 7) = off_26CF2FEC8;
  *((void *)this + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 10);
  JUMPOUT(0x223C249A0);
}

const void **info::DiskImageInfoLocked::serialize_to_dict@<X0>(info::DiskImageInfoLocked *this@<X0>, void *a2@<X8>)
{
  v10[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoLocked *))(*(void *)this + 24))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"Locked encrypted image";
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoLocked *)((char *)this + *(void *)(*(void *)this - 112)), &v9);
  v10[4] = @"Encryption Info";
  v10[5] = v9;
  long long v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  int v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 5; i != -1; i -= 2)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_21E2D33C8(_Unwind_Exception *a1)
{
  for (uint64_t i = 40; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

__CFString *info::DiskImageInfoLocked::get_category(info::DiskImageInfoLocked *this)
{
  return @"Unknown";
}

const void **virtual thunk to'info::DiskImageInfoLocked::~DiskImageInfoLocked(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

void virtual thunk to'info::DiskImageInfoLocked::~DiskImageInfoLocked(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'info::DiskImageInfoLocked::~DiskImageInfoLocked(info::DiskImageInfoLocked *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 7) = off_26CF2FEC8;
  *((void *)v1 + 3) = off_26CF2FF20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x223C249A0);
}

const void **virtual thunk to'info::DiskImageInfoLocked::serialize_to_dict@<X0>(info::DiskImageInfoLocked *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoLocked::serialize_to_dict((info::DiskImageInfoLocked *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageInfoLocked::get_category(info::DiskImageInfoLocked *this)
{
  return @"Unknown";
}

void DiskImageSparseBundle::DiskImageSparseBundle(DiskImageSparseBundle *a1, void *a2, uint64_t a3)
{
  *((unsigned char *)a1 + 8) = 0;
  *(void *)a1 = &unk_26CF30018;
  sparse_bundles::bundle_commons_t::bundle_commons_t((DiskImageSparseBundle *)((char *)a1 + 24), a1);
  *((void *)a1 + 7std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *a2;
  uint64_t v6 = a2[1];
  *((void *)a1 + 71) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 850045863;
  *((void *)a1 + 79) = 0;
  *(_OWORD *)((char *)a1 + 584) = 0u;
  *(_OWORD *)((char *)a1 + 60std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
  *(_OWORD *)((char *)a1 + 616) = 0u;
  uint64_t v7 = (system_properties *)std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.diskimages.band_unmap");
  unsigned int logical_cpus = system_properties::get_logical_cpus(v7);
  workqueue::workqueue::workqueue((char *)a1 + 640, &__p, logical_cpus);
  if (v12 < 0) {
    operator delete(__p);
  }
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  DiskImageSparseBundle::init_bands_array_size(a1);
  *((void *)a1 + 8) = *(void *)(*((void *)a1 + 70) + 128);
  *((void *)a1 + 9) = a3;
  std::vector<sparse_bundles::band_ptr>::reserve((uint64_t *)a1 + 89, *((void *)a1 + 2));
  if (*((void *)a1 + 2)) {
    operator new();
  }
  *(void *)&long long v9 = "DiskImageSparseBundle::DiskImageSparseBundle(const shared_ptr<SparseBundleBackend> &, size_t)";
  *((void *)&v9 + 1) = 44;
  int v10 = 0;
  di_log::logger<di_log::log_printer<46ul>>::logger(&__p, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Initialized bands array of size ", 32);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf((uint64_t)&__p);
  MEMORY[0x223C24910](&v14);
  SparseBundleBackend::open_bands_folder(*((SparseBundleBackend **)a1 + 70));
}

void sub_21E2D3EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  workqueue::workqueue::~workqueue(v20);
  std::mutex::~mutex(v19);
  __int16 v22 = *(std::__shared_weak_count **)(v17 + 568);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  sparse_bundles::bundle_commons_t::~bundle_commons_t(v18);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::init_bands_array_size(DiskImageSparseBundle *this)
{
  uint64_t result = FileDescriptor::is_mounted_on_afp((FileDescriptor *)(*((void *)this + 70) + 24));
  if (result)
  {
    *(void *)&long long v4 = "DiskImageSparseBundle::init_bands_array_size()";
    *((void *)&v4 + 1) = 44;
    int v5 = 0;
    di_log::logger<di_log::log_printer<59ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Mounted on AFP, max open bands is set to ", 41);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf((uint64_t)v6);
    uint64_t result = MEMORY[0x223C24910](&v8);
    uint64_t v3 = 3;
  }
  else
  {
    uint64_t v3 = 64;
  }
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v3;
  return result;
}

void sub_21E2D4050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<59ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<sparse_bundles::band_ptr>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_21E2D4104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<46ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<46ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF30150;
  a1[45] = &unk_26CF30250;
  a1[46] = &unk_26CF30278;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF30150;
  a1[45] = &unk_26CF301D8;
  a1[46] = &unk_26CF30200;
  return a1;
}

void sub_21E2D4218(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  return a1;
}

void workqueue::workqueue::~workqueue(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

BOOL FileDescriptor::is_mounted_on_afp(FileDescriptor *this)
{
  FileDescriptor::get_mounted_on_fs((uint64_t *)__p, this);
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1718642273 && v4 == 115;
    if ((char)v9 < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v6 = 0;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }
  return v6;
}

void *di_log::logger<di_log::log_printer<59ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<59ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF30370;
  a1[45] = &unk_26CF30470;
  a1[46] = &unk_26CF30498;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF30370;
  a1[45] = &unk_26CF303F8;
  a1[46] = &unk_26CF30420;
  return a1;
}

void sub_21E2D4464(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::flush_open_bands(DiskImageSparseBundle *this)
{
  v11[18] = *(dispatch_group_t *)MEMORY[0x263EF8340];
  unsigned int v10 = 0;
  workqueue::workqueue::create_transaction((DiskImageSparseBundle *)((char *)this + 352), 0, (uint64_t)v11);
  uint64_t v2 = (const sparse_bundles::band_ptr *)*((void *)this + 89);
  int v3 = (const sparse_bundles::band_ptr *)*((void *)this + 90);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    do
    {
      sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)v8, v2);
      if (v9 && (*(unsigned char *)(v9 + 68) & 1) != 0)
      {
        v6[0] = MEMORY[0x263EF8330];
        v6[1] = 1174405120;
        uint64_t v6[2] = ___ZN21DiskImageSparseBundle16flush_open_bandsEv_block_invoke;
        void v6[3] = &__block_descriptor_tmp_11;
        sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)v7, (const sparse_bundles::band_ptr *)v8);
        void v7[3] = &v10;
        workqueue::transaction::add(v11, v6);
        ++v4;
        sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v7);
      }
      sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v8);
      uint64_t v2 = (const sparse_bundles::band_ptr *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
  workqueue::transaction::~transaction((workqueue::transaction *)v11);
  return atomic_load(&v10);
}

void sub_21E2D4630(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN21DiskImageSparseBundle16flush_open_bandsEv_block_invoke(uint64_t a1)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v3 = "size_t> DiskImageSparseBundle::flush_open_bands()_block_invoke";
    *((void *)&v3 + 1) = 47;
    int v4 = 2;
    di_log::logger<di_log::log_printer<80ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Flushing ", 9);
    sparse_bundles::operator<<(&v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x223C24910](&v7);
  }
  uint64_t result = sparse_bundles::Band::flush(*(sparse_bundles::Band **)(a1 + 40));
  if (result) {
    atomic_store(result, *(unsigned int **)(a1 + 56));
  }
  return result;
}

void sub_21E2D46FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<80ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<80ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<80ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF30590;
  a1[45] = &unk_26CF30690;
  a1[46] = &unk_26CF306B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF30590;
  a1[45] = &unk_26CF30618;
  a1[46] = &unk_26CF30640;
  return a1;
}

void sub_21E2D4810(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t __copy_helper_block_e8_32c31_ZTSN14sparse_bundles8band_ptrE(uint64_t a1, uint64_t a2)
{
  return sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)(a1 + 32), (const sparse_bundles::band_ptr *)(a2 + 32));
}

void __destroy_helper_block_e8_32c31_ZTSN14sparse_bundles8band_ptrE(uint64_t a1)
{
}

uint64_t DiskImageSparseBundle::flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + 1) = 32;
    int v8 = 2;
    di_log::logger<di_log::log_printer<101ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Starting flush", 14);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x223C24910](v11);
  }
  std::mutex::lock((std::mutex *)(a1 + 576));
  sparse_bundles::eviction_t::start_flush(a1 + 80);
  uint64_t v5 = DiskImageSparseBundle::flush_open_bands((DiskImageSparseBundle *)a1);
  sparse_bundles::eviction_t::complete_flush((sparse_bundles::eviction_t *)(a1 + 80));
  if (v5)
  {
    *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + 1) = 32;
    int v8 = 16;
    di_log::logger<di_log::log_printer<107ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Flush failed - returning ", 25);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x223C24910](v11);
  }
  else
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
      *((void *)&v7 + 1) = 32;
      int v8 = 2;
      di_log::logger<di_log::log_printer<111ul>>::logger(v9, &v7);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" bands flushed, calling ", 24);
      operator<<(&v10, a3);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x223C24910](v11);
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 16))(*(void *)(a1 + 560), a3);
  }
  std::mutex::unlock((std::mutex *)(a1 + 576));
  return v5;
}

void sub_21E2D4A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<101ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<101ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF307B0;
  a1[45] = &unk_26CF308B0;
  a1[46] = &unk_26CF308D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF307B0;
  a1[45] = &unk_26CF30838;
  a1[46] = &unk_26CF30860;
  return a1;
}

void sub_21E2D4BE0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<107ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<107ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF309D0;
  a1[45] = &unk_26CF30AD0;
  a1[46] = &unk_26CF30AF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF309D0;
  a1[45] = &unk_26CF30A58;
  a1[46] = &unk_26CF30A80;
  return a1;
}

void sub_21E2D4D48(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<111ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<111ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF30BF0;
  a1[45] = &unk_26CF30CF0;
  a1[46] = &unk_26CF30D18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF30BF0;
  a1[45] = &unk_26CF30C78;
  a1[46] = &unk_26CF30CA0;
  return a1;
}

void sub_21E2D4EB0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  return a1;
}

void DiskImageSparseBundle::get_band(uint64_t **this@<X0>, unint64_t a2@<X1>, int a3@<W2>, sparse_bundles::band_ptr *a4@<X8>)
{
  if (((unsigned int (*)(uint64_t **))(*this)[5])(this)) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  if (a3) {
    int v9 = v8 | 0x200;
  }
  else {
    int v9 = v8;
  }
  DiskImageSparseBundle::find_band_in_array((DiskImageSparseBundle *)this, a2, (sparse_bundles::band_ptr *)v10);
  if (v11)
  {
LABEL_10:
    sparse_bundles::band_ptr::band_ptr((uint64_t)a4, (uint64_t)v10);
  }
  else
  {
    while (!sparse_bundles::open_bands_t::insert(this + 26, a2))
    {
      sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
      DiskImageSparseBundle::find_band_in_array((DiskImageSparseBundle *)this, a2, (sparse_bundles::band_ptr *)v10);
      if (v11) {
        goto LABEL_10;
      }
    }
    DiskImageSparseBundle::open_band((DiskImageSparseBundle *)this, a2, v9, a4);
  }
  sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep DiskImageSparseBundle::find_band_in_array@<X0>(DiskImageSparseBundle *this@<X0>, uint64_t a2@<X1>, sparse_bundles::band_ptr *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 2);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v6 = 0;
  long long v7 = (const sparse_bundles::band_ptr *)*((void *)this + 89);
  while (*((void *)v7 + 2) != a2)
  {
    ++v6;
    long long v7 = (const sparse_bundles::band_ptr *)((char *)v7 + 24);
    if (v4 == v6) {
      goto LABEL_14;
    }
  }
  sparse_bundles::band_ptr::band_ptr(a3, v7);
  uint64_t v8 = *((void *)a3 + 1);
  if (!v8 || *(void *)(v8 + 32) != a2)
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
      *((void *)&v10 + 1) = 41;
      int v11 = 2;
      di_log::logger<di_log::log_printer<194ul>>::logger(v12, &v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Band ", 5);
      *(_DWORD *)&v14[*(void *)(v13 - 24)] = *(_DWORD *)&v14[*(void *)(v13 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v14[*(void *)(v13 - 24)] = *(_DWORD *)&v14[*(void *)(v13 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" changed before retain completed", 32);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf((uint64_t)v12);
      MEMORY[0x223C24910](v14);
    }
    sparse_bundles::band_ptr::~band_ptr(a3);
LABEL_14:
    operator new();
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
    *((void *)&v10 + 1) = 41;
    int v11 = 2;
    di_log::logger<di_log::log_printer<190ul>>::logger(v12, &v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Found ", 6);
    sparse_bundles::operator<<(&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" at index ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf((uint64_t)v12);
    MEMORY[0x223C24910](v14);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)(*(void *)a3 + 16) = result;
  return result;
}

void DiskImageSparseBundle::open_band(DiskImageSparseBundle *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, sparse_bundles::band_ptr *a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  uint64_t v19 = 0;
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32;
    int v12 = 2;
    di_log::logger<di_log::log_printer<154ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Opening band ", 13);
    *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x223C24910](v15);
  }
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  uint64_t v9[2] = ___ZN21DiskImageSparseBundle9open_bandEyi_block_invoke;
  v9[3] = &unk_2644A2998;
  uint64_t v9[4] = &v16;
  v9[5] = this;
  v9[6] = a2;
  int v10 = a3;
  sparse_bundles::bundle_commons_t::run_in_high_tier((uint64_t)this + 24, (uint64_t)v9);
  DiskImageSparseBundle::replace_oldest_band(this, (sparse_bundles::Band *)v17[3], a4);
  if (!*((void *)a4 + 1))
  {
    uint64_t v8 = 0;
    do
    {
      if (!v8 && DIDebugLogsEnabled())
      {
        *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
        *((void *)&v11 + 1) = 32;
        int v12 = 2;
        di_log::logger<di_log::log_printer<172ul>>::logger(v13, &v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Failed to evict band to make room for ", 38);
        sparse_bundles::operator<<(&v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)", retrying", 10);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf((uint64_t)v13);
        MEMORY[0x223C24910](v15);
      }
      usleep(0x3E8u);
      sparse_bundles::band_ptr::~band_ptr(a4);
      ++v8;
      DiskImageSparseBundle::replace_oldest_band(this, (sparse_bundles::Band *)v17[3], a4);
    }
    while (!*((void *)a4 + 1));
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32;
    int v12 = 2;
    di_log::logger<di_log::log_printer<165ul>>::logger(v13, &v11);
    sparse_bundles::operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" opened and replaced at attempt ", 32);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x223C24910](v15);
  }
  _Block_object_dispose(&v16, 8);
}

void sub_21E2D5640(_Unwind_Exception *a1)
{
  sparse_bundles::band_ptr::~band_ptr(v1);
  _Block_object_dispose((const void *)(v2 - 120), 8);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<154ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<154ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF30E10;
  a1[45] = &unk_26CF30F10;
  a1[46] = &unk_26CF30F38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF30E10;
  a1[45] = &unk_26CF30E98;
  a1[46] = &unk_26CF30EC0;
  return a1;
}

void sub_21E2D57A8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  return a1;
}

void ___ZN21DiskImageSparseBundle9open_bandEyi_block_invoke(uint64_t a1)
{
}

void DiskImageSparseBundle::replace_oldest_band(DiskImageSparseBundle *this@<X0>, sparse_bundles::Band *a2@<X1>, sparse_bundles::band_ptr *a3@<X8>)
{
  v23[128] = *MEMORY[0x263EF8340];
  uint64_t v6 = v23;
  std::string __p = v23;
  long long v22 = xmmword_21E39FB80;
  if (*((void *)this + 2))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = atomic_load(*(unint64_t **)(*((void *)this + 89) + v7));
      if (v9 == 1)
      {
        *(void *)&v18[0] = *(void *)(*(void *)(*((void *)this + 89) + v7) + 16);
        *((void *)&v18[0] + 1) = v8;
        int v10 = (char *)__p + 16 * v22;
        if ((void)v22 == *((void *)&v22 + 1))
        {
          boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(&__p, v10, (const char *)1, v18, &v16);
        }
        else
        {
          *(_OWORD *)int v10 = v18[0];
          *(void *)&long long v22 = v22 + 1;
        }
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < *((void *)this + 2));
    uint64_t v6 = __p;
    long long v11 = (char *)__p + 16 * v22;
    if ((void)v22)
    {
      uint64_t v12 = 126 - 2 * __clz(v22);
      goto LABEL_13;
    }
  }
  else
  {
    long long v11 = (char *)v23;
  }
  uint64_t v12 = 0;
LABEL_13:
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>((uint64_t)v6, v11, (uint64_t)v18, v12, 1);
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v16 + 1) = 42;
    int v17 = 2;
    di_log::logger<di_log::log_printer<213ul>>::logger(v18, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Looking for an evictable slot for ", 34);
    sparse_bundles::operator<<(&v19);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf((uint64_t)v18);
    MEMORY[0x223C24910](v20);
  }
  if (!(void)v22) {
LABEL_21:
  }
    operator new();
  uint64_t v13 = (uint64_t *)((char *)__p + 8);
  uint64_t v14 = 16 * v22;
  while (1)
  {
    uint64_t v15 = *v13;
    v13 += 2;
    sparse_bundles::band_ptr::replace_if_evictable((unint64_t **)(*((void *)this + 89) + 24 * v15), a2, (uint64_t)a3);
    if (*((void *)a3 + 1)) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
      *((void *)&v16 + 1) = 42;
      int v17 = 2;
      di_log::logger<di_log::log_printer<222ul>>::logger(v18, &v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Failed placing new ", 19);
      sparse_bundles::operator<<(&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" at index ", 10);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf((uint64_t)v18);
      MEMORY[0x223C24910](v20);
    }
    sparse_bundles::band_ptr::~band_ptr(a3);
    v14 -= 16;
    if (!v14) {
      goto LABEL_21;
    }
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v16 + 1) = 42;
    int v17 = 2;
    di_log::logger<di_log::log_printer<218ul>>::logger(v18, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Placed new ", 11);
    sparse_bundles::operator<<(&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" at index ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf((uint64_t)v18);
    MEMORY[0x223C24910](v20);
  }
  sparse_bundles::open_bands_t::mark_as_placed((DiskImageSparseBundle *)((char *)this + 208), *((void *)a2 + 4), 1);
  if (*((void *)&v22 + 1) && v23 != __p) {
    operator delete(__p);
  }
}

void sub_21E2D5C10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<165ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<165ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF31030;
  a1[45] = &unk_26CF31130;
  a1[46] = &unk_26CF31158;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF31030;
  a1[45] = &unk_26CF310B8;
  a1[46] = &unk_26CF310E0;
  return a1;
}

void sub_21E2D5D28(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<172ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<172ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF31250;
  a1[45] = &unk_26CF31350;
  a1[46] = &unk_26CF31378;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF31250;
  a1[45] = &unk_26CF312D8;
  a1[46] = &unk_26CF31300;
  return a1;
}

void sub_21E2D5E90(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<190ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<190ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF31470;
  a1[45] = &unk_26CF31570;
  a1[46] = &unk_26CF31598;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF31470;
  a1[45] = &unk_26CF314F8;
  a1[46] = &unk_26CF31520;
  return a1;
}

void sub_21E2D5FF8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<194ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<194ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF31690;
  a1[45] = &unk_26CF31790;
  a1[46] = &unk_26CF317B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF31690;
  a1[45] = &unk_26CF31718;
  a1[46] = &unk_26CF31740;
  return a1;
}

void sub_21E2D6160(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<213ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<213ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF318B0;
  a1[45] = &unk_26CF319B0;
  a1[46] = &unk_26CF319D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF318B0;
  a1[45] = &unk_26CF31938;
  a1[46] = &unk_26CF31960;
  return a1;
}

void sub_21E2D62C8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<218ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<218ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF31AD0;
  a1[45] = &unk_26CF31BD0;
  a1[46] = &unk_26CF31BF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF31AD0;
  a1[45] = &unk_26CF31B58;
  a1[46] = &unk_26CF31B80;
  return a1;
}

void sub_21E2D6430(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<222ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<222ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF31CF0;
  a1[45] = &unk_26CF31DF0;
  a1[46] = &unk_26CF31E18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF31CF0;
  a1[45] = &unk_26CF31D78;
  a1[46] = &unk_26CF31DA0;
  return a1;
}

void sub_21E2D6598(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  return a1;
}

void DiskImageSparseBundle::~DiskImageSparseBundle(DiskImageSparseBundle *this)
{
  *(void *)this = &unk_26CF30018;
  *(void *)&long long v7 = "DiskImageSparseBundle::~DiskImageSparseBundle()";
  *((void *)&v7 + 1) = 45;
  int v8 = 0;
  di_log::logger<di_log::log_printer<231ul>>::logger(v9, &v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Closing bands", 13);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf((uint64_t)v9);
  MEMORY[0x223C24910](&v11);
  unint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      if (*(void *)(*((void *)this + 89) + v4))
      {
        v6[0] = MEMORY[0x263EF8330];
        v6[1] = 0x40000000;
        uint64_t v6[2] = ___ZN21DiskImageSparseBundleD2Ev_block_invoke;
        void v6[3] = &__block_descriptor_tmp_32;
        void v6[4] = this;
        void v6[5] = v3;
        workqueue::transaction::add((dispatch_group_t *)this + 52, v6);
        unint64_t v2 = *((void *)this + 2);
      }
      ++v3;
      v4 += 24;
    }
    while (v3 < v2);
  }
  workqueue::transaction::flush((dispatch_group_t *)this + 52, 0xFFFFFFFFFFFFFFFFLL);
  v9[0] = (void **)((char *)this + 712);
  std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100](v9);
  v9[0] = (void **)((char *)this + 664);
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](v9);
  if (*((char *)this + 663) < 0) {
    operator delete(*((void **)this + 80));
  }
  std::mutex::~mutex((std::mutex *)this + 9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  sparse_bundles::bundle_commons_t::~bundle_commons_t((DiskImageSparseBundle *)((char *)this + 24));
}

{
  uint64_t vars8;

  DiskImageSparseBundle::~DiskImageSparseBundle(this);
  JUMPOUT(0x223C249A0);
}

void *di_log::logger<di_log::log_printer<231ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<231ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF31F10;
  a1[45] = &unk_26CF32010;
  a1[46] = &unk_26CF32038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF31F10;
  a1[45] = &unk_26CF31F98;
  a1[46] = &unk_26CF31FC0;
  return a1;
}

void sub_21E2D68B0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  return a1;
}

void ___ZN21DiskImageSparseBundleD2Ev_block_invoke()
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v0 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((void *)&v0 + 1) = 45;
    int v1 = 2;
    di_log::logger<di_log::log_printer<235ul>>::logger(&v2, &v0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v3, (uint64_t)"Background close of band at index ", 34);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf((uint64_t)&v2);
    MEMORY[0x223C24910](&v4);
  }
  operator new();
}

void sub_21E2D6A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<237ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<235ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<235ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF32130;
  a1[45] = &unk_26CF32230;
  a1[46] = &unk_26CF32258;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF32130;
  a1[45] = &unk_26CF321B8;
  a1[46] = &unk_26CF321E0;
  return a1;
}

void sub_21E2D6BC8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<237ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<237ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF32350;
  a1[45] = &unk_26CF32450;
  a1[46] = &unk_26CF32478;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF32350;
  a1[45] = &unk_26CF323D8;
  a1[46] = &unk_26CF32400;
  return a1;
}

void sub_21E2D6D30(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  return a1;
}

size_t DiskImageSparseBundle::perform_io(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)(a1 + 64);
  size_t v10 = a4[2];
  unint64_t v9 = a4[3];
  unint64_t v11 = v9 / v8;
  unint64_t v22 = v8;
  unint64_t v12 = v9 % v8;
  while (v10)
  {
    if (v10 >= v22 - v12) {
      size_t v13 = v22 - v12;
    }
    else {
      size_t v13 = v10;
    }
    uint64_t v14 = a4[4];
    uint64_t v15 = (std::__shared_weak_count *)a4[1];
    uint64_t v33 = *a4 + v7;
    int v34 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v35 = v13;
    unint64_t v36 = v12;
    uint64_t v37 = v14 - v7;
    char v38 = 0;
    DiskImageSparseBundle::get_band((uint64_t **)a1, v11, a3, (sparse_bundles::band_ptr *)&v31);
    long long v16 = v32;
    if (v32)
    {
      uint64_t v17 = *(void *)(v31 + 24);
      if (!*(void *)(*(void *)(a2 + 16) + 16 * v17)) {
        goto LABEL_12;
      }
      if (sparse_bundles::Band::ContextBand::has_null_backend(*(sparse_bundles::Band::ContextBand **)(*(void *)(a2 + 16) + 16 * v17)))
      {
        long long v16 = v32;
LABEL_12:
        sparse_bundles::Band::create_ctx(v16, v39);
      }
      sg_vec_ns::make(&v33, v39);
      uint64_t v18 = *(DiskImage::Context **)(*(void *)(a2 + 16) + 16 * v17);
      sg_vec_ref::begin((sg_vec_ref *)v40, (uint64_t)&v28);
      sg_vec_ref::end((sg_vec_ref *)v40, (uint64_t)v25);
      if (a3) {
        uint64_t v19 = DiskImage::Context::write(v18, (const sg_vec_ns::details::sg_vec_iterator *)&v28, (const sg_vec_ns::details::sg_vec_iterator *)v25);
      }
      else {
        uint64_t v19 = DiskImage::Context::read(v18, (const sg_vec_ns::details::sg_vec_iterator *)&v28, (const sg_vec_ns::details::sg_vec_iterator *)v25);
      }
      size_t v4 = v19;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (*((void *)&v28 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
      }
      sg_vec::~sg_vec((sg_vec *)v39);
      if (v4 != v13)
      {
        char v20 = 0;
        goto LABEL_31;
      }
      size_t v4 = v13;
    }
    else
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&long long v28 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
        *((void *)&v28 + 1) = 33;
        int v29 = 2;
        di_log::logger<di_log::log_printer<284ul>>::logger(v39, &v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Band ", 5);
        *(_DWORD *)&v42[*(void *)(v41 - 24)] = *(_DWORD *)&v42[*(void *)(v41 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)&v42[*(void *)(v41 - 24)] = *(_DWORD *)&v42[*(void *)(v41 - 24)] & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)" doesn't exist, returning zeros", 31);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf((uint64_t)v39);
        MEMORY[0x223C24910](v42);
      }
      bzero((void *)(*a4 + v7), v13);
    }
    unint64_t v12 = 0;
    v10 -= v13;
    v7 += v13;
    ++v11;
    char v20 = 1;
LABEL_31:
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)&v31);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if ((v20 & 1) == 0) {
      return v4;
    }
  }
  return a4[2];
}

void sub_21E2D7128(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,long long a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)&a56);
    if (a60) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a60);
    }
    if (a2 == 2)
    {
      long long v67 = __cxa_begin_catch(a1);
      *(void *)&a37 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
      *((void *)&a37 + 1) = 33;
      a38 = 16;
      di_log::logger<di_log::log_printer<295ul>>::logger(&a65, &a37);
      if (a16) {
        int v68 = "Write error: ";
      }
      else {
        int v68 = "Read error: ";
      }
      if (a16) {
        uint64_t v69 = 13;
      }
      else {
        uint64_t v69 = 12;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x328], (uint64_t)v68, v69);
      uint64_t v70 = (const char *)(*(uint64_t (**)(void *))(*(void *)v67 + 16))(v67);
      size_t v71 = strlen(v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x328], (uint64_t)v70, v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x328], (uint64_t)" (band ", 7);
      *(_DWORD *)((char *)&STACK[0x328] + *(void *)(STACK[0x328] - 24) + 8) = *(_DWORD *)((unsigned char *)&STACK[0x328]
                                                                                          + *(void *)(STACK[0x328] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&STACK[0x328] + *(void *)(STACK[0x328] - 24) + 8) = *(_DWORD *)((unsigned char *)&STACK[0x328]
                                                                                          + *(void *)(STACK[0x328] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x328], (uint64_t)", err ", 6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x328], (uint64_t)")", 1);
      di_log::logger<di_log::log_printer<295ul>>::~logger((uint64_t)&a65);
      __cxa_end_catch();
      JUMPOUT(0x21E2D70E4);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21E2D7394(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x21E2D7384);
  }
  JUMPOUT(0x21E2D71FCLL);
}

uint64_t sparse_bundles::Band::ContextBand::has_null_backend(sparse_bundles::Band::ContextBand *this)
{
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (!v2
  {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  uint64_t v4 = 1;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void *di_log::logger<di_log::log_printer<284ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<284ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF32570;
  a1[45] = &unk_26CF32670;
  a1[46] = &unk_26CF32698;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF32570;
  a1[45] = &unk_26CF325F8;
  a1[46] = &unk_26CF32620;
  return a1;
}

void sub_21E2D753C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<295ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<295ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF32790;
  a1[45] = &unk_26CF32890;
  a1[46] = &unk_26CF328B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF32790;
  a1[45] = &unk_26CF32818;
  a1[46] = &unk_26CF32840;
  return a1;
}

void sub_21E2D76A4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::void_stackable_identifier(DiskImageSparseBundle *this)
{
  unsigned int v5 = 0;
  uint64_t v2 = (std::once_flag::_State_type *)((char *)this + 704);
  v4[0] = this;
  v4[1] = &v5;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v7 = v4;
    uint64_t v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageSparseBundle::void_stackable_identifier(void)::$_0 &&>>);
  }
  return v5;
}

size_t DiskImageSparseBundle::write(DiskImageSparseBundle *a1, DiskImage::Context *a2, void *a3)
{
  int v6 = DiskImageSparseBundle::void_stackable_identifier(a1);
  if (v6)
  {
    if (v6 >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = -v6;
    }
    return -v7;
  }
  else
  {
    size_t v9 = DiskImageSparseBundle::perform_io((uint64_t)a1, (uint64_t)a2, 1, a3);
    size_t v8 = v9;
    if ((v9 & 0x8000000000000000) != 0 && v9) {
      DiskImage::Context::terminate_di(a2);
    }
  }
  return v8;
}

uint64_t DiskImage::Context::terminate_di(DiskImage::Context *this)
{
  uint64_t v1 = *((void *)this + 1);
  *(void *)&long long v4 = "DiskImage::terminate()";
  *((void *)&v4 + 1) = 20;
  int v5 = 16;
  di_log::logger<di_log::log_printer<241ul>>::logger(v6, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Encountered an inrecoverable I/O error, all future I/Os will be invalidated", 75);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf((uint64_t)v6);
  uint64_t v2 = (process_terminator *)MEMORY[0x223C24910](&v8);
  atomic_store(1u, (unsigned __int8 *)(v1 + 8));
  return process_terminator::terminate(v2);
}

void sub_21E2D7894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

unint64_t DiskImageSparseBundle::get_num_blocks(DiskImageSparseBundle *this)
{
  unint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 70) + 40))(*((void *)this + 70));
  if (v2 % (*(uint64_t (**)(DiskImageSparseBundle *))(*(void *)this + 24))(this))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Size is not a multiple of block size", 0x16u);
  }
  return v2 / (*(uint64_t (**)(DiskImageSparseBundle *))(*(void *)this + 24))(this);
}

uint64_t DiskImageSparseBundle::try_unmap_band_extents_with_index(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)v10, (const sparse_bundles::band_ptr *)(*(void *)(a1 + 712) + 24 * a2));
  BOOL v8 = v11 != 0;
  if (v11 && sparse_bundles::Band::unmap_extents(v11, a4))
  {
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
    return sparse_bundles::band_ptr::erase_if_unmapped((sparse_bundles::band_ptr *)(*(void *)(a1 + 712) + 24 * a2), a3);
  }
  else
  {
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
  }
  return v8;
}

void sub_21E2D7A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)va);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t **a1, const sparse_bundles::bundle_commons_t *a2, void *a3)
{
  int v6 = (sparse_bundles::open_bands_t *)(a1 + 26);
  uint64_t v7 = sparse_bundles::open_bands_t::insert(a1 + 26, (unint64_t)a2);
  if (v7)
  {
    BOOL v8 = (sparse_bundles::Band *)(a1 + 3);
    if ((uint64_t *)boost::icl::cardinality<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a3) != a1[8])
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&long long v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((void *)&v10 + 1) = 58;
        int v11 = 2;
        di_log::logger<di_log::log_printer<390ul>>::logger(&v12, &v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unmapping band ", 15);
        *(_DWORD *)&v14[*(void *)(v13 - 24)] = *(_DWORD *)&v14[*(void *)(v13 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)&v14[*(void *)(v13 - 24)] = *(_DWORD *)&v14[*(void *)(v13 - 24)] & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" directly (without list)", 24);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf((uint64_t)&v12);
        MEMORY[0x223C24910](v14);
      }
      sparse_bundles::mapped_blocks_t::mapped_blocks_t((uint64_t)&v12, (uint64_t)v8);
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
      *((void *)&v10 + 1) = 58;
      int v11 = 2;
      di_log::logger<di_log::log_printer<387ul>>::logger(&v12, &v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unmapping band ", 15);
      *(_DWORD *)&v14[*(void *)(v13 - 24)] = *(_DWORD *)&v14[*(void *)(v13 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v14[*(void *)(v13 - 24)] = *(_DWORD *)&v14[*(void *)(v13 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" completely", 11);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf((uint64_t)&v12);
      MEMORY[0x223C24910](v14);
    }
    sparse_bundles::Band::erase(v8, a2);
    sparse_bundles::open_bands_t::remove(v6, (unint64_t)a2);
  }
  return v7;
}

void sub_21E2D7DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2 == 1)
  {
    uint64_t v14 = (const DiskImagesRuntimeException *)__cxa_begin_catch(exception_object);
    sparse_bundles::open_bands_t::remove(v13, v12);
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v14);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<387ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<387ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF32BD0;
  a1[45] = &unk_26CF32CD0;
  a1[46] = &unk_26CF32CF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF32BD0;
  a1[45] = &unk_26CF32C58;
  a1[46] = &unk_26CF32C80;
  return a1;
}

void sub_21E2D7F84(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<390ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<390ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF32DF0;
  a1[45] = &unk_26CF32EF0;
  a1[46] = &unk_26CF32F18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF32DF0;
  a1[45] = &unk_26CF32E78;
  a1[46] = &unk_26CF32EA0;
  return a1;
}

void sub_21E2D80EC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  return a1;
}

void sparse_bundles::mapped_blocks_t::~mapped_blocks_t(sparse_bundles::mapped_blocks_t *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void DiskImagesRuntimeException::DiskImagesRuntimeException(DiskImagesRuntimeException *this, const DiskImagesRuntimeException *a2)
{
  *(void *)this = &unk_26CF39EE0;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 1, (long long *)((char *)a2 + 24));
  *((void *)this + 7) = *((void *)a2 + 7);
}

void sub_21E2D8238(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::unmap_band_extents(uint64_t a1, const sparse_bundles::bundle_commons_t *a2, void *a3)
{
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      if (!v6) {
        break;
      }
      uint64_t v7 = 0;
      BOOL v8 = (const sparse_bundles::bundle_commons_t **)(*(void *)(a1 + 712) + 16);
      while (1)
      {
        size_t v9 = *v8;
        v8 += 3;
        if (v9 == a2) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }
      if (v7 < 0) {
        break;
      }
      uint64_t result = DiskImageSparseBundle::try_unmap_band_extents_with_index(a1, v7, (uint64_t)a2, a3);
      if (result) {
        return result;
      }
      usleep(0x3E8u);
    }
LABEL_9:
    uint64_t result = DiskImageSparseBundle::try_unmap_band_extents_without_list((uint64_t **)a1, a2, a3);
  }
  while (!result);
  return result;
}

uint64_t DiskImageSparseBundle::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v38 + 1) = 32;
    int v39 = 2;
    di_log::logger<di_log::log_printer<434ul>>::logger(&v30, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Starting unmap of ", 18);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)" extents", 8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x223C24910](v37);
  }
  unint64_t v6 = *(void *)(a1 + 64);
  unsigned int v29 = 0;
  v28[0] = 0;
  v28[1] = 0;
  CFNumberRef v27 = (uint64_t *)v28;
  if (*(void *)(a1 + 344))
  {
    uint64_t v7 = DiskImageSparseBundle::void_stackable_identifier((DiskImageSparseBundle *)a1);
    if (!v7)
    {
      workqueue::workqueue::create_transaction((workqueue::workqueue *)(a1 + 640), 0, (uint64_t)&v38);
      if (a4)
      {
        uint64_t v8 = 0;
        size_t v9 = 0;
        uint64_t v20 = a3;
        do
        {
          uint64_t v10 = *(void *)(a3 + 16 * v8);
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
          uint64_t v22 = v8;
          uint64_t v12 = *(void *)(a3 + 16 * v8 + 8);
          unint64_t v23 = v11 * v10;
          unint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) * v12;
          if (DIDebugLogsEnabled())
          {
            *(void *)&long long v25 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
            *((void *)&v25 + 1) = 32;
            int v26 = 2;
            di_log::logger<di_log::log_printer<460ul>>::logger(&v30, &v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Extent ", 7);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)": [", 3);
            uint64_t v14 = v36;
            *(_DWORD *)&v37[*(void *)(v36 - 24)] |= 0x200u;
            *(_DWORD *)&v37[*(void *)(v14 - 24)] = *(_DWORD *)&v37[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 8;
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"-", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"]", 1);
            uint64_t v15 = v36;
            *(_DWORD *)&v37[*(void *)(v36 - 24)] &= ~0x200u;
            *(_DWORD *)&v37[*(void *)(v15 - 24)] = *(_DWORD *)&v37[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 2;
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf((uint64_t)&v30);
            MEMORY[0x223C24910](v37);
          }
          if (v13)
          {
            unint64_t v16 = v23 / v6;
            unint64_t v17 = v23 % v6;
            do
            {
              if ((const sparse_bundles::bundle_commons_t *)v16 != v9 && v27 != (uint64_t *)v28)
              {
                unint64_t v30 = 0;
                uint64_t v31 = &v30;
                uint64_t v32 = 0x4002000000;
                uint64_t v33 = __Block_byref_object_copy__6;
                int v34 = __Block_byref_object_dispose__6;
                std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::set[abi:ne180100]((uint64_t)v35, (uint64_t)&v27);
                v24[0] = MEMORY[0x263EF8330];
                v24[1] = 0x40000000;
                v24[2] = ___ZN21DiskImageSparseBundle5unmapERN9DiskImage7ContextEPK14unmap_extent_tm_block_invoke;
                v24[3] = &unk_2644A29E0;
                v24[4] = &v30;
                void v24[5] = a1;
                void v24[6] = v9;
                v24[7] = &v29;
                workqueue::transaction::add((dispatch_group_t *)&v38, v24);
                std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::erase(&v27, v27, (uint64_t *)v28);
                _Block_object_dispose(&v30, 8);
                std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)v35, v35[1]);
              }
              if (v13 >= v6 - v17) {
                unint64_t v18 = v6 - v17;
              }
              else {
                unint64_t v18 = v13;
              }
              if (lock_free::bitmap_t::get_bit(*(lock_free::bitmap_t **)(a1 + 344), v16))
              {
                unint64_t v30 = v17;
                uint64_t v31 = (unint64_t *)(v18 + v17);
                LOBYTE(v3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 2;
                boost::icl::interval_base_set<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_add(&v27, (uint64_t)&v30);
                size_t v9 = (const sparse_bundles::bundle_commons_t *)v16;
              }
              unint64_t v17 = 0;
              ++v16;
              v13 -= v18;
            }
            while (v13);
          }
          uint64_t v8 = v22 + 1;
          a3 = v20;
        }
        while (v22 + 1 != a4);
      }
      else
      {
        size_t v9 = 0;
      }
      if (v27 != (uint64_t *)v28) {
        DiskImageSparseBundle::unmap_band_extents(a1, v9, &v27);
      }
      workqueue::transaction::~transaction((workqueue::transaction *)&v38);
      if (DIDebugLogsEnabled())
      {
        *(void *)&long long v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
        *((void *)&v38 + 1) = 32;
        int v39 = 2;
        di_log::logger<di_log::log_printer<498ul>>::logger(&v30, &v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Unmap done", 10);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf((uint64_t)&v30);
        MEMORY[0x223C24910](v37);
      }
      uint64_t v7 = atomic_load(&v29);
    }
  }
  else
  {
    *(void *)&long long v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v38 + 1) = 32;
    int v39 = 16;
    di_log::logger<di_log::log_printer<443ul>>::logger(&v30, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Unexpected unmap command received on read only image", 52);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x223C24910](v37);
    uint64_t v7 = 4294967277;
  }
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v27, v28[0]);
  return v7;
}

void sub_21E2D88F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
}

void *di_log::logger<di_log::log_printer<434ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<434ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33010;
  a1[45] = &unk_26CF33110;
  a1[46] = &unk_26CF33138;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33010;
  a1[45] = &unk_26CF33098;
  a1[46] = &unk_26CF330C0;
  return a1;
}

void sub_21E2D8C48(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<443ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<443ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33230;
  a1[45] = &unk_26CF33330;
  a1[46] = &unk_26CF33358;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33230;
  a1[45] = &unk_26CF332B8;
  a1[46] = &unk_26CF332E0;
  return a1;
}

void sub_21E2D8DB0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<460ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<460ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33450;
  a1[45] = &unk_26CF33550;
  a1[46] = &unk_26CF33578;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33450;
  a1[45] = &unk_26CF334D8;
  a1[46] = &unk_26CF33500;
  return a1;
}

void sub_21E2D8F18(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *__Block_byref_object_copy__6(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  long long v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

uint64_t ___ZN21DiskImageSparseBundle5unmapERN9DiskImage7ContextEPK14unmap_extent_tm_block_invoke(uint64_t a1)
{
  return DiskImageSparseBundle::unmap_band_extents(*(void *)(a1 + 40), *(const sparse_bundles::bundle_commons_t **)(a1 + 48), (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
}

void *di_log::logger<di_log::log_printer<469ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<469ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33670;
  a1[45] = &unk_26CF33770;
  a1[46] = &unk_26CF33798;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33670;
  a1[45] = &unk_26CF336F8;
  a1[46] = &unk_26CF33720;
  return a1;
}

void sub_21E2D92A0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<492ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<492ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33890;
  a1[45] = &unk_26CF33990;
  a1[46] = &unk_26CF339B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33890;
  a1[45] = &unk_26CF33918;
  a1[46] = &unk_26CF33940;
  return a1;
}

void sub_21E2D9408(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<498ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<498ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33AB0;
  a1[45] = &unk_26CF33BB0;
  a1[46] = &unk_26CF33BD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33AB0;
  a1[45] = &unk_26CF33B38;
  a1[46] = &unk_26CF33B60;
  return a1;
}

void sub_21E2D9570(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::on_eject(DiskImageSparseBundle *this)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v6 = "void DiskImageSparseBundle::on_eject()";
    *((void *)&v6 + 1) = 36;
    int v7 = 2;
    di_log::logger<di_log::log_printer<505ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Evicting all bands for eject", 28);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x223C24910](v10);
  }
  if (*((void *)this + 2))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      sparse_bundles::band_ptr::replace_if_evictable((unint64_t **)(*((void *)this + 89) + v2), 0, (uint64_t)v5);
      sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v5);
      ++v3;
      v2 += 24;
    }
    while (v3 < *((void *)this + 2));
  }
  workqueue::transaction::flush((dispatch_group_t *)this + 52, 0xFFFFFFFFFFFFFFFFLL);
  *(void *)&long long v6 = "void DiskImageSparseBundle::on_eject()";
  *((void *)&v6 + 1) = 36;
  int v7 = 0;
  di_log::logger<di_log::log_printer<511ul>>::logger(v8, &v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Sparse bundle ejected", 21);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf((uint64_t)v8);
  return MEMORY[0x223C24910](v10);
}

void sub_21E2D9718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  di_log::logger<di_log::log_printer<505ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<505ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<505ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33CD0;
  a1[45] = &unk_26CF33DD0;
  a1[46] = &unk_26CF33DF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33CD0;
  a1[45] = &unk_26CF33D58;
  a1[46] = &unk_26CF33D80;
  return a1;
}

void sub_21E2D983C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<511ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<511ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF33EF0;
  a1[45] = &unk_26CF33FF0;
  a1[46] = &unk_26CF34018;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF33EF0;
  a1[45] = &unk_26CF33F78;
  a1[46] = &unk_26CF33FA0;
  return a1;
}

void sub_21E2D99A4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::set_size(DiskImage *this, uint64_t a2)
{
  uint64_t result = DiskImage::set_size_unmap_data(this, a2);
  if (!result)
  {
    if (((a2 + 4095) & 0xFFFFFFFFFFFFF000) < 0x200000000000001)
    {
      uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 70) + 56);
      return v5();
    }
    else
    {
      *(void *)&long long v6 = "int DiskImageSparseBundle::set_size(uint64_t)";
      *((void *)&v6 + 1) = 35;
      int v7 = 16;
      di_log::logger<di_log::log_printer<523ul>>::logger(v8, &v6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" bytes are above the sparsebundle limit of ", 43);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" bytes", 6);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf((uint64_t)v8);
      MEMORY[0x223C24910](&v10);
      return 4294967269;
    }
  }
  return result;
}

void sub_21E2D9B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<523ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::set_size_unmap_data(DiskImage *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 32))(this);
  unint64_t v5 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 24))(this) * v4;
  unint64_t v6 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 24))(this);
  unint64_t v7 = (a2 + v6 - 1) / v6 * v6;
  if (v5 <= v7) {
    return 0;
  }
  v11[0] = v7 / (*(uint64_t (**)(DiskImage *))(*(void *)this + 24))(this);
  v11[1] = (v5 - v7) / (*(uint64_t (**)(DiskImage *))(*(void *)this + 24))(this);
  uint64_t v8 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 136))(this);
  uint64_t v9 = (*(uint64_t (**)(DiskImage *, uint64_t, void *, uint64_t))(*(void *)this + 184))(this, v8, v11, 1);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  return v9;
}

void sub_21E2D9D1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    -[DIResizeParams resizeWithError:](v1);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<523ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<523ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF34110;
  a1[45] = &unk_26CF34210;
  a1[46] = &unk_26CF34238;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF34110;
  a1[45] = &unk_26CF34198;
  a1[46] = &unk_26CF341C0;
  return a1;
}

void sub_21E2D9E34(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::get_block_size(DiskImageSparseBundle *this)
{
  return *((void *)this + 9);
}

uint64_t DiskImageSparseBundle::is_writable(DiskImageSparseBundle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 70) + 48))();
}

void DiskImageSparseBundle::create_image_info(DiskImageSparseBundle *this)
{
}

void sub_21E2D9F40(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C40A61747DFLL);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::supports_unmap(DiskImageSparseBundle *this)
{
  return 1;
}

void DiskImageSparseBundle::_create_ctx(DiskImageSparseBundle *this)
{
}

void sub_21E2D9FB4(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0xA1C40987D6AD5);
  _Unwind_Resume(a1);
}

size_t DiskImageSparseBundle::read(uint64_t a1, uint64_t a2, void *a3)
{
  return DiskImageSparseBundle::perform_io(a1, a2, 0, a3);
}

uint64_t std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sparse_bundles::band_ptr>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sparse_bundles::band_ptr>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (sparse_bundles::band_ptr *)(v11 + v10);
    v10 -= 24;
    sparse_bundles::band_ptr::band_ptr(v12, (const sparse_bundles::band_ptr *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<sparse_bundles::band_ptr>::__emplace_back_slow_path<sparse_bundles::band_ptr>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  sparse_bundles::band_ptr::band_ptr((uint64_t)v14, a2);
  uint64_t v15 = v14 + 24;
  std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_21E2DA234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<46ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF302E8;
  di_log::logger_buf<di_log::log_printer<46ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<46ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DA770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<46ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 46;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 46;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)(v4 - 24));
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (NSObject **)**a1;
  if (v2)
  {
    int v4 = (NSObject **)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        gcd::gcd_group::~gcd_group(v4 - 1);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sparse_bundles::bundle_commons_t::~bundle_commons_t(sparse_bundles::bundle_commons_t *this)
{
  workqueue::transaction::~transaction((sparse_bundles::bundle_commons_t *)((char *)this + 392));
  char v6 = (void **)((char *)this + 352);
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  uint64_t v2 = *((void *)this + 40);
  *((void *)this + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 272));
  std::mutex::~mutex((std::mutex *)((char *)this + 208));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 136));
  std::mutex::~mutex((std::mutex *)this + 1);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<59ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF30508;
  di_log::logger_buf<di_log::log_printer<59ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<59ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DB10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<59ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 59;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 59;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<80ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF30728;
  di_log::logger_buf<di_log::log_printer<80ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<80ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DB880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<80ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 80;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 80;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<101ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF30948;
  di_log::logger_buf<di_log::log_printer<101ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<101ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DBFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<101ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 101;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 101;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<107ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF30B68;
  di_log::logger_buf<di_log::log_printer<107ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<107ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DC768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<107ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 107;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 107;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<111ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF30D88;
  di_log::logger_buf<di_log::log_printer<111ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<111ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DCEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<111ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 111;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 111;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<154ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF30FA8;
  di_log::logger_buf<di_log::log_printer<154ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<154ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DD650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<154ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 154;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 154;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<165ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF311C8;
  di_log::logger_buf<di_log::log_printer<165ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<165ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DDDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<165ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 165;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 165;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<172ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF313E8;
  di_log::logger_buf<di_log::log_printer<172ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<172ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DE538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<172ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 172;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 172;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<190ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF31608;
  di_log::logger_buf<di_log::log_printer<190ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<190ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DECAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<190ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 190;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 190;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<194ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF31828;
  di_log::logger_buf<di_log::log_printer<194ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<194ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2DF420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<194ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 194;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 194;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 4;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v28 = *((void *)a2 - 2);
          uint64_t v29 = *v11;
          char v30 = -1;
          if (v28 >= *v11) {
            char v30 = 1;
          }
          if (v28 == *v11)
          {
            unint64_t v31 = *((void *)a2 - 1);
            unint64_t v32 = v11[1];
            BOOL v5 = v31 >= v32;
            BOOL v33 = v31 == v32;
            char v30 = -1;
            if (v5) {
              char v30 = 1;
            }
            if (v33) {
              char v30 = 0;
            }
          }
          if (v30 < 0)
          {
            uint64_t v34 = v11[1];
            uint64_t v35 = *((void *)a2 - 1);
            *uint64_t v11 = v28;
            v11[1] = v35;
            *((void *)a2 - std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v29;
            *((void *)a2 - 1) = v34;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11, v11 + 2, (uint64_t *)a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11 + 2, v17 - 2, (uint64_t *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)int v17 = v18;
      if (a5) {
        goto LABEL_24;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2);
      if (a5) {
        goto LABEL_24;
      }
    }
    uint64_t v19 = *(v11 - 2);
    BOOL v20 = v19 == *v11;
    if (v19 >= *v11) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (v20)
    {
      unint64_t v22 = *(v11 - 1);
      unint64_t v23 = v11[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }
    if ((v21 & 0x80) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(v11, a2);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_29;
    }
LABEL_24:
    long long v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(v11, (uint64_t *)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11, v25);
    uint64_t v11 = v25 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v25 + 2, (uint64_t *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_27:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>(v10, v25, a3, -v13, a5 & 1);
      uint64_t v11 = v25 + 2;
LABEL_29:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11, (uint64_t *)a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v11, (uint64_t *)a2);
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      int v4 = result;
      do
      {
        BOOL v5 = v2;
        uint64_t v6 = v4[2];
        uint64_t v7 = *v4;
        if (v6 >= *v4) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if (v6 == *v4)
        {
          unint64_t v9 = v4[3];
          unint64_t v10 = v4[1];
          BOOL v11 = v9 == v10;
          char v8 = v9 >= v10 ? 1 : -1;
          if (v11) {
            char v8 = 0;
          }
        }
        if (v8 < 0)
        {
          unint64_t v12 = v4[3];
          uint64_t v13 = v3;
          while (1)
          {
            uint64_t v14 = (char *)result + v13;
            uint64_t v15 = *(uint64_t *)((char *)result + v13 + 8);
            *((void *)v14 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v7;
            *((void *)v14 + 3) = v15;
            if (!v13) {
              break;
            }
            uint64_t v7 = *((void *)v14 - 2);
            if (v6 >= v7) {
              char v16 = 1;
            }
            else {
              char v16 = -1;
            }
            if (v6 == v7)
            {
              unint64_t v17 = *(uint64_t *)((char *)result + v13 - 8);
              BOOL v18 = v12 == v17;
              if (v12 >= v17) {
                char v16 = 1;
              }
              else {
                char v16 = -1;
              }
              if (v18) {
                char v16 = 0;
              }
            }
            v13 -= 16;
            if ((v16 & 0x80) == 0)
            {
              uint64_t v19 = (uint64_t *)((char *)result + v13 + 16);
              goto LABEL_28;
            }
          }
          uint64_t v19 = result;
LABEL_28:
          uint64_t *v19 = v6;
          v19[1] = v12;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        int v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = (unint64_t *)(result + 3);
      do
      {
        int v4 = v2;
        uint64_t v5 = result[2];
        uint64_t v6 = *result;
        if (v5 >= *result) {
          char v7 = 1;
        }
        else {
          char v7 = -1;
        }
        if (v5 == *result)
        {
          unint64_t v8 = result[3];
          unint64_t v9 = result[1];
          BOOL v10 = v8 == v9;
          char v7 = v8 >= v9 ? 1 : -1;
          if (v10) {
            char v7 = 0;
          }
        }
        if (v7 < 0)
        {
          unint64_t v11 = result[3];
          unint64_t v12 = v3;
          do
          {
            *(v12 - 1) = v6;
            unint64_t *v12 = *(v12 - 2);
            uint64_t v6 = *(v12 - 5);
            if (v5 >= v6) {
              char v13 = 1;
            }
            else {
              char v13 = -1;
            }
            if (v5 == v6)
            {
              unint64_t v14 = *(v12 - 4);
              BOOL v15 = v11 == v14;
              if (v11 >= v14) {
                char v13 = 1;
              }
              else {
                char v13 = -1;
              }
              if (v15) {
                char v13 = 0;
              }
            }
            v12 -= 2;
          }
          while (v13 < 0);
          *(v12 - 1) = v5;
          unint64_t *v12 = v11;
        }
        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 >= *a1) {
    char v5 = 1;
  }
  else {
    char v5 = -1;
  }
  if (*a2 == *a1)
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = a1[1];
    BOOL v8 = v6 >= v7;
    BOOL v9 = v6 == v7;
    char v10 = -1;
    if (v8) {
      char v10 = 1;
    }
    if (v9) {
      char v5 = 0;
    }
    else {
      char v5 = v10;
    }
  }
  uint64_t v11 = *a3;
  char v12 = -1;
  if (*a3 >= v3) {
    char v12 = 1;
  }
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      unint64_t v18 = a3[1];
      unint64_t v19 = a2[1];
      BOOL v8 = v18 >= v19;
      BOOL v20 = v18 == v19;
      char v12 = -1;
      if (v8) {
        char v12 = 1;
      }
      if (v20) {
        char v12 = 0;
      }
    }
    if (v12 < 0)
    {
      uint64_t v36 = a1[1];
      uint64_t v37 = a3[1];
      *a1 = v11;
      a1[1] = v37;
      *a3 = v4;
      a3[1] = v36;
    }
    else
    {
      unint64_t v21 = a1[1];
      uint64_t v22 = a2[1];
      *a1 = v3;
      a1[1] = v22;
      *a2 = v4;
      a2[1] = v21;
      char v23 = -1;
      if (*a3 >= v4) {
        char v23 = 1;
      }
      if (*a3 == v4)
      {
        unint64_t v24 = a3[1];
        BOOL v8 = v24 >= v21;
        BOOL v25 = v24 == v21;
        char v23 = -1;
        if (v8) {
          char v23 = 1;
        }
        if (v25) {
          char v23 = 0;
        }
      }
      if (v23 < 0)
      {
        uint64_t v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v4;
        a3[1] = v21;
        return 2;
      }
    }
  }
  else
  {
    if (v11 == v3)
    {
      unint64_t v13 = a3[1];
      unint64_t v14 = a2[1];
      BOOL v8 = v13 >= v14;
      BOOL v15 = v13 == v14;
      char v16 = -1;
      if (v8) {
        char v16 = 1;
      }
      if (v15) {
        char v12 = 0;
      }
      else {
        char v12 = v16;
      }
    }
    if ((v12 & 0x80) == 0) {
      return 0;
    }
    *a2 = v11;
    *a3 = v3;
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    a2[1] = a3[1];
    a3[1] = v28;
    uint64_t v29 = *a1;
    char v30 = -1;
    if (v27 >= *a1) {
      char v30 = 1;
    }
    if (v27 == *a1)
    {
      unint64_t v31 = a2[1];
      unint64_t v32 = a1[1];
      BOOL v8 = v31 >= v32;
      BOOL v33 = v31 == v32;
      char v30 = -1;
      if (v8) {
        char v30 = 1;
      }
      if (v33) {
        char v30 = 0;
      }
    }
    if (v30 < 0)
    {
      uint64_t v34 = a1[1];
      uint64_t v35 = a2[1];
      *a1 = v27;
      a1[1] = v35;
      *a2 = v29;
      a2[1] = v34;
      return 2;
    }
  }
  return 1;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(void *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(a2 - 2);
  BOOL v5 = *a1 == v4;
  if (*a1 >= v4) {
    char v6 = 1;
  }
  else {
    char v6 = -1;
  }
  if (v5)
  {
    unint64_t v7 = *(a2 - 1);
    BOOL v8 = v3 >= v7;
    BOOL v9 = v3 == v7;
    char v6 = -1;
    if (v8) {
      char v6 = 1;
    }
    if (v9) {
      char v6 = 0;
    }
  }
  if (v6 < 0)
  {
    BOOL v15 = a1;
    uint64_t v11 = a1;
    do
    {
      uint64_t v16 = v11[2];
      v11 += 2;
      BOOL v17 = v2 == v16;
      if (v2 >= v16) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = v15[3];
        BOOL v20 = v3 == v19;
        char v18 = v3 >= v19 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }
      BOOL v15 = v11;
    }
    while ((v18 & 0x80) == 0);
  }
  else
  {
    char v10 = a1 + 2;
    do
    {
      uint64_t v11 = v10;
      if (v10 >= a2) {
        break;
      }
      if (v2 >= *v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v2 == *v10)
      {
        unint64_t v13 = v10[1];
        BOOL v14 = v3 == v13;
        char v12 = v3 >= v13 ? 1 : -1;
        if (v14) {
          char v12 = 0;
        }
      }
      v10 += 2;
    }
    while ((v12 & 0x80) == 0);
  }
  if (v11 >= a2)
  {
    unint64_t v21 = a2;
  }
  else
  {
    unint64_t v21 = a2;
    do
    {
      uint64_t v22 = *(v21 - 2);
      v21 -= 2;
      BOOL v23 = v2 == v22;
      if (v2 >= v22) {
        char v24 = 1;
      }
      else {
        char v24 = -1;
      }
      if (v23)
      {
        unint64_t v25 = *(a2 - 1);
        BOOL v26 = v3 == v25;
        char v24 = v3 >= v25 ? 1 : -1;
        if (v26) {
          char v24 = 0;
        }
      }
      a2 = v21;
    }
    while (v24 < 0);
  }
  if (v11 < v21)
  {
    uint64_t v27 = *v11;
    uint64_t v28 = *v21;
    do
    {
      uint64_t v29 = v11[1];
      uint64_t v30 = v21[1];
      *uint64_t v11 = v28;
      v11[1] = v30;
      *unint64_t v21 = v27;
      v21[1] = v29;
      unint64_t v31 = v11;
      do
      {
        uint64_t v32 = v11[2];
        v11 += 2;
        uint64_t v27 = v32;
        BOOL v33 = v2 == v32;
        if (v2 >= v32) {
          char v34 = 1;
        }
        else {
          char v34 = -1;
        }
        if (v33)
        {
          unint64_t v35 = v31[3];
          BOOL v36 = v3 == v35;
          char v34 = v3 >= v35 ? 1 : -1;
          if (v36) {
            char v34 = 0;
          }
        }
        unint64_t v31 = v11;
      }
      while ((v34 & 0x80) == 0);
      uint64_t v37 = v21;
      do
      {
        uint64_t v38 = *(v21 - 2);
        v21 -= 2;
        uint64_t v28 = v38;
        BOOL v39 = v2 == v38;
        if (v2 >= v38) {
          char v40 = 1;
        }
        else {
          char v40 = -1;
        }
        if (v39)
        {
          unint64_t v41 = *(v37 - 1);
          BOOL v42 = v3 == v41;
          char v40 = v3 >= v41 ? 1 : -1;
          if (v42) {
            char v40 = 0;
          }
        }
        uint64_t v37 = v21;
      }
      while (v40 < 0);
    }
    while (v11 < v21);
  }
  if (v11 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
  }
  *(v11 - std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v2;
  *(v11 - 1) = v3;
  return v11;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  do
  {
    uint64_t v5 = a1[v2 + 2];
    if (v5 >= v3) {
      char v6 = 1;
    }
    else {
      char v6 = -1;
    }
    if (v5 == v3)
    {
      unint64_t v7 = a1[v2 + 3];
      BOOL v8 = v7 == v4;
      char v6 = v7 >= v4 ? 1 : -1;
      if (v8) {
        char v6 = 0;
      }
    }
    v2 += 2;
  }
  while (v6 < 0);
  BOOL v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      char v10 = a2 - 2;
      uint64_t v16 = *(a2 - 2);
      BOOL v17 = v16 == v3;
      if (v16 >= v3) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = *(a2 - 1);
        BOOL v20 = v19 == v4;
        char v18 = v19 >= v4 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }
      a2 -= 2;
      if (v18 < 0) {
        goto LABEL_39;
      }
    }
    char v10 = a2;
  }
  else
  {
    char v10 = a2;
    do
    {
      uint64_t v11 = *(v10 - 2);
      v10 -= 2;
      BOOL v12 = v11 == v3;
      if (v11 >= v3) {
        char v13 = 1;
      }
      else {
        char v13 = -1;
      }
      if (v12)
      {
        unint64_t v14 = *(a2 - 1);
        BOOL v15 = v14 == v4;
        char v13 = v14 >= v4 ? 1 : -1;
        if (v15) {
          char v13 = 0;
        }
      }
      a2 = v10;
    }
    while ((v13 & 0x80) == 0);
  }
LABEL_39:
  if (v9 >= v10)
  {
    uint64_t v22 = v9;
  }
  else
  {
    uint64_t v21 = *v10;
    uint64_t v22 = v9;
    BOOL v23 = v10;
    do
    {
      uint64_t v24 = v22[1];
      uint64_t v25 = v23[1];
      *uint64_t v22 = v21;
      v22[1] = v25;
      *BOOL v23 = v5;
      v23[1] = v24;
      BOOL v26 = v22;
      do
      {
        uint64_t v27 = v22[2];
        v22 += 2;
        uint64_t v5 = v27;
        BOOL v28 = v27 == v3;
        if (v27 >= v3) {
          char v29 = 1;
        }
        else {
          char v29 = -1;
        }
        if (v28)
        {
          unint64_t v30 = v26[3];
          BOOL v31 = v30 == v4;
          char v29 = v30 >= v4 ? 1 : -1;
          if (v31) {
            char v29 = 0;
          }
        }
        BOOL v26 = v22;
      }
      while (v29 < 0);
      uint64_t v32 = v23;
      do
      {
        uint64_t v33 = *(v23 - 2);
        v23 -= 2;
        uint64_t v21 = v33;
        BOOL v34 = v33 == v3;
        if (v33 >= v3) {
          char v35 = 1;
        }
        else {
          char v35 = -1;
        }
        if (v34)
        {
          unint64_t v36 = *(v32 - 1);
          BOOL v37 = v36 == v4;
          char v35 = v36 >= v4 ? 1 : -1;
          if (v37) {
            char v35 = 0;
          }
        }
        uint64_t v32 = v23;
      }
      while ((v35 & 0x80) == 0);
    }
    while (v22 < v23);
  }
  if (v22 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  }
  *(v22 - std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = *a1;
      char v8 = -1;
      if (v6 >= *a1) {
        char v8 = 1;
      }
      if (v6 == *a1)
      {
        unint64_t v9 = *(a2 - 1);
        unint64_t v10 = a1[1];
        BOOL v11 = v9 >= v10;
        BOOL v12 = v9 == v10;
        char v8 = -1;
        if (v11) {
          char v8 = 1;
        }
        if (v12) {
          char v8 = 0;
        }
      }
      if (v8 < 0)
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v14;
        *(a2 - std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v7;
        *(a2 - 1) = v13;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      BOOL v15 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a1 + 4);
      uint64_t v16 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v16;
    uint64_t v20 = *v15;
    if (*v16 >= *v15) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (*v16 == *v15)
    {
      unint64_t v22 = v16[1];
      unint64_t v23 = v15[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }
    if (v21 < 0)
    {
      unint64_t v25 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        uint64_t v27 = (uint64_t *)((char *)a1 + v26);
        uint64_t v28 = *(uint64_t *)((char *)a1 + v26 + 40);
        v27[6] = v20;
        v27[7] = v28;
        if (v26 == -32) {
          break;
        }
        uint64_t v20 = v27[2];
        if (v19 >= v20) {
          char v29 = 1;
        }
        else {
          char v29 = -1;
        }
        if (v19 == v20)
        {
          unint64_t v30 = *(uint64_t *)((char *)a1 + v26 + 24);
          BOOL v31 = v25 == v30;
          char v29 = v25 >= v30 ? 1 : -1;
          if (v31) {
            char v29 = 0;
          }
        }
        v26 -= 16;
        if ((v29 & 0x80) == 0)
        {
          uint64_t v32 = (uint64_t *)((char *)a1 + v26 + 48);
          goto LABEL_38;
        }
      }
      uint64_t v32 = a1;
LABEL_38:
      uint64_t *v32 = v19;
      v32[1] = v25;
      if (++v18 == 8) {
        return v16 + 2 == a2;
      }
    }
    BOOL v15 = v16;
    v17 += 16;
    v16 += 2;
    if (v16 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a2, a3);
  uint64_t v9 = *a3;
  char v10 = -1;
  if (*a4 >= *a3) {
    char v10 = 1;
  }
  if (*a4 == *a3)
  {
    unint64_t v11 = a4[1];
    unint64_t v12 = a3[1];
    BOOL v13 = v11 >= v12;
    BOOL v14 = v11 == v12;
    char v10 = -1;
    if (v13) {
      char v10 = 1;
    }
    if (v14) {
      char v10 = 0;
    }
  }
  if (v10 < 0)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = *a2;
    char v18 = -1;
    if (v15 >= *a2) {
      char v18 = 1;
    }
    if (v15 == *a2)
    {
      unint64_t v19 = a3[1];
      unint64_t v20 = a2[1];
      BOOL v13 = v19 >= v20;
      BOOL v21 = v19 == v20;
      char v18 = -1;
      if (v13) {
        char v18 = 1;
      }
      if (v21) {
        char v18 = 0;
      }
    }
    if (v18 < 0)
    {
      *a2 = v15;
      *a3 = v17;
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      uint64_t v24 = *a1;
      char v25 = -1;
      if (v22 >= *a1) {
        char v25 = 1;
      }
      if (v22 == *a1)
      {
        unint64_t v26 = a2[1];
        unint64_t v27 = a1[1];
        BOOL v13 = v26 >= v27;
        BOOL v28 = v26 == v27;
        char v25 = -1;
        if (v13) {
          char v25 = 1;
        }
        if (v28) {
          char v25 = 0;
        }
      }
      if (v25 < 0)
      {
        uint64_t v29 = a1[1];
        uint64_t v30 = a2[1];
        *a1 = v22;
        a1[1] = v30;
        *a2 = v24;
        a2[1] = v29;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  char v12 = -1;
  if (*a5 >= *a4) {
    char v12 = 1;
  }
  if (*a5 == *a4)
  {
    unint64_t v13 = a5[1];
    unint64_t v14 = a4[1];
    BOOL v15 = v13 >= v14;
    BOOL v16 = v13 == v14;
    char v12 = -1;
    if (v15) {
      char v12 = 1;
    }
    if (v16) {
      char v12 = 0;
    }
  }
  if (v12 < 0)
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v17 = *a4;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = *a3;
    char v20 = -1;
    if (v17 >= *a3) {
      char v20 = 1;
    }
    if (v17 == *a3)
    {
      unint64_t v21 = a4[1];
      unint64_t v22 = a3[1];
      BOOL v15 = v21 >= v22;
      BOOL v23 = v21 == v22;
      char v20 = -1;
      if (v15) {
        char v20 = 1;
      }
      if (v23) {
        char v20 = 0;
      }
    }
    if (v20 < 0)
    {
      *a3 = v17;
      *a4 = v19;
      uint64_t v24 = *a3;
      uint64_t v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      uint64_t v26 = *a2;
      char v27 = -1;
      if (v24 >= *a2) {
        char v27 = 1;
      }
      if (v24 == *a2)
      {
        unint64_t v28 = a3[1];
        unint64_t v29 = a2[1];
        BOOL v15 = v28 >= v29;
        BOOL v30 = v28 == v29;
        char v27 = -1;
        if (v15) {
          char v27 = 1;
        }
        if (v30) {
          char v27 = 0;
        }
      }
      if (v27 < 0)
      {
        *a2 = v24;
        *a3 = v26;
        uint64_t v31 = *a2;
        uint64_t v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        uint64_t v33 = *a1;
        char v34 = -1;
        if (v31 >= *a1) {
          char v34 = 1;
        }
        if (v31 == *a1)
        {
          unint64_t v35 = a2[1];
          unint64_t v36 = a1[1];
          BOOL v15 = v35 >= v36;
          BOOL v37 = v35 == v36;
          char v34 = -1;
          if (v15) {
            char v34 = 1;
          }
          if (v37) {
            char v34 = 0;
          }
        }
        if (v34 < 0)
        {
          uint64_t v38 = a1[1];
          uint64_t v39 = a2[1];
          *a1 = v31;
          a1[1] = v39;
          *a2 = v33;
          a2[1] = v38;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = &a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 >= *(void *)a1) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (*(void *)v14 == *(void *)a1)
        {
          unint64_t v17 = *((void *)v14 + 1);
          unint64_t v18 = *((void *)a1 + 1);
          BOOL v19 = v17 == v18;
          char v16 = v17 >= v18 ? 1 : -1;
          if (v19) {
            char v16 = 0;
          }
        }
        if (v16 < 0)
        {
          uint64_t v20 = *((void *)v14 + 1);
          uint64_t v21 = *((void *)a1 + 1);
          *(void *)unint64_t v14 = *(void *)a1;
          *((void *)v14 + 1) = v21;
          *(void *)a1 = v15;
          *((void *)a1 + 1) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v22 = (unint64_t)v8 >> 4;
      BOOL v23 = a2 - 16;
      do
      {
        uint64_t v25 = *(void *)a1;
        uint64_t v24 = *((void *)a1 + 1);
        uint64_t v26 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a4, v22);
        if (v23 == v26)
        {
          *(void *)uint64_t v26 = v25;
          *((void *)v26 + 1) = v24;
        }
        else
        {
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v23;
          *(void *)BOOL v23 = v25;
          *((void *)v23 + 1) = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((uint64_t)a1, (uint64_t)(v26 + 16), a4, (v26 + 16 - a1) >> 4);
        }
        v23 -= 16;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (void *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = v8[2];
        BOOL v11 = *v8 == v10;
        if (*v8 >= v10) {
          char v12 = 1;
        }
        else {
          char v12 = -1;
        }
        if (v11)
        {
          unint64_t v13 = *(void *)(result + 16 * v7 + 8);
          unint64_t v14 = v8[3];
          BOOL v15 = v13 >= v14;
          BOOL v16 = v13 == v14;
          char v12 = -1;
          if (v15) {
            char v12 = 1;
          }
          if (v16) {
            char v12 = 0;
          }
        }
        if (v12 < 0)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v17 = *v8;
      uint64_t v18 = *a4;
      char v19 = -1;
      if (*v8 >= *a4) {
        char v19 = 1;
      }
      if (*v8 == *a4)
      {
        unint64_t v20 = v8[1];
        unint64_t v21 = a4[1];
        BOOL v15 = v20 >= v21;
        BOOL v22 = v20 == v21;
        char v19 = -1;
        if (v15) {
          char v19 = 1;
        }
        if (v22) {
          char v19 = 0;
        }
      }
      if ((v19 & 0x80) == 0)
      {
        unint64_t v23 = a4[1];
        do
        {
          uint64_t v24 = a4;
          a4 = v8;
          uint64_t v25 = v8[1];
          void *v24 = v17;
          v24[1] = v25;
          if (v5 < v7) {
            break;
          }
          uint64_t v26 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 16 * v26);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v7 = v26;
          }
          else
          {
            uint64_t v27 = v8[2];
            BOOL v28 = *v8 == v27;
            if (*v8 >= v27) {
              char v29 = 1;
            }
            else {
              char v29 = -1;
            }
            if (v28)
            {
              unint64_t v30 = *(void *)(result + 16 * v26 + 8);
              unint64_t v31 = v8[3];
              BOOL v32 = v30 == v31;
              char v29 = v30 >= v31 ? 1 : -1;
              if (v32) {
                char v29 = 0;
              }
            }
            if (v29 < 0) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v26;
            }
          }
          uint64_t v17 = *v8;
          if (*v8 >= v18) {
            char v33 = 1;
          }
          else {
            char v33 = -1;
          }
          if (*v8 == v18)
          {
            unint64_t v34 = v8[1];
            BOOL v35 = v34 == v23;
            if (v34 >= v23) {
              char v33 = 1;
            }
            else {
              char v33 = -1;
            }
            if (v35) {
              char v33 = 0;
            }
          }
        }
        while ((v33 & 0x80) == 0);
        *a4 = v18;
        a4[1] = v23;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = v3 + 1;
    uint64_t v7 = &a1[v3 + 1];
    uint64_t v8 = (2 * v3) | 1;
    uint64_t v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = v7[2];
      BOOL v11 = *v7 == v10;
      if (*v7 >= v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unint64_t v13 = *((void *)&a1[v6] + 1);
        unint64_t v14 = v7[3];
        BOOL v15 = v13 == v14;
        if (v13 >= v14) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (v15) {
          char v12 = 0;
        }
        else {
          char v12 = v16;
        }
      }
      if (v12 < 0)
      {
        v7 += 2;
        uint64_t v8 = v9;
      }
    }
    *a1 = *(_OWORD *)v7;
    a1 = v7;
    uint64_t v3 = v8;
  }
  while (v8 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(void *)(a2 - 16);
    uint64_t v9 = *v6;
    char v10 = -1;
    if (*v6 >= v8) {
      char v10 = 1;
    }
    if (*v6 == v8)
    {
      unint64_t v11 = v6[1];
      unint64_t v12 = *(void *)(a2 - 8);
      BOOL v13 = v11 >= v12;
      BOOL v14 = v11 == v12;
      char v10 = -1;
      if (v13) {
        char v10 = 1;
      }
      if (v14) {
        char v10 = 0;
      }
    }
    if (v10 < 0)
    {
      unint64_t v15 = *(void *)(a2 - 8);
      do
      {
        char v16 = v7;
        uint64_t v7 = v6;
        uint64_t v17 = v6[1];
        void *v16 = v9;
        v16[1] = v17;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 16 * v5);
        uint64_t v9 = *v6;
        if (*v6 >= v8) {
          char v18 = 1;
        }
        else {
          char v18 = -1;
        }
        if (*v6 == v8)
        {
          unint64_t v19 = v6[1];
          BOOL v20 = v19 == v15;
          if (v19 >= v15) {
            char v18 = 1;
          }
          else {
            char v18 = -1;
          }
          if (v20) {
            char v18 = 0;
          }
        }
      }
      while (v18 < 0);
      *uint64_t v7 = v8;
      v7[1] = v15;
    }
  }
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<213ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF31A48;
  di_log::logger_buf<di_log::log_printer<213ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<213ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E0DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<213ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 213;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 213;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<218ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF31C68;
  di_log::logger_buf<di_log::log_printer<218ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<218ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E1524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<218ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 218;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 218;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<222ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF31E88;
  di_log::logger_buf<di_log::log_printer<222ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<222ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E1C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<222ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 222;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 222;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<231ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF320A8;
  di_log::logger_buf<di_log::log_printer<231ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<231ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E240C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<231ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 231;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 231;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<235ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF322C8;
  di_log::logger_buf<di_log::log_printer<235ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<235ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E2B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<235ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 235;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 235;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<237ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF324E8;
  di_log::logger_buf<di_log::log_printer<237ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<237ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E32F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<237ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 237;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 237;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<284ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF32708;
  di_log::logger_buf<di_log::log_printer<284ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<284ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E3A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<284ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 284;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 284;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<295ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF32928;
  di_log::logger_buf<di_log::log_printer<295ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<295ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E41DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<295ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 295;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 295;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<241ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<241ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF329B0;
  a1[45] = &unk_26CF32AB0;
  a1[46] = &unk_26CF32AD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF329B0;
  a1[45] = &unk_26CF32A38;
  a1[46] = &unk_26CF32A60;
  return a1;
}

void sub_21E2E4528(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF32B48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2E460C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF32B48;
  di_log::logger_buf<di_log::log_printer<241ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<241ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<241ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E4B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<241ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 241;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 241;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<387ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF32D68;
  di_log::logger_buf<di_log::log_printer<387ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<387ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E52BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<387ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 387;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 387;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<390ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF32F88;
  di_log::logger_buf<di_log::log_printer<390ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<390ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E5A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<390ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 390;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 390;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_21E2E5CAC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<434ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF331A8;
  di_log::logger_buf<di_log::log_printer<434ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<434ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<434ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 434;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 434;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<443ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF333C8;
  di_log::logger_buf<di_log::log_printer<443ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<443ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E69C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<443ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 443;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 443;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<460ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF335E8;
  di_log::logger_buf<di_log::log_printer<460ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<460ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E7134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<460ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 460;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 460;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<469ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF33808;
  di_log::logger_buf<di_log::log_printer<469ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<469ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E78A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<469ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 469;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 469;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<492ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF33A28;
  di_log::logger_buf<di_log::log_printer<492ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<492ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E801C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<492ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 492;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 492;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<498ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF33C48;
  di_log::logger_buf<di_log::log_printer<498ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<498ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E8790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<498ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 498;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 498;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<505ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF33E68;
  di_log::logger_buf<di_log::log_printer<505ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<505ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E8F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<505ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 505;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 505;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<511ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF34088;
  di_log::logger_buf<di_log::log_printer<511ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<511ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E9678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<511ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 511;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 511;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<523ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF342A8;
  di_log::logger_buf<di_log::log_printer<523ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<523ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2E9DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<523ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 523;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 523;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

DiskImageSparseBundle::ContextSparseBundle *DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle::ContextSparseBundle *this, DiskImageSparseBundle *a2)
{
  *(void *)this = &unk_26CF34328;
  *((void *)this + 1) = a2;
  std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::vector((void *)this + 2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 90) - *((void *)a2 + 89)) >> 3));
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v4 = "DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle &)";
    *((void *)&v4 + 1) = 63;
    int v5 = 2;
    di_log::logger<di_log::log_printer<37ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Constructing sb context", 23);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
  }
  return this;
}

void sub_21E2EA11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<37ul>>::~logger((uint64_t)va);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<37ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<37ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF34388;
  a1[45] = &unk_26CF34488;
  a1[46] = &unk_26CF344B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF34388;
  a1[45] = &unk_26CF34410;
  a1[46] = &unk_26CF34438;
  return a1;
}

void sub_21E2EA248(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  return a1;
}

void DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle(DiskImageSparseBundle::ContextSparseBundle *this)
{
  DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle(this);
  JUMPOUT(0x223C249A0);
}

{
  long long v2;
  int v3;
  void **v4[45];
  uint64_t v5;
  uint64_t v6;

  *(void *)this = &unk_26CF34328;
  if (DIDebugLogsEnabled())
  {
    *(void *)&uint64_t v2 = "DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle()";
    *((void *)&v2 + 1) = 64;
    uint64_t v3 = 2;
    di_log::logger<di_log::log_printer<41ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Destructing sb context", 22);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf((uint64_t)v4);
    MEMORY[0x223C24910](&v6);
  }
  v4[0] = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](v4);
}

void *std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_21E2EA358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF34520;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EA42C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF34520;
  di_log::logger_buf<di_log::log_printer<37ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<37ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<37ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2EA9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<37ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 37;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 37;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<41ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<41ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF345A8;
  a1[45] = &unk_26CF346A8;
  a1[46] = &unk_26CF346D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF345A8;
  a1[45] = &unk_26CF34630;
  a1[46] = &unk_26CF34658;
  return a1;
}

void sub_21E2EAD84(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<41ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF34740;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EAE68(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF34740;
  di_log::logger_buf<di_log::log_printer<41ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<41ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<41ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<41ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<41ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2EB3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<41ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 41;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 41;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF302E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EB66C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF30508;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EB6FC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF30728;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EB78C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF30948;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EB81C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF30B68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EB8AC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF30D88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EB93C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF30FA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EB9CC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF311C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EBA5C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF313E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EBAEC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF31608;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EBB7C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF31828;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EBC0C(_Unwind_Exception *a1)
{
}

void boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(void **a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _OWORD *a4@<X3>, void *a5@<X8>)
{
  char v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = (char *)v11;
  BOOL v14 = operator new(16 * v11);
  boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)*a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x7FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  uint64_t v9 = &a2[v3];
  if (v8 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(void **a1, _OWORD *__dst, char *a3, char *__src, uint64_t a5, _OWORD *a6)
{
  os_log_type_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (*a1) {
    BOOL v14 = __dst == 0;
  }
  else {
    BOOL v14 = 1;
  }
  BOOL v15 = v14 || v12 == __src;
  char v16 = __dst;
  if (!v15)
  {
    memmove(__dst, v12, __src - v12);
    char v16 = (_OWORD *)((char *)__dst + __src - v12);
  }
  _OWORD *v16 = *a6;
  if (__src)
  {
    int v17 = &v12[16 * (void)v13];
    if (v17 != __src && v16 != 0) {
      memmove(&v16[a5], __src, v17 - __src);
    }
  }
  if (v12 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  uint64_t v19 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v19;
  a1[2] = a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF31A48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EBE88(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF31C68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EBF18(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF31E88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EBFA8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF320A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EC038(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF322C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EC0C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF324E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EC158(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF32708;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EC1E8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF32928;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EC278(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageSparseBundle::void_stackable_identifier(void)::$_0 &&>>(di_utils *a1)
{
  uint64_t v1 = **(uint64_t ***)a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 560);
  *(void *)(v3 + 136) = di_utils::random_uuid(a1);
  *(void *)(v3 + 144) = v4;
  SparseBundleBackend::write_info_plists(*(SparseBundleBackend **)(v2 + 560));
}

void sub_21E2EC2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v64 = v60;
  if (a2 == 1)
  {
    uint64_t v61 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "DiskImageSparseBundle::void_stackable_identifier()::(anonymous class)::operator()() const";
    *((void *)&a11 + 1) = 81;
    a12 = 16;
    di_log::logger<di_log::log_printer<307ul>>::logger(&a14, &a11);
    operator<<(&a59, (uint64_t)v61);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf((uint64_t)&a14);
    MEMORY[0x223C24910](&a60);
    int v62 = v61[2];
    if (v62 < 0) {
      int v63 = v61[2];
    }
    else {
      int v63 = -v62;
    }
    **(_DWORD **)(v64 + 8) = v63;
    __cxa_end_catch();
    JUMPOUT(0x21E2EC2C4);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<307ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<307ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF347C8;
  a1[45] = &unk_26CF348C8;
  a1[46] = &unk_26CF348F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF347C8;
  a1[45] = &unk_26CF34850;
  a1[46] = &unk_26CF34878;
  return a1;
}

void sub_21E2EC4B4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<307ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF34960;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EC598(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF34960;
  di_log::logger_buf<di_log::log_printer<307ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<307ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<307ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<307ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<307ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2ECB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<307ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 307;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 307;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t boost::icl::cardinality<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(void *a1)
{
  uint64_t v1 = boost::icl::identity_element<unsigned long>::value(void)::_value;
  unsigned __int8 v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      uint64_t v4 = boost::icl::cardinality<boost::icl::discrete_interval<unsigned long long,std::less>>(v3 + 4);
      int v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      v1 += v4;
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  return v1;
}

uint64_t boost::icl::cardinality<boost::icl::discrete_interval<unsigned long long,std::less>>(unint64_t *a1)
{
  unsigned int v1 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v1 == 3)
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (v2 >= *a1) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }
    else
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (*a1 < v2) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }
  }
  else
  {
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
    if (*a1 < v2 && *a1 + 1 < v2) {
      return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
  }
  return boost::icl::identity_element<unsigned long>::value(void)::_value;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF32D68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ECE88(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF32F88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ECF18(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF331A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ECFA8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF333C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ED038(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF335E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ED0C8(_Unwind_Exception *a1)
{
}

uint64_t std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::set[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::insert[abi:ne180100]<std::__tree_const_iterator<boost::icl::discrete_interval<unsigned long long,std::less>,std::__tree_node<boost::icl::discrete_interval<unsigned long long,std::less>,void *> *,long>>((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_21E2ED11C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::insert[abi:ne180100]<std::__tree_const_iterator<boost::icl::discrete_interval<unsigned long long,std::less>,std::__tree_node<boost::icl::discrete_interval<unsigned long long,std::less>,void *> *,long>>(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    long long v5 = (uint64_t **)result;
    char v6 = (uint64_t *)result + 1;
    do
    {
      uint64_t result = std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v6 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v11, &v10, a3);
  BOOL v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x38uLL);
    uint64_t v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF33808;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2ED2CC(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    do
    {
      char v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      char v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t **boost::icl::interval_base_set<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_add(uint64_t **a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 < v11 && *(void *)a2 + 1 < v11) {
      goto LABEL_4;
    }
    return a1 + 1;
  }
  if (*(unsigned char *)(a2 + 16) == 3)
  {
    if (*(void *)(a2 + 8) >= *(void *)a2) {
      goto LABEL_4;
    }
    return a1 + 1;
  }
  if (*(void *)a2 >= *(void *)(a2 + 8)) {
    return a1 + 1;
  }
LABEL_4:
  char v4 = (uint64_t *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(a1, a2, a2);
  if (v5)
  {
    uint64_t v13 = v4;
    boost::icl::segmental::join_left<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, &v13);
    return boost::icl::segmental::join_right<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v13);
  }
  else
  {
    char v6 = (void *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a2);
    BOOL v7 = (void *)*v6;
    if (*v6)
    {
      do
      {
        uint64_t v8 = v7;
        BOOL v7 = (void *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v6[2];
        BOOL v9 = *v8 == (void)v6;
        char v6 = v8;
      }
      while (v9);
    }
    return boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::add_over(a1, (unint64_t *)a2, (uint64_t)v8);
  }
}

uint64_t **boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::add_over(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  char v5 = (uint64_t *)boost::icl::segmental::join_under<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, a2, a3);
  boost::icl::segmental::join_left<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, &v5);
  return boost::icl::segmental::join_right<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v5);
}

_OWORD *std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v9, a2);
  char v6 = *v5;
  if (!*v5)
  {
    BOOL v7 = (uint64_t **)v5;
    char v6 = operator new(0x38uLL);
    uint64_t v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *boost::icl::segmental::join_left<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t **a2)
{
  unint64_t v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = (uint64_t)*a2;
    do
    {
      uint64_t v5 = *(void *)(v6 + 16);
      BOOL v7 = *(void *)v5 == v6;
      uint64_t v6 = v5;
    }
    while (v7);
  }
  uint64_t v8 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v8;
  }
  if (v8 == (*(unsigned char *)(v5 + 48) & 1) + *(void *)(v5 + 40))
  {
    long long v14 = *((_OWORD *)v2 + 2);
    uint64_t v15 = v2[6];
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v2);
    operator delete(v2);
    long long v10 = *(_OWORD *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 48);
    boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v12;
    *(unsigned char *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **boost::icl::segmental::join_right<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t ***a2)
{
  unint64_t v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      BOOL v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = *a2;
    do
    {
      BOOL v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      uint64_t v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    long long v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      long long v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      long long v17 = *((_OWORD *)v7 + 2);
      __int16 v18 = v7[6];
      std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, (uint64_t *)v7);
      operator delete(v7);
      uint64_t v11 = *a2;
      long long v13 = *((_OWORD *)*a2 + 2);
      long long v14 = v11[6];
      boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      long long v12 = *a2;
      *((_OWORD *)v12 + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v15;
      *((unsigned char *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

unint64_t *boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a2 + 16))
  {
    if (v3 == 3)
    {
      uint64_t v5 = (uint64_t *)*a2;
      unint64_t v4 = a2[1];
      if (v4 >= *a2) {
        goto LABEL_4;
      }
LABEL_24:
      *(_OWORD *)a3 = *(_OWORD *)result;
      unint64_t v15 = result[2];
LABEL_33:
      *(void *)(a3 + 16) = v15;
      return result;
    }
    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4 || *a2 + 1 >= v4) {
      goto LABEL_24;
    }
  }
LABEL_4:
  int v6 = *((unsigned __int8 *)result + 16);
  if (!*((unsigned char *)result + 16))
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7 && *result + 1 < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
  if (v6 != 3)
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
  uint64_t v8 = (uint64_t *)*result;
  unint64_t v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    unint64_t v15 = a2[2];
    goto LABEL_33;
  }
LABEL_7:
  char v9 = v6 & 2;
  if ((v6 & 2) != 0) {
    unint64_t v10 = (unint64_t)v8;
  }
  else {
    unint64_t v10 = (unint64_t)v8 + 1;
  }
  char v11 = v3 & 2;
  if ((v3 & 2) != 0) {
    uint64_t result = (unint64_t *)v5;
  }
  else {
    uint64_t result = (unint64_t *)((char *)v5 + 1);
  }
  int v12 = v6 & 1;
  int v13 = v3 & 1;
  if (v10 >= (unint64_t)result) {
    char v9 = v11;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v7 + v12 - 1 >= v4 + v13 - 1)
  {
    unint64_t v4 = v7;
    LOBYTE(v13) = v12;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = v13 | v9;
  return result;
}

uint64_t std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = (*(unsigned char *)(a2 + 16) & 1) + *(void *)(a2 + 8) - 1;
    do
    {
      unint64_t v6 = *(void *)(v3 + 32);
      if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
        ++v6;
      }
      BOOL v7 = v5 >= v6;
      if (v5 >= v6) {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      else {
        uint64_t v8 = (uint64_t *)v3;
      }
      if (!v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t boost::icl::segmental::join_under<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)a2);
  uint64_t v7 = v6;
  uint64_t v8 = *(uint64_t **)(v6 + 8);
  if (v8)
  {
    do
    {
      char v9 = v8;
      uint64_t v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v10 = v6;
    do
    {
      char v9 = *(uint64_t **)(v10 + 16);
      BOOL v11 = *v9 == v10;
      uint64_t v10 = (uint64_t)v9;
    }
    while (!v11);
  }
  int v12 = *(uint64_t **)(a3 + 8);
  if (v12)
  {
    do
    {
      int v13 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v14 = (uint64_t *)a3;
    do
    {
      int v13 = (uint64_t *)v14[2];
      BOOL v11 = *v13 == (void)v14;
      long long v14 = v13;
    }
    while (!v11);
  }
  long long v24 = *(_OWORD *)(v6 + 32);
  uint64_t v25 = *(void *)(v6 + 48);
  boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v24, (uint64_t)a2, (uint64_t)&v26);
  long long v21 = *(_OWORD *)(a3 + 32);
  uint64_t v22 = *(void *)(a3 + 48);
  boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v21, (uint64_t)a2, (uint64_t)v23);
  std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::erase(a1, v9, v13);
  long long v16 = v26;
  uint64_t v17 = v27;
  boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v16, a2, (uint64_t)v18);
  boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>(v18, v23, (uint64_t)&v19);
  *(_OWORD *)(v7 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v19;
  *(unsigned char *)(v7 + 48) = v20;
  return v7;
}

unint64_t *boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)result + 16);
  if (*((unsigned char *)result + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (v5 < *result) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (*result >= v5) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    unint64_t v4 = *result;
    unint64_t v5 = result[1];
    if (*result >= v5 || *result + 1 >= v5) {
      goto LABEL_27;
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v9 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v9 || *(void *)a2 + 1 >= v9) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (v7 != 3)
  {
    unint64_t v8 = *(void *)a2;
    if (*(void *)a2 < *(void *)(a2 + 8)) {
      goto LABEL_23;
    }
LABEL_27:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = result[2];
    return result;
  }
  unint64_t v8 = *(void *)a2;
  if (*(void *)(a2 + 8) < *(void *)a2) {
    goto LABEL_27;
  }
LABEL_23:
  unint64_t v11 = (v3 & 1) + v5 - 1;
  if ((v7 & 2) != 0) {
    unint64_t v12 = v8;
  }
  else {
    unint64_t v12 = v8 + 1;
  }
  if (v11 < v12) {
    goto LABEL_27;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v3 & 2 | ((~v7 & 2) != 0);
  return result;
}

uint64_t boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (v4 < *(void *)a2) {
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v4) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v4 || *(void *)a2 + 1 >= v4) {
      goto LABEL_26;
    }
  }
  int v6 = *(unsigned __int8 *)(result + 16);
  if (!*(unsigned char *)(result + 16))
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result >= v7 || *(void *)result + 1 >= v7) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  if (v6 != 3)
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result < v7) {
      goto LABEL_23;
    }
LABEL_26:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = *(void *)(result + 16);
    return result;
  }
  unint64_t v8 = *(void *)result;
  unint64_t v7 = *(void *)(result + 8);
  if (v7 < *(void *)result) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v6 & 2) == 0) {
    ++v8;
  }
  if ((v3 & 1) + v4 - 1 < v8) {
    goto LABEL_26;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 16) = v6 & 1 | (2 * ((v3 & 1) == 0));
  return result;
}

uint64_t std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = *(void *)a2;
    if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
      ++v5;
    }
    do
    {
      unint64_t v6 = (*(unsigned char *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1;
      BOOL v7 = v6 >= v5;
      if (v6 >= v5) {
        unint64_t v8 = (uint64_t *)v3;
      }
      else {
        unint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF33A28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EDC04(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF33C48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EDC94(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF33E68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EDD24(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF34088;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EDDB4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF342A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2EDE44(_Unwind_Exception *a1)
{
}

const void **details::copy_user_entry_to_resource(const __CFString *a1, void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1)
  {
    unint64_t v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFTypeID v17 = CFGetTypeID(a1);
      goto LABEL_20;
    }
  }
  int OSType = CFStringGetOSType(a1);
  if (OSType == 1651272568 || OSType == 1970628964 || OSType == 1886155636)
  {
    unint64_t v11 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "User data contains reserved key(s)";
LABEL_16:
    DiskImagesRuntimeException::DiskImagesRuntimeException(v11, v12, 0x16u);
    unint64_t v15 = (void (*)(void *))DiskImagesRuntimeException::~DiskImagesRuntimeException;
    goto LABEL_17;
  }
  CFTypeID v9 = CFDataGetTypeID();
  if (!a2)
  {
    unint64_t v11 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "Invalid user data content";
    goto LABEL_16;
  }
  unint64_t v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFTypeID v17 = CFGetTypeID(a2);
LABEL_20:
    int v13 = (void *)cf::CFUtilException::CFUtilException(exception, v17, v7);
    unint64_t v15 = (void (*)(void *))cf::CFUtilException::~CFUtilException;
LABEL_17:
    __cxa_throw(v13, v14, v15);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  LOBYTE(__p[0]) = 0;
  char v21 = 0;
  udif::details::block_attributes::block_attributes(&v18, 80);
  udif::details::create_data_wrap_dict((uint64_t)v22, (uint64_t)__p, 0, a2, (CFDictionaryRef *)&v24);
  if (v21 && v20 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  __p[0] = v24;
  v22[0] = CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)__p, 1, MEMORY[0x263EFFF70]);
  CFDictionarySetValue(a3, a1, v22[0]);
  CFAutoRelease<__CFArray const*>::~CFAutoRelease((const void **)v22);
  return CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&v24);
}

void sub_21E2EE054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

BOOL details::udif_verify::verify_checksums(details::udif_verify *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v1 = *((_DWORD *)this + 71);
  if (v1) {
    unint64_t v2 = (long long *)*((void *)this + 9);
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 1);
  int v4 = *((_DWORD *)this + 70);
  if (v4)
  {
    long long v16 = *((_OWORD *)this + 6);
    LOBYTE(v4) = 1;
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  long long v5 = (long long *)*((void *)this + 10);
  BOOL v6 = v1 == 0;
  char v17 = v4;
  uint64_t v7 = *(void *)(v3 + 72);
  uint64_t v22 = *(void *)(v7 + 352);
  long long v27 = *(_OWORD *)(v7 + 424);
  long long v28 = *(_OWORD *)(v7 + 440);
  long long v29 = *(_OWORD *)(v7 + 456);
  long long v30 = *(_OWORD *)(v7 + 472);
  long long v23 = *(_OWORD *)(v7 + 360);
  long long v24 = *(_OWORD *)(v7 + 376);
  long long v25 = *(_OWORD *)(v7 + 392);
  long long v26 = *(_OWORD *)(v7 + 408);
  *(void *)&long long v21 = udif::get_csum_any((unsigned int *)&v22);
  *((void *)&v21 + 1) = v8;
  if (v6)
  {
    if (!v17) {
      return 1;
    }
  }
  else
  {
    CFTypeID v9 = *(void **)(v3 + 32);
    if (v9 == (void *)(v3 + 40) || v2 == v5) {
      goto LABEL_23;
    }
    BOOL v10 = 1;
    do
    {
      long long v20 = *v2;
      if (v10) {
        BOOL v10 = udif::details::checksum::operator==((_DWORD *)v9 + 15, (uint64_t)&v20);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "BLX");
      udif::details::UDIF_base::print_checksum_verification_status(v3, (uint64_t)__p, (uint64_t)&v20, (int *)v9 + 15);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      long long v21 = *(_OWORD *)udif::master_checksum_add<checksum::Any<locks::None,checksum::None,checksum::CRC32>>((uint64_t)&v21, (uint64_t)&v20);
      unint64_t v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          CFTypeID v9 = v12;
        }
        while (!v13);
      }
      if (v12 == (void *)(v3 + 40)) {
        break;
      }
      unint64_t v2 = (long long *)((char *)v2 + 184);
      CFTypeID v9 = v12;
    }
    while (v2 != v5);
    if (v10) {
LABEL_23:
    }
      BOOL v10 = udif::details::checksum::operator==(&v22, (uint64_t)&v21);
    std::string::basic_string[abi:ne180100]<0>(__p, "Master checksum");
    udif::details::UDIF_base::print_checksum_verification_status(v3, (uint64_t)__p, (uint64_t)&v21, (int *)&v22);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (!v17) {
      return v10;
    }
    if (!v10)
    {
      BOOL v14 = 0;
      goto LABEL_31;
    }
  }
  BOOL v14 = udif::details::checksum::operator==((_DWORD *)(*(void *)(v3 + 72) + 80), (uint64_t)&v16);
LABEL_31:
  std::string::basic_string[abi:ne180100]<0>(__p, "Data Fork");
  udif::details::UDIF_base::print_checksum_verification_status(v3, (uint64_t)__p, (uint64_t)&v16, (int *)(*(void *)(v3 + 72) + 80));
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_21E2EE358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t details::udif_verify::is_csum_data_none_type(uint64_t a1)
{
  unsigned __int8 v4 = 0;
  uint64_t v3 = &v4;
  uint64_t v1 = *(unsigned int *)(a1 + 12);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v5 = &v3;
  ((void (*)(unsigned __int8 ***, uint64_t))off_26CF34B78[v1])(&v5, a1 + 4);
  return v4;
}

details::udif_verify *details::udif_verify::udif_verify(details::udif_verify *this, DiskImageUDIF *a2, const udif::details::UDIF_base *a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = (*(uint64_t (**)(DiskImageUDIF *))(*(void *)a2 + 24))(a2);
  uint64_t runs_iterator = udif::details::UDIF_base::create_runs_iterator(*((udif::details::UDIF_base **)this + 1));
  *((void *)this + 7) = v6;
  *((void *)this + 3) = runs_iterator;
  *((void *)this + 4) = v6;
  *((void *)this + 5) = runs_iterator;
  *((void *)this + 9) = 0;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *((void *)this + 11) = 0;
  uint64_t v7 = *((void *)a3 + 9);
  uint64_t v8 = *((void *)this + 2) * *((void *)a3 + 10);
  v11[0] = 0;
  v11[1] = v8;
  char v12 = 2;
  details::udif_verify::create_csum_data<boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>((long long *)((char *)this + 40), (long long *)((char *)this + 56), (uint64_t)v11, (unsigned int *)(v7 + 80), (uint64_t)this + 96);
  if (details::udif_verify::is_csum_data_none_type((uint64_t)this + 96)) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  *((_DWORD *)this + 71) = v9;
  *((_DWORD *)this + 7std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = details::udif_verify::is_csum_data_none_type((uint64_t)this + 96) ^ 1;
  return this;
}

void sub_21E2EE4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void details::udif_verify::create_csum_data<boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uLong csum_any = udif::get_csum_any(a4);
  *(void *)char v12 = 850045863;
  v14[0] = 0;
  v14[1] = 0;
  memset(&v12[8], 0, 60);
  BOOL v13 = v14;
  long long v15 = *a1;
  long long v16 = v15;
  long long v17 = *a2;
  char v19 = 0;
  uint64_t v11 = v15;
  if ((void)v15 != (void)v17)
  {
    uint64_t v11 = *(void *)(v15 + 32);
    if ((*(unsigned char *)(v15 + 48) & 2) == 0) {
      ++v11;
    }
    uint64_t v18 = v11;
  }
  v20[0] = csum_any;
  v20[1] = v10;
  memset(&v21[8], 0, 60);
  v23[0] = 0;
  v23[1] = 0;
  *(void *)long long v21 = 850045863;
  uint64_t v22 = v23;
  long long v24 = *a1;
  long long v25 = v24;
  long long v26 = *a2;
  uint64_t v27 = v11;
  char v28 = 0;
  char v29 = 0;
  ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::ChecksumScheduler(a5, (uint64_t)v20, a3);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)&v22, v23[0]);
  std::mutex::~mutex((std::mutex *)v21);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)&v13, v14[0]);
  std::mutex::~mutex((std::mutex *)v12);
}

void sub_21E2EE670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(v43, a41);
  std::mutex::~mutex(v42);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(v41, a19);
  std::mutex::~mutex((std::mutex *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::~ChecksumScheduler(uint64_t a1)
{
  unint64_t v2 = (std::mutex *)(a1 + 16);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1 + 88, *(void **)(a1 + 96));
  std::mutex::~mutex(v2);
  return a1;
}

details::udif_verify *details::udif_verify::udif_verify(details::udif_verify *this, DiskImageUDIF *a2, const udif::details::UDIF_base *a3, char a4)
{
  *((_DWORD *)details::udif_verify::udif_verify(this, a2, a3) + 71) = 4 * (a4 & 1);
  if ((a4 & 2) != 0) {
    int v6 = details::udif_verify::is_csum_data_none_type((uint64_t)this + 96) ^ 1;
  }
  else {
    int v6 = 0;
  }
  *((_DWORD *)this + 7std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v6;
  return this;
}

void sub_21E2EE730(_Unwind_Exception *a1)
{
  details::udif_verify::~udif_verify(v1);
  _Unwind_Resume(a1);
}

void details::udif_verify::~udif_verify(details::udif_verify *this)
{
  unint64_t v2 = (std::mutex *)((char *)this + 112);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  std::mutex::~mutex(v2);
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t details::udif_verify::populate_csum_data(uint64_t a1, void *a2)
{
  v18[12] = *(void **)MEMORY[0x263EF8340];
  unint64_t v2 = (unsigned int *)(a2 + 1);
  uint64_t v3 = (unsigned int *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  LODWORD(v5) = 0;
  int v6 = (long long *)(a1 + 40);
  uint64_t v7 = (long long *)(a1 + 56);
  long long v15 = (uint64_t *)(a1 + 72);
  do
  {
    details::udif_verify::create_csum_data<boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>(v6, v7, (uint64_t)(v3 + 8), v3 + 15, (uint64_t)v16);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 >= *(void *)(a1 + 88))
    {
      uint64_t v9 = std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__emplace_back_slow_path<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>(v15, (uint64_t)v16);
    }
    else
    {
      std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>(*(void *)(a1 + 80), (uint64_t)v16);
      uint64_t v9 = v8 + 184;
      *(void *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v8 + 184;
    }
    *(void *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v9;
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)v18, v18[1]);
    std::mutex::~mutex(&v17);
    unsigned int v10 = v3[15];
    BOOL v11 = v10 == 10 || v10 == 0;
    if (v11) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = 2;
    }
    char v12 = (unsigned int *)*((void *)v3 + 1);
    if (v12)
    {
      do
      {
        BOOL v13 = v12;
        char v12 = *(unsigned int **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        BOOL v13 = (unsigned int *)*((void *)v3 + 2);
        BOOL v11 = *(void *)v13 == (void)v3;
        uint64_t v3 = v13;
      }
      while (!v11);
    }
    uint64_t v3 = v13;
  }
  while (v13 != v2);
  return v5;
}

void sub_21E2EE8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::~ChecksumScheduler((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t details::udif_verify::create_execution_contexts@<X0>(details::udif_verify *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a2;
  uint64_t result = ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::ContextAllocator(a5, a4);
  if (a4)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)this + 136))();
    uint64_t v28 = v9;
    long long v27 = 0uLL;
    if ((DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::is_simple(*(void *)this) & 1) == 0)
    {
      unsigned int v10 = *(std::__shared_weak_count **)(v9 + 48);
      long long v25 = *(const void **)(v9 + 40);
      long long v26 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v11 = *(void **)(v9 + 16);
      if (v11 != (void *)(v9 + 24))
      {
        char v12 = 0;
        BOOL v13 = 0;
        do
        {
          if (v12)
          {
            if (!(void)v27)
            {
              BackendInternalBackend::getContext(v12);
              long long v14 = v24;
              long long v24 = 0uLL;
              long long v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
              long long v27 = v14;
              if (v15)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v15);
                if (*((void *)&v24 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
                }
              }
            }
          }
          else
          {
            int v23 = 1;
            BOOL v22 = a3 != 1;
            std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,void>((uint64_t)&v25, &v29, &v23, (unsigned __int8 *)&v22, &v24);
            long long v16 = (std::__shared_weak_count *)*((void *)&v24 + 1);
            char v12 = (BackendInternalBackend *)v24;
            long long v24 = 0uLL;
            if (v13)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
              if (*((void *)&v24 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
              }
            }
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::mutex v17 = (std::__shared_weak_count *)*((void *)&v27 + 1);
            *(void *)&long long v27 = v12;
            *((void *)&v27 + 1) = v16;
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            BOOL v13 = v16;
          }
          if (a3 == 1 || (const void *)v11[5] == v25)
          {
            int v21 = *((_DWORD *)v11 + 8);
            long long v24 = v27;
            if (*((void *)&v27 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::modify_backend_for_type(v9, &v21, (uint64_t **)&v24);
          }
          else
          {
            long long v24 = v27;
            if (*((void *)&v27 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            replace_internal_backend((uint64_t)(v11 + 5), &v25, (uint64_t *)&v24);
          }
          if (*((void *)&v24 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
          }
          uint64_t v18 = (void *)v11[1];
          if (v18)
          {
            do
            {
              char v19 = v18;
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              char v19 = (void *)v11[2];
              BOOL v20 = *v19 == (void)v11;
              BOOL v11 = v19;
            }
            while (!v20);
          }
          BOOL v11 = v19;
        }
        while (v19 != (void *)(v9 + 24));
      }
      *(unsigned char *)(v9 + 56) = 0;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::emplace_back();
  }
  return result;
}

void sub_21E2EEBF0(_Unwind_Exception *a1)
{
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::is_simple(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 168);
  unint64_t v2 = (void *)(a1 + 176);
  if (v1 == (void *)(a1 + 176)) {
    return 1;
  }
  do
  {
    get_sink_backend((uint64_t)(v1 + 5), &v10);
    uint64_t v3 = v1[5];
    uint64_t v4 = v10;
    BOOL v5 = v3 == v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v3 != v4) {
      break;
    }
    int v6 = (void *)v1[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        int v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v1[2];
        BOOL v8 = *v7 == (void)v1;
        uint64_t v1 = v7;
      }
      while (!v8);
    }
    uint64_t v1 = v7;
  }
  while (v7 != v2);
  return v5;
}

void BackendInternalBackend::getContext(BackendInternalBackend *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 72))(&v2);
  (*(void (**)(BackendInternalBackend *, uint64_t *))(*(void *)this + 176))(this, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_21E2EEDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::modify_backend_for_type(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  BOOL v8 = a2;
  uint64_t v4 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>((uint64_t **)(a1 + 16), a2, (uint64_t)&std::piecewise_construct, &v8);
  int v6 = *a3;
  BOOL v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[6];
  v4[5] = v6;
  v4[6] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::emplace_back()
{
}

uint64_t details::udif_verify::calculate_checksums(int32x2_t *this, workqueue::workqueue *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  resources = system_properties::get_resources((system_properties *)this);
  unint64_t v32 = (*(uint64_t (**)(void))(**(void **)this + 24))();
  BOOL v5 = (system_properties::$_2 *)(*(void *(**)(std::condition_variable *__return_ptr))(**(void **)this
                                                                                                  + 72))(v45);
  if (v45[0].__cv_.__sig <= (unint64_t)resources[2] / v32 * v32) {
    unint64_t sig = (unint64_t)resources[2] / v32 * v32;
  }
  else {
    unint64_t sig = v45[0].__cv_.__sig;
  }
  int v7 = *((_DWORD *)resources + 2);
  if (v7 == 1)
  {
    unsigned int v8 = (*resources)(v5);
  }
  else
  {
    if (v7) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    unsigned int v8 = *(_DWORD *)resources;
  }
  unint64_t v9 = (unint64_t)resources[3] / sig;
  if (v8 < v9) {
    LODWORD(v9) = v8;
  }
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  (*(void (**)(std::condition_variable *__return_ptr))(**(void **)this + 72))(v45);
  unint64_t v31 = *(void *)&v45[0].__cv_.__opaque[8] + sig;
  BufferAllocator::BufferAllocator((BufferAllocator *)v45, *(void *)&v45[0].__cv_.__opaque[8] + sig, 0, v10);
  BOOL v11 = (udif::details::UDIF_base *)this[1];
  uint64_t runs_iterator = udif::details::UDIF_base::create_runs_iterator(v11);
  uint64_t v30 = v13;
  long long v14 = (void *)runs_iterator;
  if (this[35].i32[1])
  {
    __int32 v15 = details::udif_verify::populate_csum_data((uint64_t)this, (void *)v11 + 4);
    this[35].i32[1] = v15;
  }
  else
  {
    __int32 v15 = 0;
  }
  __int32 v16 = this[35].i32[0];
  if (DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::is_simple((uint64_t)*this))
  {
    this[35] = (int32x2_t)vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32(this[35]));
    int v17 = 2;
  }
  else
  {
    int v17 = v16 | v15;
  }
  details::udif_verify::create_execution_contexts((details::udif_verify *)this, v31, v17, v10, (uint64_t)v44);
  workqueue::workqueue::create_transaction(a2, v10, (uint64_t)v43);
  int32x2_t v18 = this[9];
  unsigned int v42 = 0;
  char v19 = (void *)*((void *)v11 + 4);
  if (v19 != (void *)((char *)v11 + 40) && v14 != v30)
  {
    while ((unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1)
    {
LABEL_22:
      BOOL v20 = (void *)v19[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          BOOL v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          int v21 = (void *)v19[2];
          BOOL v25 = *v21 == (void)v19;
          char v19 = v21;
        }
        while (!v25);
      }
      if (v21 != (void *)((char *)v11 + 40))
      {
        *(void *)&v18 += 184;
        char v19 = v21;
        if (v14 != v30) {
          continue;
        }
      }
      goto LABEL_52;
    }
    BOOL v22 = v14;
    while (1)
    {
      long long v38 = *((_OWORD *)v19 + 2);
      uint64_t v39 = v19[6];
      boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v38, v22 + 4, (uint64_t)v40);
      unint64_t v23 = v40[0];
      if ((v41 & 2) == 0) {
        unint64_t v23 = v40[0] + 1;
      }
      if (v23 <= (v41 & 1) + v40[1] - 1) {
        break;
      }
      long long v24 = (void *)v22[1];
      if (v24)
      {
        do
        {
          long long v14 = v24;
          long long v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v14 = (void *)v22[2];
          BOOL v25 = *v14 == (void)v22;
          BOOL v22 = v14;
        }
        while (!v25);
      }
      BOOL v25 = (unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1 || v14 == v30;
      BOOL v22 = v14;
      if (v25) {
        goto LABEL_22;
      }
    }
    if (!atomic_load_explicit((atomic_uint *volatile)&v42, memory_order_acquire))
    {
      v35[0] = v23;
      v35[1] = v23 + (v32 + sig - 1) / v32;
      char v36 = 2;
      boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>(v35, v40, (uint64_t)&v37);
      if (v17 == 1)
      {
        v34[0] = 0;
        v34[1] = 0;
        ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate((uint64_t)v44, &v33);
      }
      BufferAllocator::allocate(v45, v34);
    }
    int32x2_t v26 = this[9];
    for (int32x2_t i = this[10]; *(void *)&v26 != *(void *)&i; *(void *)&v26 += 184)
    {
      *(unsigned char *)(*(void *)&v26 + 176) = 1;
      ExecutionSchedulerSortedConsecutiveIt<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,locks::Std,boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>::abort(*(void *)&v26 + 16);
    }
    this[34].i8[0] = 1;
    ExecutionSchedulerSortedConsecutiveIt<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,locks::Std,boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>::abort((uint64_t)&this[14]);
  }
LABEL_52:
  uint64_t v28 = atomic_load(&v42);
  workqueue::transaction::~transaction((workqueue::transaction *)v43);
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator((uint64_t)v44);
  BufferAllocator::~BufferAllocator((BufferAllocator *)v45);
  return v28;
}

void sub_21E2EF4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  workqueue::transaction::~transaction((workqueue::transaction *)&a50);
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator((uint64_t)&a68);
  BufferAllocator::~BufferAllocator((BufferAllocator *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

double boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>@<D0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (v4 < *a1) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (*a1 >= v4) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    if (*a1 >= v4 || *a1 + 1 >= v4) {
      goto LABEL_31;
    }
  }
  int v7 = *((unsigned __int8 *)a2 + 16);
  if (!*((unsigned char *)a2 + 16))
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (*a2 < v8 && *a2 + 1 < v8) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
  if (v7 == 3)
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (v8 >= *a2) {
      goto LABEL_15;
    }
LABEL_31:
    {
      uint64_t v19 = a3;
      a3 = v19;
      if (v18)
      {
        *(void *)&boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value = boost::icl::identity_element<unsigned long long>::value(void)::_value;
        *((void *)&boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value
        + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
        LOBYTE(qword_267D2A85std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 2;
        a3 = v19;
      }
    }
    double result = *(double *)&boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value;
    *(_OWORD *)a3 = boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value;
    *(void *)(a3 + 16) = qword_267D2A850;
    return result;
  }
  unint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 >= v8) {
    goto LABEL_31;
  }
LABEL_15:
  char v10 = v3 & 2;
  if ((v3 & 2) != 0) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = v5 + 1;
  }
  char v12 = v7 & 2;
  if ((v7 & 2) != 0) {
    unint64_t v13 = v9;
  }
  else {
    unint64_t v13 = v9 + 1;
  }
  int v14 = v3 & 1;
  int v15 = v7 & 1;
  if (v11 < v13)
  {
    unint64_t v5 = v9;
    char v10 = v12;
  }
  if (v4 + v14 - 1 >= v8 + v15 - 1)
  {
    unint64_t v4 = v8;
    LOBYTE(v14) = v15;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = v14 | v10;
  return result;
}

void ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 144)) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (v5 == v4)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      while (*(void *)(a1 + 8) == v4);
    }
    uint64_t v7 = *(void *)(v4 - 8);
    *(void *)(a1 + 16) = v4 - 8;
    std::shared_ptr<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>::shared_ptr[abi:ne180100]<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>)#1},void>(a2, v7);
  }
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::emplace_back();
}

void sub_21E2EF7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate((uint64_t)&a10, &a12);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void ___ZN7details11udif_verify19calculate_checksumsERN9workqueue9workqueueE_block_invoke(uint64_t a1)
{
  v70[47] = *MEMORY[0x263EF8340];
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = (*(void *)(a1 + 48) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v5;
  if ((v2 & 2) != 0) {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v7 = v3 + 1;
  }
  uint64_t v8 = v7 * v5;
  char v10 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v51 = *(void *)(a1 + 72);
  long long v52 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v53 = v6;
  uint64_t v54 = v8;
  uint64_t v55 = v9;
  char v56 = 0;
  unint64_t v11 = *(DiskImage::Context ***)(a1 + 96);
  sg_vec_ns::make(&v51, &v63);
  sg_vec_ref::begin((sg_vec_ref *)v69, (uint64_t)&v60);
  sg_vec_ref::end((sg_vec_ref *)v69, (uint64_t)v57);
  uint64_t v12 = DiskImage::Context::read(*v11, (const sg_vec_ns::details::sg_vec_iterator *)&v60, (const sg_vec_ns::details::sg_vec_iterator *)v57);
  uint64_t v14 = v13;
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (*((void *)&v60 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
  }
  sg_vec::~sg_vec((sg_vec *)&v63);
  if ((v12 & 0x8000000000000000) == 0 || !v12)
  {
    uint64_t v15 = v6;
    uint64_t v16 = *(void *)(a1 + 72);
    int v17 = *(std::__shared_weak_count **)(a1 + 80);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = 0;
    uint64_t v49 = v16 + v8 - v14;
    int v50 = v17;
    unint64_t v19 = *(void *)(a1 + 64);
    unint64_t v20 = v54;
    if (v53 <= v19) {
      unint64_t v21 = *(void *)(a1 + 64);
    }
    else {
      unint64_t v21 = v53;
    }
    if (v53) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v23 = v19 + v54 + v22 - 1;
    if (*(unsigned char *)(a1 + 128))
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      if (v8 != v14) {
        goto LABEL_32;
      }
      uint64_t v26 = *(void *)(a1 + 96);
      long long v27 = *(void **)(v26 + 8);
      uint64_t v24 = v27[8];
      int v18 = (std::__shared_weak_count *)v27[9];
      if (v18)
      {
        uint64_t v48 = v27[8];
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v27 = *(void **)(v26 + 8);
        uint64_t v28 = (std::__shared_weak_count *)v27[9];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = v27[10];
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          uint64_t v24 = v48;
          goto LABEL_32;
        }
        uint64_t v24 = v48;
      }
      uint64_t v25 = v27[10];
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
LABEL_32:
    uint64_t v29 = v20 / v19;
    uint64_t v30 = v4;
    int v31 = *(_DWORD *)(v4 + 284);
    uint64_t v32 = v25;
    unint64_t v33 = v23 / v19;
    if (v31 != 1)
    {
      if (v31 != 2) {
        goto LABEL_54;
      }
      uint64_t v32 = v15;
    }
    if (!v32)
    {
LABEL_54:
      int v41 = *(_DWORD *)(v30 + 280);
      uint64_t v42 = v25;
      if (v41 != 1)
      {
        if (v41 != 2) {
          goto LABEL_76;
        }
        uint64_t v42 = v15;
      }
      if (v42)
      {
        if (v41 == 2)
        {
          if (!v50)
          {
            uint64_t v43 = 0;
            uint64_t v24 = v49;
            goto LABEL_66;
          }
          uint64_t v43 = v50;
          uint64_t v24 = v49;
        }
        else
        {
          if (!v18)
          {
            uint64_t v43 = 0;
            goto LABEL_66;
          }
          uint64_t v43 = v18;
        }
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_66:
        int v44 = *(_DWORD *)(v30 + 280);
        if (v44 == 2)
        {
          uint64_t v25 = v15;
        }
        else if (v44 != 1)
        {
          uint64_t v25 = 0;
        }
        uint64_t v63 = v29;
        unint64_t v64 = v33;
        char v65 = 2;
        uint64_t v66 = v24;
        long long v67 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = v25;
        ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::add(v30 + 96, (uint64_t)&v63);
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
      }
LABEL_76:
      if (!*(unsigned char *)(a1 + 132))
      {
        uint64_t v45 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v46 = *(std::__shared_weak_count **)(v45 + 72);
        *(void *)(v45 + 64) = 0;
        *(void *)(v45 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
        *(void *)(v45 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
        *(void *)(v45 + 88) = 0;
        *(unsigned char *)(v45 + 104) = 0;
        *(void *)(v45 + 96) = 0;
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      goto LABEL_84;
    }
    uint64_t v34 = *(void *)(a1 + 120);
    if (v31 == 2)
    {
      BOOL v35 = v50;
      uint64_t v36 = v49;
      if (!v50)
      {
        uint64_t v36 = v49;
        goto LABEL_42;
      }
    }
    else
    {
      BOOL v35 = v18;
      uint64_t v36 = v24;
      if (!v18)
      {
        uint64_t v36 = v24;
LABEL_42:
        int v37 = *(_DWORD *)(v4 + 284);
        if (v37 == 2)
        {
          uint64_t v38 = v15;
        }
        else if (v37 == 1)
        {
          uint64_t v38 = v25;
        }
        else
        {
          uint64_t v38 = 0;
        }
        uint64_t v39 = v24;
        uint64_t v40 = v29;
        uint64_t v63 = v29;
        unint64_t v64 = v33;
        char v65 = 2;
        uint64_t v66 = v36;
        long long v67 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = v38;
        ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::add(v34, (uint64_t)&v63);
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        uint64_t v24 = v39;
        uint64_t v29 = v40;
        goto LABEL_54;
      }
    }
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_42;
  }
  int v47 = 0;
  atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 112), (unsigned int *)&v47, v12);
  if (!v47)
  {
    *(void *)&long long v60 = "details::udif_verify::calculate_checksums(workqueue::workqueue &)_block_invoke";
    *((void *)&v60 + 1) = 41;
    int v61 = 16;
    di_log::logger<di_log::log_printer<337ul>>::logger(&v63, &v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Error reading sectors for verify ", 33);
    std::ostream::operator<<();
    di_log::logger<di_log::log_printer<337ul>>::~logger((uint64_t)&v63);
  }
LABEL_84:
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
}

void sub_21E2EFCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<337ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<337ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF34BA0;
  a1[45] = &unk_26CF34CA0;
  a1[46] = &unk_26CF34CC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF34BA0;
  a1[45] = &unk_26CF34C28;
  a1[46] = &unk_26CF34C50;
  return a1;
}

void sub_21E2EFE68(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<337ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::mutex *)(a1 + 16);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  *(_DWORD *)uint64_t v48 = *(_DWORD *)(a2 + 17);
  *(_DWORD *)&v48[3] = *(_DWORD *)(a2 + 20);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  uint64_t v9 = *(void *)(a2 + 40);
  *(_DWORD *)uint64_t v49 = *(_DWORD *)(a2 + 17);
  *(_DWORD *)&v49[3] = *(_DWORD *)(a2 + 20);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(unsigned char *)(a1 + 168))
  {
    std::mutex::unlock(v3);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    uint64_t v51 = (void *)v4;
    *(void *)&long long v52 = v5;
    BYTE8(v5std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v6;
    *(_DWORD *)((char *)&v52 + 9) = *(_DWORD *)v49;
    HIDWORD(v5std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_DWORD *)&v49[3];
    v53[0] = a1;
    v53[1] = v4;
    _OWORD v53[2] = v5;
    char v54 = v6;
    *(_DWORD *)uint64_t v55 = *(_DWORD *)v48;
    *(_DWORD *)&v55[3] = *(_DWORD *)&v48[3];
    uint64_t v56 = v8;
    uint64_t v57 = v7;
    uint64_t v58 = v9;
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>((uint64_t **)(a1 + 88), (unint64_t *)&v51, (uint64_t)&v51);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if ((v6 & 2) != 0) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    std::mutex::unlock(v3);
    if (v10 == v11)
    {
      uint64_t v12 = (uint64_t *)(a1 + 96);
      while (1)
      {
        uint64_t v51 = v53;
        long long v52 = xmmword_21E39BDD0;
        std::mutex::lock(v3);
        uint64_t v14 = *(uint64_t **)(a1 + 88);
        unint64_t v15 = *(void *)(a1 + 160);
        if (v14 == v12)
        {
          int v18 = (uint64_t *)(a1 + 96);
        }
        else
        {
          uint64_t v16 = *(void **)(a1 + 144);
          int v17 = *(void **)(a1 + 112);
          int v18 = *(uint64_t **)(a1 + 88);
          while (v17 != v16)
          {
            uint64_t v19 = v18[4];
            if ((v18[6] & 2) == 0) {
              ++v19;
            }
            if (v19 != v15) {
              break;
            }
            unint64_t v15 = v18[5] + (v18[6] & 1);
            for (uint64_t i = (v17[6] & 1) + v17[5]; v15 > i - 1; uint64_t i = (v17[6] & 1) + v17[5])
            {
              unint64_t v21 = (void *)v17[1];
              unint64_t v22 = v17;
              if (v21)
              {
                do
                {
                  int v17 = v21;
                  unint64_t v21 = (void *)*v21;
                }
                while (v21);
              }
              else
              {
                do
                {
                  int v17 = (void *)v22[2];
                  BOOL v23 = *v17 == (void)v22;
                  unint64_t v22 = v17;
                }
                while (!v23);
              }
              *(void *)(a1 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v17;
              if (v17 == v16)
              {
                int v17 = v16;
                break;
              }
              if ((v17[6] & 2) != 0) {
                unint64_t v15 = v17[4];
              }
              else {
                unint64_t v15 = v17[4] + 1;
              }
            }
            uint64_t v24 = (uint64_t *)v18[1];
            if (v24)
            {
              do
              {
                uint64_t v25 = v24;
                uint64_t v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                uint64_t v25 = (uint64_t *)v18[2];
                BOOL v23 = *v25 == (void)v18;
                int v18 = v25;
              }
              while (!v23);
            }
            int v18 = v25;
            if (v25 == v12)
            {
              int v18 = (uint64_t *)(a1 + 96);
              break;
            }
          }
          if (v14 == v18)
          {
            int v18 = v14;
          }
          else
          {
            uint64_t v26 = 0;
            long long v27 = v14;
            do
            {
              unint64_t v28 = v26;
              uint64_t v29 = (uint64_t *)v27[1];
              if (v29)
              {
                do
                {
                  uint64_t v30 = v29;
                  uint64_t v29 = (uint64_t *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  uint64_t v30 = (uint64_t *)v27[2];
                  BOOL v23 = *v30 == (void)v27;
                  long long v27 = v30;
                }
                while (!v23);
              }
              ++v26;
              long long v27 = v30;
            }
            while (v30 != v18);
            if (*((void *)&v52 + 1) <= v28)
            {
              if (v28 >= 0x249249249249249) {
                boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v13);
              }
              int v31 = operator new(56 * v26);
              boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>((uint64_t *)&v51, (uint64_t)v31, v26, (uint64_t)&v51[7 * v52], 0, 0);
            }
          }
        }
        while (v18 != v14)
        {
          uint64_t v32 = (uint64_t)v51;
          uint64_t v33 = v52;
          uint64_t v34 = &v51[7 * v52];
          if ((void)v52 == *((void *)&v52 + 1))
          {
            boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>((uint64_t *)&v51, (uint64_t)v34, (const char *)1, (uint64_t)(v14 + 7), v50);
          }
          else
          {
            void *v34 = v14[7];
            uint64_t v35 = v32 + 56 * v33;
            long long v36 = *((_OWORD *)v14 + 4);
            *(void *)(v35 + 24) = v14[10];
            *(_OWORD *)(v35 + 8) = v36;
            *(_OWORD *)(v35 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)(v14 + 11);
            v14[11] = 0;
            v14[12] = 0;
            *(void *)(v35 + 48) = v14[13];
            *(void *)&long long v52 = v52 + 1;
          }
          uint64_t v14 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::erase((uint64_t **)(a1 + 88), v14);
        }
        std::mutex::unlock(v3);
        if ((void)v52)
        {
          int v37 = v51;
          uint64_t v38 = &v51[7 * v52];
          do
          {
            uint64_t v39 = *v37;
            uint64_t v40 = v37[6];
            v50[0] = v37[4];
            v50[1] = v40;
            checksum::Any<locks::None,checksum::None,checksum::CRC32>::add(v39, (uint64_t)v50);
            v37 += 7;
          }
          while (v37 != v38);
          uint64_t v41 = v52;
          if ((void)v52)
          {
            uint64_t v42 = (std::__shared_weak_count **)(v51 + 5);
            do
            {
              if (*v42) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*v42);
              }
              v42 += 7;
              --v41;
            }
            while (v41);
          }
        }
        *(void *)&long long v52 = 0;
        std::mutex::lock(v3);
        *(void *)(a1 + 16std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v15;
        uint64_t v43 = *(void *)(a1 + 88);
        if ((uint64_t *)v43 == v12 || *(void *)(a1 + 112) == *(void *)(a1 + 144)) {
          break;
        }
        char v44 = *(unsigned char *)(v43 + 48);
        uint64_t v45 = *(void *)(v43 + 32);
        if ((v44 & 2) != 0) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = v45 + 1;
        }
        std::mutex::unlock(v3);
        if (v46 != v15) {
          goto LABEL_71;
        }
        boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector(&v51);
      }
      std::mutex::unlock(v3);
LABEL_71:
      boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector(&v51);
    }
  }
  return a1;
}

void sub_21E2F035C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::mutex::unlock(v24);
  boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector(&a16);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_72c27_ZTSNSt3__110shared_ptrIcEE96c178_ZTSNSt3__110shared_ptrINS_5tupleIJNS_10unique_ptrIN17DiskImageUDIFReadI10UDIFReaderIN5locks4NoneEE13DiskImageUDIFE11ContextUDIFENS_14default_deleteISA_EEEENS0_I9BackendSGEEEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[13];
  result[12] = a2[12];
  result[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_72c27_ZTSNSt3__110shared_ptrIcEE96c178_ZTSNSt3__110shared_ptrINS_5tupleIJNS_10unique_ptrIN17DiskImageUDIFReadI10UDIFReaderIN5locks4NoneEE13DiskImageUDIFE11ContextUDIFENS_14default_deleteISA_EEEENS0_I9BackendSGEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void DiskImageUDIF::get_user_data(DiskImageUDIF *this)
{
}

void sub_21E2F04C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void copy_user_entry_from_resource(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFStringRef v15 = a1;
      uint64_t v16 = exception;
      CFTypeID v17 = CFGetTypeID(v15);
LABEL_18:
      int v18 = v16;
      unint64_t v19 = v7;
      goto LABEL_19;
    }
  }
  int OSType = CFStringGetOSType(a1);
  switch(OSType)
  {
    case 1651272568:
      return;
    case 1886155636:
      return;
    case 1970628964:
      return;
  }
  CFTypeID v9 = CFArrayGetTypeID();
  if (!a2) {
    return;
  }
  CFTypeID v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    uint64_t v16 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFTypeID v17 = CFGetTypeID(a2);
    goto LABEL_18;
  }
  if (CFArrayGetCount((CFArrayRef)a2) < 1) {
    return;
  }
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
  CFTypeID v11 = CFDictionaryGetTypeID();
  if (!ValueAtIndex) {
    return;
  }
  CFTypeID v12 = v11;
  if (CFGetTypeID(ValueAtIndex) != v11) {
    goto LABEL_21;
  }
  ValueAtIndex = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Data");
  CFTypeID v13 = CFDataGetTypeID();
  if (!ValueAtIndex) {
    return;
  }
  CFTypeID v12 = v13;
  if (CFGetTypeID(ValueAtIndex) != v13)
  {
LABEL_21:
    unint64_t v21 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
    int v18 = v21;
    unint64_t v19 = v12;
LABEL_19:
    unint64_t v20 = (void *)cf::CFUtilException::CFUtilException(v18, v17, v19);
  }
  CFDictionaryAddValue(a3, a1, ValueAtIndex);
}

void sub_21E2F06B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void DiskImageUDIF::write_user_data(DiskImageUDIF *this, const __CFDictionary *a2)
{
}

void sub_21E2F08BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

BOOL DiskImageUDIF::verify_image(DiskImageUDIF *this, workqueue::workqueue *a2, int a3)
{
  v12[13] = *(void **)MEMORY[0x263EF8340];
  uint64_t v5 = (DiskImageUDIF *)((char *)this + 64);
  if (a3)
  {
    details::udif_verify::udif_verify((details::udif_verify *)v9, this, v5, 3);
    if (!details::udif_verify::calculate_checksums(v9, a2)) {
      goto LABEL_6;
    }
  }
  else
  {
    details::udif_verify::udif_verify((details::udif_verify *)v9, this, v5);
    if (!details::udif_verify::calculate_checksums(v9, a2))
    {
LABEL_6:
      BOOL v6 = details::udif_verify::verify_checksums((details::udif_verify *)v9);
      goto LABEL_7;
    }
  }
  BOOL v6 = 0;
LABEL_7:
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)v12, v12[1]);
  std::mutex::~mutex(&v11);
  uint64_t v8 = (void **)&v10;
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v6;
}

void sub_21E2F09DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  details::udif_verify::~udif_verify((details::udif_verify *)va);
  _Unwind_Resume(a1);
}

void *DiskImageUDIF::udif_extents_iterator_interface::make_val@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = this[5];
  uint64_t v4 = (void *)this[8];
  uint64_t v3 = (void *)this[9];
  if (v4 == v3)
  {
LABEL_9:
    int v8 = 0;
    int v9 = 1;
    uint64_t v4 = v3;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v5 = v4[5];
    if (v2 <= (v4[6] & 1) + v5 - 1) {
      break;
    }
    BOOL v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        CFTypeID v7 = v6;
        BOOL v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        CFTypeID v7 = (void *)v4[2];
        BOOL v16 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v16);
    }
    this[8] = v7;
    uint64_t v4 = v7;
    if (v7 == v3) {
      goto LABEL_9;
    }
  }
  unint64_t v10 = v4[4];
  if ((v4[6] & 2) != 0)
  {
    if (v2 < v10) {
      goto LABEL_20;
    }
  }
  else if (v10 >= v2)
  {
    goto LABEL_20;
  }
  if (v4[6])
  {
    if (v5 >= v2) {
      goto LABEL_18;
    }
LABEL_20:
    int v8 = 0;
    int v9 = 1;
    goto LABEL_21;
  }
  if (v2 >= v5) {
    goto LABEL_20;
  }
LABEL_18:
  int v11 = *((_DWORD *)v4 + 14);
  if (v11 != 1 && (v11 & 0xFF000000) != 0x80000000) {
    goto LABEL_20;
  }
  int v9 = 0;
  int v8 = 1;
LABEL_21:
  unint64_t v12 = this[3];
  unint64_t v13 = v2;
  if (v2 < v12)
  {
    unint64_t v13 = v2;
    do
    {
      unint64_t v14 = v12;
      if (v4 == v3) {
        goto LABEL_27;
      }
      unint64_t v14 = v4[4];
      if ((v4[6] & 2) == 0) {
        ++v14;
      }
      if (v14 > v13)
      {
LABEL_27:
        if (v8) {
          break;
        }
      }
      else
      {
        if (v8)
        {
          int v15 = *((_DWORD *)v4 + 14);
          BOOL v16 = v15 == 1 || (v15 & 0xFF000000) == 0x80000000;
          if (!v16) {
            break;
          }
        }
        if (v9)
        {
          int v17 = *((_DWORD *)v4 + 14);
          if (v17 == 1 || (v17 & 0xFF000000) == 0x80000000) {
            break;
          }
        }
        int v18 = (void *)v4[1];
        unint64_t v19 = v4;
        if (v18)
        {
          do
          {
            unint64_t v20 = v18;
            int v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            unint64_t v20 = (void *)v19[2];
            BOOL v16 = *v20 == (void)v19;
            unint64_t v19 = v20;
          }
          while (!v16);
        }
        unint64_t v14 = (v4[6] & 1) + v4[5];
        this[8] = v20;
        uint64_t v4 = v20;
      }
      unint64_t v13 = v14;
    }
    while (v14 < v12);
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v13;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v8;
  return this;
}

void DiskImageUDIF::udif_extents_iterator_interface::clone(DiskImageUDIF::udif_extents_iterator_interface *this)
{
}

void DiskImageUDIF::udif_extents_iterator_interface::~udif_extents_iterator_interface(DiskImageUDIF::udif_extents_iterator_interface *this)
{
}

void DiskImageUDIF::~DiskImageUDIF(DiskImageUDIF *this)
{
  *(void *)this = &unk_26CF20060;
  udif::details::UDIF_base::~UDIF_base((DiskImageUDIF *)((char *)this + 64));
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CF20060;
  udif::details::UDIF_base::~UDIF_base((DiskImageUDIF *)((char *)this + 64));
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t DiskImageUDIF::is_writable(DiskImageUDIF *this)
{
  return 0;
}

void DiskImageUDIF::create_image_info(DiskImageUDIF *this)
{
}

void sub_21E2F0D88(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10F3C4052576DB9);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIF::supports_get_extents(DiskImageUDIF *this)
{
  return 1;
}

void DiskImageUDIF::get_extents_iterator_interface()
{
}

void sub_21E2F0E64(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C4092B25C2BLL);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIF::write()
{
  return -78;
}

_WORD *udif::details::block_attributes::block_attributes(_WORD *this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  *this = a2;
  uint64_t v5 = 0x10000800040002;
  int v6 = 4194336;
  __int16 v7 = 128;
  do
  {
    a2 &= *(unsigned __int16 *)((char *)&v5 + v2) ^ 0xFFFF;
    v2 += 2;
  }
  while (v2 != 14);
  if (a2)
  {
    __int16 v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "block_attributes";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &unk_26CF34B58;
    *((_WORD *)exception + 16) = v3;
  }
  return this;
}

void smart_enums::validators::validator_exception<unsigned short>::~validator_exception(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x223C249A0);
}

void smart_enums::validators::validator_exception<unsigned short>::reason(smart_enums::validators::validator_exception_base *a1@<X0>, void *a2@<X8>)
{
  __int16 v3 = (char *)smart_enums::validators::validator_exception_base::what(a1);
  std::string::basic_string[abi:ne180100]<0>(v15, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)v15[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  __int16 v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v11 = v9;
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](&v14);
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
}

unsigned char ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<details::udif_verify::is_csum_data_none_type(ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>(unsigned char ***result)
{
  ***double result = 1;
  return result;
}

unsigned char ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<details::udif_verify::is_csum_data_none_type(ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>(unsigned char ***result)
{
  ***double result = 0;
  return result;
}

void std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[12];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    __int16 v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 184;
      int v6 = (std::mutex *)(v4 - 168);
      std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(v4 - 96, *(void **)(v4 - 88));
      std::mutex::~mutex(v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__emplace_back_slow_path<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xB21642C8590B21) {
    unint64_t v9 = 0x1642C8590B21642;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  char v13 = v10;
  uint64_t v14 = &v10[184 * v4];
  unsigned __int8 v16 = &v10[184 * v9];
  std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>((uint64_t)v14, a2);
  int v15 = v14 + 184;
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_21E2F1420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(_DWORD *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v2 = (void *)(a2 + 96);
  uint64_t v3 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v3;
  uint64_t v4 = a1 + 96;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 88) = v2;
    *uint64_t v2 = 0;
    *(void *)(a2 + 104) = 0;
  }
  else
  {
    *(void *)(a1 + 88) = v4;
  }
  *(_OWORD *)(a1 + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  __n128 result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  *(void *)(a1 + 16std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return result;
}

uint64_t std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(184 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184;
      std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>(v7 - 184, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 184;
      *((void *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_21E2F1638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = (std::mutex *)(i + 16);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(i + 88, *(void **)(i + 96));
    std::mutex::~mutex(v6);
    uint64_t i = *(void *)(a2 + 32) + 184;
  }
}

uint64_t std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    uint64_t v5 = (std::mutex *)(i - 168);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(i - 96, *(void **)(i - 88));
    std::mutex::~mutex(v5);
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<337ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<337ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<337ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF34D38;
  di_log::logger_buf<di_log::log_printer<337ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<337ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E2F1D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<337ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 337;
    __int16 v22 = 2082;
    BOOL v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 337;
      __int16 v22 = 2082;
      BOOL v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

const void **CFAutoRelease<__CFArray const*>::~CFAutoRelease(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t udif::master_checksum_add<checksum::Any<locks::None,checksum::None,checksum::CRC32>>(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  udif::details::checksum::checksum((uint64_t)&v15, a2);
  int v4 = v15;
  long long v9 = v20;
  long long v10 = v21;
  long long v11 = v22;
  long long v12 = v23;
  long long v5 = v16;
  long long v6 = v17;
  long long v7 = v18;
  long long v8 = v19;
  udif::details::serialize_field((uint64_t)&v4, (uint64_t)v13);
  int v4 = &v14;
  *(void *)&long long v5 = (unint64_t)HIDWORD(v15) >> 3;
  checksum::Any<locks::None,checksum::None,checksum::CRC32>::add(a1, (uint64_t)&v4);
  return a1;
}

uint64_t checksum::Any<locks::None,checksum::None,checksum::CRC32>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v6 = &v5;
  ((void (*)(uint64_t **, uint64_t))off_26CF34DA8[v2])(&v6, a1 + 4);
  return a1;
}

uLong _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN8checksum3AnyIN5locks4NoneEJNS8_4NoneENS8_5CRC32EEE3addERK18checksum_algo_dataEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJNSC_ISB_EENSD_ISB_EEEEEEEEDcSI_DpT0_(const Bytef ****a1, _DWORD *a2)
{
  uLong result = crc32(*a2, ***a1, *((_DWORD *)**a1 + 2));
  *a2 = result;
  return result;
}

uint64_t ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::ChecksumScheduler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uLong result = *(_OWORD *)a2;
  if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
    unint64_t v3 = *(void *)a3;
  }
  else {
    unint64_t v3 = *(void *)a3 + 1;
  }
  uint64_t v5 = (_OWORD *)(a2 + 144);
  int v4 = *(void **)(a2 + 144);
  long long v6 = *(void **)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  if (v6 != v4)
  {
    while (1)
    {
      unint64_t v8 = v6[4];
      if ((v6[6] & 2) == 0) {
        ++v8;
      }
      if (v8 >= v3) {
        break;
      }
      long long v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          long long v6 = v10;
        }
        while (!v11);
      }
      long long v6 = v10;
      if (v10 == v4) {
        goto LABEL_29;
      }
    }
  }
  if (v6 == v4)
  {
LABEL_29:
    int v17 = *(_DWORD *)(a2 + 80);
    *(void *)(result + 96) = 0;
    *(void *)(result + 16) = 850045863;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    *(_DWORD *)(result + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v17;
    *(void *)(result + 104) = 0;
    *(void *)(result + 88) = result + 96;
    *(_OWORD *)(result + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *v5;
    *(_OWORD *)(result + 128) = *v5;
    *(_OWORD *)(result + 144) = *v5;
    *(unsigned char *)(result + 168) = 0;
    long long v6 = *(void **)(result + 112);
    if (v6 == *(void **)(result + 144)) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  long long v12 = v6;
  while (1)
  {
    unint64_t v13 = v12[4];
    if ((v12[6] & 2) == 0) {
      ++v13;
    }
    if (v13 > (unint64_t)(*(unsigned char *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1) {
      break;
    }
    uint64_t v14 = (void *)v12[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = (void *)v12[2];
        BOOL v11 = *v15 == (void)v12;
        long long v12 = v15;
      }
      while (!v11);
    }
    long long v12 = v15;
    if (v15 == v4)
    {
      long long v12 = *(void **)(a2 + 144);
      break;
    }
  }
  int v16 = *(_DWORD *)(a2 + 80);
  *(void *)(result + 96) = 0;
  *(void *)(result + 16) = 850045863;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(void *)(result + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(_DWORD *)(result + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v16;
  *(void *)(result + 88) = result + 96;
  *(void *)(result + 104) = 0;
  *(void *)(result + 11std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v6;
  *(void *)(result + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v7;
  *(void *)(result + 128) = v6;
  *(void *)(result + 136) = v7;
  *(void *)(result + 144) = v12;
  *(void *)(result + 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v7;
  *(unsigned char *)(result + 168) = 0;
  if (v6 != v12)
  {
LABEL_30:
    char v18 = *((unsigned char *)v6 + 48);
    uint64_t v19 = v6[4];
    if ((v18 & 2) == 0) {
      ++v19;
    }
    *(void *)(result + 16std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = v19;
  }
LABEL_33:
  *(unsigned char *)(result + 176) = 0;
  return result;
}

uint64_t ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::ContextAllocator(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 850045863;
  *(_OWORD *)(a1 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 1018212795;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2) {
    std::vector<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>>::reserve((void **)(a1 + 8), a2);
  }
  return a1;
}

void sub_21E2F2380(_Unwind_Exception *a1)
{
  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    BOOL v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v4 = *v2;
      if (*v2)
      {
        int64_t v5 = (std::__shared_weak_count *)v4[2];
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        uint64_t v6 = *v4;
        *int v4 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        MEMORY[0x223C249A0](v4, 0x20C40960023A9);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t ***)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,void>(uint64_t a1@<X1>, void *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  long long v10 = operator new(0x90uLL);
  std::__shared_ptr_emplace<BackendSG>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,std::allocator<BackendSG>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_21E2F259C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<BackendSG>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,std::allocator<BackendSG>,0>(void *a1, uint64_t a2, void *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF34DC8;
  BackendSG::BackendSG(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_21E2F2604(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BackendSG>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF34DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendSG>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF34DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<BackendSG>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ExecutionSchedulerSortedConsecutiveIt<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,locks::Std,boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>::abort(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  *(unsigned char *)(a1 + 15std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 1;
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1 + 72, *(void **)(a1 + 80));
  *(void *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 8std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  std::mutex::unlock((std::mutex *)a1);
}

void std::shared_ptr<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>::shared_ptr[abi:ne180100]<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E2F2794(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_begin_catch(a1);
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(locks::Std)#1}::operator()<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_21E2F27AC(_Unwind_Exception *a1)
{
}

void ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(locks::Std)#1}::operator()<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (std::mutex *)(*a1 + 32);
  std::mutex::lock(v4);
  int64_t v5 = *(void **)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 8);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v3 + 24, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    int v17 = *(char **)(v3 + 8);
    int v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int v16 = *(char **)(v3 + 8);
    }
    *(void *)(v3 + 8) = v14;
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v3 + 16) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_21E2F28D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *)#1},std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_pointer<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *)#1},std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *)#1},std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN16ContextAllocatorIN5locks3StdEJNSt3__110unique_ptrIN17DiskImageUDIFReadI10UDIFReaderINS0_4NoneEE13DiskImageUDIFE11ContextUDIFENS2_14default_deleteISA_EEEENS2_10shared_ptrI9BackendSGEEEE8allocateEvEUlT_E_))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF34D38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E2F2A0C(_Unwind_Exception *a1)
{
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x70uLL);
    uint64_t v6[2] = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 24);
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((void *)v6 + 7) = v8;
    void v6[4] = *(_OWORD *)(a3 + 32);
    *((void *)v6 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = *(void *)(a3 + 48);
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *((void *)v6 + 13) = *(void *)(a3 + 72);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, void *a2, unint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  char v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a3, v4 + 4))break; {
        char v4 = (void *)*v7;
        }
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(v8, a3)) {
        break;
      }
      long long v5 = v7 + 1;
      char v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1)
      {
LABEL_4:
        if ((v2 & 2) != 0) {
          unint64_t v5 = v4;
        }
        else {
          unint64_t v5 = v4 + 1;
        }
        unint64_t v6 = *a2;
        if ((a2[2] & 2) == 0) {
          ++v6;
        }
        if (v5 < v6) {
          return 1;
        }
        if (v6 == v5) {
          return (v2 & 1) + v3 - 1 < (a2[2] & 1) + a2[1] - 1;
        }
        return 0;
      }
    }
    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_4;
    }
  }
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3) {
      BOOL v9 = a2[1] < *a2;
    }
    else {
      BOOL v9 = *a2 >= a2[1];
    }
  }
  else
  {
    unint64_t v10 = a2[1];
    BOOL v9 = *a2 >= v10 || *a2 + 1 >= v10;
  }
  return !v9;
}

void boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      unint64_t v12 = (std::__shared_weak_count **)(v10 + 40);
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v12);
        }
        v12 += 7;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_21E2F2D0C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    __n128 result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a5 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = result;
    *(void *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    *(void *)(a2 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    *(void *)(a5 + 48) = *(void *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  if (a6)
  {
    uint64_t v9 = a6;
    uint64_t v10 = a5;
    do
    {
      *(void *)uint64_t v10 = *(void *)a7;
      long long v11 = *(_OWORD *)(a7 + 8);
      *(void *)(v10 + 24) = *(void *)(a7 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      __n128 result = *(__n128 *)(a7 + 32);
      *(__n128 *)(v10 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = result;
      *(void *)(a7 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(a7 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
      *(void *)(v10 + 48) = *(void *)(a7 + 48);
      a7 += 56;
      v10 += 56;
      --v9;
    }
    while (v9);
  }
  if (a3 != a4)
  {
    uint64_t v12 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v12 = *(void *)a3;
      long long v13 = *(_OWORD *)(a3 + 8);
      *(void *)(v12 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v12 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = result;
      *(void *)(a3 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(a3 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
      *(void *)(v12 + 48) = *(void *)(a3 + 48);
      a3 += 56;
      v12 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

void boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x24924924924924ALL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = operator new(56 * v11);
  boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x249249249249249;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x249249249249249 - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  uint64_t v9 = &a2[v3];
  if (v8 < 0x249249249249249) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)(v10 + 40);
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v12);
        }
        v12 += 7;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_21E2F2FF0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    *(_OWORD *)(a5 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
    *(void *)(a2 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
    *(void *)(a5 + 48) = *(void *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  *(void *)a5 = *(void *)a7;
  long long v8 = *(_OWORD *)(a7 + 8);
  *(void *)(a5 + 24) = *(void *)(a7 + 24);
  *(_OWORD *)(a5 + 8) = v8;
  __n128 result = *(__n128 *)(a7 + 32);
  *(__n128 *)(a5 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = result;
  *(void *)(a7 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a7 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
  *(void *)(a5 + 48) = *(void *)(a7 + 48);
  if (a3 != a4)
  {
    uint64_t v10 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v10 = *(void *)a3;
      long long v11 = *(_OWORD *)(a3 + 8);
      *(void *)(v10 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v10 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = result;
      *(void *)(a3 + 3std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = 0;
      *(void *)(a3 + 4std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]((uint64_t *)this + 1, 0) = 0;
      *(void *)(v10 + 48) = *(void *)(a3 + 48);
      a3 += 56;
      v10 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[12];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(a2);
  return v3;
}

void *boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 40);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 7;
      --v2;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != (void *)*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t di_asif::details::dir_base::calc_num_real_elements(di_asif::details::dir_base *this)
{
  unint64_t v1 = *((void *)this + 4);
  unint64_t v2 = v1 % (*((void *)this + 6) + 1);
  uint64_t result = v1 - v2;
  if (v1 == v2)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Invalid chunk size", 0xFFFFFFEA);
  }
  return result;
}

unint64_t di_asif::details::unmap_iterator_t::make_val(di_asif::details::unmap_iterator_t *this)
{
  unint64_t v1 = (void *)*((void *)this + 2);
  unint64_t v2 = *((void *)this + 7);
  uint64_t v3 = v2 * *v1;
  unint64_t v4 = *((void *)this + 5);
  unint64_t v5 = v3 + v4;
  unint64_t v6 = v1[1] * v2;
  if (v4 < v6) {
    return v5 / v2;
  }
  *((void *)this + 5) = 0;
  uint64_t v7 = *(void *)this;
  unint64_t v8 = *((void *)this + 1);
  if (v8 <= ((uint64_t)v1 - *(void *)this) >> 4) {
    return v5 / v2;
  }
  *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v1 + 2;
  if (v8 != ((uint64_t)v1 - v7 + 16) >> 4)
  {
    unint64_t v9 = v1[2] * v2;
    if (v9 < *((void *)this + 9))
    {
      unint64_t v5 = v1[2] * v2;
      return v5 / v2;
    }
  }
  return 0;
}

di_asif::details::unmap_iterator_t *di_asif::details::unmap_iterator_t::unmap_iterator_t(di_asif::details::unmap_iterator_t *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = a5;
  *((void *)this + 8) = a6;
  unint64_t v9 = (uint64_t *)(a2 + 16 * a8);
  *((void *)this + 9) = a7;
  if (a8 == a3)
  {
LABEL_6:
    *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v9;
  }
  else
  {
    uint64_t v10 = 16 * a3 - 16 * a8;
    while (1)
    {
      uint64_t v11 = *v9;
      if ((v9[1] + *v9) * a5 >= a6) {
        break;
      }
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        unint64_t v9 = (uint64_t *)(a2 + 16 * a3);
        goto LABEL_6;
      }
    }
    *((void *)this + std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::~__value_func[abi:ne180100]((void *)this + 2) = v9;
    unint64_t v13 = v11 * a5;
    if (v11 * a5 < a7)
    {
      BOOL v14 = a6 >= v13;
      unint64_t v15 = a6 - v13;
      if (v15 != 0 && v14) {
        *((void *)this + 5) = v15;
      }
      *((void *)this + 3) = di_asif::details::unmap_iterator_t::make_val(this);
      *((void *)this + 4) = v16;
    }
  }
  return this;
}